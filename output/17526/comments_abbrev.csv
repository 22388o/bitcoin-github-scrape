achow101,2019-11-19 22:49:38,"Some simulations results: https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109\n\nI think the important thing to see here is that this is the same or better in every metric except for ""mean UTXOs"". But I think the thing to note here is that it's about the same mean UTXOs as the positive only effective value simulation. So I think the different there is primarily due to dust outputs ",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-555752605,555752605,
DrahtBot,2019-11-20 02:17:12,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17211](https://github.com/bitcoin/bitcoin/pull/17211) (Allow fundrawtransaction and walletcreatefundedpsbt to take exter",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-555804156,555804156,
Xekyo,2020-06-15 02:37:58,"Concept ACK. The results look promising!\n\n> ""Better"" is defined as having lower fees. If the fees are the same, then the one that chooses more inputs (so consolidates more). If that is also the same, Knapsack is then used (i.e. Knapsack is preferred).\n\nSince you already have a waste metric in BnB, have you considered using the waste metric to pick between the Knapsack and SRD?",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-643871088,643871088,
achow101,2020-06-15 15:52:57,"@Xekyo This PR is built on top of 2 other PRs. It would be better to review those first as many of your comments are for the changes in those PRs. You should start with #17458, then #17331, then this one.",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-644218689,644218689,
Xekyo,2020-06-15 16:45:33,"@achow101: Okay, I'll take a look at them.",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-644246738,644246738,
Xekyo,2020-12-08 23:53:46,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-741261841,741261841,
jonatack,2021-02-04 18:20:13,"Concept ACK, will review if #17331 is merged. ",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-773510351,773510351,
achow101,2021-05-20 20:37:26,Converting this to a draft as I will be introducing some refactors and other changes that this will be based on.,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-845460118,845460118,
achow101,2021-05-21 00:31:13,I've rebased this onto #22009 because it uses the waste metric to decide which solution to use which I think is a much better and more consistent way than what was implemented here previously.,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-845569438,845569438,
Xekyo,2021-09-03 17:10:22,"\n> I've rebased this onto #22009 because it uses the waste metric to decide which solution to use which I think is a much better and more consistent way than what was implemented here previously.\n\nIn the opening comment of the PR, you mention that BnB is always preferred and if there is no BnB solution, the better of Knapsack or SRD is picked.\n\nShouldn't all three selection results simpl",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-912685694,912685694,
achow101,2021-09-03 17:46:10,Updated the OP,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-912705566,912705566,
instagibbs,2021-09-03 22:50:07,"seems like ""fallback"" is now a misnomer?\n\nAny simulations/results/intuitions on how often each of the algorithms are likely to be picked?",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-912850858,912850858,
instagibbs,2021-09-03 23:52:09,"concept ACK, I really like the waste heuristic as a picker if nothing else to dislodge bikeshedding about coin selection hierarchies. I'd like to see how much this changes the frequency of change-less solutions in simulations since BnB isn't preferred anymore, since I believe the argument is change-less solutions are simply only preferred after this in an economic sense, not privacy/ending the cha",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-912867601,912867601,
achow101,2021-09-04 00:15:02,"> seems like ""fallback"" is now a misnomer?\n\nUpdated the title.\n\n> Any simulations/results/intuitions on how often each of the algorithms are likely to be picked?\n\nNot currently. Perhaps @Xekyo has something?",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-912872614,912872614,
Xekyo,2021-09-06 16:18:28,"> > Any simulations/results/intuitions on how often each of the algorithms are likely to be picked?\n> \n> Not currently. Perhaps @Xekyo has something?\n\nThat depends heavily on the amount and value diversity of the UTXOs that are available. I've seen an exchange wallet do 93% BnB transactions across a timeframe of four weeks just after enabling BnB while they were chewing through a large UTX",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-913755287,913755287,
Xekyo,2021-09-09 19:50:52,"> since I believe the argument is change-less solutions are simply only preferred after this in an economic sense, not privacy/ending the chaining of change way.\n\nGiven that the change output has a big negative impact on the waste score, the BnB solution should always be preferred, if it has the same count of inputs (given the same type). Due to usually needing to combine multiple inputs in or",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-916389603,916389603,
achow101,2021-09-13 18:33:41,I've ran simulations (using the same data) on a recent commit of master as well as on this PR. I've uploaded the results to a gist [for master](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109#file-results-0053a5fc7d912d597cd6dc7376b479420d1eae1c0-md) and [for this PR](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109#file-results-srd-3eb40005f373032a4d877ffdcc33c1,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-918467984,918467984,
Xekyo,2021-09-15 16:33:41,"\n> I've ran simulations (using the same data) on a recent commit of master as well as on this PR. I've uploaded the results to a gist [for master](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109#file-results-0053a5fc7d912d597cd6dc7376b479420d1eae1c0-md) and [for this PR](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109#file-results-srd-3eb40005f373032a4d877ffdc",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-920176480,920176480,
achow101,2021-09-15 22:20:52,"I redid the simulations with some fixes to how data is gathered and gathered a lot more data. The original simulation was accidentally incorrectly counting usage due to the double selection that occurs for the optimistic avoidpartialspends. I am now also measuing how many uneconomical UTXOs are being spent, and how many changeless txs of each algorithm produces. The aforementioned gist has been up",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-920426907,920426907,
glozow,2021-09-24 09:29:17,"reACK 3633b66 via `git range-diff  981b9d1...3633b66`, thanks for taking the suggestions",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-926484484,926484484,
laanwj,2021-09-27 16:22:04,Concept and code review ACK 3633b667ffca5a715d9fb27e977515c1e24f600a,https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-928044702,928044702,
MarcoFalke,2021-09-28 14:15:55,"Does this cause the intermittent wallet_basic issues?\n\n```\n test  2021-09-28T12:06:48.167000Z TestFramework (ERROR): Assertion failed \n                                   Traceback (most recent call last):\n                                     File ""/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py"", line 131, in main\n     ",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-929273533,929273533,
achow101,2021-09-28 16:10:18,"> Does this cause the intermittent wallet_basic issues?\n\nPotentially. The main thing is that this change makes coin selection non-deterministic which means that tests which rely on assuming certain UTXOs are being selected are no longer correct. I thought I got all of the tests that did that, but it is possible that a few were missed.",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-929372767,929372767,
S3RK,2021-09-30 07:43:00,"Post merge ACK 3633b66\n\nReviewed code and independently reproduced simulation results. Confirmed that adding SRD increases amount of changeless solutions.",https://github.com/bitcoin/bitcoin/pull/17526#issuecomment-930950513,930950513,
Xekyo,2020-06-15 02:49:52,"`not_input_fees` is a bit hard to grok. How about `fixed_fees`, `payload_fees`, or `fees_excluding_inputs`?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439905689,439905689,src/wallet/wallet.cpp
Xekyo,2020-06-15 03:05:28,Note to self: I assume this gets the minimum of the current fee rate and the 1008 block target.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439908914,439908914,src/wallet/wallet.cpp
Xekyo,2020-06-15 03:07:40,"Note to self: What was DiscardRate exactly? \n\nWhy do you use `DiscardRate` here and not `long_term_feerate`?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439909357,439909357,src/wallet/wallet.cpp
Xekyo,2020-06-15 04:03:34,I assume `positive_groups` pertains to the `spendable_utxo`?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439919960,439919960,src/wallet/wallet.cpp
Xekyo,2020-06-15 04:05:57,"I do not understand why they are called `OutputGroup`. I figure you are filtering each UTXO for whether it is economically spendable. How are these UTXO a group, and not just single UTXO?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439920381,439920381,src/wallet/wallet.cpp
Xekyo,2020-06-15 04:08:52,`all_groups` here are all UTXO not just the economically spendable?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439920893,439920893,src/wallet/wallet.cpp
Xekyo,2020-06-15 04:11:09,"Shouldn't the 0 be the second outcome of the tertiary statement here?\nIf `coin_selection_params.m_subtract_fee_outputs` is truthy, shouldn't then the fee be deducted?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439921357,439921357,src/wallet/wallet.cpp
Xekyo,2020-06-15 04:14:38,"Aaah, are we talking about ancestry sets of outputs?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439921987,439921987,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:05:35,"I'm curious, how come `coin.m_input_bytes` can be smaller than 0 here?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439932004,439932004,src/wallet/coinselection.cpp
Xekyo,2020-06-15 05:08:22,Wouldn't the above case where `coin.m_input_bytes` is smaller than 0 overstate the `effective_value` of the coin here? Would it not be better to set the `effective_value` of a coin whose size is haywire to 0 or negative here?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439932590,439932590,src/wallet/coinselection.cpp
Xekyo,2020-06-15 05:10:16,"""Positive"" is rather unspecific. How about calling this `GetSpendableGroup()`?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439932954,439932954,src/wallet/coinselection.cpp
Xekyo,2020-06-15 05:14:00,Isn't `coin_selection_params.effective_fee` a fee rate?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439933778,439933778,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:18:22,"Nice clean-up. From what I understand, `actual_target` is the sum of the recipient outputs plus the precalculable overhead and output costs. If that's the case, maybe amend the comment to clarify that. What do you think of `selection_target` instead of `actual_target`?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439934827,439934827,src/wallet/coinselection.cpp
Xekyo,2020-06-15 05:21:20,I think that's a fee rate. Would not `effective_fee_rate` be then a better name?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439935546,439935546,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:25:38,"Now that I think about it… assuming this is pertaining to a mode where the fees are deducted from the recipient output, and the output groups are considered with their actual values instead of their fee rates: have you considered the impact on the outcome for BnB selection? Would be kinda harsh if it suddenly considered all dust inputs spendable, burned a bunch of economically unspendable inputs a",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439936501,439936501,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:28:13,I've seen the witness element count been counted towards the witness block usually before. Are people now counting it to the transaction header? How come we are not counting in WU? :thinking: ,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439937105,439937105,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:32:14,I'm confused. Previously I thought that `m_subtract_fee_outputs` deducts the cost of the transaction from the recipient outputs. This comment seems to indicate that it's just the cost of the outputs.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439938015,439938015,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:35:39,"Given that this would be 32 B, but a non-segwit change output could be 34 B, wouldn't it be more conservative to use 34 B? Can we rely that it will always use segwit addresses?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439938861,439938861,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:37:31,"""change output""",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439939307,439939307,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:37:59,Does Bitcoin Core not use BIP-69? Or will the outputs be sorted afterwards when the amounts are all fixed?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439939410,439939410,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:42:54,It's surprising to me that the `nFeeRet` could be lower than a minimum fee here. Wouldn't the fee rate on the input side of transaction building need to be bigger than `GetMinimumFee`?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439940697,439940697,src/wallet/wallet.cpp
Xekyo,2020-06-15 05:45:18,Why did you overwrite `nFeeNeeded` with `nFeeRet` here?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r439941313,439941313,src/wallet/wallet.cpp
achow101,2020-06-15 15:29:11,"The have the same scriptPubKey. IIRC it's for the avoid reuse stuff. Most of the time, they will be single UTXOs.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440260594,440260594,src/wallet/wallet.cpp
achow101,2020-06-15 15:29:21,Yes.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440260721,440260721,src/wallet/wallet.cpp
achow101,2020-06-15 15:33:21,Yes. It is a `CFeeRate`,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440263470,440263470,src/wallet/wallet.cpp
achow101,2020-06-15 15:41:32,"This parameter is just generally all of the overhead, regardless of it's location in a transaction. It's in vbytes, which is `weight / 4`",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440269018,440269018,src/wallet/wallet.cpp
achow101,2020-06-15 15:45:01,"`tx_noinputs_size` becomes `not_input_fees` later which ultimately increases the selection target so that the selection target covers the fees for the transaction. When subtracting the fee from the outputs, the selection target should not be increasing to cover the fees.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440271375,440271375,src/wallet/wallet.cpp
achow101,2020-06-15 15:48:47,"This is moved code, so I think it should remain as is.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440273856,440273856,src/wallet/wallet.cpp
achow101,2020-06-15 15:49:18,No.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440274200,440274200,src/wallet/wallet.cpp
achow101,2020-06-15 15:50:51,`nFeeNeeded` no longer exists. This should have been removed already. I probably forgot to rebase this branch.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440275298,440275298,src/wallet/wallet.cpp
achow101,2020-06-15 16:19:55,The default value is -1 to indicate that it isn't set.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440294189,440294189,src/wallet/coinselection.cpp
achow101,2020-06-15 16:21:27,How is Positive unspecific? The OutputGroup has only Positive effective values.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r440295172,440295172,src/wallet/coinselection.cpp
Xekyo,2020-12-08 23:27:47,Consider naming this `selected_eff_value`,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538887490,538887490,src/wallet/coinselection.cpp
Xekyo,2020-12-08 23:35:09,Would be nice if the order of the parameters on `KnapsackSolver` and `SelectCoinsSRD` matched.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538890510,538890510,src/wallet/wallet.cpp
Xekyo,2020-12-08 23:45:46,"How about:\n\n```\nif (knapsack_ret) {\n        setCoinsRet = knapsack_coins;\n        nValueRet = knapsack_value;\n}\nif (srd_ret) {\n    // Use SRD if knapsack had no solution, SRD has lower fees, or SRD has more inputs for same fees\n    if (!knapsack_ret || srd_fees < knapsack_fees || srd_fees == knapsack_fees && srd_coins.size() > knapsack_coins.size()) {\n        setCoinsRet = srd_",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538894963,538894963,src/wallet/wallet.cpp
achow101,2020-12-09 01:27:26,"It would, but changes to `KnapsackSolver` are out of scope for this PR. I prefer to use the current order for `SelectCoinsSRD`.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538934539,538934539,src/wallet/wallet.cpp
achow101,2020-12-09 01:36:20,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538937914,538937914,src/wallet/coinselection.cpp
achow101,2020-12-09 01:36:26,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r538937958,538937958,src/wallet/wallet.cpp
glozow,2021-04-29 21:43:54,"Need dat doxygen (also to confirm my understanding)\n```suggestion\n/** Select coins by Single Random Draw, picking random OutputGroups from utxo_pool until the target\n * value is satisfied.\n * @param[in]   utxo_pool   All eligible OutputGroups no additional filter will be applied.\n * @param[out]  out_set     Populated with the coins selected. Any coins in the set will be cleared\n *     ",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r623422858,623422858,src/wallet/coinselection.h
glozow,2021-04-29 22:20:05,"```suggestion\n    const bool knapsack_ret = KnapsackSolver(nTargetValue + change_fee, all_groups, knapsack_coins, knapsack_value);\n```",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r623439578,623439578,src/wallet/wallet.cpp
glozow,2021-04-29 22:20:18,"```suggestion\n    const bool srd_ret = SelectCoinsSRD(positive_groups, nTargetValue + change_fee + MIN_FINAL_CHANGE, srd_coins, srd_value);\n```",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r623439659,623439659,src/wallet/wallet.cpp
glozow,2021-04-29 22:23:19,"Pretty basic conceptual question, but why only SRD once? Why not run it, say, 100 times, and pick the best one before comparing with knapsack?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r623440967,623440967,src/wallet/coinselection.cpp
glozow,2021-04-29 22:35:00,"I know you only pass in positive groups, but I wonder if it could be a good sanity check to add an `Assume(group.effective_value > 0)` here?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r623445784,623445784,src/wallet/coinselection.cpp
jnewbery,2021-05-03 16:32:13,Please add doxygen comments for new functions.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625209418,625209418,src/wallet/coinselection.h
jnewbery,2021-05-03 16:37:01,"This calls `std::swap()` up to n-1 times on utxo pool, which seems unnecessary. How about creating a vector of ints from 0 to n-1, shuffling those, and then using that to index into `utxo_pool`. That'd also allow `utxo_pool` to be passed in as a const reference.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625212261,625212261,src/wallet/coinselection.cpp
jnewbery,2021-05-03 16:57:26,"Consider returning a `std::optional<std::pair<std::set<CInputCoin>, CAmount>>` rather than using out references and returning a bool to indicate success.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625224809,625224809,src/wallet/coinselection.cpp
jnewbery,2021-05-03 16:58:06,"Is there a reason this param is named `utxo_pool` rather than `groups`?\n\n```suggestion\nbool SelectCoinsSRD(std::vector<OutputGroup>& groups, const CAmount& target_value, std::set<CInputCoin>& out_set, CAmount& value_ret)\n```",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625225206,625225206,src/wallet/coinselection.cpp
jnewbery,2021-05-03 16:58:35,"Pass simple types like `CAmount` by value:\n\n```suggestion\nbool SelectCoinsSRD(std::vector<OutputGroup>& utxo_pool, CAmount target_value, std::set<CInputCoin>& out_set, CAmount& value_ret)\n```",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625225512,625225512,src/wallet/coinselection.cpp
Xekyo,2021-06-11 17:42:07,"That would minimize the input set at high fees and maximize the input set at low fees. If you wanted that, you could directly do largest first selection at high fees and smallest first at low fees. My gut feeling would be that it would grind down the larger UTXOs and very aggressively consolidate your smallest UTXOs at low fees, potentially leading to a large count of similarly sized UTXOs in the ",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r650163605,650163605,src/wallet/coinselection.cpp
achow101,2021-09-02 18:40:13,`utxo_pool` is a more descriptive name.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701334082,701334082,src/wallet/coinselection.cpp
achow101,2021-09-02 19:26:58,Added docs.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701362845,701362845,src/wallet/coinselection.h
achow101,2021-09-02 19:27:09,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701362995,701362995,src/wallet/coinselection.cpp
achow101,2021-09-02 19:27:15,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701363035,701363035,src/wallet/coinselection.h
achow101,2021-09-02 19:27:20,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701363091,701363091,src/wallet/coinselection.cpp
achow101,2021-09-02 19:27:46,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701363362,701363362,src/wallet/coinselection.cpp
achow101,2021-09-02 19:27:52,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701363413,701363413,src/wallet/coinselection.cpp
naumenkogs,2021-09-03 13:09:13,"sorry, I can't wrap my head around it. If it's assumed to be 0 (prev line), what's the point of adding it and checking it below?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r701878094,701878094,src/wallet/coinselection.cpp
achow101,2021-09-03 15:52:35,"Oops, it's supposed to be `>`. Fixed.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702005597,702005597,src/wallet/coinselection.cpp
Xekyo,2021-09-03 18:06:12,"```suggestion\n/** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible\n```",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702081289,702081289,src/wallet/coinselection.h
Xekyo,2021-09-03 18:07:53,Wouldn't it be easier to shuffle the `utxo_pool` directly? Or is this the same object that is used for the other selection algorithms?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702082201,702082201,src/wallet/coinselection.cpp
Xekyo,2021-09-03 18:14:10,I saw that a selection result object is being introduced in https://github.com/bitcoin/bitcoin/pull/22019. Are you planning for 22019 to succeed or precede this PR?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702085274,702085274,src/wallet/coinselection.cpp
Xekyo,2021-09-03 18:17:34,"I would prefer if all three selection methods would receive the actual `selection_target` and they would internally add `MIN_FINAL_CHANGE` where applicable. Whether or not an input parameter needs to be amended by a global constant makes more sense as an implementation detail of the called function than each callsite needing to be aware of it, and it would allow the function calls to the selection",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702086961,702086961,src/wallet/spend.cpp
achow101,2021-09-03 18:35:18,This change was suggested in https://github.com/bitcoin/bitcoin/pull/17526#discussion_r625212261,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702095642,702095642,src/wallet/coinselection.cpp
achow101,2021-09-03 18:36:34,It doesn't particularly matter. Currently I would like for this PR to precede 22019,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702096204,702096204,src/wallet/coinselection.cpp
achow101,2021-09-03 18:37:25,"Currently that is difficult to do with the way that we do the waste calculation. I think this can be done in the future, especially post #22019",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702096630,702096630,src/wallet/spend.cpp
achow101,2021-09-03 18:37:29,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702096662,702096662,src/wallet/coinselection.h
instagibbs,2021-09-03 23:09:26,"any simulations/intuitions on what these change outputs look like vs knapsack values, aside from the difference in constant?\n\nWhy was this constant `MIN_FINAL_CHANGE` defined but never used before? How was it picked?",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702194501,702194501,src/wallet/spend.cpp
achow101,2021-09-04 00:16:14,It looks like we lost it during the effective value change. `MIN_FINAL_CHANGE` used to be the minimum allowed change output with the looping behavior. Perhaps this should target `MIN_CHANGE` and drop `MIN_FINAL_CHANGE`?,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702206294,702206294,src/wallet/spend.cpp
Xekyo,2021-09-06 16:20:32,"Okay, thanks",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r702999847,702999847,src/wallet/coinselection.cpp
glozow,2021-09-09 10:29:41,"In 6206f3c378\n\nIt might be helpful to document that all groups should have positive effective values here",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r705200290,705200290,src/wallet/coinselection.h
glozow,2021-09-09 10:58:29,"in 3c00f2d72d8db7109fa6d2fae10b65c485d6ae2c\n\nFeel free to ignore, but this naming is a bit confusing since it's locking everything _but_ this type?\n```suggestion\n    def lock_outputs_except_type(self, wallet, outputtype):\n```\n",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r705219285,705219285,test/functional/rpc_fundrawtransaction.py
glozow,2021-09-09 11:12:53,"in 4b0e091cccb6844f1fc4ab76c911f5293d842800\n\nReview note, I had a hard time parsing this, but it's testing ""all of the inputs of `fundedtx` come from `inputs`"" and is the same thing as\n\n```suggestion\n        assert all((txin[""txid""], txin[""vout""]) in inputs for txin in tx_dec[""vin""])\n```\n",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r705228680,705228680,test/functional/rpc_fundrawtransaction.py
glozow,2021-09-09 11:27:09,"Not related to this PR, but this call shouldn't have `include_unsafe: True`, right? The coins we're testing are confirmed and no longer unsafe.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r705237985,705237985,test/functional/rpc_fundrawtransaction.py
achow101,2021-09-23 17:25:00,"No, it's (supposed to be) locking everything of the given type.",https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715006626,715006626,test/functional/rpc_fundrawtransaction.py
achow101,2021-09-23 17:26:58,Yes.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715008080,715008080,test/functional/rpc_fundrawtransaction.py
achow101,2021-09-23 17:33:32,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715012829,715012829,src/wallet/coinselection.h
achow101,2021-09-23 17:33:37,Done,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715012921,715012921,test/functional/rpc_fundrawtransaction.py
achow101,2021-09-23 17:33:52,I've fixed this issue while making changes in the vicinity.,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715013077,715013077,test/functional/rpc_fundrawtransaction.py
glozow,2021-09-24 09:20:32,woops :scream:,https://github.com/bitcoin/bitcoin/pull/17526#discussion_r715455380,715455380,test/functional/rpc_fundrawtransaction.py
meshcollider,2021-09-26 02:50:29,nit: indices > indexes :),https://github.com/bitcoin/bitcoin/pull/17526#discussion_r716129134,716129134,src/wallet/coinselection.cpp
