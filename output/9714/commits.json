[
  {
    "sha": "4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWMxYzMzMGFkNjg5NDY4OGM4NDdkZDgwNmZlN2IyZGViNmY3ZDIz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T19:27:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-15T21:42:51Z"
      },
      "message": "Return correct error codes from bumpfee()\n\nThe bumpfee() RPC was returning misleading or incorrect error codes\n(for example RPC_INVALID_ADDRESS_OR_KEY when the transaction was not\nBIP125 replacable). This commit fixes those error codes:\n\n- RPC_INVALID_ADDRESS_OR_KEY if an invalid address was provided:\n    - Invalid change address given\n- RPC_INVALID_PARAMETER if a single (non-address/key) parameter is incorrect\n    - confTarget and totalFee options should not both be set.\n    - Invalid confTarget\n    - Insufficient totalFee (cannot be less than required fee)\n- RPC_WALLET_ERROR for any other error\n    - Transaction has descendants in the wallet\n    - Transaction has descendants in the mempool\n    - Transaction has been mined, or is conflicted with a mined transaction\n    - Transaction is not BIP 125 replaceable\n    - Transaction has already been bumped\n    - Transaction contains inputs that don't belong to the wallet\n    - Transaction has multiple change outputs\n    - Transaction does not have a change output\n    - Fee is higher than maxTxFee\n    - New fee rate is less than the minimum fee rate\n    - Change output is too small.\n\nThis commit also updates the test cases to explicitly test the error code.",
      "tree": {
        "sha": "93c803e6f8d0e7bc8dbf927b37240d4d43ebed2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93c803e6f8d0e7bc8dbf927b37240d4d43ebed2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ac1c330ad6894688c847dd806fe7b2deb6f7d23/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b860915f8b0dae98e57a254d11575ea41f5c5a79"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 20,
      "deletions": 22
    },
    "files": [
      {
        "sha": "5ff9b5578e66151745b4def9d76c50892cb39964",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ac1c330ad6894688c847dd806fe7b2deb6f7d23/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ac1c330ad6894688c847dd806fe7b2deb6f7d23/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
        "patch": "@@ -129,7 +129,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n-    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -149,7 +149,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -160,7 +160,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_jsonrpc(-4, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -175,7 +175,7 @@ def test_small_output_fails(rbf_node, dest_address):\n                             Decimal(\"0.00100000\"),\n                             {dest_address: 0.00080000,\n                              get_change_address(rbf_node): Decimal(\"0.00010000\")})\n-    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -210,15 +210,15 @@ def test_rebumping(rbf_node, dest_address):\n     rbf_node.settxfee(Decimal(\"0.00001000\"))\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n-    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -269,7 +269,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()\n-    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -316,9 +316,7 @@ def submit_block_with_tx(node, tx):\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.solve()\n-    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n-    if error is not None:\n-        raise Exception(error)\n+    node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n "
      },
      {
        "sha": "140555e89c336345d261a9624ed24bd59df88be9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ac1c330ad6894688c847dd806fe7b2deb6f7d23/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ac1c330ad6894688c847dd806fe7b2deb6f7d23/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ac1c330ad6894688c847dd806fe7b2deb6f7d23",
        "patch": "@@ -2600,7 +2600,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n \n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"changeAddress must be a valid bitcoin address\");\n \n             changeAddress = address.Get();\n         }\n@@ -2753,33 +2753,33 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n     if (pwalletMain->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has descendants in the wallet\");\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it = mempool.mapTx.find(hash);\n         if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has descendants in the mempool\");\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n     }\n \n     if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n     }\n \n     // figure out which output was change\n@@ -2788,13 +2788,13 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n         if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n     }\n \n     // Calculate the expected size of the new transaction.\n@@ -2885,7 +2885,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n      if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_MISC_ERROR,\n+         throw JSONRPCError(RPC_WALLET_ERROR,\n                             strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                       FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n      }\n@@ -2897,7 +2897,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n     }\n \n     // Now modify the output to increase the fee.\n@@ -2907,7 +2907,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CMutableTransaction tx(*(wtx.tx));\n     CTxOut* poutput = &(tx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)"
      }
    ]
  }
]