[
  {
    "sha": "1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjllNmQzYzFhMGYwZTdlZWZmNWRkYjJlMDM4NjkxMWZlOWFiMmI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T14:50:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T22:31:35Z"
      },
      "message": "Add support for unique_ptr and shared_ptr to memusage",
      "tree": {
        "sha": "78d4478c7c7cecf0c94e2975b719bef5ff75bb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78d4478c7c7cecf0c94e2975b719bef5ff75bb70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d46b8b50fc3e725df75378db2d81aa48f9a1bd74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d46b8b50fc3e725df75378db2d81aa48f9a1bd74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d46b8b50fc3e725df75378db2d81aa48f9a1bd74"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3810bfad07a919083ce60f61eb2f75ee5ac0d778",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
        "patch": "@@ -72,6 +72,15 @@ struct stl_tree_node\n     X x;\n };\n \n+struct stl_shared_counter\n+{\n+    /* Various platforms use different sized counters here.\n+     * Conservatively assume that they won't be larger than size_t. */\n+    void* class_type;\n+    size_t use_count;\n+    size_t weak_count;\n+};\n+\n template<typename X>\n static inline size_t DynamicUsage(const std::vector<X>& v)\n {\n@@ -122,6 +131,21 @@ static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n }\n \n+template<typename X>\n+static inline size_t DynamicUsage(const std::unique_ptr<X>& p)\n+{\n+    return p ? MallocUsage(sizeof(X)) : 0;\n+}\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n+{\n+    // A shared_ptr can either use a single continuous memory block for both\n+    // the counter and the storage (when using std::make_shared), or separate.\n+    // We can't observe the difference, however, so assume the worst.\n+    return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n+}\n+\n // Boost data structures\n \n template<typename X>"
      }
    ]
  },
  {
    "sha": "8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDM5ZDdhMmNmMTU1OWUwYmE0MDY4MWIwYWI5MGYxM2VhNmMwNjE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T15:06:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T22:31:43Z"
      },
      "message": "Switch CTransaction storage in mempool to std::shared_ptr",
      "tree": {
        "sha": "fa9d8274ff2d42f67b06f107b37b4f2f722a84c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa9d8274ff2d42f67b06f107b37b4f2f722a84c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9e6d3c1a0f0e7eeff5ddb2e0386911fe9ab2b6"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 97,
      "deletions": 47
    },
    "files": [
      {
        "sha": "d71f35bf7e4fc69a1a22f4445e73676d92eaab0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
        "patch": "@@ -4519,10 +4519,11 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n                 if (!push && inv.type == MSG_TX) {\n-                    int64_t txtime;\n+                    auto txinfo = mempool.info(inv.hash);\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request.\n-                    if (mempool.lookup(inv.hash, tx, txtime) && txtime <= pfrom->timeLastMempoolReq) {\n+                    if (txinfo.tx && txinfo.nTime <= pfrom->timeLastMempoolReq) {\n+                        tx = *txinfo.tx;\n                         push = true;\n                     }\n                 }\n@@ -5900,8 +5901,7 @@ bool SendMessages(CNode* pto)\n \n             // Respond to BIP35 mempool requests\n             if (fSendTrickle && pto->fSendMempool) {\n-                std::vector<uint256> vtxid;\n-                mempool.queryHashes(vtxid);\n+                auto vtxinfo = mempool.infoAll();\n                 pto->fSendMempool = false;\n                 CAmount filterrate = 0;\n                 {\n@@ -5911,20 +5911,16 @@ bool SendMessages(CNode* pto)\n \n                 LOCK(pto->cs_filter);\n \n-                BOOST_FOREACH(const uint256& hash, vtxid) {\n+                for (const auto& txinfo : vtxinfo) {\n+                    const uint256& hash = txinfo.tx->GetHash();\n                     CInv inv(MSG_TX, hash);\n                     pto->setInventoryTxToSend.erase(hash);\n                     if (filterrate) {\n-                        CFeeRate feeRate;\n-                        mempool.lookupFeeRate(hash, feeRate);\n-                        if (feeRate.GetFeePerK() < filterrate)\n+                        if (txinfo.feeRate.GetFeePerK() < filterrate)\n                             continue;\n                     }\n                     if (pto->pfilter) {\n-                        CTransaction tx;\n-                        bool fInMemPool = mempool.lookup(hash, tx);\n-                        if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-                        if (!pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n+                        if (!pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                     }\n                     pto->filterInventoryKnown.insert(hash);\n                     vInv.push_back(inv);\n@@ -5970,16 +5966,14 @@ bool SendMessages(CNode* pto)\n                         continue;\n                     }\n                     // Not in the mempool anymore? don't bother sending it.\n-                    CFeeRate feeRate;\n-                    if (!mempool.lookupFeeRate(hash, feeRate)) {\n+                    auto txinfo = mempool.info(hash);\n+                    if (!txinfo.tx) {\n                         continue;\n                     }\n-                    if (filterrate && feeRate.GetFeePerK() < filterrate) {\n+                    if (filterrate && txinfo.feeRate.GetFeePerK() < filterrate) {\n                         continue;\n                     }\n-                    CTransaction tx;\n-                    if (!mempool.lookup(hash, tx)) continue;\n-                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n+                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;\n@@ -5992,7 +5986,7 @@ bool SendMessages(CNode* pto)\n                             vRelayExpiration.pop_front();\n                         }\n \n-                        auto ret = mapRelay.insert(std::make_pair(hash, tx));\n+                        auto ret = mapRelay.insert(std::make_pair(hash, *txinfo.tx));\n                         if (ret.second) {\n                             vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, hash));\n                         }"
      },
      {
        "sha": "d39c9577f24843f43a40e97fec18dad91f16586f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 24,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
        "patch": "@@ -23,18 +23,18 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n                                  bool _spendsCoinbase, unsigned int _sigOps, LockPoints lp):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n+    tx(std::make_shared<CTransaction>(_tx)), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps), lockPoints(lp)\n {\n-    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-    nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = RecursiveDynamicUsage(tx);\n+    nTxSize = ::GetSerializeSize(_tx, SER_NETWORK, PROTOCOL_VERSION);\n+    nModSize = _tx.CalculateModifiedSize(nTxSize);\n+    nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n     nModFeesWithDescendants = nFee;\n-    CAmount nValueIn = tx.GetValueOut()+nFee;\n+    CAmount nValueIn = _tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n \n     feeDelta = 0;\n@@ -768,50 +768,86 @@ bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb\n namespace {\n class DepthAndScoreComparator\n {\n-    CTxMemPool *mp;\n public:\n-    DepthAndScoreComparator(CTxMemPool *mempool) : mp(mempool) {}\n-    bool operator()(const uint256& a, const uint256& b) { return mp->CompareDepthAndScore(a, b); }\n+    bool operator()(const CTxMemPool::indexed_transaction_set::const_iterator& a, const CTxMemPool::indexed_transaction_set::const_iterator& b)\n+    {\n+        uint64_t counta = a->GetCountWithAncestors();\n+        uint64_t countb = b->GetCountWithAncestors();\n+        if (counta == countb) {\n+            return CompareTxMemPoolEntryByScore()(*a, *b);\n+        }\n+        return counta < countb;\n+    }\n };\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const\n {\n-    vtxid.clear();\n+    std::vector<indexed_transaction_set::const_iterator> iters;\n+    AssertLockHeld(cs);\n+\n+    iters.reserve(mapTx.size());\n \n+    for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi) {\n+        iters.push_back(mi);\n+    }\n+    std::sort(iters.begin(), iters.end(), DepthAndScoreComparator());\n+    return iters;\n+}\n+\n+void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+{\n     LOCK(cs);\n+    auto iters = GetSortedDepthAndScore();\n+\n+    vtxid.clear();\n     vtxid.reserve(mapTx.size());\n-    for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n-        vtxid.push_back(mi->GetTx().GetHash());\n \n-    std::sort(vtxid.begin(), vtxid.end(), DepthAndScoreComparator(this));\n+    for (auto it : iters) {\n+        vtxid.push_back(it->GetTx().GetHash());\n+    }\n }\n \n+std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n+{\n+    LOCK(cs);\n+    auto iters = GetSortedDepthAndScore();\n+\n+    std::vector<TxMempoolInfo> ret;\n+    ret.reserve(mapTx.size());\n+    for (auto it : iters) {\n+        ret.push_back(TxMempoolInfo{it->GetSharedTx(), it->GetTime(), CFeeRate(it->GetFee(), it->GetTxSize())});\n+    }\n+\n+    return ret;\n+}\n \n-bool CTxMemPool::lookup(uint256 hash, CTransaction& result, int64_t& time) const\n+std::shared_ptr<const CTransaction> CTxMemPool::get(const uint256& hash) const\n {\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n-    if (i == mapTx.end()) return false;\n-    result = i->GetTx();\n-    time = i->GetTime();\n-    return true;\n+    if (i == mapTx.end())\n+        return nullptr;\n+    return i->GetSharedTx();\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n-    int64_t time;\n-    return CTxMemPool::lookup(hash, result, time);\n+    auto tx = get(hash);\n+    if (tx) {\n+        result = *tx;\n+        return true;\n+    }\n+    return false;\n }\n \n-bool CTxMemPool::lookupFeeRate(const uint256& hash, CFeeRate& feeRate) const\n+TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n {\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n-        return false;\n-    feeRate = CFeeRate(i->GetFee(), i->GetTxSize());\n-    return true;\n+        return TxMempoolInfo();\n+    return TxMempoolInfo{i->GetSharedTx(), i->GetTime(), CFeeRate(i->GetFee(), i->GetTxSize())};\n }\n \n CFeeRate CTxMemPool::estimateFee(int nBlocks) const"
      },
      {
        "sha": "2f407fe008efe528f0d5600a5b797dacd672b117",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_TXMEMPOOL_H\n \n #include <list>\n+#include <memory>\n #include <set>\n \n #include \"amount.h\"\n@@ -75,7 +76,7 @@ class CTxMemPool;\n class CTxMemPoolEntry\n {\n private:\n-    CTransaction tx;\n+    std::shared_ptr<const CTransaction> tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize;            //!< ... and avoid recomputing tx size\n     size_t nModSize;           //!< ... and modified size for priority\n@@ -112,7 +113,8 @@ class CTxMemPoolEntry\n                     unsigned int nSigOps, LockPoints lp);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n-    const CTransaction& GetTx() const { return this->tx; }\n+    const CTransaction& GetTx() const { return *this->tx; }\n+    std::shared_ptr<const CTransaction> GetSharedTx() const { return this->tx; }\n     /**\n      * Fast calculation of lower bound of current priority as update\n      * from entry priority. Only inputs that were originally in-chain will age.\n@@ -307,6 +309,21 @@ struct ancestor_score {};\n \n class CBlockPolicyEstimator;\n \n+/**\n+ * Information about a mempool transaction.\n+ */\n+struct TxMempoolInfo\n+{\n+    /** The transaction itself */\n+    std::shared_ptr<const CTransaction> tx;\n+\n+    /** Time the transaction entered the mempool. */\n+    int64_t nTime;\n+\n+    /** Feerate of the transaction. */\n+    CFeeRate feeRate;\n+};\n+\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain\n  * transactions that may be included in the next block.\n@@ -464,6 +481,8 @@ class CTxMemPool\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n+    std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n+\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n@@ -589,8 +608,9 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n-    bool lookup(uint256 hash, CTransaction& result, int64_t& time) const;\n-    bool lookupFeeRate(const uint256& hash, CFeeRate& feeRate) const;\n+    std::shared_ptr<const CTransaction> get(const uint256& hash) const;\n+    TxMempoolInfo info(const uint256& hash) const;\n+    std::vector<TxMempoolInfo> infoAll() const;\n \n     /** Estimate fee rate needed to get into the next nBlocks\n      *  If no answer can be given at nBlocks, return an estimate"
      }
    ]
  },
  {
    "sha": "dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmZiNDI2Yjk2ZmJkNzlmYjc2NzM0YzZiNzQ3ZWY4ZWUxMGFkNWFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-31T17:51:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-06T00:00:23Z"
      },
      "message": "Optimize the relay map to use shared_ptr's\n\n* Switch mapRelay to use shared_ptr<CTransaction>\n* Switch the relay code to copy mempool shared_ptr's, rather than copying\n  the transaction itself.\n* Change vRelayExpiration to store mapRelay iterators rather than hashes\n  (smaller and faster).",
      "tree": {
        "sha": "037f92cc469adf1063798e4a79d6bd53a2dbe606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/037f92cc469adf1063798e4a79d6bd53a2dbe606"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d39d7a2cf1559e0ba40681b0ab90f13ea6c0618"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "bf0f0d8964ea097da1b944678ccd92396f859ac9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 21,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
        "patch": "@@ -80,9 +80,6 @@ uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n-std::map<uint256, CTransaction> mapRelay;\n-std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n-CCriticalSection cs_mapRelay;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -215,6 +212,12 @@ namespace {\n \n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads = 0;\n+\n+    /** Relay map, protected by cs_main. */\n+    typedef std::map<uint256, std::shared_ptr<const CTransaction>> MapRelay;\n+    MapRelay mapRelay;\n+    /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n+    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n } // anon namespace\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -4505,31 +4508,24 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n             }\n-            else if (inv.IsKnownType())\n+            else if (inv.type == MSG_TX)\n             {\n-                CTransaction tx;\n                 // Send stream from relay memory\n                 bool push = false;\n-                {\n-                    LOCK(cs_mapRelay);\n-                    map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n-                    if (mi != mapRelay.end()) {\n-                        tx = (*mi).second;\n-                        push = true;\n-                    }\n-                }\n-                if (!push && inv.type == MSG_TX) {\n+                auto mi = mapRelay.find(inv.hash);\n+                if (mi != mapRelay.end()) {\n+                    pfrom->PushMessage(NetMsgType::TX, *mi->second);\n+                    push = true;\n+                } else {\n                     auto txinfo = mempool.info(inv.hash);\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request.\n                     if (txinfo.tx && txinfo.nTime <= pfrom->timeLastMempoolReq) {\n-                        tx = *txinfo.tx;\n+                        pfrom->PushMessage(NetMsgType::TX, *txinfo.tx);\n                         push = true;\n                     }\n                 }\n-                if (push) {\n-                    pfrom->PushMessage(inv.GetCommand(), tx);\n-                } else {\n+                if (!push) {\n                     vNotFound.push_back(inv);\n                 }\n             }\n@@ -5978,17 +5974,16 @@ bool SendMessages(CNode* pto)\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;\n                     {\n-                        LOCK(cs_mapRelay);\n                         // Expire old relay messages\n                         while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n                         {\n                             mapRelay.erase(vRelayExpiration.front().second);\n                             vRelayExpiration.pop_front();\n                         }\n \n-                        auto ret = mapRelay.insert(std::make_pair(hash, *txinfo.tx));\n+                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n                         if (ret.second) {\n-                            vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, hash));\n+                            vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, ret.first));\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  },
  {
    "sha": "e9b4780b292122fd727426471f025ec3d3eb7b08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWI0NzgwYjI5MjEyMmZkNzI3NDI2NDcxZjAyNWVjM2QzZWI3YjA4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-31T18:34:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-06T00:02:23Z"
      },
      "message": "Optimization: don't check the mempool at all if no mempool req ever",
      "tree": {
        "sha": "a388f45ecccc9ce68c36e0bbee91d01e62eb43e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a388f45ecccc9ce68c36e0bbee91d01e62eb43e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9b4780b292122fd727426471f025ec3d3eb7b08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4780b292122fd727426471f025ec3d3eb7b08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b4780b292122fd727426471f025ec3d3eb7b08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4780b292122fd727426471f025ec3d3eb7b08/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfb426b96fbd79fb76734c6b747ef8ee10ad5ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68368e402b3d1b1d73a8eda644c96ea7351177f2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9b4780b292122fd727426471f025ec3d3eb7b08/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9b4780b292122fd727426471f025ec3d3eb7b08/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e9b4780b292122fd727426471f025ec3d3eb7b08",
        "patch": "@@ -4516,7 +4516,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 if (mi != mapRelay.end()) {\n                     pfrom->PushMessage(NetMsgType::TX, *mi->second);\n                     push = true;\n-                } else {\n+                } else if (pfrom->timeLastMempoolReq) {\n                     auto txinfo = mempool.info(inv.hash);\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request."
      }
    ]
  },
  {
    "sha": "c2a4724642400bc9200aeef4c725b5c07eee9d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmE0NzI0NjQyNDAwYmM5MjAwYWVlZjRjNzI1YjVjMDdlZWU5ZDkw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-31T18:35:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-06T00:02:24Z"
      },
      "message": "Optimization: use usec in expiration and reuse nNow",
      "tree": {
        "sha": "3d128b1410ca27c670fd7c21f9fdd433aac8fd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d128b1410ca27c670fd7c21f9fdd433aac8fd9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2a4724642400bc9200aeef4c725b5c07eee9d90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a4724642400bc9200aeef4c725b5c07eee9d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a4724642400bc9200aeef4c725b5c07eee9d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a4724642400bc9200aeef4c725b5c07eee9d90/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9b4780b292122fd727426471f025ec3d3eb7b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4780b292122fd727426471f025ec3d3eb7b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b4780b292122fd727426471f025ec3d3eb7b08"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db0580bda6142be4e4a642feefeb6ba1c320ca79",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a4724642400bc9200aeef4c725b5c07eee9d90/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a4724642400bc9200aeef4c725b5c07eee9d90/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c2a4724642400bc9200aeef4c725b5c07eee9d90",
        "patch": "@@ -5975,15 +5975,15 @@ bool SendMessages(CNode* pto)\n                     nRelayedTransactions++;\n                     {\n                         // Expire old relay messages\n-                        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n+                        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n                         {\n                             mapRelay.erase(vRelayExpiration.front().second);\n                             vRelayExpiration.pop_front();\n                         }\n \n                         auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n                         if (ret.second) {\n-                            vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, ret.first));\n+                            vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  },
  {
    "sha": "288d85ddf2e0a0c9d25a23db56052883170466d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODhkODVkZGYyZTBhMGM5ZDI1YTIzZGI1NjA1Mjg4MzE3MDQ2NmQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T11:44:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T11:44:56Z"
      },
      "message": "Get rid of CTxMempool::lookup() entirely",
      "tree": {
        "sha": "79da8673928fa0254b103a983b137136ea8de40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79da8673928fa0254b103a983b137136ea8de40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/288d85ddf2e0a0c9d25a23db56052883170466d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288d85ddf2e0a0c9d25a23db56052883170466d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/288d85ddf2e0a0c9d25a23db56052883170466d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288d85ddf2e0a0c9d25a23db56052883170466d0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2a4724642400bc9200aeef4c725b5c07eee9d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a4724642400bc9200aeef4c725b5c07eee9d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a4724642400bc9200aeef4c725b5c07eee9d90"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 15,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b581ece09ac4f3a4ea38dd42c96d3d5b6bf654ca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288d85ddf2e0a0c9d25a23db56052883170466d0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288d85ddf2e0a0c9d25a23db56052883170466d0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=288d85ddf2e0a0c9d25a23db56052883170466d0",
        "patch": "@@ -1445,8 +1445,10 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n \n     LOCK(cs_main);\n \n-    if (mempool.lookup(hash, txOut))\n+    std::shared_ptr<const CTransaction> ptx = mempool.get(hash);\n+    if (ptx)\n     {\n+        txOut = *ptx;\n         return true;\n     }\n "
      },
      {
        "sha": "2b00e6f567fa8e20709a16898ca81a1935587781",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288d85ddf2e0a0c9d25a23db56052883170466d0/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288d85ddf2e0a0c9d25a23db56052883170466d0/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=288d85ddf2e0a0c9d25a23db56052883170466d0",
        "patch": "@@ -74,9 +74,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             // 9/10 blocks add 2nd highest and so on until ...\n             // 1/10 blocks add lowest fee/pri transactions\n             while (txHashes[9-h].size()) {\n-                CTransaction btx;\n-                if (mpool.lookup(txHashes[9-h].back(), btx))\n-                    block.push_back(btx);\n+                std::shared_ptr<const CTransaction> ptx = mpool.get(txHashes[9-h].back());\n+                if (ptx)\n+                    block.push_back(*ptx);\n                 txHashes[9-h].pop_back();\n             }\n         }\n@@ -160,9 +160,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Estimates should still not be below original\n     for (int j = 0; j < 10; j++) {\n         while(txHashes[j].size()) {\n-            CTransaction btx;\n-            if (mpool.lookup(txHashes[j].back(), btx))\n-                block.push_back(btx);\n+            std::shared_ptr<const CTransaction> ptx = mpool.get(txHashes[j].back());\n+            if (ptx)\n+                block.push_back(*ptx);\n             txHashes[j].pop_back();\n         }\n     }\n@@ -181,9 +181,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n                 mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n-                CTransaction btx;\n-                if (mpool.lookup(hash, btx))\n-                    block.push_back(btx);\n+                std::shared_ptr<const CTransaction> ptx = mpool.get(hash);\n+                if (ptx)\n+                    block.push_back(*ptx);\n             }\n         }\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);"
      },
      {
        "sha": "205ffd63793512d011e0fcac1effc1ba750b9113",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288d85ddf2e0a0c9d25a23db56052883170466d0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288d85ddf2e0a0c9d25a23db56052883170466d0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=288d85ddf2e0a0c9d25a23db56052883170466d0",
        "patch": "@@ -831,16 +831,6 @@ std::shared_ptr<const CTransaction> CTxMemPool::get(const uint256& hash) const\n     return i->GetSharedTx();\n }\n \n-bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n-{\n-    auto tx = get(hash);\n-    if (tx) {\n-        result = *tx;\n-        return true;\n-    }\n-    return false;\n-}\n-\n TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n {\n     LOCK(cs);\n@@ -960,9 +950,9 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n-    CTransaction tx;\n-    if (mempool.lookup(txid, tx)) {\n-        coins = CCoins(tx, MEMPOOL_HEIGHT);\n+    shared_ptr<const CTransaction> ptx = mempool.get(txid);\n+    if (ptx) {\n+        coins = CCoins(*ptx, MEMPOOL_HEIGHT);\n         return true;\n     }\n     return (base->GetCoins(txid, coins) && !coins.IsPruned());"
      },
      {
        "sha": "f0e9b2e2c69754afa47b1739abeba64b5eec9aa5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288d85ddf2e0a0c9d25a23db56052883170466d0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288d85ddf2e0a0c9d25a23db56052883170466d0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=288d85ddf2e0a0c9d25a23db56052883170466d0",
        "patch": "@@ -607,7 +607,6 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    bool lookup(uint256 hash, CTransaction& result) const;\n     std::shared_ptr<const CTransaction> get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;"
      }
    ]
  }
]