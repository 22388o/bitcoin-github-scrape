gmaxwell,2016-05-30T16:15:28Z,This should also simplify the compactblocks PR once it's changed to make use of this. The reduction in memory usage for the relay pool would be nice-- would make it reasonable to make the relay pool last a fair bit longer.\n\nConcept ACK.\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222522546,222522546,
paveljanik,2016-05-30T19:40:10Z,This emits a lot of warnings:\n\n```\n./memusage.h:76:11: warning: private field 'class_type' is not used [-Wunused-private-field]\n    void* class_type;\n          ^\n./memusage.h:77:9: warning: private field 'use_count' is not used [-Wunused-private-field]\n    int use_count;\n        ^\n./memusage.h:78:9: warning: private field 'weak_count' is not used [-Wunused-private-field]\n    int weak_cou,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222545687,222545687,
sipa,2016-05-30T20:18:37Z,"@paveljanik Addressed, I think.\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222549735,222549735,
dcousens,2016-05-31T05:00:21Z,utACK 4042a03\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222592777,222592777,
sipa,2016-05-31T05:16:11Z,"@dcousens My STL implementation uses _Atomic_word, which is a typedef'd int. Using size_t would be incorrect.\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222594311,222594311,
dcousens,2016-05-31T05:18:07Z,"> @dcousens My STL implementation uses _Atomic_word, which is a typedef'd int. Using size_t would be incorrect.\n\nSure,  I made that assumption based on the fact you did use an `int`,  but,  what about others?  Is there no relevant/accessible `typedef` that we could use here?\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222594506,222594506,
sipa,2016-05-31T05:22:26Z,It'd be helpful if someone can investigate libc++ and msvc++.\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222594935,222594935,
sipa,2016-05-31T07:54:50Z,@paveljanik But that's the return value of use_count; not its internal range\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222617297,222617297,
sipa,2016-05-31T11:21:43Z,"@dcousens If we find out what the data types are for the control blocks in different stl implementations, I guess we can just directly sizeof them. These are not things that easily change from one version to another.\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222660725,222660725,
sipa,2016-05-31T14:18:45Z,"Simplified the resulting code a bit by introducing a TxMempoolInfo struct (contain a tx shared pointer, feerate, and entry time), and using that within the inv/mempool processing (rebase on top of #8080 needed access to entry time).\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222702788,222702788,
sipa,2016-05-31T17:55:47Z,"Rebased on top of #8082, and modified the relay pool to use shared_ptr's as well (so it doesn't duplicate mempool storage anymore).\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222768148,222768148,
sipa,2016-05-31T18:07:38Z,"@dcousens It seems libc++ uses long for the shared_ptr counters, so I've changed the struct to convervatively use size_t,\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-222771469,222771469,
dcousens,2016-06-02T02:49:34Z,@sipa :+1:  I couldn't find any relevant `typedef` that was consistent\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-223182097,223182097,
dcousens,2016-06-02T02:51:58Z,reACK 74a1bb2\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-223182366,223182366,
gmaxwell,2016-06-04T17:50:17Z,tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-223768890,223768890,
gmaxwell,2016-06-04T19:09:00Z,"needs rebase (for #7997, I believe)\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-223772651,223772651,
sipa,2016-06-04T22:32:13Z,Trivially rebased.\n,https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-223781847,223781847,
laanwj,2016-06-07T09:10:35Z,"If you get an error about missing symbols during linking while testing this, you need to clean your git tree (or preferably, just rm -rf your `build` directory if you're doing out-of-tree builds).\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-224223535,224223535,
laanwj,2016-06-07T11:49:18Z,"code review ACK https://github.com/bitcoin/bitcoin/pull/8126/commits/288d85ddf2e0a0c9d25a23db56052883170466d0, also testing on one node via https://github.com/sipa/bitcoin/tree/compactblocks which is rebased on this\n",https://github.com/bitcoin/bitcoin/pull/8126#issuecomment-224257053,224257053,
dcousens,2016-05-31T05:00:04Z,"Is there any reference for these assumptions?  `stl_shared_counter` looks ""right"",  but short on investigating the inner workings of my local STL,  is this guaranteed?\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65123836,65123836,src/memusage.h
paveljanik,2016-05-31T05:12:30Z,"@dcousens See e.g. http://en.cppreference.com/w/cpp/memory/shared_ptr, Implementation notes. I do not think we can be _exact_ here, but this is good approximation.\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65124471,65124471,src/memusage.h
paveljanik,2016-05-31T05:13:37Z,Just a side note: the original code is using `_x` here to prevent shadowing... (#8109)\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65124527,65124527,src/txmempool.cpp
dcousens,2016-05-31T05:14:10Z,"But why `<int>` over `<size_t>`?  Wouldn't `size_t` be the worst case for what could definitely be considered a ""typical"" implementation?\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65124561,65124561,src/memusage.h
dcousens,2016-05-31T05:16:23Z,"> In a typical implementation, std::shared_ptr holds only two pointers:\n> - the stored pointer (one returned by get());\n> - a pointer to control block.\n\nCouldn't we find a way to use `sizeof(control_block_t)`\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65124675,65124675,src/memusage.h
paveljanik,2016-05-31T05:17:29Z,The reference says that `use_count` is long (http://en.cppreference.com/w/cpp/memory/shared_ptr/use_count).\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65124738,65124738,src/memusage.h
paveljanik,2016-06-02T11:24:09Z,Conservatively\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65522529,65522529,src/memusage.h
sipa,2016-06-04T22:32:01Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65808553,65808553,src/memusage.h
kazcw,2016-06-05T23:29:16Z,"Removing `cs_mapRelay` makes the `bool push` mechanism unnecessary since the conditionals can now be chained, allowing a simpler direct `PushMessage` that would also save a `shared_ptr` copy in this case.\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65827174,65827174,src/main.cpp
sipa,2016-06-06T00:10:49Z,"Nice catch, fixed.\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r65827793,65827793,src/main.cpp
laanwj,2016-06-07T11:07:53Z,"Is there value to having both get() and lookup()? (they seem to do the same just a slightly different API, this could be confusing)\n",https://github.com/bitcoin/bitcoin/pull/8126#discussion_r66050423,66050423,src/txmempool.cpp
sipa,2016-06-07T11:19:07Z,Let's see if I can get rid of that.\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r66052052,66052052,src/txmempool.cpp
sipa,2016-06-07T11:45:12Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/8126#discussion_r66055297,66055297,src/txmempool.cpp
