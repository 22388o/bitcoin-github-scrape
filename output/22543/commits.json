[
  {
    "sha": "dddca3899c4738e512313a85aeb006310e34e31f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRjYTM4OTljNDczOGU1MTIzMTNhODVhZWIwMDYzMTBlMzRlMzFm",
    "commit": {
      "author": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-10T11:37:58Z"
      },
      "committer": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-13T19:22:11Z"
      },
      "message": "test: use MiniWallet in mempool_limit.py\n\nCo-authored-by: ShubhamPalriwala <spalriwalau@gmail.com>\nCo-authored-by: stackman27 <sishirg27@gmail.com>\nSigned-off-by: ShubhamPalriwala <spalriwalau@gmail.com>",
      "tree": {
        "sha": "4837f09f1bd8beb9ed7c556f36ef0236e0b5e414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4837f09f1bd8beb9ed7c556f36ef0236e0b5e414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dddca3899c4738e512313a85aeb006310e34e31f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddca3899c4738e512313a85aeb006310e34e31f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dddca3899c4738e512313a85aeb006310e34e31f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddca3899c4738e512313a85aeb006310e34e31f/comments",
    "author": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb09c26724e3f714b613788fc506f2ff3a208d2c"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f67737f7563ff61bdfa087c6c77c725ade09e27a",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 36,
        "deletions": 30,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddca3899c4738e512313a85aeb006310e34e31f/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddca3899c4738e512313a85aeb006310e34e31f/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=dddca3899c4738e512313a85aeb006310e34e31f",
        "patch": "@@ -6,8 +6,11 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, gen_return_txouts\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -20,55 +23,58 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def send_large_txs(self, miniwallet, txouts, fee_rate, tx_batch_size):\n+        for _ in range(tx_batch_size):\n+            tx = miniwallet.create_self_transfer(from_node=self.nodes[0], fee_rate=fee_rate)['tx']\n+            for txout in txouts:\n+                tx.vout.append(txout)\n+            miniwallet.sendrawtransaction(from_node=self.nodes[0], tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n+        miniwallet = MiniWallet(self.nodes[0])\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(self.nodes[0], COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=self.nodes[0], fee_rate=relayfee)[\"txid\"]\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        for batch_of_txid in range(num_of_batches):\n+            fee_rate=(batch_of_txid + 1) * base_fee\n+            self.send_large_txs(miniwallet, txouts, fee_rate, tx_batch_size)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(self.nodes[0].getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        # Deliberately try to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=self.nodes[0], fee_rate=relayfee, mempool_valid=False)\n+\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "d447ded6babebe7c7948e585c9e78bf34dbef226",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDQ3ZGVkNmJhYmViZTdjNzk0OGU1ODVjOWU3OGJmMzRkYmVmMjI2",
    "commit": {
      "author": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-13T19:25:45Z"
      },
      "committer": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-13T19:25:45Z"
      },
      "message": "replace: self.nodes[0] with node",
      "tree": {
        "sha": "50a6c7e1553df453088f1441d8142856a5631c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50a6c7e1553df453088f1441d8142856a5631c5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d447ded6babebe7c7948e585c9e78bf34dbef226",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d447ded6babebe7c7948e585c9e78bf34dbef226",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d447ded6babebe7c7948e585c9e78bf34dbef226",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d447ded6babebe7c7948e585c9e78bf34dbef226/comments",
    "author": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dddca3899c4738e512313a85aeb006310e34e31f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddca3899c4738e512313a85aeb006310e34e31f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dddca3899c4738e512313a85aeb006310e34e31f"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6d9b79e116ce9f81389c387c2ccbfdbcb6bb343f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d447ded6babebe7c7948e585c9e78bf34dbef226/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d447ded6babebe7c7948e585c9e78bf34dbef226/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=d447ded6babebe7c7948e585c9e78bf34dbef226",
        "patch": "@@ -23,21 +23,22 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def send_large_txs(self, miniwallet, txouts, fee_rate, tx_batch_size):\n+    def send_large_txs(self, node, miniwallet, txouts, fee_rate, tx_batch_size):\n         for _ in range(tx_batch_size):\n-            tx = miniwallet.create_self_transfer(from_node=self.nodes[0], fee_rate=fee_rate)['tx']\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=fee_rate)['tx']\n             for txout in txouts:\n                 tx.vout.append(txout)\n-            miniwallet.sendrawtransaction(from_node=self.nodes[0], tx_hex=tx.serialize().hex())\n+            miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        miniwallet = MiniWallet(self.nodes[0])\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node=self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         tx_batch_size = 25\n         num_of_batches = 3\n@@ -48,32 +49,32 @@ def run_test(self):\n         self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n \n         # Mine 99 blocks so that the UTXOs are allowed to be spent\n-        self.generate(self.nodes[0], COINBASE_MATURITY - 1)\n+        self.generate(node, COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=self.nodes[0], fee_rate=relayfee)[\"txid\"]\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n \n         # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n         base_fee = relayfee * 1000\n \n         self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n         for batch_of_txid in range(num_of_batches):\n             fee_rate=(batch_of_txid + 1) * base_fee\n-            self.send_large_txs(miniwallet, txouts, fee_rate, tx_batch_size)\n+            self.send_large_txs(node, miniwallet, txouts, fee_rate, tx_batch_size)\n \n         self.log.info('The tx should be evicted by now')\n         # The number of transactions created should be greater than the ones present in the mempool\n-        assert_greater_than(tx_batch_size * num_of_batches, len(self.nodes[0].getrawmempool()))\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n         # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n-        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         # Deliberately try to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=self.nodes[0], fee_rate=relayfee, mempool_valid=False)\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee, mempool_valid=False)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "08634e82c68ea1be79e1395f4f551082f497023f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODYzNGU4MmM2OGVhMWJlNzllMTM5NWY0ZjU1MTA4MmY0OTcwMjNm",
    "commit": {
      "author": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-13T19:28:25Z"
      },
      "committer": {
        "name": "ShubhamPalriwala",
        "email": "spalriwalau@gmail.com",
        "date": "2021-09-13T19:28:25Z"
      },
      "message": "fix typos in logging messages",
      "tree": {
        "sha": "cb086aae04a4677c394bd6d9bff429c3a91b388c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb086aae04a4677c394bd6d9bff429c3a91b388c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08634e82c68ea1be79e1395f4f551082f497023f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08634e82c68ea1be79e1395f4f551082f497023f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08634e82c68ea1be79e1395f4f551082f497023f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08634e82c68ea1be79e1395f4f551082f497023f/comments",
    "author": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d447ded6babebe7c7948e585c9e78bf34dbef226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d447ded6babebe7c7948e585c9e78bf34dbef226",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d447ded6babebe7c7948e585c9e78bf34dbef226"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c82dbb3f3d3073cc717fb1052669320b9711bb0a",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08634e82c68ea1be79e1395f4f551082f497023f/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08634e82c68ea1be79e1395f4f551082f497023f/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=08634e82c68ea1be79e1395f4f551082f497023f",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         miniwallet = MiniWallet(node)\n         relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n         assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n@@ -68,7 +68,7 @@ def run_test(self):\n         # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n         assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n+        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n         assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n "
      }
    ]
  }
]