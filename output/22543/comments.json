[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886244568",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-886244568",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 886244568,
    "node_id": "IC_kwDOABII58400wTY",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-25T19:07:00Z",
    "updated_at": "2021-07-25T19:07:00Z",
    "author_association": "MEMBER",
    "body": "approach ACK :) ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886244568/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886251008",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-886251008",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 886251008,
    "node_id": "IC_kwDOABII58400x4A",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-25T20:05:05Z",
    "updated_at": "2021-07-25T20:05:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886251008/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888200225",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-888200225",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 888200225,
    "node_id": "IC_kwDOABII58408Nwh",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-28T10:28:36Z",
    "updated_at": "2021-09-11T05:55:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888200225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890399777",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-890399777",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 890399777,
    "node_id": "IC_kwDOABII5841Emwh",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-31T20:18:21Z",
    "updated_at": "2021-07-31T20:18:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890399777/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/891938056",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-891938056",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 891938056,
    "node_id": "IC_kwDOABII5841KeUI",
    "user": {
      "login": "Zero-1729",
      "id": 23586626,
      "node_id": "MDQ6VXNlcjIzNTg2NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23586626?u=4c5f63febc30f4a5019f91ed09313f3391e08f3f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zero-1729",
      "html_url": "https://github.com/Zero-1729",
      "followers_url": "https://api.github.com/users/Zero-1729/followers",
      "following_url": "https://api.github.com/users/Zero-1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zero-1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
      "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
      "repos_url": "https://api.github.com/users/Zero-1729/repos",
      "events_url": "https://api.github.com/users/Zero-1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-03T15:22:25Z",
    "updated_at": "2021-08-03T15:22:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/891938056/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893695959",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-893695959",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 893695959,
    "node_id": "IC_kwDOABII5841RLfX",
    "user": {
      "login": "Shubhankar-Gambhir",
      "id": 58947326,
      "node_id": "MDQ6VXNlcjU4OTQ3MzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58947326?u=88f07b29731de828d7c74081fb50bc7dc397a524&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shubhankar-Gambhir",
      "html_url": "https://github.com/Shubhankar-Gambhir",
      "followers_url": "https://api.github.com/users/Shubhankar-Gambhir/followers",
      "following_url": "https://api.github.com/users/Shubhankar-Gambhir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shubhankar-Gambhir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shubhankar-Gambhir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shubhankar-Gambhir/subscriptions",
      "organizations_url": "https://api.github.com/users/Shubhankar-Gambhir/orgs",
      "repos_url": "https://api.github.com/users/Shubhankar-Gambhir/repos",
      "events_url": "https://api.github.com/users/Shubhankar-Gambhir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shubhankar-Gambhir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T18:45:14Z",
    "updated_at": "2021-08-05T18:45:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893695959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899659135",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-899659135",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 899659135,
    "node_id": "IC_kwDOABII5841n7V_",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T16:47:23Z",
    "updated_at": "2021-08-16T16:47:23Z",
    "author_association": "MEMBER",
    "body": "> Not sure why CI failed at L71 in mempool_limit.py, locally it checks out (see screenshot below). It looks like CI is reporting 67 for the no of txs in the mempool.\r\n\r\nCan't reproduce that locally here either. All the functional tests pass running master with this merged on top. It might be a rare race condition, or something specific to the 32-bit platform though.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899659135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899881987",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-899881987",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 899881987,
    "node_id": "IC_kwDOABII5841oxwD",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T23:24:56Z",
    "updated_at": "2021-08-16T23:24:56Z",
    "author_association": "MEMBER",
    "body": "hm, unfortunately looks like the 32-bit + dash [gui] run is failing on the same assertion \ud83d\udd0d ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899881987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899982010",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-899982010",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 899982010,
    "node_id": "IC_kwDOABII5841pKK6",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-17T04:20:33Z",
    "updated_at": "2021-08-17T04:20:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's failing when we take the minimum batch size of 22 transactions, increasing this will increase the test duration but the CI will pass as earlier",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899982010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901002209",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-901002209",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 901002209,
    "node_id": "IC_kwDOABII5841tDPh",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T10:28:41Z",
    "updated_at": "2021-08-18T10:31:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The CI passes now\r\nPS: Updated the batch size to 25 transactions below\r\nhttps://github.com/bitcoin/bitcoin/blob/3773532d682a3bfb0cea8898da10caa5f444a23e/test/functional/mempool_limit.py#L67\r\n\r\nThe PR is ready for a review",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901002209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/903178101",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-903178101",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 903178101,
    "node_id": "IC_kwDOABII58411Wd1",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-21T21:24:22Z",
    "updated_at": "2021-08-21T21:24:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ShubhamPalriwala: Thanks for the changes. Currently the second commit (subject \"style: mempool_limit.py\") is not showing up any more, you probably forgot it in your latest force-push?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/903178101/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904951021",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-904951021",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 904951021,
    "node_id": "IC_kwDOABII58418HTt",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-24T20:27:05Z",
    "updated_at": "2021-08-24T20:27:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "The PR has been rebased and is ready to be reviewed",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904951021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/906253222",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-906253222",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 906253222,
    "node_id": "IC_kwDOABII5842BFOm",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-26T09:40:48Z",
    "updated_at": "2021-08-26T09:40:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the suggestions @theStack and @MarcoFalke!\r\n\r\nI've made, tested, and pushed the subsequent commits!\r\nThe PR is ready to be reviewed again :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/906253222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911529668",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-911529668",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 911529668,
    "node_id": "IC_kwDOABII5842VNbE",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-02T10:50:39Z",
    "updated_at": "2021-09-02T10:50:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "## PR ready for review\r\n\r\nThis PR has been made more understandable by the recent reviews! Changes have been made as suggested and it's once again Up for Review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911529668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911607555",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-911607555",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 911607555,
    "node_id": "IC_kwDOABII5842VgcD",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-02T12:14:30Z",
    "updated_at": "2021-09-02T12:16:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK https://github.com/bitcoin/bitcoin/commit/e8a3ff3b586beb4e2bb2d77a3bf4d7b98a1a2df2\r\n\r\nnicely done, happy to see the `send_large_transactions` helper function being added to miniwallet!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911607555/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916845226",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-916845226",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 916845226,
    "node_id": "IC_kwDOABII5842pfKq",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-10T11:52:45Z",
    "updated_at": "2021-09-10T11:52:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "## PR ready for review\r\n\r\nThank you to everybody who has reviewed it. However, the recent suggestions made the PR better and more helpful hence the changes as suggested have been implemented.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916845226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917963111",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-917963111",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 917963111,
    "node_id": "IC_kwDOABII5842twFn",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T08:31:02Z",
    "updated_at": "2021-09-13T08:31:02Z",
    "author_association": "MEMBER",
    "body": "lmk if you want this merged or address the nits",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917963111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918119451",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918119451",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918119451,
    "node_id": "IC_kwDOABII5842uWQb",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T11:58:48Z",
    "updated_at": "2021-09-13T11:58:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke the nits have been addressed! PTAL.\r\nThe PR is ready to be merged from my end :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918119451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918140536",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918140536",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918140536,
    "node_id": "IC_kwDOABII5842ubZ4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T12:26:17Z",
    "updated_at": "2021-09-13T12:26:17Z",
    "author_association": "MEMBER",
    "body": "ack",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918140536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918511490",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918511490",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918511490,
    "node_id": "IC_kwDOABII5842v1-C",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?u=5554656be7e55a38d6ab4b2db16d28e913410ca2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T19:33:00Z",
    "updated_at": "2021-09-13T19:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the git suggestions @amitiuttarwar \r\nUpdated and force-pushed the commits for a more clear understanding of the changes.\r\n\r\n## The PR is once again up for review. Hopefully one last time",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918511490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918530519",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918530519",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918530519,
    "node_id": "IC_kwDOABII5842v6nX",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T20:02:19Z",
    "updated_at": "2021-09-13T20:02:19Z",
    "author_association": "MEMBER",
    "body": "ACK 08634e8, only git changes since last push (and one new line). ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918530519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918966286",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918966286",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918966286,
    "node_id": "IC_kwDOABII5842xlAO",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T09:12:49Z",
    "updated_at": "2021-09-14T09:12:49Z",
    "author_association": "MEMBER",
    "body": "Thanks for taking the feedback. Looks good now.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918966286/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918981930",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918981930",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918981930,
    "node_id": "IC_kwDOABII5842xo0q",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T09:32:09Z",
    "updated_at": "2021-09-14T09:32:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note that the helper `send_large_txs` with its current interface is misleading, as the passed fee_rate is not respected. It is merely passed to MiniWallet's `create_self_transfer`, but this function can't look in the future and thus is unable to know that several outputs are appended to the transaction after, modifying its size and hence also decreasing it's feerate. I'd suggest to either pass an absolute fee that is simply deducted from tx.vout[0].nValue before the transaction is sent (simple solution), or keep the interface, but fix the fee calculation by deducting dependend on the tx's final vsize (a little more complex solution). In both cases, `create_self_transfer` needs to be called with a zero fee_rate first. Will take a look into that later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918981930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918986896",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-918986896",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 918986896,
    "node_id": "IC_kwDOABII5842xqCQ",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T09:38:52Z",
    "updated_at": "2021-09-14T09:38:52Z",
    "author_association": "MEMBER",
    "body": "@theStack See also https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701685136 , where I mentioned in-lining helps. I think we should pick the simplest/shortest code to achieve the goal of creating txs with different fee levels. The feerate doesn't need to be exact for the purposes of mempool eviction. The current code achieves its goal, but improvements are welcome if there are any.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918986896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/919189698",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-919189698",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
    "id": 919189698,
    "node_id": "IC_kwDOABII5842ybjC",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T14:10:34Z",
    "updated_at": "2021-09-14T14:10:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke: Sure, but in this case the fee-rate is not just \"not exact\", but off by several orders of magnitute, considering that the tx's vsize changes from 96 to 67552 vbytes (>700x), and MiniWallet only calculates the fee based on the 96 vbytes. So the value passed to this function is neither really a fee-rate nor an absolute fee, but something weird in-between that has just been increased (by 10x) until the test passes. I tried to increase the clarity of the test in #22972.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/919189698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248900",
    "pull_request_review_id": 716930706,
    "id": 678248900,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0ODkwMA==",
    "diff_hunk": "@@ -20,55 +23,65 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 73,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "8ac10d8e1596bd2766fc9470467aba7c0e691353",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please don't commit large style changes in the same commit as refactors/features. This makes review harder because it is not clear what is a refactor/style-change/feature\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#committing-patches",
    "created_at": "2021-07-28T12:22:39Z",
    "updated_at": "2021-07-28T12:35:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r678248900",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248900"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r678248900"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248900/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681830378",
    "pull_request_review_id": 721293358,
    "id": 681830378,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTgzMDM3OA==",
    "diff_hunk": "@@ -20,55 +23,65 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 73,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "8ac10d8e1596bd2766fc9470467aba7c0e691353",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for the feedback, I've appended the commit with the code changes only (removed any \"only style changes\") as of now, hope this makes reviewing the PR easier now.\r\n\r\nLooking forward to your review",
    "created_at": "2021-08-03T14:45:41Z",
    "updated_at": "2021-08-03T14:45:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r681830378",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681830378"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r681830378"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681830378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT",
    "in_reply_to_id": 678248900
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686312386",
    "pull_request_review_id": 726833540,
    "id": 686312386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxMjM4Ng==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0",
    "path": "test/functional/mempool_limit.py",
    "position": 82,
    "original_position": 69,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "NikhilBartwal",
      "id": 42388668,
      "node_id": "MDQ6VXNlcjQyMzg4NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42388668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NikhilBartwal",
      "html_url": "https://github.com/NikhilBartwal",
      "followers_url": "https://api.github.com/users/NikhilBartwal/followers",
      "following_url": "https://api.github.com/users/NikhilBartwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NikhilBartwal/subscriptions",
      "organizations_url": "https://api.github.com/users/NikhilBartwal/orgs",
      "repos_url": "https://api.github.com/users/NikhilBartwal/repos",
      "events_url": "https://api.github.com/users/NikhilBartwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NikhilBartwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hey, any specific reason that we are not checking whether the confirmations of the original `tx` are still 0 or not. I couldn't understand looking at the PR updates, so if you could explain :)",
    "created_at": "2021-08-10T20:50:05Z",
    "updated_at": "2021-08-10T20:50:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686312386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686312386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686312386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686312386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686313503",
    "pull_request_review_id": 726834907,
    "id": 686313503,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxMzUwMw==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 115,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "NikhilBartwal",
      "id": 42388668,
      "node_id": "MDQ6VXNlcjQyMzg4NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42388668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NikhilBartwal",
      "html_url": "https://github.com/NikhilBartwal",
      "followers_url": "https://api.github.com/users/NikhilBartwal/followers",
      "following_url": "https://api.github.com/users/NikhilBartwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NikhilBartwal/subscriptions",
      "organizations_url": "https://api.github.com/users/NikhilBartwal/orgs",
      "repos_url": "https://api.github.com/users/NikhilBartwal/repos",
      "events_url": "https://api.github.com/users/NikhilBartwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NikhilBartwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Type-o in `basee_fee` -> `base_fee` :)",
    "created_at": "2021-08-10T20:51:50Z",
    "updated_at": "2021-08-10T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686313503",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686313503"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686313503"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686313503/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686315551",
    "pull_request_review_id": 726837605,
    "id": 686315551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxNTU1MQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 117,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "NikhilBartwal",
      "id": 42388668,
      "node_id": "MDQ6VXNlcjQyMzg4NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42388668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NikhilBartwal",
      "html_url": "https://github.com/NikhilBartwal",
      "followers_url": "https://api.github.com/users/NikhilBartwal/followers",
      "following_url": "https://api.github.com/users/NikhilBartwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NikhilBartwal/subscriptions",
      "organizations_url": "https://api.github.com/users/NikhilBartwal/orgs",
      "repos_url": "https://api.github.com/users/NikhilBartwal/repos",
      "events_url": "https://api.github.com/users/NikhilBartwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NikhilBartwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Since, we are bumping up the `fee_rate` as a factor of `base_fee` with the `batch_of_txid`, IMO it would be more intuitive to use `for batch_of_txid in range(1,4):` so that we can simply use:\r\n```\r\nminiwallet.create_large_transactions(\r\n                node, txouts, 30, batch_of_txid * base_fee\r\n)\r\n```",
    "created_at": "2021-08-10T20:55:08Z",
    "updated_at": "2021-08-10T20:55:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686315551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686315551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686315551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686315551/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686317188",
    "pull_request_review_id": 726839637,
    "id": 686317188,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxNzE4OA==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+",
    "path": "test/functional/mempool_limit.py",
    "position": 87,
    "original_position": 125,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "NikhilBartwal",
      "id": 42388668,
      "node_id": "MDQ6VXNlcjQyMzg4NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42388668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NikhilBartwal",
      "html_url": "https://github.com/NikhilBartwal",
      "followers_url": "https://api.github.com/users/NikhilBartwal/followers",
      "following_url": "https://api.github.com/users/NikhilBartwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NikhilBartwal/subscriptions",
      "organizations_url": "https://api.github.com/users/NikhilBartwal/orgs",
      "repos_url": "https://api.github.com/users/NikhilBartwal/repos",
      "events_url": "https://api.github.com/users/NikhilBartwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NikhilBartwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In extension to the corresponding comment above, maybe we should add the confirmation test, something on the lines of:\r\n```\r\ntxdata = node.gettransaction(tx_to_be_evicted)\r\nassert txdata['confirmations'] == 0\r\n```",
    "created_at": "2021-08-10T20:57:46Z",
    "updated_at": "2021-08-10T20:57:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686317188",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686317188"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686317188"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686317188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 70,
    "original_line": 70,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686322985",
    "pull_request_review_id": 726847190,
    "id": 686322985,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMyMjk4NQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.info(\"Check that mempoolminfee is larger than minrelytxfee\")",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 126,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "NikhilBartwal",
      "id": 42388668,
      "node_id": "MDQ6VXNlcjQyMzg4NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42388668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NikhilBartwal",
      "html_url": "https://github.com/NikhilBartwal",
      "followers_url": "https://api.github.com/users/NikhilBartwal/followers",
      "following_url": "https://api.github.com/users/NikhilBartwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NikhilBartwal/subscriptions",
      "organizations_url": "https://api.github.com/users/NikhilBartwal/orgs",
      "repos_url": "https://api.github.com/users/NikhilBartwal/repos",
      "events_url": "https://api.github.com/users/NikhilBartwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NikhilBartwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Type-o in `minrelytxfee` -> `minrelaytxfee` :)",
    "created_at": "2021-08-10T21:07:21Z",
    "updated_at": "2021-08-10T21:07:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686322985",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686322985"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686322985"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686322985/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491618",
    "pull_request_review_id": 727042456,
    "id": 686491618,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5MTYxOA==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+",
    "path": "test/functional/mempool_limit.py",
    "position": 87,
    "original_position": 125,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "With respect to this and the above comment, `gettransaction(tx_to_be_evicted)` is a method that requires a wallet to be loaded, contradictory to the purpose of this PR. Hence, we're just verifying if it's evicted from the mempool!",
    "created_at": "2021-08-11T04:58:21Z",
    "updated_at": "2021-08-11T04:58:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491618"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 70,
    "original_line": 70,
    "side": "RIGHT",
    "in_reply_to_id": 686317188
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491848",
    "pull_request_review_id": 727042733,
    "id": 686491848,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5MTg0OA==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0",
    "path": "test/functional/mempool_limit.py",
    "position": 82,
    "original_position": 69,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thread has been continued [here](https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618)\r\n",
    "created_at": "2021-08-11T04:59:07Z",
    "updated_at": "2021-08-11T04:59:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491848",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491848"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491848"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "LEFT",
    "in_reply_to_id": 686312386
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686495941",
    "pull_request_review_id": 727047795,
    "id": 686495941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NTk0MQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.info(\"Check that mempoolminfee is larger than minrelytxfee\")",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 126,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-08-11T05:11:29Z",
    "updated_at": "2021-08-11T05:11:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686495941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686495941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686495941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686495941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 686322985
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496041",
    "pull_request_review_id": 727047897,
    "id": 686496041,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NjA0MQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 117,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done! Thanks",
    "created_at": "2021-08-11T05:11:44Z",
    "updated_at": "2021-08-11T05:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496041",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496041"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496041"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 686315551
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496119",
    "pull_request_review_id": 727047980,
    "id": 686496119,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NjExOQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 115,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "dcd75d87eef701b1214699fcad79328f06801176",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done!",
    "created_at": "2021-08-11T05:11:58Z",
    "updated_at": "2021-08-11T05:11:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496119",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496119"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496119"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 64,
    "side": "RIGHT",
    "in_reply_to_id": 686313503
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687413483",
    "pull_request_review_id": 728209810,
    "id": 687413483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzQxMzQ4Mw==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent",
    "path": "test/functional/mempool_limit.py",
    "position": 50,
    "original_position": 101,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "hg333",
      "id": 44291592,
      "node_id": "MDQ6VXNlcjQ0MjkxNTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/44291592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hg333",
      "html_url": "https://github.com/hg333",
      "followers_url": "https://api.github.com/users/hg333/followers",
      "following_url": "https://api.github.com/users/hg333/following{/other_user}",
      "gists_url": "https://api.github.com/users/hg333/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hg333/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hg333/subscriptions",
      "organizations_url": "https://api.github.com/users/hg333/orgs",
      "repos_url": "https://api.github.com/users/hg333/repos",
      "events_url": "https://api.github.com/users/hg333/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hg333/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is it sufficient to mine 99 blocks?",
    "created_at": "2021-08-12T06:06:10Z",
    "updated_at": "2021-08-12T06:06:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r687413483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687413483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r687413483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687413483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688979803",
    "pull_request_review_id": 730126293,
    "id": 688979803,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk3OTgwMw==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 99,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Maybe just me but I think `miniwallet.generate(92)` is easier to read since the comment already describes where the 92 comes from. ",
    "created_at": "2021-08-14T18:51:12Z",
    "updated_at": "2021-08-16T07:08:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r688979803",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688979803"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r688979803"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688979803/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689280712",
    "pull_request_review_id": 730126293,
    "id": 689280712,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTI4MDcxMg==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def create_large_transactions(",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 12,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it would be more consistent with other functions (`send_self_transfer`, `create_self_transfer`, `sendrawtransaction`) for this to be named `send_large_transactions` since it is also broadcasting them. \r\n\r\nNote that it would also make sense to change `no_of_large_tx_created` to `no_of_large_tx_sent` or `no_of_large_tx_broadcasted`.",
    "created_at": "2021-08-16T06:55:45Z",
    "updated_at": "2021-08-16T07:08:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689280712",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689280712"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689280712"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689280712/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689282534",
    "pull_request_review_id": 730126293,
    "id": 689282534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTI4MjUzNA==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, batch_of_txid * base_fee",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 117,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I tried smaller values instead of 30 transactions per batch, and the tests pass with 22 transactions. Is there a specific reason for it to be 30? If not then it seems like 22 is better since it is faster.",
    "created_at": "2021-08-16T06:59:07Z",
    "updated_at": "2021-08-16T07:08:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689282534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689282534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689282534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689282534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689354565",
    "pull_request_review_id": 730475080,
    "id": 689354565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM1NDU2NQ==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def create_large_transactions(",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 12,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Valid points! Will make suggested changes here to maintain the consistency\r\nEdit: Done",
    "created_at": "2021-08-16T08:53:21Z",
    "updated_at": "2021-08-16T09:41:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689354565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689354565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689354565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689354565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT",
    "in_reply_to_id": 689280712
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689355334",
    "pull_request_review_id": 730476068,
    "id": 689355334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM1NTMzNA==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, batch_of_txid * base_fee",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 117,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just wanted to populate the mempool that's why went for 30, let's do 22 then!\r\nEdit: Done",
    "created_at": "2021-08-16T08:54:26Z",
    "updated_at": "2021-08-16T09:41:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689355334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689355334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689355334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689355334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 689282534
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689689263",
    "pull_request_review_id": 730917165,
    "id": 689689263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTY4OTI2Mw==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent",
    "path": "test/functional/mempool_limit.py",
    "position": 50,
    "original_position": 101,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it might be because the block that the coinbase utxo is included in is counted as the first block, so you'd need 99 additional blocks for it to be 100 blocks deep?\r\n\r\nBut also, is it necessary to use `generate`? I think this test can be sped up using the miniwallet function `scan_blocks` instead. There are a few examples of other functional tests using it. Note that you'd need to remove `self.setup_clean_chain = True` to benefit from it. ",
    "created_at": "2021-08-16T16:34:54Z",
    "updated_at": "2021-08-16T16:39:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689689263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689689263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689689263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689689263/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 687413483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689692932",
    "pull_request_review_id": 730921885,
    "id": 689692932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTY5MjkzMg==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 91,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\r\n```",
    "created_at": "2021-08-16T16:40:10Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689692932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689692932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689692932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689692932/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689706218",
    "pull_request_review_id": 730921885,
    "id": 689706218,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcwNjIxOA==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate\n+    ):\n+        # Create large transactions by appending txouts in vout\n+        no_of_tx_created = 0\n+        for _ in range(no_of_tx_ids):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\n+            # Converts it into a CTransaction() instance to append the vouts\n+            tx_instance = from_hex(CTransaction(), hex)\n+            for txout in array_of_large_tx:\n+                tx_instance.vout.append(txout)\n+            tx_hex = tx_instance.serialize().hex()\n+            # Serializes and sends the tx to the nodes\n+            self.sendrawtransaction(from_node=node, tx_hex=tx_hex)\n+            no_of_tx_created += 1\n+        assert_equal(no_of_tx_created,no_of_tx_ids)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 28,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        assert_equal(no_of_tx_created, no_of_tx_ids)\r\n```",
    "created_at": "2021-08-16T16:59:17Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689706218",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689706218"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689706218"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689706218/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689710851",
    "pull_request_review_id": 730921885,
    "id": 689710851,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcxMDg1MQ==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 13,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "variable naming suggestion: replacing `no_of_tx_ids` with `num_txns` ",
    "created_at": "2021-08-16T17:06:22Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689710851",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689710851"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689710851"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689710851/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 187,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689712720",
    "pull_request_review_id": 730921885,
    "id": 689712720,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcxMjcyMA==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 12,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "since this is being added as a shared helper, would be nice to add a docstring to explain what this function is doing & possibly guidance on how the callers should provide the params. ",
    "created_at": "2021-08-16T17:09:18Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689712720",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689712720"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689712720"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689712720/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689714991",
    "pull_request_review_id": 730921885,
    "id": 689714991,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcxNDk5MQ==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate\n+    ):\n+        # Create large transactions by appending txouts in vout\n+        no_of_tx_created = 0\n+        for _ in range(no_of_tx_ids):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\n+            # Converts it into a CTransaction() instance to append the vouts\n+            tx_instance = from_hex(CTransaction(), hex)\n+            for txout in array_of_large_tx:\n+                tx_instance.vout.append(txout)\n+            tx_hex = tx_instance.serialize().hex()\n+            # Serializes and sends the tx to the nodes",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 25,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "did you mean this comment to be a line prior? since the serialization is the previous line & the sending is the next line. \r\n\r\nbut you could just get rid of this comment. generally we want to add comments if we can explain _why_ we're doing something. and let the code explain _what_ is happening. so in this case, this comment isn't adding any new information. ",
    "created_at": "2021-08-16T17:12:32Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689714991",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689714991"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689714991"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689714991/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 199,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689722737",
    "pull_request_review_id": 730921885,
    "id": 689722737,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcyMjczNw==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate\n+    ):\n+        # Create large transactions by appending txouts in vout\n+        no_of_tx_created = 0",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 16,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not really seeing the value of this local variable. if there was a way to return early in the for loop, incrementing the number could be a way to keep track of successes. but since there isn't any logic of the sort, any unsuccessful attempts would simply cause an error (eg. by `sendrawtransaction` throwing an exception). so `assert_equal(no_of_tx_created,no_of_tx_ids)` isn't actually increasing any guarantees from this code. \r\n\r\nmy suggestion would be to remove the `no_of_tx_created` logic from this function. you could return `no_of_tx_ids` if you want to maintain the current return value, or just update the call site since that is where the number of transactions to create gets passed in anyways. ",
    "created_at": "2021-08-16T17:24:26Z",
    "updated_at": "2021-08-16T17:54:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689722737",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689722737"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689722737"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689722737/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 190,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689727241",
    "pull_request_review_id": 730921885,
    "id": 689727241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTcyNzI0MQ==",
    "diff_hunk": "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()",
    "path": "test/functional/mempool_limit.py",
    "position": 27,
    "original_position": 39,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "you could move this line down to right before the for loop where it gets used \r\n\r\nto clarify, I'm talking about: `txouts = gen_return_txouts()`",
    "created_at": "2021-08-16T17:31:07Z",
    "updated_at": "2021-08-16T17:56:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689727241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689727241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689727241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689727241/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851379",
    "pull_request_review_id": 731123657,
    "id": 689851379,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTg1MTM3OQ==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate\n+    ):\n+        # Create large transactions by appending txouts in vout\n+        no_of_tx_created = 0\n+        for _ in range(no_of_tx_ids):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\n+            # Converts it into a CTransaction() instance to append the vouts\n+            tx_instance = from_hex(CTransaction(), hex)\n+            for txout in array_of_large_tx:\n+                tx_instance.vout.append(txout)\n+            tx_hex = tx_instance.serialize().hex()\n+            # Serializes and sends the tx to the nodes\n+            self.sendrawtransaction(from_node=node, tx_hex=tx_hex)\n+            no_of_tx_created += 1\n+        assert_equal(no_of_tx_created,no_of_tx_ids)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 28,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This assertion is itself removed now!",
    "created_at": "2021-08-16T20:51:57Z",
    "updated_at": "2021-08-16T20:51:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689851379",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851379"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689851379"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 689706218
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851680",
    "pull_request_review_id": 731124031,
    "id": 689851680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTg1MTY4MA==",
    "diff_hunk": "@@ -182,6 +183,26 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, no_of_tx_ids, fee_rate\n+    ):\n+        # Create large transactions by appending txouts in vout\n+        no_of_tx_created = 0",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 16,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "30a68532035821cc7ca325c61259094e415b7de5",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done! Thanks",
    "created_at": "2021-08-16T20:52:30Z",
    "updated_at": "2021-08-16T20:52:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689851680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r689851680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689851680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 190,
    "side": "RIGHT",
    "in_reply_to_id": 689722737
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690702210",
    "pull_request_review_id": 732198935,
    "id": 690702210,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDcwMjIxMA==",
    "diff_hunk": "@@ -20,55 +23,59 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        # Generate 68 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 with a fee rate much higher than the previous UTXO (3 batches of 25 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(77)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        no_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch of 25 transactions\n+            no_of_large_tx_sent += miniwallet.send_large_transactions(\n+                node, txouts, 25, batch_of_txid * base_fee\n+            )\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_sent, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(\n+            node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000')\n+        )\n \n+        # Deliberately tries to create a tx with a fee less that the minimum mempool fee to assert that it does not get added to the mempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 98,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "5dbe0df05c443db1923bec73d094b3813fd0be24",
    "user": {
      "login": "Zero-1729",
      "id": 23586626,
      "node_id": "MDQ6VXNlcjIzNTg2NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zero-1729",
      "html_url": "https://github.com/Zero-1729",
      "followers_url": "https://api.github.com/users/Zero-1729/followers",
      "following_url": "https://api.github.com/users/Zero-1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zero-1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
      "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
      "repos_url": "https://api.github.com/users/Zero-1729/repos",
      "events_url": "https://api.github.com/users/Zero-1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor nit:\r\n\r\n```suggestion\r\n        # Deliberately tries to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\r\n```",
    "created_at": "2021-08-17T20:33:44Z",
    "updated_at": "2021-08-17T20:33:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r690702210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690702210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r690702210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690702210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690712721",
    "pull_request_review_id": 732212272,
    "id": 690712721,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDcxMjcyMQ==",
    "diff_hunk": "@@ -20,55 +23,59 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+        # Generate 68 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 with a fee rate much higher than the previous UTXO (3 batches of 25 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(77)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 67,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "5dbe0df05c443db1923bec73d094b3813fd0be24",
    "user": {
      "login": "Zero-1729",
      "id": 23586626,
      "node_id": "MDQ6VXNlcjIzNTg2NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zero-1729",
      "html_url": "https://github.com/Zero-1729",
      "followers_url": "https://api.github.com/users/Zero-1729/followers",
      "following_url": "https://api.github.com/users/Zero-1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zero-1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
      "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
      "repos_url": "https://api.github.com/users/Zero-1729/repos",
      "events_url": "https://api.github.com/users/Zero-1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could consider rewording to:\r\n\r\n```suggestion\r\n        # Increase the tx fee rate massively to give subsequent transactions a higher priority in the mempool\r\n```",
    "created_at": "2021-08-17T20:49:54Z",
    "updated_at": "2021-08-17T20:49:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r690712721",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690712721"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r690712721"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/690712721/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691510124",
    "pull_request_review_id": 733230435,
    "id": 691510124,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTUxMDEyNA==",
    "diff_hunk": "@@ -5,70 +5,91 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+",
    "path": "test/functional/mempool_limit.py",
    "position": 25,
    "original_position": 39,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "3773532d682a3bfb0cea8898da10caa5f444a23e",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unnecessary new line",
    "created_at": "2021-08-18T18:36:59Z",
    "updated_at": "2021-08-18T18:49:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691510124",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691510124"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691510124"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691510124/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 32,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691512702",
    "pull_request_review_id": 733230435,
    "id": 691512702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTUxMjcwMg==",
    "diff_hunk": "@@ -5,70 +5,91 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 68 UTXOs to flood the mempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 48,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "3773532d682a3bfb0cea8898da10caa5f444a23e",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "68 is no longer accurate\r\n\r\n```suggestion\r\n        # Generate 77 UTXOs to flood the mempool\r\n```\r\n\r\nthis demonstrates one of the reasons it's better for comments to supplement reasoning rather than what the code is doing- if the code changes, it's easy for the comments to fall out of date.\r\n\r\nSo a better option would be to remove the hardcoding of the UTXO number from these comments. ",
    "created_at": "2021-08-18T18:40:50Z",
    "updated_at": "2021-08-18T18:49:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691512702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691512702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691512702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691512702/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691517640",
    "pull_request_review_id": 733230435,
    "id": 691517640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTUxNzY0MA==",
    "diff_hunk": "@@ -60,22 +67,29 @@ def run_test(self):\n                 node, txouts, 25, batch_of_txid * base_fee\n             )\n \n-        self.log.info('The tx should be evicted by now')\n+        self.log.info(\"The tx should be evicted by now\")\n         # The number of transactions created should be greater than the ones present in the mempool\n         assert_greater_than(no_of_large_tx_sent, len(node.getrawmempool()))\n         # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n         assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n-        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        self.log.info(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n         assert_greater_than(\n-            node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000')\n+            node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\")\n         )\n \n         # Deliberately tries to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        assert_raises_rpc_error(-26,\"mempool min fee not met\",miniwallet.send_self_transfer,from_node=node,fee_rate=relayfee,mempool_valid=False)\n+        self.log.info(\"Create a mempool tx that will not pass mempoolminfee\")",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 89,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "3773532d682a3bfb0cea8898da10caa5f444a23e",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "since you introduced this code in the last commit, it would make more sense to just style it properly there & then not retouch in the subsequent commit ",
    "created_at": "2021-08-18T18:48:13Z",
    "updated_at": "2021-08-18T18:49:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691517640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691517640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r691517640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691517640/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693041377",
    "pull_request_review_id": 735155616,
    "id": 693041377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA0MTM3Nw==",
    "diff_hunk": "@@ -182,6 +183,23 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, num_txns, fee_rate\n+    ):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 14,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Listing the parameters in an extra line is a style that we don't follow for function definitions, as the following search in the codebase shows:\r\n```\r\n$ cd ./test/functional\r\n$ git grep \"def .*($\"\r\ntest_framework/wallet.py:    def send_large_transactions(\r\n```\r\n(the only result is the one introduced in this commit)\r\n\r\n```suggestion\r\n    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):\r\n```\r\n",
    "created_at": "2021-08-20T15:37:57Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693041377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693041377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693041377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693041377/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 186,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 188,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693048747",
    "pull_request_review_id": 735155616,
    "id": 693048747,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA0ODc0Nw==",
    "diff_hunk": "@@ -182,6 +183,23 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, num_txns, fee_rate\n+    ):\n+        \"\"\"Creates and sends large transactions with the passed fee rate.\"\"\"\n+        # Create large transactions by appending txouts in vout\n+        for _ in range(num_txns):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\n+            # Converts it into a CTransaction() instance to append the vouts\n+            tx_instance = from_hex(CTransaction(), hex)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 21,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For the CTransaction case, we have an explicit helper `tx_from_hex` that is already imported (i.e. you can remove the `from_hex` import again):\r\n```suggestion\r\n            tx_instance = tx_from_hex(hex)\r\n```",
    "created_at": "2021-08-20T15:48:54Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693048747",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693048747"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693048747"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693048747/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693050011",
    "pull_request_review_id": 735155616,
    "id": 693050011,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA1MDAxMQ==",
    "diff_hunk": "@@ -182,6 +183,23 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(\n+        self, node, array_of_large_tx, num_txns, fee_rate\n+    ):\n+        \"\"\"Creates and sends large transactions with the passed fee rate.\"\"\"\n+        # Create large transactions by appending txouts in vout\n+        for _ in range(num_txns):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\n+            # Converts it into a CTransaction() instance to append the vouts\n+            tx_instance = from_hex(CTransaction(), hex)\n+            for txout in array_of_large_tx:\n+                tx_instance.vout.append(txout)\n+            tx_hex = tx_instance.serialize().hex()\n+            self.sendrawtransaction(from_node=node, tx_hex=tx_hex)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 25,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: probably a matter of taste, but there's no need for introducing a temporary variable:\r\n```suggestion\r\n            self.sendrawtransaction(from_node=node, tx_hex=tx_instance.serialize().hex())\r\n```",
    "created_at": "2021-08-20T15:50:53Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693050011",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693050011"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693050011"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693050011/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 198,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 199,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693053005",
    "pull_request_review_id": 735155616,
    "id": 693053005,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA1MzAwNQ==",
    "diff_hunk": "@@ -5,9 +5,12 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 6,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd suggest grouping the `COINBASE_MATURITY` import to the (test-framework related) ones below, i.e.:\r\n```suggestion\r\nfrom decimal import Decimal\r\n\r\nfrom test_framework.blocktools import COINBASE_MATURITY\r\nfrom test_framework.test_framework import BitcoinTestFramework\r\n```",
    "created_at": "2021-08-20T15:55:42Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693053005",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693053005"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693053005"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693053005/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 7,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 10,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061654",
    "pull_request_review_id": 735155616,
    "id": 693061654,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA2MTY1NA==",
    "diff_hunk": "@@ -20,55 +23,58 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO",
    "path": "test/functional/mempool_limit.py",
    "position": 44,
    "original_position": 39,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd in some way mention here that each batch consists of 25 transactions -- without that it is not immedately clear how you end up with the number 77.",
    "created_at": "2021-08-20T16:09:24Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693061654",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061654"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693061654"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 47,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061901",
    "pull_request_review_id": 735155616,
    "id": 693061901,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA2MTkwMQ==",
    "diff_hunk": "@@ -20,55 +23,58 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(77)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        no_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            no_of_large_tx_sent += miniwallet.send_large_transactions(\n+                node, txouts, 25, batch_of_txid * base_fee\n+            )\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_sent, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(\n+            node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000')\n+        )\n \n+        # Deliberately tries to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 97,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        # Deliberately try to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\r\n```",
    "created_at": "2021-08-20T16:09:51Z",
    "updated_at": "2021-08-20T16:10:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693061901",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061901"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693061901"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693061901/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693085854",
    "pull_request_review_id": 735213847,
    "id": 693085854,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA4NTg1NA==",
    "diff_hunk": "@@ -20,55 +23,58 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO",
    "path": "test/functional/mempool_limit.py",
    "position": 44,
    "original_position": 39,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "f0afb33dd8868f6d40e64d57ce299518d9ff3444",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated the code below the comments as `miniwallet.generate(1 + (3 * 25) + 1)` to make it clear",
    "created_at": "2021-08-20T16:48:57Z",
    "updated_at": "2021-08-20T16:48:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693085854",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693085854"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r693085854"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693085854/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 47,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 693061654
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695649626",
    "pull_request_review_id": 738216589,
    "id": 695649626,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTY0OTYyNg==",
    "diff_hunk": "@@ -182,6 +182,19 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):\n+        \"\"\"Creates and sends large transactions with the passed fee rate.\"\"\"\n+        # Create large transactions by appending txouts in vout\n+        for _ in range(num_txns):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 9,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "eb0ff37956ea3f823e9155a5a259e17f37e0da0b",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry for not noticing this earlier in my last review round, but it looks like the conversion from hex-to-tx is not necessary here, since `create_self_transfer` already provides you a `CTransaction` instance (can be accessed via `['tx']`). I.e. the method can even be shorter:\r\n\r\n```diff\r\n--- a/test/functional/test_framework/wallet.py\r\n+++ b/test/functional/test_framework/wallet.py\r\n@@ -187,12 +187,10 @@ class MiniWallet:\r\n         # Create large transactions by appending txouts in vout\r\n         for _ in range(num_txns):\r\n             # Create a self transfer here to get the tx details and then append the vout to increase the tx size\r\n-            hex = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['hex']\r\n-            # Converts it into a CTransaction() instance to append the vouts\r\n-            tx_instance = tx_from_hex(hex)\r\n+            tx = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['tx']\r\n             for txout in array_of_large_tx:\r\n-                tx_instance.vout.append(txout)\r\n-            self.sendrawtransaction(from_node=node, tx_hex=tx_instance.serialize().hex())\r\n+                tx.vout.append(txout)\r\n+            self.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\r\n         return num_txns\r\n```",
    "created_at": "2021-08-25T11:11:38Z",
    "updated_at": "2021-08-25T11:11:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695649626",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695649626"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695649626"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695649626/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 190,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695653992",
    "pull_request_review_id": 738222355,
    "id": 695653992,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTY1Mzk5Mg==",
    "diff_hunk": "@@ -6,69 +6,76 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 25) + 1)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 50,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "53283a6b278c183124bb766e72ee33a9fd79a74b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would be nice to use `self.generate(miniwallet, ...)` for new code",
    "created_at": "2021-08-25T11:18:24Z",
    "updated_at": "2021-08-25T11:18:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695653992",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695653992"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695653992"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695653992/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695654053",
    "pull_request_review_id": 738222355,
    "id": 695654053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTY1NDA1Mw==",
    "diff_hunk": "@@ -6,69 +6,76 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 25) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 53,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "53283a6b278c183124bb766e72ee33a9fd79a74b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same",
    "created_at": "2021-08-25T11:18:30Z",
    "updated_at": "2021-08-25T11:18:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695654053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695654053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r695654053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695654053/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699204455",
    "pull_request_review_id": 742567370,
    "id": 699204455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIwNDQ1NQ==",
    "diff_hunk": "@@ -20,55 +23,52 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (3 * 25) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        no_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            no_of_large_tx_sent += miniwallet.send_large_transactions(node, txouts, 25, batch_of_txid * base_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 72,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "4902ce86afc6b9c8a7a72b1c91466fe26a00f9b9",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in https://github.com/bitcoin/bitcoin/pull/22543/commits/4902ce86afc6b9c8a7a72b1c91466fe26a00f9b9:\r\n\r\nid suggest using a named variable (instead of just 25) to make this more clear. also, `no_of_large...` should be `num_of_large...`:\r\n\r\n```suggestion\r\ntx_batch_size = 25\r\nfor batch_of_txid in range(1, 4):\r\n    # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\r\n    miniwallet.send_large_transactions(node, txouts, tx_batch_size, batch_of_txid * base_fee) \r\n    num_of_large_tx_sent += tx_batch_size",
    "created_at": "2021-08-31T10:46:35Z",
    "updated_at": "2021-08-31T10:55:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r699204455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699204455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r699204455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699204455/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 54,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 56,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699207130",
    "pull_request_review_id": 742567370,
    "id": 699207130,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIwNzEzMA==",
    "diff_hunk": "@@ -182,6 +182,17 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):\n+        \"\"\"Creates and sends large transactions with the passed fee rate.\"\"\"\n+        # Create large transactions by appending txouts in vout\n+        for _ in range(num_txns):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            tx = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['tx']\n+            for txout in array_of_large_tx:\n+                tx.vout.append(txout)\n+            self.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n+        return num_txns",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 13,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "4902ce86afc6b9c8a7a72b1c91466fe26a00f9b9",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "is there a reason you have this helper function returning the same variable that was passed in? personally, i find this confusing and would not expect to have to handle a returned value if i were using this in another test",
    "created_at": "2021-08-31T10:50:12Z",
    "updated_at": "2021-08-31T10:55:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r699207130",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699207130"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r699207130"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699207130/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 194,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700956653",
    "pull_request_review_id": 744890237,
    "id": 700956653,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDk1NjY1Mw==",
    "diff_hunk": "@@ -20,55 +23,52 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (3 * 25) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        no_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(1, 4):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            no_of_large_tx_sent += miniwallet.send_large_transactions(node, txouts, 25, batch_of_txid * base_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 72,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "4902ce86afc6b9c8a7a72b1c91466fe26a00f9b9",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for the naming suggestion. Has been fixed",
    "created_at": "2021-09-02T10:30:06Z",
    "updated_at": "2021-09-02T10:30:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700956653",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700956653"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700956653"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700956653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 54,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 56,
    "side": "RIGHT",
    "in_reply_to_id": 699204455
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700957832",
    "pull_request_review_id": 744891755,
    "id": 700957832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDk1NzgzMg==",
    "diff_hunk": "@@ -182,6 +182,17 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):\n+        \"\"\"Creates and sends large transactions with the passed fee rate.\"\"\"\n+        # Create large transactions by appending txouts in vout\n+        for _ in range(num_txns):\n+            # Create a self transfer here to get the tx details and then append the vout to increase the tx size\n+            tx = self.create_self_transfer(from_node=node, fee_rate=fee_rate)['tx']\n+            for txout in array_of_large_tx:\n+                tx.vout.append(txout)\n+            self.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n+        return num_txns",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 13,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "4902ce86afc6b9c8a7a72b1c91466fe26a00f9b9",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Makes sense, as pointed out by other reviewers too, I have taken this into consideration, and converted this into a void function.",
    "created_at": "2021-09-02T10:31:54Z",
    "updated_at": "2021-09-02T10:31:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700957832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700957832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700957832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700957832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 194,
    "side": "RIGHT",
    "in_reply_to_id": 699207130
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700978781",
    "pull_request_review_id": 744919729,
    "id": 700978781,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDk3ODc4MQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 75,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this should be \r\n```suggestion\r\n            num_of_large_tx_sent += tx_batch_size\r\n```\r\nper https://www.python.org/dev/peps/pep-0008/#other-recommendations",
    "created_at": "2021-09-02T11:04:44Z",
    "updated_at": "2021-09-02T11:05:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700978781",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700978781"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700978781"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700978781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700998339",
    "pull_request_review_id": 744946025,
    "id": 700998339,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDk5ODMzOQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 75,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "All the styling changes have been handled in e8a3ff3b586beb4e2bb2d77a3bf4d7b98a1a2df2 :))\r\n\r\nHope this answers the query",
    "created_at": "2021-09-02T11:35:38Z",
    "updated_at": "2021-09-02T11:35:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700998339",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700998339"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r700998339"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700998339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 700978781
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701022511",
    "pull_request_review_id": 744978622,
    "id": 701022511,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTAyMjUxMQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 75,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah, gotcha, i missed that in the second commit.\r\n\r\nin general, I would avoid re-editing the same line multiple times in different commits as it requires the reviewer to look at the same line multiple times. not a big deal tho",
    "created_at": "2021-09-02T12:12:26Z",
    "updated_at": "2021-09-02T12:13:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701022511",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701022511"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701022511"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701022511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 700978781
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701210709",
    "pull_request_review_id": 745236839,
    "id": 701210709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTIxMDcwOQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(num_of_large_tx_sent, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        # Deliberately try to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26,\"mempool min fee not met\",miniwallet.send_self_transfer,from_node=node,fee_rate=relayfee,mempool_valid=False)\n+\n \n if __name__ == '__main__':\n-    MempoolLimitTest().main()\n+    MempoolLimitTest().main()",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 108,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is a bit confusing to mess with the style in unrelated lines in the first commit and then fix it up in the second commit. Why touch the lines in the first place?\r\n\r\n",
    "created_at": "2021-09-02T15:45:05Z",
    "updated_at": "2021-09-02T15:49:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701210709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701210709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701210709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701210709/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 77,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701211151",
    "pull_request_review_id": 745236839,
    "id": 701211151,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTIxMTE1MQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(num_of_large_tx_sent, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n \n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is larger than minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        # Deliberately try to create a tx with a fee less than the minimum mempool fee to assert that it does not get added to the mempool\n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26,\"mempool min fee not met\",miniwallet.send_self_transfer,from_node=node,fee_rate=relayfee,mempool_valid=False)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 103,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is a bit confusing to add new code in the wrong style and then fix it up in the second commit. Why not add it with the right style from the beginning?",
    "created_at": "2021-09-02T15:45:35Z",
    "updated_at": "2021-09-02T15:49:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701211151",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701211151"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701211151"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701211151/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213066",
    "pull_request_review_id": 745236839,
    "id": 701213066,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTIxMzA2Ng==",
    "diff_hunk": "@@ -182,6 +182,16 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this needed to be put into miniwallet?\r\n\r\nIf not, it would be better suited in the test that uses it. Either as function or inline, because it is only called once.\r\n\r\nRegardless, the interface should be cleaned up. `array_of_large_tx` is *not* an array of txs, but of txouts.",
    "created_at": "2021-09-02T15:47:57Z",
    "updated_at": "2021-09-02T15:49:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701213066",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213066"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701213066"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213066/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 185,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213849",
    "pull_request_review_id": 745236839,
    "id": 701213849,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTIxMzg0OQ==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 23,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is a bit confusing to review if the `self.node[0]` -> `node` replacement is done in the same commit as the miniwallet changes. Maybe split it up?",
    "created_at": "2021-09-02T15:48:49Z",
    "updated_at": "2021-09-02T15:49:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701213849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701213849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701213849/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701214260",
    "pull_request_review_id": 745236839,
    "id": 701214260,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTIxNDI2MA==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet,1 + (num_of_batches * tx_batch_size) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node,COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info('Fill up the mempool with txs with higher fee rate')\n+        num_of_large_tx_sent = 0\n+        txouts = gen_return_txouts()\n+\n+        for batch_of_txid in range(num_of_batches):\n+            # Increment the tx fee rate gradually by a factor of (base_fee) for each batch\n+            miniwallet.send_large_transactions(node, txouts, tx_batch_size, (batch_of_txid+1) * base_fee)\n+            num_of_large_tx_sent +=tx_batch_size",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 75,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\r\n\r\nIt is a bit confusing to add new code in the wrong style and then fix it up in the second commit. Why not add it with the right style from the beginning?\r\n",
    "created_at": "2021-09-02T15:49:20Z",
    "updated_at": "2021-09-02T15:49:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701214260",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701214260"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701214260"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701214260/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 700978781
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701342916",
    "pull_request_review_id": 745413326,
    "id": 701342916,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTM0MjkxNg==",
    "diff_hunk": "@@ -182,6 +182,16 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I thought it could make sense as a shared helper since I expected the functionality to be useful in different tests as well. Although this only introduces one caller, would make it easier for others to find.",
    "created_at": "2021-09-02T18:54:38Z",
    "updated_at": "2021-09-02T18:54:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701342916",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701342916"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701342916"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701342916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 185,
    "side": "RIGHT",
    "in_reply_to_id": 701213066
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701685136",
    "pull_request_review_id": 745829769,
    "id": 701685136,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTY4NTEzNg==",
    "diff_hunk": "@@ -182,6 +182,16 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The issue I see is that the interface isn't correct in that the passed `fee_rate` won't be the fee rate of the tx returned. Inlining it would avoid the confusion in the interface.",
    "created_at": "2021-09-03T07:59:36Z",
    "updated_at": "2021-09-03T07:59:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701685136",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701685136"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r701685136"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701685136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 185,
    "side": "RIGHT",
    "in_reply_to_id": 701213066
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702300385",
    "pull_request_review_id": 746579848,
    "id": 702300385,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjMwMDM4NQ==",
    "diff_hunk": "@@ -182,6 +182,16 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "gotcha, yeah agreed that the interface should be self-evident if the function is kept here, or moving it over would be another option. ",
    "created_at": "2021-09-04T16:03:19Z",
    "updated_at": "2021-09-04T16:03:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r702300385",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702300385"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r702300385"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702300385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 185,
    "side": "RIGHT",
    "in_reply_to_id": 701213066
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117202",
    "pull_request_review_id": 751326542,
    "id": 706117202,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjExNzIwMg==",
    "diff_hunk": "@@ -20,55 +23,55 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 23,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for the suggestion. I have split up the commits",
    "created_at": "2021-09-10T11:49:14Z",
    "updated_at": "2021-09-10T11:49:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r706117202",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117202"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r706117202"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 701213849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117878",
    "pull_request_review_id": 751327357,
    "id": 706117878,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjExNzg3OA==",
    "diff_hunk": "@@ -182,6 +182,16 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n+    def send_large_transactions(self, node, array_of_large_tx, num_txns, fee_rate):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "0b361fe5b841f7c96b6dcfe805ee695ea49a1935",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Makes sense, this is a very specific case hence I have moved the helper function to the `mempool_limit.py`\r\nThanks for the suggestion",
    "created_at": "2021-09-10T11:50:19Z",
    "updated_at": "2021-09-10T11:50:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r706117878",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117878"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r706117878"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706117878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 185,
    "side": "RIGHT",
    "in_reply_to_id": 701213066
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707108902",
    "pull_request_review_id": 752448027,
    "id": 707108902,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzEwODkwMg==",
    "diff_hunk": "@@ -20,55 +23,60 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def send_large_txs(self, node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size):\n+        for _ in range(tx_batch_size):\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=(batch_of_txid + 1) * base_fee)['tx']\n+            for txout in txouts:\n+                tx.vout.append(txout)\n+            miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node=self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        num_of_large_tx_sent = 0\n+        for batch_of_txid in range(num_of_batches):\n+            self.send_large_txs(node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 77,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "22c73921c5c753c2e97fefbd207b163e610af158",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit in the first commit:\r\n\r\nIt could make sense to drop the `batch_of_txid` argument and instead pass the calculated fee rate. This reduces the number of arguments passed to the function and increases its flexibility.\r\n\r\nThough, an alternative would be to simply inline the function.\r\n\r\n```suggestion\r\n            self.send_large_txs(node, miniwallet, txouts, (batch_of_txid + 1) * base_fee, tx_batch_size)\r\n```",
    "created_at": "2021-09-13T08:20:43Z",
    "updated_at": "2021-09-13T08:20:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707108902",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707108902"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707108902"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707108902/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707114717",
    "pull_request_review_id": 752455775,
    "id": 707114717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzExNDcxNw==",
    "diff_hunk": "@@ -20,55 +23,60 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def send_large_txs(self, node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size):\n+        for _ in range(tx_batch_size):\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=(batch_of_txid + 1) * base_fee)['tx']\n+            for txout in txouts:\n+                tx.vout.append(txout)\n+            miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node=self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        num_of_large_tx_sent = 0\n+        for batch_of_txid in range(num_of_batches):\n+            self.send_large_txs(node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size)\n+            num_of_large_tx_sent += tx_batch_size\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(num_of_large_tx_sent, len(node.getrawmempool()))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 85,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "22c73921c5c753c2e97fefbd207b163e610af158",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in the first commit: Is the `num_of_large_tx_sent` really needed?  Wouldn't this be equal to `num_of_batches * tx_batch_size`?\r\n\r\nAlso, the mempool should be deterministic, so it could make sense to check the exact number and mention in a comment that it should be less than `90` or `num_of_batches * tx_batch_size`?",
    "created_at": "2021-09-13T08:28:23Z",
    "updated_at": "2021-09-13T08:29:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707114717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707114717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707114717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707114717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707239936",
    "pull_request_review_id": 752620921,
    "id": 707239936,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzIzOTkzNg==",
    "diff_hunk": "@@ -20,55 +23,60 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def send_large_txs(self, node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size):\n+        for _ in range(tx_batch_size):\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=(batch_of_txid + 1) * base_fee)['tx']\n+            for txout in txouts:\n+                tx.vout.append(txout)\n+            miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node=self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        num_of_large_tx_sent = 0\n+        for batch_of_txid in range(num_of_batches):\n+            self.send_large_txs(node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 77,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "22c73921c5c753c2e97fefbd207b163e610af158",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Makes sense! On it",
    "created_at": "2021-09-13T11:20:50Z",
    "updated_at": "2021-09-13T11:20:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707239936",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707239936"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707239936"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707239936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 63,
    "side": "RIGHT",
    "in_reply_to_id": 707108902
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707262139",
    "pull_request_review_id": 752650146,
    "id": 707262139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzI2MjEzOQ==",
    "diff_hunk": "@@ -20,55 +23,60 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def send_large_txs(self, node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size):\n+        for _ in range(tx_batch_size):\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=(batch_of_txid + 1) * base_fee)['tx']\n+            for txout in txouts:\n+                tx.vout.append(txout)\n+            miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node=self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        self.log.info('Check that mempoolminfee is minrelaytxfee')\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        tx_batch_size = 25\n+        num_of_batches = 3\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 3 batches of multiple transactions with a fee rate much higher than the previous UTXO\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)\n \n-        txids = []\n-        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        num_of_large_tx_sent = 0\n+        for batch_of_txid in range(num_of_batches):\n+            self.send_large_txs(node, miniwallet, txouts, batch_of_txid, base_fee, tx_batch_size)\n+            num_of_large_tx_sent += tx_batch_size\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(num_of_large_tx_sent, len(node.getrawmempool()))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 85,
    "commit_id": "08634e82c68ea1be79e1395f4f551082f497023f",
    "original_commit_id": "22c73921c5c753c2e97fefbd207b163e610af158",
    "user": {
      "login": "ShubhamPalriwala",
      "id": 55556994,
      "node_id": "MDQ6VXNlcjU1NTU2OTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/55556994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShubhamPalriwala",
      "html_url": "https://github.com/ShubhamPalriwala",
      "followers_url": "https://api.github.com/users/ShubhamPalriwala/followers",
      "following_url": "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShubhamPalriwala/subscriptions",
      "organizations_url": "https://api.github.com/users/ShubhamPalriwala/orgs",
      "repos_url": "https://api.github.com/users/ShubhamPalriwala/repos",
      "events_url": "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShubhamPalriwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done! Assuming one can understand that `tx_batch_size * num_of_batches` is equal to the number of transactions created, works!",
    "created_at": "2021-09-13T11:54:31Z",
    "updated_at": "2021-09-13T11:54:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707262139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707262139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r707262139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/707262139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT",
    "in_reply_to_id": 707114717
  }
]