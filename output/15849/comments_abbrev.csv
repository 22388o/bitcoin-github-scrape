DrahtBot,2019-04-18T21:25:06Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-484694957,484694957,
practicalswift,2019-04-23T11:33:05Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-485765187,485765187,
jamesob,2019-04-26T19:05:51Z,"@ryanofsky thanks very much for the review. Per usual, your suggested changes are indelibly righteous. I've made all of them save for the last I commented on.",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487167729,487167729,
jamesob,2019-04-26T20:00:19Z,"Reran benchmarking; no performance difference.\n\n### absolute\n|                      name                      | iterations |           master           |      threadnames2.18       |\n|------------------------------------------------|-----------:|----------------------------|----------------------------|\n| build.make.23.clang                            |          1 | 135.8741 (Â± 0.0000)  ",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487182947,487182947,
jamesob,2019-04-26T20:26:39Z,"@ryanofsky Oops! Thanks, pushed.",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487190570,487190570,
jamesob,2019-04-27T00:27:53Z,"Latest benchmark; 0.7% difference seems attributable to noise.\n\n![ibd local 500000 504000 dbcache=2048](https://user-images.githubusercontent.com/73197/56842255-90aec500-6861-11e9-8e9e-d45109bd3b2c.png)\n",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487238248,487238248,
Empact,2019-04-27T08:22:51Z,"utACK https://github.com/bitcoin/bitcoin/pull/15849/commits/0cfcb8d470bd23f34e1bd81810444a1db8e4c702\n\nnit: if I'm not mistaken you can use rvalues and move to avoid copies of the name throughout (channeling @sipa) https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303737\n\n```diff\ndiff --git a/src/util/threadnames.cpp b/src/util/threadnames.cpp\nindex 3217855f7..2ca91613c 10064",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487266746,487266746,
jamesob,2019-04-27T12:31:57Z,"@Empact thanks, pushed.",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487282338,487282338,
practicalswift,2019-04-27T16:49:34Z,"I'm not sure the change from `const std::string&` to `std::string&&` is an improvement TBH.\n\nIt brings no performance benefit in this case AFAICT and `const std::string&` is what we're using in the rest of the code base.\n\n```\n$ git grep -E 'const std::string( |)&' | wc -l\n851\n$ git grep -E 'std::string( |)&&' | wc -l\n0\n```",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487301553,487301553,
Empact,2019-04-27T21:10:04Z,"@practicalswift Rvalues make sense in cases where you have setters or constructors which can consume / incorporate the object passed in. We're not using it with string but you can see other uses here:\n```\n$ git grep -E '[a-z]&&' | wc -l\n44\n```\n\nIf you're not seeing a performance benefit, it could be because my patch is apparently missing one move, as per: https://www.chromium.org/rvalu",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487320000,487320000,
jamesob,2019-04-29T17:58:14Z,"Thanks for the input, all. I've reverted back to Russ' case 2 with a `std::move` addition. In any case it doesn't matter much since this function is only called a handful of times during a bitcoind run.",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487681104,487681104,
Empact,2019-04-30T06:38:19Z,utACK https://github.com/bitcoin/bitcoin/pull/15849/commits/8722e54e56fd959fd4ff2321b36a7640dee440c5,https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-487835604,487835604,
jnewbery,2019-04-30T18:44:11Z,"This is great. Very nicely structured PR and excellent commit messages ðŸ™Œ \n\nutACK 8722e54e56fd959fd4ff2321b36a7640dee440c5\n\nThe functional tests should be updated to have this enabled by default: https://github.com/bitcoin/bitcoin/blob/10ed4dff24470f22b4bc4030d534f4e1ed5f1c2f/test/functional/test_framework/test_node.py#L83",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-488068611,488068611,
MarcoFalke,2019-04-30T19:24:21Z,"re-utACK 8722e54e56fd959fd4ff2321b36a7640dee440c5 (Only change since my previous review is DEFAULT_LOGTHREADNAMES=false and stylistic updates\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-utACK 8722e54e56fd959fd4ff2321b36a7640dee440c5 (Only change since my previous review is DEFAULT_LOGTHREADNAMES=",https://github.com/bitcoin/bitcoin/pull/15849#issuecomment-488082373,488082373,
practicalswift,2019-04-25T21:11:26Z,I think this is a pessimizing move which prevents copy elision.,https://github.com/bitcoin/bitcoin/pull/15849#discussion_r278733529,278733529,src/logging.cpp
practicalswift,2019-04-25T21:16:25Z,Reorder to match the order the compiler will use (which is the order of declaration): so please put `fTry` first :-),https://github.com/bitcoin/bitcoin/pull/15849#discussion_r278735199,278735199,src/sync.cpp
jamesob,2019-04-26T13:59:05Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r278960448,278960448,src/logging.cpp
jamesob,2019-04-26T13:59:11Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r278960491,278960491,src/sync.cpp
ryanofsky,2019-04-26T16:14:54Z,"In commit ""disable thread_local on unreliable platforms"" (c1d159999c6fc2b81fb8d0caf7d68a744d127fb8)\n\nCommit message is misleading. It sounds like this disables the `thread_local` keyword when actually it disables the `HAVE_THREAD_LOCAL` macro. Would suggest: ""disable HAVE_THREAD_LOCAL on unreliable platforms"" and mentioning that this doesn't affect anything except the DEBUG_LOCKCONTENTION impl",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279014719,279014719,configure.ac
ryanofsky,2019-04-26T16:29:29Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (91cc480ddde33e92d87795d72ff28658bcc88877)\n\nNow that we have a util directory, I'd suggest calling this `util/threadnames.h` or `util/threads.h`.\n\nI'd also suggest going with `util::ThreadRename` instead of `thread_util::Rename`. Even though we're only doing it a few places, and it's less important in smaller projects like o",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279019382,279019382,src/Makefile.am
ryanofsky,2019-04-26T16:34:48Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (91cc480ddde33e92d87795d72ff28658bcc88877)\n\nSuggest formatting with clang-format. Namespace contents shouldn't be indented here.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279020898,279020898,src/threadutil.h
ryanofsky,2019-04-26T16:45:55Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (91cc480ddde33e92d87795d72ff28658bcc88877)\n\nNot sure if you still have any efficiency concerns at this point, but just in case you do, it would be possible to avoid a copy and allocation here by changing the return type to `const std::string&`",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279024642,279024642,src/threadutil.h
ryanofsky,2019-04-26T16:48:55Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (91cc480ddde33e92d87795d72ff28658bcc88877)\n\nNote: Maybe obvious, but just in case it helps other reviewers, this code is unchanged (easy to verify with `git log -p -n1 --color-moved=dimmed_zebra`)",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279025599,279025599,src/threadutil.cpp
ryanofsky,2019-04-26T16:53:31Z,"In commit ""tests: add threadutil tests"" (553a4d660b3cd4b9ed1ea66b780bf001081eaa64)\n\nNice test!",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279027141,279027141,src/test/threadutil_tests.cpp
ryanofsky,2019-04-26T16:55:18Z,"In commit ""threads: prefix log messages with thread names"" (4fba3ead9811ebe47161e9e7f535a7cc88403cf5)\n\nCould sort alphabetically (thread before util)",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279027705,279027705,src/logging.cpp
ryanofsky,2019-04-26T17:06:04Z,"In commit ""threads: add thread names to deadlock debugging message"" (503c1ff6eeeb6e222ff446033745650ba59ab659)\n\nIn case you do take my earlier suggestion and change `GetInternalName` to return a const string reference instead of a temporary string, you could change this type to a const string reference and avoid any string copy initializing this struct field (it would point directly to the `g_",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279030836,279030836,src/sync.cpp
ryanofsky,2019-04-26T17:13:48Z,"In commit ""threads: prefix log messages with thread names"" (4fba3ead9811ebe47161e9e7f535a7cc88403cf5)\n\nNot sure if you dropped the `&` intentionally here. It would make sense to drop it, so the string could be moved from instead of copied. But you'd also want to drop the `const` and add `std::move` below, and also change the `Logger::LogPrintStr` function similarly (function calling this funct",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279033285,279033285,src/logging.cpp
ryanofsky,2019-04-26T17:17:55Z,"In commit ""threads: prefix log messages with thread names"" (4fba3ead9811ebe47161e9e7f535a7cc88403cf5)\n\nSome unneeded parentheses here",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279034566,279034566,src/logging.cpp
ryanofsky,2019-04-26T17:20:50Z,"In commit ""threads: prefix log messages with thread names"" (4fba3ead9811ebe47161e9e7f535a7cc88403cf5)\n\nSince this is renaming, could go to with current lowercase convention.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279035502,279035502,src/logging.cpp
jamesob,2019-04-26T19:02:33Z,In making this change I hit some compiler barf that has me out of my depths: https://gist.github.com/jamesob/5a19c75b34a49a4972b4105e0287d79d,https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279069419,279069419,src/sync.cpp
ryanofsky,2019-04-26T19:41:37Z,"Oh, the relevant part of that error message is:\n\n```\nsync.cpp:133:33: note: in instantiation of member function 'std::vector<std::pair<void *, CLockLocation>, std::allocator<std::pair<void *, CLockLocation> > >::operator=' requested here\n        lockdata.lockorders[p1] = g_lockstack;\n```\n\nIt's complaining that it can't copy the g_lockstack variable, which makes sense since adding a r",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279080004,279080004,src/sync.cpp
ryanofsky,2019-04-26T20:03:48Z,"I think I was wrong. Even with a reference member CLockLocation should still be copyable, just not assignable, so you may be able to fix this by emplacing into lockorders instead of assigning into it.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279086278,279086278,src/sync.cpp
jamesob,2019-04-26T20:04:15Z,Fixed by changing the above assignment to `emplace()` per your advice. Thanks!,https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279086419,279086419,src/sync.cpp
ryanofsky,2019-04-26T20:16:13Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (1cf8779ee2887e3c8ea0265fe8bbb9ecbd502172)\n\nSorry, this is from a change I suggested, but it isn't really safe (and causes a warning): \n\n```\nutil/threadnames.cpp:48:59: warning: returning reference to local temporary object [-Wreturn-stack-address]\nconst std::string& util::ThreadGetInternalName() { return """"; }\n```\n",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279089809,279089809,src/util/threadnames.cpp
ryanofsky,2019-04-26T20:19:26Z,"In commit ""threads: introduce threadutil, refactor thread naming"" (1cf8779ee2887e3c8ea0265fe8bbb9ecbd502172)\n\nShould use `BITCOIN_UTIL_THREADNAMES_H`. Also commit message text reference previous names and could be updated.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279090696,279090696,src/util/threadnames.h
MarcoFalke,2019-04-26T22:03:37Z,"in commit 195ba388eb tests: add threadutil tests\n\n\nstyle-nit: Should be `const`, since it is upper cased?",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279116351,279116351,src/test/util_threadnames_tests.cpp
MarcoFalke,2019-04-26T22:10:37Z,"Why does the OP say it is off by default, but the code and release notes otherwise?\n\n```\n static const bool DEFAULT_LOGTHREADNAMES = true;",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279117759,279117759,doc/release-notes-pr13168.md
MarcoFalke,2019-04-26T22:20:17Z,"style-nit: in commit 951769cf12 threads: prefix log messages with thread names\n\nCould add `{}`, according to developer notes for new code?",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279119514,279119514,src/logging.cpp
jamesob,2019-04-26T22:40:27Z,"Wowow, something must've gotten screwed up in a rebase. Fixing - thanks for the catch.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279122981,279122981,doc/release-notes-pr13168.md
jamesob,2019-04-26T22:47:24Z,"Done, thanks.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279124037,279124037,src/logging.cpp
jamesob,2019-04-26T22:47:34Z,"Done, thanks.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279124064,279124064,src/test/util_threadnames_tests.cpp
ryanofsky,2019-04-29T15:37:07Z,"In commit ""threads: prefix log messages with thread names"" (62ea22c1c0bd5e41715f05ec893f2237ed3ad3b3)\n\nThis seems outdated (they aren't prefixed by default).",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279418774,279418774,doc/release-notes-pr13168.md
MarcoFalke,2019-04-29T16:54:08Z,"style-nit (since you'd have to fix up other things anyway): Could move the colon to the next line, according to the style-guideline for new code?\n\n```suggestion\n        const char* pszName, const char* pszFile, int nLine, bool fTryIn, const std::string& thread_name)\n            : fTry...\n```",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279448560,279448560,src/sync.cpp
MarcoFalke,2019-04-29T17:05:23Z,"I'd prefer to undo this change. This does not give any performance gain, nor is it more readable",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279452519,279452519,src/util/threadnames.cpp
jamesob,2019-04-29T17:34:39Z,"Argh, another artifact of a bad rebase. Thanks.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279463316,279463316,doc/release-notes-pr13168.md
jamesob,2019-04-29T17:39:46Z,"Yep, reverting.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279465265,279465265,src/util/threadnames.cpp
jamesob,2019-04-29T17:40:16Z,FWIW all this bikeshedding is happening over a function call that is made ~20 times throughout the entire run of `bitcoind`.,https://github.com/bitcoin/bitcoin/pull/15849#discussion_r279465466,279465466,src/util/threadnames.cpp
jonasschnelli,2019-05-02T08:58:11Z,"Why can't we check with something like:\n\n```bash\nAC_MSG_CHECKING([for thread_local support])\nAC_LINK_IFELSE([AC_LANG_SOURCE([\n  #include <thread>\n  static thread_local int foo = 0;\n  static void run_thread() { foo++;}\n  int main(){\n  for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n  return foo;\n  }\n  ])],\n  [\n    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r280335552,280335552,configure.ac
jamesob,2019-05-02T18:12:51Z,"Because bad `thread_local` behavior sometimes doesn't fail explicitly on certain platforms (e.g. mingw32) until execution, and only under certain circumstances.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r280537603,280537603,configure.ac
jonasschnelli,2019-05-02T18:19:33Z,"Can you elaborate a little bit what ""bad behavior"" exactly mean?\nI assume the AC_LINK_IFELSE test would work on OSX,.. right? Or would it be a problem for our depends OSX build where we build with SDK 10.11 but allow min os version of 10.10?\n\nMaybe I just open a PR and test it a bit.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r280540120,280540120,configure.ac
MarcoFalke,2019-05-02T18:24:33Z,"Yeah, I couldn't add thread_local to the tests because of issues with macos: https://github.com/bitcoin/bitcoin/pull/14985\n\nMight be solved by your AC_LINK check, but disabling it seems safer than running into issues later on.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r280541911,280541911,configure.ac
jamesob,2019-05-03T18:00:24Z,"@jonasschnelli see the gist I link to in the code comment above (https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605). This example compiles but stackoverflows when run, and I had to specially construct that example IIRC because trivial usages worked okay.",https://github.com/bitcoin/bitcoin/pull/15849#discussion_r280872660,280872660,configure.ac
