[
  {
    "sha": "999e87bc2288b98aaf7311a63799ccf40f05497d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTllODdiYzIyODhiOThhYWY3MzExYTYzNzk5Y2NmNDBmMDU0OTdk",
    "commit": {
      "author": {
        "name": "coderrr",
        "email": "coderrr.contact@gmail.com",
        "date": "2012-03-22T17:34:32Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T07:04:20Z"
      },
      "message": "Add 'coin control' tab to allow selection of source addresses to use when sending, and display logical links\n\nHidden by default, can be enabled through display options dialog",
      "tree": {
        "sha": "d3b11458eda20cf84e9dbbb08f63cf36bd38fc29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3b11458eda20cf84e9dbbb08f63cf36bd38fc29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999e87bc2288b98aaf7311a63799ccf40f05497d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999e87bc2288b98aaf7311a63799ccf40f05497d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999e87bc2288b98aaf7311a63799ccf40f05497d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999e87bc2288b98aaf7311a63799ccf40f05497d/comments",
    "author": null,
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232393e3bda19392d1a9727c81bad1796b6061a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232393e3bda19392d1a9727c81bad1796b6061a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232393e3bda19392d1a9727c81bad1796b6061a8"
      }
    ],
    "stats": {
      "total": 647,
      "additions": 642,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c905e95b44df83e734780feb13ac542b02887579",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -99,6 +99,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/addresstablemodel.h \\\n     src/qt/optionsdialog.h \\\n     src/qt/sendcoinsdialog.h \\\n+    src/qt/coincontrolpage.h \\\n     src/qt/addressbookpage.h \\\n     src/qt/signverifymessagedialog.h \\\n     src/qt/aboutdialog.h \\\n@@ -167,6 +168,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/addresstablemodel.cpp \\\n     src/qt/optionsdialog.cpp \\\n     src/qt/sendcoinsdialog.cpp \\\n+    src/qt/coincontrolpage.cpp \\\n     src/qt/addressbookpage.cpp \\\n     src/qt/signverifymessagedialog.cpp \\\n     src/qt/aboutdialog.cpp \\\n@@ -226,6 +228,7 @@ RESOURCES += \\\n \n FORMS += \\\n     src/qt/forms/sendcoinsdialog.ui \\\n+    src/qt/forms/coincontrolpage.ui \\\n     src/qt/forms/addressbookpage.ui \\\n     src/qt/forms/signverifymessagedialog.ui \\\n     src/qt/forms/aboutdialog.ui \\"
      },
      {
        "sha": "99a0d9cfe8e9d00f5c50cafd6cd1fdcb23b49547",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 1,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -624,6 +624,33 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value listaddressgroupings(const Array& params, bool fHelp)\n+{\n+    if (fHelp)\n+        throw runtime_error(\"listaddressgroupings\");\n+\n+    Array jsonGroupings;\n+    map<string, int64> balances = pwalletMain->GetAddressBalances();\n+    BOOST_FOREACH(set<string> grouping, pwalletMain->GetAddressGroupings())\n+    {\n+        Array jsonGrouping;\n+        BOOST_FOREACH(string address, grouping)\n+        {\n+            Array addressInfo;\n+            addressInfo.push_back(address);\n+            addressInfo.push_back(ValueFromAmount(balances[address]));\n+            {\n+                LOCK(pwalletMain->cs_wallet);\n+                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n+                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+            }\n+            jsonGrouping.push_back(addressInfo);\n+        }\n+        jsonGroupings.push_back(jsonGrouping);\n+    }\n+    return jsonGroupings;\n+}\n+\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n@@ -962,10 +989,24 @@ Value sendmany(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n+            \"sendmany [<fromaccount>, [sendfromaddresses...]] {address:amount,...} [minconf=1] [comment]\\n\"\n             \"amounts are double-precision floating point numbers\"\n             + HelpRequiringPassphrase());\n \n-    string strAccount = AccountFromValue(params[0]);\n+    std::string strAccount;\n+    std::set<std::string> fromAddresses;\n+    if (params[0].type() == str_type)\n+        strAccount = AccountFromValue(params[0]);\n+    else\n+    {\n+        Array a = params[0].get_array();\n+        strAccount = AccountFromValue(a[0]);\n+        BOOST_FOREACH(const Value& v, a)\n+        {\n+            fromAddresses.insert(v.get_str());\n+        }\n+    }\n+\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n     if (params.size() > 2)\n@@ -1005,6 +1046,8 @@ Value sendmany(const Array& params, bool fHelp)\n     if (totalAmount > nBalance)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n+    CScopedSendFromAddressRestriction<std::set<std::string> > addrRestriction(*pwalletMain, fromAddresses);\n+\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n@@ -2102,6 +2145,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblockhash\",           &getblockhash,           false },\n     { \"gettransaction\",         &gettransaction,         false },\n     { \"listtransactions\",       &listtransactions,       false },\n+    { \"listaddressgroupings\",   &listaddressgroupings,   false },\n     { \"signmessage\",            &signmessage,            false },\n     { \"verifymessage\",          &verifymessage,          false },\n     { \"getwork\",                &getwork,                true },\n@@ -2986,6 +3030,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendmany\"               && n > 0 &&\n+      boost::starts_with(boost::trim_left_copy(params[0].get_str()), \"[\"))\n+        ConvertTo<Array>(params[0]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n     if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<boost::int64_t>(params[0]);"
      },
      {
        "sha": "b6a70eb26f5693cac8a4accda6c75362b5ee8764",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -23,6 +23,7 @@\n #include \"guiconstants.h\"\n #include \"askpassphrasedialog.h\"\n #include \"notificator.h\"\n+#include \"coincontrolpage.h\"\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n \n@@ -51,6 +52,7 @@\n #include <QFileDialog>\n #include <QDesktopServices>\n #include <QTimer>\n+#include <QTableWidget>\n \n #include <QDragEnterEvent>\n #include <QUrl>\n@@ -109,6 +111,8 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n \n     signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n \n+    coinControlPage = new CoinControlPage(this);\n+\n     centralWidget = new QStackedWidget(this);\n     centralWidget->addWidget(overviewPage);\n     centralWidget->addWidget(transactionsPage);\n@@ -118,6 +122,7 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n #ifdef FIRST_CLASS_MESSAGING\n     centralWidget->addWidget(signVerifyMessageDialog);\n #endif\n+    centralWidget->addWidget(coinControlPage);\n     setCentralWidget(centralWidget);\n \n     // Create status bar\n@@ -231,6 +236,12 @@ void BitcoinGUI::createActions()\n     tabGroup->addAction(firstClassMessagingAction);\n #endif\n \n+    coinControlAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Coin control\"), this);\n+    coinControlAction->setToolTip(tr(\"Manage address linkages\"));\n+    coinControlAction->setCheckable(true);\n+    coinControlAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_6));\n+    tabGroup->addAction(coinControlAction);\n+\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n@@ -250,6 +261,8 @@ void BitcoinGUI::createActions()\n     // Always start with the sign message tab for FIRST_CLASS_MESSAGING\n     connect(firstClassMessagingAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n #endif\n+    connect(coinControlAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(coinControlAction, SIGNAL(triggered()), this, SLOT(gotoCoinControlPage()));\n \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setToolTip(tr(\"Quit application\"));\n@@ -334,6 +347,7 @@ void BitcoinGUI::createToolBars()\n #ifdef FIRST_CLASS_MESSAGING\n     toolbar->addAction(firstClassMessagingAction);\n #endif\n+    toolbar->addAction(coinControlAction);\n \n     QToolBar *toolbar2 = addToolBar(tr(\"Actions toolbar\"));\n     toolbar2->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);\n@@ -394,6 +408,7 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n         receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n         sendCoinsPage->setModel(walletModel);\n         signVerifyMessageDialog->setModel(walletModel);\n+        coinControlPage->setModel(walletModel->getOptionsModel());\n \n         setEncryptionStatus(walletModel->getEncryptionStatus());\n         connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n@@ -404,9 +419,17 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n \n         // Ask for passphrase if needed\n         connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+\n+        toggleCoinControlTab(walletModel->getOptionsModel()->getCoinControlFeatures());\n+        connect(walletModel->getOptionsModel(), SIGNAL(coinControlFeaturesChanged(bool)), this, SLOT(toggleCoinControlTab(bool)));\n     }\n }\n \n+void BitcoinGUI::toggleCoinControlTab(bool show)\n+{\n+    coinControlAction->setVisible(show);\n+}\n+\n void BitcoinGUI::createTrayIcon()\n {\n     QMenu *trayIconMenu;\n@@ -728,13 +751,30 @@ void BitcoinGUI::gotoReceiveCoinsPage()\n \n void BitcoinGUI::gotoSendCoinsPage()\n {\n+    if (!coinControlPage->selectedAddresses().empty())\n+    {\n+        sendCoinsPage->setSendFromAddress(coinControlPage->selectedAddresses());\n+        coinControlPage->clearSelection();\n+    }\n+\n     sendCoinsAction->setChecked(true);\n     centralWidget->setCurrentWidget(sendCoinsPage);\n \n     exportAction->setEnabled(false);\n     disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n }\n \n+void BitcoinGUI::gotoCoinControlPage()\n+{\n+    coinControlPage->UpdateTable();\n+\n+    coinControlAction->setChecked(true);\n+    centralWidget->setCurrentWidget(coinControlPage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n void BitcoinGUI::gotoSignMessageTab(QString addr)\n {\n #ifdef FIRST_CLASS_MESSAGING"
      },
      {
        "sha": "4a6e20bfeff02db105e05a813880af30f7b0c287",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -12,6 +12,7 @@ class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n class SignVerifyMessageDialog;\n+class CoinControlPage;\n class Notificator;\n class RPCConsole;\n \n@@ -65,6 +66,7 @@ class BitcoinGUI : public QMainWindow\n     AddressBookPage *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n     SignVerifyMessageDialog *signVerifyMessageDialog;\n+    CoinControlPage *coinControlPage;\n \n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n@@ -90,6 +92,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *backupWalletAction;\n     QAction *changePassphraseAction;\n     QAction *aboutQtAction;\n+    QAction *coinControlAction;\n     QAction *openRPCConsoleAction;\n \n     QSystemTrayIcon *trayIcon;\n@@ -109,6 +112,9 @@ class BitcoinGUI : public QMainWindow\n     void createTrayIcon();\n \n public slots:\n+    /** Switch to send coins page (public, because it get's called from coincontrolpage.cpp) */\n+    void gotoSendCoinsPage();\n+\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks shown in the UI */\n@@ -141,8 +147,8 @@ private slots:\n     void gotoAddressBookPage();\n     /** Switch to receive coins page */\n     void gotoReceiveCoinsPage();\n-    /** Switch to send coins page */\n-    void gotoSendCoinsPage();\n+    /** Switch to coin control page */\n+    void gotoCoinControlPage();\n \n     /** Show Sign/Verify Message dialog and switch to sign message tab */\n     void gotoSignMessageTab(QString addr = \"\");\n@@ -173,6 +179,7 @@ private slots:\n \n     /** Show window if hidden, unminimize when minimized, rise when obscured or show if hidden and fToggleHidden is true */\n     void showNormalIfMinimized(bool fToggleHidden = false);\n+    void toggleCoinControlTab(bool);\n     /** simply calls showNormalIfMinimized(true) for use in SLOT() macro */\n     void toggleHidden();\n };"
      },
      {
        "sha": "045730db266fbbce7e7e578322cd2901c4d5b106",
        "filename": "src/qt/coincontrolpage.cpp",
        "status": "added",
        "additions": 162,
        "deletions": 0,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/coincontrolpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/coincontrolpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontrolpage.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -0,0 +1,162 @@\n+#include \"coincontrolpage.h\"\n+#include \"ui_coincontrolpage.h\"\n+\n+#include \"base58.h\"\n+#include \"bitcoingui.h\"\n+#include \"bitcoinunits.h\"\n+#include \"guiutil.h\"\n+#include \"init.h\"\n+#include \"optionsmodel.h\"\n+#include \"uint256.h\"\n+#include \"wallet.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <boost/lambda/lambda.hpp>\n+\n+#include <QFont>\n+#include <QTableWidget>\n+\n+CoinControlPage::CoinControlPage(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::CoinControlPage),\n+    gui((BitcoinGUI *)parent),\n+    model(0)\n+{\n+    ui->setupUi(this);\n+\n+    // Address\n+    ui->table->horizontalHeader()->setResizeMode(0, QHeaderView::Stretch);\n+    // Label\n+    ui->table->horizontalHeader()->setResizeMode(1, QHeaderView::ResizeToContents);\n+    // Balance\n+    ui->table->horizontalHeader()->setResizeMode(2, QHeaderView::ResizeToContents);\n+    // Group Balance\n+    ui->table->horizontalHeader()->setResizeMode(3, QHeaderView::ResizeToContents);\n+\n+    connect(ui->table, SIGNAL(itemDoubleClicked(QTableWidgetItem *)), this, SLOT(sendFromSelectedAddress(QTableWidgetItem *)));\n+}\n+\n+CoinControlPage::~CoinControlPage()\n+{\n+    delete ui;\n+}\n+\n+void CoinControlPage::setModel(OptionsModel *model)\n+{\n+    this->model = model;\n+\n+    if (model)\n+        connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+}\n+\n+std::string CoinControlPage::selectedAddresses()\n+{\n+    std::string addresses;\n+    BOOST_FOREACH(QTableWidgetItem *i, ui->table->selectedItems())\n+    {\n+        if (i->column() != 0)\n+            continue;\n+\n+        std::string text = ((QString)i->text()).toStdString();\n+        if (CBitcoinAddress(text).IsValid())\n+            addresses += text + \";\";\n+    }\n+\n+    if (addresses.size() > 0)\n+        addresses.resize(addresses.size() - 1);\n+\n+    return addresses;\n+}\n+\n+void CoinControlPage::clearSelection()\n+{\n+    ui->table->clearSelection();\n+}\n+\n+void CoinControlPage::sendFromSelectedAddress(QTableWidgetItem *item)\n+{\n+    if (selectedAddresses().size() == 0)\n+        return;\n+\n+    gui->gotoSendCoinsPage();\n+}\n+\n+void CoinControlPage::UpdateTable()\n+{\n+    QFont bcAddressFont(GUIUtil::bitcoinAddressFont());\n+    int unit = 0;\n+    if (model)\n+        unit = model->getDisplayUnit();\n+\n+    std::map<std::string, int64> balances = pwalletMain->GetAddressBalances();\n+    std::set< std::set<std::string> > groupings = pwalletMain->GetAddressGroupings();\n+    std::vector< PAIRTYPE(int64, std::set<std::string>) > nonZeroGroupings;\n+\n+    BOOST_FOREACH(std::set<std::string> addresses, groupings)\n+    {\n+        int64 balance = 0;\n+        BOOST_FOREACH(std::string address, addresses)\n+            balance += balances[address];\n+        if (balance > 0)\n+            nonZeroGroupings.push_back(make_pair(balance, addresses));\n+    }\n+    sort(nonZeroGroupings.begin(), nonZeroGroupings.end());\n+\n+    ui->table->setRowCount(0);\n+\n+    bool first = true;\n+    BOOST_FOREACH(PAIRTYPE(int64, std::set<std::string>) grouping, nonZeroGroupings)\n+    {\n+        int64 group_balance = grouping.first;\n+        std::set<std::string> addresses = grouping.second;\n+        if (first)\n+            first = false;\n+        else\n+            ui->table->insertRow(0);\n+\n+        std::vector<std::string> sortedAddresses(addresses.begin(), addresses.end());\n+        sort(sortedAddresses.begin(), sortedAddresses.end(), boost::lambda::var(balances)[boost::lambda::_1] < boost::lambda::var(balances)[boost::lambda::_2]);\n+\n+        int remaining = addresses.size();\n+        BOOST_FOREACH(std::string address, sortedAddresses)\n+        {\n+            int64 balance = balances[address];\n+            remaining--;\n+\n+            ui->table->insertRow(0);\n+            ui->table->setItem(0, 0, new QTableWidgetItem(QString::fromStdString(address)));\n+            ui->table->item(0, 0)->setFont(bcAddressFont);\n+\n+            {\n+                LOCK(pwalletMain->cs_wallet);\n+                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n+                {\n+                    QString strLabel = QString::fromStdString(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+                    // if no label is set use the same default label tha's used in addresstablemodel.cpp\n+                    if (strLabel.isEmpty())\n+                        strLabel = tr(\"(no label)\");\n+                    ui->table->setItem(0, 1, new QTableWidgetItem(strLabel));\n+                }\n+            }\n+\n+            if (balance > 0)\n+            {\n+                ui->table->setItem(0, 2, new QTableWidgetItem(BitcoinUnits::formatWithUnit(unit, balance)));\n+                ui->table->item(0, 2)->setTextAlignment(Qt::AlignRight | Qt::AlignVCenter);\n+                if (!remaining)\n+                {\n+                    ui->table->setItem(0, 3, new QTableWidgetItem(BitcoinUnits::formatWithUnit(unit, group_balance)));\n+                    ui->table->item(0, 3)->setTextAlignment(Qt::AlignRight | Qt::AlignVCenter);\n+                }\n+            }\n+            else\n+                ui->table->setItem(0, 2, new QTableWidgetItem(QString::fromStdString(\"-\")));\n+        }\n+    }\n+}\n+\n+void CoinControlPage::updateDisplayUnit()\n+{\n+    // Update table to update Balance and Group Balance columns with the current unit\n+    UpdateTable();\n+}"
      },
      {
        "sha": "7a877a43eb511993f5e6e30993de22c8d611369e",
        "filename": "src/qt/coincontrolpage.h",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/coincontrolpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/coincontrolpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontrolpage.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -0,0 +1,40 @@\n+#ifndef COINCONTROLPAGE_H\n+#define COINCONTROLPAGE_H\n+\n+#include <QDialog>\n+#include <QTableWidgetItem>\n+\n+namespace Ui {\n+    class CoinControlPage;\n+}\n+class BitcoinGUI;\n+class OptionsModel;\n+\n+QT_BEGIN_NAMESPACE\n+QT_END_NAMESPACE\n+\n+class CoinControlPage : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit CoinControlPage(QWidget *parent = 0);\n+    ~CoinControlPage();\n+\n+    void setModel(OptionsModel *model);\n+\n+    void UpdateTable();\n+    std::string selectedAddresses();\n+    void clearSelection();\n+\n+private:\n+    Ui::CoinControlPage *ui;\n+    BitcoinGUI *gui;\n+    OptionsModel *model;\n+\n+private slots:\n+    void sendFromSelectedAddress(QTableWidgetItem *item);\n+    void updateDisplayUnit();\n+};\n+\n+#endif // COINCONTROLPAGE_H"
      },
      {
        "sha": "1a8f3bd7332cd50470938f098427deccb6eb9d0c",
        "filename": "src/qt/forms/coincontrolpage.ui",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/coincontrolpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/coincontrolpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontrolpage.ui?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>CoinControlPage</class>\n+ <widget class=\"QDialog\" name=\"CoinControlPage\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>274</width>\n+    <height>210</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Coin Control Address Selection</string>\n+  </property>\n+  <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+   <item>\n+    <widget class=\"QTableWidget\" name=\"table\">\n+     <property name=\"editTriggers\">\n+      <set>QAbstractItemView::NoEditTriggers</set>\n+     </property>\n+     <property name=\"selectionBehavior\">\n+      <enum>QAbstractItemView::SelectRows</enum>\n+     </property>\n+     <property name=\"columnCount\">\n+      <number>4</number>\n+     </property>\n+     <attribute name=\"horizontalHeaderHighlightSections\">\n+      <bool>false</bool>\n+     </attribute>\n+     <attribute name=\"verticalHeaderVisible\">\n+      <bool>false</bool>\n+     </attribute>\n+     <column>\n+      <property name=\"text\">\n+       <string>Address</string>\n+      </property>\n+     </column>\n+     <column>\n+      <property name=\"text\">\n+       <string>Label</string>\n+      </property>\n+     </column>\n+     <column>\n+      <property name=\"text\">\n+       <string>Balance</string>\n+      </property>\n+     </column>\n+     <column>\n+      <property name=\"text\">\n+       <string>Group Balance</string>\n+      </property>\n+     </column>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "71c6ee6a02ffa135595183cd32046506fe99646a",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -343,6 +343,16 @@\n          </property>\n         </widget>\n        </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"coinControlFeatures\">\n+         <property name=\"toolTip\">\n+          <string>TODO</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Display coin &amp;control features</string>\n+         </property>\n+        </widget>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Display\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "b1d71d202e800648cf225f8290b0886904fa991c",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -25,7 +25,7 @@\n         <x>0</x>\n         <y>0</y>\n         <width>666</width>\n-        <height>165</height>\n+        <height>137</height>\n        </rect>\n       </property>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n@@ -56,6 +56,26 @@\n      </widget>\n     </widget>\n    </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"sendFromLayout\">\n+     <property name=\"topMargin\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QLabel\" name=\"labelSendFrom\">\n+       <property name=\"text\">\n+        <string>Send From:</string>\n+       </property>\n+       <property name=\"textFormat\">\n+        <enum>Qt::PlainText</enum>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QLineEdit\" name=\"sendFrom\"/>\n+     </item>\n+    </layout>\n+   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n      <item>"
      },
      {
        "sha": "ad5462087d137496bf0d3bae8e02aa46c89ebb67",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -142,6 +142,7 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->lang, OptionsModel::Language);\n     mapper->addMapping(ui->unit, OptionsModel::DisplayUnit);\n     mapper->addMapping(ui->displayAddresses, OptionsModel::DisplayAddresses);\n+    mapper->addMapping(ui->coinControlFeatures, OptionsModel::CoinControlFeatures);\n }\n \n void OptionsDialog::enableSaveButtons()"
      },
      {
        "sha": "9eb79c92872f9a4a70905ba0581c0f8cdd8784bb",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -47,6 +47,7 @@ void OptionsModel::Init()\n     fMinimizeOnClose = settings.value(\"fMinimizeOnClose\", false).toBool();\n     nTransactionFee = settings.value(\"nTransactionFee\").toLongLong();\n     language = settings.value(\"language\", \"\").toString();\n+    fCoinControlFeatures = settings.value(\"fCoinControlFeatures\", false).toBool();\n \n     // These are shared with core Bitcoin; we want\n     // command-line options to override the GUI settings:\n@@ -170,6 +171,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return QVariant(bitdb.GetDetach());\n         case Language:\n             return settings.value(\"language\", \"\");\n+        case CoinControlFeatures:\n+            return QVariant(fCoinControlFeatures);\n         default:\n             return QVariant();\n         }\n@@ -271,6 +274,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"language\", value);\n             }\n             break;\n+        case CoinControlFeatures: {\n+            fCoinControlFeatures = value.toBool();\n+            settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n+            emit coinControlFeaturesChanged(fCoinControlFeatures);\n+            }\n+            break;\n         default:\n             break;\n         }\n@@ -304,3 +313,8 @@ bool OptionsModel::getDisplayAddresses()\n {\n     return bDisplayAddresses;\n }\n+\n+bool OptionsModel::getCoinControlFeatures()\n+{\n+    return fCoinControlFeatures;\n+}"
      },
      {
        "sha": "2f074ff0a7ffb156ea351a064a776556f29c9fae",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -29,6 +29,7 @@ class OptionsModel : public QAbstractListModel\n         DisplayAddresses, // bool\n         DetachDatabases, // bool\n         Language, // QString\n+        CoinControlFeatures, // bool\n         OptionIDRowCount,\n     };\n \n@@ -48,14 +49,19 @@ class OptionsModel : public QAbstractListModel\n     int getDisplayUnit();\n     bool getDisplayAddresses();\n     QString getLanguage() { return language; }\n+    bool getCoinControlFeatures();\n+\n private:\n     int nDisplayUnit;\n     bool bDisplayAddresses;\n     bool fMinimizeToTray;\n     bool fMinimizeOnClose;\n     QString language;\n+    bool fCoinControlFeatures;\n+\n signals:\n     void displayUnitChanged(int unit);\n+    void coinControlFeaturesChanged(bool);\n \n public slots:\n "
      },
      {
        "sha": "ddd995d1713b66da072dab0b52bff94ca904c6a3",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -12,6 +12,7 @@\n #include <QLocale>\n #include <QTextDocument>\n #include <QScrollBar>\n+#include <QLineEdit>\n \n SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n     QDialog(parent),\n@@ -26,12 +27,24 @@ SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n     ui->sendButton->setIcon(QIcon());\n #endif\n \n+#if QT_VERSION >= 0x040700\n+    /* Do not move this to the XML file, Qt before 4.7 will choke on it */\n+    ui->sendFrom->setPlaceholderText(tr(\"Restrict the client to only send from these Bitcoin addresses\"));\n+#endif\n+\n     addEntry();\n \n     connect(ui->addButton, SIGNAL(clicked()), this, SLOT(addEntry()));\n     connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n \n     fNewRecipientAllowed = true;\n+\n+    ui->sendFrom->setFont(GUIUtil::bitcoinAddressFont());\n+}\n+\n+void SendCoinsDialog::setSendFromAddress(std::string address)\n+{\n+    ui->sendFrom->setText(QString::fromStdString(address));\n }\n \n void SendCoinsDialog::setModel(WalletModel *model)\n@@ -51,6 +64,8 @@ void SendCoinsDialog::setModel(WalletModel *model)\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance());\n         connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+        connect(model->getOptionsModel(), SIGNAL(coinControlFeaturesChanged(bool)), this, SLOT(toggleSendFrom(bool)));\n+        toggleSendFrom(model->getOptionsModel()->getCoinControlFeatures());\n     }\n }\n \n@@ -59,6 +74,14 @@ SendCoinsDialog::~SendCoinsDialog()\n     delete ui;\n }\n \n+void SendCoinsDialog::toggleSendFrom(bool show)\n+{\n+    ui->labelSendFrom->setVisible(show);\n+    ui->sendFrom->setVisible(show);\n+    if (!show)\n+        ui->sendFrom->clear();\n+}\n+\n void SendCoinsDialog::on_sendButton_clicked()\n {\n     QList<SendCoinsRecipient> recipients;\n@@ -116,6 +139,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n+    model->setSendFromAddressRestriction(((QString)ui->sendFrom->text()).toStdString());\n     WalletModel::SendCoinsReturn sendstatus = model->sendCoins(recipients);\n     switch(sendstatus.status)\n     {\n@@ -175,6 +199,7 @@ void SendCoinsDialog::clear()\n \n     updateRemoveEnabled();\n \n+    ui->sendFrom->clear();\n     ui->sendButton->setDefault(true);\n }\n "
      },
      {
        "sha": "de1af92472e592b0a9513cfdfee41f7256a67de9",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -6,6 +6,7 @@\n namespace Ui {\n     class SendCoinsDialog;\n }\n+class CWallet;\n class WalletModel;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n@@ -30,6 +31,7 @@ class SendCoinsDialog : public QDialog\n     QWidget *setupTabChain(QWidget *prev);\n \n     void pasteEntry(const SendCoinsRecipient &rv);\n+    void setSendFromAddress(std::string address);\n     bool handleURI(const QString &uri);\n \n public slots:\n@@ -47,6 +49,7 @@ public slots:\n \n private slots:\n     void on_sendButton_clicked();\n+    void toggleSendFrom(bool);\n     void removeEntry(SendCoinsEntry* entry);\n     void updateDisplayUnit();\n };"
      },
      {
        "sha": "b643ae4c9c46f3199dcc5659dd0695b849c60a7b",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -297,6 +297,11 @@ bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureStri\n     return retval;\n }\n \n+void WalletModel::setSendFromAddressRestriction(std::string addresses)\n+{\n+    wallet->setSendFromAddressRestriction(addresses);\n+}\n+\n bool WalletModel::backupWallet(const QString &filename)\n {\n     return BackupWallet(*wallet, filename.toLocal8Bit().data());"
      },
      {
        "sha": "8ae9ad56f1846b950b391233604e70245c9d1d9b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -86,6 +86,9 @@ class WalletModel : public QObject\n     // Wallet backup\n     bool backupWallet(const QString &filename);\n \n+    // Only allow client to send from specific address(es)\n+    void setSendFromAddressRestriction(std::string addresses);\n+\n     // RAI object for unlocking wallet, returned by requestUnlock()\n     class UnlockContext\n     {"
      },
      {
        "sha": "703dfa96297b18063f17e5e76a6649659673d616",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 151,
        "deletions": 1,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/trim.hpp>\n+\n #include \"wallet.h\"\n #include \"walletdb.h\"\n #include \"crypter.h\"\n@@ -26,6 +30,25 @@ struct CompareValueOnly\n     }\n };\n \n+void CWallet::setSendFromAddressRestriction(string addresses)\n+{\n+    boost::trim(addresses);\n+    if (addresses.empty())\n+        this->sendFromAddressRestriction.clear();\n+    else\n+        boost::split(sendFromAddressRestriction, addresses, boost::is_any_of(\";,\"));\n+}\n+\n+void CWallet::setSendFromAddressRestriction(set<string> addresses)\n+{\n+    sendFromAddressRestriction = addresses;\n+}\n+\n+void CWallet::clearSendFromAddressRestriction()\n+{\n+    sendFromAddressRestriction.clear();\n+}\n+\n CPubKey CWallet::GenerateNewKey()\n {\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n@@ -904,7 +927,6 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n     vCoins.clear();\n \n     {\n-        LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n@@ -919,8 +941,13 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n+            {\n+                if (!this->sendFromAddressRestriction.empty() && !this->sendFromAddressRestriction.count(((CWalletTx *)pcoin)->GetAddressOfTxOut(i)))\n+                    continue;\n+\n                 if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) && pcoin->vout[i].nValue > 0)\n                     vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+            }\n         }\n     }\n }\n@@ -1547,6 +1574,129 @@ int64 CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n+std::map<std::string, int64> CWallet::GetAddressBalances()\n+{\n+    map<string, int64> balances;\n+\n+    {\n+        LOCK(cs_wallet);\n+        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        {\n+            CWalletTx *pcoin = &walletEntry.second;\n+\n+            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+                continue;\n+\n+            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+                continue;\n+\n+            int nDepth = pcoin->GetDepthInMainChain();\n+            if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n+                continue;\n+\n+            for (int i = 0; i < pcoin->vout.size(); i++)\n+            {\n+                if (!IsMine(pcoin->vout[i]))\n+                    continue;\n+\n+                int64 n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n+\n+                string addr = pcoin->GetAddressOfTxOut(i);\n+                if (!balances.count(addr))\n+                    balances[addr] = 0;\n+                balances[addr] += n;\n+            }\n+        }\n+    }\n+\n+    return balances;\n+}\n+\n+set< set<string> > CWallet::GetAddressGroupings()\n+{\n+    set< set<string> > groupings;\n+    set<string> grouping;\n+\n+    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    {\n+        CWalletTx *pcoin = &walletEntry.second;\n+\n+        if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+            continue;\n+\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n+\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n+            continue;\n+\n+        if (pcoin->vin.size() > 0 && IsMine(pcoin->vin[0]))\n+        {\n+            // group all input addresses with each other\n+            BOOST_FOREACH(CTxIn txin, pcoin->vin)\n+                grouping.insert(mapWallet[txin.prevout.hash].GetAddressOfTxOut(txin.prevout.n));\n+\n+            // group change with input addresses\n+            BOOST_FOREACH(CTxOut txout, pcoin->vout)\n+                if (IsChange(txout))\n+                {\n+                    CWalletTx tx = mapWallet[pcoin->vin[0].prevout.hash];\n+                    string addr = tx.GetAddressOfTxOut(pcoin->vin[0].prevout.n);\n+                    CTxDestination txoutAddr;\n+                    ExtractDestination(txout.scriptPubKey, txoutAddr);\n+                    grouping.insert(CBitcoinAddress(txoutAddr).ToString());\n+                }\n+            groupings.insert(grouping);\n+            grouping.clear();\n+        }\n+\n+        // group lone addrs by themselves\n+        for (int i = 0; i < pcoin->vout.size(); i++)\n+            if (IsMine(pcoin->vout[i]))\n+            {\n+                grouping.insert(pcoin->GetAddressOfTxOut(i));\n+                groupings.insert(grouping);\n+                grouping.clear();\n+            }\n+    }\n+\n+    set< set<string>* > uniqueGroupings; // a set of pointers to groups of addresses\n+    map< string, set<string>* > setmap;  // map addresses to the unique group containing it\n+    BOOST_FOREACH(set<string> grouping, groupings)\n+    {\n+        // make a set of all the groups hit by this new group\n+        set< set<string>* > hits;\n+        map< string, set<string>* >::iterator it;\n+        BOOST_FOREACH(string address, grouping)\n+            if ((it = setmap.find(address)) != setmap.end())\n+                hits.insert((*it).second);\n+\n+        // merge all hit groups into a new single group and delete old groups\n+        set<string>* merged = new set<string>(grouping);\n+        BOOST_FOREACH(set<string>* hit, hits)\n+        {\n+            merged->insert(hit->begin(), hit->end());\n+            uniqueGroupings.erase(hit);\n+            delete hit;\n+        }\n+        uniqueGroupings.insert(merged);\n+\n+        // update setmap\n+        BOOST_FOREACH(string element, *merged)\n+            setmap[element] = merged;\n+    }\n+\n+    set< set<string> > ret;\n+    BOOST_FOREACH(set<string>* uniqueGrouping, uniqueGroupings)\n+    {\n+        ret.insert(*uniqueGrouping);\n+        delete uniqueGrouping;\n+    }\n+\n+    return ret;\n+}\n+\n CPubKey CReserveKey::GetReservedKey()\n {\n     if (nIndex == -1)"
      },
      {
        "sha": "24cf4c6f6e8f5e8a48212bbc553fe355a88f63c0",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e87bc2288b98aaf7311a63799ccf40f05497d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e87bc2288b98aaf7311a63799ccf40f05497d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=999e87bc2288b98aaf7311a63799ccf40f05497d",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include \"base58.h\"\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -109,6 +110,12 @@ class CWallet : public CCryptoKeyStore\n \n     CPubKey vchDefaultKey;\n \n+    std::set<std::string> sendFromAddressRestriction;\n+\n+    void setSendFromAddressRestriction(std::string addresses);\n+    void setSendFromAddressRestriction(std::set<std::string> addresses);\n+    void clearSendFromAddressRestriction();\n+\n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n \n@@ -164,6 +171,9 @@ class CWallet : public CCryptoKeyStore\n     int64 GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n \n+    std::set< std::set<std::string> > GetAddressGroupings();\n+    std::map<std::string, int64> GetAddressBalances();\n+\n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const\n@@ -590,6 +600,13 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n+    std::string GetAddressOfTxOut(int n)\n+    {\n+        CTxDestination addr;\n+        ExtractDestination(vout[n].scriptPubKey, addr);\n+        return CBitcoinAddress(addr).ToString();\n+    }\n+\n     bool WriteToDisk();\n \n     int64 GetTxTime() const;\n@@ -734,4 +751,28 @@ class CAccountingEntry\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n+\n+template<typename T>\n+class CScopedSendFromAddressRestriction\n+{\n+private:\n+    CWallet &_wallet;\n+\n+public:\n+    CScopedSendFromAddressRestriction(CWallet& wallet, T addresses)\n+    : _wallet(wallet)\n+    {\n+        if (addresses.empty())\n+            return;\n+\n+        _wallet.setSendFromAddressRestriction(addresses);\n+    }\n+\n+    ~CScopedSendFromAddressRestriction()\n+    {\n+        _wallet.clearSendFromAddressRestriction();\n+    }\n+};\n+\n+\n #endif"
      }
    ]
  }
]