[
  {
    "sha": "37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzM3MTI2OGQxNGVkNmQ1NzM5YWY1YjY1ZDhiZGIzOGIwZThkZGEy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-25T21:09:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-25T21:09:05Z"
      },
      "message": "Mark `CheckTxInputs` `[[nodiscard]]` (out-param `txfee` only set if call is successful). Avoid UUM in fuzzing harness `coins_view`.",
      "tree": {
        "sha": "ff4b78f566cfba60187b7467c475b9000880f9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff4b78f566cfba60187b7467c475b9000880f9f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37371268d14ed6d5739af5b65d8bdb38b0e8dda2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "860093401840d7aad7b439aeba0d1598933bc9c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860093401840d7aad7b439aeba0d1598933bc9c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/860093401840d7aad7b439aeba0d1598933bc9c6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d5fd43e1314bc9632130fec4671681ca57733c55",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37371268d14ed6d5739af5b65d8bdb38b0e8dda2/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37371268d14ed6d5739af5b65d8bdb38b0e8dda2/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
        "patch": "@@ -24,7 +24,7 @@ namespace Consensus {\n  * @param[out] txfee Set to the transaction fee if successful.\n  * Preconditions: tx.IsCoinBase() is false.\n  */\n-bool CheckTxInputs(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n+[[nodiscard]] bool CheckTxInputs(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n } // namespace Consensus\n \n /** Auxiliary functions for transaction validation (ideally should not be exposed) */"
      },
      {
        "sha": "b509ee0b266f4613333886e6534c30beb78dd394",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37371268d14ed6d5739af5b65d8bdb38b0e8dda2/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37371268d14ed6d5739af5b65d8bdb38b0e8dda2/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=37371268d14ed6d5739af5b65d8bdb38b0e8dda2",
        "patch": "@@ -236,8 +236,9 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                     // It is not allowed to call CheckTxInputs if CheckTransaction failed\n                     return;\n                 }\n-                (void)Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee_out);\n-                assert(MoneyRange(tx_fee_out));\n+                if (Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee_out)) {\n+                    assert(MoneyRange(tx_fee_out));\n+                }\n             },\n             [&] {\n                 const CTransaction transaction{random_mutable_transaction};"
      }
    ]
  }
]