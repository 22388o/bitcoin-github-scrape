[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412309780",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#issuecomment-412309780",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13941",
    "id": 412309780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjMwOTc4MA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-12T00:15:25Z",
    "updated_at": "2018-08-12T00:15:25Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Add an entry in doc/README.md, maybe in Miscellaneous section?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412309780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412873726",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#issuecomment-412873726",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13941",
    "id": 412873726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjg3MzcyNg==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T13:35:40Z",
    "updated_at": "2018-08-14T13:36:25Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, although would it be sensible to put it in https://github.com/bitcoin-core/docs instead?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412873726/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412967431",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#issuecomment-412967431",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13941",
    "id": 412967431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk2NzQzMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T18:17:20Z",
    "updated_at": "2018-08-14T18:17:20Z",
    "author_association": "MEMBER",
    "body": "@MeshCollider I expect this document will grow in future versions, as more PSBT RPCs are being worked on. By keeping it inside the repo we can keep it in sync with the actual implementation in releases.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412967431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/413484698",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#issuecomment-413484698",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13941",
    "id": 413484698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzQ4NDY5OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T09:33:02Z",
    "updated_at": "2018-08-16T09:33:02Z",
    "author_association": "MEMBER",
    "body": "Looks good to me, thanks a lot for adding documentation!\r\nutACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/413484698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409590",
    "pull_request_review_id": 145428419,
    "id": 209409590,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQwOTU5MA==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. This command won't enable them to initiate transactions later,\n+  however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0]}`,",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 109,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`\"includeWatching\":true` is also necessary here since Amulti is only solvable by Bob, not spendable. By default watching only outputs will not be selected.",
    "created_at": "2018-08-11T00:16:25Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409590",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409590"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409590"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409675",
    "pull_request_review_id": 145428419,
    "id": 209409675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQwOTY3NQ==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 86,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should probably also say that we are assuming no other addresses in the wallets are being used. Otherwise `walletcreatefundedpsbt` below may choose outputs that are not for Amulti",
    "created_at": "2018-08-11T00:17:49Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 86,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409703",
    "pull_request_review_id": 145428419,
    "id": 209409703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQwOTcwMw==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. This command won't enable them to initiate transactions later,\n+  however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0]}`,\n+  and gives the produced PSBT *P* to Bob. *P* contains Carol's signature but\n+  not Bob's.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 111,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`walletcreatefundedpsbt` does not sign. Carol needs to use `walletprocesspsbt` first.",
    "created_at": "2018-08-11T00:18:20Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209409703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209409703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 111,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209424835",
    "pull_request_review_id": 145444474,
    "id": 209424835,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyNDgzNQ==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 90,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe suggest all participants use `bech32` as their address type as well as the multisig address type, or at least suggest that being consistent will reduce the chances of confusion?",
    "created_at": "2018-08-11T11:45:02Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209424835",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209424835"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209424835"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209424835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209813775",
    "pull_request_review_id": 145899314,
    "id": 209813775,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTgxMzc3NQ==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 90,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think it matters since they only need the pubkeys which `getaddressinfo` will provide for all address types. Maybe it is needed with `addmultisigaddress`, but I don't think this is necessary.",
    "created_at": "2018-08-14T02:32:41Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209813775",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209813775"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r209813775"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209813775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT",
    "in_reply_to_id": 209424835
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052828",
    "pull_request_review_id": 146189120,
    "id": 210052828,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA1MjgyOA==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. This command won't enable them to initiate transactions later,\n+  however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0]}`,",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 109,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2018-08-14T18:15:35Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052828",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052828"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052828"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 209409590
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052903",
    "pull_request_review_id": 146189212,
    "id": 210052903,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA1MjkwMw==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 86,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, added a note about having separate walets.",
    "created_at": "2018-08-14T18:15:49Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052903",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052903"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052903"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052903/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 86,
    "side": "RIGHT",
    "in_reply_to_id": 209409675
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052946",
    "pull_request_review_id": 146189262,
    "id": 210052946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA1Mjk0Ng==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. This command won't enable them to initiate transactions later,\n+  however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0]}`,\n+  and gives the produced PSBT *P* to Bob. *P* contains Carol's signature but\n+  not Bob's.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 111,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2018-08-14T18:15:57Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210052946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210052946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 209409703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210053143",
    "pull_request_review_id": 146189521,
    "id": 210053143,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA1MzE0Mw==",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.",
    "path": "doc/psbt.md",
    "position": null,
    "original_position": 90,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "9eb20b5097ac567cb2cb6bbd07f5f59982484ba5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For the individual `getnewaddress` calls it doesn't matter, as they only communicate the pubkey anyway. For `addmultisigaddress` I've added a comment.",
    "created_at": "2018-08-14T18:16:33Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210053143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210053143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210053143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210053143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT",
    "in_reply_to_id": 209424835
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210071599",
    "pull_request_review_id": 146211890,
    "id": 210071599,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA3MTU5OQ==",
    "diff_hunk": "@@ -0,0 +1,131 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. They construct\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT. They also add information about the scripts and\n+  public keys involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT, until all inputs are fully signed.\n+In a naive workflow, they all have to operate sequentially, passing the PSBT\n+from one to the next, until the Extractor can convert it to a real transaction.\n+In order to permit parallel operation, **Combiners** can be employed which merge\n+metadata from different PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core. We assume their wallets only contain the multisig funds. In case\n+they also have a personal wallet, this can be accomplished through the\n+multiwallet feature - possibly resulting in a need to add `-rpcwallet=name` to\n+the command line in case `bitcoin-cli` is used.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*. They may be required to explicitly specify the same\n+  addresstype option each, to avoid constructing different versions due to\n+  differences in configuration.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as",
    "path": "doc/psbt.md",
    "position": 104,
    "original_position": 104,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "6847abf2be3bbaa38036b3f6dcf7c78db67ddf20",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since `createmultisig` and `addmultisigaddress` may use different address types, you probably will need to add a comment here that different address types may be needed in order to get the correct address.",
    "created_at": "2018-08-14T19:13:41Z",
    "updated_at": "2018-08-14T19:14:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210071599",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210071599"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210071599"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210071599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 104,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210073892",
    "pull_request_review_id": 146214773,
    "id": 210073892,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA3Mzg5Mg==",
    "diff_hunk": "@@ -0,0 +1,132 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. They construct\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT. They also add information about the scripts and\n+  public keys involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT, until all inputs are fully signed.\n+In a naive workflow, they all have to operate sequentially, passing the PSBT\n+from one to the next, until the Extractor can convert it to a real transaction.\n+In order to permit parallel operation, **Combiners** can be employed which merge\n+metadata from different PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core. We assume their wallets only contain the multisig funds. In case\n+they also have a personal wallet, this can be accomplished through the\n+multiwallet feature - possibly resulting in a need to add `-rpcwallet=name` to\n+the command line in case `bitcoin-cli` is used.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*. They may be required to explicitly specify the same\n+  addresstype option each, to avoid constructing different versions due to\n+  differences in configuration.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. Again, it may be necessary to explicitly specify the addresstype\n+  in order to get a result that matches. This command won't enable them to\n+  initiate transactions later, however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0], \"includeWatching\":true}`.",
    "path": "doc/psbt.md",
    "position": 114,
    "original_position": 114,
    "commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "original_commit_id": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: the preferred method of specifying outputs is to use an array of objects instead of a dictionary. So this should be `[{\"Asend\":V}]`",
    "created_at": "2018-08-14T19:22:10Z",
    "updated_at": "2018-08-14T19:22:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210073892",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210073892"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13941#discussion_r210073892"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13941"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210073892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 114,
    "original_line": 114,
    "side": "RIGHT"
  }
]