[
  {
    "sha": "19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWVmYzAxYWVjNmIwZDg3NTA0MTNmYTFiNzIxZTA0YWFlY2Y4Zjcz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-31T23:53:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-14T19:13:42Z"
      },
      "message": "Add PSBT documentation",
      "tree": {
        "sha": "7d8980eaacf3d327e58924dd9f28a5dccaaa5fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8980eaacf3d327e58924dd9f28a5dccaaa5fbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19efc01aec6b0d8750413fa1b721e04aaecf8f73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19efc01aec6b0d8750413fa1b721e04aaecf8f73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19efc01aec6b0d8750413fa1b721e04aaecf8f73/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bf8ff5b161e77079bf00a7a452b3f2fe511f84"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 133,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b3f875c4a46e97ece9e95bd1b2d1647df3c252bd",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19efc01aec6b0d8750413fa1b721e04aaecf8f73/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19efc01aec6b0d8750413fa1b721e04aaecf8f73/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=19efc01aec6b0d8750413fa1b721e04aaecf8f73",
        "patch": "@@ -75,6 +75,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n+- [PSBT support](psbt.md)\n \n License\n ---------------------"
      },
      {
        "sha": "95e2f7fa01201dc20629a2cdda4e42df2a8f98bd",
        "filename": "doc/psbt.md",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19efc01aec6b0d8750413fa1b721e04aaecf8f73/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19efc01aec6b0d8750413fa1b721e04aaecf8f73/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=19efc01aec6b0d8750413fa1b721e04aaecf8f73",
        "patch": "@@ -0,0 +1,132 @@\n+# PSBT Howto for Bitcoin Core\n+\n+Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n+Transactions (PSBTs, as specified in\n+[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n+\n+This document describes the overall workflow for producing signed transactions\n+through the use of PSBT, and the specific RPC commands used in typical\n+scenarios.\n+\n+## PSBT in general\n+\n+PSBT is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. They construct\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT. They also add information about the scripts and\n+  public keys involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT, until all inputs are fully signed.\n+In a naive workflow, they all have to operate sequentially, passing the PSBT\n+from one to the next, until the Extractor can convert it to a real transaction.\n+In order to permit parallel operation, **Combiners** can be employed which merge\n+metadata from different PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+## PSBT in Bitcoin Core\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+### Workflows\n+\n+#### Multisig with multiple Bitcoin Core instances\n+\n+Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n+Bitcoin Core. We assume their wallets only contain the multisig funds. In case\n+they also have a personal wallet, this can be accomplished through the\n+multiwallet feature - possibly resulting in a need to add `-rpcwallet=name` to\n+the command line in case `bitcoin-cli` is used.\n+\n+Setup:\n+- All three call `getnewaddress` to create a new address; call these addresses\n+  *Aalice*, *Abob*, and *Acarol*.\n+- All three call `getaddressinfo X`, with *X* their respective address, and\n+  remember the corresponding public keys. Call these public keys *Kalice*,\n+  *Kbob*, and *Kcarol*.\n+- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n+  their wallet about the multisig script. Call the address produced by this\n+  command *Amulti*. They may be required to explicitly specify the same\n+  addresstype option each, to avoid constructing different versions due to\n+  differences in configuration.\n+- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n+  payments to *Amulti* as contributing to the watch-only balance.\n+- Others can verify the produced address by running\n+  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n+  output. Again, it may be necessary to explicitly specify the addresstype\n+  in order to get a result that matches. This command won't enable them to\n+  initiate transactions later, however.\n+- They can now give out *D* as address others can pay to.\n+\n+Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n+move the coins in their entirety to address *Asend*, with no change. Alice\n+does not need to be involved.\n+- One of them - let's assume Carol here - initiates the creation. She runs\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0], \"includeWatching\":true}`.\n+  We call the resulting PSBT *P*. P does not contain any signatures.\n+- Carol needs to sign the transaction herself. In order to do so, she runs\n+  `walletprocesspsbt P`, and gives the resulting PSBT *P2* to Bob.\n+- Bob inspects the PSBT using `decodepsbt \"P2\"` to determine if the transaction\n+  has indeed just the expected input, and an output to *Asend*, and the fee is\n+  reasonable. If he agrees, he calls `walletprocesspsbt \"P2\"` to sign. The\n+  resulting PSBT *P3* contains both Carol's and Bob's signature.\n+- Now anyone can call `finalizepsbt \"P2\"` to extract a fully signed transaction\n+  *T*.\n+- Finally anyone can broadcast the transaction using `sendrawtransaction \"T\"`.\n+\n+In case there are more signers, it may be advantageous to let them all sign in\n+parallel, rather passing the PSBT from one signer to the next one. In the\n+above example this would translate to Carol handing a copy of *P* to each signer\n+separately. They can then all invoke `walletprocesspsbt P`, and end up with\n+their individually-signed PSBT structures. They then all send those back to\n+Carol (or anyone) who can combine them using `combinepsbt`. The last two steps\n+(`finalizepsbt` and `sendrawtransaction`) remain unchanged."
      }
    ]
  }
]