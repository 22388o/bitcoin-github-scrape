[
  {
    "sha": "9e165d0de4c3cd168137fc85b8f31b371bd4e851",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTE2NWQwZGU0YzNjZDE2ODEzN2ZjODViOGYzMWIzNzFiZDRlODUx",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-07-30T23:12:09Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-07-30T23:13:48Z"
      },
      "message": "test: Wait for 'cmpctblock' in p2p_compactblocks when it is expected\n\nThis is a more narrowly-construed wait which eliminates the possibility of the\nwait being triggered by other messages.\n\nCo-authored-by: Billy Garrison <billygarrison.btc@gmail.com>",
      "tree": {
        "sha": "44b25ed5058caf6ffb3b2945926207b0eb9101d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44b25ed5058caf6ffb3b2945926207b0eb9101d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e165d0de4c3cd168137fc85b8f31b371bd4e851",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl8jVFQACgkQTYykuhgE\nCQZxEQ/+K0P9VN5D41f1nf/mbH0eKJx22QUKWJ6u3AAAVCkxkMj/cZHFyy16akvQ\n+yoPD23AI4CP4h1fvx4bGKUsyhfgFiE8PkdcaLY7xKMQjGfAS/9JGQ6tvnEhz+9l\nVKHID/qwdshPyhAO4HbNWlhBYVCBIgQNeXM1g/WUYndSS8MQUMLomM7UZY8a59FE\niAcGzwQK3leFQxmpxdG0P12EyFdjL6RrBh47sGxCB8ePdHOmkqEKJ92phTmtpRtP\nluJRwpFpDU/1ECVfCnFyd+40XpKBod7QqSExKhNVQ9TmPOa8ko93GPqqN4H+RDQh\nvIvAqTSi+TjnP67/A+GrOijglU94+I1qamVl5/sWp9zNausZXMKB1PyAJT0XeQm7\nGP5HPmoMAuR6zaQJSfoUth7ZNAZdZh2qRR2pxLRmYcdsz1x0frONG3CWIdh/c93Y\nUAsGADtOWL0HrPf2n+5OsB4UNeb/ZrTeQMEb39WynrbMOjopHGm9/wMy4dDSpQyR\nAcHvIUJ3qiRPEbxg/OKpJ2VxbLJNn8vzejsC8TP8H3wcYvhAVZzakvAo3IoHn7sy\nH8IqKKL3NgXEB6OinhX0oqZADj2ilAqaPDDhMVjiSvylBwdRCwm8IgNCmbnSHT83\nWMAA2NxdOkAJr58vM47UXgOUgAQnq7ibKE7dTOOm/SPiRkYB7ns=\n=zJ1L\n-----END PGP SIGNATURE-----",
        "payload": "tree 44b25ed5058caf6ffb3b2945926207b0eb9101d1\nparent edec7f7c254294cd5c46ae5cf304353d458bb852\nauthor Ben Woosley <ben.woosley@gmail.com> 1596150729 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1596150828 -0700\n\ntest: Wait for 'cmpctblock' in p2p_compactblocks when it is expected\n\nThis is a more narrowly-construed wait which eliminates the possibility of the\nwait being triggered by other messages.\n\nCo-authored-by: Billy Garrison <billygarrison.btc@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e165d0de4c3cd168137fc85b8f31b371bd4e851",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e165d0de4c3cd168137fc85b8f31b371bd4e851",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e165d0de4c3cd168137fc85b8f31b371bd4e851/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edec7f7c254294cd5c46ae5cf304353d458bb852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec7f7c254294cd5c46ae5cf304353d458bb852",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edec7f7c254294cd5c46ae5cf304353d458bb852"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3a33a961231dbb53db3994bba65f4d1881d4ccfa",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e165d0de4c3cd168137fc85b8f31b371bd4e851/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e165d0de4c3cd168137fc85b8f31b371bd4e851/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=9e165d0de4c3cd168137fc85b8f31b371bd4e851",
        "patch": "@@ -294,12 +294,11 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)\n-        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n         with mininode_lock:\n-            assert \"cmpctblock\" in test_node.last_message\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -309,12 +308,11 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         inv = CInv(MSG_CMPCT_BLOCK, block_hash)\n         test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n         with mininode_lock:\n-            assert \"cmpctblock\" in test_node.last_message\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -691,10 +689,9 @@ def test_end_to_end_block_relay(self, listeners):\n         node.submitblock(ToHex(block))\n \n         for l in listeners:\n-            wait_until(lambda: l.received_block_announcement(), timeout=30, lock=mininode_lock)\n+            wait_until(lambda: \"cmpctblock\" in l.last_message, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             for l in listeners:\n-                assert \"cmpctblock\" in l.last_message\n                 l.last_message[\"cmpctblock\"].header_and_shortids.header.calc_sha256()\n                 assert_equal(l.last_message[\"cmpctblock\"].header_and_shortids.header.sha256, block.sha256)\n "
      }
    ]
  }
]