DrahtBot,2020-05-04 07:52:14,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623312942,623312942,
laanwj,2020-05-04 13:35:27,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623467736,623467736,
practicalswift,2020-05-04 14:03:45,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623483603,623483603,
amitiuttarwar,2020-05-04 18:16:59,"Concept ACK. code looks reasonable, just checks for presence on `setInventoryTxToSend` before sending the TX. I'll review in more depth later this week, but one piece of feedback for the description\n\nI got a bit confused by this part: \n> I believe it is however still possible to GETDATA a transaction that we have just learned about (from another peer, or from our local wallet), and answer it",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623623739,623623739,
naumenkogs,2020-05-05 02:13:48,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623799619,623799619,
jnewbery,2020-05-06 22:04:50,"Concept ACK. I agree with @amitiuttarwar that the PR description is confusing (you switch the perspective of 'we' being the node sending the GETDATA and 'we' being the node receiving it). PR descriptions end up in the merge commit, so it'd be good to fix that up.\n\nI think that rather than adding another bool to the already complex `ProcessGetData` which only exists to skip over a code block, i",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-624915567,624915567,
sipa,2020-05-07 08:30:16,"> (The function signature for ProcessGetTransactionData() isn't great, and I'd prefer to send individual NOTFOUND messages within that function instead of batching them, but that's no longer a pure refactor and could be done later.)\n\nIt would be unfortunate to make the protocol implementation less efficient just because it results in slightly cleaner code. How about an alternative, where a hel",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625110689,625110689,
jnewbery,2020-05-07 16:16:10,"(apologies that this conversation has wandered off-topic for the fix in this PR)\n\n> It would be unfortunate to make the protocol implementation less efficient just because it results in slightly cleaner code.\n\nLet me turn that around, and say ""it would be unfortunate to make less clean code, in order to make the wire protocol infinitesimally more efficient.""\n\nRemember that the notfound",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625353711,625353711,
sipa,2020-05-07 18:28:43,"@jnewbery I've abstracted out a function for determining what tx requests to respond to. We can talk about further abstractions later.\n\n@amitiuttarwar I've also rewritten the PR description with a bunch of background information, and summarized the issue @luke-jr's brought up above.",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625423256,625423256,
jnewbery,2020-05-08 01:27:45,utACK 353a391356fcf758f67683ecd2cbef759665b30b,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625579008,625579008,
naumenkogs,2020-05-08 13:41:49,"utACK 353a391\nI like that we got rid of the `push` variable, looks cleaner now.\n\nDo you think there can be timing analysis, to distinguish ""it's in the setInventoryTxToSend, not sharing with you"" and ""I couldn't find it in the mempool"". \nMaybe I'm overthinking and mempool lookup is fast enough to not make any difference (should be same order as internet latencies or lower), but is that tru",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625821697,625821697,
jnewbery,2020-05-08 15:25:25,"> Maybe I'm overthinking and mempool lookup is fast enough to not make any difference (should be same order as internet latencies or lower), but is that true for full mempools?\n\n> If really only applies to txs left MapRelay (but still in the mempool. (because I assume MapRelay lookups are very fast, unlike maybe mempool lookups).\n\nBoth `mapRelay` and mempool lookups should be fast. `mapRel",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625869490,625869490,
jnewbery,2020-05-11 18:29:37,"This probably about ready for merge now, so no need to make any changes now, but would it make sense to just take cs_main inside `FindTxForGetData()`? It would mean taking and releasing the lock multilple times, but would avoid holding onto it while serializing and sending the TX message.",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-626876610,626876610,
sipa,2020-05-12 20:31:27,"@jnewbery Done. Added a middle commit (review with -`w`) that pushes the cs_main lock down.\n\nAdditionally, got rid of the Optional; CTransactionRefs can already store a nullptr.",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627577099,627577099,
jonatack,2020-05-12 22:03:27,re-ACK 2b3f101,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627622710,627622710,
naumenkogs,2020-05-12 22:14:06,"The solution doesn't help if an attacker connects to us **right after** we put the transaction in `MapRelay` (by announcing to someone else).\n\nI think the fix should be made as a follow-up. We discussed several alternatives with @sipa and it's not a super-trivial fix to add it here right away.\n\nThis PR is still an improvement over existing behavior (now an attacker has to reconnect), and a",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627627010,627627010,
sipa,2020-05-12 22:21:57,"Good find, @naumenkogs.\n\nMy thinking is that the best solution is actually introducing a separate rolling bloom filter (like `filterInventoryKnown`) for just outgoing announcements. It can be much smaller (we control the rate we announce things at, so given a limit of say 15 minutes to respond, there is an upper bound on the size), and then *only* permit GETDATA'ing things in that filter. I be",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627630111,627630111,
naumenkogs,2020-05-12 22:35:37,utACK 2896c41,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627635297,627635297,
jonatack,2020-05-12 22:53:27,"ACK 2896c412fadbc03916 per `git diff 2b3f101 2896c41` only change since previous review is moving the recency check up to be verified first in `FindTxForGetData`, as it was originally in 353a391 (good catch), before looking up the transaction in the relay pool.",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627642227,627642227,
sipa,2020-05-12 22:58:58,"@jonatack It was originally in the right place, I accidentally moved it in the push-cs_main-down change, which @naumenkogs discovered, so I quickly pushed again. Happy to see you and him discovering that; that's a good sign for our review process.",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627644193,627644193,
jnewbery,2020-05-13 00:51:49,"code review ACK 2896c412fadbc03916a33028f4f50fd87ac48edb\n\nVery nice cleanup :)",https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627678005,627678005,
amitiuttarwar,2020-05-14 22:33:47,code review ACK 2896c412fa,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-628920643,628920643,
ajtowns,2020-05-19 05:11:07,ACK 2896c412fadbc03916a33028f4f50fd87ac48edb,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-630584053,630584053,
fanquake,2020-05-19 07:12:39,Thanks for following up @ajtowns.,https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-630630614,630630614,
luke-jr,2020-05-04 20:06:32,"`setInventoryTxToSend` isn't only for initial broadcasts, though. At least the RPC method `sendrawtransaction` can add a transaction to it that has already been relayed previously.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419695831,419695831,src/net_processing.cpp
sipa,2020-05-04 20:28:32,"That's a good point.\n\nOne possibility is making setInventoryTxToSend track a boolean determining if it's a possible re-submission.\n\nAnother is just not caring. The entries in setInventoryTxToSend are filtered by filterInventoryKnown, so it won't contain anything we know the other party already knows about. Of course, that filter is limited in size, but with 50000 entries I believe it can't",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419707909,419707909,src/net_processing.cpp
jnewbery,2020-05-07 22:27:31,nit: no need for this else. The if clause returns early.,https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421830539,421830539,src/net_processing.cpp
sipa,2020-05-07 22:54:36,"Done, also reflowed the code a bit more.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421839870,421839870,src/net_processing.cpp
amitiuttarwar,2020-05-09 20:09:12,nit: could update `CInv& inv` to be `uint256& tx_hsh` since function just uses `inv` to look up the hash 3 times? ,https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540387,422540387,src/net_processing.cpp
amitiuttarwar,2020-05-09 20:15:16,"not sure what ""stream"" means here. `mi` will be an iterator to a `uint256, CTransaction` element on the map. I think this is a relic, but might be worth updating (or just removing) if you touch the code again.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540975,422540975,src/net_processing.cpp
sipa,2020-05-12 20:27:54,"Agree, done.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424013108,424013108,src/net_processing.cpp
sipa,2020-05-12 20:30:18,It's a relic indeed. The relay pool used to store the serialized transaction stream rather than transaction objects. Fixed.,https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424014455,424014455,src/net_processing.cpp
amitiuttarwar,2020-05-14 21:07:51,"I'm trying to better understand the lock enforcements & have some questions..\n\nI noticed that `ProcessGetData` has both `LOCKS_EXCLUDED` thread safety annotation as well as an `AssertLockNotHeld` check. I suspect its a product of development over time & is now redundant, but want to confirm my understanding.\n\n`LOCKS_EXCLUDED` enables clang to do static analysis when we compile with the `-W",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425431287,425431287,src/net_processing.cpp
sipa,2020-05-14 21:24:39,"They're somewhat orthogonal, I think.\n\nAnnotations:\n * [+] Is a compile-time check, and guarantee absence of issues in every possible code path\n * [-] Only works in clang\n * [-] Can't be used in some more advanced locking scenarios\n\nAssertions:\n* [+] Works in GCC and Clang\n* [+] Isn't restricted to analyzable cases\n* [-] Is only a runtime check; it needs test cases that actuall",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425439519,425439519,src/net_processing.cpp
amitiuttarwar,2020-05-14 22:18:26,"ok gotcha. thanks thats very helpful.\n\nso assuming we regularly run the compile-time checks, for this specific case the guarantee from the annotations > guarantee from the assertion. \n\nI don't see any travis jobs that are running `-Wthread-safety` (and since my previous comment learned that clang thread safety analysis is different than the clang thread sanitizer)\n\ndoes that mean if so",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425462396,425462396,src/net_processing.cpp
sipa,2020-05-14 22:26:39,I think configure.ac turns on `-Wthread-safety-analysis` and `-Werror=thread-safety-analysis` by default if the compiler supports it.,https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425465450,425465450,src/net_processing.cpp
amitiuttarwar,2020-05-14 22:32:52,"ah, thank you. ",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425467586,425467586,src/net_processing.cpp
narula,2020-07-08 16:18:43,You are no longer holding cs_main. Why is it OK to access vRecvGetData here without a lock?,https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451666992,451666992,src/net_processing.cpp
jnewbery,2020-07-08 17:03:52,"`vRecvGetData` isn't guarded by cs_main. In fact, it's not guarded by anything 😱 \n\nAll access of `vRecvGetData` is in `ProcessMessages()`, which only ever runs single threaded in the Message Handler thread, so this is safe, but ideally it'd be guarded by some synchronization method in case that ever changes.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451695547,451695547,src/net_processing.cpp
narula,2020-07-08 17:26:35,"Right. Previous to this commit, the `mempool`, `vRecvGetData`, and `m_tx_relay` were all accessed atomically under `cs_main`. This changes that and uses finer-grained locking. \n\nI think all the other accesses are safe but I wasn't certain about `vRecvGetData`.  ",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451709203,451709203,src/net_processing.cpp
sipa,2020-07-08 17:29:36,"@narula Nice catch. Indeed, as @jnewbery says, it isn't formally protected by anything right now. That's fine because (a) it's only accessed from one thread (b) every access to it actually holds `cs_vRecv` (just checked).",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451710994,451710994,src/net_processing.cpp
narula,2020-07-08 17:52:45,"Could you point out where `cs_vRecv` is taken before `vRecvGetData` is accessed here? I only see it locked in two places in net.cpp, and I can't connect either of them to `ProcessMessages`. The non-stats one is in `ReceiveMsgBytes`.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451724605,451724605,src/net_processing.cpp
sipa,2020-07-08 17:54:33,"~~net locks `cs_vRecv` and holds it while calling ProcessMessages. I checked by adding the annotation and recompiling.~~\n\nEDIT: i'm wrong",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451725713,451725713,src/net_processing.cpp
narula,2020-07-08 19:31:44,"ok! based on discussion in PR review club today I'll PR a change to guard it by `cs_vRecv`, and look at `orphan_work_set` too. To be clear: there's no data race now, but it's worth fixing up in case these fields are accessed from multiple threads in the future.",https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451778445,451778445,src/net_processing.cpp
