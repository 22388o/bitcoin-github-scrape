[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623312942",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623312942",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 623312942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzMxMjk0Mg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T07:52:14Z",
    "updated_at": "2020-05-12T05:10:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623312942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623467736",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623467736",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 623467736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQ2NzczNg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T13:35:27Z",
    "updated_at": "2020-05-04T13:35:27Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623467736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623483603",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623483603",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 623483603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQ4MzYwMw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T14:03:45Z",
    "updated_at": "2020-05-04T14:03:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623483603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623623739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623623739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 623623739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzYyMzczOQ==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T18:16:59Z",
    "updated_at": "2020-05-04T18:16:59Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. code looks reasonable, just checks for presence on `setInventoryTxToSend` before sending the TX. I'll review in more depth later this week, but one piece of feedback for the description\r\n\r\nI got a bit confused by this part: \r\n> I believe it is however still possible to GETDATA a transaction that we have just learned about (from another peer, or from our local wallet), and answer it before we have announced it to the requesting peer.\r\n\r\nAn attempt to reword based on my understanding: \r\nif we recently learned about a transaction & a peer sends us a GETDATA before we announce it to them, we should not fulfill the request. That is a privacy leak.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623623739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623799619",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-623799619",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 623799619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzc5OTYxOQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T02:13:48Z",
    "updated_at": "2020-05-05T02:13:48Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623799619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624915567",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-624915567",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 624915567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDkxNTU2Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T22:04:50Z",
    "updated_at": "2020-05-06T22:11:22Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. I agree with @amitiuttarwar that the PR description is confusing (you switch the perspective of 'we' being the node sending the GETDATA and 'we' being the node receiving it). PR descriptions end up in the merge commit, so it'd be good to fix that up.\r\n\r\nI think that rather than adding another bool to the already complex `ProcessGetData` which only exists to skip over a code block, it'd be clearer to refactor the getdata tx processing into its own function. That turns your change into a two line fix.\r\n\r\nI've done that here: https://github.com/jnewbery/bitcoin/tree/pr18861.1. Feel free to use it if you think it's useful.\r\n\r\n(The function signature for `ProcessGetTransactionData()` isn't great, and I'd prefer to send individual NOTFOUND messages within that function instead of batching them, but that's no longer a pure refactor and could be done later.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624915567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625110689",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625110689",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625110689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTExMDY4OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T08:30:16Z",
    "updated_at": "2020-05-07T08:31:23Z",
    "author_association": "MEMBER",
    "body": "> (The function signature for ProcessGetTransactionData() isn't great, and I'd prefer to send individual NOTFOUND messages within that function instead of batching them, but that's no longer a pure refactor and could be done later.)\r\n\r\nIt would be unfortunate to make the protocol implementation less efficient just because it results in slightly cleaner code. How about an alternative, where a helper function is introduced that just returns true or false, which ProcessGetData then calls to determine which request should be turned into a TX, and which batched into NOTFOUND (where the actual construction/sending of those messages remains in ProcessGetData)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625110689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625353711",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625353711",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625353711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTM1MzcxMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T16:16:10Z",
    "updated_at": "2020-05-07T16:16:10Z",
    "author_association": "MEMBER",
    "body": "(apologies that this conversation has wandered off-topic for the fix in this PR)\r\n\r\n> It would be unfortunate to make the protocol implementation less efficient just because it results in slightly cleaner code.\r\n\r\nLet me turn that around, and say \"it would be unfortunate to make less clean code, in order to make the wire protocol infinitesimally more efficient.\"\r\n\r\nRemember that the notfound path is the rare, failure case. How rare? Here are some stats from my node's first two peers:\r\n\r\n```\r\n> bcli getpeerinfo\r\n[\r\n  {\r\n    \"id\": 0,\r\n    [...]\r\n    \"bytessent_per_msg\": {\r\n      [...]\r\n      \"notfound\": 122,\r\n      [...]\r\n      \"tx\": 212229,\r\n    },\r\n    \"bytesrecv_per_msg\": {\r\n      [...]\r\n      \"notfound\": 427,\r\n      [...]\r\n      \"tx\": 31755274,\r\n    }\r\n  },\r\n  {\r\n    \"id\": 1,\r\n    [...]\r\n    \"bytessent_per_msg\": {\r\n      [...]\r\n      \"notfound\": 1098,\r\n      [...]\r\n      \"tx\": 108708,\r\n    },\r\n    \"bytesrecv_per_msg\": {\r\n      [...]\r\n      \"notfound\": 926,\r\n      [...]\r\n      \"tx\": 93436726,\r\n    }\r\n  },\r\n[...]\r\n```\r\n\r\nAlmost all notfound messages are 61 bytes (24 bytes header + 37 bytes data). Let's assume that an average tx message is 250 bytes for header+data.\r\n\r\nThat means for my first two peers I sent/received ~42 notfound messages and sent/received ~500,000 tx messages.\r\n\r\nLooking through my debug logs, the vast majority of notfound messages are 37 bytes, indicating a single item. So, for almost all calls of ProcessGetData(), there are zero or one notfound items, and batching has no effect on wire efficiency. Batching notfounds would save <100 messages per day for me (run `grep \"sending notfound\" .bitcoin/debug.log | grep -v \"37 bytes\"` to see for yourself).\r\n\r\nIn the adversarial case, it's more expensive for us to serve transactions than notfounds, so being more efficient doesn't protect us from any attacks.\r\n\r\nSending notfounds individually also has the nice effect of making getdata responses serial in the order we received them.\r\n\r\n> How about [...] a helper function [...] that just returns true or false\r\n\r\nI think that's better than the status quo, but I prefer delgating out to a function to do all the transaction GETDATA processing and message sending, so that it matches the responsibilities of ProcessGetBlockData() exactly.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625353711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625423256",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625423256",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625423256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTQyMzI1Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T18:28:43Z",
    "updated_at": "2020-05-07T18:30:10Z",
    "author_association": "MEMBER",
    "body": "@jnewbery I've abstracted out a function for determining what tx requests to respond to. We can talk about further abstractions later.\r\n\r\n@amitiuttarwar I've also rewritten the PR description with a bunch of background information, and summarized the issue @luke-jr's brought up above.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625423256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625579008",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625579008",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625579008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTU3OTAwOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T01:27:45Z",
    "updated_at": "2020-05-08T01:27:45Z",
    "author_association": "MEMBER",
    "body": "utACK 353a391356fcf758f67683ecd2cbef759665b30b",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625579008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625821697",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625821697",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625821697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgyMTY5Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T13:41:49Z",
    "updated_at": "2020-05-08T13:41:49Z",
    "author_association": "MEMBER",
    "body": "utACK 353a391\r\nI like that we got rid of the `push` variable, looks cleaner now.\r\n\r\nDo you think there can be timing analysis, to distinguish \"it's in the setInventoryTxToSend, not sharing with you\" and \"I couldn't find it in the mempool\". \r\nMaybe I'm overthinking and mempool lookup is fast enough to not make any difference (should be same order as internet latencies or lower), but is that true for full mempools?\r\n\r\nIf really only applies to txs left MapRelay (but still in the mempool. (because I assume MapRelay lookups are very fast, unlike maybe mempool lookups).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625821697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625869490",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-625869490",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 625869490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTg2OTQ5MA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T15:25:25Z",
    "updated_at": "2020-05-08T15:25:25Z",
    "author_association": "MEMBER",
    "body": "> Maybe I'm overthinking and mempool lookup is fast enough to not make any difference (should be same order as internet latencies or lower), but is that true for full mempools?\r\n\r\n> If really only applies to txs left MapRelay (but still in the mempool. (because I assume MapRelay lookups are very fast, unlike maybe mempool lookups).\r\n\r\nBoth `mapRelay` and mempool lookups should be fast. `mapRelay` is a map, so lookups are O(logn), but the map is small. Mempool lookups are by an unordered map of txid, so are O(1). We could make `mapRelay` an unordered map for O(1) lookups, but I think we probably just want to remove it entirely eventually (#17303).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625869490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626876610",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-626876610",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 626876610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjg3NjYxMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-11T18:29:37Z",
    "updated_at": "2020-05-11T18:29:37Z",
    "author_association": "MEMBER",
    "body": "This probably about ready for merge now, so no need to make any changes now, but would it make sense to just take cs_main inside `FindTxForGetData()`? It would mean taking and releasing the lock multilple times, but would avoid holding onto it while serializing and sending the TX message.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626876610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627577099",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627577099",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627577099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzU3NzA5OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T20:31:27Z",
    "updated_at": "2020-05-12T20:31:27Z",
    "author_association": "MEMBER",
    "body": "@jnewbery Done. Added a middle commit (review with -`w`) that pushes the cs_main lock down.\r\n\r\nAdditionally, got rid of the Optional; CTransactionRefs can already store a nullptr.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627577099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627622710",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627622710",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627622710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYyMjcxMA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:03:27Z",
    "updated_at": "2020-05-12T22:03:27Z",
    "author_association": "MEMBER",
    "body": "re-ACK 2b3f101",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627622710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627627010",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627627010",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627627010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYyNzAxMA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:14:06Z",
    "updated_at": "2020-05-12T22:16:50Z",
    "author_association": "MEMBER",
    "body": "The solution doesn't help if an attacker connects to us **right after** we put the transaction in `MapRelay` (by announcing to someone else).\r\n\r\nI think the fix should be made as a follow-up. We discussed several alternatives with @sipa and it's not a super-trivial fix to add it here right away.\r\n\r\nThis PR is still an improvement over existing behavior (now an attacker has to reconnect), and a nice refactor. \r\nutACK 2b3f101",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627627010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627630111",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627630111",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627630111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYzMDExMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:21:57Z",
    "updated_at": "2020-05-12T22:27:59Z",
    "author_association": "MEMBER",
    "body": "Good find, @naumenkogs.\r\n\r\nMy thinking is that the best solution is actually introducing a separate rolling bloom filter (like `filterInventoryKnown`) for just outgoing announcements. It can be much smaller (we control the rate we announce things at, so given a limit of say 15 minutes to respond, there is an upper bound on the size), and then *only* permit GETDATA'ing things in that filter. I believe that can replace the setInventoryTxToSend test introduced here (while solving @luke-jr's concern above). It would also make me more comfortable with dropping `mapRelay` (after fixing the rescheduling of downloads after a NOTFOUND).\r\n\r\nI think the changes here are still an improvement, so I suggest going ahead with this if reviewers agree, and work on the above as a follow-up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627630111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627635297",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627635297",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627635297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYzNTI5Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:35:37Z",
    "updated_at": "2020-05-12T22:35:37Z",
    "author_association": "MEMBER",
    "body": "utACK 2896c41",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627635297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627642227",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627642227",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627642227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzY0MjIyNw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:53:27Z",
    "updated_at": "2020-05-12T22:53:27Z",
    "author_association": "MEMBER",
    "body": "ACK 2896c412fadbc03916 per `git diff 2b3f101 2896c41` only change since previous review is moving the recency check up to be verified first in `FindTxForGetData`, as it was originally in 353a391 (good catch), before looking up the transaction in the relay pool.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627642227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627644193",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627644193",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627644193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzY0NDE5Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:58:58Z",
    "updated_at": "2020-05-12T22:58:58Z",
    "author_association": "MEMBER",
    "body": "@jonatack It was originally in the right place, I accidentally moved it in the push-cs_main-down change, which @naumenkogs discovered, so I quickly pushed again. Happy to see you and him discovering that; that's a good sign for our review process.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627644193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627678005",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-627678005",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 627678005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzY3ODAwNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T00:51:49Z",
    "updated_at": "2020-05-13T00:51:49Z",
    "author_association": "MEMBER",
    "body": "code review ACK 2896c412fadbc03916a33028f4f50fd87ac48edb\r\n\r\nVery nice cleanup :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627678005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628920643",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-628920643",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 628920643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODkyMDY0Mw==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T22:33:47Z",
    "updated_at": "2020-05-14T22:33:47Z",
    "author_association": "MEMBER",
    "body": "code review ACK 2896c412fa",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628920643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630584053",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-630584053",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 630584053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDU4NDA1Mw==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T05:11:07Z",
    "updated_at": "2020-05-19T05:11:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 2896c412fadbc03916a33028f4f50fd87ac48edb",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630584053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630630614",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#issuecomment-630630614",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18861",
    "id": 630630614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDYzMDYxNA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T07:12:39Z",
    "updated_at": "2020-05-19T07:12:39Z",
    "author_association": "MEMBER",
    "body": "Thanks for following up @ajtowns.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630630614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419695831",
    "pull_request_review_id": 405307663,
    "id": 419695831,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTgzMQ==",
    "diff_hunk": "@@ -1633,24 +1633,34 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             const CInv &inv = *it;\n             it++;\n \n+            bool too_recent = false;\n+            {\n+                // Check if the requested transaction is so recent that we're just\n+                // about to announce it to the peer; if so, they certainly shouldn't\n+                // know we already have it.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "998d4363375b444940286fc03262aae9f488da02",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`setInventoryTxToSend` isn't only for initial broadcasts, though. At least the RPC method `sendrawtransaction` can add a transaction to it that has already been relayed previously.",
    "created_at": "2020-05-04T20:06:32Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419695831",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419695831"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419695831"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419695831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1638,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1640,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419707909",
    "pull_request_review_id": 405322265,
    "id": 419707909,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNzkwOQ==",
    "diff_hunk": "@@ -1633,24 +1633,34 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             const CInv &inv = *it;\n             it++;\n \n+            bool too_recent = false;\n+            {\n+                // Check if the requested transaction is so recent that we're just\n+                // about to announce it to the peer; if so, they certainly shouldn't\n+                // know we already have it.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "998d4363375b444940286fc03262aae9f488da02",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's a good point.\r\n\r\nOne possibility is making setInventoryTxToSend track a boolean determining if it's a possible re-submission.\r\n\r\nAnother is just not caring. The entries in setInventoryTxToSend are filtered by filterInventoryKnown, so it won't contain anything we know the other party already knows about. Of course, that filter is limited in size, but with 50000 entries I believe it can't expire entries faster than after 47 minutes (50000 invs / 35 (invs / msg) * (2s / msg) = 2857s), long after the entries are gone from the relay map (from which they expire after 15 minutes).\r\n\r\nIn other words: this is worrying about the situation where (a) you announced an INV (b) at least 47 minutes passed, during which you respond to a BIP35 mempool request from the peer (c) you try to rebroadcast (d) in the few seconds after the rebroadcast is scheduled but before it's sent out, you receive a GETDATA.",
    "created_at": "2020-05-04T20:28:32Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419707909",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419707909"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r419707909"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419707909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1638,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1640,
    "side": "RIGHT",
    "in_reply_to_id": 419695831
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421830539",
    "pull_request_review_id": 407880316,
    "id": 421830539,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDUzOQ==",
    "diff_hunk": "@@ -1604,6 +1604,36 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    // Check if the requested transaction is so recent that we're just\n+    // about to announce it to the peer; if so, they certainly shouldn't\n+    // know we already have it.\n+    {\n+        LOCK(peer->m_tx_relay->cs_tx_inventory);\n+        if (peer->m_tx_relay->setInventoryTxToSend.count(inv.hash)) return {};\n+    }\n+\n+    auto mi = mapRelay.find(inv.hash);\n+    if (mi != mapRelay.end()) {\n+        // Send stream from relay memory\n+        return mi->second;\n+    } else {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "a00dae0108b50d951f8307cc63ee0353d3c5e712",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: no need for this else. The if clause returns early.",
    "created_at": "2020-05-07T22:27:31Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421830539",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421830539"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421830539"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421830539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1622,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421839870",
    "pull_request_review_id": 407891066,
    "id": 421839870,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTg3MA==",
    "diff_hunk": "@@ -1604,6 +1604,36 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    // Check if the requested transaction is so recent that we're just\n+    // about to announce it to the peer; if so, they certainly shouldn't\n+    // know we already have it.\n+    {\n+        LOCK(peer->m_tx_relay->cs_tx_inventory);\n+        if (peer->m_tx_relay->setInventoryTxToSend.count(inv.hash)) return {};\n+    }\n+\n+    auto mi = mapRelay.find(inv.hash);\n+    if (mi != mapRelay.end()) {\n+        // Send stream from relay memory\n+        return mi->second;\n+    } else {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "a00dae0108b50d951f8307cc63ee0353d3c5e712",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, also reflowed the code a bit more.",
    "created_at": "2020-05-07T22:54:36Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421839870",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421839870"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r421839870"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421839870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1622,
    "side": "RIGHT",
    "in_reply_to_id": 421830539
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540387",
    "pull_request_review_id": 408680749,
    "id": 422540387,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MDM4Nw==",
    "diff_hunk": "@@ -1604,6 +1604,34 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "353a391356fcf758f67683ecd2cbef759665b30b",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: could update `CInv& inv` to be `uint256& tx_hsh` since function just uses `inv` to look up the hash 3 times? ",
    "created_at": "2020-05-09T20:09:12Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540387",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540387"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540387"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1608,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540975",
    "pull_request_review_id": 408680749,
    "id": 422540975,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MDk3NQ==",
    "diff_hunk": "@@ -1604,6 +1604,34 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    // Check if the requested transaction is so recent that we're just\n+    // about to announce it to the peer; if so, they certainly shouldn't\n+    // know we already have it.\n+    {\n+        LOCK(peer->m_tx_relay->cs_tx_inventory);\n+        if (peer->m_tx_relay->setInventoryTxToSend.count(inv.hash)) return {};\n+    }\n+\n+    // Send stream from relay memory",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "353a391356fcf758f67683ecd2cbef759665b30b",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "not sure what \"stream\" means here. `mi` will be an iterator to a `uint256, CTransaction` element on the map. I think this is a relic, but might be worth updating (or just removing) if you touch the code again.",
    "created_at": "2020-05-09T20:15:16Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540975",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540975"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r422540975"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422540975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1618,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424013108",
    "pull_request_review_id": 410396526,
    "id": 424013108,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxMzEwOA==",
    "diff_hunk": "@@ -1604,6 +1604,34 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "353a391356fcf758f67683ecd2cbef759665b30b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree, done.",
    "created_at": "2020-05-12T20:27:54Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424013108",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424013108"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424013108"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424013108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1608,
    "side": "RIGHT",
    "in_reply_to_id": 422540387
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424014455",
    "pull_request_review_id": 410398139,
    "id": 424014455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNDQ1NQ==",
    "diff_hunk": "@@ -1604,6 +1604,34 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return a reference to it if so.\n+Optional<CTransactionRef> static FindTxForGetData(CNode* peer, const CInv& inv, std::chrono::microseconds mempool_req, std::chrono::microseconds longlived_mempool_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    // Check if the requested transaction is so recent that we're just\n+    // about to announce it to the peer; if so, they certainly shouldn't\n+    // know we already have it.\n+    {\n+        LOCK(peer->m_tx_relay->cs_tx_inventory);\n+        if (peer->m_tx_relay->setInventoryTxToSend.count(inv.hash)) return {};\n+    }\n+\n+    // Send stream from relay memory",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "353a391356fcf758f67683ecd2cbef759665b30b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's a relic indeed. The relay pool used to store the serialized transaction stream rather than transaction objects. Fixed.",
    "created_at": "2020-05-12T20:30:18Z",
    "updated_at": "2020-05-12T22:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424014455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424014455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r424014455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424014455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1618,
    "side": "RIGHT",
    "in_reply_to_id": 422540975
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425431287",
    "pull_request_review_id": 412185525,
    "id": 425431287,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMTI4Nw==",
    "diff_hunk": "@@ -1608,6 +1608,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm trying to better understand the lock enforcements & have some questions..\r\n\r\nI noticed that `ProcessGetData` has both `LOCKS_EXCLUDED` thread safety annotation as well as an `AssertLockNotHeld` check. I suspect its a product of development over time & is now redundant, but want to confirm my understanding.\r\n\r\n`LOCKS_EXCLUDED` enables clang to do static analysis when we compile with the `-Wthread-safety` option. Does the travis build that says `sanitizers: thread (TSan)` run with this option? \r\n\r\nI was trying to understand the limitations of the clang analysis. All I found was a lack of [negative capabilities](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#negative) (aka can't check if a function doesn't have the excluded annotation), which doesn't seem relevant here. \r\n\r\nAnd then `AssertLockNotHeld()` looks like our custom logic that would do runtime assertions. \r\n\r\nFrom a kind-of-clumsy search through git history, it looks like `AssertLockNotHeld` was added to `ProcessGetData` before the `LOCKS_EXCLUDED` annotation was. But it looks like `threadsafety.h` has defined `LOCKS_EXCLUDED` since 2014. So I can't color the context of decisions.\r\n\r\nTo bring this back to this PR, my fundamental question is: what is the difference of guarantees between `LOCKS_EXCLUDED` and `AssertLockNotHeld`? Would there be a reason to add the second check as well? ",
    "created_at": "2020-05-14T21:07:51Z",
    "updated_at": "2020-05-14T21:07:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425431287",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425431287"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425431287"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425431287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1612,
    "original_line": 1612,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425439519",
    "pull_request_review_id": 412196007,
    "id": 425439519,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTUxOQ==",
    "diff_hunk": "@@ -1608,6 +1608,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They're somewhat orthogonal, I think.\r\n\r\nAnnotations:\r\n * [+] Is a compile-time check, and guarantee absence of issues in every possible code path\r\n * [-] Only works in clang\r\n * [-] Can't be used in some more advanced locking scenarios\r\n\r\nAssertions:\r\n* [+] Works in GCC and Clang\r\n* [+] Isn't restricted to analyzable cases\r\n* [-] Is only a runtime check; it needs test cases that actually exercise the bug\r\n* [-] Needs building with -DDEBUG_LOCKORDER\r\n\r\nPerhaps at some point it's time to evaluate if we can pick just one over the other (which I guess would be the annotations approach), but they're not exactly identical.",
    "created_at": "2020-05-14T21:24:39Z",
    "updated_at": "2020-05-14T21:25:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425439519",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425439519"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425439519"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425439519/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1612,
    "original_line": 1612,
    "side": "RIGHT",
    "in_reply_to_id": 425431287
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425462396",
    "pull_request_review_id": 412224542,
    "id": 425462396,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjM5Ng==",
    "diff_hunk": "@@ -1608,6 +1608,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok gotcha. thanks thats very helpful.\r\n\r\nso assuming we regularly run the compile-time checks, for this specific case the guarantee from the annotations > guarantee from the assertion. \r\n\r\nI don't see any travis jobs that are running `-Wthread-safety` (and since my previous comment learned that clang thread safety analysis is different than the clang thread sanitizer)\r\n\r\ndoes that mean if somebody added code that acquired `cs_main` and invoked `FindTxForGetData`, we'd be relying on a reviewer to either notice or compile with `-Wthread-safety` to raise an error? \r\n\r\nI do see travis jobs that pass through `-DDEBUG_LOCKORDER`, so assuming we have good functional test coverage, throwing the assertion could cause a travis failure in that circumstance?\r\n\r\nIt might not be super important / worth invalidating ACKs to add the additional check. The lock expectations have been made very apparent and if new code tried to call this function with the lock acquired, I think we'd catch it in the review process. But on the other hand if we have tooling that reduces dependency on careful review, might as well use it? \r\n\r\nI'm about ready to ACK this PR, just would like to make sure my understanding is clear",
    "created_at": "2020-05-14T22:18:26Z",
    "updated_at": "2020-05-14T22:18:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425462396",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425462396"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425462396"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425462396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1612,
    "original_line": 1612,
    "side": "RIGHT",
    "in_reply_to_id": 425431287
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425465450",
    "pull_request_review_id": 412228264,
    "id": 425465450,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NTQ1MA==",
    "diff_hunk": "@@ -1608,6 +1608,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think configure.ac turns on `-Wthread-safety-analysis` and `-Werror=thread-safety-analysis` by default if the compiler supports it.",
    "created_at": "2020-05-14T22:26:39Z",
    "updated_at": "2020-05-14T22:26:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425465450",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425465450"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425465450"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425465450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1612,
    "original_line": 1612,
    "side": "RIGHT",
    "in_reply_to_id": 425431287
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425467586",
    "pull_request_review_id": 412230857,
    "id": 425467586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NzU4Ng==",
    "diff_hunk": "@@ -1608,6 +1608,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah, thank you. ",
    "created_at": "2020-05-14T22:32:52Z",
    "updated_at": "2020-05-14T22:32:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425467586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425467586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r425467586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425467586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1612,
    "original_line": 1612,
    "side": "RIGHT",
    "in_reply_to_id": 425431287
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451666992",
    "pull_request_review_id": 444926924,
    "id": 451666992,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2Njk5Mg==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are no longer holding cs_main. Why is it OK to access vRecvGetData here without a lock?",
    "created_at": "2020-07-08T16:18:43Z",
    "updated_at": "2020-07-08T16:18:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451666992",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451666992"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451666992"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451666992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451695547",
    "pull_request_review_id": 444963372,
    "id": 451695547,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5NTU0Nw==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`vRecvGetData` isn't guarded by cs_main. In fact, it's not guarded by anything \ud83d\ude31 \r\n\r\nAll access of `vRecvGetData` is in `ProcessMessages()`, which only ever runs single threaded in the Message Handler thread, so this is safe, but ideally it'd be guarded by some synchronization method in case that ever changes.",
    "created_at": "2020-07-08T17:03:52Z",
    "updated_at": "2020-07-08T17:03:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451695547",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451695547"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451695547"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451695547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451709203",
    "pull_request_review_id": 444980856,
    "id": 451709203,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwOTIwMw==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right. Previous to this commit, the `mempool`, `vRecvGetData`, and `m_tx_relay` were all accessed atomically under `cs_main`. This changes that and uses finer-grained locking. \r\n\r\nI think all the other accesses are safe but I wasn't certain about `vRecvGetData`.  ",
    "created_at": "2020-07-08T17:26:35Z",
    "updated_at": "2020-07-08T17:26:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451709203",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451709203"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451709203"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451709203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451710994",
    "pull_request_review_id": 444983136,
    "id": 451710994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMDk5NA==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@narula Nice catch. Indeed, as @jnewbery says, it isn't formally protected by anything right now. That's fine because (a) it's only accessed from one thread (b) every access to it actually holds `cs_vRecv` (just checked).",
    "created_at": "2020-07-08T17:29:36Z",
    "updated_at": "2020-07-08T17:29:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451710994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451710994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451710994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451710994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451724605",
    "pull_request_review_id": 445000275,
    "id": 451724605,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyNDYwNQ==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could you point out where `cs_vRecv` is taken before `vRecvGetData` is accessed here? I only see it locked in two places in net.cpp, and I can't connect either of them to `ProcessMessages`. The non-stats one is in `ReceiveMsgBytes`.",
    "created_at": "2020-07-08T17:52:45Z",
    "updated_at": "2020-07-08T17:52:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451724605",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451724605"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451724605"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451724605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451725713",
    "pull_request_review_id": 445001623,
    "id": 451725713,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyNTcxMw==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "~~net locks `cs_vRecv` and holds it while calling ProcessMessages. I checked by adding the annotation and recompiling.~~\r\n\r\nEDIT: i'm wrong",
    "created_at": "2020-07-08T17:54:33Z",
    "updated_at": "2020-07-08T17:57:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451725713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451725713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451725713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451725713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451778445",
    "pull_request_review_id": 445068520,
    "id": 451778445,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3ODQ0NQ==",
    "diff_hunk": "@@ -1642,37 +1645,31 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n \n-    {\n-        LOCK(cs_main);\n-\n-        // Process as many TX items from the front of the getdata queue as\n-        // possible, since they're common and it's efficient to batch process\n-        // them.\n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // The send buffer provides backpressure. If there's no space in\n-            // the buffer, pause processing until the next call.\n-            if (pfrom->fPauseSend)\n-                break;\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 39,
    "commit_id": "2896c412fadbc03916a33028f4f50fd87ac48edb",
    "original_commit_id": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok! based on discussion in PR review club today I'll PR a change to guard it by `cs_vRecv`, and look at `orphan_work_set` too. To be clear: there's no data race now, but it's worth fixing up in case these fields are accessed from multiple threads in the future.",
    "created_at": "2020-07-08T19:31:44Z",
    "updated_at": "2020-07-08T19:31:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451778445",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451778445"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18861#discussion_r451778445"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18861"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451778445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1659,
    "original_line": 1651,
    "side": "RIGHT",
    "in_reply_to_id": 451666992
  }
]