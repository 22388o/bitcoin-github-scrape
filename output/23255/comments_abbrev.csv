practicalswift,2021-10-11 14:15:10,"Concept ACK\n\nI think we need to `#define __NR_clone3` (if not defined) like we do for `statx` and other relatively recently introduced syscalls:\n\n```c++\n// Define system call numbers for x86_64 that are referenced in the system call profile\n// but not provided by the kernel headers used in the GUIX build.\n#ifndef __NR_statx\n#define __NR_statx 332\n#endif\n```",https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940072045,940072045,
MarcoFalke,2021-10-11 14:21:19,How do I find the number? ,https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940077338,940077338,
laanwj,2021-10-11 14:22:54,"> How do I find the number?\n\nUsually in `/usr/include/x86_64-linux-gnu/asm/unistd_64.h` for x86_64.",https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940078648,940078648,
MarcoFalke,2021-10-11 14:27:30,"Thanks, added that to the comment in the file.",https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940082413,940082413,
practicalswift,2021-10-11 14:28:46,"cr ACK fab40732a95711abadc22c3689f248753341a481\n\nThanks again for testing on diverse systems and filling in the gaps!\n\nFrom the original syscall sandbox PR https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-857707559: _As have been noted in previous discussions above syscall sandboxing is a type of feature that needs experimentation and fine-tuning for different environments to cat",https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940083460,940083460,
laanwj,2021-10-11 15:47:46,ACK fab40732a95711abadc22c3689f248753341a481,https://github.com/bitcoin/bitcoin/pull/23255#issuecomment-940146173,940146173,
MarcoFalke,2021-10-11 14:12:31,"For reference,       The clone3() system call first appeared in Linux 5.3.",https://github.com/bitcoin/bitcoin/pull/23255#discussion_r726156113,726156113,src/util/syscall_sandbox.cpp
