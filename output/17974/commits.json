[
  {
    "sha": "c89611ebd33a86c0fe14adecc100065f16ea16da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODk2MTFlYmQzM2E4NmMwZmUxNGFkZWNjMTAwMDY1ZjE2ZWExNmRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-17T14:43:12Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-01-22T16:54:37Z"
      },
      "message": "net: Log to net category for exceptions in ProcessMessages\n\nRemove the forest of special exceptions, and simply log a short\nmessage to the NET logging category when an exception happens during\npacket processing. It is not good to panick end users with errors\nthat any peer can generate (let alone writing to stderr).\n\nGithub-Pull: #17762\nRebased-From: 4d88c3dcb61e7c075ed3dd442044e0eff4e3c8de",
      "tree": {
        "sha": "16089f70ee4847e523c75dc225b5e4f20057e410",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16089f70ee4847e523c75dc225b5e4f20057e410"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c89611ebd33a86c0fe14adecc100065f16ea16da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c89611ebd33a86c0fe14adecc100065f16ea16da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c89611ebd33a86c0fe14adecc100065f16ea16da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c89611ebd33a86c0fe14adecc100065f16ea16da/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a05d14d4a00eceb03c14ca04de131116075b10f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a05d14d4a00eceb03c14ca04de131116075b10f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a05d14d4a00eceb03c14ca04de131116075b10f4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 3,
      "deletions": 28
    },
    "files": [
      {
        "sha": "e967abafc958abf8bfd776e9602ec78376846e09",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 28,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c89611ebd33a86c0fe14adecc100065f16ea16da/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c89611ebd33a86c0fe14adecc100065f16ea16da/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c89611ebd33a86c0fe14adecc100065f16ea16da",
        "patch": "@@ -3090,35 +3090,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n-    }\n-    catch (const std::ios_base::failure& e)\n-    {\n-        if (m_enable_bip61) {\n-            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n-        }\n-        if (strstr(e.what(), \"end of data\")) {\n-            // Allow exceptions from under-length message on vRecv\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"size too large\")) {\n-            // Allow exceptions from over-long size\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"non-canonical ReadCompactSize()\")) {\n-            // Allow exceptions from non-canonical encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"Superfluous witness record\")) {\n-            // Allow exceptions from illegal witness encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"Unknown transaction optional data\")) {\n-            // Allow exceptions from unknown witness encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else {\n-            PrintExceptionContinue(&e, \"ProcessMessages()\");\n-        }\n-    }\n-    catch (const std::exception& e) {\n-        PrintExceptionContinue(&e, \"ProcessMessages()\");\n+    } catch (const std::exception& e) {\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what(), typeid(e).name());\n     } catch (...) {\n-        PrintExceptionContinue(nullptr, \"ProcessMessages()\");\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(strCommand), nMessageSize);\n     }\n \n     if (!fRet) {"
      }
    ]
  }
]