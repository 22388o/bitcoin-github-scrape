laanwj,2017-04-21T15:11:19Z,"Concept ACK, nice!",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-296218058,296218058,
jonasschnelli,2017-04-21T16:12:19Z,Force pushed fixes for issues found by @ryanofsky.,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-296234383,296234383,
jonasschnelli,2017-05-04T07:20:01Z,Force push fixed @ryanofsky points.,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-299113394,299113394,
jonasschnelli,2017-05-04T18:42:05Z,"Force push fixed @ryanofsky's nit (and also added the ""other balances"" atomics to `SetNull()`).",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-299273734,299273734,
ryanofsky,2017-05-05T15:14:21Z,"ACK 84904a9d8ac5e98558b366bc69338d4ad07dc2f7.\n\nChanges since last review were those Jonas mentioned. Seeing the missing initializations in SetNull() was a little disconcerting, because I would have expected tests to catch errors they would cause. Actually one test did fail (wallet_tests/rescan) but I guess I didn't notice it.",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-299492327,299492327,
jonasschnelli,2017-06-14T06:38:40Z,Needed a trivial rebase (`BOOST_FOREACH` -> `for` change).,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-308333912,308333912,
sipa,2017-06-14T07:18:36Z,"@kallewoof No, the lock on cs_wallet will happen after MarkBalancesDirty",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-308341918,308341918,
sipa,2017-06-14T07:27:49Z,> But maybe I'm wrong\n\nYou're wrong.,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-308344209,308344209,
jonasschnelli,2017-06-14T07:32:14Z,">> But maybe I'm wrong\n\n> You're wrong.\n\nOkay. Then I'll better be quite.\nMoved up the `LOCK()`.",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-308345329,308345329,
laanwj,2017-06-15T07:06:11Z,"I'm trying to understand whether this will introduce a hang in the GUI thread in some cases.\n\nRight now, the recurrent poll timer (not thread! it's a qt timer which runs in the GUI thread) updates the balance *if* it's possible to get the locks using TRY_LOCK. Then it will get them, once, and process all balances.\n\nAfter this change the locks are no longer TRY, so the `BalancesChanged` sig",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-308647720,308647720,
jonasschnelli,2017-06-16T12:05:13Z,"Some of the current heavy ""freezes"" are happening because of the balance poll thread... it seems to be a significant CPU eater.\nRight now, we TRY_LOCK every 250ms (which often LOCKS successfully and then iterates (multiple times) through the complete mapWallet).\n\n<img width=""1027"" alt=""bildschirmfoto 2017-06-16 um 14 00 59"" src=""https://user-images.githubusercontent.com/178464/27225895-8d7eb",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-309009539,309009539,
jonasschnelli,2017-06-16T12:10:35Z,"Here the complete profiling (master):\n\nIt seems like that the pollBalanceThread took 50% of the complete CPU time for the measured run.\n(30 seconds, opening debug window and 10-20 times sendtoaddress)\n\n<img width=""1026"" alt=""bildschirmfoto 2017-06-16 um 14 09 00"" src=""https://user-images.githubusercontent.com/178464/27226052-6664332e-529d-11e7-9f4b-bd02376c401e.png"">",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-309010477,309010477,
jonasschnelli,2017-06-16T12:16:56Z,"I testes again with this PR and the responsiveness is much better. @laanwj points make sense to me.\n\nCould it be, that the TRY_LOCK every 250ms will result in getting the LOCK very often and then do the heavy balance calculation on the main thread because `QTimer` runs on the Main/GUI thread?",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-309011605,309011605,
ryanofsky,2017-06-16T12:20:58Z,"> Could it be, that the TRY_LOCK every 250ms will result in getting the LOCK very often and then do the heavy balance calculation on the main thread because QTimer runs on the Main/GUI thread?\n\nThat's what I would expect. Have you thought about keeping the cache but bringing back the polling and try lock to address laanwj's point?",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-309012390,309012390,
jonasschnelli,2017-06-16T13:05:14Z,"@ryanofsky I profiled this PR with only the first commit (atomic caches, keep the polling).\nThe results are better, but not as good as with the signal/non-polling approach:\n\nTest run: Startup, call `sendtoaddress(getnewaddress(), 1)` 20 times manually\n\n## Master with only the first commit (pure atomic caches):\nThe polling thread gets measured (through significants) in my profiler with ",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-309021160,309021160,
ryanofsky,2017-06-21T18:36:53Z,"Unclear to me if @laanwj's concern about losing the try lock is sufficiently addressed with the new testing and discussion at https://botbot.me/freenode/bitcoin-core-dev/msg/87346236/. If it is, maybe this PR is close to ready for merge (so far two utACKs from kallewoof and me). If not, it seems like there is some advantage (50% -> 30% poll thread cpu decrease) and no downside to just merging the ",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-310167848,310167848,
jonasschnelli,2017-06-21T18:38:54Z,I guess it would be great if someone with (g)perf experience on Linux/Ubuntu and maybe on Windows could benchmark this PR against master.,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-310168368,310168368,
ryanofsky,2017-06-21T19:54:33Z,"Linux and windows performance tests seem like they would be a good sanity check on the numbers you collected (50% cpu usage spent on balance computation on master, 33% with caching commit, and ~0% with full pr), but is there some reason to think this behavior would be dependent on the platform?\n\nI guess the main thing I'm not clear on is whether the results you collected (assuming they do hold",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-310187267,310187267,
promag,2017-07-20T01:19:46Z,@jonasschnelli if still relevant I can do it.,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-316568639,316568639,
jonasschnelli,2017-07-20T06:57:35Z,"@promag: A benchmark would be very good to have.\nIdeally you compare master against this PR **and** against only the first commit in this PR (3 versions).\nThanks!",https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-316614446,316614446,
jonasschnelli,2017-10-05T04:05:15Z,Closing for now... ,https://github.com/bitcoin/bitcoin/pull/10251#issuecomment-334353012,334353012,
ryanofsky,2017-04-21T15:07:29Z,"I think think you need to acquire cs_wallet lock here, otherwise this could return a partial sum if `GetBalance` got called from two threads at the same time and one thread returned `nBalanceCache` while the other thread was in the middle of the `nBalanceCache +=` loop.\n\nAlternately, you could bring back the nTotal local variable and just set `nBalanceCache = nTotal`  atomically.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r112709836,112709836,src/wallet/wallet.cpp
ryanofsky,2017-04-21T15:10:37Z,"I think you need to move this line after the `LOCK2(cs_main, cs_wallet);` line. Otherwise if this method is called from two different threads simultaneously, this line could zero out a balance which is in the middle of being added up by the other thread.\n\nOr alternately, delete this line and and set nBalanceCache = nTotal atomically after the loop.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r112710662,112710662,src/wallet/wallet.cpp
ryanofsky,2017-04-21T15:21:59Z,"Maybe call it `BalancesChanged` instead of `BalancesDidChange` to be consistent with the naming of other signals (`StatusChanged`, `AddressBookChanged`, etc).",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r112713347,112713347,src/wallet/wallet.h
jonasschnelli,2017-04-21T15:56:43Z,"Oh.. good point.\nI'll re-add the temp variable then.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r112721119,112721119,src/wallet/wallet.cpp
jonasschnelli,2017-04-21T15:59:57Z,"Yes. I can do that. I kinda like the signal naming convention from apple. XYWillChange, XYDidChange, etc.: because it allows the listener to know (without reading to much code) if the event was synchronous or has triggered a process with a later update. But lets not overdo it here,.. will change therefore.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r112721851,112721851,src/wallet/wallet.h
ryanofsky,2017-05-01T16:09:11Z,"In commit ""Add atomic cache for balances""\n\nThe whole caching portion of this PR actually seems broken because `fBalancesDirty` is initialized to true but never set to false anywhere. I think this can be fixed, but maybe simplest thing to do would be to drop the caching, and just keep the signalling part of this PR.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r114147182,114147182,src/wallet/wallet.h
ryanofsky,2017-05-01T17:05:22Z,"In commit ""[Qt] remove unused polling code""\n\nI think it would be good to squash this commit into ""[Qt] use the BalancesChanged signal instead of a 250ms poll timer."" It's confusing to see code that checks the `fForceCheckBalanceChanged` variable and some code that sets it removed, while other code that sets it sticks around.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r114156091,114156091,src/qt/walletmodel.cpp
jonasschnelli,2017-05-04T07:19:24Z,Oh. Yes indeed. I now switched to a cache-invalidation-atomic per balance type and set it to `false` once the cache has been built.,https://github.com/bitcoin/bitcoin/pull/10251#discussion_r114711533,114711533,src/wallet/wallet.h
jonasschnelli,2017-05-04T07:19:39Z,Good point. Squashed those two commits together.,https://github.com/bitcoin/bitcoin/pull/10251#discussion_r114711567,114711567,src/qt/walletmodel.cpp
ryanofsky,2017-05-04T15:22:15Z,"In commit ""Add atomic cache for balances""\n\nMaybe rename `fBalancesDirty` to `fBalanceDirty` since this only applies to the balance returned from CWallet::GetBalance and not the other balances.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r114810109,114810109,src/wallet/wallet.cpp
kallewoof,2017-06-14T06:58:07Z,Am I mistaken when I think that the lock on `cs_wallet` will actually happen before the call to `MarkBalancesDirty()` due to scope? If so I would swap these lines for clarity.,https://github.com/bitcoin/bitcoin/pull/10251#discussion_r121867835,121867835,src/wallet/wallet.cpp
jonasschnelli,2017-06-14T07:26:42Z,"I guess I should move the `LOCK()` up to the top. Because its RAII, I think it doesn't matter in this case (no extra block). The lock should take affect when we enter the function/scope (before `MarkBalancesDirty()`). But maybe I'm wrong.",https://github.com/bitcoin/bitcoin/pull/10251#discussion_r121872229,121872229,src/wallet/wallet.cpp
