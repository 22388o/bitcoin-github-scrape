[
  {
    "sha": "4c92791df5c96128e03834a8a1a52c07c2164cf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzkyNzkxZGY1Yzk2MTI4ZTAzODM0YThhMWE1MmMwN2MyMTY0Y2Y1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-21T04:39:07Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-27T06:11:03Z"
      },
      "message": "Added configure scripts.",
      "tree": {
        "sha": "7d7b484f71c1229b7a9a7a69d086bbbf8770a4cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d7b484f71c1229b7a9a7a69d086bbbf8770a4cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c92791df5c96128e03834a8a1a52c07c2164cf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c92791df5c96128e03834a8a1a52c07c2164cf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c92791df5c96128e03834a8a1a52c07c2164cf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c92791df5c96128e03834a8a1a52c07c2164cf5/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63cc7661a5dc40479a4492a678c38b1021b9ce92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cc7661a5dc40479a4492a678c38b1021b9ce92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63cc7661a5dc40479a4492a678c38b1021b9ce92"
      }
    ],
    "stats": {
      "total": 1017,
      "additions": 1017,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6a2d7092c209c9f32d8a17d9e0a8ba1468866cf1",
        "filename": "bitcoin-qt.pro.temp",
        "status": "added",
        "additions": 400,
        "deletions": 0,
        "changes": 400,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c92791df5c96128e03834a8a1a52c07c2164cf5/bitcoin-qt.pro.temp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c92791df5c96128e03834a8a1a52c07c2164cf5/bitcoin-qt.pro.temp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro.temp?ref=4c92791df5c96128e03834a8a1a52c07c2164cf5",
        "patch": "@@ -0,0 +1,400 @@\n+TEMPLATE = app\n+TARGET = bitcoin-qt\n+VERSION = 0.7.99\n+INCLUDEPATH += src src/json src/qt\n+DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n+CONFIG += no_include_pwd\n+CONFIG += thread\n+\n+# for boost 1.37, add -mt to the boost libraries\n+# use: qmake BOOST_LIB_SUFFIX=-mt\n+# for boost thread win32 with _win32 sufix\n+# use: BOOST_THREAD_LIB_SUFFIX=_win32-...\n+# or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n+\n+# Dependency library locations can be customized with:\n+#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,\n+#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively\n+\n+OBJECTS_DIR = build\n+MOC_DIR = build\n+UI_DIR = build\n+\n+# use: qmake \"RELEASE=1\"\n+contains(RELEASE, 1) {\n+    # Mac: compile for maximum compatibility (10.5, 32-bit)\n+    macx:QMAKE_CXXFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n+    macx:QMAKE_CFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n+    macx:QMAKE_OBJECTIVE_CFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n+\n+    !win32:!macx {\n+        # Linux: static link\n+        LIBS += -Wl,-Bstatic\n+    }\n+}\n+\n+!win32 {\n+# for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection\n+QMAKE_CXXFLAGS *= -fstack-protector-all\n+QMAKE_LFLAGS *= -fstack-protector-all\n+# We need to exclude this for Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable!\n+# This can be enabled for Windows, when we switch to MinGW >= 4.4.x.\n+}\n+# for extra security (see: https://wiki.debian.org/Hardening)\n+QMAKE_CXXFLAGS *= -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now\n+# for extra security on Windows: enable ASLR and DEP via GCC linker flags\n+win32:QMAKE_LFLAGS *= -Wl,--dynamicbase -Wl,--nxcompat\n+\n+# use: qmake \"USE_QRCODE=1\"\n+# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\n+contains(USE_QRCODE, 1) {\n+    message(Building with QRCode support)\n+    DEFINES += USE_QRCODE\n+    LIBS += -lqrencode\n+}\n+\n+# use: qmake \"USE_UPNP=1\" ( enabled by default; default)\n+#  or: qmake \"USE_UPNP=0\" (disabled by default)\n+#  or: qmake \"USE_UPNP=-\" (not supported)\n+# miniupnpc (http://miniupnp.free.fr/files/) must be installed for support\n+contains(USE_UPNP, -) {\n+    message(Building without UPNP support)\n+} else {\n+    message(Building with UPNP support)\n+    count(USE_UPNP, 0) {\n+        USE_UPNP=1\n+    }\n+    DEFINES += USE_UPNP=$$USE_UPNP STATICLIB\n+    INCLUDEPATH += $$MINIUPNPC_INCLUDE_PATH\n+    LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc\n+    win32:LIBS += -liphlpapi\n+}\n+\n+# use: qmake \"USE_DBUS=1\"\n+contains(USE_DBUS, 1) {\n+    message(Building with DBUS (Freedesktop notifications) support)\n+    DEFINES += USE_DBUS\n+    QT += dbus\n+}\n+\n+# use: qmake \"USE_IPV6=1\" ( enabled by default; default)\n+#  or: qmake \"USE_IPV6=0\" (disabled by default)\n+#  or: qmake \"USE_IPV6=-\" (not supported)\n+contains(USE_IPV6, -) {\n+    message(Building without IPv6 support)\n+} else {\n+    count(USE_IPV6, 0) {\n+        USE_IPV6=1\n+    }\n+    DEFINES += USE_IPV6=$$USE_IPV6\n+}\n+\n+contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n+    DEFINES += BITCOIN_NEED_QT_PLUGINS\n+    QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets\n+}\n+\n+INCLUDEPATH += src/leveldb/include src/leveldb/helpers\n+LIBS += $$PWD/src/leveldb/libleveldb.a $$PWD/src/leveldb/libmemenv.a\n+!win32 {\n+    genleveldb.commands = cd $$PWD/src/leveldb && $(MAKE) libleveldb.a libmemenv.a\n+} else {\n+    # make an educated guess about what the ranlib command is called\n+    isEmpty(QMAKE_RANLIB) {\n+        QMAKE_RANLIB = $$replace(QMAKE_STRIP, strip, ranlib)\n+    }\n+    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS=\"-I$$BOOST_INCLUDE_PATH\" LDFLAGS=\"-L$$BOOST_LIB_PATH\" $(MAKE) libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a\n+}\n+genleveldb.target = $$PWD/src/leveldb/libleveldb.a\n+genleveldb.depends = FORCE\n+PRE_TARGETDEPS += $$PWD/src/leveldb/libleveldb.a\n+QMAKE_EXTRA_TARGETS += genleveldb\n+# Gross ugly hack that depends on qmake internals, unfortunately there's no other way to do it.\n+QMAKE_CLEAN += $$PWD/src/leveldb/libleveldb.a; cd $$PWD/src/leveldb ; $(MAKE) clean\n+\n+# regenerate src/build.h\n+!win32|contains(USE_BUILD_INFO, 1) {\n+    genbuild.depends = FORCE\n+    genbuild.commands = cd $$PWD; /bin/sh share/genbuild.sh $$OUT_PWD/build/build.h\n+    genbuild.target = $$OUT_PWD/build/build.h\n+    PRE_TARGETDEPS += $$OUT_PWD/build/build.h\n+    QMAKE_EXTRA_TARGETS += genbuild\n+    DEFINES += HAVE_BUILD_INFO\n+}\n+\n+QMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector\n+\n+# Input\n+DEPENDPATH += src src/json src/qt\n+HEADERS += src/qt/bitcoingui.h \\\n+    src/qt/transactiontablemodel.h \\\n+    src/qt/addresstablemodel.h \\\n+    src/qt/optionsdialog.h \\\n+    src/qt/sendcoinsdialog.h \\\n+    src/qt/addressbookpage.h \\\n+    src/qt/signverifymessagedialog.h \\\n+    src/qt/aboutdialog.h \\\n+    src/qt/editaddressdialog.h \\\n+    src/qt/bitcoinaddressvalidator.h \\\n+    src/alert.h \\\n+    src/addrman.h \\\n+    src/base58.h \\\n+    src/bignum.h \\\n+    src/checkpoints.h \\\n+    src/compat.h \\\n+    src/sync.h \\\n+    src/util.h \\\n+    src/hash.h \\\n+    src/uint256.h \\\n+    src/serialize.h \\\n+    src/main.h \\\n+    src/net.h \\\n+    src/key.h \\\n+    src/db.h \\\n+    src/walletdb.h \\\n+    src/script.h \\\n+    src/init.h \\\n+    src/irc.h \\\n+    src/bloom.h \\\n+    src/mruset.h \\\n+    src/checkqueue.h \\\n+    src/json/json_spirit_writer_template.h \\\n+    src/json/json_spirit_writer.h \\\n+    src/json/json_spirit_value.h \\\n+    src/json/json_spirit_utils.h \\\n+    src/json/json_spirit_stream_reader.h \\\n+    src/json/json_spirit_reader_template.h \\\n+    src/json/json_spirit_reader.h \\\n+    src/json/json_spirit_error_position.h \\\n+    src/json/json_spirit.h \\\n+    src/qt/clientmodel.h \\\n+    src/qt/guiutil.h \\\n+    src/qt/transactionrecord.h \\\n+    src/qt/guiconstants.h \\\n+    src/qt/optionsmodel.h \\\n+    src/qt/monitoreddatamapper.h \\\n+    src/qt/transactiondesc.h \\\n+    src/qt/transactiondescdialog.h \\\n+    src/qt/bitcoinamountfield.h \\\n+    src/wallet.h \\\n+    src/keystore.h \\\n+    src/qt/transactionfilterproxy.h \\\n+    src/qt/transactionview.h \\\n+    src/qt/walletmodel.h \\\n+    src/bitcoinrpc.h \\\n+    src/qt/overviewpage.h \\\n+    src/qt/csvmodelwriter.h \\\n+    src/crypter.h \\\n+    src/qt/sendcoinsentry.h \\\n+    src/qt/qvalidatedlineedit.h \\\n+    src/qt/bitcoinunits.h \\\n+    src/qt/qvaluecombobox.h \\\n+    src/qt/askpassphrasedialog.h \\\n+    src/protocol.h \\\n+    src/qt/notificator.h \\\n+    src/qt/qtipcserver.h \\\n+    src/allocators.h \\\n+    src/ui_interface.h \\\n+    src/qt/rpcconsole.h \\\n+    src/version.h \\\n+    src/netbase.h \\\n+    src/clientversion.h \\\n+    src/txdb.h \\\n+    src/leveldb.h \\\n+    src/threadsafety.h\n+\n+SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n+    src/qt/transactiontablemodel.cpp \\\n+    src/qt/addresstablemodel.cpp \\\n+    src/qt/optionsdialog.cpp \\\n+    src/qt/sendcoinsdialog.cpp \\\n+    src/qt/addressbookpage.cpp \\\n+    src/qt/signverifymessagedialog.cpp \\\n+    src/qt/aboutdialog.cpp \\\n+    src/qt/editaddressdialog.cpp \\\n+    src/qt/bitcoinaddressvalidator.cpp \\\n+    src/alert.cpp \\\n+    src/version.cpp \\\n+    src/sync.cpp \\\n+    src/util.cpp \\\n+    src/hash.cpp \\\n+    src/netbase.cpp \\\n+    src/key.cpp \\\n+    src/script.cpp \\\n+    src/main.cpp \\\n+    src/init.cpp \\\n+    src/net.cpp \\\n+    src/irc.cpp \\\n+    src/bloom.cpp \\\n+    src/checkpoints.cpp \\\n+    src/addrman.cpp \\\n+    src/db.cpp \\\n+    src/walletdb.cpp \\\n+    src/qt/clientmodel.cpp \\\n+    src/qt/guiutil.cpp \\\n+    src/qt/transactionrecord.cpp \\\n+    src/qt/optionsmodel.cpp \\\n+    src/qt/monitoreddatamapper.cpp \\\n+    src/qt/transactiondesc.cpp \\\n+    src/qt/transactiondescdialog.cpp \\\n+    src/qt/bitcoinstrings.cpp \\\n+    src/qt/bitcoinamountfield.cpp \\\n+    src/wallet.cpp \\\n+    src/keystore.cpp \\\n+    src/qt/transactionfilterproxy.cpp \\\n+    src/qt/transactionview.cpp \\\n+    src/qt/walletmodel.cpp \\\n+    src/bitcoinrpc.cpp \\\n+    src/rpcdump.cpp \\\n+    src/rpcnet.cpp \\\n+    src/rpcmining.cpp \\\n+    src/rpcwallet.cpp \\\n+    src/rpcblockchain.cpp \\\n+    src/rpcrawtransaction.cpp \\\n+    src/qt/overviewpage.cpp \\\n+    src/qt/csvmodelwriter.cpp \\\n+    src/crypter.cpp \\\n+    src/qt/sendcoinsentry.cpp \\\n+    src/qt/qvalidatedlineedit.cpp \\\n+    src/qt/bitcoinunits.cpp \\\n+    src/qt/qvaluecombobox.cpp \\\n+    src/qt/askpassphrasedialog.cpp \\\n+    src/protocol.cpp \\\n+    src/qt/notificator.cpp \\\n+    src/qt/qtipcserver.cpp \\\n+    src/qt/rpcconsole.cpp \\\n+    src/noui.cpp \\\n+    src/leveldb.cpp \\\n+    src/txdb.cpp\n+\n+RESOURCES += \\\n+    src/qt/bitcoin.qrc\n+\n+FORMS += \\\n+    src/qt/forms/sendcoinsdialog.ui \\\n+    src/qt/forms/addressbookpage.ui \\\n+    src/qt/forms/signverifymessagedialog.ui \\\n+    src/qt/forms/aboutdialog.ui \\\n+    src/qt/forms/editaddressdialog.ui \\\n+    src/qt/forms/transactiondescdialog.ui \\\n+    src/qt/forms/overviewpage.ui \\\n+    src/qt/forms/sendcoinsentry.ui \\\n+    src/qt/forms/askpassphrasedialog.ui \\\n+    src/qt/forms/rpcconsole.ui \\\n+    src/qt/forms/optionsdialog.ui\n+\n+contains(USE_QRCODE, 1) {\n+HEADERS += src/qt/qrcodedialog.h\n+SOURCES += src/qt/qrcodedialog.cpp\n+FORMS += src/qt/forms/qrcodedialog.ui\n+}\n+\n+contains(BITCOIN_QT_TEST, 1) {\n+SOURCES += src/qt/test/test_main.cpp \\\n+    src/qt/test/uritests.cpp\n+HEADERS += src/qt/test/uritests.h\n+DEPENDPATH += src/qt/test\n+QT += testlib\n+TARGET = bitcoin-qt_test\n+DEFINES += BITCOIN_QT_TEST\n+}\n+\n+CODECFORTR = UTF-8\n+\n+# for lrelease/lupdate\n+# also add new translations to src/qt/bitcoin.qrc under translations/\n+TRANSLATIONS = $$files(src/qt/locale/bitcoin_*.ts)\n+\n+isEmpty(QMAKE_LRELEASE) {\n+    win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]\\\\lrelease.exe\n+    else:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]/lrelease\n+}\n+isEmpty(QM_DIR):QM_DIR = $$PWD/src/qt/locale\n+# automatically build translations, so they can be included in resource file\n+TSQM.name = lrelease ${QMAKE_FILE_IN}\n+TSQM.input = TRANSLATIONS\n+TSQM.output = $$QM_DIR/${QMAKE_FILE_BASE}.qm\n+TSQM.commands = $$QMAKE_LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n+TSQM.CONFIG = no_link\n+QMAKE_EXTRA_COMPILERS += TSQM\n+\n+# \"Other files\" to show in Qt Creator\n+OTHER_FILES += \\\n+    doc/*.rst doc/*.txt doc/README README.md res/bitcoin-qt.rc src/test/*.cpp src/test/*.h src/qt/test/*.cpp src/qt/test/*.h\n+\n+# platform specific defaults, if not overridden on command line\n+isEmpty(BOOST_LIB_SUFFIX) {\n+    macx:BOOST_LIB_SUFFIX = -mt\n+    win32:BOOST_LIB_SUFFIX = -mgw44-mt-s-1_50\n+}\n+\n+isEmpty(BOOST_THREAD_LIB_SUFFIX) {\n+    BOOST_THREAD_LIB_SUFFIX = $$BOOST_LIB_SUFFIX\n+}\n+\n+isEmpty(BDB_LIB_PATH) {\n+    macx:BDB_LIB_PATH = /opt/local/lib/db48\n+}\n+\n+isEmpty(BDB_LIB_SUFFIX) {\n+    macx:BDB_LIB_SUFFIX = -4.8\n+}\n+\n+isEmpty(BDB_INCLUDE_PATH) {\n+    macx:BDB_INCLUDE_PATH = /opt/local/include/db48\n+}\n+\n+isEmpty(BOOST_LIB_PATH) {\n+    macx:BOOST_LIB_PATH = /opt/local/lib\n+}\n+\n+isEmpty(BOOST_INCLUDE_PATH) {\n+    macx:BOOST_INCLUDE_PATH = /opt/local/include\n+}\n+\n+win32:DEFINES += WIN32\n+win32:RC_FILE = src/qt/res/bitcoin-qt.rc\n+\n+win32:!contains(MINGW_THREAD_BUGFIX, 0) {\n+    # At least qmake's win32-g++-cross profile is missing the -lmingwthrd\n+    # thread-safety flag. GCC has -mthreads to enable this, but it doesn't\n+    # work with static linking. -lmingwthrd must come BEFORE -lmingw, so\n+    # it is prepended to QMAKE_LIBS_QT_ENTRY.\n+    # It can be turned off with MINGW_THREAD_BUGFIX=0, just in case it causes\n+    # any problems on some untested qmake profile now or in the future.\n+    DEFINES += _MT\n+    QMAKE_LIBS_QT_ENTRY = -lmingwthrd $$QMAKE_LIBS_QT_ENTRY\n+}\n+\n+!win32:!macx {\n+    DEFINES += LINUX\n+    LIBS += -lrt\n+}\n+\n+macx:HEADERS += src/qt/macdockiconhandler.h\n+macx:OBJECTIVE_SOURCES += src/qt/macdockiconhandler.mm\n+macx:LIBS += -framework Foundation -framework ApplicationServices -framework AppKit\n+macx:DEFINES += MAC_OSX MSG_NOSIGNAL=0\n+macx:ICON = src/qt/res/icons/bitcoin.icns\n+macx:TARGET = \"Bitcoin-Qt\"\n+macx:QMAKE_CFLAGS_THREAD += -pthread\n+macx:QMAKE_LFLAGS_THREAD += -pthread\n+macx:QMAKE_CXXFLAGS_THREAD += -pthread\n+\n+# Set libraries and includes at end, to use platform-defined defaults if not overridden\n+INCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\n+LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\n+LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n+# -lgdi32 has to happen after -lcrypto (see  #681)\n+win32:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n+LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n+win32:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n+\n+contains(RELEASE, 1) {\n+    !win32:!macx {\n+        # Linux: turn dynamic linking back on for c/c++ runtime libraries\n+        LIBS += -Wl,-Bdynamic\n+    }\n+}\n+\n+system($$QMAKE_LRELEASE -silent $$_PRO_FILE_)"
      },
      {
        "sha": "8eaf042c6e46fe6e10be3a062c9dd5fe6463600c",
        "filename": "configure",
        "status": "added",
        "additions": 310,
        "deletions": 0,
        "changes": 310,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c92791df5c96128e03834a8a1a52c07c2164cf5/configure",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c92791df5c96128e03834a8a1a52c07c2164cf5/configure",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure?ref=4c92791df5c96128e03834a8a1a52c07c2164cf5",
        "patch": "@@ -0,0 +1,310 @@\n+#!/bin/bash\n+\n+INDENT=\"  \"\n+\n+QT_PRO=\"bitcoin-qt.pro\"\n+QT_PRO_TEMPLATE=\"$QT_PRO.temp\"\n+\n+function check_linux_details {\n+    DISTRIB_ID=`lsb_release -i 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    DESCRIPTION=`lsb_release -d 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    RELEASE=`lsb_release -r 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    CODENAME=`lsb_release -c 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+\n+    if [ \"${#DESCRIPTION}\" -eq \"0\" ]; then DESCRIPTION=`cat /etc/*-release 2>/dev/null` || DESCRIPTION=\"unknown\"; fi\n+    if [[ \"$DESCRIPTION\" =~ \"Gentoo\" ]]; then DISTRIB_ID=\"Gentoo\"; fi\n+}\n+\n+function check_linux_packages {\n+    case $DISTRIB_ID in\n+        Ubuntu)\n+            PACKAGEMGRCMD=\"sudo apt-get install\"\n+            BUILDREQ=\"build-essential\"\n+            BOOSTPKG=\"libboost-all-dev\"\n+            SSLPKG=\"libssl-dev\"\n+            BDBPKG=\"libdb4.8-dev libdb4.8++-dev\"\n+            if [[ $CODENAME == \"precise\" ]]\n+            then\n+                PREINSTALLCMDS=\"${INDENT}sudo apt-get install python-software-properties\\n${INDENT}sudo add-apt-repository ppa:bitcoin/bitcoin\\n${INDENT}sudo apt-get update\"\n+            fi\n+            UPNPPKG=\"libminiupnpc-dev\"\n+            ZLIBPKG=\"zlibc\"\n+            ;;\n+        Debian)\n+            PACKAGEMGRCMD=\"sudo apt-get install\"\n+            BUILDREQ=\"build-essential\"\n+            BOOSTPKG=\"libboost-all-dev\"\n+            SSLPKG=\"libssl-dev\"\n+            BDBPKG=\"libdb4.8-dev libdb4.8++-dev\"\n+            UPNPPKG=\"libminiupnpc-dev\"\n+            ZLIBPKG=\"zlib\"\n+            ;;\n+        Gentoo)\n+            PACKAGEMGRCMD=\"sudo emerge -av1 --noreplace\"\n+            BOOSTPKG=\"boost\"\n+            SSLPKG=\"openssl\"\n+            BDBPKG=\"sys-libs/db:4.8\"\n+            UPNPPKG=\"net-libs/miniupnpc\"\n+            ZLIBPKG=\"sys-libs/zlib\"\n+            ;;\n+    esac\n+}\n+\n+# TODO: Make the check granular down to distro and version\n+function check_system {\n+    [ \"$MACHINE\" ] || MACHINE=`(uname -m) 2>/dev/null` || MACHINE=\"unknown\"\n+    [ \"$SYSTEM\" ] || SYSTEM=`(uname -s) 2>/dev/null`  || SYSTEM=\"unknown\"\n+\n+# PREINSTALLCMDS are commands that must be issued prior to package installation.\n+    NEEDPREINSTALLCMDS=\"0\"\n+    PREINSTALLCMDS=''\n+\n+    case $SYSTEM in\n+        Linux)\n+            echo \"Linux detected.\"\n+            check_linux_details\n+            echo \"Distribution: $DESCRIPTION\"\n+\n+            SEDCMD=\"sed -i\"\n+            MAKEFILE=bitcoin-qt.pro\n+            CXX=g++\n+            DEPSDIR=\"/usr\"\n+            ESCDEPSDIR='\\/usr'\n+            LIBPATHS=\"-L/usr/lib\"\n+            BDB_LIB_SUFFIX=\n+            BOOST_LIB_SUFFIX=\n+            USE_UPNP=1\n+            check_linux_packages\n+            ;;\n+        Darwin)\n+            echo \"OS X detected.\"\n+\n+            RELEASE=`sw_vers | grep 'ProductVersion:' | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*'`\n+            echo \"Version: $RELEASE\"\n+\n+            `port search twig > /dev/null 2>&1` || echo \"WARNING: It appears you do not have MacPorts installed. You will need to install it to get any missing packages. (http://www.macports.org/)\"\n+            PACKAGEMGRCMD=\"sudo port install\"\n+            MAKEFILE=bitcoin-qt.pro\n+            CXX=llvm-g++\n+            DEPSDIR=\"/opt/local\"\n+            ESCDEPSDIR='\\/opt\\/local'\n+            LIBPATHS=\"-L$DEPSDIR/lib\"\n+            BDB_LIB_SUFFIX=-4.8\n+            BOOST_LIB_SUFFIX=-mt\n+            USE_UPNP=1\n+            SEDCMD=\"sed -i .bak\"\n+            BUILDREQ=\n+            BOOSTPKG=\"boost\"\n+            SSLPKG=\"openssl\"\n+            BDBPKG=\"db48\"\n+            UPNPPKG=\"miniupnpc\"\n+            ZLIBPKG=\"zlib\"\n+            ;;\n+        *)\n+            echo \"Unrecognized system.\"\n+            error_exit 1\n+            ;;\n+    esac\n+}\n+\n+function success_exit {\n+    echo\n+    echo \"Configuration successful!\"\n+    echo \"Run qmake to create Makefile.\"\n+    echo\n+    exit 0\n+}\n+\n+function error_exit {\n+    echo\n+    echo \"Please fix errors and then run configure again.\"\n+    echo\n+    exit $1\n+}\n+\n+function missing_pkgs_help {\n+    echo\n+    echo \"You're missing some packages.\"\n+    if [ \"${#PACKAGEMGRCMD}\" -eq \"0\" ]; then return; fi\n+    OLDIFS=\"$IFS\"; IFS=$'\\n'\n+    PKGS=(`for pkg in \"${MISSINGPKGS[@]}\"; do echo \"$pkg\"; done | sort -du`)\n+    IFS=\"$OLDIFS\"\n+    INSTALLCMD=\"$PACKAGEMGRCMD\"\n+    for pkg in \"${PKGS[@]}\"; do INSTALLCMD+=\" \\$$pkg\"; done\n+    echo\n+    echo \"To install the packages, run the following command(s):\"\n+    if [[ \"$NEEDPREINSTALLCMDS\" -eq \"1\" ]] && [[ -n \"$PREINSTALLCMDS\" ]]; then echo -e \"${PREINSTALLCMDS}\"; fi\n+    echo -ne \"$INDENT\"\n+    eval echo \"$INSTALLCMD\"\n+}\n+\n+function check_headers {\n+    echo \"#include <iostream>\" > __h_test.cpp\n+    CXXPROG=\"int main() { std::cout\"\n+    i=0;\n+    for var; do\n+        case $i in\n+            0) INCS=$var; i=1; j=1;;\n+            1) ((j++)); if [ \"$var\" == \"v\" ]; then i=2; else echo \"#include <$var>\" >> __h_test.cpp; fi;;\n+            2) CXXPROG=\"$CXXPROG << $var << std::endl\";;\n+        esac\n+    done\n+    CXXPROG=\"$CXXPROG; return 0; }\"\n+    echo \"$CXXPROG\" >> __h_test.cpp\n+    `$CXX -o __h_test __h_test.cpp $INCS > /dev/null 2>&1` || return 1\n+    local OLDIFS=\"$IFS\"; IFS=$'\\n'; vers=( $(./__h_test) ); IFS=\"$OLDIFS\"\n+    rm __h_test.cpp __h_test\n+    i=1; for ver in \"${vers[@]}\"; do k=$(($i+$j)); eval local _lver=\\$$k; local lver=\"$ver\"; eval $_lver=\"'$lver'\"; ((i++)); done\n+    return 0\n+}\n+\n+function check_lib {\n+    local LPATHS=''\n+    local LIBS=''\n+    local i=0\n+    for var; do\n+        if [ \"$var\" == \"l\" ]; then i=1; continue; fi\n+        case $i in\n+            0) LPATHS+=\"$var \";;\n+            1) LIBS+=\"$var \";;\n+        esac\n+    done\n+    echo -ne \"    $LIBS: \"\n+    echo \"int main() { return 0; }\" > __deptest.cpp\n+    `$CXX -o __deptest __deptest.cpp $LPATHS $LIBS > /dev/null 2>&1` || { rm __deptest.cpp; echo \"<---- NOT FOUND\"; return 1; }\n+    rm __deptest.cpp __deptest\n+    echo \"OK\"\n+    return 0\n+}\n+\n+function check_bdb_dir {\n+    # try each version starting with the most recent\n+    BDB_DIRS=(db51 db5.1 db50 db5.0 db49 db4.9 db48 db4.8 db47 db4.7 db46 db4.6)\n+    for dir in \"${BDB_DIRS[@]}\"\n+    do\n+        if [ ! -d \"$DEPSDIR/include/$dir\" ]; then continue; fi\n+        BDB_DIR=\"$dir\"\n+        return 0\n+    done\n+    return 1\n+}\n+\n+function create_qtprofile {\n+    echo \"USE_UPNP=$USE_UPNP\" > \"$QT_PRO\"\n+    if [[ \"${#BDB_INCLUDE_PATH}\" -ne 0 ]]; then echo \"BDB_INCLUDE_PATH=$BDB_INCLUDE_PATH\" >> \"$QT_PRO\"; fi\n+    cat \"$QT_PRO_TEMPLATE\" >> \"$QT_PRO\"\n+    echo \"done.\"\n+}\n+\n+###############################\n+#\n+# MAIN SCRIPT BEGINS HERE\n+#\n+echo\n+echo -ne \"Detecting system...\"\n+check_system\n+\n+MISSINGPKGS=()\n+\n+#\n+# LIBRARY DEPENDENCIES\n+#\n+echo\n+echo \"Searching for libraries...\"\n+\n+echo \"  Boost:\"\n+if ! check_lib $LIBPATHS l -lboost_system$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_filesystem$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_program_options$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_thread$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_regex$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+\n+echo \"  OpenSSL:\"\n+if ! check_lib $LIBPATHS l -lssl; then MISSINGPKGS+=(\"SSLPKG\"); fi\n+if ! check_lib $LIBPATHS l -lcrypto; then MISSINGPKGS+=(\"SSLPKG\"); fi\n+\n+echo \"  BDB:\"\n+if check_bdb_dir; then LIBPATHS=\"$LIBPATHS $LIBPATHS/$BDB_DIR\"; BDB_INCLUDE_PATH=\"$DEPSDIR/include/$BDB_DIR\"; fi\n+if ! check_lib $LIBPATHS l -ldb_cxx$BDB_LIB_SUFFIX; then MISSINGPKGS+=(\"BDBPKG\"); fi\n+\n+echo \"  zlib:\"\n+if ! check_lib $LIBPATHS l -lz; then MISSINGPKGS+=(\"ZLIBPKG\"); fi\n+\n+echo \"  UPNP:\"\n+if ! check_lib $LIBPATHS l -lminiupnpc; then USE_UPNP=-; fi\n+\n+#\n+# HEADER DEPENDENCIES\n+#\n+echo\n+echo \"Searching for headers...\"\n+\n+#Boost\n+# a full list of headers used in project can be obtained with the following command:\n+#  { HEADERS=(`grep \"#include <boost\" * -r -n | sed -e \"s/^.*<\\(boost[^>]*\\).*$/\\\\1/g\" | sort -du`); for header in \"${HEADERS[@]}\"; do echo -ne \" $header\"; done; echo; }\n+BOOSTHEADERS=\"boost/version.hpp\"\n+echo -ne \"  Boost: \"\n+if ! check_headers -I$DEPSDIR/include $BOOSTHEADERS v BOOST_LIB_VERSION BOOST_VERSION\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"BOOSTPKG\")\n+else\n+    echo \"$BOOST_LIB_VERSION\"\n+fi\n+\n+#OpenSSL\n+echo -ne \"  OpenSSL: \"\n+if ! check_headers -I$DEPSDIR/include openssl/opensslv.h v OPENSSL_VERSION_TEXT OPENSSL_VERSION_NUMBER\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"SSLPKG\")\n+else\n+    echo \"$OPENSSL_VERSION_TEXT\"\n+fi\n+\n+#Berkeley DB\n+echo -ne \"  BDB: \"\n+if ! check_headers -I$DEPSDIR/include/$BDB_DIR db.h v DB_VERSION_MAJOR DB_VERSION_MINOR DB_VERSION_PATCH DB_VERSION_STRING\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"BDBPKG\")\n+    NEEDPREINSTALLCMDS=\"1\";\n+else\n+    DB_VERSION_INT=$((DB_VERSION_MAJOR*256*256 + DB_VERSION_MINOR*256 + DB_VERSION_PATCH))\n+    echo \"$DB_VERSION_STRING\"\n+# less than version 4.8 \n+    if [ \"$DB_VERSION_INT\" -lt \"264192\" ]; then echo \"   - ERROR: You need BDB version 4.8 or higher.\"; MISSINGPKGS+=(\"BDBPKG\"); NEEDPREINSTALLCMDS=\"1\"; fi\n+# version 4.9 or greater\n+    if [ \"$DB_VERSION_INT\" -ge \"264448\" ]; then echo \"   - WARNING: Wallets might not be compatible with other clients. BDB version 4.8 is recommended.\"; fi\n+fi\n+\n+#zlib\n+echo -ne \"  zlib: \"\n+if ! check_headers -I$DEPSDIR/include zlib.h v ZLIB_VERNUM ZLIB_VERSION\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"ZLIBPKG\")\n+else\n+    echo \"$ZLIB_VERSION\"\n+fi\n+\n+#miniupnpc\n+echo -ne \"  miniupnpc: \"\n+if ! check_headers -I$DEPSDIR/include miniupnpc/miniupnpc.h\n+then\n+    echo \"<---- NOT FOUND\"\n+    USE_UPNP=-\n+else\n+    echo \"Found\"\n+fi\n+\n+if [[ ${#MISSINGPKGS[@]} -ne 0 ]]; then { missing_pkgs_help; error_exit 1; }; fi\n+\n+echo\n+if [[ \"$USE_UPNP\" == \"1\" ]]; then echo \"miniupnpc enabled.\"; else echo \"miniupnpc disabled.\"; fi\n+\n+echo\n+echo -ne \"Creating qt project file...\"\n+create_qtprofile\n+\n+success_exit"
      },
      {
        "sha": "cb5e7ceb147674366aa26a1f5c683acded08e6e3",
        "filename": "src/configure",
        "status": "added",
        "additions": 307,
        "deletions": 0,
        "changes": 307,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c92791df5c96128e03834a8a1a52c07c2164cf5/src/configure",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c92791df5c96128e03834a8a1a52c07c2164cf5/src/configure",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/configure?ref=4c92791df5c96128e03834a8a1a52c07c2164cf5",
        "patch": "@@ -0,0 +1,307 @@\n+#!/bin/bash\n+\n+INDENT=\"  \"\n+\n+function check_linux_details {\n+    DISTRIB_ID=`lsb_release -i 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    DESCRIPTION=`lsb_release -d 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    RELEASE=`lsb_release -r 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+    CODENAME=`lsb_release -c 2>/dev/null | sed -e \"s/^.*:\\s//g\"`\n+\n+    if [ \"${#DESCRIPTION}\" -eq \"0\" ]; then DESCRIPTION=`cat /etc/*-release 2>/dev/null` || DESCRIPTION=\"unknown\"; fi\n+    if [[ \"$DESCRIPTION\" =~ \"Gentoo\" ]]; then DISTRIB_ID=\"Gentoo\"; fi\n+}\n+\n+function check_linux_packages {\n+    case $DISTRIB_ID in\n+        Ubuntu)\n+            PACKAGEMGRCMD=\"sudo apt-get install\"\n+            BUILDREQ=\"build-essential\"\n+            BOOSTPKG=\"libboost-all-dev\"\n+            SSLPKG=\"libssl-dev\"\n+            BDBPKG=\"libdb4.8-dev libdb4.8++-dev\"\n+            if [[ $CODENAME == \"precise\" ]]\n+            then\n+                PREINSTALLCMDS=\"${INDENT}sudo apt-get install python-software-properties\\n${INDENT}sudo add-apt-repository ppa:bitcoin/bitcoin\\n${INDENT}sudo apt-get update\"\n+            fi\n+            UPNPPKG=\"libminiupnpc-dev\"\n+            ZLIBPKG=\"zlibc\"\n+            ;;\n+        Debian)\n+            PACKAGEMGRCMD=\"sudo apt-get install\"\n+            BUILDREQ=\"build-essential\"\n+            BOOSTPKG=\"libboost-all-dev\"\n+            SSLPKG=\"libssl-dev\"\n+            BDBPKG=\"libdb4.8-dev libdb4.8++-dev\"\n+            UPNPPKG=\"libminiupnpc-dev\"\n+            ZLIBPKG=\"zlib\"\n+            ;;\n+        Gentoo)\n+            PACKAGEMGRCMD=\"sudo emerge -av1 --noreplace\"\n+            BOOSTPKG=\"boost\"\n+            SSLPKG=\"openssl\"\n+            BDBPKG=\"sys-libs/db:4.8\"\n+            UPNPPKG=\"net-libs/miniupnpc\"\n+            ZLIBPKG=\"sys-libs/zlib\"\n+            ;;\n+    esac\n+}\n+\n+# TODO: Make the check granular down to distro and version\n+function check_system {\n+    [ \"$MACHINE\" ] || MACHINE=`(uname -m) 2>/dev/null` || MACHINE=\"unknown\"\n+    [ \"$SYSTEM\" ] || SYSTEM=`(uname -s) 2>/dev/null`  || SYSTEM=\"unknown\"\n+\n+# PREINSTALLCMDS are commands that must be issued prior to package installation.\n+    NEEDPREINSTALLCMDS=\"0\"\n+    PREINSTALLCMDS=''\n+\n+    case $SYSTEM in\n+        Linux)\n+            echo \"Linux detected.\"\n+            check_linux_details\n+            echo \"Distribution: $DESCRIPTION\"\n+\n+            SEDCMD=\"sed -i\"\n+            MAKEFILE=makefile.unix\n+            CXX=g++\n+            DEPSDIR=\"/usr\"\n+            ESCDEPSDIR='\\/usr'\n+            LIBPATHS=\"-L/usr/lib\"\n+            BDB_LIB_SUFFIX=\n+            BOOST_LIB_SUFFIX=\n+            USE_UPNP=1\n+            check_linux_packages\n+            ;;\n+        Darwin)\n+            echo \"OS X detected.\"\n+\n+            RELEASE=`sw_vers | grep 'ProductVersion:' | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*'`\n+            echo \"Version: $RELEASE\"\n+\n+            `port search twig > /dev/null 2>&1` || echo \"WARNING: It appears you do not have MacPorts installed. You will need to install it to get any missing packages. (http://www.macports.org/)\"\n+            PACKAGEMGRCMD=\"sudo port install\"\n+            MAKEFILE=makefile.osx\n+            CXX=llvm-g++\n+            DEPSDIR=\"/opt/local\"\n+            ESCDEPSDIR='\\/opt\\/local'\n+            LIBPATHS=\"-L$DEPSDIR/lib\"\n+            BDB_LIB_SUFFIX=-4.8\n+            BOOST_LIB_SUFFIX=-mt\n+            USE_UPNP=1\n+            SEDCMD=\"sed -i .bak\"\n+            BUILDREQ=\n+            BOOSTPKG=\"boost\"\n+            SSLPKG=\"openssl\"\n+            BDBPKG=\"db48\"\n+            UPNPPKG=\"miniupnpc\"\n+            ZLIBPKG=\"zlib\"\n+            ;;\n+        *)\n+            echo \"Unrecognized system.\"\n+            error_exit 1\n+            ;;\n+    esac\n+}\n+\n+function success_exit {\n+    echo\n+    echo \"Configuration successful!\"\n+    echo \"Run make to build.\"\n+    echo\n+    exit 0\n+}\n+\n+function error_exit {\n+    echo\n+    echo \"Please fix errors and then run configure again.\"\n+    echo\n+    exit $1\n+}\n+\n+function missing_pkgs_help {\n+    echo\n+    echo \"You're missing some packages.\"\n+    if [ \"${#PACKAGEMGRCMD}\" -eq \"0\" ]; then return; fi\n+    OLDIFS=\"$IFS\"; IFS=$'\\n'\n+    PKGS=(`for pkg in \"${MISSINGPKGS[@]}\"; do echo \"$pkg\"; done | sort -du`)\n+    IFS=\"$OLDIFS\"\n+    INSTALLCMD=\"$PACKAGEMGRCMD\"\n+    for pkg in \"${PKGS[@]}\"; do INSTALLCMD+=\" \\$$pkg\"; done\n+    echo\n+    echo \"To install the packages, run the following command(s):\"\n+    if [[ \"$NEEDPREINSTALLCMDS\" -eq \"1\" ]] && [[ -n \"$PREINSTALLCMDS\" ]]; then echo -e \"${PREINSTALLCMDS}\"; fi\n+    echo -ne \"$INDENT\"\n+    eval echo \"$INSTALLCMD\"\n+}\n+\n+function check_headers {\n+    echo \"#include <iostream>\" > __h_test.cpp\n+    CXXPROG=\"int main() { std::cout\"\n+    i=0;\n+    for var; do\n+        case $i in\n+            0) INCS=$var; i=1; j=1;;\n+            1) ((j++)); if [ \"$var\" == \"v\" ]; then i=2; else echo \"#include <$var>\" >> __h_test.cpp; fi;;\n+            2) CXXPROG=\"$CXXPROG << $var << std::endl\";;\n+        esac\n+    done\n+    CXXPROG=\"$CXXPROG; return 0; }\"\n+    echo \"$CXXPROG\" >> __h_test.cpp\n+    `$CXX -o __h_test __h_test.cpp $INCS > /dev/null 2>&1` || return 1\n+    local OLDIFS=\"$IFS\"; IFS=$'\\n'; vers=( $(./__h_test) ); IFS=\"$OLDIFS\"\n+    rm __h_test.cpp __h_test\n+    i=1; for ver in \"${vers[@]}\"; do k=$(($i+$j)); eval local _lver=\\$$k; local lver=\"$ver\"; eval $_lver=\"'$lver'\"; ((i++)); done\n+    return 0\n+}\n+\n+function check_lib {\n+    local LPATHS=''\n+    local LIBS=''\n+    local i=0\n+    for var; do\n+        if [ \"$var\" == \"l\" ]; then i=1; continue; fi\n+        case $i in\n+            0) LPATHS+=\"$var \";;\n+            1) LIBS+=\"$var \";;\n+        esac\n+    done\n+    echo -ne \"    $LIBS: \"\n+    echo \"int main() { return 0; }\" > __deptest.cpp\n+    `$CXX -o __deptest __deptest.cpp $LPATHS $LIBS > /dev/null 2>&1` || { rm __deptest.cpp; echo \"<---- NOT FOUND\"; return 1; }\n+    rm __deptest.cpp __deptest\n+    echo \"OK\"\n+    return 0\n+}\n+\n+function check_bdb_dir {\n+    # try each version starting with the most recent\n+    BDB_DIRS=(db51 db5.1 db50 db5.0 db49 db4.9 db48 db4.8 db47 db4.7 db46 db4.6)\n+    for dir in \"${BDB_DIRS[@]}\"\n+    do\n+        if [ ! -d \"$DEPSDIR/include/$dir\" ]; then continue; fi\n+        BDB_DIR=\"$dir\"\n+        return 0\n+    done\n+    return 1\n+}\n+\n+function create_makefile {\n+    cp $MAKEFILE Makefile\n+    eval \"$SEDCMD s/^USE_UPNP:=.$/USE_UPNP:=$USE_UPNP/g Makefile\"\n+    if [ -n \"$BDB_DIR\" ]; then eval \"$SEDCMD \\\"s/^DEFS=\\(.*\\)$/DEFS=-I$ESCDEPSDIR\\/include\\/$BDB_DIR \\1/g\\\" Makefile\"; fi\n+    echo \"done.\"\n+}\n+\n+###############################\n+#\n+# MAIN SCRIPT BEGINS HERE\n+#\n+echo\n+echo -ne \"Detecting system...\"\n+check_system\n+\n+MISSINGPKGS=()\n+\n+#\n+# LIBRARY DEPENDENCIES\n+#\n+echo\n+echo \"Searching for libraries...\"\n+\n+echo \"  Boost:\"\n+if ! check_lib $LIBPATHS l -lboost_system$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_filesystem$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_program_options$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_thread$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+if ! check_lib $LIBPATHS l -lboost_regex$BOOST_LIB_SUFFIX; then MISSINGPKGS+=(\"BOOSTPKG\"); fi\n+\n+echo \"  OpenSSL:\"\n+if ! check_lib $LIBPATHS l -lssl; then MISSINGPKGS+=(\"SSLPKG\"); fi\n+if ! check_lib $LIBPATHS l -lcrypto; then MISSINGPKGS+=(\"SSLPKG\"); fi\n+\n+echo \"  BDB:\"\n+if check_bdb_dir; then LIBPATHS=\"$LIBPATHS $LIBPATHS/$BDB_DIR\"; fi\n+if ! check_lib $LIBPATHS l -ldb_cxx$BDB_LIB_SUFFIX; then MISSINGPKGS+=(\"BDBPKG\"); NEEDPREINSTALLCMDS=\"1\"; fi\n+\n+echo \"  zlib:\"\n+if ! check_lib $LIBPATHS l -lz; then MISSINGPKGS+=(\"ZLIBPKG\"); fi\n+\n+echo \"  UPNP:\"\n+if ! check_lib $LIBPATHS l -lminiupnpc; then USE_UPNP=-; fi\n+\n+#\n+# HEADER DEPENDENCIES\n+#\n+echo\n+echo \"Searching for headers...\"\n+\n+#Boost\n+# a full list of headers used in project can be obtained with the following command:\n+#  { HEADERS=(`grep \"#include <boost\" * -r -n | sed -e \"s/^.*<\\(boost[^>]*\\).*$/\\\\1/g\" | sort -du`); for header in \"${HEADERS[@]}\"; do echo -ne \" $header\"; done; echo; }\n+BOOSTHEADERS=\"boost/version.hpp\"\n+echo -ne \"  Boost: \"\n+if ! check_headers -I$DEPSDIR/include $BOOSTHEADERS v BOOST_LIB_VERSION BOOST_VERSION\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"BOOSTPKG\")\n+else\n+    echo \"$BOOST_LIB_VERSION\"\n+fi\n+\n+#OpenSSL\n+echo -ne \"  OpenSSL: \"\n+if ! check_headers -I$DEPSDIR/include openssl/opensslv.h v OPENSSL_VERSION_TEXT OPENSSL_VERSION_NUMBER\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"SSLPKG\")\n+else\n+    echo \"$OPENSSL_VERSION_TEXT\"\n+fi\n+\n+#Berkeley DB\n+echo -ne \"  BDB: \"\n+if ! check_headers -I$DEPSDIR/include/$BDB_DIR db.h v DB_VERSION_MAJOR DB_VERSION_MINOR DB_VERSION_PATCH DB_VERSION_STRING\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"BDBPKG\")\n+    NEEDPREINSTALLCMDS=\"1\"\n+else\n+    DB_VERSION_INT=$((DB_VERSION_MAJOR*256*256 + DB_VERSION_MINOR*256 + DB_VERSION_PATCH))\n+    echo \"$DB_VERSION_STRING\"\n+# less than version 4.8\n+    if [ \"$DB_VERSION_INT\" -lt \"264192\" ]; then echo \"   - ERROR: You need BDB version 4.8 or higher.\"; MISSINGPKGS+=(\"BDBPKG\"); NEEDPREINSTALLCMDS=\"1\"; fi\n+# version 4.9 or greater\n+    if [ \"$DB_VERSION_INT\" -ge \"264448\" ]; then echo \"   - WARNING: Wallets might not be compatible with other clients. BDB version 4.8 is recommended.\"; fi\n+fi\n+\n+#zlib\n+echo -ne \"  zlib: \"\n+if ! check_headers -I$DEPSDIR/include zlib.h v ZLIB_VERNUM ZLIB_VERSION\n+then\n+    echo \"<---- NOT FOUND\"\n+    MISSINGPKGS+=(\"ZLIBPKG\")\n+else\n+    echo \"$ZLIB_VERSION\"\n+fi\n+\n+#miniupnpc\n+echo -ne \"  miniupnpc: \"\n+if ! check_headers -I$DEPSDIR/include miniupnpc/miniupnpc.h\n+then\n+    echo \"<---- NOT FOUND\"\n+    USE_UPNP=-\n+else\n+    echo \"Found\"\n+fi\n+\n+if [[ ${#MISSINGPKGS[@]} -ne 0 ]]; then { missing_pkgs_help; error_exit 1; }; fi\n+\n+echo\n+if [[ \"$USE_UPNP\" == \"1\" ]]; then echo \"miniupnpc enabled.\"; else echo \"miniupnpc disabled.\"; fi\n+\n+echo\n+echo -ne \"Creating Makefile...\"\n+create_makefile\n+\n+success_exit"
      }
    ]
  }
]