[
  {
    "sha": "bbdf5d2971daf00c0355526177c568937149b61c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmRmNWQyOTcxZGFmMDBjMDM1NTUyNjE3N2M1Njg5MzcxNDliNjFj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T04:00:21Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T04:00:21Z"
      },
      "message": "BIP 102 implementation",
      "tree": {
        "sha": "96e6faeb5791adcb60fe879266f3db3361a0c82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96e6faeb5791adcb60fe879266f3db3361a0c82d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbdf5d2971daf00c0355526177c568937149b61c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdf5d2971daf00c0355526177c568937149b61c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbdf5d2971daf00c0355526177c568937149b61c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdf5d2971daf00c0355526177c568937149b61c/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd3f12c61ca59df067444a228ddd49241d65c3e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3f12c61ca59df067444a228ddd49241d65c3e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3f12c61ca59df067444a228ddd49241d65c3e4"
      }
    ],
    "stats": {
      "total": 187,
      "additions": 166,
      "deletions": 21
    },
    "files": [
      {
        "sha": "456c534bcd4d774e00fc58ba2e186dc10b396351",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -43,6 +43,7 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n+  test/block_size_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\"
      },
      {
        "sha": "0dd5a688431c579ffa954d4d0e0b09d25f79c080",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -191,7 +191,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MaxBlockSize(std::numeric_limits<uint64_t>::max())/ minTxOutSz;\n \n     // extract and validate vout\n     string strVout = strInput.substr(pos + 1, string::npos);"
      },
      {
        "sha": "8df965c869e85f980f34a26f55c966a26ebaac93",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -6,10 +6,30 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdint.h>\n+\n+static const uint64_t BIP102_FORK_TIME = 1462406400; // May 5 2016, midnight UTC\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+inline unsigned int MaxBlockSize(uint64_t nTime) {\n+    if (nTime < BIP102_FORK_TIME)\n+        return 1000*1000;\n+\n+    // cap for tests\n+    if (nTime > 4113158400)\n+        nTime = 4113158400;\n+\n+    return (2*1000*1000) + (20 * ((nTime - BIP102_FORK_TIME) / 600));\n+}\n+\n+/** The maximum allowed size for a serialized transaction, in bytes */\n+static const unsigned int MAX_TRANSACTION_SIZE = 1000*1000;\n+\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+inline unsigned int MaxBlockSigops(uint64_t nTime) {\n+    return MaxBlockSize(nTime) / 50;\n+}\n+\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "4857115738be2825f80e504a4fb9a098a2aaf13f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -749,7 +749,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_TRANSACTION_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -958,7 +958,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+        // MaxBlockSigops; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n@@ -2068,6 +2068,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    bool fBIP102Enforcing = (pindex->GetBlockTime() >= (int64_t)BIP102_FORK_TIME);\n+    if (fBIP102Enforcing && block.nVersion >= 5 && !IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityRejectBlockOutdated, chainparams.GetConsensus()))\n+        fBIP102Enforcing = false;\n+\n+    // TODO\n+    (void) fBIP102Enforcing;\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n \n@@ -2088,7 +2095,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n+        if (nSigOps > MaxBlockSigops(pindex->nHeight))\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -2104,7 +2111,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n+                if (nSigOps > MaxBlockSigops(pindex->nHeight))\n                     return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n@@ -2978,7 +2985,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // because we receive the wrong transactions for it.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    unsigned int nMaxSize = MaxBlockSize(block.GetBlockTime());\n+    if (block.vtx.empty() || block.vtx.size() > nMaxSize || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > nMaxSize)\n         return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n@@ -3003,7 +3011,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps > MaxBlockSigops(std::numeric_limits<unsigned int>::max()))\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n@@ -3055,6 +3063,11 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n \n+    // Reject block.nVersion=4 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 5 && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n     return true;\n }\n \n@@ -3729,7 +3742,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        unsigned int nAbsoluteMaxBlockSize = MaxBlockSize(std::numeric_limits<uint64_t>::max());\n+        CBufferedFile blkdat(fileIn, 2*nAbsoluteMaxBlockSize, nAbsoluteMaxBlockSize+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -3748,7 +3762,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > nAbsoluteMaxBlockSize)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      },
      {
        "sha": "fd84196d1ef8e23d8edb66b6693b7c6099bf5778",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -153,7 +153,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MaxBlockSize(std::numeric_limits<uint64_t>::max()) / 60) // 60 is the lower bound for the size of a serialized CTransaction\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "dc4364baba945ec015db8510d2a077f90b085f92",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -99,7 +99,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     // Largest block you're willing to create:\n     unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n     // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+    unsigned int nAbsMaxSize = MaxBlockSize(std::numeric_limits<uint64_t>::max());\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(nAbsMaxSize-1000), nBlockMaxSize));\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n@@ -136,6 +137,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+        nBlockMaxSize = std::min(nBlockMaxSize, MaxBlockSize(pblock->nTime));\n \n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n@@ -224,8 +226,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n \n             unsigned int nTxSigOps = iter->GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n-                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+            unsigned int maxSigOps = MaxBlockSigops(pblock->nTime);\n+            if (nBlockSigOps + nTxSigOps >= maxSigOps) {\n+                if (nBlockSigOps > maxSigOps - 2) {\n                     break;\n                 }\n                 continue;"
      },
      {
        "sha": "1a2b39f0a3ab45ea55ae9bbffd470f31878ed97c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -2124,7 +2124,7 @@ void CNode::RecordBytesSent(uint64_t bytes)\n void CNode::SetMaxOutboundTarget(uint64_t limit)\n {\n     LOCK(cs_totalBytesSent);\n-    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * (1*1000*1000);\n     nMaxOutboundLimit = limit;\n \n     if (limit > 0 && limit < recommendedMinimum)\n@@ -2179,7 +2179,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n     {\n         // keep a large enought buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n-        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        uint64_t buffer = timeLeftInCycle / 600 * (1*1000*1000);\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n             return true;\n     }"
      },
      {
        "sha": "dc499ff1739f073d49d67fdb630877775230e418",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -24,7 +24,7 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = 4000;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**"
      },
      {
        "sha": "711bedc488450d68e68071a3a5c4bdd662b71cb6",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -21,7 +21,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=4;\n+    static const int32_t CURRENT_VERSION=5;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "92094e31de916b7b3a42b1cc793a87e2b71b6d06",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -581,8 +581,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+    result.push_back(Pair(\"sigoplimit\", (int64_t)MaxBlockSigops(pblock->nTime)));\n+    result.push_back(Pair(\"sizelimit\", (int64_t)MaxBlockSize(pblock->nTime)));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "306d8e2cf3b29ac44dda84c1bdf2204e4d531fb5",
        "filename": "src/test/block_size_tests.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdf5d2971daf00c0355526177c568937149b61c/src/test/block_size_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdf5d2971daf00c0355526177c568937149b61c/src/test/block_size_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_size_tests.cpp?ref=bbdf5d2971daf00c0355526177c568937149b61c",
        "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(block_size_tests, TestingSetup)\n+\n+// Fill block with dummy transactions until it's serialized size is exactly nSize\n+static void\n+FillBlock(CBlock& block, unsigned int nSize)\n+{\n+    assert(block.vtx.size() > 0); // Start with at least a coinbase\n+\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    if (nBlockSize > nSize) {\n+        block.vtx.resize(1); // passed in block is too big, start with just coinbase\n+        nBlockSize = ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    }\n+\n+    // Create a block that is exactly 1,000,000 bytes, serialized:\n+    CMutableTransaction tx;\n+    tx.vin.resize(1);\n+    tx.vin[0].scriptSig = CScript() << OP_11;\n+    tx.vin[0].prevout.hash = block.vtx[0].GetHash(); // passes CheckBlock, would fail if we checked inputs.\n+    tx.vin[0].prevout.n = 0;\n+    tx.vout.resize(1);\n+    tx.vout[0].nValue = 1LL;\n+    tx.vout[0].scriptPubKey = block.vtx[0].vout[0].scriptPubKey;\n+\n+    unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    uint256 txhash = tx.GetHash();\n+\n+    // ... add copies of tx to the block to get close to 1MB:\n+    while (nBlockSize+nTxSize < nSize) {\n+        block.vtx.push_back(tx);\n+        nBlockSize += nTxSize;\n+        tx.vin[0].prevout.hash = txhash; // ... just to make each transaction unique\n+        txhash = tx.GetHash();\n+    }\n+    // Make the last transaction exactly the right size by making the scriptSig bigger.\n+    block.vtx.pop_back();\n+    nBlockSize = ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    unsigned int nFill = nSize - nBlockSize - nTxSize;\n+    for (unsigned int i = 0; i < nFill; i++)\n+        tx.vin[0].scriptSig << OP_11;\n+    block.vtx.push_back(tx);\n+    nBlockSize = ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    assert(nBlockSize == nSize);\n+}\n+\n+static bool TestCheckBlock(CBlock& block, uint64_t nTime, unsigned int nSize)\n+{\n+    SetMockTime(nTime);\n+    block.nTime = nTime;\n+    FillBlock(block, nSize);\n+    CValidationState validationState;\n+    bool fResult = CheckBlock(block, validationState, false, false) && validationState.IsValid();\n+    SetMockTime(0);\n+    return fResult;\n+}\n+\n+//\n+// Unit test CheckBlock() for conditions around the block size hard fork\n+//\n+BOOST_AUTO_TEST_CASE(TwoMegFork)\n+{\n+    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    CBlockTemplate *pblocktemplate;\n+\n+    LOCK(cs_main);\n+\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n+    CBlock *pblock = &pblocktemplate->block;\n+\n+    // Before fork time...\n+    BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME-1, 1000*1000)); // 1MB : valid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, BIP102_FORK_TIME-1, 1000*1000+1)); // >1MB : invalid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, BIP102_FORK_TIME-1, 2*1000*1000)); // 2MB : invalid\n+\n+    // Exactly at fork time...\n+    BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME, 1000*1000)); // 1MB : valid\n+    BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME, 2*1000*1000)); // 2MB : valid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, BIP102_FORK_TIME, 2*1000*1000+1)); // >2MB : invalid\n+\n+    // Fork height + 10 min...\n+    BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME+600, 2*1000*1000+20)); // 2MB+20 : valid\n+\n+    // A year after fork time:\n+    unsigned int yearAfter = BIP102_FORK_TIME+(365 * 144);\n+    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 1000*1000)); // 1MB : valid\n+    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 2*1000*1000)); // 20MB : valid\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "9e2d59ae11edec7060a1ff076285e63061e703e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTJkNTlhZTExZWRlYzcwNjBhMWZmMDc2Mjg1ZTYzMDYxZTcwM2U1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T04:18:29Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T04:18:29Z"
      },
      "message": "BIP 102: Fix ISM, test.",
      "tree": {
        "sha": "ae6cd0f00fa6b4130890d6598cc7fac3a6e3aaad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae6cd0f00fa6b4130890d6598cc7fac3a6e3aaad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e2d59ae11edec7060a1ff076285e63061e703e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2d59ae11edec7060a1ff076285e63061e703e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2d59ae11edec7060a1ff076285e63061e703e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2d59ae11edec7060a1ff076285e63061e703e5/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbdf5d2971daf00c0355526177c568937149b61c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdf5d2971daf00c0355526177c568937149b61c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbdf5d2971daf00c0355526177c568937149b61c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e8124911fd2453b9347af5d365e05c92c743360e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2d59ae11edec7060a1ff076285e63061e703e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2d59ae11edec7060a1ff076285e63061e703e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9e2d59ae11edec7060a1ff076285e63061e703e5",
        "patch": "@@ -2069,7 +2069,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     bool fBIP102Enforcing = (pindex->GetBlockTime() >= (int64_t)BIP102_FORK_TIME);\n-    if (fBIP102Enforcing && block.nVersion >= 5 && !IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityRejectBlockOutdated, chainparams.GetConsensus()))\n+    if (fBIP102Enforcing && block.nVersion >= 5 && !IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus()))\n         fBIP102Enforcing = false;\n \n     // TODO"
      },
      {
        "sha": "60dd1759f371a622d9490d8088faa324dc6fa632",
        "filename": "src/test/block_size_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2d59ae11edec7060a1ff076285e63061e703e5/src/test/block_size_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2d59ae11edec7060a1ff076285e63061e703e5/src/test/block_size_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_size_tests.cpp?ref=9e2d59ae11edec7060a1ff076285e63061e703e5",
        "patch": "@@ -99,9 +99,11 @@ BOOST_AUTO_TEST_CASE(TwoMegFork)\n     BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME+600, 2*1000*1000+20)); // 2MB+20 : valid\n \n     // A year after fork time:\n-    unsigned int yearAfter = BIP102_FORK_TIME+(365 * 144);\n+    unsigned int yearAfter = BIP102_FORK_TIME + (365 * 24 * 60 * 60);\n     BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 1000*1000)); // 1MB : valid\n-    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 2*1000*1000)); // 20MB : valid\n+    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 2*1000*1000)); // 2MB : valid\n+    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 3*1000*1000)); // 3MB : valid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, yearAfter, 4*1000*1000)); // 4MB : invalid\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ee061f4b70de2cd3259286e748983ecb46c2e0c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTA2MWY0YjcwZGUyY2QzMjU5Mjg2ZTc0ODk4M2VjYjQ2YzJlMGMy",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T13:07:59Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T13:07:59Z"
      },
      "message": "BIP 102: revert back to fixed, one time bump",
      "tree": {
        "sha": "d70673c762f1a6a9f4c013a3b3fe73f88a793b8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d70673c762f1a6a9f4c013a3b3fe73f88a793b8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee061f4b70de2cd3259286e748983ecb46c2e0c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee061f4b70de2cd3259286e748983ecb46c2e0c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee061f4b70de2cd3259286e748983ecb46c2e0c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee061f4b70de2cd3259286e748983ecb46c2e0c2/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e2d59ae11edec7060a1ff076285e63061e703e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2d59ae11edec7060a1ff076285e63061e703e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2d59ae11edec7060a1ff076285e63061e703e5"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ce34fb05948cd361d27224d690bc07c56a9305c7",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee061f4b70de2cd3259286e748983ecb46c2e0c2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee061f4b70de2cd3259286e748983ecb46c2e0c2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ee061f4b70de2cd3259286e748983ecb46c2e0c2",
        "patch": "@@ -15,11 +15,7 @@ inline unsigned int MaxBlockSize(uint64_t nTime) {\n     if (nTime < BIP102_FORK_TIME)\n         return 1000*1000;\n \n-    // cap for tests\n-    if (nTime > 4113158400)\n-        nTime = 4113158400;\n-\n-    return (2*1000*1000) + (20 * ((nTime - BIP102_FORK_TIME) / 600));\n+    return (2*1000*1000);\n }\n \n /** The maximum allowed size for a serialized transaction, in bytes */"
      },
      {
        "sha": "a24f332141a9b0686a8fc0e80da95fe8e8d995d7",
        "filename": "src/test/block_size_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee061f4b70de2cd3259286e748983ecb46c2e0c2/src/test/block_size_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee061f4b70de2cd3259286e748983ecb46c2e0c2/src/test/block_size_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_size_tests.cpp?ref=ee061f4b70de2cd3259286e748983ecb46c2e0c2",
        "patch": "@@ -96,13 +96,14 @@ BOOST_AUTO_TEST_CASE(TwoMegFork)\n     BOOST_CHECK(!TestCheckBlock(*pblock, BIP102_FORK_TIME, 2*1000*1000+1)); // >2MB : invalid\n \n     // Fork height + 10 min...\n-    BOOST_CHECK(TestCheckBlock(*pblock, BIP102_FORK_TIME+600, 2*1000*1000+20)); // 2MB+20 : valid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, BIP102_FORK_TIME+600, 2*1000*1000+20)); // 2MB+20 : invalid\n \n     // A year after fork time:\n     unsigned int yearAfter = BIP102_FORK_TIME + (365 * 24 * 60 * 60);\n     BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 1000*1000)); // 1MB : valid\n     BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 2*1000*1000)); // 2MB : valid\n-    BOOST_CHECK(TestCheckBlock(*pblock, yearAfter, 3*1000*1000)); // 3MB : valid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, yearAfter, 2*1000*1000+1)); // >2MB : invalid\n+    BOOST_CHECK(!TestCheckBlock(*pblock, yearAfter, 3*1000*1000)); // 3MB : invalid\n     BOOST_CHECK(!TestCheckBlock(*pblock, yearAfter, 4*1000*1000)); // 4MB : invalid\n }\n "
      }
    ]
  },
  {
    "sha": "5ce9067f70ce84ddeb8a6fa041df10c912753674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2U5MDY3ZjcwY2U4NGRkZWI4YTZmYTA0MWRmMTBjOTEyNzUzNjc0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T13:37:42Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-12-18T13:37:42Z"
      },
      "message": "BIP 102: require 95% upgrade",
      "tree": {
        "sha": "6db1f4edf7066e2f5af372328736419d767ba798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6db1f4edf7066e2f5af372328736419d767ba798"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ce9067f70ce84ddeb8a6fa041df10c912753674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ce9067f70ce84ddeb8a6fa041df10c912753674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ce9067f70ce84ddeb8a6fa041df10c912753674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ce9067f70ce84ddeb8a6fa041df10c912753674/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee061f4b70de2cd3259286e748983ecb46c2e0c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee061f4b70de2cd3259286e748983ecb46c2e0c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee061f4b70de2cd3259286e748983ecb46c2e0c2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4857115738be2825f80e504a4fb9a098a2aaf13f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ce9067f70ce84ddeb8a6fa041df10c912753674/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ce9067f70ce84ddeb8a6fa041df10c912753674/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5ce9067f70ce84ddeb8a6fa041df10c912753674",
        "patch": "@@ -2069,7 +2069,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     bool fBIP102Enforcing = (pindex->GetBlockTime() >= (int64_t)BIP102_FORK_TIME);\n-    if (fBIP102Enforcing && block.nVersion >= 5 && !IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus()))\n+    if (fBIP102Enforcing && block.nVersion >= 5 && !IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityRejectBlockOutdated, chainparams.GetConsensus()))\n         fBIP102Enforcing = false;\n \n     // TODO"
      }
    ]
  }
]