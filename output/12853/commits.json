[
  {
    "sha": "faace13868571cc482c7e4ebcbbed83aa349d2d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFjZTEzODY4NTcxY2M0ODJjN2U0ZWJjYmJlZDgzYWEzNDlkMmQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-28T13:37:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-01T21:36:14Z"
      },
      "message": "qa: Match full plain text by default",
      "tree": {
        "sha": "6ac344c48f12fe86e752e697d8d0cbff47fe3eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ac344c48f12fe86e752e697d8d0cbff47fe3eb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faace13868571cc482c7e4ebcbbed83aa349d2d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJawVDOAAoJEM4rdWl+aaVIm8oL/iv04JbzAwF6qIql0fJPYADu\naEM77G7k8xKesi9oFOa2NLggOpGdfR0++Zkl9ethdD26V68P00IU7Po8pHkm9VY4\nHIAxwyQWr1Ms6h/SKzX3FiYR0qwdm8TmrjaBFlnDqbh8+HRulVYKIEJnKlNCow3E\nd16bZcBDUqkb6HXly7UlocSUWrx/O9PXsgK5XtZc/cROYb7Xxs5MhKG8cQJK4K1m\nmPOAXiTsX/DfNmsfUFlYklVB8HI7dSsPmh62EeleemUJM5ulLtVZUtoHgrrxBSvO\nEkiDOhHmXUvs+M2ByWtfHwyICuHaVOKOo3LKjMt+1l/pPhbrrwPetIIa+H7YqnsK\neA4e3U4XC5jjPPbT92RwUimVAVRCP8alPKmZQFXCRd1DqnCTMtRsdaKiIBW4bQor\natQRPGYCflD9jGcT1ZTZSPdmXnutP2kWp9JZaKiUnyGS4gZA/BO/Ddalq9cbOu79\nnr+oTfBELvVPQg53a6aqT7ABqy53blvSqQK4hQq53A==\n=6lZ/\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ac344c48f12fe86e752e697d8d0cbff47fe3eb5\nparent 8394300859e69141fc62a5c120448f3311e5cc6a\nauthor MarcoFalke <falke.marco@gmail.com> 1522244229 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1522618574 -0400\n\nqa: Match full plain text by default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faace13868571cc482c7e4ebcbbed83aa349d2d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faace13868571cc482c7e4ebcbbed83aa349d2d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faace13868571cc482c7e4ebcbbed83aa349d2d6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8394300859e69141fc62a5c120448f3311e5cc6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8394300859e69141fc62a5c120448f3311e5cc6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8394300859e69141fc62a5c120448f3311e5cc6a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "56f91651a8994927d72e37f14c8e9483db667359",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -6,7 +6,6 @@\n \"\"\"\n \n import os\n-import re\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework, initialize_datadir\n@@ -23,7 +22,7 @@ def run_test(self):\n         initialize_datadir(self.options.tmpdir, 0)\n         self.log.info(\"Starting with non exiting blocksdir ...\")\n         blocksdir_path = os.path.join(self.options.tmpdir, 'blocksdir')\n-        self.nodes[0].assert_start_raises_init_error([\"-blocksdir=\" + blocksdir_path], re.escape('Error: Specified blocks directory \"{}\" does not exist.'.format(blocksdir_path)))\n+        self.nodes[0].assert_start_raises_init_error([\"-blocksdir=\" + blocksdir_path], 'Error: Specified blocks directory \"{}\" does not exist.'.format(blocksdir_path))\n         os.mkdir(blocksdir_path)\n         self.log.info(\"Starting with exiting blocksdir ...\")\n         self.start_node(0, [\"-blocksdir=\" + blocksdir_path])"
      },
      {
        "sha": "a1d22191af3c3471945a0b2772884fd148ec1f5d",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n \n import os\n-import re\n \n from test_framework.test_framework import BitcoinTestFramework\n \n@@ -26,13 +25,13 @@ def run_test(self):\n \n         # Check that using -datadir argument on non-existent directory fails\n         self.nodes[0].datadir = new_data_dir\n-        self.nodes[0].assert_start_raises_init_error(['-datadir=' + new_data_dir], 'Error: Specified data directory \"' + re.escape(new_data_dir) + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-datadir=' + new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n         with open(conf_file, 'a', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n-        self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error reading configuration file: specified data directory \"' + re.escape(new_data_dir) + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)"
      },
      {
        "sha": "3c7aecf10a9f06260b9043c9c33caa1c166757b7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -7,6 +7,8 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+\n \n class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -31,7 +33,7 @@ def run_test(self):\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n         exp_stderr = \"Error: Could not open debug log file \\S+$\"\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr)\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (relative) works after path exists\n@@ -44,7 +46,7 @@ def run_test(self):\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname], exp_stderr)\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) works after path exists"
      },
      {
        "sha": "80bd7ff29fa02aae814b15a546c4db249ce3ea42",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -7,6 +7,7 @@\n import re\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n from test_framework.util import assert_equal\n \n \n@@ -27,12 +28,12 @@ def run_test(self):\n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n         expected = \"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n-        self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected)\n+        self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected, match=ErrorMatch.FULL_REGEX)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')']:\n             expected = \"Error: User Agent comment \\(\" + re.escape(unsafe_char) + \"\\) contains unsafe characters.\"\n-            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected)\n+            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected, match=ErrorMatch.FULL_REGEX)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "4a4ab046c5f596b2a5610702683799c8c7ed15d5",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -6,6 +6,7 @@\n \n import decimal\n import errno\n+from enum import Enum\n import http.client\n import json\n import logging\n@@ -35,6 +36,12 @@ class FailedToStartError(Exception):\n     \"\"\"Raised when a node fails to start correctly.\"\"\"\n \n \n+class ErrorMatch(Enum):\n+    FULL_TEXT = 1\n+    FULL_REGEX = 2\n+    PARTIAL_REGEX = 3\n+\n+\n class TestNode():\n     \"\"\"A class for representing a bitcoind node under test.\n \n@@ -172,7 +179,7 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n-    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, partial_match=False, *args, **kwargs):\n+    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n \n         extra_args: extra arguments to pass through to bitcoind\n@@ -194,12 +201,15 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, par\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8').strip()\n-                    if partial_match:\n+                    if match == ErrorMatch.PARTIAL_REGEX:\n                         if re.search(expected_msg, stderr, flags=re.MULTILINE) is None:\n                             raise AssertionError('Expected message \"{}\" does not partially match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n-                    else:\n+                    elif match == ErrorMatch.FULL_REGEX:\n                         if re.fullmatch(expected_msg, stderr) is None:\n                             raise AssertionError('Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                    elif match == ErrorMatch.FULL_TEXT:\n+                        if expected_msg != stderr:\n+                            raise AssertionError('Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n             else:\n                 if expected_msg is None:\n                     assert_msg = \"bitcoind should have exited with an error\""
      },
      {
        "sha": "5ff313997edcefcb28b034be23218d335defb5f6",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faace13868571cc482c7e4ebcbbed83aa349d2d6/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=faace13868571cc482c7e4ebcbbed83aa349d2d6",
        "patch": "@@ -7,10 +7,10 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n-import re\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -66,7 +66,7 @@ def run_test(self):\n \n         # should not initialize if wallet path can't be created\n         exp_stderr = \"boost::filesystem::create_directory: (The system cannot find the path specified|Not a directory):\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, partial_match=True)\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -78,18 +78,18 @@ def run_test(self):\n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n         exp_stderr = \"CDB: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, partial_match=True)\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n         # should not initialize if the specified walletdir is not a directory\n         not_a_dir = wallet_dir('notadir')\n         open(not_a_dir, 'a').close()\n-        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + re.escape(not_a_dir) + '\" is not a directory')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n@@ -111,7 +111,7 @@ def run_test(self):\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n         exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n-        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, partial_match=True)\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.restart_node(0, extra_args)\n "
      }
    ]
  }
]