esotericnonsense,2017-09-21T00:11:03Z,"I like this.\n\nGeneralizing a bit, I don't like the presence of 'overwrite_if_exists'. It seems like a footgun opportunity in other cases (e.g. overwrite one wallet with another).\n\nMy preference would be to either make that impossible or gate it behind an rpc toggle (default being don't overwrite, like when using 'cp/mv --interactive').",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331014968,331014968,
esotericnonsense,2017-09-21T00:26:56Z,"Tested and working. Additional test performed (try to backup to a file that symlinks to the wallet)\n```\n$ ln -s ~/.bitcoin/regtest/wallet.dat ~/.bitcoin/regtest/wallet.dat.symlink\nln: failed to create symbolic link '/home/user/.bitcoin/regtest/wallet.dat.symlink': File exists\n$ stat ~/.bitcoin/regtest/wallet.dat.symlink | head -n 1\n  File: /home/user/.bitcoin/regtest/wallet.dat.symlink -",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331017100,331017100,
gmaxwell,2017-09-21T01:51:59Z,"Thanks. I think this cannot be guaranteed to work with hard links and whatnot, but it's better than nothing.",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331028271,331028271,
tomasvdw,2017-09-21T06:49:37Z,I've changed the test cases to use assert_raises_jsonrpc,https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331067880,331067880,
sdaftuar,2017-09-21T15:22:41Z,"Yikes -- thank you for reporting and fixing this bug.\n\nI agree with @esotericnonsense and think we should go further; a command called ""backupwallet"" should never delete/overwrite anything, in my opinion.",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331190925,331190925,
tomasvdw,2017-09-21T17:17:59Z,"@jnewbery , @sdaftuar Personally I think that silently overwriting the destination (if it's not the source!) is perfectly reasonable for a backup api command, and expected behavior. You don't want an rpc method to be interactive, and I am not to fond of something like ""mode=overwrite"".\n\nBut if others agree with your point, I am happy to change this, in this PR.\n\nWith regards to the returni",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331223312,331223312,
tomasvdw,2017-09-21T19:16:23Z,Removed line breaks as per suggestion @jnewbery ,https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331254408,331254408,
sdaftuar,2017-09-21T19:43:55Z,"@tomasvdw I really think overwriting something that could be a wallet file a user needs is a fundamentally dangerous behavior; for example even though we're checking that the destination is different from the source, now that we have multiwallet you could be overwriting some other wallet file (which might even be loaded, though that doesn't really matter) -- again resulting in funds loss.  \n\nI",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331261090,331261090,
gmaxwell,2017-09-21T23:11:40Z,"> as others have already pointed out, fs::copy_option::overwrite_if_exists is completely inappropriate for a backup command. To my mind, a backup command should never result in data being deleted or overwritten (unless perhaps called with an explicit by-default-off overwrite option)\n\nThe sort of standard way to use the dump command is to crontab running it to write to some place where your bac",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331306543,331306543,
sdaftuar,2017-09-22T00:10:21Z,">  or to move the file its overwriting out of the way first e.g. wallet.backup.dat.1\n\nSure, this seems reasonable to me, as does having the rpc command return failure (which I'd expect someone running this out of cron to already need to be catching).",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331315025,331315025,
jonasschnelli,2017-09-22T05:11:56Z,utACK b688b5242714f64c36e237b2c5c4151164ee6eb3,https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331351754,331351754,
jonasschnelli,2017-09-22T05:14:41Z,"Added ""Need Backport"" label. Seems critical.\nThis should catch most footgunish usecases and therefore is a clear improvement, but agree with @gmaxwell that it won't catch symlink stupidity.",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331352065,331352065,
laanwj,2017-09-22T11:35:02Z,"Concept ACK. I think it should refuse to overwrite any file, as @sdaftuar says.\n\nI vaguely remember that we changed backupwallet a while ago to fail if it's used on an existing file?\n\nEdit: never mind - that was **dumpwallet** in #9937, and apparently it was never merged because people had different ideas about it.\n\n",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331423435,331423435,
jnewbery,2017-09-22T14:18:19Z,"> I think it's not helpful to complain without having an answer\n\nI complained, and we're now having a discussion, which is helpful in itself :slightly_smiling_face: \n\nThe 'sort of standard way' is not safe at all. Consider a setup where your cronjob is backing up to a filename, with a separate process or remote machine copying that backup file to a secure location. If that backup archiving",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-331460061,331460061,
gmaxwell,2017-09-25T23:23:20Z,"> If a file already exists, then try to write the backup to the provided filename with an index or timestamp suffix.\n\nWhy not move the existing file?   The concern I have is that if the provided name is what your backup routine is backing up, you'll just keep backing up the old thing over and over again. \n\nHm. I guess the move it out of the way doesn't work so hot if the ""thing in the way""",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-332041479,332041479,
tomasvdw,2017-09-26T07:05:52Z,"> I guess the move it out of the way doesn't work so hot if the ""thing in the way"" is your live wallet.dat. \n\nYou could still leave in this fix (source != target). Generally, as there is some discussion on the move-out-of-way semantics, I think it is better to merge this critical fix and create a new PR to propose fixing overwrite. I think these are separate issues only related by touching the",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-332106269,332106269,
jnewbery,2017-09-26T17:25:56Z,"> can we just change the darn function to not let you set the filename, but only the path, and have it pick a file name, guaranteed to be unused, and return that?\n\nI'd be fine with that. Obviously it's an API break.\n\nI think my general approach is that the process that is backing itself up in general shouldn't delete, overwrite or move files when backing up. It should be the backup archiva",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-332273208,332273208,
TheBlueMatt,2017-10-17T21:02:06Z,"Agreed, lets merge this and then we can paint the overwrite-parameter shed whatever color we like. utACK \n 5d465e396249a0e2cc60b16984a2bdbe4c8993c3",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-337370173,337370173,
promag,2017-10-17T21:25:19Z,"If at the end the backup can't overwrite any file then there is no need to merge this.\n\nEdit: I mean, should be enough to check if the destination doesn't exists to actually backup.\n\nEdit 2: I agree with not allowing overwrites, some timestamp suffix/prefix is pretty common.",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-337376419,337376419,
sdaftuar,2017-10-31T17:32:50Z,"Agree with @TheBlueMatt, though I do think we should never overwrite, better is better, let's get this fix in for now.\n\nutACK",https://github.com/bitcoin/bitcoin/pull/11376#issuecomment-340840995,340840995,
TheBlueMatt,2017-09-21T03:31:42Z,You can replace these entire try:except: blocks with a simple assert_raises_jsonrpc call (which also checks the error number).,https://github.com/bitcoin/bitcoin/pull/11376#discussion_r140142355,140142355,test/functional/walletbackup.py
jnewbery,2017-09-21T15:41:26Z,"Good that you've included this in the try-except block, since `boost::filesystem::equivalent()` can throw, but the generic catch behaviour below would hide the precise error. You could return a more precise error by:\n\n- using the `equivalent(const path& p1, const path& p2, system::error_code& ec)` form (http://www.boost.org/doc/libs/1_46_0/libs/filesystem/v3/doc/reference.html#equivalent) and ",https://github.com/bitcoin/bitcoin/pull/11376#discussion_r140280178,140280178,src/wallet/db.cpp
jnewbery,2017-09-21T15:41:49Z,"nit: the repository doesn't enforce max line length, so you can join this with the line above.",https://github.com/bitcoin/bitcoin/pull/11376#discussion_r140280302,140280302,src/wallet/db.cpp
jnewbery,2017-09-21T15:43:10Z,"nit: again, no max line length, so you can join this with the line above.",https://github.com/bitcoin/bitcoin/pull/11376#discussion_r140280655,140280655,test/functional/walletbackup.py
tomasvdw,2017-09-21T17:05:51Z,">  but the generic catch behaviour below would hide the precise error.\n\nIt does dumps the error message\n\n> Perhaps a little bit overkill since the only way that boost::filesystem::equivalent() can throw is if the source wallet.dat file doesn't exist or isn't a regular file/directory/symlink. \n\nThis was also my thought. If equivalant() fails we have bigger problems and a generic error i",https://github.com/bitcoin/bitcoin/pull/11376#discussion_r140302209,140302209,src/wallet/db.cpp
MarcoFalke,2017-10-09T19:08:47Z,"Needs rebase and replace with ""assert_raises_rpc_error""",https://github.com/bitcoin/bitcoin/pull/11376#discussion_r143552898,143552898,test/functional/walletbackup.py
tomasvdw,2017-10-10T12:51:08Z,Done; rebased and changed to assert_rpc_error,https://github.com/bitcoin/bitcoin/pull/11376#discussion_r143716802,143716802,test/functional/walletbackup.py
MarcoFalke,2017-11-01T16:23:11Z,Âµnit: `snake_case`,https://github.com/bitcoin/bitcoin/pull/11376#discussion_r148309200,148309200,test/functional/walletbackup.py
