[
  {
    "sha": "d5aa19813c32eff02d4b65ac9a4131f3eed04825",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWFhMTk4MTNjMzJlZmYwMmQ0YjY1YWM5YTQxMzFmM2VlZDA0ODI1",
    "commit": {
      "author": {
        "name": "Doug",
        "email": "joroark@vt.edu",
        "date": "2016-12-21T03:25:24Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "doug@bloq.com",
        "date": "2017-01-05T08:46:29Z"
      },
      "message": "Allow linearization scripts to support hash byte reversal\n\nCurrently, the linearization scripts require input hashes to be in one endian form. Add support for byte reversal.",
      "tree": {
        "sha": "a7c97ce84513d941ab73733cb3b3afd3a9da1bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c97ce84513d941ab73733cb3b3afd3a9da1bb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5aa19813c32eff02d4b65ac9a4131f3eed04825",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5aa19813c32eff02d4b65ac9a4131f3eed04825",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5aa19813c32eff02d4b65ac9a4131f3eed04825",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5aa19813c32eff02d4b65ac9a4131f3eed04825/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "7dac1e5e9e887f5f6ff146e812a05bd3bf281eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dac1e5e9e887f5f6ff146e812a05bd3bf281eae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dac1e5e9e887f5f6ff146e812a05bd3bf281eae"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 58,
      "deletions": 19
    },
    "files": [
      {
        "sha": "07597481e0604ae9c320189197851d9eda35857d",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "patch": "@@ -1,33 +1,43 @@\n # Linearize\n-Construct a linear, no-fork, best version of the blockchain.\n+Construct a linear, no-fork, best version of the Bitcoin blockchain.\n \n ## Step 1: Download hash list\n \n     $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n-* RPC: rpcuser, rpcpassword\n+* RPC: `rpcuser`, `rpcpassword`\n \n Optional config file setting for linearize-hashes:\n-* RPC: host, port\n-* Block chain: min_height, max_height\n+* RPC: `host`, `port`  (Default: `127.0.0.1:8332`)\n+* Blockchain: `min_height`, `max_height`\n+* `rev_hash_bytes`: If true, the written block hash list will be\n+byte-reversed. (In other words, the hash returned by getblockhash will have its\n+bytes reversed.) False by default. Intended for generation of\n+standalone hash lists but safe to use with linearize-data.py, which will output\n+the same data no matter which byte format is chosen.\n \n ## Step 2: Copy local block data\n \n     $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n-* \"input\": bitcoind blocks/ directory containing blkNNNNN.dat\n-* \"hashlist\": text file containing list of block hashes, linearized-hashes.py\n-output.\n-* \"output_file\": bootstrap.dat\n+* `output_file`: The file that will contain the final blockchain.\n       or\n-* \"output\": output directory for linearized blocks/blkNNNNN.dat output\n+* `output`: Output directory for linearized blocks/blkNNNNN.dat output.\n \n Optional config file setting for linearize-data:\n-* \"netmagic\": network magic number\n-* \"max_out_sz\": maximum output file size (default `1000*1000*1000`)\n-* \"split_timestamp\": Split files when a new month is first seen, in addition to\n-reaching a maximum file size.\n-* \"file_timestamp\": Set each file's last-modified time to that of the\n-most recent block in that file.\n+* `file_timestamp`: Set each file's last-modified time to that of the most\n+recent block in that file.\n+* `genesis`: The hash of the genesis block in the blockchain.\n+* `input: bitcoind blocks/ directory containing blkNNNNN.dat\n+* `hashlist`: text file containing list of block hashes created by\n+linearize-hashes.py.\n+* `max_out_sz`: Maximum size for files created by the `output_file` option.\n+(Default: `1000*1000*1000 bytes`)\n+* `netmagic`: Network magic number.\n+* `rev_hash_bytes`: If true, the block hash list written by linearize-hashes.py\n+will be byte-reversed when read by linearize-data.py. See the linearize-hashes\n+entry for more information.\n+* `split_timestamp`: Split blockchain files when a new month is first seen, in\n+addition to reaching a maximum file size (`max_out_sz`)."
      },
      {
        "sha": "cccdd792131aed3f682ea63b692b1a0794e7685f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "patch": "@@ -23,7 +23,9 @@ input=/home/example/.bitcoin/blocks\n \n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n-split_year=1\n \n # Maxmimum size in bytes of out-of-order blocks cache in memory\n out_of_order_cache_sz = 100000000\n+\n+# Do we want the reverse the hash bytes coming from getblockhash?\n+rev_hash_bytes = False"
      },
      {
        "sha": "adea35dbd5588e60e6c5400d2cb01e34ca9f2836",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "patch": "@@ -23,6 +23,12 @@\n \n settings = {}\n \n+##### Switch endian-ness #####\n+def hex_switchEndian(s):\n+\t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n+\tpairList = [s[i]+s[i+1] for i in range(0,len(s),2)]\n+\treturn ''.join(pairList[::-1])\n+\n def uint32(x):\n \treturn x & 0xffffffffL\n \n@@ -69,17 +75,21 @@ def get_blk_dt(blk_hdr):\n \tdt_ym = datetime.datetime(dt.year, dt.month, 1)\n \treturn (dt_ym, nTime)\n \n+# When getting the list of block hashes, undo any byte reversals.\n def get_block_hashes(settings):\n \tblkindex = []\n \tf = open(settings['hashlist'], \"r\")\n \tfor line in f:\n \t\tline = line.rstrip()\n+\t\tif settings['rev_hash_bytes'] == 'true':\n+\t\t\tline = hex_switchEndian(line)\n \t\tblkindex.append(line)\n \n \tprint(\"Read \" + str(len(blkindex)) + \" hashes\")\n \n \treturn blkindex\n \n+# The block map shouldn't give or receive byte-reversed hashes.\n def mkblockmap(blkindex):\n \tblkmap = {}\n \tfor height,hash in enumerate(blkindex):\n@@ -265,6 +275,12 @@ def run(self):\n \t\tsettings[m.group(1)] = m.group(2)\n \tf.close()\n \n+\t# Force hash byte format setting to be lowercase to make comparisons easier.\n+\t# Also place upfront in case any settings need to know about it.\n+\tif 'rev_hash_bytes' not in settings:\n+\t\tsettings['rev_hash_bytes'] = 'false'\n+\tsettings['rev_hash_bytes'] = settings['rev_hash_bytes'].lower()\n+\n \tif 'netmagic' not in settings:\n \t\tsettings['netmagic'] = 'f9beb4d9'\n \tif 'genesis' not in settings:\n@@ -295,9 +311,8 @@ def run(self):\n \tblkindex = get_block_hashes(settings)\n \tblkmap = mkblockmap(blkindex)\n \n+\t# Block hash map won't be byte-reversed. Neither should the genesis hash.\n \tif not settings['genesis'] in blkmap:\n \t\tprint(\"Genesis block not found in hashlist\")\n \telse:\n \t\tBlockDataCopier(settings, blkindex, blkmap).run()\n-\n-"
      },
      {
        "sha": "9efdf132550303fc51456539ee102d758d1077df",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5aa19813c32eff02d4b65ac9a4131f3eed04825/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "patch": "@@ -17,6 +17,12 @@\n \n settings = {}\n \n+##### Switch endian-ness #####\n+def hex_switchEndian(s):\n+\t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n+\tpairList = [s[i]+s[i+1] for i in range(0,len(s),2)]\n+\treturn ''.join(pairList[::-1])\n+\n class BitcoinRPC:\n \tdef __init__(self, host, port, username, password):\n \t\tauthpair = \"%s:%s\" % (username, password)\n@@ -70,6 +76,8 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \t\t\t\tprint('JSON-RPC: error at height', height+x, ': ', resp_obj['error'], file=sys.stderr)\n \t\t\t\texit(1)\n \t\t\tassert(resp_obj['id'] == x) # assume replies are in-sequence\n+\t\t\tif settings['rev_hash_bytes'] == 'true':\n+\t\t\t\tresp_obj['result'] = hex_switchEndian(resp_obj['result'])\n \t\t\tprint(resp_obj['result'])\n \n \t\theight += num_blocks\n@@ -101,6 +109,8 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \t\tsettings['min_height'] = 0\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 313000\n+\tif 'rev_hash_bytes' not in settings:\n+\t\tsettings['rev_hash_bytes'] = 'false'\n \tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n \t\tprint(\"Missing username and/or password in cfg file\", file=stderr)\n \t\tsys.exit(1)\n@@ -109,5 +119,7 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \tsettings['min_height'] = int(settings['min_height'])\n \tsettings['max_height'] = int(settings['max_height'])\n \n-\tget_block_hashes(settings)\n+\t# Force hash byte format setting to be lowercase to make comparisons easier.\n+\tsettings['rev_hash_bytes'] = settings['rev_hash_bytes'].lower()\n \n+\tget_block_hashes(settings)"
      }
    ]
  },
  {
    "sha": "3c8f63ba7c7be62d462727f4d67633e1064f0f79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzhmNjNiYTdjN2JlNjJkNDYyNzI3ZjRkNjc2MzNlMTA2NGYwZjc5",
    "commit": {
      "author": {
        "name": "Doug",
        "email": "joroark@vt.edu",
        "date": "2016-12-21T03:27:01Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "doug@bloq.com",
        "date": "2017-01-05T08:46:30Z"
      },
      "message": "Make linearize scripts Python 3-compatible.",
      "tree": {
        "sha": "277b710a62c1906a986b72bf66be536b68228cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/277b710a62c1906a986b72bf66be536b68228cb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c8f63ba7c7be62d462727f4d67633e1064f0f79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f63ba7c7be62d462727f4d67633e1064f0f79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8f63ba7c7be62d462727f4d67633e1064f0f79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f63ba7c7be62d462727f4d67633e1064f0f79/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5aa19813c32eff02d4b65ac9a4131f3eed04825",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5aa19813c32eff02d4b65ac9a4131f3eed04825"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 47,
      "deletions": 26
    },
    "files": [
      {
        "sha": "adc9a559cc34d9c6bd52759ba4bfeb235ce50fdd",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=3c8f63ba7c7be62d462727f4d67633e1064f0f79",
        "patch": "@@ -1,5 +1,6 @@\n # Linearize\n-Construct a linear, no-fork, best version of the Bitcoin blockchain.\n+Construct a linear, no-fork, best version of the Bitcoin blockchain. The scripts\n+run using Python 3 but are compatible with Python 2.\n \n ## Step 1: Download hash list\n \n@@ -9,28 +10,32 @@ Required configuration file settings for linearize-hashes:\n * RPC: `rpcuser`, `rpcpassword`\n \n Optional config file setting for linearize-hashes:\n-* RPC: `host`, `port`  (Default: `127.0.0.1:8332`)\n+* RPC: `host`  (Default: `127.0.0.1`)\n+* RPC: `port`  (Default: `8332`)\n * Blockchain: `min_height`, `max_height`\n * `rev_hash_bytes`: If true, the written block hash list will be\n byte-reversed. (In other words, the hash returned by getblockhash will have its\n bytes reversed.) False by default. Intended for generation of\n standalone hash lists but safe to use with linearize-data.py, which will output\n the same data no matter which byte format is chosen.\n \n+The `linearize-hashes` script requires a connection, local or remote, to a\n+JSON-RPC server. Running `bitcoind` or `bitcoin-qt -server` will be sufficient.\n+\n ## Step 2: Copy local block data\n \n     $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * `output_file`: The file that will contain the final blockchain.\n       or\n-* `output`: Output directory for linearized blocks/blkNNNNN.dat output.\n+* `output`: Output directory for linearized `blocks/blkNNNNN.dat` output.\n \n Optional config file setting for linearize-data:\n * `file_timestamp`: Set each file's last-modified time to that of the most\n recent block in that file.\n * `genesis`: The hash of the genesis block in the blockchain.\n-* `input: bitcoind blocks/ directory containing blkNNNNN.dat\n+* `input`: bitcoind blocks/ directory containing blkNNNNN.dat\n * `hashlist`: text file containing list of block hashes created by\n linearize-hashes.py.\n * `max_out_sz`: Maximum size for files created by the `output_file` option."
      },
      {
        "sha": "043bf2e814fc1486b6e8cb5218ad969abe3d69b5",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=3c8f63ba7c7be62d462727f4d67633e1064f0f79",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #\n@@ -8,29 +8,33 @@\n #\n \n from __future__ import print_function, division\n+try: # Python 3\n+    import http.client as httplib\n+except ImportError: # Python 2\n+    import httplib\n import json\n import struct\n import re\n import os\n import os.path\n import base64\n-import httplib\n import sys\n import hashlib\n import datetime\n import time\n from collections import namedtuple\n+from binascii import hexlify, unhexlify\n \n settings = {}\n \n ##### Switch endian-ness #####\n def hex_switchEndian(s):\n \t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n-\tpairList = [s[i]+s[i+1] for i in range(0,len(s),2)]\n-\treturn ''.join(pairList[::-1])\n+\tpairList = [s[i:i+2].encode() for i in range(0, len(s), 2)]\n+\treturn b''.join(pairList[::-1]).decode()\n \n def uint32(x):\n-\treturn x & 0xffffffffL\n+\treturn x & 0xffffffff\n \n def bytereverse(x):\n \treturn uint32(( ((x) << 24) | (((x) << 8) & 0x00ff0000) |\n@@ -41,14 +45,14 @@ def bufreverse(in_buf):\n \tfor i in range(0, len(in_buf), 4):\n \t\tword = struct.unpack('@I', in_buf[i:i+4])[0]\n \t\tout_words.append(struct.pack('@I', bytereverse(word)))\n-\treturn ''.join(out_words)\n+\treturn b''.join(out_words)\n \n def wordreverse(in_buf):\n \tout_words = []\n \tfor i in range(0, len(in_buf), 4):\n \t\tout_words.append(in_buf[i:i+4])\n \tout_words.reverse()\n-\treturn ''.join(out_words)\n+\treturn b''.join(out_words)\n \n def calc_hdr_hash(blk_hdr):\n \thash1 = hashlib.sha256()\n@@ -65,7 +69,7 @@ def calc_hash_str(blk_hdr):\n \thash = calc_hdr_hash(blk_hdr)\n \thash = bufreverse(hash)\n \thash = wordreverse(hash)\n-\thash_str = hash.encode('hex')\n+\thash_str = hexlify(hash).decode('utf-8')\n \treturn hash_str\n \n def get_blk_dt(blk_hdr):\n@@ -217,7 +221,7 @@ def run(self):\n \n \t\t\tinMagic = inhdr[:4]\n \t\t\tif (inMagic != self.settings['netmagic']):\n-\t\t\t\tprint(\"Invalid magic: \" + inMagic.encode('hex'))\n+\t\t\t\tprint(\"Invalid magic: \" + hexlify(inMagic).decode('utf-8'))\n \t\t\t\treturn\n \t\t\tinLenLE = inhdr[4:]\n \t\t\tsu = struct.unpack(\"<I\", inLenLE)\n@@ -294,14 +298,14 @@ def run(self):\n \tif 'split_timestamp' not in settings:\n \t\tsettings['split_timestamp'] = 0\n \tif 'max_out_sz' not in settings:\n-\t\tsettings['max_out_sz'] = 1000L * 1000 * 1000\n+\t\tsettings['max_out_sz'] = 1000 * 1000 * 1000\n \tif 'out_of_order_cache_sz' not in settings:\n \t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n \n-\tsettings['max_out_sz'] = long(settings['max_out_sz'])\n+\tsettings['max_out_sz'] = int(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n-\tsettings['netmagic'] = settings['netmagic'].decode('hex')\n+\tsettings['netmagic'] = unhexlify(settings['netmagic'].encode('utf-8'))\n \tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n \n \tif 'output_file' not in settings and 'output' not in settings:"
      },
      {
        "sha": "f749da53966492ab573e509783d9d876ecb73531",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8f63ba7c7be62d462727f4d67633e1064f0f79/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=3c8f63ba7c7be62d462727f4d67633e1064f0f79",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n #\n # linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n #\n@@ -8,38 +8,47 @@\n #\n \n from __future__ import print_function\n+try: # Python 3\n+    import http.client as httplib\n+except ImportError: # Python 2\n+    import httplib\n import json\n import struct\n import re\n import base64\n-import httplib\n import sys\n \n settings = {}\n \n ##### Switch endian-ness #####\n def hex_switchEndian(s):\n \t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n-\tpairList = [s[i]+s[i+1] for i in range(0,len(s),2)]\n-\treturn ''.join(pairList[::-1])\n+\tpairList = [s[i:i+2].encode() for i in range(0, len(s), 2)]\n+\treturn b''.join(pairList[::-1]).decode()\n \n class BitcoinRPC:\n \tdef __init__(self, host, port, username, password):\n \t\tauthpair = \"%s:%s\" % (username, password)\n-\t\tself.authhdr = \"Basic %s\" % (base64.b64encode(authpair))\n-\t\tself.conn = httplib.HTTPConnection(host, port, False, 30)\n+\t\tauthpair = authpair.encode('utf-8')\n+\t\tself.authhdr = b\"Basic \" + base64.b64encode(authpair)\n+\t\tself.conn = httplib.HTTPConnection(host, port=port, timeout=30)\n \n \tdef execute(self, obj):\n-\t\tself.conn.request('POST', '/', json.dumps(obj),\n-\t\t\t{ 'Authorization' : self.authhdr,\n-\t\t\t  'Content-type' : 'application/json' })\n+\t\ttry:\n+\t\t\tself.conn.request('POST', '/', json.dumps(obj),\n+\t\t\t\t{ 'Authorization' : self.authhdr,\n+\t\t\t\t  'Content-type' : 'application/json' })\n+\t\texcept ConnectionRefusedError:\n+\t\t\tprint('RPC connection refused. Check RPC settings and the server status.',\n+\t\t\t      file=sys.stderr)\n+\t\t\treturn None\n \n \t\tresp = self.conn.getresponse()\n \t\tif resp is None:\n \t\t\tprint(\"JSON-RPC: no response\", file=sys.stderr)\n \t\t\treturn None\n \n-\t\tbody = resp.read()\n+\t\tbody = resp.read().decode('utf-8')\n \t\tresp_obj = json.loads(body)\n \t\treturn resp_obj\n \n@@ -70,6 +79,9 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \t\t\tbatch.append(rpc.build_request(x, 'getblockhash', [height + x]))\n \n \t\treply = rpc.execute(batch)\n+\t\tif reply is None:\n+\t\t\tprint('Cannot continue. Program will halt.')\n+\t\t\treturn None\n \n \t\tfor x,resp_obj in enumerate(reply):\n \t\t\tif rpc.response_is_error(resp_obj):"
      }
    ]
  }
]