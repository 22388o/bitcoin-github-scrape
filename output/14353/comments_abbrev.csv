jgarzik,2018-09-30T01:03:40Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-425685485,425685485,
promag,2018-10-01T17:13:45Z,"Tested ACK ae0a5a1.\n\nWhat is the use case? Query block hash by height and then query the block? If so could overload /rest/block instead to avoid 2nd round trip? ",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-425988189,425988189,
jonasschnelli,2018-10-01T19:01:58Z,"@promag: the use case is exactly that (find a block by giving a height) (ex: https://bitcointools.jonasschnelli.ch/explorer/height/500000).\n\nYou could build it into /rest/block, but IMO we should keep it modular. I guess that is also the reason why there is a ""getblock"" and a ""getblockhash"" call on RPC.",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-426024443,426024443,
gmaxwell,2018-10-01T19:33:09Z,"PR is mistitled, not a ""blockheader"" call.  This PR doesn't really seem to indicate the benefit this provides to the user.   Making multiple round trips also has bad performance, if the purpose really is just querying blocks by height this indirection seems like pretextual modularity. ",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-426034230,426034230,
jonasschnelli,2018-10-01T20:02:13Z,"Changed the title (was wrong, thank @gmaxwell)\n\nI'm happy to add a per-height accessing to `/rest/block`, but this would mean accessing that new per-height-fetching would always return a block (optionally reduced to only contain txids) which would always access the disk.\n\nOf course, we could then add it to /rest/headers/ as well so one would fetch a single blockheader (or range of headers)",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-426043256,426043256,
ch4ot1c,2018-10-02T20:58:39Z,"Ack, seems marginally beneficial",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-426427921,426427921,
promag,2018-10-18T01:38:20Z,"utACK, but fix first commit message.",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-430845486,430845486,
DrahtBot,2018-11-09T18:50:03Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#11770](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11770.html) ([REST] add a rest endpoint for estimatesmar",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-437457871,437457871,
luke-jr,2018-12-20T02:59:33Z,See also #11765,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-448841398,448841398,
jonasschnelli,2019-01-03T22:05:42Z,"Fixed @luke-jr point (invalid JSON respons)\nRenamed from `blockhash` to `blockhashbyheight`.",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-451292478,451292478,
laanwj,2019-01-04T09:43:47Z,"utACK (-nit), I'm surprised this didn't exist yet.",https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-451397732,451397732,
jonasschnelli,2019-01-04T18:55:51Z,Fixed documentation and the test comment inconsistency (reported by @laanwj),https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-451534944,451534944,
jonasschnelli,2019-01-19T06:11:11Z,Fixed points reported by @jnewbery (thanks for the review).,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-455753356,455753356,
promag,2019-01-20T10:28:36Z,@jonasschnelli commit messages should mention /rest/blockhashbyheight.,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-455854395,455854395,
jonasschnelli,2019-01-21T21:55:56Z,Fixed the commit message,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-456208860,456208860,
jnewbery,2019-01-22T22:19:51Z,utACK 42ff30ec60c6ab6a9555da57a435b09cf217ee84,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-456585432,456585432,
promag,2019-01-22T23:58:52Z,utACK 42ff30e.,https://github.com/bitcoin/bitcoin/pull/14353#issuecomment-456612438,456612438,
promag,2018-09-29T20:59:06Z,Could reduce lock scope.,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221439724,221439724,src/rest.cpp
promag,2018-09-29T21:00:32Z,Test without argument?,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221439752,221439752,test/functional/interface_rest.py
jgarzik,2018-09-30T01:02:24Z,`/blockhash` presumably,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221443766,221443766,test/functional/interface_rest.py
jimmysong,2018-09-30T01:59:55Z,"Is the blockheight < 0 really necessary if it's using ParseUInt32? We know it's an unsigned integer, no?",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221445044,221445044,src/rest.cpp
jonasschnelli,2018-09-30T09:34:03Z,"Thanks. Nah,.. it's not necessary. Removed the <0 check.",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221453458,221453458,src/rest.cpp
jonasschnelli,2018-09-30T09:34:14Z,Thanks. Fixed,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221453466,221453466,test/functional/interface_rest.py
jonasschnelli,2018-09-30T09:34:28Z,Thanks. Added.,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221453469,221453469,test/functional/interface_rest.py
jonasschnelli,2018-09-30T09:34:33Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221453473,221453473,src/rest.cpp
promag,2018-09-30T22:48:01Z,"```\nrest.cpp:595:25: warning: comparison of integers of different signs: 'uint32_t' (aka 'unsigned int') and 'int' [-Wsign-compare]\n        if (blockheight > chainActive.Height()) {\n            ~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~\n1 warning generated.\n```",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r221476502,221476502,src/rest.cpp
ch4ot1c,2018-10-02T21:00:11Z,`<HEIGHT>` doesn't appear in the Markdown preview.,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r222110085,222110085,doc/REST-interface.md
jonasschnelli,2018-10-17T19:44:22Z,Fixed,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r226069626,226069626,doc/REST-interface.md
jonasschnelli,2018-10-17T19:44:46Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r226069744,226069744,src/rest.cpp
luke-jr,2018-12-20T02:58:59Z,Bare strings are not valid JSON,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r243143938,243143938,src/rest.cpp
laanwj,2019-01-04T09:43:08Z,nit: this is `/blockhashbyheight` now,https://github.com/bitcoin/bitcoin/pull/14353#discussion_r245251280,245251280,test/functional/interface_rest.py
laanwj,2019-01-04T09:48:45Z,"The help for RPC `getblockhash` is `Returns hash of block in best-block-chain at height provided.` I think that's slightly better terminology to use here than ""main chain"" which could be confused with testnet/mainnet/....",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r245252504,245252504,doc/REST-interface.md
jnewbery,2019-01-18T21:23:31Z,"Suggestion: you could test the error messages with something like:\n\n```\n        resp = self.test_rest_request(""/blockhashbyheight/abc"", req_type=ReqType.JSON, ret_type=RetType.OBJ, status=400)\n        assert_equal(resp.read().decode('utf-8').rstrip(), ""Invalid height: abc"")\n```\n\n(or by enhancing the `test_rest_request()` method to assert error messages)",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r249189875,249189875,test/functional/interface_rest.py
jnewbery,2019-01-18T21:43:01Z,"`RPCSerializationFlags()` is not strictly required since you're not serializing any transactions (and the only flag that this function can toggle is the ` SERIALIZE_TRANSACTION_NO_WITNESS` flag).\n\nIf you want to keep this here, perhaps we should consider adding it to all the `CDataStream`s in this file.",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r249194425,249194425,src/rest.cpp
jnewbery,2019-01-18T22:06:53Z,"It'd be good to also test the bytes and hex versions. Something like this should do the trick:\n\n```\n        resp_hex = self.test_rest_request(""/blockhashbyheight/{}"".format(block_json_obj['height']),\n                                          req_type=ReqType.HEX, ret_type=RetType.OBJ)\n        assert_equal(resp_hex.read().decode('utf-8').rstrip(), bb_hash)\n        resp_bytes = self.test",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r249200007,249200007,test/functional/interface_rest.py
jnewbery,2019-01-18T22:08:49Z,"I think this should be `HTTP_BAD_REQUEST` rather than `HTTP_NOT_FOUND`, but I see that you've just copied this from the other methods, so no need to change this.",https://github.com/bitcoin/bitcoin/pull/14353#discussion_r249200432,249200432,src/rest.cpp
