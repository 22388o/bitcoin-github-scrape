[
  {
    "sha": "5f850b0311a9adca506f6a7e7c10e3d996f493af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Zjg1MGIwMzExYTlhZGNhNTA2ZjZhN2U3YzEwZTNkOTk2ZjQ5M2Fm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-28T07:16:33Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-01T02:43:04Z"
      },
      "message": "[bench] Include ms/blk stats in Connect* benchmarks.",
      "tree": {
        "sha": "16090e4557666ea4a7dfacfbc512345c651c579d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16090e4557666ea4a7dfacfbc512345c651c579d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f850b0311a9adca506f6a7e7c10e3d996f493af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlkvfzgACgkQV692LbM1\nMyJpqw/6AogDL4V8bA/hkik2lAnYQGsJNrBqrZ+BA8VbPAsokyd0Jvqc70lg37N4\n1L1j3hUA/opUP8QGoqH2bXSm+bgA0RtFLQEQhMZh8UzwU9zxJRLCrfk4cfg7lUDI\nGeMcI48bZDyafoE5jsLOjK6ilQ2cfd85IdanDxmUlLnQfk0QeEDY0DdRIUSiDzsj\nBWO8+D3+HJzkFgddpnbNofQm2AqctNNRB75FXbGBLorjQ+mO7aAvEMshAHMakf7e\nsECoB0hGeFkHE8UDxec5Nc7IiQ0CFZtqqh4bA/1LLYOf+NPsdvxNAdjsF76ZaVbk\n6HACq3ILq389iLVTQKe2hZYckCX/LvdLBBxjQOx6sC8pRzqxtdZyrNRXfeFiY0CG\nusO67NWlRG9pLajzmMMdS541uDnHxaRp1YshVV1YJyIgnm04Bsq2piIlTj8Wcu3O\nJuzyxHCJO3i5XazDU0Sw93T8qadKLB5r0T8qcBMiQTTAhR7NAKJhdPL8KOPt70xx\nqVEVHUv9OjbvZ0osQM0F8slCOAt65RJBuyRpm0W6ScRE8zgDomE3EupEPkK0jamZ\nn6Npwz+COeK71rMAk/JEXBjuxZ3L/jC3TsmyVw2TKZ2KYJ3yQfT/FAJQrbpN6qlD\n2ablHB+3yyHVu1++CUyZG8skiTZfv+KO+s4BYI/g4c0aE8fraDM=\n=hIod\n-----END PGP SIGNATURE-----",
        "payload": "tree 16090e4557666ea4a7dfacfbc512345c651c579d\nparent 18ba984140be5fd03eee95a21796c498391146e6\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1493363793 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496284984 +0900\n\n[bench] Include ms/blk stats in Connect* benchmarks.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f850b0311a9adca506f6a7e7c10e3d996f493af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f850b0311a9adca506f6a7e7c10e3d996f493af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f850b0311a9adca506f6a7e7c10e3d996f493af/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18ba984140be5fd03eee95a21796c498391146e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18ba984140be5fd03eee95a21796c498391146e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18ba984140be5fd03eee95a21796c498391146e6"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8aedcabc43c0109f759d64672e8a3ded362a73e6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f850b0311a9adca506f6a7e7c10e3d996f493af/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f850b0311a9adca506f6a7e7c10e3d996f493af/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5f850b0311a9adca506f6a7e7c10e3d996f493af",
        "patch": "@@ -1492,6 +1492,7 @@ static int64_t nTimeConnect = 0;\n static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n+static int64_t nBlocksTotal = 0;\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n@@ -1522,6 +1523,8 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         return true;\n     }\n \n+    nBlocksTotal++;\n+\n     bool fScriptChecks = true;\n     if (!hashAssumeValid.IsNull()) {\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n@@ -1549,7 +1552,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     }\n \n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n-    LogPrint(BCLog::BENCH, \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n+    LogPrint(BCLog::BENCH, \"    - Sanity checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001, nTimeCheck * 0.001 / nBlocksTotal);\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -1616,7 +1619,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n-    LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n+    LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001, nTimeForks * 0.001 / nBlocksTotal);\n \n     CBlockUndo blockundo;\n \n@@ -1690,7 +1693,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n-    LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n+    LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001, nTimeConnect * 0.001 / nBlocksTotal);\n \n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n     if (block.vtx[0]->GetValueOut() > blockReward)\n@@ -1702,7 +1705,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (!control.Wait())\n         return state.DoS(100, error(\"%s: CheckQueue failed\", __func__), REJECT_INVALID, \"block-validation-failed\");\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n-    LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]\\n\", nInputs - 1, 0.001 * (nTime4 - nTime2), nInputs <= 1 ? 0 : 0.001 * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * 0.000001);\n+    LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", nInputs - 1, 0.001 * (nTime4 - nTime2), nInputs <= 1 ? 0 : 0.001 * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * 0.000001, nTimeVerify * 0.001 / nBlocksTotal);\n \n     if (fJustCheck)\n         return true;\n@@ -1734,10 +1737,10 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     view.SetBestBlock(pindex->GetBlockHash());\n \n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n-    LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001);\n+    LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001, nTimeIndex * 0.001 / nBlocksTotal);\n \n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n-    LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001);\n+    LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001, nTimeCallbacks * 0.001 / nBlocksTotal);\n \n     return true;\n }\n@@ -2088,26 +2091,26 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n-        LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n+        LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001, nTimeConnectTotal * 0.001 / nBlocksTotal);\n         bool flushed = view.Flush();\n         assert(flushed);\n     }\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n-    LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001);\n+    LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001, nTimeFlush * 0.001 / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n-    LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n+    LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001, nTimeChainState * 0.001 / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n-    LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n-    LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001);\n+    LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001, nTimePostConnect * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001, nTimeTotal * 0.001 / nBlocksTotal);\n \n     connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n     return true;"
      }
    ]
  },
  {
    "sha": "a473eff8f9896e7bcf357b7c97aaab6c623d2732",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDczZWZmOGY5ODk2ZTdiY2YzNTdiN2M5N2FhYWI2YzYyM2QyNzMy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-01T02:42:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-01T02:43:04Z"
      },
      "message": "[bench] Replace 0.00(000)1 with MICRO/MILLI #defines in validation.cpp.",
      "tree": {
        "sha": "ed508564c1112da7fb224151561e330154e681ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed508564c1112da7fb224151561e330154e681ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a473eff8f9896e7bcf357b7c97aaab6c623d2732",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlkvfzgACgkQV692LbM1\nMyIx2Q//a9sUq/tdLSJExF2M5c1hRkXVgIv/xfUNPo2VXSc+XOTDq3zjny1/Y3Z+\n2OxfKHO0ziY7oH9XlbagiIBqZxtHpPy1yOGcZPTnalO1kAG1905Gi0bya1o8B9+u\nhdOZJ26OpJ+9OPtykzLpSF1Luv8xntQbdFRnU/zx+ZYOUbwsQ86W2BEzc8GMe//+\nMJuXwJmgXNB70jdJs6WU0lSE7GohbUEOEqAbj8kOPL2tXBPzDUOf661hLXU743Vk\nZ5j55C7TaUQVExOnLXX9d2P2wMKPaAtjUMG5bffB5dpMGk4RDodpPg/wysApheel\n69D5ghqfBctdXtO7wa/L42uh818LKNVOhEUDT/PjiQWx2iEbvY4D7JIXlc9Aw177\nW/zxya0cHe3e7y1xtUq4GyYKoS5AhVgBZrbxuo2tTr+HrWatGdos+dTPoe3e64np\nUYMi9Jr6qWxUqq9pFgM/QMERYf3rpV0b9XNqsi96Dhunv+TPT5N++iaR+p7cL+bZ\nd3UwO5Z23/ylVxcf+NfXaZA2SIL2kKBuiipRZeYJyznqReOp1Vu6rr1hIk8CbNtz\nX/FCBDe/werH/K+Jf3dCvcx+ZU3VlGkjk6Wl3NRzaOTt4EfKaxHZGyL1IpSQlVR4\nnhN2ORpXZti1Jb2vGQ6OjfD+icLkFEJmEA+QAdjN7JL8jK3FkcM=\n=0nPk\n-----END PGP SIGNATURE-----",
        "payload": "tree ed508564c1112da7fb224151561e330154e681ed\nparent 5f850b0311a9adca506f6a7e7c10e3d996f493af\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496284954 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496284984 +0900\n\n[bench] Replace 0.00(000)1 with MICRO/MILLI #defines in validation.cpp.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a473eff8f9896e7bcf357b7c97aaab6c623d2732",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a473eff8f9896e7bcf357b7c97aaab6c623d2732",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a473eff8f9896e7bcf357b7c97aaab6c623d2732/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f850b0311a9adca506f6a7e7c10e3d996f493af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f850b0311a9adca506f6a7e7c10e3d996f493af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f850b0311a9adca506f6a7e7c10e3d996f493af"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "9797ce8cc7190e170bf982b9904caac8f963f5b6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a473eff8f9896e7bcf357b7c97aaab6c623d2732/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a473eff8f9896e7bcf357b7c97aaab6c623d2732/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a473eff8f9896e7bcf357b7c97aaab6c623d2732",
        "patch": "@@ -51,6 +51,9 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n+#define MICRO 0.000001\n+#define MILLI 0.001\n+\n /**\n  * Global state\n  */\n@@ -1552,7 +1555,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     }\n \n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n-    LogPrint(BCLog::BENCH, \"    - Sanity checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001, nTimeCheck * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"    - Sanity checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime1 - nTimeStart), nTimeCheck * MICRO, nTimeCheck * MILLI / nBlocksTotal);\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -1619,7 +1622,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n-    LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001, nTimeForks * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);\n \n     CBlockUndo blockundo;\n \n@@ -1693,7 +1696,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n-    LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001, nTimeConnect * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n \n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n     if (block.vtx[0]->GetValueOut() > blockReward)\n@@ -1705,7 +1708,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (!control.Wait())\n         return state.DoS(100, error(\"%s: CheckQueue failed\", __func__), REJECT_INVALID, \"block-validation-failed\");\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n-    LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", nInputs - 1, 0.001 * (nTime4 - nTime2), nInputs <= 1 ? 0 : 0.001 * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * 0.000001, nTimeVerify * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", nInputs - 1, MILLI * (nTime4 - nTime2), nInputs <= 1 ? 0 : MILLI * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * MICRO, nTimeVerify * MILLI / nBlocksTotal);\n \n     if (fJustCheck)\n         return true;\n@@ -1737,10 +1740,10 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     view.SetBestBlock(pindex->GetBlockHash());\n \n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n-    LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001, nTimeIndex * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime5 - nTime4), nTimeIndex * MICRO, nTimeIndex * MILLI / nBlocksTotal);\n \n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n-    LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001, nTimeCallbacks * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n \n     return true;\n }\n@@ -1959,7 +1962,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         bool flushed = view.Flush();\n         assert(flushed);\n     }\n-    LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n+    LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n@@ -2080,7 +2083,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Apply the block atomically to the chain state.\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n     int64_t nTime3;\n-    LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n+    LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n     {\n         CCoinsViewCache view(pcoinsTip);\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n@@ -2091,26 +2094,26 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n-        LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001, nTimeConnectTotal * 0.001 / nBlocksTotal);\n+        LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime3 - nTime2) * MILLI, nTimeConnectTotal * MICRO, nTimeConnectTotal * MILLI / nBlocksTotal);\n         bool flushed = view.Flush();\n         assert(flushed);\n     }\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n-    LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001, nTimeFlush * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n-    LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001, nTimeChainState * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n-    LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001, nTimePostConnect * 0.001 / nBlocksTotal);\n-    LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001, nTimeTotal * 0.001 / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n+    LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n     connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n     return true;\n@@ -4123,7 +4126,7 @@ void DumpMempool(void)\n         file.fclose();\n         RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\");\n         int64_t last = GetTimeMicros();\n-        LogPrintf(\"Dumped mempool: %gs to copy, %gs to dump\\n\", (mid-start)*0.000001, (last-mid)*0.000001);\n+        LogPrintf(\"Dumped mempool: %gs to copy, %gs to dump\\n\", (mid-start)*MICRO, (last-mid)*MICRO);\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to dump mempool: %s. Continuing anyway.\\n\", e.what());\n     }"
      }
    ]
  }
]