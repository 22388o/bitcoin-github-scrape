[
  {
    "sha": "fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUyZWI1NWM5ZmUzZjdmODUxN2E1ODA0YTU1ZWRiN2Y3YjNhNjI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-08T14:03:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-08T14:06:21Z"
      },
      "message": "test: Remove True argument to CBlock::serialize\n\nUnnamed arguments are confusing as to what they mean without looking up\nthe function signature.\n\nSince segwit is active by default in regtest, and all blocks are\nserialized with witness (#15664, c459c5f), remove the argument\n`with_witness=True` from all calls to `CBlock::serialize` and\n`BlockTransactions::serialize`.\n\nThis diff has been created with a script, but is better reviewed without\na scripted diff.\n\nsed -i --regexp-extended -e 's/block(_?[2a-z]*)\\.serialize\\([a-z_]*=?True/block\\1.serialize(/g' $(git grep -l serialize ./test)",
      "tree": {
        "sha": "5ed0ba914b00a7c2c108626a287bc881d0499604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ed0ba914b00a7c2c108626a287bc881d0499604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgfqQv+IVLjNQ9w5B97UWjJSkd0b3eAMyuIIHdO4sKmDMIcbB7G8ct8EAKJJGWg\nGPGaVE8RnHAL0BvDziO3PyJURA3lQGTTYbp8ly6DAvapUWAptnzyDjBKzDDV7BLh\nNmj+nxa7bQWGAux42WyKYeVQNyorgqTNUCBa/VrICSenTdNAFOpRBu8gMXkDtM1f\noE3s09fYV1GbppodzvNjve2k7X2yDdlnoNKiDM4iu+DIiahf7Bc1SUDYWuVIJmjv\nvUDHKA73LOGLidmjl57pUpyQYYaFMPVD7hUg5TfDfx60S0CP4cgcOS3Zkr1nICwx\nLCEYwD2aaLaqm30N9pcnUSTooDSFGmqZbsoQyahTvPIIpVbmQPPQh08sDrVTUiH7\ny137DrseMLJ/9//09PPnFiD10aRBtZi9/c7fOyBo9WNdTt7P5cCBCbsSVe3GFDOH\n+GQxFZLJMscMMutrJ2v1rTvbouAK06hMrjKSAvV9tHU0Kg/Y6L6g+KhXOGdJd2Fx\nlV8uj5Lh\n=kw3n\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ed0ba914b00a7c2c108626a287bc881d0499604\nparent c459c5f70176928adcee4935813a2dbe7f4dbd51\nauthor MarcoFalke <falke.marco@gmail.com> 1557324186 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1557324381 -0400\n\ntest: Remove True argument to CBlock::serialize\n\nUnnamed arguments are confusing as to what they mean without looking up\nthe function signature.\n\nSince segwit is active by default in regtest, and all blocks are\nserialized with witness (#15664, c459c5f), remove the argument\n`with_witness=True` from all calls to `CBlock::serialize` and\n`BlockTransactions::serialize`.\n\nThis diff has been created with a script, but is better reviewed without\na scripted diff.\n\nsed -i --regexp-extended -e 's/block(_?[2a-z]*)\\.serialize\\([a-z_]*=?True/block\\1.serialize(/g' $(git grep -l serialize ./test)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c459c5f70176928adcee4935813a2dbe7f4dbd51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c459c5f70176928adcee4935813a2dbe7f4dbd51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c459c5f70176928adcee4935813a2dbe7f4dbd51"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d38eca6cbe15b398548aab0c8ed7214d568015f0",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "patch": "@@ -378,7 +378,7 @@ def test_bip68_not_consensus(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.nodes[0].submitblock(block.serialize(True).hex())\n+        self.nodes[0].submitblock(block.serialize().hex())\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n     def activateCSV(self):"
      },
      {
        "sha": "60a703c48f610a5ae2e4a720f9fb33eb3bc51224",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "patch": "@@ -108,7 +108,7 @@ def block_submit(self, node, txs, witness=False, accept=False):\n         witness and add_witness_commitment(block)\n         block.rehash()\n         block.solve()\n-        node.submitblock(block.serialize(True).hex())\n+        node.submitblock(block.serialize().hex())\n         if (accept):\n             assert_equal(node.getbestblockhash(), block.hash)\n             self.tip = block.sha256"
      },
      {
        "sha": "512659f1d46dc99f0fe8402a734efe5d9abbda93",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "patch": "@@ -111,7 +111,7 @@ def get_virtual_size(witness_block):\n \n     Virtual size is base + witness/4.\"\"\"\n     base_size = len(witness_block.serialize(with_witness=False))\n-    total_size = len(witness_block.serialize(with_witness=True))\n+    total_size = len(witness_block.serialize())\n     # the \"+3\" is so we round up\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n@@ -403,7 +403,7 @@ def test_block_relay(self):\n                 block_hash = int(block_hash, 16)\n                 block = self.test_node.request_block(block_hash, 2)\n                 wit_block = self.test_node.request_block(block_hash, 2 | MSG_WITNESS_FLAG)\n-                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), wit_block.serialize())\n                 assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n         else:\n             # After activation, witness blocks and non-witness blocks should\n@@ -419,15 +419,15 @@ def test_block_relay(self):\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n             wit_block = self.test_node.request_block(block.sha256, 2 | MSG_WITNESS_FLAG)\n-            assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(), hex_str_to_bytes(rpc_block))\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n-            assert_equal(wit_block.serialize(True), block.serialize(True))\n+            assert_equal(wit_block.serialize(), block.serialize())\n \n             # Test size, vsize, weight\n             rpc_details = self.nodes[0].getblock(block.hash, True)\n-            assert_equal(rpc_details[\"size\"], len(block.serialize(True)))\n+            assert_equal(rpc_details[\"size\"], len(block.serialize()))\n             assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n-            weight = 3 * len(block.serialize(False)) + len(block.serialize(True))\n+            weight = 3 * len(block.serialize(False)) + len(block.serialize())\n             assert_equal(rpc_details[\"weight\"], weight)\n \n             # Upgraded node should not ask for blocks from unupgraded\n@@ -884,13 +884,13 @@ def test_block_malleability(self):\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n-        self.nodes[0].submitblock(block.serialize(True).hex())\n+        self.nodes[0].submitblock(block.serialize().hex())\n \n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n         assert get_virtual_size(block) < MAX_BLOCK_BASE_SIZE\n-        self.nodes[0].submitblock(block.serialize(True).hex())\n+        self.nodes[0].submitblock(block.serialize().hex())\n \n         assert self.nodes[0].getbestblockhash() == block.hash\n \n@@ -969,7 +969,7 @@ def test_witness_block_size(self):\n         assert_equal(vsize, MAX_BLOCK_BASE_SIZE + 1)\n         # Make sure that our test case would exceed the old max-network-message\n         # limit\n-        assert len(block.serialize(True)) > 2 * 1024 * 1024\n+        assert len(block.serialize()) > 2 * 1024 * 1024\n \n         test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n@@ -997,14 +997,14 @@ def test_submit_block(self):\n         add_witness_commitment(block, nonce=1)\n         block.vtx[0].wit = CTxWitness()  # drop the nonce\n         block.solve()\n-        self.nodes[0].submitblock(block.serialize(True).hex())\n+        self.nodes[0].submitblock(block.serialize().hex())\n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n         add_witness_commitment(block, nonce=0)\n         block.vtx[0].wit = CTxWitness()\n         block.solve()\n-        self.nodes[0].submitblock(block.serialize(True).hex())\n+        self.nodes[0].submitblock(block.serialize().hex())\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         # This time, add a tx with non-empty witness, but don't supply\n@@ -1019,7 +1019,7 @@ def test_submit_block(self):\n         block_2.vtx[0].vout.pop()\n         block_2.vtx[0].wit = CTxWitness()\n \n-        self.nodes[0].submitblock(block_2.serialize(True).hex())\n+        self.nodes[0].submitblock(block_2.serialize().hex())\n         # Tip should not advance!\n         assert self.nodes[0].getbestblockhash() != block_2.hash\n "
      },
      {
        "sha": "00190e4cbd9589b548b0d17d54e3ec4b145924cb",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "patch": "@@ -1155,7 +1155,7 @@ def __repr__(self):\n class msg_witness_block(msg_block):\n     __slots__ = ()\n     def serialize(self):\n-        r = self.block.serialize(with_witness=True)\n+        r = self.block.serialize()\n         return r\n \n \n@@ -1454,5 +1454,5 @@ class msg_witness_blocktxn(msg_blocktxn):\n \n     def serialize(self):\n         r = b\"\"\n-        r += self.block_transactions.serialize(with_witness=True)\n+        r += self.block_transactions.serialize()\n         return r"
      },
      {
        "sha": "4d9bacf2996daf4a35f5a0da9d3bede11f6084b3",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "patch": "@@ -360,7 +360,7 @@ def submit_block_with_tx(node, tx):\n     block.hashMerkleRoot = block.calc_merkle_root()\n     add_witness_commitment(block)\n     block.solve()\n-    node.submitblock(block.serialize(True).hex())\n+    node.submitblock(block.serialize().hex())\n     return block\n \n def test_no_more_inputs_fails(rbf_node, dest_address):"
      }
    ]
  },
  {
    "sha": "fa1d7667173eeae363d3729e3fc654057335cb44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFkNzY2NzE3M2VlYWUzNjNkMzcyOWUzZmM2NTQwNTczMzVjYjQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-08T14:21:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-08T15:53:02Z"
      },
      "message": "tests: Make msg_block a witness block\n\nThis diff has been generated with the following script, but is better\nreviewed without looking at the script.\n\n # -BEGIN VERIFY SCRIPT-\necho \"Use msg_witness_block everywhere, except for tests that require msg_block\"\n # This could be a separate commit, but it is combined with the\n # following scripts to reduce the overall diff\nsed -i -e 's/msg_block/msg_witness_block/g' ./test/functional/{feature_assumevalid,feature_cltv,feature_dersig,feature_versionbits_warning,p2p_fingerprint,p2p_sendheaders,p2p_unrequested_blocks,example_test,rpc_blockchain}.py\n\necho \"Rename msg_block to msg_no_witness_block\"\n # Rename msg_block to msg_no_witness_block in all tests (not the\n # framework)\nsed -i -e 's/msg_block/msg_no_witness_block/g' $(git grep -l msg_block ./test/functional/*.py)\n # Derive msg_no_witness_block from msg_block\n # Make msg_block a witness block in messages.py\npatch -p1 --fuzz 0 << EOF\ndiff --git a/test/functional/test_framework/messages.py b/test/functional/test_framework/messages.py\nindex 00190e4cbd..e454ed5987 100755\n--- a/test/functional/test_framework/messages.py\n+++ b/test/functional/test_framework/messages.py\n@@ -1133 +1133 @@ class msg_block:\n-        return self.block.serialize(with_witness=False)\n+        return self.block.serialize()\n@@ -1155 +1155 @@ class msg_generic:\n-class msg_witness_block(msg_block):\n+class msg_no_witness_block(msg_block):\n@@ -1158,2 +1158 @@ class msg_witness_block(msg_block):\n-        r = self.block.serialize()\n-        return r\n+        return self.block.serialize(with_witness=False)\n@@ -1445 +1444 @@ class msg_blocktxn:\n-        r += self.block_transactions.serialize(with_witness=False)\n+        r += self.block_transactions.serialize()\n@@ -1452 +1451 @@ class msg_blocktxn:\n-class msg_witness_blocktxn(msg_blocktxn):\n+class msg_no_witness_blocktxn(msg_blocktxn):\n@@ -1456,3 +1455 @@ class msg_witness_blocktxn(msg_blocktxn):\n-        r = b\"\"\n-        r += self.block_transactions.serialize()\n-        return r\n+        return self.block_transactions.serialize(with_witness=False)\nEOF\n # Conclude rename of msg_block to msg_no_witness_block\nsed -i -e 's/msg_witness_block/msg_block/g' $(git grep -l msg_witness_block)\n # -END VERIFY SCRIPT-",
      "tree": {
        "sha": "20df52d63f8bed0565e30feac72da444fe1e1690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20df52d63f8bed0565e30feac72da444fe1e1690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1d7667173eeae363d3729e3fc654057335cb44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi4Awv/bmMSHWJ9jFbbq2jQ1nRtpPA1bgq8zEERpXx4VeYcz7yquQQPf0b1DL0P\nURthgiTiteN4so8/QgBbJCZIQ2yJHLnX2xD7R6S28//9mGrakE6FSgN29Nj52YrT\nTqodZnLtWbTSE9YQ8dRjQsi/skqx4lMHLCSH1YG0BvNUU2Ojv4uESJE6WbwH44Dz\nlkLyqGLZTLCJdxxFP52ocdAPHXmtgtiMGhrUILLuzwK5M+X+DtHX+l9WjK3EfDMf\nAmWumSjRmTEoFfIAcnkdhkI0TlsBc/T7dk8sR+oeqMXGkt8HAURHCCBcWtd55Pz8\nqy1AJm9x0SBPYBi/qqAmdrxYI5K+1tC6T3NsQG+V5HmgsYXUehSfJDRHPgXpLKel\naWlHCIFPA27+cZ6YhvOYsOTfZb1YBiq67XQQf3jZE0mmNHCrmiYwGQEiI7DdcbHa\nISJaR7JAV/oHz3x/mEsx6gAuu74q8Egfx4XX5fu4L1OZa5yJcTfiY8V5QnOvOA3k\n+cCWTH7S\n=eahb\n-----END PGP SIGNATURE-----",
        "payload": "tree 20df52d63f8bed0565e30feac72da444fe1e1690\nparent fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625\nauthor MarcoFalke <falke.marco@gmail.com> 1557325285 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1557330782 -0400\n\ntests: Make msg_block a witness block\n\nThis diff has been generated with the following script, but is better\nreviewed without looking at the script.\n\n # -BEGIN VERIFY SCRIPT-\necho \"Use msg_witness_block everywhere, except for tests that require msg_block\"\n # This could be a separate commit, but it is combined with the\n # following scripts to reduce the overall diff\nsed -i -e 's/msg_block/msg_witness_block/g' ./test/functional/{feature_assumevalid,feature_cltv,feature_dersig,feature_versionbits_warning,p2p_fingerprint,p2p_sendheaders,p2p_unrequested_blocks,example_test,rpc_blockchain}.py\n\necho \"Rename msg_block to msg_no_witness_block\"\n # Rename msg_block to msg_no_witness_block in all tests (not the\n # framework)\nsed -i -e 's/msg_block/msg_no_witness_block/g' $(git grep -l msg_block ./test/functional/*.py)\n # Derive msg_no_witness_block from msg_block\n # Make msg_block a witness block in messages.py\npatch -p1 --fuzz 0 << EOF\ndiff --git a/test/functional/test_framework/messages.py b/test/functional/test_framework/messages.py\nindex 00190e4cbd..e454ed5987 100755\n--- a/test/functional/test_framework/messages.py\n+++ b/test/functional/test_framework/messages.py\n@@ -1133 +1133 @@ class msg_block:\n-        return self.block.serialize(with_witness=False)\n+        return self.block.serialize()\n@@ -1155 +1155 @@ class msg_generic:\n-class msg_witness_block(msg_block):\n+class msg_no_witness_block(msg_block):\n@@ -1158,2 +1158 @@ class msg_witness_block(msg_block):\n-        r = self.block.serialize()\n-        return r\n+        return self.block.serialize(with_witness=False)\n@@ -1445 +1444 @@ class msg_blocktxn:\n-        r += self.block_transactions.serialize(with_witness=False)\n+        r += self.block_transactions.serialize()\n@@ -1452 +1451 @@ class msg_blocktxn:\n-class msg_witness_blocktxn(msg_blocktxn):\n+class msg_no_witness_blocktxn(msg_blocktxn):\n@@ -1456,3 +1455 @@ class msg_witness_blocktxn(msg_blocktxn):\n-        r = b\"\"\n-        r += self.block_transactions.serialize()\n-        return r\n+        return self.block_transactions.serialize(with_witness=False)\nEOF\n # Conclude rename of msg_block to msg_no_witness_block\nsed -i -e 's/msg_witness_block/msg_block/g' $(git grep -l msg_witness_block)\n # -END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d7667173eeae363d3729e3fc654057335cb44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d7667173eeae363d3729e3fc654057335cb44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d7667173eeae363d3729e3fc654057335cb44/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa52eb55c9fe3f7f8517a5804a55edb7f7b3a625"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 24,
      "deletions": 27
    },
    "files": [
      {
        "sha": "09948579123fbec1214de704bb8bc04068a4181b",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fa1d7667173eeae363d3729e3fc654057335cb44",
        "patch": "@@ -10,7 +10,7 @@\n import random\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n+from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n@@ -114,7 +114,7 @@ def build_block_on_tip(self, node, segwit=False):\n     # Create 10 more anyone-can-spend utxo's for testing.\n     def make_utxos(self):\n         block = self.build_block_on_tip(self.nodes[0])\n-        self.segwit_node.send_and_ping(msg_block(block))\n+        self.segwit_node.send_and_ping(msg_no_witness_block(block))\n         assert int(self.nodes[0].getbestblockhash(), 16) == block.sha256\n         self.nodes[0].generatetoaddress(100, self.nodes[0].getnewaddress(address_type=\"bech32\"))\n \n@@ -130,7 +130,7 @@ def make_utxos(self):\n         block2.vtx.append(tx)\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n         block2.solve()\n-        self.segwit_node.send_and_ping(msg_block(block2))\n+        self.segwit_node.send_and_ping(msg_no_witness_block(block2))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block2.sha256)\n         self.utxos.extend([[tx.sha256, i, out_value] for i in range(10)])\n \n@@ -408,9 +408,9 @@ def test_compactblock_requests(self, test_node, segwit=True):\n \n             # Send the coinbase, and verify that the tip advances.\n             if version == 2:\n-                msg = msg_witness_blocktxn()\n-            else:\n                 msg = msg_blocktxn()\n+            else:\n+                msg = msg_no_witness_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n             test_node.send_and_ping(msg)\n@@ -463,9 +463,9 @@ def test_tip_after_message(node, peer, msg, tip):\n \n         test_getblocktxn_response(comp_block, test_node, [1, 2, 3, 4, 5])\n \n-        msg_bt = msg_blocktxn()\n+        msg_bt = msg_no_witness_blocktxn()\n         if with_witness:\n-            msg_bt = msg_witness_blocktxn()  # serialize with witnesses\n+            msg_bt = msg_blocktxn()  # serialize with witnesses\n         msg_bt.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n         test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n@@ -554,9 +554,9 @@ def test_incorrect_blocktxn_response(self, test_node):\n         # different peer provide the block further down, so that we're still\n         # verifying that the block isn't marked bad permanently. This is good\n         # enough for now.\n-        msg = msg_blocktxn()\n+        msg = msg_no_witness_blocktxn()\n         if version == 2:\n-            msg = msg_witness_blocktxn()\n+            msg = msg_blocktxn()\n         msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n         test_node.send_and_ping(msg)\n \n@@ -571,9 +571,9 @@ def test_incorrect_blocktxn_response(self, test_node):\n \n         # Deliver the block\n         if version == 2:\n-            test_node.send_and_ping(msg_witness_block(block))\n-        else:\n             test_node.send_and_ping(msg_block(block))\n+        else:\n+            test_node.send_and_ping(msg_no_witness_block(block))\n         assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     def test_getblocktxn_handler(self, test_node):\n@@ -785,7 +785,7 @@ def announce_cmpct_block(node, peer):\n         delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n         assert int(node.getbestblockhash(), 16) != block.sha256\n \n-        msg = msg_blocktxn()\n+        msg = msg_no_witness_blocktxn()\n         msg.block_transactions.blockhash = block.sha256\n         msg.block_transactions.transactions = block.vtx[1:]\n         stalling_peer.send_and_ping(msg)"
      },
      {
        "sha": "271c5bbb0eaaaf164fd44310d475e6bf0ead9f4c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa1d7667173eeae363d3729e3fc654057335cb44",
        "patch": "@@ -25,12 +25,12 @@\n     MSG_WITNESS_FLAG,\n     NODE_NETWORK,\n     NODE_WITNESS,\n-    msg_block,\n+    msg_no_witness_block,\n     msg_getdata,\n     msg_headers,\n     msg_inv,\n     msg_tx,\n-    msg_witness_block,\n+    msg_block,\n     msg_witness_tx,\n     ser_uint256,\n     ser_vector,\n@@ -134,7 +134,7 @@ def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=Non\n     - use the getbestblockhash rpc to check for acceptance.\"\"\"\n     reason = [reason] if reason else []\n     with node.assert_debug_log(expected_msgs=reason):\n-        p2p.send_message(msg_witness_block(block) if with_witness else msg_block(block))\n+        p2p.send_message(msg_block(block) if with_witness else msg_no_witness_block(block))\n         p2p.sync_with_ping()\n         assert_equal(node.getbestblockhash() == block.hash, accepted)\n \n@@ -298,7 +298,7 @@ def test_non_witness_transaction(self):\n \n         block = self.build_next_block(version=1)\n         block.solve()\n-        self.test_node.send_message(msg_block(block))\n+        self.test_node.send_message(msg_no_witness_block(block))\n         self.test_node.sync_with_ping()  # make sure the block was processed\n         txid = block.vtx[0].sha256\n \n@@ -345,7 +345,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n \n         # But it should not be permanently marked bad...\n         # Resend without witness information.\n-        self.test_node.send_message(msg_block(block))\n+        self.test_node.send_message(msg_no_witness_block(block))\n         self.test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n@@ -791,7 +791,7 @@ def test_witness_commitments(self):\n         block.solve()\n \n         # Test the test -- witness serialization should be different\n-        assert msg_witness_block(block).serialize() != msg_block(block).serialize()\n+        assert msg_block(block).serialize() != msg_no_witness_block(block).serialize()\n \n         # This empty block should be valid.\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)"
      },
      {
        "sha": "e454ed5987a25675276aa72ac3ecbbbc2e946237",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d7667173eeae363d3729e3fc654057335cb44/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa1d7667173eeae363d3729e3fc654057335cb44",
        "patch": "@@ -1130,7 +1130,7 @@ def deserialize(self, f):\n         self.block.deserialize(f)\n \n     def serialize(self):\n-        return self.block.serialize(with_witness=False)\n+        return self.block.serialize()\n \n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n@@ -1152,11 +1152,10 @@ def __repr__(self):\n         return \"msg_generic()\"\n \n \n-class msg_witness_block(msg_block):\n+class msg_no_witness_block(msg_block):\n     __slots__ = ()\n     def serialize(self):\n-        r = self.block.serialize()\n-        return r\n+        return self.block.serialize(with_witness=False)\n \n \n class msg_getaddr:\n@@ -1442,17 +1441,15 @@ def deserialize(self, f):\n \n     def serialize(self):\n         r = b\"\"\n-        r += self.block_transactions.serialize(with_witness=False)\n+        r += self.block_transactions.serialize()\n         return r\n \n     def __repr__(self):\n         return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n \n \n-class msg_witness_blocktxn(msg_blocktxn):\n+class msg_no_witness_blocktxn(msg_blocktxn):\n     __slots__ = ()\n \n     def serialize(self):\n-        r = b\"\"\n-        r += self.block_transactions.serialize()\n-        return r\n+        return self.block_transactions.serialize(with_witness=False)"
      }
    ]
  }
]