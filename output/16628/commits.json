[
  {
    "sha": "3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjUzMzVjZjkwOGZjNjFhNWYzMmZlMzdkNGNiMGViOWQ1OTIzZDNk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:19:54Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-16T02:42:36Z"
      },
      "message": "refactor: remove redundant pindexPrev from TestBlockValidity",
      "tree": {
        "sha": "5485dc26fe71a63deb739ba5e4496d5b04571aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5485dc26fe71a63deb739ba5e4496d5b04571aed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl1WGBwACgkQV692LbM1\nMyL6CA/+IEcvybub3p0y2R32Qex1Ax5taosjSrd5mCEnanVaqLRIMw1P+spoqEMh\nMxdaNybA/+rP2K88r+AmetHK9xGq7GIVHHThw4ZTD5B/5ZOm+X6Ql5Xvu//gcqeR\njzPjhCeMv3u735aTXJVV3OIua+Q7vbvXEHmQkTN7zSRJETPFxZDHXhOlNttOrgA5\nzOlE16421VhRKQneNbvA+fYvZRCrU6+kk6vAwNsz9eIx/WIJ+jSVU2FcI2O/dtw3\ndmeTe5z8+QaeCRXx5dkjrSU6cGgND04uHFdmN9ohHw/47dOYDueTd/P1bls5puTF\nP3NmjRiInl9VzwOhMR1sfL62MY8k5unPtSWzhIjvJIXb3Iqw3DHbnjmt9u9/IlNB\nZi8KgIEA8184688z9Bm/DnIySWpE04KaNDcWh/Wp7wKw4nYXenf2QeMnqyh/TsT6\nSdWfCngEweTpZK38F258ygU3U9rj8HX9hqDO13FAI+9z7wOE/hNSFxysuYEVrMzu\nMIGMkY+Bf5WBo/8bCqa6pfrBIBJJEyphbK4KqMUTLXCHIARP9zrUNRhv9rAo/x+T\nL/2C5bP4TmdWmJLMZ7ze3Q+pKuK0ZM3+EQkzEP+g1hRsT/48Xvc68+rxqDvAzvD4\n0J6XM4VPGalReetUjiRZQfmcGQEEF6WA3GJ6a1DHX0gLGK+LGCg=\n=t9C0\n-----END PGP SIGNATURE-----",
        "payload": "tree 5485dc26fe71a63deb739ba5e4496d5b04571aed\nparent 1bf2ff2bf8e8bef3ba21e635aabb1b0964062743\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563351594 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1565923356 +0900\n\nrefactor: remove redundant pindexPrev from TestBlockValidity\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bf2ff2bf8e8bef3ba21e635aabb1b0964062743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bf2ff2bf8e8bef3ba21e635aabb1b0964062743",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bf2ff2bf8e8bef3ba21e635aabb1b0964062743"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "71cb87e7bb7042c4ec69d35ecc2ee7fdaf744cf1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
        "patch": "@@ -165,7 +165,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *pblock, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "7e10a0851296f0c0e5d2e5f222fc1d2a0c345ab6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
        "patch": "@@ -402,7 +402,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, false, true);\n             return BIP22ValidationResult(state);\n         }\n "
      },
      {
        "sha": "c4f2212d691e076e7551b1010d805b63fc11aaf9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
        "patch": "@@ -3542,10 +3542,10 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(pindexPrev && pindexPrev == ::ChainActive().Tip());\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n     CCoinsViewCache viewNew(&::ChainstateActive().CoinsTip());\n     uint256 block_hash(block.GetHash());\n     CBlockIndex indexDummy(block);"
      },
      {
        "sha": "6409f8f2fd9d8ae4ed1bc9a25ed3de4801b53859",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3b5335cf908fc61a5f32fe37d4cb0eb9d5923d3d",
        "patch": "@@ -381,7 +381,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n  *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */"
      }
    ]
  }
]