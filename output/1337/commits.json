[
  {
    "sha": "d4cdd87e2d1d2a2e580058e8573d9361187188fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGNkZDg3ZTJkMWQyYTJlNTgwMDU4ZTg1NzNkOTM2MTE4NzE4OGZi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-21T14:31:44Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-05T18:07:10Z"
      },
      "message": "Add command line option -quietinitial.\n\nThis makes debugg.log quieter during block chain catch up, so that it is easier to see the block download process.",
      "tree": {
        "sha": "b34a9982f3369a9b940f8b142982e1b1ad0fa98c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b34a9982f3369a9b940f8b142982e1b1ad0fa98c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4cdd87e2d1d2a2e580058e8573d9361187188fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4cdd87e2d1d2a2e580058e8573d9361187188fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4cdd87e2d1d2a2e580058e8573d9361187188fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4cdd87e2d1d2a2e580058e8573d9361187188fb/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46e06b875d861661c4a3002e8ae3d080b5893053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e06b875d861661c4a3002e8ae3d080b5893053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46e06b875d861661c4a3002e8ae3d080b5893053"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 141,
      "deletions": 36
    },
    "files": [
      {
        "sha": "9cc8b15cbb5dc2a6a7566c03110c722006256d33",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -303,7 +303,8 @@ void CAddrMan::Good_(const CService &addr, int64 nTime)\n     // TODO: maybe re-add the node, but for now, just bail out\n     if (nUBucket == -1) return;\n \n-    printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n \n     // move nId to the tried tables\n     MakeTried(info, nId, nUBucket);"
      },
      {
        "sha": "b92aed2821d678896aa74cb1c24fb77806e47d0a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -418,7 +418,7 @@ class CAddrMan\n             fRet |= Add_(addr, source, nTimePenalty);\n             Check();\n         }\n-        if (fRet)\n+        if (fRet && (!fQuietInitial || CaughtUp()))\n             printf(\"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort().c_str(), source.ToString().c_str(), nTried, nNew);\n         return fRet;\n     }\n@@ -434,7 +434,7 @@ class CAddrMan\n                 nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n             Check();\n         }\n-        if (nAdd)\n+        if (nAdd && (!fQuietInitial || CaughtUp()))\n             printf(\"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString().c_str(), nTried, nNew);\n         return nAdd > 0;\n     }"
      },
      {
        "sha": "a8ba929ff0d545cad11ae3586d4f97371906a95f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -243,6 +243,7 @@ std::string HelpMessage()\n         \"  -testnet               \" + _(\"Use the test network\") + \"\\n\" +\n         \"  -debug                 \" + _(\"Output extra debugging information\") + \"\\n\" +\n         \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n+        \"  -quietinitial          \" + _(\"Reduce debug output on initial block download\") + \"\\n\" +\n         \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n #ifdef WIN32\n         \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n@@ -364,6 +365,7 @@ bool AppInit2()\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n+    fQuietInitial = GetBoolArg(\"-quietinitial\");\n \n     if (mapArgs.count(\"-timeout\"))\n     {"
      },
      {
        "sha": "bce3fdcc2bc340e7d0ccf3406bf353c5c77876e5",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -319,7 +319,8 @@ void ThreadIRCSeed2(void* parg)\n                 // index 7 is limited to 16 characters\n                 // could get full length name at index 10, but would be different from join messages\n                 strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));\n-                printf(\"IRC got who\\n\");\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"IRC got who\\n\");\n             }\n \n             if (vWords[1] == \"JOIN\" && vWords[0].size() > 1)"
      },
      {
        "sha": "6f001e03af252caacd6521e4baed2fd43456c89f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 26,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -189,8 +189,9 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n \n-    printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n-        mapOrphanTransactions.size());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n+            mapOrphanTransactions.size());\n     return true;\n }\n \n@@ -939,6 +940,11 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n+bool CaughtUp()\n+{\n+    return (nBestHeight >= GetNumBlocksOfPeers());\n+}\n+\n bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n@@ -1064,8 +1070,11 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Get prev tx from single transactions in memory\n             {\n                 LOCK(mempool.cs);\n-                if (!mempool.exists(prevout.hash))\n-                    return error(\"FetchInputs() : %s mempool Tx prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                if (!mempool.exists(prevout.hash)) {\n+                    if (!fQuietInitial || CaughtUp())\n+                        printf(\"mempool.exists() : %s prev (%s) not found\\n\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n                 txPrev = mempool.lookup(prevout.hash);\n             }\n             if (!fFound)\n@@ -2250,7 +2259,8 @@ bool CAlert::ProcessAlert()\n             uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n     }\n \n-    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n     return true;\n }\n \n@@ -2515,6 +2525,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message inv size() = %d\", vInv.size());\n         }\n+        int invblocks = 0;\n+        int askblocks = 0;\n+        int orphanget = 0;\n+        int lastblockget = 0;\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n@@ -2531,30 +2545,60 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             if (fShutdown)\n                 return true;\n+\n+            if (inv.type == MSG_BLOCK) invblocks++;\n+\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(txdb, inv);\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n-            if (!fAlreadyHave)\n-                pfrom->AskFor(inv);\n-            else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n-            } else if (nInv == nLastBlock) {\n-                // In case we are on a very long side-chain, it is possible that we already have\n-                // the last block in an inv bundle sent in response to getblocks. Try to detect\n-                // this situation and push another getblocks to continue.\n-                std::vector<CInv> vGetData(1,inv);\n-                pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n-                if (fDebug)\n-                    printf(\"force request: %s\\n\", inv.ToString().c_str());\n+            if (!fAlreadyHave) {\n+                if (inv.type == MSG_BLOCK) {\n+                    int64 nRequestTime = pfrom->AskForBlock(inv);\n+                    if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                        printf(\"askfor %s   %s (%\"PRI64d\")   %s\\n\", inv.ToString().c_str(),\n+                          DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), nRequestTime,\n+                          pfrom->addr.ToString().c_str());\n+                    askblocks++;\n+                } else\n+                    pfrom->AskFor(inv);\n+            } else {\n+                if (inv.type == MSG_BLOCK && vInv.size() == 1)\n+                    printf(\"inv %s at %s\\n\", inv.ToString().c_str(), pfrom->addr.ToString().c_str());\n+                if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+                    pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n+                    orphanget++;\n+                    if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                        printf(\"orphan getblocks %s to %s\\n\", inv.ToString().c_str(),\n+                          pfrom->addr.ToString().c_str());\n+                } else if (nInv == nLastBlock) {\n+                    // In case we are on a very long side-chain, it is possible that we already have\n+                    // the last block in an inv bundle sent in response to getblocks. Try to detect\n+                    // this situation and push another getblocks to continue.\n+                    std::vector<CInv> vGetData(1,inv);\n+                    pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n+                    lastblockget++;\n+                    if (fDebug)\n+                        printf(\"force request: %s\\n\", inv.ToString().c_str());\n+                }\n             }\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n+        } // for each item in inv bundle\n+\n+        if (fQuietInitial && !CaughtUp()) {\n+            if (invblocks && vInv.size() > 1)\n+                printf(\"inv containing %d (askfor %d) blocks at %s\\n\", invblocks, askblocks,\n+                  pfrom->addr.ToString().c_str());\n+            if (orphanget)\n+                printf(\"orphan getblocks (%d) to %s\\n\", orphanget, pfrom->addr.ToString().c_str());\n+            if (lastblockget)\n+                printf(\"lastblock getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n         }\n-    }\n+    } // strCommand == \"inv\"\n \n \n     else if (strCommand == \"getdata\")\n@@ -2566,16 +2610,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message getdata size() = %d\", vInv.size());\n         }\n+        int nBlocks = 0;\n+        int nTxs = 0;\n \n         BOOST_FOREACH(const CInv& inv, vInv)\n         {\n             if (fShutdown)\n                 return true;\n-            printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n+            if (!fQuietInitial || vInv.size() < 5 || CaughtUp())\n+                printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n \n             if (inv.type == MSG_BLOCK)\n             {\n                 // Send block from disk\n+                nBlocks++;\n                 map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n@@ -2595,10 +2643,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         pfrom->hashContinue = 0;\n                     }\n                 }\n-            }\n+            } // if a block\n             else if (inv.IsKnownType())\n             {\n                 // Send stream from relay memory\n+                nTxs++;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n@@ -2609,8 +2658,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n+        } // for each getdata request\n+\n+        if (vInv.size() > 4 && fQuietInitial && !CaughtUp()) {\n+            printf(\"got getdata for \");\n+            if (nBlocks) {\n+                printf(\"%d blocks \", nBlocks);\n+                if (nTxs) printf(\"and \");\n+            }\n+            if (nTxs) printf(\"%d txs \", nTxs);\n+            printf(\"from %s. Sending.\\n\", pfrom->addr.ToString().c_str());\n         }\n-    }\n+\n+    } // strCommand = \"getdata\"\n \n \n     else if (strCommand == \"getblocks\")\n@@ -2627,12 +2687,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pindex = pindex->pnext;\n         int nLimit = 500 + locator.GetDistanceBack();\n         unsigned int nBytes = 0;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+        if (!fQuietInitial || CaughtUp())\n+            printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s (%u bytes)\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str(), nBytes);\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"  getblocks stopping at %d %s (%u bytes)\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str(), nBytes);\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n@@ -3137,26 +3199,47 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n+        int gettxs = 0;\n+        int getblocks = 0;\n+        CInv blockinv;\n+\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(txdb, inv))\n             {\n-                printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n+\n+                if (inv.type == MSG_BLOCK) {\n+                    getblocks++;\n+                    blockinv = inv;\n+                }\n+                if (inv.type == MSG_TX) gettxs++;\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n+                mapAlreadyAskedFor[inv] = nNow;\n             }\n-            mapAlreadyAskedFor[inv] = nNow;\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n \n-    }\n+        if (getblocks && fQuietInitial && !CaughtUp()) {\n+            if (getblocks == 1)\n+                printf(\"sending getdata %s\\n\", blockinv.ToString().c_str());\n+            else {\n+                printf(\"getdata %d blocks\", getblocks);\n+                if (gettxs) printf(\" and %d txs\\n\", gettxs);\n+                else printf(\"\\n\");\n+            }\n+        }\n+\n+    } // if LockMain\n     return true;\n }\n "
      },
      {
        "sha": "12a29a02856674b7e7a884b30f1a40e905790fff",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -173,7 +173,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n             if (nBytes == 0)\n             {\n                 // socket closed\n-                printf(\"socket closed\\n\");\n+                if (fDebug) printf(\"socket closed\\n\");\n                 return false;\n             }\n             else\n@@ -486,7 +486,8 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n         addrman.Attempt(addrConnect);\n \n         /// debug print\n-        printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n+        if (CaughtUp() || !fQuietInitial)\n+            printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n \n         // Set to nonblocking\n #ifdef WIN32"
      },
      {
        "sha": "ebb8d4ce9a3ddb6da620f169b4031ef049c6d88b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -296,7 +296,8 @@ class CNode\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n         int64& nRequestTime = mapAlreadyAskedFor[inv];\n-        printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n+        if (!fQuietInitial || CaughtUp())\n+            printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order\n         int64 nNow = (GetTime() - 1) * 1000000;\n@@ -310,6 +311,19 @@ class CNode\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n \n+    int64 AskForBlock(const CInv& inv) {\n+        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64 nNow = (GetTime() - 1) * 1000000;\n+        static int64 nLastTime;\n+        nLastTime++;\n+        nNow = std::max(nNow, nLastTime);\n+        nLastTime = nNow;\n+        nRequestTime = std::max(nRequestTime + 120 * 1000000, nNow);\n+        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+\n+        return nRequestTime;\n+    }\n+\n \n \n     void BeginMessage(const char* pszCommand)"
      },
      {
        "sha": "2589237845ab02fcd87c66997d0beb560be80d08",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -364,7 +364,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n             if (nRet == 0)\n             {\n-                printf(\"connection timeout\\n\");\n+                if (fDebug) printf(\"connection timeout\\n\");\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -387,7 +387,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             }\n             if (nRet != 0)\n             {\n-                printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n+                if (fDebug) printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -398,7 +398,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         else\n #endif\n         {\n-            printf(\"connect() failed: %i\\n\",WSAGetLastError());\n+            if (fDebug) printf(\"connect() failed: %i\\n\", WSAGetLastError());\n             closesocket(hSocket);\n             return false;\n         }"
      },
      {
        "sha": "504031634d8726ef9a6ac6da46fedbbb82fef053",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -69,6 +69,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n+bool fQuietInitial = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n bool fReopenDebugLog = false;\n "
      },
      {
        "sha": "95dd03e9bd8f5ef6574237098cfcb7451d10177a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdd87e2d1d2a2e580058e8573d9361187188fb/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d4cdd87e2d1d2a2e580058e8573d9361187188fb",
        "patch": "@@ -117,6 +117,7 @@ extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern bool fReopenDebugLog;\n+extern bool fQuietInitial;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();\n@@ -172,6 +173,7 @@ std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n void AddTimeData(const CNetAddr& ip, int64 nTime);\n void runCommand(std::string strCommand);\n+bool CaughtUp();\n \n \n "
      }
    ]
  }
]