[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916043186",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-916043186",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 916043186,
    "node_id": "IC_kwDOABII5842mbWy",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-09T12:22:56Z",
    "updated_at": "2021-09-09T12:22:56Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, thanks for adding tests",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916043186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916661393",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-916661393",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 916661393,
    "node_id": "IC_kwDOABII5842oySR",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-10T06:21:24Z",
    "updated_at": "2021-09-10T06:21:24Z",
    "author_association": "MEMBER",
    "body": "cc @ariard @darosior ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916661393/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917331926",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-917331926",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 917331926,
    "node_id": "IC_kwDOABII5842rV_W",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-11T03:40:20Z",
    "updated_at": "2021-11-02T14:09:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23121](https://github.com/bitcoin/bitcoin/pull/23121) ([policy] check ancestor feerate in RBF, remove BIP125 Rule2 by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917331926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927367410",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-927367410",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 927367410,
    "node_id": "IC_kwDOABII5843RoDy",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-26T20:45:54Z",
    "updated_at": "2021-09-26T20:45:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927367410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932828013",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-932828013",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 932828013,
    "node_id": "IC_kwDOABII5843mdNt",
    "user": {
      "login": "pg156",
      "id": 91135419,
      "node_id": "MDQ6VXNlcjkxMTM1NDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/91135419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pg156",
      "html_url": "https://github.com/pg156",
      "followers_url": "https://api.github.com/users/pg156/followers",
      "following_url": "https://api.github.com/users/pg156/following{/other_user}",
      "gists_url": "https://api.github.com/users/pg156/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pg156/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pg156/subscriptions",
      "organizations_url": "https://api.github.com/users/pg156/orgs",
      "repos_url": "https://api.github.com/users/pg156/repos",
      "events_url": "https://api.github.com/users/pg156/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pg156/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-02T22:21:43Z",
    "updated_at": "2021-10-02T22:21:43Z",
    "author_association": "NONE",
    "body": "Concept ACK. Tested on macOS Big Sur.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932828013/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954221106",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-954221106",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 954221106,
    "node_id": "IC_kwDOABII58444EIy",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T21:11:33Z",
    "updated_at": "2021-10-28T21:11:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @pg156's comments/improvements and rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954221106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974837509",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-974837509",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 974837509,
    "node_id": "IC_kwDOABII5846GtcF",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-21T15:27:11Z",
    "updated_at": "2021-11-21T15:27:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974837509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975675231",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-975675231",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
    "id": 975675231,
    "node_id": "IC_kwDOABII5846J59f",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T16:03:40Z",
    "updated_at": "2021-11-22T16:03:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I better organized the commits and improved the commit messages. Very minor / no behavior change",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975675231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769",
    "pull_request_review_id": 771639286,
    "id": 722382769,
    "node_id": "PRRC_kwDOABII584rDq-x",
    "diff_hunk": "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]",
    "path": "test/functional/feature_rbf.py",
    "position": 84,
    "original_position": 76,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "pg156",
      "id": 91135419,
      "node_id": "MDQ6VXNlcjkxMTM1NDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/91135419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pg156",
      "html_url": "https://github.com/pg156",
      "followers_url": "https://api.github.com/users/pg156/followers",
      "following_url": "https://api.github.com/users/pg156/following{/other_user}",
      "gists_url": "https://api.github.com/users/pg156/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pg156/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pg156/subscriptions",
      "organizations_url": "https://api.github.com/users/pg156/orgs",
      "repos_url": "https://api.github.com/users/pg156/repos",
      "events_url": "https://api.github.com/users/pg156/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pg156/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This assumes the wallet has at least two utxos, and therefore requires another test creating the utxos to run beforehand. ",
    "created_at": "2021-10-05T15:53:24Z",
    "updated_at": "2021-10-05T16:29:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722382769",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722382769"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 646,
    "original_line": 646,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329",
    "pull_request_review_id": 771639286,
    "id": 722390329,
    "node_id": "PRRC_kwDOABII584rDs05",
    "diff_hunk": "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
    "path": "test/functional/feature_rbf.py",
    "position": null,
    "original_position": 180,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "pg156",
      "id": 91135419,
      "node_id": "MDQ6VXNlcjkxMTM1NDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/91135419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pg156",
      "html_url": "https://github.com/pg156",
      "followers_url": "https://api.github.com/users/pg156/followers",
      "following_url": "https://api.github.com/users/pg156/following{/other_user}",
      "gists_url": "https://api.github.com/users/pg156/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pg156/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pg156/subscriptions",
      "organizations_url": "https://api.github.com/users/pg156/orgs",
      "repos_url": "https://api.github.com/users/pg156/repos",
      "events_url": "https://api.github.com/users/pg156/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pg156/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor suggestion, otherwise it is possibly unclear if 0 is opt-in and 1 is opt-out, or vice versa.\r\n```suggestion\r\n        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])['bip125-replaceable'])\r\n```",
    "created_at": "2021-10-05T16:01:46Z",
    "updated_at": "2021-10-05T16:29:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722390329",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722390329"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 764,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875",
    "pull_request_review_id": 771639286,
    "id": 722396875,
    "node_id": "PRRC_kwDOABII584rDubL",
    "diff_hunk": "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
    "path": "test/functional/feature_rbf.py",
    "position": 36,
    "original_position": 28,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "pg156",
      "id": 91135419,
      "node_id": "MDQ6VXNlcjkxMTM1NDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/91135419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pg156",
      "html_url": "https://github.com/pg156",
      "followers_url": "https://api.github.com/users/pg156/followers",
      "following_url": "https://api.github.com/users/pg156/following{/other_user}",
      "gists_url": "https://api.github.com/users/pg156/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pg156/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pg156/subscriptions",
      "organizations_url": "https://api.github.com/users/pg156/orgs",
      "repos_url": "https://api.github.com/users/pg156/repos",
      "events_url": "https://api.github.com/users/pg156/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pg156/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As `input_utxos` is a pair instead of arbitrary length, does a function name such as `create_double_input_self_transfer` or `create_pair_input_self_transfer` indicate the intention better?",
    "created_at": "2021-10-05T16:09:32Z",
    "updated_at": "2021-10-05T16:29:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722396875",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722396875"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 122,
    "original_line": 122,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771",
    "pull_request_review_id": 771970133,
    "id": 722681771,
    "node_id": "PRRC_kwDOABII584rEz-r",
    "diff_hunk": "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
    "path": "test/functional/feature_rbf.py",
    "position": 36,
    "original_position": 28,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this is a good suggestion. I'll make this change as suggested",
    "created_at": "2021-10-05T20:48:57Z",
    "updated_at": "2021-10-05T20:48:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722681771",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722681771"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 122,
    "original_line": 122,
    "side": "RIGHT",
    "in_reply_to_id": 722396875
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751",
    "pull_request_review_id": 771970737,
    "id": 722682751,
    "node_id": "PRRC_kwDOABII584rE0N_",
    "diff_hunk": "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
    "path": "test/functional/feature_rbf.py",
    "position": null,
    "original_position": 180,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good suggestion, I'll also followup w/ this",
    "created_at": "2021-10-05T20:49:41Z",
    "updated_at": "2021-10-05T20:49:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722682751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722682751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 764,
    "side": "RIGHT",
    "in_reply_to_id": 722390329
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187",
    "pull_request_review_id": 792430303,
    "id": 738777187,
    "node_id": "PRRC_kwDOABII584sCNhj",
    "diff_hunk": "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
    "path": "test/functional/feature_rbf.py",
    "position": 36,
    "original_position": 28,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in 6804fc5",
    "created_at": "2021-10-28T21:09:05Z",
    "updated_at": "2021-10-28T21:09:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777187",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777187"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 122,
    "original_line": 122,
    "side": "RIGHT",
    "in_reply_to_id": 722396875
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709",
    "pull_request_review_id": 792430992,
    "id": 738777709,
    "node_id": "PRRC_kwDOABII584sCNpt",
    "diff_hunk": "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
    "path": "test/functional/feature_rbf.py",
    "position": null,
    "original_position": 180,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in e6c88a3",
    "created_at": "2021-10-28T21:10:00Z",
    "updated_at": "2021-10-28T21:10:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 764,
    "side": "RIGHT",
    "in_reply_to_id": 722390329
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281",
    "pull_request_review_id": 792431800,
    "id": 738778281,
    "node_id": "PRRC_kwDOABII584sCNyp",
    "diff_hunk": "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]",
    "path": "test/functional/feature_rbf.py",
    "position": 84,
    "original_position": 76,
    "commit_id": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "original_commit_id": "85a69f40dd89656077fc5d65df3750b541f7516a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems to be a somewhat common pattern, I see other tests that rely on there being some utxos in the wallet. So I'm going to leave it for now. I do realize that these sub-tests are not totally stateless bc of this. If anyone thinks it is a big deal and should be fixed lmk and I'll do it.",
    "created_at": "2021-10-28T21:10:59Z",
    "updated_at": "2021-10-28T21:10:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738778281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738778281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 646,
    "original_line": 646,
    "side": "RIGHT",
    "in_reply_to_id": 722382769
  }
]