[
  {
    "sha": "1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "node_id": "C_kwDOABII59oAKDFlZjMzZDhkNzgyMzc1OTVkN2IwYTM0ZWRkZjA1ODA0MjY1N2JiYjM",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-01T16:44:27Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:00:06Z"
      },
      "message": "test: clarify no inherited replaceability assertions",
      "tree": {
        "sha": "e46d428dfbe2bdf40bd57469faf4963d569851cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e46d428dfbe2bdf40bd57469faf4963d569851cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGawYMACgkQc3/VzfHR\nRrkg+g/+Ky22yBJ97B4F0bV0GaAVR2HF8mWeqov74De6DU2KgmhjTX9mz3rWfycq\nDOaNKEiM8BE/Sfa++BydI+z8ksjOSdInTVC3ZtcV1RFTgRVoksWkf0DZFfxpUaa0\nqJLaIaB9NI3Yn8E2O+rOsCrGeMeYtEFfpxjkbtcqX6IvKSmnt0lXSAbzNL8K2RXI\nn+J3cJ4FzYwMEYDfWcSjqtJKgjeO0STZi63lyku1abtbTIm5llFx471OzIvQjsnb\nHUb7kfBqlAP0iAWacvp0dyLwT2vSjjAtuJOlpSXaMF7KZGIwhPgLULi6xVCv5Vum\nXdoSkKrpLFKJxXu8XXCMDlGA/kG0J1lmyC5MuxyuFLwvxeWHEvnvqRQfz9OuVNnJ\n4eGD+LAv4BNLz2utkwcQB0AOZaeg3/+Nhx5aDwefDZxpqyl/iPCX0Tej0/s2IbjU\nIfQu77wJA5CdnNixtVcAPMyykp/5fUwqivWqxLeBcb5anqFmY6a0yiPlBed1G9Zt\nZ/7eb8U08awCDc56aDopYvV2DbvvnIrdNviY3S7bIYrtYF2OgtlL+a9EawKrbl4U\noR67TEt/J2WhkJVKhrlXw2wckLY6Vxk0G4IM0AFvpysUZH7VPGFpVVwukrPuOMDz\nRqpnQKn4eN//j/XTLvxFK9U0ZN6bDTMpU9sr4giKRZKZrdFEfbQ=\n=B3Dc\n-----END PGP SIGNATURE-----",
        "payload": "tree e46d428dfbe2bdf40bd57469faf4963d569851cb\nparent 19815b096c6a2b2e0bcb802e9e5842e67952993e\nauthor Michael Dietz <michael.dietz@waya.ai> 1630514667 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637532006 -0600\n\ntest: clarify no inherited replaceability assertions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19815b096c6a2b2e0bcb802e9e5842e67952993e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19815b096c6a2b2e0bcb802e9e5842e67952993e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19815b096c6a2b2e0bcb802e9e5842e67952993e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "85aa38ade170e95d7a06e8e419d77a39eb54ddf6",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef33d8d78237595d7b0a34eddf058042657bbb3/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef33d8d78237595d7b0a34eddf058042657bbb3/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "patch": "@@ -586,6 +586,7 @@ def test_no_inherited_signaling(self):\n         # Reports true due to inheritance\n         assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n \n+        self.log.info('Check that the (optout) child tx can not be replaced directly')\n         replacement_child_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n             utxo_to_spend=parent_utxo,\n@@ -594,14 +595,11 @@ def test_no_inherited_signaling(self):\n             mempool_valid=False,\n         )\n \n-        # Broadcast replacement child tx\n-        # BIP 125 :\n-        # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n-        # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n-        # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n-        # See CVE-2021-31876 for further explanations.\n-        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+        # The transaction we are attempting to replace (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n+        # The replacement transaction (`replacement_child_tx`) should be able to replace `optout_child_tx` due to replaceability through inheritance.\n+        # Here we show that this isn't the case. See CVE-2021-31876 for further explanations.\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])  # explicitly signals replaceability\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])  # reports `True` due to inherited signaling from `optin_parent_tx`\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n         self.log.info('Check that the child tx can still be replaced (via a tx that also replaces the parent)')"
      }
    ]
  },
  {
    "sha": "9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "node_id": "C_kwDOABII59oAKDlmZDZmYTExZTM3ZjcxMzhhYmI3ZjM2ZWNhYzljNGEwZjJmNGQzNTk",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-02T20:35:52Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:01:20Z"
      },
      "message": "test: replacement tx rejected bc conflicts may be double counted",
      "tree": {
        "sha": "4f63decc8add4e33a82753915e815014d4833f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f63decc8add4e33a82753915e815014d4833f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGawn8ACgkQc3/VzfHR\nRrmQdA//cWjrsfuL7AJi/ClublmJg3FU6GzEOaTRWHh6DaPn1OnxYoukE+xFtGAV\naZlS2uZ9xr/sasSu3KsMgckUEBqHrU/t4+H+vAcrR7qLS91lOf5StqJzx7YbROAy\n9vk3Fo6IWqfGFSugzc5bKG4J35XCLlYzyBWjA2akQuU6h0vBFqbMEs4eoh6FXfTM\nBOMWsTuu4Z1sk+nnyrWt3NX9uktgDxGiqy8ubI6nbR2TnaN/bPxtahbv1tpbcpQm\nuXqjyF/er+382JW7jztw157XjEwMRbn5BszpOMTByVK1kCQRyK0FZWqHdtbnP1Ib\nOg27i2DKgsoYpZV6REf1PMQnZYgkxMgL6JkSRZLCFw0pWF1sYVzhq28E9iWn+P2p\nzdc0aq1i4jmNQKq7HujF7QQX3xb3mG+ms9sRY7voEAzrP+ZIdZ//SydeSxEdWL7m\ngcNogvmwCT7cttX31fwSk8tWNsORtLW9zbfxfHrbeIFJEnlUqLlWzZJd5gMZn05J\n+id42YUK9fsxDtiUfxqZbfxIEkKkXFdqFHUzPAjJAKNEET4RDJDJqruhoI19mpm8\nlC1vzieAgHhB3JX2jzGwthZc77e2pbGjLUivZ3aRMRzTG/exSGNXv3uVSFGu20G3\n1/edP2wV6BlObbbYFnxR4Z2w/cmZtnVvur8I41SoPFO8fll8yrs=\n=SajU\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f63decc8add4e33a82753915e815014d4833f19\nparent 1ef33d8d78237595d7b0a34eddf058042657bbb3\nauthor Michael Dietz <michael.dietz@waya.ai> 1630614952 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637532080 -0600\n\ntest: replacement tx rejected bc conflicts may be double counted\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef33d8d78237595d7b0a34eddf058042657bbb3"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 76,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb4400b355a277781bdd85568cca2b59ae19ddbf",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 76,
        "deletions": 1,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "patch": "@@ -36,7 +36,7 @@ def set_test_params(self):\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-maxorphantx=1000\",\n-                \"-limitancestorcount=50\",\n+                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 1}\", # enough room to test BIP125 Rule #5\n                 \"-limitancestorsize=101\",\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n@@ -87,6 +87,9 @@ def run_test(self):\n         self.log.info(\"Running test replacement relay fee...\")\n         self.test_replacement_relay_fee()\n \n+        self.log.info(\"Running test prechecks overestimates replacements...\")\n+        self.test_prechecks_overestimates_replacements()\n+\n         self.log.info(\"Passed\")\n \n     def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n@@ -110,6 +113,19 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), n)\n \n+    def create_double_input_self_transfer(self, input_utxos, fee_rate):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            fee_rate=fee_rate,\n+        )[\"tx\"], input_utxos))\n+\n+        tx.vin.append(staging_tx.vin[0])\n+        tx.wit.vtxinwit.append(staging_tx.wit.vtxinwit[0])\n+        tx.vout[0].nValue = tx.vout[0].nValue + staging_tx.vout[0].nValue\n+        return tx.serialize().hex()\n+\n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         # we use MiniWallet to create a transaction template with inputs correctly set,\n@@ -621,5 +637,64 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "44bffc15d4d92abef49a188e28dc214baab1b333",
    "node_id": "C_kwDOABII59oAKDQ0YmZmYzE1ZDRkOTJhYmVmNDlhMTg4ZTI4ZGMyMTRiYWFiMWIzMzM",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-02T21:29:53Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:28:38Z"
      },
      "message": "test: dynamic rbf inherited signaling in the case of a reorg\n\nIn the event of a reorg, the assumption that a newly added tx has no\nin-mempool children is false. If the children opted-out of rbf they\nwould show \\`RBFTransactionState::FINAL\\` prior to the reorg.\nUpon their rbf opt-in parent being accepted back into the mempool, they\nwould show \\`RBFTransactionState::REPLACEABLE_BIP125\\`.",
      "tree": {
        "sha": "8938fdef0a2496896e5ba8c90598b033fd021f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8938fdef0a2496896e5ba8c90598b033fd021f90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGayOoACgkQc3/VzfHR\nRrnALQ/+O9V+x4ueVr0NiK+peY64WAGDzR6xu4My5Uai+qEFVGALAqp1LmL50Lbx\ncIi6rsGqeTsDyvd9+POQC7FRm+sTHhlekZjFIFhBzeAVjnWXdMw3p40XW8WehdN3\nlzXA1UGFmB/nGOPWIaOxcLP0MO5jIGuOagVJQ0GBm/XLCPezBMpYbfOLXR27VElk\nhpQap2DDEVUj1GssEu7+0ubNugmvLi/pr5YdE4kjgsHotoC8YP/7pd2wDrZDcdz/\nHbxndYWgvegzVXoBnrNolhVlt2J78gnH0+1/0Hl0pZFzuoOVR+KKxM6YrJFi3r/L\nurFGvWNFA8S2FwgFXbup3zSYWJMlG+kROWLvnFL4CuTahPqpMHnqqrd+4442b7c2\nxmMM+P0xGVG8dW/D5nvAofvUDenkQuH15SpBdWEBr2QI+Zi23UWFqxwkzxDnuPL/\nwzm8hW2m3FAccaui/eZ94PClOfxnkJT3a3GK85WQAv3KNrHHbTOPgMzH5SCPQlWj\nXn7YfQCJp9nUJNZX/UeodUjokRfNGDWcSJvOFZUges7YiNwTGLtTJ9eXD+mniTCC\nKA0wD5+fpvQfHyLUYlUBcXmmCb+VuRZnVO9Mf8B7u/DfM9cVOo0/m7xma19AOz5x\n3QUP0mmq2Gf2PpuFVE2F3pPz/rZM86Q5muEjli28/Dpg+5oXrDg=\n=EdTd\n-----END PGP SIGNATURE-----",
        "payload": "tree 8938fdef0a2496896e5ba8c90598b033fd021f90\nparent 9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359\nauthor Michael Dietz <michael.dietz@waya.ai> 1630618193 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637533718 -0600\n\ntest: dynamic rbf inherited signaling in the case of a reorg\n\nIn the event of a reorg, the assumption that a newly added tx has no\nin-mempool children is false. If the children opted-out of rbf they\nwould show \\`RBFTransactionState::FINAL\\` prior to the reorg.\nUpon their rbf opt-in parent being accepted back into the mempool, they\nwould show \\`RBFTransactionState::REPLACEABLE_BIP125\\`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44bffc15d4d92abef49a188e28dc214baab1b333",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 44,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1447759edcd462a4446aceb7f01fdc73c1ffff03",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 44,
        "deletions": 2,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44bffc15d4d92abef49a188e28dc214baab1b333/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44bffc15d4d92abef49a188e28dc214baab1b333/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=44bffc15d4d92abef49a188e28dc214baab1b333",
        "patch": "@@ -19,6 +19,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n     assert_raises_rpc_error,\n )\n from test_framework.script_util import (\n@@ -36,7 +37,7 @@ def set_test_params(self):\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-maxorphantx=1000\",\n-                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 1}\", # enough room to test BIP125 Rule #5\n+                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 3}\", # enough room to test BIP125 Rule #5\n                 \"-limitancestorsize=101\",\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n@@ -90,6 +91,9 @@ def run_test(self):\n         self.log.info(\"Running test prechecks overestimates replacements...\")\n         self.test_prechecks_overestimates_replacements()\n \n+        self.log.info(\"Running test reorged inherited signaling...\")\n+        self.test_reorged_inherited_signaling()\n+\n         self.log.info(\"Passed\")\n \n     def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n@@ -113,11 +117,12 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), n)\n \n-    def create_double_input_self_transfer(self, input_utxos, fee_rate):\n+    def create_double_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n         \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n         [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n             utxo_to_spend=utxo,\n+            sequence=sequence,\n             fee_rate=fee_rate,\n         )[\"tx\"], input_utxos))\n \n@@ -696,5 +701,42 @@ def test_prechecks_overestimates_replacements(self):\n         for parent_tx in parent_txs:\n             assert parent_tx not in mempool\n \n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_reorged_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # If we confirm `optin_parent_tx` descendants will no longer inherit signaling\n+        hash = self.generateblock(self.nodes[0], output=self.wallet.get_address(), transactions=[optin_parent_tx['txid']])['hash']\n+        assert_equal(False, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get `optin_parent_tx` back in our mempool, once again descendants inherit signaling\n+        self.nodes[0].invalidateblock(hash)\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "node_id": "C_kwDOABII59oAKDNmYzFmOGI2MTJhYTcyMWIwNTk2MzlmODNkOWViNWNjMjJkZTM1MzE",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:36:33Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:36:33Z"
      },
      "message": "test: incorrect rbf status when max replacement limit exceeded\n\nHighlight that transactions may signal they are replaceable even\nthough they are not due to BIP125 RBF (Rule #5).",
      "tree": {
        "sha": "db0f4cae56fcaf9fa307366d582db6f4630475e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db0f4cae56fcaf9fa307366d582db6f4630475e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGayuIACgkQc3/VzfHR\nRrnFnw//cVKbYn1yLKWAp0orJ/b/f67X/AqH1+BaZbZEXFY9KQy3PKPLhOt/xBea\nNXO617uKhelVHVEVCFj4WvO+Q5S75tVGu+8lTMNO7qvCtkhqjtx1MRF7lpHWx9kX\nymU1f8K7ouCIflug22PZxcTez5qFGQNatyXbu+lf3xPTf6hnn10MPlYt78aZK4PZ\nTnFyL9PyCouwkHrRVzDUgNRFJ5+KYLoBVgpUjqabnSdcP3qV/HZ+5wyN0eVXR25G\nan5jtqfDIM7AFH/DJf3iKwpYsGhpx2wWXEJBaqd2avWFPPkmyP8vw6WpOC99ChVi\n6UKduFzpag30LAMUrPNfAryaEFTENczk7iafJ1khsHmN8VNTCzKS1Bl8Ew26i6DC\n5uJSP737vUknQTBXyrjjVqPCCSR6hlyjui8hEF+ZCUX8JEZo0SOsS67RtuZQKUZF\nkdOthSdTEzWMUPD5x2BkQQrkg4gjMY0fZfx1MaJG6CtG//Od4DdUXh3h1dtKcomQ\nUWF1hT8zeWtYuwi4Pw7gKhilcO4UdmPwILPgXyjE6tp4iA3kXPoMFYFk7+vhSZy7\n7kHV70DePpzx1ov4Oiw3zF5CT9nzL2eD+p002mayVflD8814UZEn8gvbkPHlonYr\nVOZcZEuiCYFqRFR/3lpkOVOOr+pARUImcSPzdpXXVdIQze2D7Gg=\n=6lb5\n-----END PGP SIGNATURE-----",
        "payload": "tree db0f4cae56fcaf9fa307366d582db6f4630475e4\nparent 44bffc15d4d92abef49a188e28dc214baab1b333\nauthor Michael Dietz <michael.dietz@waya.ai> 1637534193 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637534193 -0600\n\ntest: incorrect rbf status when max replacement limit exceeded\n\nHighlight that transactions may signal they are replaceable even\nthough they are not due to BIP125 RBF (Rule #5).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44bffc15d4d92abef49a188e28dc214baab1b333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44bffc15d4d92abef49a188e28dc214baab1b333"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 32,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7264b1180f7c160adcc0e0e7609ce2d165de933d",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc1f8b612aa721b059639f83d9eb5cc22de3531/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc1f8b612aa721b059639f83d9eb5cc22de3531/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=3fc1f8b612aa721b059639f83d9eb5cc22de3531",
        "patch": "@@ -91,8 +91,8 @@ def run_test(self):\n         self.log.info(\"Running test prechecks overestimates replacements...\")\n         self.test_prechecks_overestimates_replacements()\n \n-        self.log.info(\"Running test reorged inherited signaling...\")\n-        self.test_reorged_inherited_signaling()\n+        self.log.info(\"Running test reorged inherited signaling and descendant limit...\")\n+        self.test_reorged_inherited_signaling_and_descendant_limit()\n \n         self.log.info(\"Passed\")\n \n@@ -705,7 +705,7 @@ def test_prechecks_overestimates_replacements(self):\n         self.wallet.get_utxo(txid=tx['txid'])\n         self.wallet.get_utxo(txid=replacement_tx['txid'])\n \n-    def test_reorged_inherited_signaling(self):\n+    def test_reorged_inherited_signaling_and_descendant_limit(self):\n         confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n \n         # One opt-in parent transaction, one opt-out\n@@ -738,5 +738,34 @@ def test_reorged_inherited_signaling(self):\n         self.nodes[0].invalidateblock(hash)\n         assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n \n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+        # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and 99 txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, entry['bip125-replaceable'])\n+        assert_equal(True, self.nodes[0].getmempoolentry(tx[\"txid\"])['bip125-replaceable'])\n+\n+        # Case in point, we can't actually replace `optin_parent_tx` once it has `MAX_REPLACEMENT_LIMIT` descendants\n+        self.wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],\n+            fee_rate=Decimal('0.01'),\n+            mempool_valid=False,\n+        )\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  }
]