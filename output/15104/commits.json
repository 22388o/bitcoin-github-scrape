[
  {
    "sha": "36ada0983dbaa2871ea86f0aa0dd5955d643ef59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmFkYTA5ODNkYmFhMjg3MWVhODZmMGFhMGRkNTk1NWQ2NDNlZjU5",
    "commit": {
      "author": {
        "name": "marcaiaf",
        "email": "mmachicao@m19r.de",
        "date": "2019-01-04T16:00:13Z"
      },
      "committer": {
        "name": "marcaiaf",
        "email": "mmachicao@m19r.de",
        "date": "2019-01-15T22:06:17Z"
      },
      "message": "Tests: Add unit testing for the CompressScript function.\nAlso: Third pary libraries are separated by a new line",
      "tree": {
        "sha": "89505e0dfff2e2461e0b7ed78f9414e5031a950e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89505e0dfff2e2461e0b7ed78f9414e5031a950e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36ada0983dbaa2871ea86f0aa0dd5955d643ef59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ada0983dbaa2871ea86f0aa0dd5955d643ef59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36ada0983dbaa2871ea86f0aa0dd5955d643ef59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ada0983dbaa2871ea86f0aa0dd5955d643ef59/comments",
    "author": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86e0a33f5c382513d5179e3fdf158baf952d7e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86e0a33f5c382513d5179e3fdf158baf952d7e2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86e0a33f5c382513d5179e3fdf158baf952d7e2f"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 85,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4f5eed161e2fb0832634adf2301bb24efe7b9c8f",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 4,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ada0983dbaa2871ea86f0aa0dd5955d643ef59/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ada0983dbaa2871ea86f0aa0dd5955d643ef59/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=36ada0983dbaa2871ea86f0aa0dd5955d643ef59",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/test/unit_test.hpp>\n #include <compressor.h>\n-#include <util/system.h>\n-#include <test/test_bitcoin.h>\n-\n+#include <script/standard.h>\n #include <stdint.h>\n+#include <util/system.h>\n \n-#include <boost/test/unit_test.hpp>\n+#include <test/test_bitcoin.h>\n \n // amounts 0.00000001 .. 0.00100000\n #define NUM_MULTIPLES_UNIT 100000\n@@ -62,4 +62,85 @@ BOOST_AUTO_TEST_CASE(compress_amounts)\n         BOOST_CHECK(TestDecode(i));\n }\n \n+BOOST_AUTO_TEST_CASE(compress_CompressScriptToCKeyID)\n+{\n+    // case CKeyID\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+\n+    CScript script;\n+    script.clear();\n+    script << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK_EQUAL(script.size(), 25);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out[0], 0x00);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[3], 20), 0); // compare the 20 relevant chars of the CKeyId in the script\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_CompressScriptToCSriptID)\n+{\n+    // case CScriptID\n+    CScript script, redeemScript;\n+\n+    script.clear();\n+    script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK_EQUAL(script.size(), 23);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out[0], 0x01);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 20), 0); // compare the 20 relevant chars of the CScriptId in the script\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_CompressScriptToCompressedPubKeyID)\n+{\n+    CKey key;\n+    key.MakeNewKey(true); // case compressed PubKeyID\n+\n+    CScript script;\n+    script.clear();\n+    script << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n+    BOOST_CHECK_EQUAL(script.size(), 35);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(memcmp(&out[0], &script[1], 1), 0);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // compare the 32 chars of the compressed CPubKey\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_CompressScriptToUncompressedPubKeyID)\n+{\n+    CKey key;\n+    key.MakeNewKey(false); // case uncompressed PubKeyID\n+\n+    CScript script;\n+    script.clear();\n+    script << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n+    BOOST_CHECK_EQUAL(script.size(), 67);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // first 32 chars of CPubKey are copied into out[1:]\n+    BOOST_CHECK_EQUAL(out[0], 0x04 | (script[65] & 0x01)); // least significant bit (lsb) of last char of pubkey is mapped into out[0]\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]