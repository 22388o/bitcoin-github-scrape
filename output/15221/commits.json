[
  {
    "sha": "ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQ1ZDMxZDY2ZjNhNmNhODczN2YxMjQ5YThkZGQ4MzBiZmY4OTUw",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-21T01:32:17Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-21T01:57:09Z"
      },
      "message": "lint: Bump flake8 to 3.6.0\n\nFix new lints in:\nW504 line break after binary operator\nW605 invalid escape sequence\nF841 local variable 'e' is assigned to but never used\n\nhttps://github.com/PyCQA/flake8/blob/master/docs/source/release-notes/3.6.0.rst",
      "tree": {
        "sha": "3e1b06403b33aecf64cef53af6d1cbe8a0779ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e1b06403b33aecf64cef53af6d1cbe8a0779ebc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlxFJvkACgkQTYykuhgE\nCQbUWRAAnrOT17l3AX2nscfWuTG0xyEiJRP4sbRnkYWabdXPWPpq5T16N4AbvUCM\n1BbeixGT9HRWLyXBUuBruWxkrGu3hkqplU+PK9mAekEMwn8FxDqzYJzdFy7CuLGB\noeHicFouv44pjtnJcuTGDIuFd09lZDU2y0ioklt8zLU2Wpq9YJr9n9kjt9gRCdOY\nJ8eExTgFgUTEsBrl1vE83QaaSCerNe5mOfcHddL+w6y+IWIfbk6Gta1GpsxsCdXN\nUgDg79PooyJnvrSvN6xMxG33MhFLEHzN666oDoaMYOze0P9ZHsxWTXJW9kqJ05wI\ne/9CNIkMr9XpSGhx301p4RoTlGoNeZK4X7rY1iGv/jDpQnl8bXLBRqadFZQIDN/K\nzu49RcTTst0r1z38tLWLLmJZgw9f46TChzp94Hnj+ca/cmzGMD4hDyJe7p4+Vksc\nsnLGP8PoVNH1HlFd0lghXYr6eGVK9z8FKreh+E0NV57WS2Qa35h7f3iwqlk7DcXp\n3gZKbpXtJ+/eMj1SF6pJRnXt441phJy1tnjzWEdRWSOwPaQr08f2YFCyI1aHKCKs\nE0OdRexoZokZVAVFXTgXxB/CXgJN2eKZ9tZ/ftjKr+vEkxMRbYFnhpNvPiBUI8xN\neiyjLVs2M2i/bo3PRi3Sm14SxP5Xogn8zHlV26zrLJ118BAcE7w=\n=iD2y\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e1b06403b33aecf64cef53af6d1cbe8a0779ebc\nparent 978682b9dccfb48425c0129431bb108e78e33e4e\nauthor Ben Woosley <ben.woosley@gmail.com> 1548034337 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1548035829 -0800\n\nlint: Bump flake8 to 3.6.0\n\nFix new lints in:\nW504 line break after binary operator\nW605 invalid escape sequence\nF841 local variable 'e' is assigned to but never used\n\nhttps://github.com/PyCQA/flake8/blob/master/docs/source/release-notes/3.6.0.rst\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "978682b9dccfb48425c0129431bb108e78e33e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978682b9dccfb48425c0129431bb108e78e33e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/978682b9dccfb48425c0129431bb108e78e33e4e"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 50,
      "deletions": 67
    },
    "files": [
      {
        "sha": "b4d09c4d81b438cca3a311a787f6ceeba1e99d7f",
        "filename": ".travis/lint_04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/.travis/lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/.travis/lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_04_install.sh?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C\n \n travis_retry pip install codespell==1.13.0\n-travis_retry pip install flake8==3.5.0\n+travis_retry pip install flake8==3.6.0\n travis_retry pip install vulture==0.29\n \n SHELLCHECK_VERSION=v0.6.0"
      },
      {
        "sha": "98eee67f4300853629cc61baaaed13008819038c",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -106,7 +106,7 @@ def main():\n   filename = None\n   lines_by_file = {}\n   for line in sys.stdin:\n-    match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n+    match = re.search(r'^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n     if match:\n       filename = match.group(2)\n     if filename is None:\n@@ -119,7 +119,7 @@ def main():\n       if not re.match('^%s$' % args.iregex, filename, re.IGNORECASE):\n         continue\n \n-    match = re.search('^@@.*\\+(\\d+)(,(\\d+))?', line)\n+    match = re.search(r'^@@.*\\+(\\d+)(,(\\d+))?', line)\n     if match:\n       start_line = int(match.group(1))\n       line_count = 1"
      },
      {
        "sha": "a58b127d3c272bebb9f8a90c36eb28aee47c0bfc",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -41,8 +41,7 @@ def applies_to_file(filename):\n     for excluded_dir in EXCLUDE_DIRS:\n         if filename.startswith(excluded_dir):\n             return False\n-    return ((EXCLUDE_COMPILED.match(filename) is None) and\n-            (INCLUDE_COMPILED.match(filename) is not None))\n+    return ((EXCLUDE_COMPILED.match(filename) is None) and (INCLUDE_COMPILED.match(filename) is not None))\n \n ################################################################################\n # obtain list of files in repo according to INCLUDE and EXCLUDE\n@@ -64,11 +63,11 @@ def get_filenames_to_examine():\n ################################################################################\n \n \n-COPYRIGHT_WITH_C = 'Copyright \\(c\\)'\n+COPYRIGHT_WITH_C = r'Copyright \\(c\\)'\n COPYRIGHT_WITHOUT_C = 'Copyright'\n ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)\n \n-YEAR = \"20[0-9][0-9]\"\n+YEAR = r\"20[0-9][0-9]\"\n YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n YEAR_LIST = '(%s)(, %s)+' % (YEAR, YEAR)\n ANY_YEAR_STYLE = '(%s|%s)' % (YEAR_RANGE, YEAR_LIST)\n@@ -87,20 +86,20 @@ def compile_copyright_regex(copyright_style, year_style, name):\n     \"Bitcoin Core Developers\\n\",\n     \"the Bitcoin Core developers\\n\",\n     \"The Bitcoin developers\\n\",\n-    \"The LevelDB Authors\\. All rights reserved\\.\\n\",\n-    \"BitPay Inc\\.\\n\",\n-    \"BitPay, Inc\\.\\n\",\n-    \"University of Illinois at Urbana-Champaign\\.\\n\",\n+    r\"The LevelDB Authors\\. All rights reserved\\.\\n\",\n+    r\"BitPay Inc\\.\\n\",\n+    r\"BitPay, Inc\\.\\n\",\n+    r\"University of Illinois at Urbana-Champaign\\.\\n\",\n     \"MarcoFalke\\n\",\n     \"Pieter Wuille\\n\",\n-    \"Pieter Wuille +\\*\\n\",\n-    \"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n-    \"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n-    \"Andrew Poelstra +\\*\\n\",\n+    r\"Pieter Wuille +\\*\\n\",\n+    r\"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n+    r\"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n+    r\"Andrew Poelstra +\\*\\n\",\n     \"Wladimir J. van der Laan\\n\",\n     \"Jeff Garzik\\n\",\n-    \"Diederik Huys, Pieter Wuille +\\*\\n\",\n-    \"Thomas Daede, Cory Fields +\\*\\n\",\n+    r\"Diederik Huys, Pieter Wuille +\\*\\n\",\n+    r\"Thomas Daede, Cory Fields +\\*\\n\",\n     \"Jan-Klaas Kollhof\\n\",\n     \"Sam Rushing\\n\",\n     \"ArtForz -- public domain half-a-node\\n\",\n@@ -339,8 +338,8 @@ def write_file_lines(filename, file_lines):\n # update header years execution\n ################################################################################\n \n-COPYRIGHT = 'Copyright \\(c\\)'\n-YEAR = \"20[0-9][0-9]\"\n+COPYRIGHT = r'Copyright \\(c\\)'\n+YEAR = r\"20[0-9][0-9]\"\n YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n HOLDER = 'The Bitcoin Core developers'\n UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE, HOLDER]))\n@@ -378,9 +377,7 @@ def create_updated_copyright_line(line, last_git_change_year):\n     start_year, end_year = parse_year_range(year_range)\n     if end_year == last_git_change_year:\n         return line\n-    return (before_copyright + copyright_splitter +\n-            year_range_to_str(start_year, last_git_change_year) + ' ' +\n-            ' '.join(space_split[1:]))\n+    return (before_copyright + copyright_splitter + year_range_to_str(start_year, last_git_change_year) + ' ' + ' '.join(space_split[1:]))\n \n def update_updatable_copyright(filename):\n     file_lines = read_file_lines(filename)"
      },
      {
        "sha": "1934c08e1fdebefa34f738ce3afc3f3fc327f2a9",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -143,7 +143,7 @@ def read_libraries(filename):\n     for line in stdout.splitlines():\n         tokens = line.split()\n         if len(tokens)>2 and tokens[1] == '(NEEDED)':\n-            match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+            match = re.match(r'^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n             if match:\n                 libraries.append(match.group(1))\n             else:\n@@ -173,5 +173,3 @@ def read_libraries(filename):\n                 retval = 1\n \n     sys.exit(retval)\n-\n-"
      },
      {
        "sha": "b65cbd0b114ea9712c51a15387118688d6459fb0",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -29,8 +29,7 @@ def uint32(x):\n     return x & 0xffffffff\n \n def bytereverse(x):\n-    return uint32(( ((x) << 24) | (((x) << 8) & 0x00ff0000) |\n-               (((x) >> 8) & 0x0000ff00) | ((x) >> 24) ))\n+    return uint32(( ((x) << 24) | (((x) << 8) & 0x00ff0000) | (((x) >> 8) & 0x0000ff00) | ((x) >> 24) ))\n \n def bufreverse(in_buf):\n     out_words = []\n@@ -263,12 +262,12 @@ def run(self):\n     f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n-        m = re.search('^\\s*#', line)\n+        m = re.search(r'^\\s*#', line)\n         if m:\n             continue\n \n         # parse key=value lines\n-        m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)\n+        m = re.search(r'^(\\w+)\\s*=\\s*(\\S.*)$', line)\n         if m is None:\n             continue\n         settings[m.group(1)] = m.group(2)"
      },
      {
        "sha": "c085e34e23a8ea725649586845c579981172a430",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -106,12 +106,12 @@ def get_rpc_cookie():\n     f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n-        m = re.search('^\\s*#', line)\n+        m = re.search(r'^\\s*#', line)\n         if m:\n             continue\n \n         # parse key=value lines\n-        m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)\n+        m = re.search(r'^(\\w+)\\s*=\\s*(\\S.*)$', line)\n         if m is None:\n             continue\n         settings[m.group(1)] = m.group(2)"
      },
      {
        "sha": "7630a7a4fa2550396e8e6ee5421a90f640b7be0a",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -74,7 +74,7 @@ def name_to_ipv6(addr):\n         raise ValueError('Could not parse address %s' % addr)\n \n def parse_spec(s, defaultport):\n-    match = re.match('\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n+    match = re.match(r'\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n     if match: # ipv6\n         host = match.group(1)\n         port = match.group(2)\n@@ -136,4 +136,3 @@ def main():\n \n if __name__ == '__main__':\n     main()\n-"
      },
      {
        "sha": "9633e24f689d2389619a34e5f7033e76a00e955f",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -72,7 +72,7 @@ def send_blocks_until_disconnected(self, p2p_conn):\n                 break\n             try:\n                 p2p_conn.send_message(msg_block(self.blocks[i]))\n-            except IOError as e:\n+            except IOError:\n                 assert not p2p_conn.is_connected\n                 break\n "
      },
      {
        "sha": "3ae97df9506f34e60224a1f19b242050629a5f48",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -35,8 +35,7 @@ def cltv_invalidate(tx):\n     TODO: test more ways that transactions using CLTV could be invalid (eg\n     locktime requirements fail, sequence time requirements fail, etc).\n     '''\n-    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n-                                  list(CScript(tx.vin[0].scriptSig)))\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] + list(CScript(tx.vin[0].scriptSig)))\n \n def cltv_validate(node, tx, height):\n     '''Modify the signature in vin 0 of the tx to pass CLTV\n@@ -50,8 +49,7 @@ def cltv_validate(node, tx, height):\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n-    new_tx.vin[0].scriptSig = CScript([CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n-                                  list(CScript(new_tx.vin[0].scriptSig)))\n+    new_tx.vin[0].scriptSig = CScript([CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP] + list(CScript(new_tx.vin[0].scriptSig)))\n     return new_tx\n \n "
      },
      {
        "sha": "e6ff21ee9c5ceed3d0140c4c884a2a8ace109b27",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         invdir = self.relative_log_path(\"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        exp_stderr = \"Error: Could not open debug log file \\S+$\"\n+        exp_stderr = r\"Error: Could not open debug log file \\S+$\"\n         self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n "
      },
      {
        "sha": "85c250173f7a3e8a23be9038c741b71bb35006ce",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -27,12 +27,12 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n+        expected = r\"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n         self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected, match=ErrorMatch.FULL_REGEX)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')', '\u20bf', '\ud83c\udfc3']:\n-            expected = \"Error: User Agent comment \\(\" + re.escape(unsafe_char) + \"\\) contains unsafe characters.\"\n+            expected = r\"Error: User Agent comment \\(\" + re.escape(unsafe_char) + r\"\\) contains unsafe characters.\"\n             self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected, match=ErrorMatch.FULL_REGEX)\n \n "
      },
      {
        "sha": "fa4dfd7ccdd7711447062ca07b20042b36cd195e",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -356,8 +356,7 @@ def check_compactblock_construction_from_block(self, version, header_and_shortid\n \n         index = 0\n         while index < len(block.vtx):\n-            if (len(header_and_shortids.prefilled_txn) > 0 and\n-                    header_and_shortids.prefilled_txn[0].index == index):\n+            if len(header_and_shortids.prefilled_txn) > 0 and header_and_shortids.prefilled_txn[0].index == index:\n                 # Already checked prefilled transactions above\n                 header_and_shortids.prefilled_txn.pop(0)\n             else:"
      },
      {
        "sha": "ad83aaf397a5049115b1eaa161e17e32496286fa",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -65,9 +65,7 @@ def last_block_equals(self, expected_hash, node):\n     # Check whether last block header received from node has a given hash\n     def last_header_equals(self, expected_hash, node):\n         headers_msg = node.last_message.get(\"headers\")\n-        return (headers_msg and\n-                headers_msg.headers and\n-                headers_msg.headers[0].rehash() == expected_hash)\n+        return (headers_msg and headers_msg.headers and headers_msg.headers[0].rehash() == expected_hash)\n \n     # Checks that stale blocks timestamped more than a month ago are not served\n     # by the node while recent stale blocks and old active chain blocks are."
      },
      {
        "sha": "ca530520b1edaefd7c8165eb21fb9a53c7f06c73",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -165,9 +165,7 @@ def _tweak_msg_data_size(self, message, wrong_size):\n \n         # Replace the correct data size in the message with an incorrect one.\n         raw_msg_with_wrong_size = (\n-            raw_msg[:num_header_bytes_before_size] +\n-            bad_size_bytes +\n-            raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n+            raw_msg[:num_header_bytes_before_size] + bad_size_bytes + raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n         )\n         assert len(raw_msg) == len(raw_msg_with_wrong_size)\n "
      },
      {
        "sha": "fdaa520002b6a35ddc5dca797a8b16878219f70b",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -1329,16 +1329,14 @@ def deserialize(self, f):\n         self.message = deser_string(f)\n         self.code = struct.unpack(\"<B\", f.read(1))[0]\n         self.reason = deser_string(f)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n+        if (self.code != self.REJECT_MALFORMED and (self.message == b\"block\" or self.message == b\"tx\")):\n             self.data = deser_uint256(f)\n \n     def serialize(self):\n         r = ser_string(self.message)\n         r += struct.pack(\"<B\", self.code)\n         r += ser_string(self.reason)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n+        if (self.code != self.REJECT_MALFORMED and (self.message == b\"block\" or self.message == b\"tx\")):\n             r += ser_uint256(self.data)\n         return r\n "
      },
      {
        "sha": "5d482e041d772f9918c469a20daa84ad3ec4dc1a",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -45,8 +45,7 @@ def bech32_encode(hrp, data):\n \n def bech32_decode(bech):\n     \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n-    if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n-            (bech.lower() != bech and bech.upper() != bech)):\n+    if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or (bech.lower() != bech and bech.upper() != bech)):\n         return (None, None)\n     bech = bech.lower()\n     pos = bech.rfind('1')"
      },
      {
        "sha": "37c3331819621a6124fbbcd2d3add1f4ba3fda9b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -172,18 +172,18 @@ def main(self):\n             self.setup_network()\n             self.run_test()\n             success = TestStatus.PASSED\n-        except JSONRPCException as e:\n+        except JSONRPCException:\n             self.log.exception(\"JSONRPC error\")\n         except SkipTest as e:\n             self.log.warning(\"Test Skipped: %s\" % e.message)\n             success = TestStatus.SKIPPED\n-        except AssertionError as e:\n+        except AssertionError:\n             self.log.exception(\"Assertion failed\")\n-        except KeyError as e:\n+        except KeyError:\n             self.log.exception(\"Key error\")\n-        except Exception as e:\n+        except Exception:\n             self.log.exception(\"Unexpected exception caught during testing\")\n-        except KeyboardInterrupt as e:\n+        except KeyboardInterrupt:\n             self.log.warning(\"Exiting after keyboard interrupt\")\n \n         if success == TestStatus.FAILED and self.options.pdbonfailure:"
      },
      {
        "sha": "c0da271fab9678002edc15cec584f66ae8510d3e",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -93,12 +93,12 @@ def wallet_file(name):\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = \"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+        exp_stderr = r\"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], r'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -139,7 +139,7 @@ def wallet_file(name):\n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n-        exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n+        exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.restart_node(0, extra_args)"
      },
      {
        "sha": "6bebab382d005a90a1081e7a13caaac21f1e559a",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -16,8 +16,8 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = '(?:ForceSet|SoftSet|Get|Is)(?:Bool)?Args?(?:Set)?\\(\"(-[^\"]+)\"'\n-REGEX_DOC = 'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'(?:ForceSet|SoftSet|Get|Is)(?:Bool)?Args?(?:Set)?\\(\"(-[^\"]+)\"'\n+REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n CMD_ROOT_DIR = '`git rev-parse --show-toplevel`/{}'.format(FOLDER_GREP)\n CMD_GREP_ARGS = r\"git grep --perl-regexp '{}' -- {} ':(exclude){}'\".format(REGEX_ARG, CMD_ROOT_DIR, FOLDER_TEST)\n CMD_GREP_DOCS = r\"git grep --perl-regexp '{}' {}\".format(REGEX_DOC, CMD_ROOT_DIR)"
      },
      {
        "sha": "1bdb82cc905ce5840c2f5eb4f737286a61f28b5d",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -48,7 +48,7 @@ def process_commands(fname):\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:\n-                if re.match(\"static const CRPCCommand .*\\[\\] =\", line):\n+                if re.match(r\"static const CRPCCommand .*\\[\\] =\", line):\n                     in_rpcs = True\n             else:\n                 if line.startswith('};'):"
      },
      {
        "sha": "d5dc11e819eebd91abab341d672ee2b0fa4608b7",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd5d31d66f3a6ca8737f1249a8ddd830bff8950/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=ddd5d31d66f3a6ca8737f1249a8ddd830bff8950",
        "patch": "@@ -56,7 +56,7 @@ def normalize(s):\n     assert(type(s) is str)\n     s = s.replace(\"\\n\", \" \")\n     s = s.replace(\"\\t\", \" \")\n-    s = re.sub(\"/\\*.*?\\*/\", \" \", s)\n+    s = re.sub(r\"/\\*.*?\\*/\", \" \", s)\n     s = re.sub(\" {2,}\", \" \", s)\n     return s.strip()\n "
      }
    ]
  }
]