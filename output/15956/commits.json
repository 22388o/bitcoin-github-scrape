[
  {
    "sha": "09f8aab075e2c521020cc539e495ef6a3d5299e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWY4YWFiMDc1ZTJjNTIxMDIwY2M1MzllNDk1ZWY2YTNkNTI5OWU1",
    "commit": {
      "author": {
        "name": "Hanna Samoilova",
        "email": "40852364+Annasadra@users.noreply.github.com",
        "date": "2019-05-02T13:37:09Z"
      },
      "committer": {
        "name": "Hanna Samoilova",
        "email": "40852364+Annasadra@users.noreply.github.com",
        "date": "2019-05-02T13:37:09Z"
      },
      "message": "Set theme jekyll-theme-leap-day",
      "tree": {
        "sha": "b265d5a754005c720001a9fb88f310a4dd77fd31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b265d5a754005c720001a9fb88f310a4dd77fd31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09f8aab075e2c521020cc539e495ef6a3d5299e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f8aab075e2c521020cc539e495ef6a3d5299e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09f8aab075e2c521020cc539e495ef6a3d5299e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f8aab075e2c521020cc539e495ef6a3d5299e5/comments",
    "author": {
      "login": "Annasadra",
      "id": 40852364,
      "node_id": "MDQ6VXNlcjQwODUyMzY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/40852364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Annasadra",
      "html_url": "https://github.com/Annasadra",
      "followers_url": "https://api.github.com/users/Annasadra/followers",
      "following_url": "https://api.github.com/users/Annasadra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Annasadra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Annasadra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Annasadra/subscriptions",
      "organizations_url": "https://api.github.com/users/Annasadra/orgs",
      "repos_url": "https://api.github.com/users/Annasadra/repos",
      "events_url": "https://api.github.com/users/Annasadra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Annasadra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Annasadra",
      "id": 40852364,
      "node_id": "MDQ6VXNlcjQwODUyMzY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/40852364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Annasadra",
      "html_url": "https://github.com/Annasadra",
      "followers_url": "https://api.github.com/users/Annasadra/followers",
      "following_url": "https://api.github.com/users/Annasadra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Annasadra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Annasadra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Annasadra/subscriptions",
      "organizations_url": "https://api.github.com/users/Annasadra/orgs",
      "repos_url": "https://api.github.com/users/Annasadra/repos",
      "events_url": "https://api.github.com/users/Annasadra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Annasadra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb25cd6aa18c69918176d68e36e26f7e373aa48c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b84971359435a0abab28bcc56d7b0ce2f0f9911f",
        "filename": "_config.yml",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/_config.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/_config.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/_config.yml?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -0,0 +1 @@\n+theme: jekyll-theme-leap-day\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "a44de01a244ee104af3694be04f08b9341e4b74f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDRkZTAxYTI0NGVlMTA0YWYzNjk0YmUwNGYwOGI5MzQxZTRiNzRm",
    "commit": {
      "author": {
        "name": "Hanna Samoilova",
        "email": "40852364+Annasadra@users.noreply.github.com",
        "date": "2019-05-02T16:07:58Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-05-02T16:07:58Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nTicket Received #213057",
      "tree": {
        "sha": "82c71ffbd23b50662b36d2f537c99e9db537501a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82c71ffbd23b50662b36d2f537c99e9db537501a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a44de01a244ee104af3694be04f08b9341e4b74f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyxXeCRBK7hj4Ov3rIwAAdHIIAI0NRs+4R4jtxI4NM4M3LTnt\nV7hU6LInV4flrv2lxA6WM70ua2esGo5DBUHVoEOX5fOWNQVPNxYrD9v8UfqjHQ/o\nQgA6ZLJOjC+FJupd7gcP/e+ghy9slD5R8aieToNIShhcVT3Ru/aQ91YTTQJWR6YI\n9PPKZFxv/MhP5Z3l/dabyKERajAEZgmWblz3pvj5u+ckTo00UZ4f68sVNH+y6Dl4\n56G8YIoRuFq3slbkGLLOD0pT8xghWkrPPOuLjtn+0j3AiE2XrOuavZa6QHotVM8T\nAIXarTpERfM5+K5TwoHsTcIk6E4lV+vpcvWt3Pklx6Xs1vtNwf4Q0wna1glzj50=\n=mvV/\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 82c71ffbd23b50662b36d2f537c99e9db537501a\nparent 09f8aab075e2c521020cc539e495ef6a3d5299e5\nparent 24dfcf3a56f90b101bc208f48ccdb7813fa08b83\nauthor Hanna Samoilova <40852364+Annasadra@users.noreply.github.com> 1556813278 +0300\ncommitter GitHub <noreply@github.com> 1556813278 +0300\n\nMerge pull request #1 from bitcoin/master\n\nTicket Received #213057"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a44de01a244ee104af3694be04f08b9341e4b74f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a44de01a244ee104af3694be04f08b9341e4b74f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a44de01a244ee104af3694be04f08b9341e4b74f/comments",
    "author": {
      "login": "Annasadra",
      "id": 40852364,
      "node_id": "MDQ6VXNlcjQwODUyMzY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/40852364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Annasadra",
      "html_url": "https://github.com/Annasadra",
      "followers_url": "https://api.github.com/users/Annasadra/followers",
      "following_url": "https://api.github.com/users/Annasadra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Annasadra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Annasadra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Annasadra/subscriptions",
      "organizations_url": "https://api.github.com/users/Annasadra/orgs",
      "repos_url": "https://api.github.com/users/Annasadra/repos",
      "events_url": "https://api.github.com/users/Annasadra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Annasadra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09f8aab075e2c521020cc539e495ef6a3d5299e5"
      },
      {
        "sha": "24dfcf3a56f90b101bc208f48ccdb7813fa08b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24dfcf3a56f90b101bc208f48ccdb7813fa08b83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24dfcf3a56f90b101bc208f48ccdb7813fa08b83"
      }
    ],
    "stats": {
      "total": 67315,
      "additions": 49119,
      "deletions": 18196
    },
    "files": [
      {
        "sha": "0c43e61592c40801e15f51fcc8f8d35a4e1cfd58",
        "filename": ".appveyor.yml",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,59 @@\n+version: '{branch}.{build}'\n+skip_tags: true\n+image: Visual Studio 2017\n+configuration: Release\n+platform: x64\n+clone_depth: 5\n+environment:\n+  APPVEYOR_SAVE_CACHE_ON_ERROR: true\n+  CLCACHE_SERVER: 1\n+  PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq\n+  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n+  PYTHONUTF8: 1\n+cache:\n+- C:\\tools\\vcpkg\\installed -> .appveyor.yml\n+- C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n+install:\n+- cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n+# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n+# - cmd: pip install zmq\n+- cmd: echo set(VCPKG_BUILD_TYPE release) >> C:\\tools\\vcpkg\\triplets\\%PLATFORM%-windows-static.cmake\n+- cmd: vcpkg remove --outdated --recurse\n+- cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n+before_build:\n+- ps:  clcache -M 536870912\n+- cmd: python build_msvc\\msvc-autogen.py\n+- ps:  $files = (Get-ChildItem -Recurse | where {$_.extension -eq \".vcxproj\"}).FullName\n+- ps:  for (${i} = 0; ${i} -lt ${files}.length; ${i}++) {\n+           ${content} = (Get-Content ${files}[${i}]);\n+           ${content} = ${content}.Replace(\"</RuntimeLibrary>\", \"</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>\");\n+           ${content} = ${content}.Replace(\"<WholeProgramOptimization>true\", \"<WholeProgramOptimization>false\");\n+           Set-Content ${files}[${i}] ${content};\n+       }\n+- ps:  Start-Process clcache-server\n+- ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n+build_script:\n+- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nologo\n+after_build:\n+- ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n+- ps:  clcache -z\n+before_test:\n+- ps:  ${conf_ini} = (Get-Content([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini.in\")))\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@PACKAGE_NAME@\", \"Bitcoin Core\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_srcdir@\", ${env:APPVEYOR_BUILD_FOLDER})\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_builddir@\", ${env:APPVEYOR_BUILD_FOLDER})\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@EXEEXT@\", \".exe\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_WALLET_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIN_CLI_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIND_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_ZMQ_TRUE@\", \"\")\n+- ps:  ${utf8} = New-Object System.Text.UTF8Encoding ${false}\n+- ps:  '[IO.File]::WriteAllLines([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini\"), ${conf_ini}, ${utf8})'\n+- ps:  move \"build_msvc\\${env:PLATFORM}\\${env:CONFIGURATION}\\*.exe\" src\n+test_script:\n+- cmd: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n+- cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+- ps:  python test\\util\\bitcoin-util-test.py\n+- cmd: python test\\util\\rpcauth-test.py\n+- cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast\n+deploy: off"
      },
      {
        "sha": "9104a0a3d1de5ef880bdde0e69fbeacb344008d4",
        "filename": ".cirrus.yml",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,26 @@\n+task:\n+  name: \"FreeBsd 12.0 amd64  [GOAL: install]  [no depends, only system libs]\"\n+  freebsd_instance:\n+    image: freebsd-12-0-release-amd64\n+  ccache_cache:\n+    folder: \"/tmp/ccache_dir\"\n+  env:\n+    MAKEJOBS: \"-j3\"\n+    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n+    GOAL: \"install\"\n+    CCACHE_SIZE: \"200M\"\n+    CCACHE_COMPRESS: 1\n+    CCACHE_DIR: \"/tmp/ccache_dir\"\n+  install_script:\n+    - pkg install -y autoconf automake boost-libs git gmake libevent libtool openssl pkgconf python3 ccache\n+    - ./contrib/install_db4.sh $(pwd)\n+    - ccache --max-size=${CCACHE_SIZE}\n+  configure_script:\n+    - ./autogen.sh\n+    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n+  make_script:\n+    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n+  check_script:\n+    - gmake check ${MAKEJOBS} VERBOSE=1\n+  functional_test_script:\n+    - ./test/functional/test_runner.py --ci --combinedlogslen=1000 --quiet --failfast"
      },
      {
        "sha": "8768a8ca6b60a0298c6acfa51233b43467270ec9",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -17,5 +17,7 @@ If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, p\n \n <!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\n \n+<!-- For the GUI-related issue on Linux provide names and versions of a distro, a desktop environment and a graphical shell (if relevant). -->\n+\n <!-- Any extra information that might be useful in the debugging process. -->\n <!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->"
      },
      {
        "sha": "00d5478c4e6501dc6acae6d31a70ef05d2e11d0e",
        "filename": ".github/PULL_REQUEST_TEMPLATE.md",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.github/PULL_REQUEST_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.github/PULL_REQUEST_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,31 @@\n+Pull requests without a rationale and clear improvement may be closed\n+immediately.\n+\n+Please provide clear motivation for your patch and explain how it improves\n+Bitcoin Core user experience or Bitcoin Core developer experience\n+significantly.\n+\n+* Any test improvements or new tests that improve coverage are always welcome.\n+* All other changes should have accompanying unit tests (see `src/test/`) or\n+  functional tests (see `test/`). Contributors should note which tests cover\n+  modified code. If no tests exist for a region of modified code, new tests\n+  should accompany the change.\n+* Bug fixes are most welcome when they come with steps to reproduce or an\n+  explanation of the potential issue as well as reasoning for the way the bug\n+  was fixed.\n+* Features are welcome, but might be rejected due to design or scope issues.\n+  If a feature is based on a lot of dependencies, contributors should first\n+  consider building the system outside of Bitcoin Core, if possible.\n+* Refactoring changes are only accepted if they are required for a feature or\n+  bug fix or otherwise improve developer experience significantly. For example,\n+  most \"code style\" refactoring changes require a thorough explanation why they\n+  are useful, what downsides they have and why they *significantly* improve\n+  developer experience or avoid serious programming bugs. Note that code style\n+  is often a subjective matter. Unless they are explicitly mentioned to be\n+  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\n+  changes are usually rejected.\n+\n+Bitcoin Core has a thorough review process and even the most trivial change\n+needs to pass a lot of eyes and requires non-zero or even substantial time\n+effort to review. There is a huge lack of active reviewers on the project, so\n+patches often sit for a long time."
      },
      {
        "sha": "be784024a0b79b74d6fe14e4f1a3ee1bf5e41185",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,6 +5,7 @@ src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n+src/bitcoin-wallet\n src/test/test_bitcoin\n src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt\n@@ -65,6 +66,7 @@ src/qt/bitcoin-qt.includes\n *.a\n *.pb.cc\n *.pb.h\n+*.dat\n \n *.log\n *.trs\n@@ -116,3 +118,9 @@ test/cache/*\n \n libbitcoinconsensus.pc\n contrib/devtools/split-debug.sh\n+\n+# Output from running db4 installation\n+db4/\n+\n+# clang-check\n+*.plist"
      },
      {
        "sha": "c49282585a030b902316d2b71a73b15b5840aaa2",
        "filename": ".python-version",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1 @@\n+3.5.6"
      },
      {
        "sha": "69d8c6aee417d6fd300990e3c34ae719f16406a2",
        "filename": ".style.yapf",
        "status": "added",
        "additions": 261,
        "deletions": 0,
        "changes": 261,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.style.yapf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.style.yapf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.style.yapf?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,261 @@\n+[style]\n+# Align closing bracket with visual indentation.\n+align_closing_bracket_with_visual_indent=True\n+\n+# Allow dictionary keys to exist on multiple lines. For example:\n+#\n+#   x = {\n+#       ('this is the first element of a tuple',\n+#        'this is the second element of a tuple'):\n+#            value,\n+#   }\n+allow_multiline_dictionary_keys=False\n+\n+# Allow lambdas to be formatted on more than one line.\n+allow_multiline_lambdas=False\n+\n+# Allow splits before the dictionary value.\n+allow_split_before_dict_value=True\n+\n+# Number of blank lines surrounding top-level function and class\n+# definitions.\n+blank_lines_around_top_level_definition=2\n+\n+# Insert a blank line before a class-level docstring.\n+blank_line_before_class_docstring=False\n+\n+# Insert a blank line before a module docstring.\n+blank_line_before_module_docstring=False\n+\n+# Insert a blank line before a 'def' or 'class' immediately nested\n+# within another 'def' or 'class'. For example:\n+#\n+#   class Foo:\n+#                      # <------ this blank line\n+#     def method():\n+#       ...\n+blank_line_before_nested_class_or_def=False\n+\n+# Do not split consecutive brackets. Only relevant when\n+# dedent_closing_brackets is set. For example:\n+#\n+#    call_func_that_takes_a_dict(\n+#        {\n+#            'key1': 'value1',\n+#            'key2': 'value2',\n+#        }\n+#    )\n+#\n+# would reformat to:\n+#\n+#    call_func_that_takes_a_dict({\n+#        'key1': 'value1',\n+#        'key2': 'value2',\n+#    })\n+coalesce_brackets=False\n+\n+# The column limit.\n+column_limit=160\n+\n+# The style for continuation alignment. Possible values are:\n+#\n+# - SPACE: Use spaces for continuation alignment. This is default behavior.\n+# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n+#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n+#   alignment.\n+# - LESS: Slightly left if cannot vertically align continuation lines with\n+#   indent characters.\n+# - VALIGN-RIGHT: Vertically align continuation lines with indent\n+#   characters. Slightly right (one more indent character) if cannot\n+#   vertically align continuation lines with indent characters.\n+#\n+# For options FIXED, and VALIGN-RIGHT are only available when USE_TABS is\n+# enabled.\n+continuation_align_style=SPACE\n+\n+# Indent width used for line continuations.\n+continuation_indent_width=4\n+\n+# Put closing brackets on a separate line, dedented, if the bracketed\n+# expression can't fit in a single line. Applies to all kinds of brackets,\n+# including function definitions and calls. For example:\n+#\n+#   config = {\n+#       'key1': 'value1',\n+#       'key2': 'value2',\n+#   }        # <--- this bracket is dedented and on a separate line\n+#\n+#   time_series = self.remote_client.query_entity_counters(\n+#       entity='dev3246.region1',\n+#       key='dns.query_latency_tcp',\n+#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n+#       start_ts=now()-timedelta(days=3),\n+#       end_ts=now(),\n+#   )        # <--- this bracket is dedented and on a separate line\n+dedent_closing_brackets=False\n+\n+# Disable the heuristic which places each list element on a separate line\n+# if the list is comma-terminated.\n+disable_ending_comma_heuristic=False\n+\n+# Place each dictionary entry onto its own line.\n+each_dict_entry_on_separate_line=True\n+\n+# The regex for an i18n comment. The presence of this comment stops\n+# reformatting of that line, because the comments are required to be\n+# next to the string they translate.\n+i18n_comment=\n+\n+# The i18n function call names. The presence of this function stops\n+# reformattting on that line, because the string it has cannot be moved\n+# away from the i18n comment.\n+i18n_function_call=\n+\n+# Indent the dictionary value if it cannot fit on the same line as the\n+# dictionary key. For example:\n+#\n+#   config = {\n+#       'key1':\n+#           'value1',\n+#       'key2': value1 +\n+#               value2,\n+#   }\n+indent_dictionary_value=False\n+\n+# The number of columns to use for indentation.\n+indent_width=4\n+\n+# Join short lines into one line. E.g., single line 'if' statements.\n+join_multiple_lines=True\n+\n+# Do not include spaces around selected binary operators. For example:\n+#\n+#   1 + 2 * 3 - 4 / 5\n+#\n+# will be formatted as follows when configured with \"*,/\":\n+#\n+#   1 + 2*3 - 4/5\n+#\n+no_spaces_around_selected_binary_operators=\n+\n+# Use spaces around default or named assigns.\n+spaces_around_default_or_named_assign=False\n+\n+# Use spaces around the power operator.\n+spaces_around_power_operator=False\n+\n+# The number of spaces required before a trailing comment.\n+spaces_before_comment=2\n+\n+# Insert a space between the ending comma and closing bracket of a list,\n+# etc.\n+space_between_ending_comma_and_closing_bracket=True\n+\n+# Split before arguments\n+split_all_comma_separated_values=False\n+\n+# Split before arguments if the argument list is terminated by a\n+# comma.\n+split_arguments_when_comma_terminated=False\n+\n+# Set to True to prefer splitting before '&', '|' or '^' rather than\n+# after.\n+split_before_bitwise_operator=True\n+\n+# Split before the closing bracket if a list or dict literal doesn't fit on\n+# a single line.\n+split_before_closing_bracket=True\n+\n+# Split before a dictionary or set generator (comp_for). For example, note\n+# the split before the 'for':\n+#\n+#   foo = {\n+#       variable: 'Hello world, have a nice day!'\n+#       for variable in bar if variable != 42\n+#   }\n+split_before_dict_set_generator=True\n+\n+# Split before the '.' if we need to split a longer expression:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n+#\n+# would reformat to something like:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'\n+#          .format(a, b, c, d))\n+split_before_dot=False\n+\n+# Split after the opening paren which surrounds an expression if it doesn't\n+# fit on a single line.\n+split_before_expression_after_opening_paren=False\n+\n+# If an argument / parameter list is going to be split, then split before\n+# the first argument.\n+split_before_first_argument=False\n+\n+# Set to True to prefer splitting before 'and' or 'or' rather than\n+# after.\n+split_before_logical_operator=True\n+\n+# Split named assignments onto individual lines.\n+split_before_named_assigns=True\n+\n+# Set to True to split list comprehensions and generators that have\n+# non-trivial expressions and multiple clauses before each of these\n+# clauses. For example:\n+#\n+#   result = [\n+#       a_long_var + 100 for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+#\n+# would reformat to something like:\n+#\n+#   result = [\n+#       a_long_var + 100\n+#       for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+split_complex_comprehension=False\n+\n+# The penalty for splitting right after the opening bracket.\n+split_penalty_after_opening_bracket=30\n+\n+# The penalty for splitting the line after a unary operator.\n+split_penalty_after_unary_operator=10000\n+\n+# The penalty for splitting right before an if expression.\n+split_penalty_before_if_expr=0\n+\n+# The penalty of splitting the line around the '&', '|', and '^'\n+# operators.\n+split_penalty_bitwise_operator=300\n+\n+# The penalty for splitting a list comprehension or generator\n+# expression.\n+split_penalty_comprehension=80\n+\n+# The penalty for characters over the column limit.\n+split_penalty_excess_character=7000\n+\n+# The penalty incurred by adding a line split to the unwrapped line. The\n+# more line splits added the higher the penalty.\n+split_penalty_for_added_line_split=30\n+\n+# The penalty of splitting a list of \"import as\" names. For example:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n+#                                                             long_argument_2,\n+#                                                             long_argument_3)\n+#\n+# would reformat to something like:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (\n+#       long_argument_1, long_argument_2, long_argument_3)\n+split_penalty_import_names=0\n+\n+# The penalty of splitting the line around the 'and' and 'or'\n+# operators.\n+split_penalty_logical_operator=300\n+\n+# Use the Tab character for indentation.\n+use_tabs=False\n+"
      },
      {
        "sha": "21d1062c26208283fa2e151db104c8932a12c12f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 95,
        "deletions": 35,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,31 @@\n-sudo: required\n-dist: trusty\n+# The test build matrix (stage: test) is constructed to test a wide range of\n+# configurations, rather than a single pass/fail. This helps to catch build\n+# failures and logic errors that present on platforms other than the ones the\n+# author has tested.\n+#\n+# Some builders use the dependency-generator in `./depends`, rather than using\n+# apt-get to install build dependencies. This guarantees that the tester is\n+# using the same versions as Gitian, so the build results are nearly identical\n+# to what would be found in a final release.\n+#\n+# In order to avoid rebuilding all dependencies for each build, the binaries\n+# are cached and re-used when possible. Changes in the dependency-generator\n+# will trigger cache-invalidation and rebuilds as necessary.\n+#\n+# These caches can be manually removed if necessary. This is one of the very\n+# few manual operations that is possible with Travis, and it can be done by a\n+# Bitcoin Core GitHub member via the Travis web interface [0].\n+#\n+# Travis CI uploads the cache after the script phase of the build [1].\n+# However, the build is terminated without saving the chache if it takes over\n+# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail\n+# with an error and save the cache.\n+#\n+# [0] https://travis-ci.org/bitcoin/bitcoin/caches\n+# [1] https://docs.travis-ci.com/user/caching/#build-phases\n+# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts\n+\n+dist: xenial\n os: linux\n language: minimal\n cache:\n@@ -16,7 +42,7 @@ env:\n     - MAKEJOBS=-j3\n     - RUN_UNIT_TESTS=true\n     - RUN_FUNCTIONAL_TESTS=true\n-    - RUN_BENCH=false  # Set to true for any one job that has debug enabled, to quickly check bench is not crashing or hitting assertions\n+    - RUN_FUZZ_TESTS=false\n     - DOCKER_NAME_TAG=ubuntu:18.04\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n@@ -27,111 +53,145 @@ env:\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n     - WINEDEBUG=fixme-all\n     - DOCKER_PACKAGES=\"build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache\"\n+    - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a bitcoin maintainer to restart. The next run should not time out because the build cache has been saved.\"\n before_install:\n   - set -o errexit; source .travis/test_03_before_install.sh\n install:\n   - set -o errexit; source .travis/test_04_install.sh\n before_script:\n   - set -o errexit; source .travis/test_05_before_script.sh\n script:\n-  - set -o errexit; source .travis/test_06_script.sh\n+  - export CONTINUE=1\n+  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source .travis/test_06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n+  - if [ $SECONDS -gt 2000 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source .travis/test_06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n after_script:\n   - echo $TRAVIS_COMMIT_RANGE\n   - echo $TRAVIS_COMMIT_LOG\n jobs:\n   include:\n-# lint stage\n+\n     - stage: lint\n+      name: 'lint'\n       env:\n-      sudo: false\n       cache: false\n       language: python\n-      python: '3.6'\n+      python: '3.5' # Oldest supported version according to doc/dependencies.md\n       install:\n         - set -o errexit; source .travis/lint_04_install.sh\n       before_script:\n         - set -o errexit; source .travis/lint_05_before_script.sh\n       script:\n         - set -o errexit; source .travis/lint_06_script.sh\n-# ARM\n+\n     - stage: test\n+      name: 'ARM  [GOAL: install]  [no unit or functional tests]'\n       env: >-\n         HOST=arm-linux-gnueabihf\n-        PACKAGES=\"g++-arm-linux-gnueabihf\"\n-        DEP_OPTS=\"NO_QT=1\"\n+        PACKAGES=\"python3 g++-arm-linux-gnueabihf\"\n         RUN_UNIT_TESTS=false\n         RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"install\"\n         # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n         # This could be removed once the ABI change warning does not show up by default\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n-# Win32\n+\n     - stage: test\n+      name: 'Win32  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=i686-w64-mingw32\n         DPKG_ADD_ARCH=\"i386\"\n-        DEP_OPTS=\"NO_QT=1\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine-binfmt wine32\"\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-reduce-exports\"\n-# Win64\n+        RUN_FUNCTIONAL_TESTS=false\n+        GOAL=\"deploy\"\n+        BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+\n     - stage: test\n+      name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=x86_64-w64-mingw32\n-        DEP_OPTS=\"NO_QT=1\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-reduce-exports\"\n-# 32-bit + dash\n+        RUN_FUNCTIONAL_TESTS=false\n+        GOAL=\"deploy\"\n+        BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+\n     - stage: test\n+      name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'\n       env: >-\n         HOST=i686-pc-linux-gnu\n         PACKAGES=\"g++-multilib python3-zmq\"\n-        DEP_OPTS=\"NO_QT=1\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n         CONFIG_SHELL=\"/bin/dash\"\n-# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)\n+\n     - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout]'\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n-# x86_64 Linux (no depends, only system libs)\n+\n     - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        DOCKER_NAME_TAG=ubuntu:14.04\n+        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n         NO_DEPENDS=1\n+        RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER\"\n-# x86_64 Linux (sanitizers)\n+        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no\"\n+\n     - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        DOCKER_NAME_TAG=ubuntu:16.04\n+        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n         NO_DEPENDS=1\n-        RUN_BENCH=true\n-        RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=undefined CC=clang CXX=clang++\"\n-# x86_64 Linux, No wallet\n+        BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        NO_DEPENDS=1\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n+        NO_DEPENDS=1\n+        RUN_UNIT_TESTS=false\n+        RUN_FUNCTIONAL_TESTS=false\n+        RUN_FUZZ_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\"\n+\n     - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3\"\n+        PACKAGES=\"python3-zmq\"\n         DEP_OPTS=\"NO_WALLET=1\"\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-# Cross-Mac\n+\n     - stage: test\n+      name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'\n       env: >-\n         HOST=x86_64-apple-darwin14\n-        PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git\"\n+        PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n         OSX_SDK=10.11\n         RUN_UNIT_TESTS=false\n         RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"all deploy\"\n+        GOAL=\"deploy\"\n         BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\""
      },
      {
        "sha": "9a22773e576552f1f23e93dc79bfa950176e6d89",
        "filename": ".travis/lint_04_install.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_04_install.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,5 +6,10 @@\n \n export LC_ALL=C\n \n-travis_retry pip install codespell\n-travis_retry pip install flake8\n+travis_retry pip install codespell==1.13.0\n+travis_retry pip install flake8==3.5.0\n+travis_retry pip install vulture==0.29\n+\n+SHELLCHECK_VERSION=v0.6.0\n+curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n+export PATH=\"/tmp/shellcheck-${SHELLCHECK_VERSION}:${PATH}\""
      },
      {
        "sha": "eeebc80ec0b851dd3c2760ad7a1c0587d18bd998",
        "filename": ".travis/lint_06_script.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/lint_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/lint_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_06_script.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -19,6 +19,7 @@ test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n-    while read -r LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys &&\n-    travis_wait 50 contrib/verify-commits/verify-commits.py;\n+    git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n+    travis_retry gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n+    ./contrib/verify-commits/verify-commits.py --clean-merge=2;\n fi"
      },
      {
        "sha": "3c9fcf3f983ae0cd200bc86a9b10b603ee3e6a4f",
        "filename": ".travis/test_03_before_install.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_03_before_install.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,6 +7,8 @@\n export LC_ALL=C.UTF-8\n \n PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n+# Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.\n+PATH=$PATH:/usr/lib/llvm-6.0/bin/\n export PATH\n \n BEGIN_FOLD () {"
      },
      {
        "sha": "8055bbdd19de1837814d0df4fa29191b6f6e1e07",
        "filename": ".travis/test_04_install.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,9 +7,21 @@\n export LC_ALL=C.UTF-8\n \n travis_retry docker pull \"$DOCKER_NAME_TAG\"\n-env | grep -E '^(CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL)' | tee /tmp/env\n+\n+export DIR_FUZZ_IN=${TRAVIS_BUILD_DIR}/qa-assets\n+git clone https://github.com/bitcoin-core/qa-assets ${DIR_FUZZ_IN}\n+export DIR_FUZZ_IN=${DIR_FUZZ_IN}/fuzz_seed_corpus/\n+\n+mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n+export ASAN_OPTIONS=\"\"\n+export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\"\n+export TSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/tsan:log_path=${TRAVIS_BUILD_DIR}/sanitizer-output/tsan\"\n+export UBSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n+elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n+  DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n fi\n DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$TRAVIS_BUILD_DIR,dst=$TRAVIS_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $TRAVIS_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)\n "
      },
      {
        "sha": "8cc593f936521e92b0a5f82b58955535c9499ce8",
        "filename": ".travis/test_06_script_a.sh",
        "status": "renamed",
        "additions": 4,
        "deletions": 21,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script_a.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -40,28 +40,11 @@ BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n END_FOLD\n \n+set -o errtrace\n+trap 'DOCKER_EXEC \"cat ${TRAVIS_BUILD_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n+\n BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n END_FOLD\n \n-if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD unit-tests\n-  DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n-  END_FOLD\n-fi\n-\n-if [ \"$RUN_BENCH\" = \"true\" ]; then\n-  BEGIN_FOLD bench\n-  DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib $OUTDIR/bin/bench_bitcoin -scaling=0.001\n-  END_FOLD\n-fi\n-\n-if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n-  extended=\"--extended --exclude feature_pruning,feature_dbcrash\"\n-fi\n-\n-if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet --failfast ${extended}\n-  END_FOLD\n-fi\n+cd ${TRAVIS_BUILD_DIR} || (echo \"could not enter travis build dir $TRAVIS_BUILD_DIR\"; exit 1)",
        "previous_filename": ".travis/test_06_script.sh"
      },
      {
        "sha": "e13abfd52f303fba09a61726d38859baad6d59d1",
        "filename": ".travis/test_06_script_b.sh",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.travis/test_06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script_b.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+cd \"build/bitcoin-$HOST\" || (echo \"could not enter distdir build/bitcoin-$HOST\"; exit 1)\n+\n+if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD unit-tests\n+  DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  END_FOLD\n+fi\n+\n+if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD functional-tests\n+  DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast\n+  END_FOLD\n+fi\n+\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD fuzz-tests\n+  DOCKER_EXEC test/fuzz/test_runner.py -l DEBUG ${DIR_FUZZ_IN}\n+  END_FOLD\n+fi"
      },
      {
        "sha": "743510a7f2019fb6ca7504998f7dbd27c2b1660a",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-017x]\n+[bitcoin.qt-translation-018x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "007ebd7ccf637c8f6907422de9ce00c711b40ef9",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -25,7 +25,8 @@ Most communication about Bitcoin Core development happens on IRC, in the\n #bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n history logs can be found\n-on [botbot.me](https://botbot.me/freenode/bitcoin-core-dev/).\n+on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n+and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n \n Discussion about code base improvements happens in GitHub issues and on pull\n requests.\n@@ -61,12 +62,14 @@ Commit messages should be verbose by default consisting of a short subject line\n paragraph(s), unless the title alone is self-explanatory (like \"Corrected typo\n in init.cpp\") in which case a single title line is sufficient. Commit messages should be\n helpful to people reading your code in the future, so explain the reasoning for\n-your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n+your decisions. Further explanation [here](https://chris.beams.io/posts/git-commit/).\n \n If a particular commit references another issue, please add the reference. For\n example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n+Commit messages should never contain any `@` mentions.\n+\n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n about Git.\n \n@@ -135,6 +138,10 @@ before it will be merged. The basic squashing workflow is shown below.\n     # Save and quit.\n     git push -f # (force push to GitHub)\n \n+Please update the resulting commit message if needed, it should read as a\n+coherent message. In most cases this means that you should not just list the\n+interim commits.\n+\n If you have problems with squashing (or other workflows with `git`), you can\n alternatively enable \"Allow edits from maintainers\" in the right GitHub\n sidebar and ask for help in the pull request.\n@@ -232,7 +239,10 @@ consensus to merge a pull request (remember that discussions may have been\n spread out over GitHub, mailing list and IRC discussions). The following\n language is used within pull-request comments:\n \n-  - ACK means \"I have tested the code and I agree it should be merged\";\n+  - (t)ACK means \"I have tested the code and I agree it should be merged\", involving\n+    change-specific manual testing in addition to running the unit and functional\n+    tests, and in case it is not obvious how the manual testing was done, it should\n+    be described;\n   - NACK means \"I disagree this should be merged\", and must be accompanied by\n     sound technical justification (or in certain cases of copyright/patent/licensing\n     issues, legal justification). NACKs without accompanying reasoning may be"
      },
      {
        "sha": "9d54ecbde1229b4144e61b91dbae4638381b3dba",
        "filename": "COPYING",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,7 +1,7 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2018 The Bitcoin Core developers\n-Copyright (c) 2009-2018 Bitcoin Developers\n+Copyright (c) 2009-2019 The Bitcoin Core developers\n+Copyright (c) 2009-2019 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "ec0743c3fa94f69039fef9590480d0781dec3d9c",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -19,6 +19,8 @@ endif\n BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n+BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n+BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n empty :=\n@@ -41,6 +43,7 @@ DIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\n DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoin-tx.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n+\t       $(top_srcdir)/contrib/debian/copyright \\\n \t       $(top_srcdir)/contrib/init \\\n \t       $(top_srcdir)/contrib/install_db4.sh\n DIST_SHARE = \\\n@@ -74,6 +77,8 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n@@ -167,8 +172,14 @@ $(BITCOIND_BIN): FORCE\n $(BITCOIN_CLI_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_TX_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n+$(BITCOIN_WALLET_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n-LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n+LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n@@ -215,7 +226,11 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+\n+EXTRA_DIST += \\\n+    test/functional \\\n+    test/fuzz\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\\n@@ -294,5 +309,5 @@ clean-docs:\n \n clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n-\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n+\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n "
      },
      {
        "sha": "db79043665c820200816ab10350cb2a251b85cd2",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -31,7 +31,8 @@ The `master` branch is regularly built and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n regularly to indicate new official, stable release versions of Bitcoin Core.\n \n-The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n+The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\n+and useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n \n Testing\n -------\n@@ -65,7 +66,7 @@ Translations\n ------------\n \n Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n+[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n \n Translations are periodically pulled from Transifex and merged into the git repository. See the\n [translation process](doc/translation_process.md) for details on how this works."
      },
      {
        "sha": "99e7b9510b40017976b2535b2132534c36b06ea2",
        "filename": "appveyor.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/appveyor.yml?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,45 +0,0 @@\n-version: '{branch}.{build}'\n-skip_tags: true\n-image: Visual Studio 2017\n-configuration: Release\n-platform: x64\n-environment:\n-  APPVEYOR_SAVE_CACHE_ON_ERROR: true\n-  CLCACHE_SERVER: 1\n-  PACKAGES: boost-filesystem boost-signals2 boost-interprocess boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb\n-cache:\n-- C:\\tools\\vcpkg\\installed\n-- C:\\Users\\appveyor\\clcache\n-- build_msvc\\cache\n-init:\n-- cmd: set PATH=C:\\Python36-x64;C:\\Python36-x64\\Scripts;%PATH%\n-install:\n-- cmd: pip install git+https://github.com/frerich/clcache.git\n-- ps:  $packages = $env:PACKAGES -Split ' '\n-- ps:  for ($i=0; $i -lt $packages.length; $i++) {\n-           $env:ALL_PACKAGES += $packages[$i] + \":\" + $env:PLATFORM + \"-windows-static \"\n-       }\n-- cmd: git -C C:\\Tools\\vcpkg pull # This is a temporary fix, can be removed after appveyor update its image to include Microsoft/vcpkg#4046\n-- cmd: vcpkg install %ALL_PACKAGES%\n-- cmd: vcpkg upgrade --no-dry-run\n-- cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n-before_build:\n-- cmd: if not exist build_msvc\\cache\\ (del build_msvc\\cache & mkdir build_msvc\\cache)\n-- cmd: if not exist build_msvc\\%PLATFORM%\\%CONFIGURATION%\\ (mkdir build_msvc\\%PLATFORM%\\%CONFIGURATION%)\n-- cmd: if exist build_msvc\\cache\\*.iobj (move build_msvc\\cache\\* build_msvc\\%PLATFORM%\\%CONFIGURATION%\\)\n-- cmd: clcache -M 2147483648\n-- cmd: python build_msvc\\msvc-autogen.py\n-- ps:  $files = (Get-ChildItem -Recurse | where {$_.extension -eq \".vcxproj\"}).FullName\n-- ps:  for ($i = 0; $i -lt $files.length; $i++) {\n-           (Get-Content $files[$i]).Replace(\"</RuntimeLibrary>\", \"</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>\").Replace(\"NDEBUG;\", \"\") | Set-Content $files[$i]\n-       }\n-- ps:  Start-Process clcache-server\n-build_script:\n-- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nowarn:C4244;C4267;C4715 /nologo\n-after_build:\n-- cmd: move build_msvc\\%PLATFORM%\\%CONFIGURATION%\\*.iobj build_msvc\\cache\\\n-- cmd: move build_msvc\\%PLATFORM%\\%CONFIGURATION%\\*.ipdb build_msvc\\cache\\\n-- cmd: del C:\\Users\\appveyor\\clcache\\stats.txt\n-test_script:\n-- cmd: build_msvc\\%PLATFORM%\\%CONFIGURATION%\\test_bitcoin.exe\n-deploy: off"
      },
      {
        "sha": "1a7c5d5f7d39d1c82b9cf7d345e302fa453d54fd",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -116,24 +116,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n     _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-    AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <QtCore/qconfig.h>\n-          #ifndef QT_VERSION\n-          #  include <QtCore/qglobal.h>\n-          #endif\n-        ]],\n-        [[\n-          #if QT_VERSION >= 0x050400\n-          choke\n-          #endif\n-        ]])],\n-      [bitcoin_cv_need_acc_widget=yes],\n-      [bitcoin_cv_need_acc_widget=no])\n-    ])\n-    if test \"x$bitcoin_cv_need_acc_widget\" = xyes; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n-    fi\n     _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n     AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     if test \"x$TARGET_OS\" = xwindows; then\n@@ -264,7 +246,7 @@ dnl All macros below are internal and should _not_ be used from the main\n dnl configure.ac.\n dnl ----\n \n-dnl Internal. Check if the included version of Qt is Qt5.\n+dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n@@ -276,7 +258,7 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n       #endif\n     ]],\n     [[\n-      #if QT_VERSION < 0x050000 || QT_VERSION_MAJOR < 5\n+      #if QT_VERSION < 0x050501\n       choke\n       #endif\n     ]])],\n@@ -374,9 +356,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n                 fi\n        if test \"x$TARGET_OS\" = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n-         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-         fi\n+         PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n        elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n          PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n@@ -527,4 +507,3 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n-"
      },
      {
        "sha": "63c5babf350fc6c2121d69753772b3250b197cf0",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -31,20 +31,13 @@ Additional dependencies required from the [bitcoin-core](https://github.com/bitc\n \n Building\n ---------------------\n-The instructions below use vcpkg to install the dependencies.\n+The instructions below use `vcpkg` to install the dependencies.\n \n-- Clone and vcpkg from the [github repository](https://github.com/Microsoft/vcpkg) and install as per the instructions in the main README.md.\n+- Clone `vcpkg` from the [github repository](https://github.com/Microsoft/vcpkg) and install as per the instructions in the main README.md.\n - Install the required packages (replace x64 with x86 as required):\n-- Install the required dependencies with vcpkg:\n \n ```\n-    PS >.\\vcpkg install boost:x64-windows-static `\n-    libevent:x64-windows-static `\n-    openssl:x64-windows-static `\n-    zeromq:x64-windows-static `\n-    berkeleydb:x64-windows-static `\n-    secp256k1:x64-windows-static `\n-    leveldb:x64-windows-static\n+    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb\n ```\n \n - Use Python to generate *.vcxproj from Makefile\n@@ -53,4 +46,4 @@ The instructions below use vcpkg to install the dependencies.\n     PS >python msvc-autogen.py\n ```\n \n-- Build in Visual Studio.\n\\ No newline at end of file\n+- Build in Visual Studio."
      },
      {
        "sha": "723e230d3ac9fe9904d018cd112fb7c0bdd54a53",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -20,6 +20,10 @@\n     </ProjectConfiguration>\n   </ItemGroup>\n   <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\test\\util.h\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\util.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\setup_common.h\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\base58.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\bech32.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\bench.cpp\" />\n@@ -32,8 +36,10 @@\n     <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\rpc_mempool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\wallet_balance.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\verify_script.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n@@ -61,6 +67,12 @@\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>15.0</VCProjectVersion>\n@@ -140,7 +152,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -158,7 +169,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -174,7 +184,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -192,7 +201,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "6b668054a398d5152d8e9f011b7339d01947c158",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -111,9 +111,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +130,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -147,7 +145,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -163,9 +160,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "1d0174e31948a753a34cc3d706e38d4d570c5c64",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -38,6 +38,9 @@\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>15.0</VCProjectVersion>\n@@ -111,9 +114,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +133,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -147,7 +148,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -163,9 +163,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "fa86da7bae7b8ed4f2e62b5f0da796704647b884",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "added",
        "additions": 197,
        "deletions": 0,
        "changes": 197,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,197 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\bitcoin-wallet.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n+      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n+      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n+      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n+      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\">\n+      <Project>{f91ac55e-6f5e-4c58-9ac5-b40db7deef93}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{84DE8790-EDE3-4483-81AC-C32F15E861F4}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>bitcointx</RootNamespace>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "45bc934d77726fbaf94aeb0c429463cd1dabc256",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 42,
        "deletions": 1,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,4 +1,4 @@\n-\ufeffMicrosoft Visual Studio Solution File, Format Version 12.00\n+Microsoft Visual Studio Solution File, Format Version 12.00\n # Visual Studio 15\n VisualStudioVersion = 15.0.27130.2027\n MinimumVisualStudioVersion = 10.0.40219.1\n@@ -32,6 +32,14 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n+EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\"\n+EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libsecp256k1\", \"libsecp256k1\\libsecp256k1.vcxproj\", \"{BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}\"\n+EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libleveldb\", \"libleveldb\\libleveldb.vcxproj\", \"{18430FEF-6B61-4C53-B396-718E02850F1B}\"\n+EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n@@ -160,6 +168,38 @@ Global\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.Build.0 = Release|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.ActiveCfg = Release|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.Build.0 = Release|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.ActiveCfg = Debug|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.Build.0 = Debug|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.Build.0 = Debug|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.ActiveCfg = Release|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.Build.0 = Release|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.ActiveCfg = Release|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.Build.0 = Release|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.ActiveCfg = Debug|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.Build.0 = Debug|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.ActiveCfg = Debug|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.Build.0 = Debug|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.ActiveCfg = Release|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.Build.0 = Release|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.ActiveCfg = Release|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.Build.0 = Release|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.ActiveCfg = Debug|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.Build.0 = Debug|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.ActiveCfg = Debug|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.Build.0 = Debug|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.ActiveCfg = Release|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.Build.0 = Release|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.ActiveCfg = Release|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.Build.0 = Release|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.ActiveCfg = Debug|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.Build.0 = Debug|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.ActiveCfg = Debug|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.Build.0 = Debug|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.ActiveCfg = Release|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.Build.0 = Release|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.ActiveCfg = Release|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE\n@@ -170,3 +210,4 @@ Global\n                                 SolutionGuid = {D0CAE2D0-8DB1-4A0B-80EE-800AA6C64323}\n         SolutionGuid = {DA7D16A6-E5F0-45B3-B194-C3FE64F1BFCD}\n     EndGlobalSection\n+EndGlobal"
      },
      {
        "sha": "b5a05e2629ea15552e23729cd139ec9aaf3c3995",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,10 +11,10 @@\n #define CLIENT_VERSION_IS_RELEASE false\n \n /* Major version */\n-#define CLIENT_VERSION_MAJOR 1\n+#define CLIENT_VERSION_MAJOR 0\n \n /* Minor version */\n-#define CLIENT_VERSION_MINOR 17\n+#define CLIENT_VERSION_MINOR 18\n \n /* Build revision */\n #define CLIENT_VERSION_REVISION 99\n@@ -29,7 +29,7 @@\n #define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Core\"\n \n /* Copyright year */\n-#define COPYRIGHT_YEAR 2018\n+#define COPYRIGHT_YEAR 2019\n \n /* Define to 1 to enable wallet functions */\n #define ENABLE_WALLET 1"
      },
      {
        "sha": "bb212af52e5c55734056c9b7254be358cb409fec",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -79,7 +79,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -96,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -113,9 +111,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -136,9 +133,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -180,6 +176,12 @@\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "889dc6c2ade3e3f4ef575d9f60ec58efa0dc3c20",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,13 +3,28 @@\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n   <PropertyGroup>\n       <BuildDependsOn>\n-          CopyConfig;\n+          CopyBitcoinConfig;\n+          CopySecp256k1Config;\n           $(BuildDependsOn);\n       </BuildDependsOn>\n   </PropertyGroup>\n-  <Target Name=\"CopyConfig\"\n+  <Target Name=\"CopyBitcoinConfig\"\n           Inputs=\"$(MSBuildThisFileDirectory)bitcoin_config.h\"\n           Outputs=\"$(MSBuildThisFileDirectory)..\\src\\config\\bitcoin-config.h\">\n       <Copy SourceFiles=\"$(MSBuildThisFileDirectory)bitcoin_config.h\" DestinationFiles=\"$(MSBuildThisFileDirectory)..\\src\\config\\bitcoin-config.h\" />\n   </Target>\n-</Project>\n\\ No newline at end of file\n+  <Target Name=\"CopySecp256k1Config\"\n+          Inputs=\"$(MSBuildThisFileDirectory)libsecp256k1_config.h\"\n+          Outputs=\"$(MSBuildThisFileDirectory)..\\src\\secp256k1\\src\\libsecp256k1-config.h\">\n+      <Copy SourceFiles=\"$(MSBuildThisFileDirectory)libsecp256k1_config.h\" DestinationFiles=\"$(MSBuildThisFileDirectory)..\\src\\secp256k1\\src\\libsecp256k1-config.h\" />\n+  </Target>\n+  <ItemDefinitionGroup>\n+    <ClCompile>\n+      <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n+      <DisableSpecificWarnings>4018;4244;4267;4715;4805;</DisableSpecificWarnings>\n+      <TreatWarningAsError>true</TreatWarningAsError>\n+      <PreprocessorDefinitions>_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+    </ClCompile>\n+  </ItemDefinitionGroup>\n+</Project>"
      },
      {
        "sha": "5849e463a631ec965ecc5492e5e93f61b73f7c92",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -97,9 +97,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -116,7 +115,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +129,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -146,9 +143,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "292e193f5de02236ff09a3e55debfef6d1fed080",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -91,7 +91,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -109,7 +108,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -127,9 +125,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n@@ -149,9 +146,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>"
      },
      {
        "sha": "e7002036adfe597b46f7a2f88b076889c5ffd332",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -89,7 +89,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -104,7 +103,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -119,9 +117,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -138,9 +135,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "73ba90aa8828790848288c54e9252b9c1e9ceda0",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 27,
        "deletions": 6,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -61,6 +61,9 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_af_ZA.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_am.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ar.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n@@ -73,10 +76,10 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_bg_BG.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca%40valencia.ts\">\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca.ts\">\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca%40valencia.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca_ES.ts\">\n@@ -178,9 +181,15 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hu.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_id.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_id_ID.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_is.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_it.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n@@ -196,6 +205,9 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_kk_KZ.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ko.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ko_KR.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n@@ -217,6 +229,9 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mk_MK.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ml.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mn.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n@@ -262,18 +277,24 @@\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sl_SI.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sq.ts\">\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sn.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr%40latin.ts\">\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sq.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr%40latin.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sv.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n+    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_szl.ts\">\n+      <DeploymentContent>true</DeploymentContent>\n+    </None>\n     <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ta.ts\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n@@ -852,7 +873,7 @@\n       <Optimization>Disabled</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>false</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -901,7 +922,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "0b4aa1e40756f828b7c8689adb2107e1ae145a09",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -89,9 +89,8 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -104,9 +103,8 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -122,9 +120,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -141,9 +138,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -154,13 +150,10 @@\n     </Link>\n   </ItemDefinitionGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\rpc\\net.cpp\">\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-    </ClCompile>\n @SOURCE_FILES@\n+    <ClCompile Include=\"..\\..\\src\\wallet\\init.cpp\">\n+      <ObjectFileName>$(IntDir)wallet_init.obj</ObjectFileName>\n+    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <None Include=\"packages.config\" />"
      },
      {
        "sha": "dbd91cf4db23d22a8be996b620e11f67a42316b5",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -92,7 +92,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -112,7 +111,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -132,9 +130,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -156,9 +153,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "33f4054546b7cfbeef05483db011fef2d48d14f1",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -129,9 +127,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -149,9 +146,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>"
      },
      {
        "sha": "187d95568798f71dd471cdd19f4f2ef32f4dc2b4",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "added",
        "additions": 162,
        "deletions": 0,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+@SOURCE_FILES@\n+  </ItemGroup>\n+  <ItemGroup>\n+    <None Include=\"packages.config\" />\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>libbitcoin_zmq</RootNamespace>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "c877a280c094dbe678b9d011204c4b33671dbc7c",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -129,9 +127,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -149,9 +146,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>"
      },
      {
        "sha": "227b1ebcd21d18e4858c8314ab482c5fb6893761",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -22,6 +22,7 @@\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\arith_uint256.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\consensus\\merkle.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\consensus\\tx_check.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\aes.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\chacha20.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\hmac_sha256.cpp\" />\n@@ -40,7 +41,7 @@\n     <ClCompile Include=\"..\\..\\src\\script\\script.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\script\\script_error.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\uint256.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\utilstrencodings.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\util\\strencodings.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n     <None Include=\"packages.config\" />\n@@ -126,7 +127,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -143,7 +143,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -160,9 +159,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -181,9 +179,8 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "545508001e9682c2f34742955eb6de60a774f8b8",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "added",
        "additions": 202,
        "deletions": 0,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,202 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\builder.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\c.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\dbformat.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\db_impl.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\db_iter.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\dumpfile.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\filename.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\log_reader.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\log_writer.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\memtable.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\repair.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\table_cache.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\version_edit.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\version_set.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\db\\write_batch.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\helpers\\memenv\\memenv.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\port\\port_posix_sse.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\port\\port_win.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\block.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\block_builder.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\filter_block.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\format.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\iterator.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\merger.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\table.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\table_builder.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\table\\two_level_iterator.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\arena.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\bloom.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\cache.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\coding.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\comparator.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\crc32c.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\env.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\env_win.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\filter_policy.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\hash.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\histogram.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\logging.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\options.cc\" />\n+    <ClCompile Include=\"..\\..\\src\\leveldb\\util\\status.cc\" />\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{18430FEF-6B61-4C53-B396-718E02850F1B}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>libunivalue</RootNamespace>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+  <ItemDefinitionGroup>\n+    <ClCompile>\n+      <TreatWarningAsError>false</TreatWarningAsError>\n+    </ClCompile>\n+  </ItemDefinitionGroup>\n+</Project>"
      },
      {
        "sha": "b4c9ec28ee6b78fb5b1f48f38e527da8be37f8f4",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,157 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\secp256k1\\src\\secp256k1.c\" />\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>libunivalue</RootNamespace>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "5187c946a0d0fb4f49c392bbc881c416bfd763b8",
        "filename": "build_msvc/libsecp256k1_config.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libsecp256k1_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libsecp256k1_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1_config.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,29 @@\n+/**********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                             *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef BITCOIN_LIBSECP256K1_CONFIG_H\n+#define BITCOIN_LIBSECP256K1_CONFIG_H\n+\n+#undef USE_ASM_X86_64\n+#undef USE_ENDOMORPHISM\n+#undef USE_FIELD_10X26\n+#undef USE_FIELD_5X52\n+#undef USE_FIELD_INV_BUILTIN\n+#undef USE_FIELD_INV_NUM\n+#undef USE_NUM_GMP\n+#undef USE_NUM_NONE\n+#undef USE_SCALAR_4X64\n+#undef USE_SCALAR_8X32\n+#undef USE_SCALAR_INV_BUILTIN\n+#undef USE_SCALAR_INV_NUM\n+\n+#define USE_NUM_NONE 1\n+#define USE_FIELD_INV_BUILTIN 1\n+#define USE_SCALAR_INV_BUILTIN 1\n+#define USE_FIELD_10X26 1\n+#define USE_SCALAR_8X32 1\n+\n+#endif /* BITCOIN_LIBSECP256K1_CONFIG_H */"
      },
      {
        "sha": "c3799b6408c97a25e3e2dbf903f531766e708007",
        "filename": "build_msvc/libunivalue/libunivalue.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libunivalue/libunivalue.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/libunivalue/libunivalue.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libunivalue/libunivalue.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -125,7 +125,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -144,7 +144,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "c8df29eecb713d91fe94c360398d143193db2b84",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,15 +11,12 @@\n     'libbitcoin_crypto',\n     'libbitcoin_server',\n     'libbitcoin_util',\n+    'libbitcoin_wallet_tool',\n     'libbitcoin_wallet',\n     'libbitcoin_zmq',\n ]\n \n ignore_list = [\n-    'rpc/net.cpp',\n-    'interfaces/handler.cpp',\n-    'interfaces/node.cpp',\n-    'interfaces/wallet.cpp',\n ]\n \n lib_sources = {}\n@@ -32,7 +29,9 @@ def parse_makefile(makefile):\n             if current_lib:\n                 source = line.split()[0]\n                 if source.endswith('.cpp') and not source.startswith('$') and source not in ignore_list:\n-                    lib_sources[current_lib].append(source.replace('/', '\\\\'))\n+                    source_filename = source.replace('/', '\\\\')\n+                    object_filename = source.replace('/', '_')[:-4] + \".obj\"\n+                    lib_sources[current_lib].append((source_filename, object_filename))\n                 if not line.endswith('\\\\'):\n                     current_lib = ''\n                 continue\n@@ -51,8 +50,10 @@ def main():\n     for key, value in lib_sources.items():\n         vcxproj_filename = os.path.abspath(os.path.join(os.path.dirname(__file__), key, key + '.vcxproj'))\n         content = ''\n-        for source_filename in value:\n-            content += '    <ClCompile Include=\"..\\\\..\\\\src\\\\' + source_filename + '\" />\\n'\n+        for source_filename, object_filename in value:\n+            content += '    <ClCompile Include=\"..\\\\..\\\\src\\\\' + source_filename + '\">\\n'\n+            content += '      <ObjectFileName>$(IntDir)' + object_filename + '</ObjectFileName>\\n'\n+            content += '    </ClCompile>\\n'\n         with open(vcxproj_filename + '.in', 'r', encoding='utf-8') as vcxproj_in_file:\n             with open(vcxproj_filename, 'w', encoding='utf-8') as vcxproj_file:\n                 vcxproj_file.write(vcxproj_in_file.read().replace("
      },
      {
        "sha": "a5d666c114f4d0de086b11b6e883a920a02232af",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -89,7 +89,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>\n@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "92fe95bddc68c55252ab07b3df25ce5a0eb494cf",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -21,10 +21,12 @@\n   </ItemGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\test\\*_tests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\*_properties.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\gen\\*_gen.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_tests.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin_main.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\test\\wallet_test_fixture.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\setup_common.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\main.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_fixture.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n@@ -54,6 +56,12 @@\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>15.0</VCProjectVersion>\n@@ -127,7 +135,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -144,7 +151,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -162,7 +168,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -182,7 +187,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "a2f565904989de9d569af30b61f379d2e660b4b5",
        "filename": "build_msvc/testconsensus/testconsensus.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/testconsensus/testconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/build_msvc/testconsensus/testconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.vcxproj?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -95,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -110,7 +109,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -129,7 +127,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -148,7 +145,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -168,6 +164,9 @@\n     <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n       <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "854d6b1d49a7bdad5375c7659b7afe1cb3f6665f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 128,
        "deletions": 35,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,14 +1,15 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 17)\n+define(_CLIENT_VERSION_MINOR, 18)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_RC, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2018)\n+define(_COPYRIGHT_YEAR, 2019)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n+AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_REVISION, m4_if(_CLIENT_VERSION_BUILD, [0], [], _CLIENT_VERSION_BUILD))m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n@@ -18,6 +19,7 @@ BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -83,8 +85,8 @@ AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n-dnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\n-AC_PATH_PROGS([PYTHON], [python3.7 python3.6 python3.5 python3.4 python3 python])\n+dnl Python 3.5 is specified in .python-version and should be used if available, see doc/dependencies.md\n+AC_PATH_PROGS([PYTHON], [python3.5 python3.6 python3.7 python3.8 python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n@@ -101,7 +103,6 @@ AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n-# Enable wallet\n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--disable-wallet],\n   [disable wallet (enabled by default)])],\n@@ -146,6 +147,11 @@ AC_ARG_ENABLE([extended-functional-tests],\n     [use_extended_functional_tests=$enableval],\n     [use_extended_functional_tests=no])\n \n+AC_ARG_ENABLE([fuzz],\n+    AS_HELP_STRING([--enable-fuzz],[enable building of fuzz targets (default no)]),\n+    [enable_fuzz=$enableval],\n+    [enable_fuzz=no])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -189,8 +195,8 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=no])\n \n AC_ARG_ENABLE([asm],\n-  [AS_HELP_STRING([--enable-asm],\n-  [Enable assembly routines (default is yes)])],\n+  [AS_HELP_STRING([--disable-asm],\n+  [disable assembly routines (enabled by default)])],\n   [use_asm=$enableval],\n   [use_asm=yes])\n \n@@ -209,6 +215,11 @@ AC_ARG_ENABLE([zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n+AC_ARG_ENABLE([bip70],\n+  [AS_HELP_STRING([--disable-bip70],\n+  [disable BIP70 (payment protocol) support in GUI (enabled by default)])],\n+  [enable_bip70=$enableval],\n+  [enable_bip70=auto])\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n@@ -289,7 +300,14 @@ if test x$use_sanitizers != x; then\n   AX_CHECK_LINK_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n-    [AC_MSG_ERROR([linker did not accept requested flags, you are missing required libraries])])\n+    [AC_MSG_ERROR([linker did not accept requested flags, you are missing required libraries])],\n+    [],\n+    [AC_LANG_PROGRAM([[\n+    #include <cstdint>\n+    #include <cstddef>\n+    extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { return 0; }\n+    __attribute__((weak)) // allow for libFuzzer linking\n+    ]],[[]])])\n fi\n \n ERROR_CXXFLAGS=\n@@ -321,6 +339,13 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n fi\n \n+enable_hwcrc32=no\n+enable_sse41=no\n+enable_avx2=no\n+enable_shani=no\n+\n+if test \"x$use_asm\" = \"xyes\"; then\n+\n # Check for optional instruction set support. Enabling these does _not_ imply that all code will\n # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n # compatibility.\n@@ -398,14 +423,34 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n+fi\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-wallet (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n+AC_ARG_ENABLE([util-cli],\n+  [AS_HELP_STRING([--enable-util-cli],\n+  [build bitcoin-cli])],\n+  [build_bitcoin_cli=$enableval],\n+  [build_bitcoin_cli=$build_bitcoin_utils])\n+\n+AC_ARG_ENABLE([util-tx],\n+  [AS_HELP_STRING([--enable-util-tx],\n+  [build bitcoin-tx])],\n+  [build_bitcoin_tx=$enableval],\n+  [build_bitcoin_tx=$build_bitcoin_utils])\n+\n+AC_ARG_ENABLE([util-wallet],\n+  [AS_HELP_STRING([--enable-util-wallet],\n+  [build bitcoin-wallet])],\n+  [build_bitcoin_wallet=$enableval],\n+  [build_bitcoin_wallet=$build_bitcoin_utils])\n+\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -460,7 +505,7 @@ case $host in\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601\"\n      LEVELDB_TARGET_FLAGS=\"-DOS_WINDOWS\"\n      if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n        CXXFLAGS=\"$CXXFLAGS -w\"\n@@ -486,17 +531,6 @@ case $host in\n      LEVELDB_TARGET_FLAGS=\"-DOS_MACOSX\"\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n-       AC_CHECK_PROG([PORT],port, port)\n-       if test x$PORT = xport; then\n-         dnl add default macports paths\n-         CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n-         LIBS=\"$LIBS -L/opt/local/lib\"\n-         if test -d /opt/local/include/db48; then\n-           CPPFLAGS=\"$CPPFLAGS -I/opt/local/include/db48\"\n-           LIBS=\"$LIBS -L/opt/local/lib/db48\"\n-         fi\n-       fi\n-\n        AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n@@ -733,6 +767,10 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n \n+AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n+    [#include <sys/types.h>\n+    #include <ifaddrs.h>]\n+)\n AC_CHECK_DECLS([strnlen])\n \n # Check for daemon(3), unrelated to --with-daemon (although used by it)\n@@ -798,8 +836,23 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   }\n   ])],\n   [\n-    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n-    AC_MSG_RESULT(yes)\n+   case $host in\n+     *mingw*)\n+        # mingw32's implementation of thread_local has also been shown to behave\n+        # erroneously under concurrent usage; see:\n+        # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+        AC_MSG_RESULT(no)\n+        ;;\n+      *darwin*)\n+        # TODO enable thread_local on later versions of Darwin where it is\n+        # supported (per https://stackoverflow.com/a/29929949)\n+        AC_MSG_RESULT(no)\n+        ;;\n+      *)\n+        AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+        AC_MSG_RESULT(yes)\n+        ;;\n+    esac\n   ],\n   [\n     AC_MSG_RESULT(no)\n@@ -882,7 +935,7 @@ BITCOIN_QT_INIT\n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n \n-if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n     use_boost=no\n else\n     use_boost=yes\n@@ -1066,11 +1119,13 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      if test x$enable_bip70 != xno; then\n+        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [have_protobuf=no])])\n+      fi\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n-      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+      if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n         PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n         if test x$TARGET_OS != xwindows; then\n           PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n@@ -1095,7 +1150,7 @@ else\n   AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n   AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n \n-  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+  if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n     AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n     AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n     if test x$TARGET_OS != xwindows; then\n@@ -1126,7 +1181,9 @@ else\n     esac\n   fi\n \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  if test x$enable_bip70 != xno; then\n+    BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], [have_protobuf=no]))\n+  fi\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n@@ -1160,7 +1217,7 @@ dnl univalue check\n \n need_bundled_univalue=yes\n \n-if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n   need_bundled_univalue=no\n else\n \n@@ -1204,15 +1261,27 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n-BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n+\n+if test x$have_protobuf != xno &&\n+   test x$enable_bip70 != xno; then\n+  BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n+fi\n \n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n \n-AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n-AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n-AC_MSG_RESULT($build_bitcoin_utils)\n+AC_MSG_CHECKING([whether to build bitcoin-cli])\n+AM_CONDITIONAL([BUILD_BITCOIN_CLI], [test x$build_bitcoin_cli = xyes])\n+AC_MSG_RESULT($build_bitcoin_cli)\n+\n+AC_MSG_CHECKING([whether to build bitcoin-tx])\n+AM_CONDITIONAL([BUILD_BITCOIN_TX], [test x$build_bitcoin_tx = xyes])\n+AC_MSG_RESULT($build_bitcoin_tx)\n+\n+AC_MSG_CHECKING([whether to build bitcoin-wallet])\n+AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n+AC_MSG_RESULT($build_bitcoin_wallet)\n \n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n@@ -1318,6 +1387,23 @@ if test x$bitcoin_enable_qt != xno; then\n   else\n     AC_MSG_RESULT([no])\n   fi\n+\n+  AC_MSG_CHECKING([whether to build BIP70 support])\n+  if test x$have_protobuf = xno; then\n+    if test x$enable_bip70 = xyes; then\n+      AC_MSG_ERROR(protobuf missing)\n+    fi\n+    enable_bip70=no\n+    AC_MSG_RESULT(no)\n+  else\n+    if test x$enable_bip70 != xno; then\n+      AC_DEFINE([ENABLE_BIP70],[1],[Define if BIP70 support should be compiled in])\n+      enable_bip70=yes\n+      AC_MSG_RESULT([yes])\n+    else\n+      AC_MSG_RESULT([no])\n+    fi\n+  fi\n fi\n \n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n@@ -1338,7 +1424,7 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n@@ -1347,8 +1433,10 @@ AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n+AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n@@ -1383,6 +1471,7 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)\n@@ -1483,10 +1572,14 @@ echo \"Options used to compile and link:\"\n echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n+    echo \"    with bip70  = $enable_bip70\"\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\"\n echo \"  with test     = $use_tests\"\n+if test x$use_tests != xno; then\n+    echo \"    with fuzz   = $enable_fuzz\"\n+fi\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  use asm       = $use_asm\""
      },
      {
        "sha": "f4cac841822130a58d49cb224e7332e1afdcc427",
        "filename": "contrib/bitcoin-cli.bash-completion",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/bitcoin-cli.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/bitcoin-cli.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-cli.bash-completion?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -50,7 +50,7 @@ _bitcoin_cli() {\n                 COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n-            signrawtransaction)\n+            signrawtransactionwithkey|signrawtransactionwithwallet)\n                 COMPREPLY=( $( compgen -W \"ALL NONE SINGLE ALL|ANYONECANPAY NONE|ANYONECANPAY SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n                 return 0\n                 ;;"
      },
      {
        "sha": "2d5b0188d25ce00b4f01c5bc70a2a5a32a40093c",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,7 @@ Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2018, Bitcoin Core Developers\n+Copyright: 2009-2019, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project."
      },
      {
        "sha": "0c8c39650361e52f2d509637b4c129062e56eec9",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,6 +7,8 @@ clang-format-diff.py\n \n A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n \n+Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS.\n+\n For instance, to format the last commit with 0 lines of context,\n the script should be called from the git root folder as follows.\n \n@@ -119,7 +121,25 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n \n     git config githubmerge.repository bitcoin/bitcoin\n     git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n-    git config --global user.signingkey mykeyid (if you want to GPG sign)\n+    git config --global user.signingkey mykeyid\n+\n+Authentication (optional)\n+--------------------------\n+\n+The API request limit for unauthenticated requests is quite low, but the\n+limit for authenticated requests is much higher. If you start running\n+into rate limiting errors it can be useful to set an authentication token\n+so that the script can authenticate requests.\n+\n+- First, go to [Personal access tokens](https://github.com/settings/tokens).\n+- Click 'Generate new token'.\n+- Fill in an arbitrary token description. No further privileges are needed.\n+- Click the `Generate token` button at the bottom of the form.\n+- Copy the generated token (should be a hexadecimal string)\n+\n+Then do:\n+\n+    git config --global user.ghtoken \"pasted token\"\n \n Create and verify timestamps of merge commits\n ---------------------------------------------\n@@ -149,7 +169,7 @@ still compatible with the minimum supported Linux distribution versions.\n \n Example usage after a gitian build:\n \n-    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py \n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n If only supported symbols are used the return value will be 0 and the output will be empty.\n "
      },
      {
        "sha": "2e4657f1dd5433ad130f06cdf4d1c64a33f75960",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,9 +8,18 @@\n     'core_write.cpp': 'core_io.cpp',\n }\n \n+# Directories with header-based modules, where the assumption that .cpp files\n+# define functions and variables declared in corresponding .h files is\n+# incorrect.\n+HEADER_MODULE_PATHS = [\n+    'interfaces/'\n+]\n+\n def module_name(path):\n     if path in MAPPING:\n         path = MAPPING[path]\n+    if any(path.startswith(dirpath) for dirpath in HEADER_MODULE_PATHS):\n+        return path\n     if path.endswith(\".h\"):\n         return path[:-2]\n     if path.endswith(\".c\"):"
      },
      {
        "sha": "f322b3a88049a603ad517eccc272522bfc1f0202",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -109,7 +109,7 @@ def main():\n     match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n     if match:\n       filename = match.group(2)\n-    if filename == None:\n+    if filename is None:\n       continue\n \n     if args.regex is not None:"
      },
      {
        "sha": "f2987f2260546c067aaa7fe24acd4804ac4570b2",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 34,
        "deletions": 45,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -15,51 +15,55 @@\n ################################################################################\n \n EXCLUDE = [\n-    # libsecp256k1:\n-    'src/secp256k1/include/secp256k1.h',\n-    'src/secp256k1/include/secp256k1_ecdh.h',\n-    'src/secp256k1/include/secp256k1_recovery.h',\n-    'src/secp256k1/include/secp256k1_schnorr.h',\n-    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',\n-    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h',\n-    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',\n-    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h',\n-    # univalue:\n-    'src/univalue/test/object.cpp',\n-    'src/univalue/lib/univalue_escapes.h',\n     # auto generated:\n     'src/qt/bitcoinstrings.cpp',\n     'src/chainparamsseeds.h',\n     # other external copyrights:\n     'src/tinyformat.h',\n-    'src/leveldb/util/env_win.cc',\n-    'src/crypto/ctaes/bench.c',\n     'test/functional/test_framework/bignum.py',\n     # python init:\n     '*__init__.py',\n ]\n EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))\n \n+EXCLUDE_DIRS = [\n+    # git subtrees\n+    \"src/crypto/ctaes/\",\n+    \"src/leveldb/\",\n+    \"src/secp256k1/\",\n+    \"src/univalue/\",\n+]\n+\n INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n \n def applies_to_file(filename):\n+    for excluded_dir in EXCLUDE_DIRS:\n+        if filename.startswith(excluded_dir):\n+            return False\n     return ((EXCLUDE_COMPILED.match(filename) is None) and\n             (INCLUDE_COMPILED.match(filename) is not None))\n \n ################################################################################\n # obtain list of files in repo according to INCLUDE and EXCLUDE\n ################################################################################\n \n-GIT_LS_CMD = 'git ls-files'\n+GIT_LS_CMD = 'git ls-files --full-name'.split(' ')\n+GIT_TOPLEVEL_CMD = 'git rev-parse --show-toplevel'.split(' ')\n \n-def call_git_ls():\n-    out = subprocess.check_output(GIT_LS_CMD.split(' '))\n+def call_git_ls(base_directory):\n+    out = subprocess.check_output([*GIT_LS_CMD, base_directory])\n     return [f for f in out.decode(\"utf-8\").split('\\n') if f != '']\n \n-def get_filenames_to_examine():\n-    filenames = call_git_ls()\n-    return sorted([filename for filename in filenames if\n+def call_git_toplevel():\n+    \"Returns the absolute path to the project root\"\n+    return subprocess.check_output(GIT_TOPLEVEL_CMD).strip().decode(\"utf-8\")\n+\n+def get_filenames_to_examine(base_directory):\n+    \"Returns an array of absolute paths to any project files in the base_directory that pass the include/exclude filters\"\n+    root = call_git_toplevel()\n+    filenames = call_git_ls(base_directory)\n+    return sorted([os.path.join(root, filename) for filename in filenames if\n                    applies_to_file(filename)])\n \n ################################################################################\n@@ -81,32 +85,23 @@ def get_filenames_to_examine():\n ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n \n def compile_copyright_regex(copyright_style, year_style, name):\n-    return re.compile('%s %s %s' % (copyright_style, year_style, name))\n+    return re.compile('%s %s,? %s' % (copyright_style, year_style, name))\n \n EXPECTED_HOLDER_NAMES = [\n     \"Satoshi Nakamoto\\n\",\n     \"The Bitcoin Core developers\\n\",\n-    \"The Bitcoin Core developers \\n\",\n     \"Bitcoin Core Developers\\n\",\n-    \"the Bitcoin Core developers\\n\",\n-    \"The Bitcoin developers\\n\",\n-    \"The LevelDB Authors\\. All rights reserved\\.\\n\",\n     \"BitPay Inc\\.\\n\",\n-    \"BitPay, Inc\\.\\n\",\n     \"University of Illinois at Urbana-Champaign\\.\\n\",\n-    \"MarcoFalke\\n\",\n     \"Pieter Wuille\\n\",\n-    \"Pieter Wuille +\\*\\n\",\n-    \"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n-    \"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n-    \"Andrew Poelstra +\\*\\n\",\n     \"Wladimir J. van der Laan\\n\",\n     \"Jeff Garzik\\n\",\n-    \"Diederik Huys, Pieter Wuille +\\*\\n\",\n-    \"Thomas Daede, Cory Fields +\\*\\n\",\n     \"Jan-Klaas Kollhof\\n\",\n     \"Sam Rushing\\n\",\n     \"ArtForz -- public domain half-a-node\\n\",\n+    \"Intel Corporation\",\n+    \"The Zcash developers\",\n+    \"Jeremy Rubin\",\n ]\n \n DOMINANT_STYLE_COMPILED = {}\n@@ -146,7 +141,7 @@ def file_has_without_c_style_copyright_for_holder(contents, holder_name):\n ################################################################################\n \n def read_file(filename):\n-    return open(os.path.abspath(filename), 'r', encoding=\"utf8\").read()\n+    return open(filename, 'r', encoding=\"utf8\").read()\n \n def gather_file_info(filename):\n     info = {}\n@@ -260,12 +255,9 @@ def print_report(file_infos, verbose):\n     print(SEPARATOR)\n \n def exec_report(base_directory, verbose):\n-    original_cwd = os.getcwd()\n-    os.chdir(base_directory)\n-    filenames = get_filenames_to_examine()\n+    filenames = get_filenames_to_examine(base_directory)\n     file_infos = [gather_file_info(f) for f in filenames]\n     print_report(file_infos, verbose)\n-    os.chdir(original_cwd)\n \n ################################################################################\n # report cmd\n@@ -325,13 +317,13 @@ def get_most_recent_git_change_year(filename):\n ################################################################################\n \n def read_file_lines(filename):\n-    f = open(os.path.abspath(filename), 'r', encoding=\"utf8\")\n+    f = open(filename, 'r', encoding=\"utf8\")\n     file_lines = f.readlines()\n     f.close()\n     return file_lines\n \n def write_file_lines(filename, file_lines):\n-    f = open(os.path.abspath(filename), 'w', encoding=\"utf8\")\n+    f = open(filename, 'w', encoding=\"utf8\")\n     f.write(''.join(file_lines))\n     f.close()\n \n@@ -399,11 +391,8 @@ def update_updatable_copyright(filename):\n                               \"Copyright updated! -> %s\" % last_git_change_year)\n \n def exec_update_header_year(base_directory):\n-    original_cwd = os.getcwd()\n-    os.chdir(base_directory)\n-    for filename in get_filenames_to_examine():\n+    for filename in get_filenames_to_examine(base_directory):\n         update_updatable_copyright(filename)\n-    os.chdir(original_cwd)\n \n ################################################################################\n # update cmd\n@@ -491,7 +480,7 @@ def get_git_change_year_range(filename):\n \n def file_already_has_core_copyright(file_lines):\n     index, _ = get_updatable_copyright_line(file_lines)\n-    return index != None\n+    return index is not None\n \n ################################################################################\n # insert header execution"
      },
      {
        "sha": "63b9847100a09ff0f6f8600a96b46a87219de505",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -10,6 +10,7 @@ MANDIR=${MANDIR:-$TOPDIR/doc/man}\n BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n@@ -23,7 +24,7 @@ BTCVER=($($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }'))\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n   help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n   sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1"
      },
      {
        "sha": "a57ecf9818370af61eb321ddb6a93484b7d663f9",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 66,
        "deletions": 13,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -14,7 +14,6 @@\n \n # In case of a clean merge that is accepted by the user, the local branch with\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n-from __future__ import division,print_function,unicode_literals\n import os\n from sys import stdin,stdout,stderr\n import argparse\n@@ -23,10 +22,8 @@\n import sys\n import json\n import codecs\n-try:\n-    from urllib.request import Request,urlopen\n-except:\n-    from urllib2 import Request,urlopen\n+from urllib.request import Request, urlopen\n+from urllib.error import HTTPError\n \n # External tools (can be overridden using environment)\n GIT = os.getenv('GIT','git')\n@@ -50,21 +47,58 @@ def git_config_get(option, default=None):\n     except subprocess.CalledProcessError:\n         return default\n \n-def retrieve_pr_info(repo,pull):\n+def get_response(req_url, ghtoken):\n+    req = Request(req_url)\n+    if ghtoken is not None:\n+        req.add_header('Authorization', 'token ' + ghtoken)\n+    return urlopen(req)\n+\n+def retrieve_json(req_url, ghtoken, use_pagination=False):\n     '''\n-    Retrieve pull request information from github.\n-    Return None if no title can be found, or an error happens.\n+    Retrieve json from github.\n+    Return None if an error happens.\n     '''\n     try:\n-        req = Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n-        result = urlopen(req)\n         reader = codecs.getreader('utf-8')\n-        obj = json.load(reader(result))\n+        if not use_pagination:\n+            return json.load(reader(get_response(req_url, ghtoken)))\n+\n+        obj = []\n+        page_num = 1\n+        while True:\n+            req_url_page = '{}?page={}'.format(req_url, page_num)\n+            result = get_response(req_url_page, ghtoken)\n+            obj.extend(json.load(reader(result)))\n+\n+            link = result.headers.get('link', None)\n+            if link is not None:\n+                link_next = [l for l in link.split(',') if 'rel=\"next\"' in l]\n+                if len(link_next) > 0:\n+                    page_num = int(link_next[0][link_next[0].find(\"page=\")+5:link_next[0].find(\">\")])\n+                    continue\n+            break\n         return obj\n+    except HTTPError as e:\n+        error_message = e.read()\n+        print('Warning: unable to retrieve pull information from github: %s' % e)\n+        print('Detailed error: %s' % error_message)\n+        return None\n     except Exception as e:\n         print('Warning: unable to retrieve pull information from github: %s' % e)\n         return None\n \n+def retrieve_pr_info(repo,pull,ghtoken):\n+    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull\n+    return retrieve_json(req_url,ghtoken)\n+\n+def retrieve_pr_comments(repo,pull,ghtoken):\n+    req_url = \"https://api.github.com/repos/\"+repo+\"/issues/\"+pull+\"/comments\"\n+    return retrieve_json(req_url,ghtoken,use_pagination=True)\n+\n+def retrieve_pr_reviews(repo,pull,ghtoken):\n+    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull+\"/reviews\"\n+    return retrieve_json(req_url,ghtoken,use_pagination=True)\n+\n def ask_prompt(text):\n     print(text,end=\" \",file=stderr)\n     stderr.flush()\n@@ -129,6 +163,16 @@ def tree_sha512sum(commit='HEAD'):\n         raise IOError('Non-zero return value executing git cat-file')\n     return overall.hexdigest()\n \n+def get_acks_from_comments(head_commit, comments):\n+    assert len(head_commit) == 6\n+    ack_str ='\\n\\nACKs for commit {}:\\n'.format(head_commit)\n+    for c in comments:\n+        review = [l for l in c['body'].split('\\r\\n') if 'ACK' in l and head_commit in l]\n+        if review:\n+            ack_str += '  {}:\\n'.format(c['user']['login'])\n+            ack_str += '    {}\\n'.format(review[0])\n+    return ack_str\n+\n def print_merge_details(pull, title, branch, base_branch, head_branch):\n     print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n     subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n@@ -138,6 +182,7 @@ def parse_arguments():\n         In addition, you can set the following git configuration variables:\n         githubmerge.repository (mandatory),\n         user.signingkey (mandatory),\n+        user.ghtoken (default: none).\n         githubmerge.host (default: git@github.com),\n         githubmerge.branch (no default),\n         githubmerge.testcmd (default: none).\n@@ -156,6 +201,7 @@ def main():\n     host = git_config_get('githubmerge.host','git@github.com')\n     opt_branch = git_config_get('githubmerge.branch',None)\n     testcmd = git_config_get('githubmerge.testcmd')\n+    ghtoken = git_config_get('user.ghtoken')\n     signingkey = git_config_get('user.signingkey')\n     if repo is None:\n         print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n@@ -166,16 +212,22 @@ def main():\n         print(\"git config --global user.signingkey <key>\",file=stderr)\n         sys.exit(1)\n \n-    host_repo = host+\":\"+repo # shortcut for push/pull target\n+    if host.startswith(('https:','http:')):\n+        host_repo = host+\"/\"+repo+\".git\"\n+    else:\n+        host_repo = host+\":\"+repo\n \n     # Extract settings from command line\n     args = parse_arguments()\n     pull = str(args.pull[0])\n \n     # Receive pull information from github\n-    info = retrieve_pr_info(repo,pull)\n+    info = retrieve_pr_info(repo,pull,ghtoken)\n     if info is None:\n         sys.exit(1)\n+    comments = retrieve_pr_comments(repo,pull,ghtoken) + retrieve_pr_reviews(repo,pull,ghtoken)\n+    if comments is None:\n+        sys.exit(1)\n     title = info['title'].strip()\n     body = info['body'].strip()\n     # precedence order for destination branch argument:\n@@ -229,6 +281,7 @@ def main():\n         message = firstline + '\\n\\n'\n         message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n         message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n+        message += get_acks_from_comments(head_commit=subprocess.check_output([GIT,'log','-1','--pretty=format:%H',head_branch]).decode('utf-8')[:6], comments=comments)\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n         except subprocess.CalledProcessError:"
      },
      {
        "sha": "44b7f6c7cc41072f7ab08fe7bf0bf590e48db1ad",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -86,7 +86,7 @@ def check_ELF_RELRO(executable):\n         # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n-        # See also http://permalink.gmane.org/gmane.comp.gnu.binutils/71347\n+        # See also https://marc.info/?l=binutils&m=1498883354122353\n         if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n "
      },
      {
        "sha": "92b72b1446cf6bacf92723b6a8da8786c0802557",
        "filename": "contrib/devtools/split-debug.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/split-debug.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/split-debug.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/split-debug.sh.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n-\n+set -e\n if [ $# -ne 3 ];\n     then echo \"usage: $0 <input> <stripped-binary> <debug-binary>\"\n fi"
      },
      {
        "sha": "7729dd7257dda0dd7d1e56f05c6acb2843a6bf87",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -9,7 +9,7 @@\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py\n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n import re"
      },
      {
        "sha": "16d03e1fffc749fc29afebc181e3561012bd1517",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "added",
        "additions": 151,
        "deletions": 0,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n+    \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()\n+    \"scheduler_tests/singlethreadedscheduler_ordered\"         # scheduler.cpp: CScheduler::serviceQueue()\n+    \"tx_validationcache_tests/checkinputs_test\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"tx_validationcache_tests/tx_mempool_block_doublespend\"   # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txindex_tests/txindex_initial_sync\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txvalidation_tests/tx_mempool_reject_coinbase\"           # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"validation_block_tests/processnewblock_signals_ordering\" # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/coin_mark_dirty_immature_credit\"            # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/dummy_input_size_test\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importmulti_rescan\"                         # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importwallet_rescan\"                        # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/ListCoins\"                                  # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/scan_for_wallet_transactions\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/wallet_disableprivkeys\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+)\n+\n+TEST_BITCOIN_BINARY=\"src/test/test_bitcoin\"\n+\n+print_usage() {\n+    echo \"Usage: $0 [custom test filter (default: all but known non-deterministic tests)] [number of test runs (default: 2)]\"\n+}\n+\n+N_TEST_RUNS=2\n+BOOST_TEST_RUN_FILTERS=\"\"\n+if [[ $# != 0 ]]; then\n+    if [[ $1 == \"--help\" ]]; then\n+        print_usage\n+        exit\n+    fi\n+    PARSED_ARGUMENTS=0\n+    if [[ $1 =~ [a-z] ]]; then\n+        BOOST_TEST_RUN_FILTERS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ $1 =~ ^[0-9]+$ ]]; then\n+        N_TEST_RUNS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ ${PARSED_ARGUMENTS} == 0 || $# -gt 2 || ${N_TEST_RUNS} -lt 2 ]]; then\n+        print_usage\n+        exit\n+    fi\n+fi\n+if [[ ${BOOST_TEST_RUN_FILTERS} == \"\" ]]; then\n+    BOOST_TEST_RUN_FILTERS=\"$(IFS=\":\"; echo \"!${NON_DETERMINISTIC_TESTS[*]}\" | sed 's/:/:!/g')\"\n+else\n+    echo \"Using Boost test filter: ${BOOST_TEST_RUN_FILTERS}\"\n+    echo\n+fi\n+\n+if ! command -v gcov > /dev/null; then\n+    echo \"Error: gcov not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if ! command -v gcovr > /dev/null; then\n+    echo \"Error: gcovr not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if [[ ! -e ${TEST_BITCOIN_BINARY} ]]; then\n+    echo \"Error: Executable ${TEST_BITCOIN_BINARY} not found. Run \\\"./configure --enable-lcov\\\" and compile.\"\n+    exit 1\n+fi\n+\n+get_file_suffix_count() {\n+    find src/ -type f -name \"*.$1\" | wc -l\n+}\n+\n+if [[ $(get_file_suffix_count gcno) == 0 ]]; then\n+    echo \"Error: Could not find any *.gcno files. The *.gcno files are generated by the compiler. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+    exit 1\n+fi\n+\n+get_covr_filename() {\n+    echo \"gcovr.run-$1.txt\"\n+}\n+\n+TEST_RUN_ID=0\n+while [[ ${TEST_RUN_ID} -lt ${N_TEST_RUNS} ]]; do\n+    TEST_RUN_ID=$((TEST_RUN_ID + 1))\n+    echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] Measuring coverage, run #${TEST_RUN_ID} of ${N_TEST_RUNS}\"\n+    find src/ -type f -name \"*.gcda\" -exec rm {} \\;\n+    if [[ $(get_file_suffix_count gcda) != 0 ]]; then\n+        echo \"Error: Stale *.gcda files found. Exiting.\"\n+        exit 1\n+    fi\n+    TEST_OUTPUT_TEMPFILE=$(mktemp)\n+    if ! BOOST_TEST_RUN_FILTERS=\"${BOOST_TEST_RUN_FILTERS}\" ${TEST_BITCOIN_BINARY} > \"${TEST_OUTPUT_TEMPFILE}\" 2>&1; then\n+        cat \"${TEST_OUTPUT_TEMPFILE}\"\n+        rm \"${TEST_OUTPUT_TEMPFILE}\"\n+        exit 1\n+    fi\n+    rm \"${TEST_OUTPUT_TEMPFILE}\"\n+    if [[ $(get_file_suffix_count gcda) == 0 ]]; then\n+        echo \"Error: Running the test suite did not create any *.gcda files. The gcda files are generated when the instrumented test programs are executed. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+        exit 1\n+    fi\n+    GCOVR_TEMPFILE=$(mktemp)\n+    if ! gcovr --gcov-executable \"${GCOV_EXECUTABLE}\" -r src/ > \"${GCOVR_TEMPFILE}\"; then\n+        echo \"Error: gcovr failed. Output written to ${GCOVR_TEMPFILE}. Exiting.\"\n+        exit 1\n+    fi\n+    GCOVR_FILENAME=$(get_covr_filename ${TEST_RUN_ID})\n+    mv \"${GCOVR_TEMPFILE}\" \"${GCOVR_FILENAME}\"\n+    if grep -E \"^TOTAL *0 *0 \" \"${GCOVR_FILENAME}\"; then\n+        echo \"Error: Spurious gcovr output. Make sure the correct GCOV_EXECUTABLE variable is set in $0 (\\\"gcov\\\" for gcc, \\\"llvm-cov gcov\\\" for clang).\"\n+        exit 1\n+    fi\n+    if [[ ${TEST_RUN_ID} != 1 ]]; then\n+        COVERAGE_DIFF=$(diff -u \"$(get_covr_filename 1)\" \"${GCOVR_FILENAME}\")\n+        if [[ ${COVERAGE_DIFF} != \"\" ]]; then\n+            echo\n+            echo \"The line coverage is non-deterministic between runs. Exiting.\"\n+            echo\n+            echo \"The test suite must be deterministic in the sense that the set of lines executed at least\"\n+            echo \"once must be identical between runs. This is a necessary condition for meaningful\"\n+            echo \"coverage measuring.\"\n+            echo\n+            echo \"${COVERAGE_DIFF}\"\n+            exit 1\n+        fi\n+        rm \"${GCOVR_FILENAME}\"\n+    fi\n+done\n+\n+echo\n+echo \"Coverage test passed: Deterministic coverage across ${N_TEST_RUNS} runs.\"\n+exit"
      },
      {
        "sha": "1b9d3a4c279d4b91778068591de5b0962e105876",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -125,7 +125,7 @@ def escape_cdata(text):\n     return text\n \n def contains_bitcoin_addr(text, errors):\n-    if text != None and ADDRESS_REGEXP.search(text) != None:\n+    if text is not None and ADDRESS_REGEXP.search(text) is not None:\n         errors.append('Translation \"%s\" contains a bitcoin address. This will be removed.' % (text))\n         return True\n     return False"
      },
      {
        "sha": "fc7fbb764df327528ca6bb1c2f28cc689a6a0704",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -51,8 +51,10 @@ def build():\n     os.chdir('gitian-builder')\n     os.makedirs('inputs', exist_ok=True)\n \n-    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n     subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call([\"echo 'a8c4e9cafba922f89de0df1f2152e7be286aba73f78505169bc351a7938dd911 inputs/osslsigncode-Backports-to-1.7.1.patch' | sha256sum -c\"], shell=True)\n+    subprocess.check_call([\"echo 'f9a8cdb38b9c309326764ebc937cba1523a3a751a7ab05df3ecc99d18ae466c9 inputs/osslsigncode-1.7.1.tar.gz' | sha256sum -c\"], shell=True)\n     subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n \n     if args.linux:\n@@ -65,14 +67,14 @@ def build():\n         print('\\nCompiling ' + args.version + ' Windows')\n         subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/', shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n \n     if args.macos:\n         print('\\nCompiling ' + args.version + ' MacOS')\n         subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/', shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n \n     os.chdir(workdir)\n@@ -92,13 +94,15 @@ def sign():\n \n     if args.windows:\n         print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n         subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n         subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n \n     if args.macos:\n         print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n         subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n         subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)"
      },
      {
        "sha": "5845d8fd89c5fc24617239f5dba05f50734c6e02",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,7 @@\n ---\n-name: \"bitcoin-linux-0.18\"\n+name: \"bitcoin-core-linux-0.19\"\n enable_cache: true\n+distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n@@ -30,12 +31,13 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"ca-certificates\"\n-- \"python\"\n+- \"python3\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+  set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n@@ -179,8 +181,8 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n-    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n     cp ../doc/README.md ${DISTNAME}/\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz"
      },
      {
        "sha": "4cfca403b13dce2c0f6e8ffc790e4f6cf766e406",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,6 @@\n ---\n name: \"bitcoin-dmg-signer\"\n+distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n@@ -12,6 +13,8 @@ remotes:\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n   export PATH=`pwd`:$PATH"
      },
      {
        "sha": "24292d089a5e94484d87ff0914a74ab643457523",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,7 @@\n ---\n-name: \"bitcoin-osx-0.18\"\n+name: \"bitcoin-core-osx-0.19\"\n enable_cache: true\n+distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n@@ -23,16 +24,18 @@ packages:\n - \"libcap-dev\"\n - \"libz-dev\"\n - \"libbz2-dev\"\n-- \"python\"\n-- \"python-dev\"\n-- \"python-setuptools\"\n+- \"python3\"\n+- \"python3-dev\"\n+- \"python3-setuptools\"\n - \"fonts-tuffy\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n - \"MacOSX10.11.sdk.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin14\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\""
      },
      {
        "sha": "656c6d9b7a80d8c0721f3e7a2c99da70d03772ff",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,6 @@\n ---\n name: \"bitcoin-win-signer\"\n+distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n@@ -16,6 +17,8 @@ files:\n - \"osslsigncode-Backports-to-1.7.1.patch\"\n - \"bitcoin-win-unsigned.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   BUILD_DIR=`pwd`\n   SIGDIR=${BUILD_DIR}/signature/win\n   UNSIGNED_DIR=${BUILD_DIR}/unsigned"
      },
      {
        "sha": "eca32a5dc5b1b51d4e3c2058b3ce75c6f01e8bfd",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,7 @@\n ---\n-name: \"bitcoin-win-0.18\"\n+name: \"bitcoin-core-win-0.19\"\n enable_cache: true\n+distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n@@ -20,13 +21,15 @@ packages:\n - \"nsis\"\n - \"zip\"\n - \"ca-certificates\"\n-- \"python\"\n+- \"python3\"\n - \"rename\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-w64-mingw32 x86_64-w64-mingw32\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\""
      },
      {
        "sha": "33f0f7e5b05df684bb419516f4fa75d0fba2af81",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,9 +6,11 @@ C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n+6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n+D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon"
      },
      {
        "sha": "306a37f75ab7018b0ce015064a7ae0159fd6e015",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,7 @@ Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n CentOS:  bitcoind.init\n-macOS:    org.bitcoin.bitcoind.plist\n+macOS:   org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n "
      },
      {
        "sha": "cfc5f775800d837952b8074d09a09dcff60c1dac",
        "filename": "contrib/init/bitcoind.service",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/init/bitcoind.service",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/init/bitcoind.service",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.service?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,21 +5,45 @@\n # See \"man systemd.service\" for details.\n \n # Note that almost all daemon options could be specified in\n-# /etc/bitcoin/bitcoin.conf\n+# /etc/bitcoin/bitcoin.conf, except for those explicitly specified as arguments\n+# in ExecStart=\n \n [Unit]\n Description=Bitcoin daemon\n After=network.target\n \n [Service]\n-ExecStart=/usr/bin/bitcoind -daemon -conf=/etc/bitcoin/bitcoin.conf -pid=/run/bitcoind/bitcoind.pid\n-# Creates /run/bitcoind owned by bitcoin\n-RuntimeDirectory=bitcoind\n-User=bitcoin\n+ExecStart=/usr/bin/bitcoind -daemon \\\n+                            -pid=/run/bitcoind/bitcoind.pid \\\n+                            -conf=/etc/bitcoin/bitcoin.conf \\\n+                            -datadir=/var/lib/bitcoind\n+\n+# Process management\n+####################\n+\n Type=forking\n PIDFile=/run/bitcoind/bitcoind.pid\n Restart=on-failure\n \n+# Directory creation and permissions\n+####################################\n+\n+# Run as bitcoin:bitcoin\n+User=bitcoin\n+Group=bitcoin\n+\n+# /run/bitcoind\n+RuntimeDirectory=bitcoind\n+RuntimeDirectoryMode=0710\n+\n+# /etc/bitcoin\n+ConfigurationDirectory=bitcoin\n+ConfigurationDirectoryMode=0710\n+\n+# /var/lib/bitcoind\n+StateDirectory=bitcoind\n+StateDirectoryMode=0710\n+\n # Hardening measures\n ####################\n "
      },
      {
        "sha": "088d1c9dce9dc9cc54ea397b1fdf738535e7b2ff",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,7 +6,7 @@ export LC_ALL=C\n set -e\n \n if [ -z \"${1}\" ]; then\n-  echo \"Usage: ./install_db4.sh <base-dir> [<extra-bdb-configure-flag> ...]\"\n+  echo \"Usage: $0 <base-dir> [<extra-bdb-configure-flag> ...]\"\n   echo\n   echo \"Must specify a single argument: the directory in which db4 will be built.\"\n   echo \"This is probably \\`pwd\\` if you're at the root of the bitcoin repository.\"\n@@ -51,7 +51,7 @@ http_get() {\n   if [ -f \"${2}\" ]; then\n     echo \"File ${2} already exists; not downloading again\"\n   elif check_exists curl; then\n-    curl --insecure \"${1}\" -o \"${2}\"\n+    curl --insecure --retry 5 \"${1}\" -o \"${2}\"\n   else\n     wget --no-check-certificate \"${1}\" -O \"${2}\"\n   fi"
      },
      {
        "sha": "25a1c7351a297c751d630acd3f97fff6091710c8",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,5 @@\n # Linearize\n-Construct a linear, no-fork, best version of the Bitcoin blockchain. The scripts\n-run using Python 3 but are compatible with Python 2.\n+Construct a linear, no-fork, best version of the Bitcoin blockchain.\n \n ## Step 1: Download hash list\n "
      },
      {
        "sha": "468aec04b535088ddc4138dd6f8d1d8749a4739e",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,7 +7,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from __future__ import print_function, division\n import struct\n import re\n import os\n@@ -17,7 +16,7 @@\n import datetime\n import time\n from collections import namedtuple\n-from binascii import hexlify, unhexlify\n+from binascii import unhexlify\n \n settings = {}\n \n@@ -62,7 +61,7 @@ def calc_hash_str(blk_hdr):\n     hash = calc_hdr_hash(blk_hdr)\n     hash = bufreverse(hash)\n     hash = wordreverse(hash)\n-    hash_str = hexlify(hash).decode('utf-8')\n+    hash_str = hash.hex()\n     return hash_str\n \n def get_blk_dt(blk_hdr):\n@@ -214,7 +213,7 @@ def run(self):\n \n             inMagic = inhdr[:4]\n             if (inMagic != self.settings['netmagic']):\n-                print(\"Invalid magic: \" + hexlify(inMagic).decode('utf-8'))\n+                print(\"Invalid magic: \" + inMagic.hex())\n                 return\n             inLenLE = inhdr[4:]\n             su = struct.unpack(\"<I\", inLenLE)"
      },
      {
        "sha": "8529470e09b8a7afa6d3a24c404e1509896e9947",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,11 +7,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from __future__ import print_function\n-try: # Python 3\n-    import http.client as httplib\n-except ImportError: # Python 2\n-    import httplib\n+from http.client import HTTPConnection\n import json\n import re\n import base64\n@@ -31,7 +27,7 @@ def __init__(self, host, port, username, password):\n         authpair = \"%s:%s\" % (username, password)\n         authpair = authpair.encode('utf-8')\n         self.authhdr = b\"Basic \" + base64.b64encode(authpair)\n-        self.conn = httplib.HTTPConnection(host, port=port, timeout=30)\n+        self.conn = HTTPConnection(host, port=port, timeout=30)\n \n     def execute(self, obj):\n         try:"
      },
      {
        "sha": "dc1c1882dd5a21a5358c6f3a65e7c70e22e295a1",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2013-2017 The Bitcoin Core developers\n+# Copyright (c) 2013-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n import biplist\n@@ -13,7 +13,7 @@\n ds = DSStore.open(output_file, 'w+')\n ds['.']['bwsp'] = {\n     'ShowStatusBar': False,\n-    'WindowBounds': b'{{300, 280}, {500, 343}}',\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n     'ContainerShowSidebar': False,\n     'SidebarWidth': 0,\n     'ShowTabView': False,"
      },
      {
        "sha": "9da03e5b023177f77367886ccd1660b4cfc22c97",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -172,12 +172,6 @@ class DeploymentInfo(object):\n         if os.path.exists(os.path.join(parentDir, \"translations\")):\n             # Classic layout, e.g. \"/usr/local/Trolltech/Qt-4.x.x\"\n             self.qtPath = parentDir\n-        elif os.path.exists(os.path.join(parentDir, \"share\", \"qt4\", \"translations\")):\n-            # MacPorts layout, e.g. \"/opt/local/share/qt4\"\n-            self.qtPath = os.path.join(parentDir, \"share\", \"qt4\")\n-        elif os.path.exists(os.path.join(os.path.dirname(parentDir), \"share\", \"qt4\", \"translations\")):\n-            # Newer Macports layout\n-            self.qtPath = os.path.join(os.path.dirname(parentDir), \"share\", \"qt4\")\n         else:\n             self.qtPath = os.getenv(\"QTDIR\", None)\n "
      },
      {
        "sha": "5f9b87d9b23fbccca183bdcd83fbc84a9ec60372",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,3 +1,5 @@\n+#!/usr/bin/env bash\n+#\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "1215962a1671768b71fd14555d11c7fa29d1e758",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,7 +3,7 @@ Tooling for verification of PGP signed commits\n \n This is an incomplete work in progress, but currently includes a pre-push hook\n script (`pre-push-hook.sh`) for maintainers to ensure that their own commits\n-are PGP signed (nearly always merge commits), as well as a script to verify\n+are PGP signed (nearly always merge commits), as well as a Python 3 script to verify\n commits against a trusted keys list.\n \n \n@@ -17,9 +17,11 @@ be backdoored. Instead, you need to use a trusted version of verify-commits\n prior to checkout to make sure you're checking out only code signed by trusted\n keys:\n \n-    git fetch origin && \\\n-      ./contrib/verify-commits/verify-commits.py origin/master && \\\n-      git checkout origin/master\n+ ```sh\n+ git fetch origin && \\\n+ ./contrib/verify-commits/verify-commits.py origin/master && \\\n+ git checkout origin/master\n+ ```\n \n Note that the above isn't a good UI/UX yet, and needs significant improvements\n to make it more convenient and reduce the chance of errors; pull-reqs\n@@ -33,6 +35,14 @@ Configuration files\n * `trusted-keys`: This file should contain a \\n-delimited list of all PGP fingerprints of authorized commit signers (primary, not subkeys).\n * `allow-revsig-commits`: This file should contain a \\n-delimited list of git commit hashes. See next section for more info.\n \n+Import trusted keys\n+-------------------\n+In order to check the commit signatures, you must add the trusted PGP keys to your machine. [GnuPG](https://gnupg.org/) may be used to import the trusted keys by running the following command:\n+\n+```sh\n+gpg --recv-keys $(<contrib/verify-commits/trusted-keys)\n+```\n+\n Key expiry/revocation\n ---------------------\n "
      },
      {
        "sha": "a10da9d822279e363b617e64bd281bc28629de6d",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -2,3 +2,4 @@\n 133EAC179436F14A5CF1B794860FEB804E669320\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D"
      },
      {
        "sha": "255ce7509291259f09244814a6606de19dc59a82",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Verify commits against a trusted keys list.\"\"\"\n import argparse\n import hashlib\n+import logging\n import os\n import subprocess\n import sys\n@@ -66,6 +67,11 @@ def tree_sha512sum(commit='HEAD'):\n     return overall.hexdigest()\n \n def main():\n+\n+    # Enable debug logging if running in CI\n+    if 'CI' in os.environ and os.environ['CI'].lower() == \"true\":\n+        logging.getLogger().setLevel(logging.DEBUG)\n+\n     # Parse arguments\n     parser = argparse.ArgumentParser(usage='%(prog)s [options] [commit id]')\n     parser.add_argument('--disable-tree-check', action='store_false', dest='verify_tree', help='disable SHA-512 tree check')\n@@ -91,10 +97,14 @@ def main():\n     no_sha1 = True\n     prev_commit = \"\"\n     initial_commit = current_commit\n-    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit]).decode('utf8').splitlines()[0]\n \n     # Iterate through commits\n     while True:\n+\n+        # Log a message to prevent Travis from timing out\n+        logging.debug(\"verify-commits: [in-progress] processing commit {}\".format(current_commit[:8]))\n+\n         if current_commit == verified_root:\n             print('There is a valid path from \"{}\" to {} where all commits are signed!'.format(initial_commit, verified_root))\n             sys.exit(0)\n@@ -112,7 +122,7 @@ def main():\n             if prev_commit != \"\":\n                 print(\"No parent of {} was signed with a trusted key!\".format(prev_commit), file=sys.stderr)\n                 print(\"Parents are:\", file=sys.stderr)\n-                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit]).decode('utf8').splitlines()[0].split(' ')\n                 for parent in parents:\n                     subprocess.call([GIT, 'show', '-s', parent], stdout=sys.stderr)\n             else:\n@@ -122,25 +132,25 @@ def main():\n         # Check the Tree-SHA512\n         if (verify_tree or prev_commit == \"\") and current_commit not in incorrect_sha512_allowed:\n             tree_hash = tree_sha512sum(current_commit)\n-            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit], universal_newlines=True, encoding='utf8').splitlines():\n+            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit]).decode('utf8').splitlines():\n                 print(\"Tree-SHA512 did not match for commit \" + current_commit, file=sys.stderr)\n                 sys.exit(1)\n \n         # Merge commits should only have two parents\n-        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit]).decode('utf8').splitlines()[0].split(' ')\n         if len(parents) > 2:\n             print(\"Commit {} is an octopus merge\".format(current_commit), file=sys.stderr)\n             sys.exit(1)\n \n         # Check that the merge commit is clean\n-        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0])\n+        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit]).decode('utf8').splitlines()[0])\n         check_merge = commit_time > time.time() - args.clean_merge * 24 * 60 * 60  # Only check commits in clean_merge days\n         allow_unclean = current_commit in unclean_merge_allowed\n         if len(parents) == 2 and check_merge and not allow_unclean:\n-            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit]).decode('utf8').splitlines()[0]\n             subprocess.call([GIT, 'checkout', '--force', '--quiet', parents[0]])\n-            subprocess.call([GIT, 'merge', '--no-ff', '--quiet', parents[1]], stdout=subprocess.DEVNULL)\n-            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD'], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            subprocess.call([GIT, 'merge', '--no-ff', '--quiet', '--no-gpg-sign', parents[1]], stdout=subprocess.DEVNULL)\n+            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD']).decode('utf8').splitlines()[0]\n             if current_tree != recreated_tree:\n                 print(\"Merge commit {} is not clean\".format(current_commit), file=sys.stderr)\n                 subprocess.call([GIT, 'diff', current_commit])"
      },
      {
        "sha": "5bc5dc58094a7e4d800cbd4cc091243c2d990898",
        "filename": "contrib/windeploy/win-codesign.cert",
        "status": "modified",
        "additions": 94,
        "deletions": 93,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/windeploy/win-codesign.cert",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/windeploy/win-codesign.cert",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/win-codesign.cert?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,99 +1,100 @@\n -----BEGIN CERTIFICATE-----\n-MIIFTTCCBDWgAwIBAgIRALlW05RLwG2hMQMX5d/o5J8wDQYJKoZIhvcNAQELBQAw\n-fTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxIzAhBgNV\n-BAMTGkNPTU9ETyBSU0EgQ29kZSBTaWduaW5nIENBMB4XDTE2MDIwMzAwMDAwMFoX\n-DTE5MDMwNTIzNTk1OVowgbUxCzAJBgNVBAYTAlVTMQ4wDAYDVQQRDAU5ODEwNDEL\n-MAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0bGUxEDAOBgNVBAkMB1N0ZSAzMDAx\n-FzAVBgNVBAkMDjcxIENvbHVtYmlhIFN0MSUwIwYDVQQKDBxUaGUgQml0Y29pbiBG\n-b3VuZGF0aW9uLCBJbmMuMSUwIwYDVQQDDBxUaGUgQml0Y29pbiBGb3VuZGF0aW9u\n-LCBJbmMuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw37Vrv9Gbku0\n-+kuV0t89TuyxtAcmT7QE4GcwESKKjmkxfzD9a0qlhqk8GfQ+fw4DHNN+nLKNv7xB\n-bk6aS7J2v2DcXkOjrP99P9jqgTkp7MC04VtG3OqVRGB+gum0pptRovYZUQXIdkY7\n-GJOok/NDagwKiiUe2V2meZ7UctsZNvYeilQdTgKIIhrMB9NowCOhT8ocVL4Ki55/\n-l7hukJn3fueCM3fHTwY2/1gaGsOHoCkFRsD7vokjAVpiY+8rUgvHjb0gxgojiVGd\n-6a6/F5XJwKJacvUyN4Hfc2K5lRMQjTTmo4aWNWIa0iJ3TK9BHpdSLJBqerMPvmnM\n-kkapS+ZTNQIDAQABo4IBjTCCAYkwHwYDVR0jBBgwFoAUKZFg/4pN+uv5pmq4z/nm\n-S71JzhIwHQYDVR0OBBYEFONpQ+cV82URVe+V8G57377KxxexMA4GA1UdDwEB/wQE\n-AwIHgDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMBEGCWCGSAGG\n-+EIBAQQEAwIEEDBGBgNVHSAEPzA9MDsGDCsGAQQBsjEBAgEDAjArMCkGCCsGAQUF\n-BwIBFh1odHRwczovL3NlY3VyZS5jb21vZG8ubmV0L0NQUzBDBgNVHR8EPDA6MDig\n-NqA0hjJodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9SU0FDb2RlU2lnbmlu\n-Z0NBLmNybDB0BggrBgEFBQcBAQRoMGYwPgYIKwYBBQUHMAKGMmh0dHA6Ly9jcnQu\n-Y29tb2RvY2EuY29tL0NPTU9ET1JTQUNvZGVTaWduaW5nQ0EuY3J0MCQGCCsGAQUF\n-BzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wDQYJKoZIhvcNAQELBQADggEB\n-AGnBSi9K/9rgTAyKFKrfGWSfNOwAghmsnsvpZSQ7QyoGWBFKSgCs/70kErl18oHA\n-g7Y8loQB1yukZmJaCa3OvGud7smn45TCh0TMf4EpP20Wxf4rMQTxwAatasHL3+vi\n-I+Nl5bsRZ09kWjvayqLII5upjS/yq0JfpmyGl5k2C/fIpztq0iOLvqWlXcL4+51r\n-cMUAfX6E6EaZQm//ikp+w2+7MEXTKguOuV3gwsrTy0DsvkZl4YDgx/FA4ImzXopv\n-d+3KJPLvO+OSBqUD3JPwXHnuJqGAbLBFyyCa/feGUjLlR8cxcNWLWdp4qxtoIUPG\n-3wTsC9YgrglS0F7FKMXlNRY=\n+MIIFcTCCBFmgAwIBAgIRALWcUnSOxv9FQW3xdaMDO6swDQYJKoZIhvcNAQELBQAw\n+fDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n+A1UEBxMHU2FsZm9yZDEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMSQwIgYDVQQD\n+ExtTZWN0aWdvIFJTQSBDb2RlIFNpZ25pbmcgQ0EwHhcNMTkwMzI3MDAwMDAwWhcN\n+MjAwMzI2MjM1OTU5WjCBtDELMAkGA1UEBhMCQ0gxDTALBgNVBBEMBDgwMDUxCzAJ\n+BgNVBAgMAlpIMRAwDgYDVQQHDAdaw7xyaWNoMRcwFQYDVQQJDA5NYXR0ZW5nYXNz\n+ZSAyNzEuMCwGA1UECgwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3NvY2lh\n+dGlvbjEuMCwGA1UEAwwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3NvY2lh\n+dGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK04VDwiY1wxcW3E\n+WTTGmnbciCwETwC96DG4qcoH2PPNsVy3dfwGh0C02Qj2vL64IfwIGUFSgREvyjZk\n+CNhEuJO2e0nO0rKNNH5v/JO+P7/VYPZkF5a3uUz9ulmihULXioieHB/q0l6BmiJL\n++cYaMVfidL9Y+IJwgiTqjnpRhv1Ik083SPsu6GcfQT9MJfY/+xse2EP0l4GfdFE6\n+DRcWjiC8UHpfpGYcImzSFZZpbFbqoAyhueCl28QU4f8QAbS6BqNfaAK9MMACWDcK\n+eTz3C5JK6CiUxOnGIxilXhljuybFUjR4jGl5eTRpuPWk95NTTYS36q+bx/1nYelx\n+0n4nnDMCAwEAAaOCAbMwggGvMB8GA1UdIwQYMBaAFA7hOqhTOjHVir7Bu61nGgOF\n+rTQOMB0GA1UdDgQWBBRbN7ECrPCdVvh58enwy3Dix46h2jAOBgNVHQ8BAf8EBAMC\n+B4AwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzARBglghkgBhvhC\n+AQEEBAMCBBAwQAYDVR0gBDkwNzA1BgwrBgEEAbIxAQIBAwIwJTAjBggrBgEFBQcC\n+ARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwQwYDVR0fBDwwOjA4oDagNIYyaHR0\n+cDovL2NybC5zZWN0aWdvLmNvbS9TZWN0aWdvUlNBQ29kZVNpZ25pbmdDQS5jcmww\n+cwYIKwYBBQUHAQEEZzBlMD4GCCsGAQUFBzAChjJodHRwOi8vY3J0LnNlY3RpZ28u\n+Y29tL1NlY3RpZ29SU0FDb2RlU2lnbmluZ0NBLmNydDAjBggrBgEFBQcwAYYXaHR0\n+cDovL29jc3Auc2VjdGlnby5jb20wKwYDVR0RBCQwIoEgam9uYXNAYml0Y29pbmNv\n+cmVjb2Rlc2lnbmluZy5vcmcwDQYJKoZIhvcNAQELBQADggEBAF/AIXcFBWCC2Red\n+SHN4Cvko5mdSkDNgzjVFc+OwAJ5RdOgbERde4PnHm3Qmrnx+uMetVnmrC8Fv1Iwb\n+kkR0bdbWBj6lF6zMsClIN6WJEfY+qfj1qi7wyucu+3OElYRC9bm5Lf0mEHQr8lJ1\n+lGvAjPh+/hmxoVNbHFMZ1Ea+BrbjVwiSznt0gzdMh0CispBZKLWCIwRwi+hFjQrw\n+Z7RLH8HeCJ5Ojl/OTDQqh6AylQ7l9w9KHsUt4Jqy/AnCCyAj2/6xjdwnuo3tCZwb\n+g/9CydiAacD/83odphEeC2iBa+0wsj9bWmyYKY7S9n0u+wm3wBfZbSVMDDPk/la1\n+3qCUDLk=\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIF4DCCA8igAwIBAgIQLnyHzA6TSlL+lP0ct800rzANBgkqhkiG9w0BAQwFADCB\n-hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\n-BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTMwNTA5\n-MDAwMDAwWhcNMjgwNTA4MjM1OTU5WjB9MQswCQYDVQQGEwJHQjEbMBkGA1UECBMS\n-R3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFD\n-T01PRE8gQ0EgTGltaXRlZDEjMCEGA1UEAxMaQ09NT0RPIFJTQSBDb2RlIFNpZ25p\n-bmcgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCmmJBjd5E0f4rR\n-3elnMRHrzB79MR2zuWJXP5O8W+OfHiQyESdrvFGRp8+eniWzX4GoGA8dHiAwDvth\n-e4YJs+P9omidHCydv3Lj5HWg5TUjjsmK7hoMZMfYQqF7tVIDSzqwjiNLS2PgIpQ3\n-e9V5kAoUGFEs5v7BEvAcP2FhCoyi3PbDMKrNKBh1SMF5WgjNu4xVjPfUdpA6M0ZQ\n-c5hc9IVKaw+A3V7Wvf2pL8Al9fl4141fEMJEVTyQPDFGy3CuB6kK46/BAW+QGiPi\n-XzjbxghdR7ODQfAuADcUuRKqeZJSzYcPe9hiKaR+ML0btYxytEjy4+gh+V5MYnmL\n-Agaff9ULAgMBAAGjggFRMIIBTTAfBgNVHSMEGDAWgBS7r34CPfqm8TyEjq3uOJjs\n-2TIy1DAdBgNVHQ4EFgQUKZFg/4pN+uv5pmq4z/nmS71JzhIwDgYDVR0PAQH/BAQD\n-AgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwEwYDVR0lBAwwCgYIKwYBBQUHAwMwEQYD\n-VR0gBAowCDAGBgRVHSAAMEwGA1UdHwRFMEMwQaA/oD2GO2h0dHA6Ly9jcmwuY29t\n-b2RvY2EuY29tL0NPTU9ET1JTQUNlcnRpZmljYXRpb25BdXRob3JpdHkuY3JsMHEG\n-CCsGAQUFBwEBBGUwYzA7BggrBgEFBQcwAoYvaHR0cDovL2NydC5jb21vZG9jYS5j\n-b20vQ09NT0RPUlNBQWRkVHJ1c3RDQS5jcnQwJAYIKwYBBQUHMAGGGGh0dHA6Ly9v\n-Y3NwLmNvbW9kb2NhLmNvbTANBgkqhkiG9w0BAQwFAAOCAgEAAj8COcPu+Mo7id4M\n-bU2x8U6ST6/COCwEzMVjEasJY6+rotcCP8xvGcM91hoIlP8l2KmIpysQGuCbsQci\n-GlEcOtTh6Qm/5iR0rx57FjFuI+9UUS1SAuJ1CAVM8bdR4VEAxof2bO4QRHZXavHf\n-WGshqknUfDdOvf+2dVRAGDZXZxHNTwLk/vPa/HUX2+y392UJI0kfQ1eD6n4gd2HI\n-TfK7ZU2o94VFB696aSdlkClAi997OlE5jKgfcHmtbUIgos8MbAOMTM1zB5TnWo46\n-BLqioXwfy2M6FafUFRunUkcyqfS/ZEfRqh9TTjIwc8Jvt3iCnVz/RrtrIh2IC/gb\n-qjSm/Iz13X9ljIwxVzHQNuxHoc/Li6jvHBhYxQZ3ykubUa9MCEp6j+KjUuKOjswm\n-5LLY5TjCqO3GgZw1a6lYYUoKl7RLQrZVnb6Z53BtWfhtKgx/GWBfDJqIbDCsUgmQ\n-Fhv/K53b0CDKieoofjKOGd97SDMe12X4rsn4gxSTdn1k0I7OvjV9/3IxTZ+evR5s\n-L6iPDAZQ+4wns3bJ9ObXwzTijIchhmH+v1V04SF3AwpobLvkyanmz1kl63zsRQ55\n-ZmjoIs2475iFTZYRPAmK0H+8KCgT+2rKVI2SXM3CZZgGns5IW9S1N5NGQXwH3c/6\n-Q++6Z2H/fUnguzB9XIDj5hY5S6c=\n+MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB\n+iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl\n+cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV\n+BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw\n+MjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV\n+BAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU\n+aGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy\n+dGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\n+AoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B\n+3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY\n+tJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/\n+Fp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2\n+VN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT\n+79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6\n+c0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT\n+Yo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l\n+c6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee\n+UB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE\n+Hg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd\n+BgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G\n+A1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF\n+Up/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO\n+VWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3\n+ATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs\n+8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR\n+iQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze\n+Sf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ\n+XHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/\n+qS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB\n+VXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB\n+L6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG\n+jjxDah2nGN59PRbxYvnKkKj9\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB\n-hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\n-BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5\n-MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT\n-EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR\n-Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh\n-dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR\n-6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X\n-pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC\n-9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV\n-/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf\n-Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z\n-+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w\n-qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah\n-SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC\n-u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf\n-Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq\n-crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E\n-FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB\n-/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl\n-wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM\n-4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV\n-2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna\n-FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ\n-CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK\n-boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke\n-jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL\n-S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb\n-QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl\n-0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB\n-NVOFBkpdn627G190\n+MIIF9TCCA92gAwIBAgIQHaJIMG+bJhjQguCWfTPTajANBgkqhkiG9w0BAQwFADCB\n+iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl\n+cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV\n+BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTgx\n+MTAyMDAwMDAwWhcNMzAxMjMxMjM1OTU5WjB8MQswCQYDVQQGEwJHQjEbMBkGA1UE\n+CBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRgwFgYDVQQK\n+Ew9TZWN0aWdvIExpbWl0ZWQxJDAiBgNVBAMTG1NlY3RpZ28gUlNBIENvZGUgU2ln\n+bmluZyBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIYijTKFehif\n+SfCWL2MIHi3cfJ8Uz+MmtiVmKUCGVEZ0MWLFEO2yhyemmcuVMMBW9aR1xqkOUGKl\n+UZEQauBLYq798PgYrKf/7i4zIPoMGYmobHutAMNhodxpZW0fbieW15dRhqb0J+V8\n+aouVHltg1X7XFpKcAC9o95ftanK+ODtj3o+/bkxBXRIgCFnoOc2P0tbPBrRXBbZO\n+oT5Xax+YvMRi1hsLjcdmG0qfnYHEckC14l/vC0X/o84Xpi1VsLewvFRqnbyNVlPG\n+8Lp5UEks9wO5/i9lNfIi6iwHr0bZ+UYc3Ix8cSjz/qfGFN1VkW6KEQ3fBiSVfQ+n\n+oXw62oY1YdMCAwEAAaOCAWQwggFgMB8GA1UdIwQYMBaAFFN5v1qqK0rPVIDh2JvA\n+nfKyA2bLMB0GA1UdDgQWBBQO4TqoUzox1Yq+wbutZxoDha00DjAOBgNVHQ8BAf8E\n+BAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHSUEFjAUBggrBgEFBQcDAwYI\n+KwYBBQUHAwgwEQYDVR0gBAowCDAGBgRVHSAAMFAGA1UdHwRJMEcwRaBDoEGGP2h0\n+dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9u\n+QXV0aG9yaXR5LmNybDB2BggrBgEFBQcBAQRqMGgwPwYIKwYBBQUHMAKGM2h0dHA6\n+Ly9jcnQudXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FBZGRUcnVzdENBLmNydDAl\n+BggrBgEFBQcwAYYZaHR0cDovL29jc3AudXNlcnRydXN0LmNvbTANBgkqhkiG9w0B\n+AQwFAAOCAgEATWNQ7Uc0SmGk295qKoyb8QAAHh1iezrXMsL2s+Bjs/thAIiaG20Q\n+BwRPvrjqiXgi6w9G7PNGXkBGiRL0C3danCpBOvzW9Ovn9xWVM8Ohgyi33i/klPeF\n+M4MtSkBIv5rCT0qxjyT0s4E307dksKYjalloUkJf/wTr4XRleQj1qZPea3FAmZa6\n+ePG5yOLDCBaxq2NayBWAbXReSnV+pbjDbLXP30p5h1zHQE1jNfYw08+1Cg4LBH+g\n+S667o6XQhACTPlNdNKUANWlsvp8gJRANGftQkGG+OY96jk32nw4e/gdREmaDJhlI\n+lc5KycF/8zoFm/lv34h/wCOe0h5DekUxwZxNqfBZslkZ6GqNKQQCd3xLS81wvjqy\n+VVp4Pry7bwMQJXcVNIr5NsxDkuS6T/FikyglVyn7URnHoSVAaoRXxrKdsbwcCtp8\n+Z359LukoTBh+xHsxQXGaSynsCz1XUNLK3f2eBVHlRHjdAd6xdZgNVCT98E7j4viD\n+vXK6yz067vBeF5Jobchh+abxKgoLpbn0nu6YMgWFnuv5gynTxix9vTp3Los3QqBq\n+gu07SqqUEKThDfgXxbZaeTMYkuO1dfih6Y4KJR7kHvGfWocj/5+kUZ77OYARzdu1\n+xKeogG/lU9Tg46LC0lsa+jImLWpXcBw8pFguo/NbSwfcMlnzh6cabVg=\n -----END CERTIFICATE-----"
      },
      {
        "sha": "06893407f5fef454ad17da0eabdfa0c0947a6b8d",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -42,6 +42,7 @@ def __init__(self):\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt(zmq.RCVHWM, 0)\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")"
      },
      {
        "sha": "7e608c1a50f02e6598bc82b9e0e3395dfac68af9",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "removed",
        "additions": 0,
        "deletions": 89,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,89 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\"\"\"\n-    ZMQ example using python3's asyncio\n-\n-    Bitcoin should be started with the command line arguments:\n-        bitcoind -testnet -daemon \\\n-                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n-                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n-                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332\n-\n-    We use the asyncio library here.  `self.handle()` installs itself as a\n-    future at the end of the function.  Since it never returns with the event\n-    loop having an empty stack of futures, this creates an infinite loop.  An\n-    alternative is to wrap the contents of `handle` inside `while True`.\n-\n-    The `@asyncio.coroutine` decorator and the `yield from` syntax found here\n-    was introduced in python 3.4 and has been deprecated in favor of the `async`\n-    and `await` keywords respectively.\n-\n-    A blocking example using python 2.7 can be obtained from the git history:\n-    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n-\"\"\"\n-\n-import binascii\n-import asyncio\n-import zmq\n-import zmq.asyncio\n-import signal\n-import struct\n-import sys\n-\n-if (sys.version_info.major, sys.version_info.minor) < (3, 4):\n-    print(\"This example only works with Python 3.4 and greater\")\n-    sys.exit(1)\n-\n-port = 28332\n-\n-class ZMQHandler():\n-    def __init__(self):\n-        self.loop = asyncio.get_event_loop()\n-        self.zmqContext = zmq.asyncio.Context()\n-\n-        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n-\n-    @asyncio.coroutine\n-    def handle(self) :\n-        msg = yield from self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        body = msg[1]\n-        sequence = \"Unknown\"\n-        if len(msg[-1]) == 4:\n-          msgSequence = struct.unpack('<I', msg[-1])[-1]\n-          sequence = str(msgSequence)\n-        if topic == b\"hashblock\":\n-            print('- HASH BLOCK ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"hashtx\":\n-            print('- HASH TX  ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"rawblock\":\n-            print('- RAW BLOCK HEADER ('+sequence+') -')\n-            print(binascii.hexlify(body[:80]))\n-        elif topic == b\"rawtx\":\n-            print('- RAW TX ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        # schedule ourselves to receive the next message\n-        asyncio.ensure_future(self.handle())\n-\n-    def start(self):\n-        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n-        self.loop.create_task(self.handle())\n-        self.loop.run_forever()\n-\n-    def stop(self):\n-        self.loop.stop()\n-        self.zmqContext.destroy()\n-\n-daemon = ZMQHandler()\n-daemon.start()"
      },
      {
        "sha": "dc2a1e626c1b1bf64992d8ebd18965cca5ec2fdb",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -15,7 +15,7 @@ HOST ?= $(BUILD)\n PATCHES_PATH = $(BASEDIR)/patches\n BASEDIR = $(CURDIR)\n HASH_LENGTH:=11\n-DOWNLOAD_CONNECT_TIMEOUT:=10\n+DOWNLOAD_CONNECT_TIMEOUT:=30\n DOWNLOAD_RETRIES:=3\n HOST_ID_SALT ?= salt\n BUILD_ID_SALT ?= salt\n@@ -192,4 +192,6 @@ download-win:\n \t@$(MAKE) -s HOST=x86_64-w64-mingw32 download-one\n download: download-osx download-linux download-win\n \n+$(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n+\n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources"
      },
      {
        "sha": "68a83a2aeaefb7d6341c4156c6f33a7fb3b44a1e",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 11,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -30,29 +30,38 @@ Common `host-platform-triplets` for cross compilation are:\n \n No other options are needed, the paths are automatically configured.\n \n-Install the required dependencies: Ubuntu & Debian\n---------------------------------------------------\n+### Install the required dependencies: Ubuntu & Debian\n \n-For macOS cross compilation:\n+#### For macOS cross compilation\n \n-    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python-setuptools\n+    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools\n \n-For Win32/Win64 cross compilation:\n+#### For Win32/Win64 cross compilation\n \n - see [build-windows.md](../doc/build-windows.md#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux)\n \n-For linux (including i386, ARM) cross compilation:\n+#### For linux (including i386, ARM) cross compilation\n \n-    sudo apt-get install curl g++-aarch64-linux-gnu g++-4.8-aarch64-linux-gnu gcc-4.8-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-arm-linux-gnueabihf g++-4.8-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf binutils-arm-linux-gnueabihf g++-4.8-multilib gcc-4.8-multilib binutils-gold bsdmainutils\n+Common linux dependencies:\n+\n+    sudo apt-get install make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3\n+\n+For linux ARM cross compilation:\n+\n+    sudo apt-get install g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf\n+\n+For linux AARCH64 cross compilation:\n+\n+    sudo apt-get install g++-aarch64-linux-gnu binutils-aarch64-linux-gnu\n \n For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):\n \n-    sudo apt-get install curl g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n+    sudo apt-get install g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n \n RISC-V known issue: gcc-7.3.0 and gcc-7.3.1 result in a broken `test_bitcoin` executable (see https://github.com/bitcoin/bitcoin/pull/13543),\n this is apparently fixed in gcc-8.1.0.\n \n-Dependency Options:\n+### Dependency Options\n The following can be set when running make: make FOO=bar\n \n     SOURCES_PATH: downloaded sources will be placed here\n@@ -63,14 +72,14 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n-    RAPIDCHECK: build rapidcheck (experimental)\n+    RAPIDCHECK: build rapidcheck (experimental, requires cmake)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n options will be passed to bitcoin's configure. In this case, `--disable-wallet`.\n \n-Additional targets:\n+### Additional targets\n \n     download: run 'make download' to fetch all sources without building them\n     download-osx: run 'make download-osx' to fetch all sources needed for macOS builds"
      },
      {
        "sha": "c7671c1548b777aa7db26d303e15d04cfc019642",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,13 +1,13 @@\n-build_darwin_CC: = $(shell xcrun -f clang)\n-build_darwin_CXX: = $(shell xcrun -f clang++)\n-build_darwin_AR: = $(shell xcrun -f ar)\n-build_darwin_RANLIB: = $(shell xcrun -f ranlib)\n-build_darwin_STRIP: = $(shell xcrun -f strip)\n-build_darwin_OTOOL: = $(shell xcrun -f otool)\n-build_darwin_NM: = $(shell xcrun -f nm)\n+build_darwin_CC:=$(shell xcrun -f clang)\n+build_darwin_CXX:=$(shell xcrun -f clang++)\n+build_darwin_AR:=$(shell xcrun -f ar)\n+build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n+build_darwin_STRIP:=$(shell xcrun -f strip)\n+build_darwin_OTOOL:=$(shell xcrun -f otool)\n+build_darwin_NM:=$(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n-build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n+build_darwin_SHA256SUM=shasum -a 256\n+build_darwin_DOWNLOAD=curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)"
      },
      {
        "sha": "52b9a7eca2362af8d5d65061cff6950dfdde8594",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -67,7 +67,7 @@ fi\n if test -n \"@CXX@\" -a -z \"${CXX}\"; then\n   CXX=\"@CXX@\"\n fi\n-PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n+PYTHONPATH=$depends_prefix/native/lib/python3/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then\n   AR=@AR@"
      },
      {
        "sha": "8f03c5f37a00eb72158c555178b748aec824ae78",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -76,8 +76,9 @@ $(1)_download_path_fixed=$(subst :,\\:,$$($(1)_download_path))\n \n \n #default commands\n+# The default behavior for tar will try to set ownership when running as uid 0 and may not succeed, --no-same-owner disables this behavior\n $(1)_fetch_cmds ?= $(call fetch_file,$(1),$(subst \\:,:,$$($(1)_download_path_fixed)),$$($(1)_download_file),$($(1)_file_name),$($(1)_sha256_hash))\n-$(1)_extract_cmds ?= mkdir -p $$($(1)_extract_dir) && echo \"$$($(1)_sha256_hash)  $$($(1)_source)\" > $$($(1)_extract_dir)/.$$($(1)_file_name).hash &&  $(build_SHA256SUM) -c $$($(1)_extract_dir)/.$$($(1)_file_name).hash && tar --strip-components=1 -xf $$($(1)_source)\n+$(1)_extract_cmds ?= mkdir -p $$($(1)_extract_dir) && echo \"$$($(1)_sha256_hash)  $$($(1)_source)\" > $$($(1)_extract_dir)/.$$($(1)_file_name).hash &&  $(build_SHA256SUM) -c $$($(1)_extract_dir)/.$$($(1)_file_name).hash && tar --no-same-owner --strip-components=1 -xf $$($(1)_source)\n $(1)_preprocess_cmds ?=\n $(1)_build_cmds ?=\n $(1)_config_cmds ?=\n@@ -170,15 +171,15 @@ $($(1)_extracted): | $($(1)_fetched)\n \t$(AT)mkdir -p $$(@D)\n \t$(AT)cd $$(@D); $(call $(1)_extract_cmds,$(1))\n \t$(AT)touch $$@\n-$($(1)_preprocessed): | $($(1)_dependencies) $($(1)_extracted)\n+$($(1)_preprocessed): | $($(1)_extracted)\n \t$(AT)echo Preprocessing $(1)...\n \t$(AT)mkdir -p $$(@D) $($(1)_patch_dir)\n \t$(AT)$(foreach patch,$($(1)_patches),cd $(PATCHES_PATH)/$(1); cp $(patch) $($(1)_patch_dir) ;)\n \t$(AT)cd $$(@D); $(call $(1)_preprocess_cmds, $(1))\n \t$(AT)touch $$@\n-$($(1)_configured): | $($(1)_preprocessed)\n+$($(1)_configured): | $($(1)_dependencies) $($(1)_preprocessed)\n \t$(AT)echo Configuring $(1)...\n-\t$(AT)rm -rf $(host_prefix); mkdir -p $(host_prefix)/lib; cd $(host_prefix); $(foreach package,$($(1)_all_dependencies), tar xf $($(package)_cached); )\n+\t$(AT)rm -rf $(host_prefix); mkdir -p $(host_prefix)/lib; cd $(host_prefix); $(foreach package,$($(1)_all_dependencies), tar --no-same-owner -xf $($(package)_cached); )\n \t$(AT)mkdir -p $$(@D)\n \t$(AT)+cd $$(@D); $($(1)_config_env) $(call $(1)_config_cmds, $(1))\n \t$(AT)touch $$@\n@@ -213,6 +214,14 @@ $(1): | $($(1)_cached_checksum)\n \n endef\n \n+stages = fetched extracted preprocessed configured built staged postprocessed cached cached_checksum\n+\n+define ext_add_stages\n+$(foreach stage,$(stages),\n+          $(1)_$(stage): $($(1)_$(stage))\n+          .PHONY: $(1)_$(stage))\n+endef\n+\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info"
      },
      {
        "sha": "3cd2e28858ed802f5c46b6df03832add39fe657a",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -10,6 +10,7 @@ $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n $(package)_cxxflags=-std=c++11\n+$(package)_cppflags_mingw32=-DUNICODE -D_UNICODE\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "8d06882cdb50e4fea29a54991860649cb5ffd086",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,11 +1,11 @@\n package=expat\n-$(package)_version=2.2.5\n-$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n+$(package)_version=2.2.6\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_6/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n+$(package)_sha256_hash=17b43c2716d521369f82fc2dc70f359860e90fa440bea65b3b85f0b246ea81f2\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-static\n+$(package)_config_opts=--disable-static --without-docbook\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "41e02e2030df876668776f166f751d271fbb7425",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,7 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=3a3bb2c4e15ffb433f2032f50a5b5a92558206822e22bfe8cbe339af4aa82f88\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-zlib --without-png --disable-static\n+  $(package)_config_opts=--without-zlib --without-png --without-harfbuzz --without-bzip2 --disable-static\n   $(package)_config_opts_linux=--with-pic\n endef\n "
      },
      {
        "sha": "fc60323b1c918a8229f8ba4b04d63310b4d98ec5",
        "filename": "depends/packages/libICE.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/depends/packages/libICE.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/depends/packages/libICE.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libICE.mk?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,23 +0,0 @@\n-package=libICE\n-$(package)_version=1.0.9\n-$(package)_download_path=http://xorg.freedesktop.org/releases/individual/lib/\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=8f7032f2c1c64352b5423f6b48a8ebdc339cc63064af34d66a6c9aa79759e202\n-$(package)_dependencies=xtrans xproto\n-\n-define $(package)_set_vars\n-  $(package)_config_opts=--disable-static --disable-docs --disable-specs --without-xsltproc\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef"
      },
      {
        "sha": "0f9307ca76acb8edb8dc892cefc046627f111654",
        "filename": "depends/packages/libSM.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/depends/packages/libSM.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/depends/packages/libSM.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libSM.mk?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,23 +0,0 @@\n-package=libSM\n-$(package)_version=1.2.2\n-$(package)_download_path=http://xorg.freedesktop.org/releases/individual/lib/\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=0baca8c9f5d934450a70896c4ad38d06475521255ca63b717a6510fdb6e287bd\n-$(package)_dependencies=xtrans xproto libICE\n-\n-define $(package)_set_vars\n-  $(package)_config_opts=--without-libuuid  --without-xsltproc  --disable-docs --disable-static\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef"
      },
      {
        "sha": "c3054cbd1a16e66d8ff592b27bdc7fc7a12c0f2c",
        "filename": "depends/packages/native_biplist.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,13 +3,13 @@ $(package)_version=1.0.3\n $(package)_download_path=https://bitbucket.org/wooster/biplist/downloads\n $(package)_file_name=biplist-$($(package)_version).tar.gz\n $(package)_sha256_hash=4c0549764c5fe50b28042ec21aa2e14fe1a2224e239a1dae77d9e7f3932aa4c6\n-$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n \n define $(package)_build_cmds\n-    python setup.py build\n+    python3 setup.py build\n endef\n \n define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n-    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+    python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef"
      },
      {
        "sha": "ccd72a99bd655e516bb4cce99b7a3fc4e1d84c13",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -22,12 +22,12 @@ define $(package)_extract_cmds\n   echo \"$($(package)_clang_sha256_hash)  $($(package)_source_dir)/$($(package)_clang_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir -p toolchain/bin toolchain/lib/clang/3.5/include && \\\n-  tar --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n+  tar --no-same-owner --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n   rm -f toolchain/lib/libc++abi.so* && \\\n   echo \"#!/bin/sh\" > toolchain/bin/$(host)-dsymutil && \\\n   echo \"exit 0\" >> toolchain/bin/$(host)-dsymutil && \\\n   chmod +x toolchain/bin/$(host)-dsymutil && \\\n-  tar --strip-components=1 -xf $($(package)_source)\n+  tar --no-same-owner --strip-components=1 -xf $($(package)_source)\n endef\n \n define $(package)_set_vars"
      },
      {
        "sha": "f99b689ecdc7406233dd36191a592be37aeed931",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,14 +3,14 @@ $(package)_version=1.1.2\n $(package)_download_path=https://github.com/al45tair/ds_store/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n $(package)_sha256_hash=3b3ecb7bf0a5157f5b6010bc3af7c141fb0ad3527084e63336220d22744bc20c\n-$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n $(package)_dependencies=native_biplist\n \n define $(package)_build_cmds\n-    python setup.py build\n+    python3 setup.py build\n endef\n \n define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n-    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+    python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef"
      },
      {
        "sha": "e60b99dccc98ce44512e0026a712bca1371f5855",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,13 +3,13 @@ $(package)_version=2.0.7\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n $(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n-$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n \n define $(package)_build_cmds\n-    python setup.py build\n+    python3 setup.py build\n endef\n \n define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n-    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+    python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef"
      },
      {
        "sha": "1de8c37d362aa9f01bfd9631ce3d22aa77b35b8e",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,7 @@ $(package)_file_name=protobuf-$($(package)_version).tar.bz2\n $(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb92661910\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-shared\n+$(package)_config_opts=--disable-shared --without-zlib\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "23cde9ee6d9edb8b2dc6ce75fdb99c537d92757c",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,20 +1,20 @@\n PACKAGE=qt\n-$(package)_version=5.9.6\n+$(package)_version=5.9.7\n $(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=eed620cb268b199bd83b3fc6a471c51d51e1dc2dbb5374fc97a0cc75facbe36f\n+$(package)_sha256_hash=36dd9574f006eaa1e5af780e4b33d11fe39d09fd7c12f3b9d83294174bd28f00\n $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n+$(package)_qttranslations_sha256_hash=b36da7d93c3ab6fca56b32053bb73bc619c8b192bb89b74e3bcde2705f1c2a14\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=50e75417ec0c74bb8b1989d1d8e981ee83690dce7dfc0c2169f7c00f397e5117\n+$(package)_qttools_sha256_hash=d62e0f70d99645d6704dbb8976fb2222443061743689943d40970c52c49367a1\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n@@ -27,6 +27,7 @@ $(package)_config_opts += -c++std c++11\n $(package)_config_opts += -confirm-license\n $(package)_config_opts += -dbus-runtime\n $(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -no-compile-examples\n $(package)_config_opts += -no-cups\n $(package)_config_opts += -no-egl\n $(package)_config_opts += -no-eglfs\n@@ -64,13 +65,25 @@ $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n+$(package)_config_opts += -qt-harfbuzz\n $(package)_config_opts += -system-zlib\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n $(package)_config_opts += -v\n+$(package)_config_opts += -no-feature-dial\n+$(package)_config_opts += -no-feature-ftp\n+$(package)_config_opts += -no-feature-lcdnumber\n+$(package)_config_opts += -no-feature-pdf\n $(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printdialog\n $(package)_config_opts += -no-feature-concurrent\n+$(package)_config_opts += -no-feature-sql\n+$(package)_config_opts += -no-feature-statemachine\n+$(package)_config_opts += -no-feature-syntaxhighlighter\n+$(package)_config_opts += -no-feature-textbrowser\n+$(package)_config_opts += -no-feature-textodfwriter\n+$(package)_config_opts += -no-feature-udpsocket\n+$(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n ifneq ($(build_os),darwin)\n@@ -112,19 +125,20 @@ define $(package)_extract_cmds\n   echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir qtbase && \\\n-  tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n+  tar --no-same-owner --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n   mkdir qttranslations && \\\n-  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttranslations_file_name) -C qttranslations && \\\n+  tar --no-same-owner --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttranslations_file_name) -C qttranslations && \\\n   mkdir qttools && \\\n-  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n+  tar --no-same-owner --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n endef\n \n define $(package)_preprocess_cmds\n+  sed -i.old \"s|FT_Get_Font_Format|FT_Get_X11_Font_Format|\" qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp && \\\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_network/src_plugins.depends = src_network/\" qtbase/src/src.pro && \\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n-  sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n+  sed -i.old -e 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' -e 's|/bin/pwd|pwd|' qtbase/configure && \\\n   sed -i.old 's/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0)/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft)/' qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\"
      },
      {
        "sha": "a35e091c8085848d90d7b1dd8f9420cdeeffd858",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,18 +1,17 @@\n package=rapidcheck\n-$(package)_version=10fc0cb\n-$(package)_download_path=https://github.com/MarcoFalke/rapidcheck/archive\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=9640926223c00af45bce4c7df8b756b5458a89b2ba74cfe3e404467f13ce26df\n+$(package)_version=3eb9b4ff69f4ff2d9932e8f852c2b2a61d7c20d3\n+$(package)_download_path=https://github.com/emil-e/rapidcheck/archive\n+$(package)_file_name=$($(package)_version).tar.gz\n+$(package)_sha256_hash=5fbf82755c9a647127e62563be079448ff8b1db9ca80a52a673dd9a88fdb714b\n \n define $(package)_config_cmds\n-  cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true .\n+  cmake -DCMAKE_INSTALL_PREFIX=$($(package)_staging_dir)$(host_prefix) -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_INSTALL_ALL_EXTRAS=ON\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) && \\\n-  mkdir -p $($(package)_staging_dir)$(host_prefix)/include && \\\n-  cp -a include/* $($(package)_staging_dir)$(host_prefix)/include/ && \\\n-  cp -a extras/boost_test/include/rapidcheck/* $($(package)_staging_dir)$(host_prefix)/include/rapidcheck/ && \\\n-  mkdir -p $($(package)_staging_dir)$(host_prefix)/lib && \\\n-  cp -a librapidcheck.a $($(package)_staging_dir)$(host_prefix)/lib/\n+  $(MAKE) rapidcheck\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) rapidcheck install\n endef"
      },
      {
        "sha": "dfbc50580cb2137af5b919f5fc6772507f6b7661",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,8 +1,8 @@\n package=zeromq\n-$(package)_version=4.2.3\n+$(package)_version=4.3.1\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n+$(package)_sha256_hash=bcbabe1e2c7d0eec4ed612e10b94b112dd5f06fcefa994a0c79a45d835cd21eb\n $(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars"
      },
      {
        "sha": "b911ac56724b193f84d0cbdbf0bf0f8d92e0bab6",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,17 +1,17 @@\n-From 1a159c128c69a42d90819375c06a39994f3fbfc1 Mon Sep 17 00:00:00 2001\n-From: Cory Fields <cory-nospam-@coryfields.com>\n-Date: Tue, 28 Nov 2017 20:33:25 -0500\n+From f6866b0f166ad168618aae64c7fbee8775d3eb23 Mon Sep 17 00:00:00 2001\n+From: mruddy <6440430+mruddy@users.noreply.github.com>\n+Date: Sat, 30 Jun 2018 09:44:58 -0400\n Subject: [PATCH] fix build with older mingw64\n \n ---\n  src/windows.hpp | 7 +++++++\n  1 file changed, 7 insertions(+)\n \n diff --git a/src/windows.hpp b/src/windows.hpp\n-index 99e889d..e69038e 100644\n+index 6c3839fd..2c32ec79 100644\n --- a/src/windows.hpp\n +++ b/src/windows.hpp\n-@@ -55,6 +55,13 @@\n+@@ -58,6 +58,13 @@\n  #include <winsock2.h>\n  #include <windows.h>\n  #include <mswsock.h>\n@@ -23,8 +23,8 @@ index 99e889d..e69038e 100644\n +#include <ws2ipdef.h>\n +#endif\n  #include <iphlpapi.h>\n-\n+ \n  #if !defined __MINGW32__\n---\n-2.7.4\n+-- \n+2.17.1\n "
      },
      {
        "sha": "022e311977e794df924bd5da8f667356fff9a8fb",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,6 @@\n-From 6e6b47d5ab381c3df3b30bb0b0a6cf210dfb1eba Mon Sep 17 00:00:00 2001\n-From: Cory Fields <cory-nospam-@coryfields.com>\n-Date: Mon, 5 Mar 2018 14:22:05 -0500\n+From c9bbdd6581d07acfe8971e4bcebe278a3676cf03 Mon Sep 17 00:00:00 2001\n+From: mruddy <6440430+mruddy@users.noreply.github.com>\n+Date: Sat, 30 Jun 2018 09:57:18 -0400\n Subject: [PATCH] disable pthread_set_name_np\n \n pthread_set_name_np adds a Glibc requirement on >= 2.12.\n@@ -9,27 +9,27 @@ pthread_set_name_np adds a Glibc requirement on >= 2.12.\n  1 file changed, 3 insertions(+), 1 deletion(-)\n \n diff --git a/src/thread.cpp b/src/thread.cpp\n-index 4fc59c3e..c3fdfd46 100644\n+index a1086b0c..9943f354 100644\n --- a/src/thread.cpp\n +++ b/src/thread.cpp\n-@@ -220,7 +220,7 @@ void zmq::thread_t::setThreadName(const char *name_)\n+@@ -307,7 +307,7 @@ void zmq::thread_t::setThreadName (const char *name_)\n   */\n      if (!name_)\n          return;\n -\n +#if 0\n  #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n-     int rc = pthread_setname_np(name_);\n-     if(rc) return;\n-@@ -233,6 +233,8 @@ void zmq::thread_t::setThreadName(const char *name_)\n+     int rc = pthread_setname_np (name_);\n+     if (rc)\n+@@ -323,6 +323,8 @@ void zmq::thread_t::setThreadName (const char *name_)\n  #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n-     pthread_set_name_np(descriptor, name_);\n+     pthread_set_name_np (descriptor, name_);\n  #endif\n +#endif\n +    return;\n  }\n  \n  #endif\n -- \n-2.11.1\n+2.17.1\n "
      },
      {
        "sha": "a0cfe84a3e50a29e5ba942394f0abecb2078586a",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "added",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,129 @@\n+# JSON-RPC Interface\n+\n+The headless daemon `bitcoind` has the JSON-RPC API enabled by default, the GUI\n+`bitcoin-qt` has it disabled by default. This can be changed with the `-server`\n+option. In the GUI it is possible to execute RPC methods in the Debug Console\n+Dialog.\n+\n+## Versioning\n+\n+The RPC interface might change from one major version of Bitcoin Core to the\n+next. This makes the RPC interface implicitly versioned on the major version.\n+The version tuple can be retrieved by e.g. the `getnetworkinfo` RPC in\n+`version`.\n+\n+Usually deprecated features can be re-enabled during the grace-period of one\n+major version via the `-deprecatedrpc=` command line option. The release notes\n+of a new major release come with detailed instructions on what RPC features\n+were deprecated and how to re-enable them temporarily.\n+\n+## Security\n+\n+The RPC interface allows other programs to control Bitcoin Core,\n+including the ability to spend funds from your wallets, affect consensus\n+verification, read private data, and otherwise perform operations that\n+can cause loss of money, data, or privacy.  This section suggests how\n+you should use and configure Bitcoin Core to reduce the risk that its\n+RPC interface will be abused.\n+\n+- **Securing the executable:** Anyone with physical or remote access to\n+  the computer, container, or virtual machine running Bitcoin Core can\n+  compromise either the whole program or just the RPC interface.  This\n+  includes being able to record any passphrases you enter for unlocking\n+  your encrypted wallets or changing settings so that your Bitcoin Core\n+  program tells you that certain transactions have multiple\n+  confirmations even when they aren't part of the best block chain.  For\n+  this reason, you should not use Bitcoin Core for security sensitive\n+  operations on systems you do not exclusively control, such as shared\n+  computers or virtual private servers.\n+\n+- **Securing local network access:** By default, the RPC interface can\n+  only be accessed by a client running on the same computer and only\n+  after the client provides a valid authentication credential (username\n+  and passphrase).  Any program on your computer with access to the file\n+  system and local network can obtain this level of access.\n+  Additionally, other programs on your computer can attempt to provide\n+  an RPC interface on the same port as used by Bitcoin Core in order to\n+  trick you into revealing your authentication credentials.  For this\n+  reason, it is important to only use Bitcoin Core for\n+  security-sensitive operations on a computer whose other programs you\n+  trust.\n+\n+- **Securing remote network access:** You may optionally allow other\n+  computers to remotely control Bitcoin Core by setting the `rpcallowip`\n+  and `rpcbind` configuration parameters.  These settings are only meant\n+  for enabling connections over secure private networks or connections\n+  that have been otherwise secured (e.g. using a VPN or port forwarding\n+  with SSH or stunnel).  **Do not enable RPC connections over the public\n+  Internet.**  Although Bitcoin Core's RPC interface does use\n+  authentication, it does not use encryption, so your login credentials\n+  are sent as clear text that can be read by anyone on your network\n+  path.  Additionally, the RPC interface has not been hardened to\n+  withstand arbitrary Internet traffic, so changing the above settings\n+  to expose it to the Internet (even using something like a Tor hidden\n+  service) could expose you to unconsidered vulnerabilities.  See\n+  `bitcoind -help` for more information about these settings and other\n+  settings described in this document.\n+\n+    Related, if you use Bitcoin Core inside a Docker container, you may\n+    need to expose the RPC port to the host system.  The default way to\n+    do this in Docker also exposes the port to the public Internet.\n+    Instead, expose it only on the host system's localhost, for example:\n+    `-p 127.0.0.1:8332:8332`\n+\n+- **Secure authentication:** By default, Bitcoin Core generates unique\n+  login credentials each time it restarts and puts them into a file\n+  readable only by the user that started Bitcoin Core, allowing any of\n+  that user's RPC clients with read access to the file to login\n+  automatically.  The file is `.cookie` in the Bitcoin Core\n+  configuration directory, and using these credentials is the preferred\n+  RPC authentication method.  If you need to generate static login\n+  credentials for your programs, you can use the script in the\n+  `share/rpcauth` directory in the Bitcoin Core source tree.  As a final\n+  fallback, you can directly use manually-chosen `rpcuser` and\n+  `rpcpassword` configuration parameters---but you must ensure that you\n+  choose a strong and unique passphrase (and still don't use insecure\n+  networks, as mentioned above).\n+\n+- **Secure string handling:** The RPC interface does not guarantee any\n+  escaping of data beyond what's necessary to encode it as JSON,\n+  although it does usually provide serialized data using a hex\n+  representation of the bytes.  If you use RPC data in your programs or\n+  provide its data to other programs, you must ensure any problem\n+  strings are properly escaped.  For example, multiple websites have\n+  been manipulated because they displayed decoded hex strings that\n+  included HTML `<script>` tags.  For this reason, and other\n+  non-security reasons, it is recommended to display all serialized data\n+  in hex form only.\n+\n+## RPC consistency guarantees\n+\n+State that can be queried via RPCs is guaranteed to be at least up-to-date with\n+the chain state immediately prior to the call's execution. However, the state\n+returned by RPCs that reflect the mempool may not be up-to-date with the\n+current mempool state.\n+\n+### Transaction Pool\n+\n+The mempool state returned via an RPC is consistent with itself and with the\n+chain state at the time of the call. Thus, the mempool state only encompasses\n+transactions that are considered mine-able by the node at the time of the RPC.\n+\n+The mempool state returned via an RPC reflects all effects of mempool and chain\n+state related RPCs that returned prior to this call.\n+\n+### Wallet\n+\n+The wallet state returned via an RPC is consistent with itself and with the\n+chain state at the time of the call.\n+\n+Wallet RPCs will return the latest chain state consistent with prior non-wallet\n+RPCs. The effects of all blocks (and transactions in blocks) at the time of the\n+call is reflected in the state of all wallet transactions. For example, if a\n+block contains transactions that conflicted with mempool transactions, the\n+wallet would reflect the removal of these mempool transactions in the state.\n+\n+However, the wallet may not be up-to-date with the current state of the mempool\n+or the state of the mempool by an RPC that returned before this RPC. For\n+example, a wallet transaction that was BIP-125-replaced in the mempool prior to\n+this RPC may not yet be reflected as such in this RPC response."
      },
      {
        "sha": "b4fa933c8ec43ab68e5d0d72914b34350bd53c05",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,9 +3,9 @@ Bitcoin Core\n \n Setup\n ---------------------\n-Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. It downloads and, by default, stores the entire history of Bitcoin transactions (which is currently more than 100 GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. It downloads and, by default, stores the entire history of Bitcoin transactions, which requires a few hundred gigabytes of disk space. Depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n-To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/releases/).\n+To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/download/).\n \n Running\n ---------------------\n@@ -30,7 +30,7 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n+* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -41,21 +41,23 @@ The following are developer notes on how to build Bitcoin Core on your native pl\n - [macOS Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n - [Windows Build Notes](build-windows.md)\n+- [FreeBSD Build Notes](build-freebsd.md)\n - [OpenBSD Build Notes](build-openbsd.md)\n - [NetBSD Build Notes](build-netbsd.md)\n-- [Gitian Building Guide](gitian-building.md)\n+- [Gitian Building Guide (External Link)](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md)\n \n Development\n ---------------------\n The Bitcoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n+- [Productivity Notes](productivity.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n-- [Travis CI](travis-ci.md)\n+- [JSON-RPC Interface](JSON-RPC-interface.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n@@ -64,11 +66,12 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n+* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n+- [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n - [Reduce Traffic](reduce-traffic.md)"
      },
      {
        "sha": "739e22d6341cd30bb9e28b396cf4438bc5feb5b9",
        "filename": "doc/README_osx.md",
        "status": "removed",
        "additions": 0,
        "deletions": 97,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,97 +0,0 @@\n-Deterministic macOS DMG Notes.\n-\n-Working macOS DMGs are created in Linux by combining a recent clang,\n-the Apple binutils (ld, ar, etc) and DMG authoring tools.\n-\n-Apple uses clang extensively for development and has upstreamed the necessary\n-functionality so that a vanilla clang can take advantage. It supports the use\n-of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for macOS.\n-\n-Apple's version of binutils (called cctools) contains lots of functionality\n-missing in the FSF's binutils. In addition to extra linker options for\n-frameworks and sysroots, several other tools are needed as well such as\n-install_name_tool, lipo, and nmedit. These do not build under linux, so they\n-have been patched to do so. The work here was used as a starting point:\n-[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n-\n-In order to build a working toolchain, the following source packages are needed\n-from Apple: cctools, dyld, and ld64.\n-\n-These tools inject timestamps by default, which produce non-deterministic\n-binaries. The ZERO_AR_DATE environment variable is used to disable that.\n-\n-This version of cctools has been patched to use the current version of clang's\n-headers and its libLTO.so rather than those from llvmgcc, as it was\n-originally done in toolchain4.\n-\n-To complicate things further, all builds must target an Apple SDK. These SDKs\n-are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n-\n-This file is several gigabytes in size, but only a single directory inside is\n-needed:\n-```\n-Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n-```\n-\n-Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for Gitian input, there are two options:\n-\n-Using macOS, you can mount the dmg, and then create it with:\n-```\n-  $ hdiutil attach Xcode_7.3.1.dmg\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n-```\n-\n-Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n-The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n-the dmg file is in the current directory, and then run the script. You may wish\n-to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n-you've confirmed the extraction succeeded.\n-\n-```bash\n-apt-get install p7zip-full sleuthkit\n-contrib/macdeploy/extract-osx-sdk.sh\n-rm -rf 5.hfs MacOSX10.11.sdk\n-```\n-\n-The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n-which are created using these tools. The build process has been designed to\n-avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n-fully deterministic and may be freely redistributed.\n-\n-genisoimage is used to create the initial DMG. It is not deterministic as-is,\n-so it has been patched. A system genisoimage will work fine, but it will not\n-be deterministic because the file-order will change between invocations.\n-The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n-No effort was made to fix this cleanly, so it likely leaks memory badly. But\n-it's only used for a single invocation, so that's no real concern.\n-\n-genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n-libdmg-hfsplus project is used to compress it. There are several bugs in this\n-tool and its maintainer has seemingly abandoned the project. It has been forked\n-and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n-\n-The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n-functionality is broken. Only the compression feature is currently used.\n-Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n-\n-Background images and other features can be added to DMG files by inserting a\n-.DS_Store before creation. This is generated by the script\n-contrib/macdeploy/custom_dsstore.py.\n-\n-As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a\n-requirement in order to satisfy the new Gatekeeper requirements. Because this\n-private key cannot be shared, we'll have to be a bit creative in order for the\n-build process to remain somewhat deterministic. Here's how it works:\n-\n-- Builders use Gitian to create an unsigned release. This outputs an unsigned\n-  dmg which users may choose to bless and run. It also outputs an unsigned app\n-  structure in the form of a tarball, which also contains all of the tools\n-  that have been previously (deterministically) built in order to create a\n-  final dmg.\n-- The Apple keyholder uses this unsigned app to create a detached signature,\n-  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Gitian. It\n-  uses the pre-built tools to recombine the pieces into a deterministic dmg."
      },
      {
        "sha": "c96871ab5f3ef58e4170a9690fd74d1eb3721921",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,6 +6,12 @@ The REST API can be enabled with the `-rest` option.\n The interface runs on the same port as the JSON-RPC interface, by default port 8332 for mainnet, port 18332 for testnet,\n and port 18443 for regtest.\n \n+REST Interface consistency guarantees\n+-------------------------------------\n+\n+The [same guarantees as for the RPC Interface](/doc/JSON-RPC-interface.md#rpc-consistency-guarantees)\n+apply.\n+\n Supported API\n -------------\n \n@@ -14,13 +20,15 @@ Supported API\n \n Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+By default, this endpoint will only search the mempool.\n+To query for a confirmed transaction, enable the transaction index via \"txindex=1\" command line / configuration option.\n \n #### Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n `GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n \n Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\n+Responds with 404 if the block doesn't exist.\n \n The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request.\n \n@@ -30,6 +38,12 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n `GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n+Returns empty if the block doesn't exist or it isn't in the active chain.\n+\n+#### Blockhash by height\n+`GET /rest/blockhashbyheight/<HEIGHT>.<bin|hex|json>`\n+\n+Given a height: returns hash of block in best-block-chain at height provided.\n \n #### Chaininfos\n `GET /rest/chaininfo.json`\n@@ -87,6 +101,7 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Returns various information about the TX mempool.\n Only supports JSON as output format.\n+* loaded : (boolean) if the mempool is fully loaded\n * size : (numeric) the number of transactions in the TX mempool\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage"
      },
      {
        "sha": "eb24ce6f66bbae25b4ea19e1f67b8247c66886f3",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.17.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.18.0**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -15,11 +15,11 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.17.0**):\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial Merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n-* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting *v0.17.0*, whether to send reject messages can be configured with the `-enablebip61` option.\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting **v0.17.0**, whether to send reject messages can be configured with the `-enablebip61` option, and support is deprecated as of **v0.18.0**.\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*.\n-* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n+* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)). Support can be optionally disabled at build time since **v0.18.0** ([PR 14451](https://github.com/bitcoin/bitcoin/pull/14451)).\n * [`BIP 90`](https://github.com/bitcoin/bips/blob/master/bip-0090.mediawiki): Trigger mechanism for activation of BIPs 34, 65, and 66 has been simplified to block height checks since **v0.14.0** ([PR #8391](https://github.com/bitcoin/bitcoin/pull/8391)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n * [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)) and has been activated since *block 419328*.\n@@ -33,7 +33,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.17.0**):\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068)).\n-* [`BIP 159`](https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki): NODE_NETWORK_LIMITED service bit [signaling only] is supported as of **v0.16.0** ([PR 11740](https://github.com/bitcoin/bitcoin/pull/11740)).\n+* [`BIP 159`](https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki): The NODE_NETWORK_LIMITED service bit is signalled as of **v0.16.0** ([PR 11740](https://github.com/bitcoin/bitcoin/pull/11740)), and such nodes are connected to as of **v0.17.0** ([PR 10387](https://github.com/bitcoin/bitcoin/pull/10387)).\n * [`BIP 173`](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki): Bech32 addresses for native Segregated Witness outputs are supported as of **v0.16.0** ([PR 11167](https://github.com/bitcoin/bitcoin/pull/11167)).\n * [`BIP 174`](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of **v0.17.0** ([PR 13557](https://github.com/bitcoin/bitcoin/pull/13557)).\n * [`BIP 176`](https://github.com/bitcoin/bips/blob/master/bip-0176.mediawiki): Bits Denomination [QT only] is supported as of **v0.16.0** ([PR 12035](https://github.com/bitcoin/bitcoin/pull/12035))."
      },
      {
        "sha": "88ecb8fe6523f7a5d7234eaf963128d1400919d6",
        "filename": "doc/bitcoin-conf.md",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,37 @@\n+# `bitcoin.conf` Configuration File\n+\n+The configuration file is used by `bitcoind`, `bitcoin-qt` and `bitcoin-cli`.\n+\n+All command-line options (except for `-?`, `-help`, `-version` and `-conf`) may be specified in a configuration file, and all configuration file options (except for `includeconf`) may also be specified on the command line. Command-line options override values set in the configuration file and configuration file options override values set in the GUI.\n+\n+## Configuration File Format\n+\n+The configuration file is a plain text file and consists of `option=value` entries, one per line. Leading and trailing whitespaces are removed.\n+\n+In contrast to the command-line usage:\n+- an option must be specified without leading `-`;\n+- a value of the given option is mandatory; e.g., `testnet=1` (for chain selection options), `noconnect=1` (for negated options).\n+\n+### Blank lines\n+\n+Blank lines are allowed and ignored by the parser.\n+\n+### Comments\n+\n+A comment starts with a number sign (`#`) and extends to the end of the line. All comments are ignored by the parser.\n+\n+Comments may appear in two ways:\n+- on their own on an otherwise empty line (_preferable_);\n+- after an `option=value` entry.\n+\n+### Network specific options\n+\n+Network specific options can be:\n+- placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`) or `[regtest]`;\n+- prefixed with a chain name; e.g., `regtest.maxmempool=100`.\n+\n+## Configuration File Path\n+\n+The configuration file is not automatically created; you can create it using your favorite text editor. By default, the configuration file name is `bitcoin.conf` and it is located in the Bitcoin data directory, but both the Bitcoin data directory and the configuration file path may be changed using the `-datadir` and `-conf` command-line options.\n+\n+The `includeconf=<file>` option in the `bitcoin.conf` file can be used to include additional configuration files."
      },
      {
        "sha": "d22b6e838342b6859661f8ad6bbd0d6816d36095",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 32,
        "deletions": 18,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,6 @@\n FreeBSD build guide\n ======================\n-(updated for FreeBSD 11.1)\n+(updated for FreeBSD 12.0)\n \n This guide describes how to build bitcoind and command-line utilities on FreeBSD.\n \n@@ -10,37 +10,51 @@ This guide does not contain instructions for building the GUI.\n \n You will need the following dependencies, which can be installed as root via pkg:\n \n-```\n+```shell\n pkg install autoconf automake boost-libs git gmake libevent libtool openssl pkgconf\n-```\n \n-For the wallet (optional):\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n-./contrib/install_db4.sh `pwd`\n-export BDB_PREFIX=\"$PWD/db4\"\n+\n+In order to run the test suite (recommended), you will need to have Python 3 installed:\n+\n+```shell\n+pkg install python3\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ## Building Bitcoin Core\n \n-**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n \n-```\n+With wallet:\n+```shell\n ./autogen.sh\n+./configure --with-gui=no \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+```\n \n-./configure                  # to build with wallet OR\n-./configure --disable-wallet # to build without wallet\n-\n-gmake\n+Without wallet:\n+```shell\n+./autogen.sh\n+./configure --with-gui=no --disable-wallet\n ```\n \n-*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n-It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n-use the versioned gdb command (e.g. `gdb7111`).\n+followed by:\n \n+```shell\n+gmake # use -jX here for parallelism\n+gmake check # Run tests if Python 3 is available\n+```"
      },
      {
        "sha": "ab422f6aa7e90056bea6a789e6b1f6b940600133",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,6 @@\n NetBSD build guide\n ======================\n-(updated for NetBSD 7.0)\n+(updated for NetBSD 8.0)\n \n This guide describes how to build bitcoind and command-line utilities on NetBSD.\n \n@@ -15,35 +15,65 @@ You will need the following modules, which can be installed via pkgsrc or pkgin:\n autoconf\n automake\n boost\n-db4\n git\n gmake\n libevent\n libtool\n-python27\n-```\n+pkg-config\n+python37\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](/contrib/install_db4.sh) like so:\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+```\n+\n+from the root of the repository. Then set `BDB_PREFIX` for the next section:\n+\n+```shell\n+export BDB_PREFIX=\"$PWD/db4\"\n+```\n+\n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n ```\n ./autogen.sh\n-./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n Without wallet:\n ```\n ./autogen.sh\n-./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no --disable-wallet \\\n+    CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+```\n+\n+Build and run the tests:\n+```bash\n+gmake # use -jX here for parallelism\n+gmake check\n ```"
      },
      {
        "sha": "dad2566a6c5c61476f5e1ebb42e4cd44da31b68b",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.3)\n+(updated for OpenBSD 6.4)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -14,7 +14,7 @@ Run the following as root to install the base dependencies for building:\n ```bash\n pkg_add git gmake libevent libtool boost\n pkg_add autoconf # (select highest version, e.g. 2.69)\n-pkg_add automake # (select highest version, e.g. 1.15)\n+pkg_add automake # (select highest version, e.g. 1.16)\n pkg_add python # (select highest version, e.g. 3.6)\n \n git clone https://github.com/bitcoin/bitcoin.git\n@@ -36,7 +36,7 @@ BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so\n+in contrib/](/contrib/install_db4.sh) like so:\n \n ```shell\n ./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n@@ -60,8 +60,8 @@ Preparation:\n export AUTOCONF_VERSION=2.69\n \n # Replace this with the automake version that you installed. Include only\n-# the major and minor parts of the version: use \"1.15\" for \"automake-1.15.1\".\n-export AUTOMAKE_VERSION=1.15\n+# the major and minor parts of the version: use \"1.16\" for \"automake-1.16.1\".\n+export AUTOMAKE_VERSION=1.16\n \n ./autogen.sh\n ```\n@@ -94,7 +94,7 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n+This is, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n "
      },
      {
        "sha": "d28a3d97aadb77088e57758eaace7e61ba94eac9",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 109,
        "deletions": 7,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -20,28 +20,28 @@ Dependencies\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n-If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n+If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n \n     brew install librsvg\n \n Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so\n+like so:\n \n ```shell\n ./contrib/install_db4.sh .\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n \n Build Bitcoin Core\n ------------------------\n \n-1. Clone the Bitcoin Core source code and cd into `bitcoin`\n+1. Clone the Bitcoin Core source code:\n \n         git clone https://github.com/bitcoin/bitcoin\n         cd bitcoin\n@@ -80,13 +80,15 @@ Running\n \n Bitcoin Core is now available at `./src/bitcoind`\n \n-Before running, it's recommended that you create an RPC configuration file.\n+Before running, you may create an empty configuration file:\n \n-    echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+    mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n+\n+    touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n     chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could take several hours.\n+The first time you run bitcoind, it will start downloading the blockchain. This process could take many hours, or even days on slower than average systems.\n \n You can monitor the download process by looking at the debug.log file:\n \n@@ -105,3 +107,103 @@ Notes\n * Tested on OS X 10.10 Yosemite through macOS 10.13 High Sierra on 64-bit Intel processors only.\n \n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)\n+\n+Deterministic macOS DMG Notes\n+-----------------------------\n+\n+Working macOS DMGs are created in Linux by combining a recent clang,\n+the Apple binutils (ld, ar, etc) and DMG authoring tools.\n+\n+Apple uses clang extensively for development and has upstreamed the necessary\n+functionality so that a vanilla clang can take advantage. It supports the use\n+of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n+when building for macOS.\n+\n+Apple's version of binutils (called cctools) contains lots of functionality\n+missing in the FSF's binutils. In addition to extra linker options for\n+frameworks and sysroots, several other tools are needed as well such as\n+install_name_tool, lipo, and nmedit. These do not build under linux, so they\n+have been patched to do so. The work here was used as a starting point:\n+[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n+\n+In order to build a working toolchain, the following source packages are needed\n+from Apple: cctools, dyld, and ld64.\n+\n+These tools inject timestamps by default, which produce non-deterministic\n+binaries. The ZERO_AR_DATE environment variable is used to disable that.\n+\n+This version of cctools has been patched to use the current version of clang's\n+headers and its libLTO.so rather than those from llvmgcc, as it was\n+originally done in toolchain4.\n+\n+To complicate things further, all builds must target an Apple SDK. These SDKs\n+are free to download, but not redistributable.\n+To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n+\n+This file is several gigabytes in size, but only a single directory inside is\n+needed:\n+```\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n+```\n+\n+Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n+To create a tarball suitable for Gitian input, there are two options:\n+\n+Using macOS, you can mount the dmg, and then create it with:\n+```\n+  $ hdiutil attach Xcode_7.3.1.dmg\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+```\n+\n+Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n+The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n+the dmg file is in the current directory, and then run the script. You may wish\n+to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n+you've confirmed the extraction succeeded.\n+\n+```bash\n+apt-get install p7zip-full sleuthkit\n+contrib/macdeploy/extract-osx-sdk.sh\n+rm -rf 5.hfs MacOSX10.11.sdk\n+```\n+\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n+which are created using these tools. The build process has been designed to\n+avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n+fully deterministic and may be freely redistributed.\n+\n+genisoimage is used to create the initial DMG. It is not deterministic as-is,\n+so it has been patched. A system genisoimage will work fine, but it will not\n+be deterministic because the file-order will change between invocations.\n+The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n+No effort was made to fix this cleanly, so it likely leaks memory badly. But\n+it's only used for a single invocation, so that's no real concern.\n+\n+genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n+libdmg-hfsplus project is used to compress it. There are several bugs in this\n+tool and its maintainer has seemingly abandoned the project. It has been forked\n+and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n+\n+The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n+functionality is broken. Only the compression feature is currently used.\n+Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n+\n+Background images and other features can be added to DMG files by inserting a\n+.DS_Store before creation. This is generated by the script\n+contrib/macdeploy/custom_dsstore.py.\n+\n+As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a\n+requirement in order to satisfy the new Gatekeeper requirements. Because this\n+private key cannot be shared, we'll have to be a bit creative in order for the\n+build process to remain somewhat deterministic. Here's how it works:\n+\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned\n+  dmg which users may choose to bless and run. It also outputs an unsigned app\n+  structure in the form of a tarball, which also contains all of the tools\n+  that have been previously (deterministically) built in order to create a\n+  final dmg.\n+- The Apple keyholder uses this unsigned app to create a detached signature,\n+  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n+- Builders feed the unsigned app + detached signature back into Gitian. It\n+  uses the pre-built tools to recombine the pieces into a deterministic dmg.\n+"
      },
      {
        "sha": "da65bc347a16ef0e3a753d7685fcb9a786812d37",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 20,
        "deletions": 23,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,8 +6,8 @@ Some notes on how to build Bitcoin Core in Unix.\n \n Note\n ---------------------\n-Always use absolute paths to configure and compile Bitcoin Core and the dependencies,\n-for example, when specifying the path of the dependency:\n+Always use absolute paths to configure and compile Bitcoin Core and the dependencies.\n+For example, when specifying the path of the dependency:\n \n \t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n@@ -24,7 +24,7 @@ make\n make install # optional\n ```\n \n-This will build bitcoin-qt as well if the dependencies are met.\n+This will build bitcoin-qt as well, if the dependencies are met.\n \n Dependencies\n ---------------------\n@@ -47,7 +47,7 @@ Optional dependencies:\n  protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when GUI enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n- libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x)\n+ libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n \n For the versions used, see [dependencies.md](dependencies.md)\n \n@@ -70,34 +70,33 @@ tuned to conserve memory with additional CXXFLAGS:\n \n Build requirements:\n \n-    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n+    sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3\n \n-BerkeleyDB is required for the wallet.\n+Now, you can either build from self-compiled [depends](/depends/README.md) or install the required dependencies:\n \n-**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n-You can add the repository and install using the following commands:\n+    sudo apt-get install libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n \n-    sudo apt-get install software-properties-common\n-    sudo add-apt-repository ppa:bitcoin/bitcoin\n-    sudo apt-get update\n-    sudo apt-get install libdb4.8-dev libdb4.8++-dev\n+BerkeleyDB is required for the wallet.\n \n Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n-BerkeleyDB 5.1 or later, which break binary wallet compatibility with the distributed executables which\n+BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n \n-See the section \"Disable-wallet mode\" to build Bitcoin Core without wallet.\n+Otherwise, you can build from self-compiled `depends` (see above).\n+\n+To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n+\n \n Optional (see --with-miniupnpc and --enable-upnp-default):\n \n     sudo apt-get install libminiupnpc-dev\n \n-ZMQ dependencies (provides ZMQ API 4.x):\n+ZMQ dependencies (provides ZMQ API):\n \n     sudo apt-get install libzmq3-dev\n \n-#### Dependencies for the GUI\n+GUI dependencies:\n \n If you want to build bitcoin-qt, make sure that the required packages for Qt development\n are installed. Qt 5 is necessary to build the GUI.\n@@ -157,15 +156,15 @@ Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so\n+like so:\n \n ```shell\n ./contrib/install_db4.sh `pwd`\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)).\n \n Boost\n -----\n@@ -189,9 +188,7 @@ Hardening Flags:\n \n \n Hardening enables the following features:\n-\n-* Position Independent Executable\n-    Build position independent code to take advantage of Address Space Layout Randomization\n+* _Position Independent Executable_: Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. Attackers who can cause execution of code at an arbitrary memory\n     location are thwarted if they don't know where anything useful is located.\n     The stack and heap are randomly located by default, but this allows the code section to be\n@@ -209,8 +206,7 @@ Hardening enables the following features:\n      TYPE\n     ET_DYN\n \n-* Non-executable Stack\n-    If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n+* _Non-executable Stack_: If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n     vulnerable buffers are found. By default, Bitcoin Core should be built with a non-executable stack,\n     but if one of the libraries it uses asks for an executable stack or someone makes a mistake\n     and uses a compiler extension which requires an executable stack, it will silently build an\n@@ -278,6 +274,7 @@ To build executables for ARM:\n     cd depends\n     make HOST=arm-linux-gnueabihf NO_QT=1\n     cd ..\n+    ./autogen.sh\n     ./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n     make\n "
      },
      {
        "sha": "036c585b4453a51fa68455775ddd766d4df89b72",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 25,
        "deletions": 20,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,15 +5,15 @@ Below are some notes on how to build Bitcoin Core for Windows.\n \n The options known to work for building Bitcoin Core on Windows are:\n \n-* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n+* On Linux, using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n and is the platform used to build the Bitcoin Core Windows release binaries.\n-* On Windows using [Windows\n+* On Windows, using [Windows\n Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n \n-* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n-* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n \n Installing Windows Subsystem for Linux\n ---------------------------------------\n@@ -65,11 +65,20 @@ A host toolchain (`build-essential`) is necessary because some dependency\n packages (such as `protobuf`) need to build host utilities that are used in the\n build process.\n \n-See also: [dependencies.md](dependencies.md).\n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n+If you want to build the windows installer with `make deploy` you need [NSIS](https://nsis.sourceforge.io/Main_Page):\n+\n+    sudo apt install nsis\n+\n+Acquire the source in the usual way:\n+\n+    git clone https://github.com/bitcoin/bitcoin.git\n+    cd bitcoin\n \n ## Building for 64-bit Windows\n \n-The first step is to install the mingw-w64 cross-compilation tool chain.\n+The first step is to install the mingw-w64 cross-compilation tool chain:\n \n     sudo apt install g++-mingw-w64-x86-64\n \n@@ -81,13 +90,9 @@ Once the toolchain is installed the build steps are common:\n \n Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n-This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+This means you cannot use a directory that is located directly on the host Windows file system to perform the build.\n \n-Acquire the source in the usual way:\n-\n-    git clone https://github.com/bitcoin/bitcoin.git\n-\n-Once the source code is ready the build steps are below.\n+Build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -111,11 +116,7 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-Acquire the source in the usual way:\n-\n-    git clone https://github.com/bitcoin/bitcoin.git\n-\n-Then build using:\n+Build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -133,18 +134,22 @@ Installation\n -------------\n \n After building using the Windows subsystem it can be useful to copy the compiled\n-executables to a directory on the windows drive in the same directory structure\n+executables to a directory on the Windows drive in the same directory structure\n as they appear in the release `.zip` archive. This can be done in the following\n way. This will install to `c:\\workspace\\bitcoin`, for example:\n \n     make install DESTDIR=/mnt/c/workspace/bitcoin\n \n+You can also create an installer using:\n+\n+    make deploy\n+\n Footnotes\n ---------\n \n-<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n+<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04, both the 32 and 64 bit Mingw-w64 packages install two different\n compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n-required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n+required to support win32 threads conflict with some of the classes in the C++11 standard library, in particular std::mutex.\n It's not possible to build the Bitcoin Core code using the win32 version of the Mingw-w64 cross compilers (at least not without\n modifying headers in the Bitcoin Core source code)."
      },
      {
        "sha": "1b3df62867a35fa92d96844d01712b5ad0c95bc4",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,28 +3,44 @@ Dependencies\n \n These are the dependencies currently used by Bitcoin Core. You can find instructions for installing them in the `build-*.md` file for your platform.\n \n-| Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html) |\n+| Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n-| Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n+| Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n | Clang |  | [3.3+](https://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.6](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n-| FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n+| FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) (C++11 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L65) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L64) |\n+| librsvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L66) |\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n-| Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n+| Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n-| Qt | [5.9.6](https://download.qt.io/official_releases/qt/) | 5.x | No |  |  |\n+| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n-| ZeroMQ | [4.2.3](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n+\n+Controlling dependencies\n+------------------------\n+Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list.\n+\n+#### Options passed to `./configure`\n+* MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n+* Berkeley DB is not needed with `--disable-wallet`.\n+* protobuf is not needed with `--disable-bip70`.\n+* Qt is not needed with `--without-gui`.\n+* If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n+* ZeroMQ is needed only with the `--with-zmq` option.\n+\n+#### Other\n+* librsvg is only needed if you need to run `make deploy` on (cross-compilation to) macOS."
      },
      {
        "sha": "dbdac2c5b65c3cf552fdb44da4f4f78c742ca79d",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 109,
        "deletions": 38,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,11 +1,18 @@\n # Support for Output Descriptors in Bitcoin Core\n \n-Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n-`scantxoutset` RPC call. This is a simple language which can be used to\n-describe collections of output scripts.\n-\n-This document describes the language. For the specifics on usage for scanning\n-the UTXO set, see the `scantxoutset` RPC help.\n+Since Bitcoin Core v0.17, there is support for Output Descriptors. This is a\n+simple language which can be used to describe collections of output scripts.\n+Supporting RPCs are:\n+- `scantxoutset` takes as input descriptors to scan for, and also reports\n+  specialized descriptors for the matching UTXOs.\n+- `getdescriptorinfo` analyzes a descriptor, and reports a canonicalized version\n+  with checksum added.\n+- `deriveaddresses` takes as input a descriptor and computes the corresponding\n+  addresses.\n+- `listunspent` outputs a specialized descriptor for the reported unspent outputs.\n+\n+This document describes the language. For the specifics on usage, see the RPC\n+documentation for the functions mentioned above.\n \n ## Features\n \n@@ -22,23 +29,24 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n-Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+Descriptors consist of several types of expressions. The top level expression is either a `SCRIPT`, or `SCRIPT#CHECKSUM` where `CHECKSUM` is an 8-character alphanumeric descriptor checksum.\n \n `SCRIPT` expressions:\n - `sh(SCRIPT)` (top level only): P2SH embed the argument.\n@@ -52,19 +60,26 @@ Descriptors consist of several types of expressions. The top level expression is\n - `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n \n `KEY` expressions:\n-- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n-  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n-- [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n--`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n-  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n-  - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n-  - The usage of hardened derivation steps requires providing the private key.\n-  - Instead of a `'`, the suffix `h` can be used to denote hardened derivation.\n+- Optionally, key origin information, consisting of:\n+  - An open bracket `[`\n+  - Exactly 8 hex characters for the fingerprint of the key where the derivation starts (see BIP32 for details)\n+  - Followed by zero or more `/NUM` or `/NUM'` path elements to indicate unhardened or hardened derivation steps between the fingerprint and the key or xpub/xprv root that follows\n+  - A closing bracket `]`\n+- Followed by the actual key, which is either:\n+  - Hex encoded public keys (either 66 characters starting with `02` or `03` for a compressed pubkey, or 130 characters starting with `04` for an uncompressed pubkey).\n+    - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+  - `xpub` encoded extended public key or `xprv` encoded extended private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+    - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+    - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n+    - The usage of hardened derivation steps requires providing the private key.\n+\n+(Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.)\n \n `ADDR` expressions are any type of supported address:\n-- P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n-- P2SH addresses (base58, of the form `3...`, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n-- Segwit addresses (bech32, of the form `bc1...`, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n+- P2PKH addresses (base58, of the form `1...` for mainnet or `[nm]...` for testnet). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n+- P2SH addresses (base58, of the form `3...` for mainnet or `2...` for testnet, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n+- Segwit addresses (bech32, of the form `bc1...` for mainnet or `tb1...` for testnet, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n \n ## Explanation\n \n@@ -76,10 +91,9 @@ imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\n P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n \n To describe these, we model these as functions. The functions `pk`\n-(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in\n-hexadecimal notation (which will be extended later), and return the\n+(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a `KEY` expression, and return the\n corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH)\n-take as input a script, and return the script describing P2SH and P2WSH\n+take as input a `SCRIPT` expression, and return the script describing P2SH and P2WSH\n outputs with the input as embedded script. The names of the functions do\n not contain \"p2\" for brevity.\n \n@@ -88,9 +102,18 @@ not contain \"p2\" for brevity.\n Several pieces of software use multi-signature (multisig) scripts based\n on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n*\n-multisig policy, where any *k* out of the *n* provided public keys must\n+multisig policy, where any *k* out of the *n* provided `KEY` expressions must\n sign.\n \n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,12 +124,43 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n key.\n \n+### Key origin identification\n+\n+In order to describe scripts whose signing keys reside on another device,\n+it may be necessary to identify the master key and derivation path an\n+xpub was derived with.\n+\n+For example, when following BIP44, it would be useful to describe a\n+change chain directly as `xpub.../44'/0'/0'/1/*` where `xpub...`\n+corresponds with the master key `m`. Unfortunately, since there are\n+hardened derivation steps that follow the xpub, this descriptor does not\n+let you compute scripts without access to the corresponding private keys.\n+Instead, it should be written as `xpub.../1/*`, where xpub corresponds to\n+`m/44'/0'/0'`.\n+\n+When interacting with a hardware device, it may be necessary to include\n+the entire path from the master down. [BIP174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) standardizes this by\n+providing the master key *fingerprint* (first 32 bit of the Hash160 of\n+the master pubkey), plus all derivation steps. To support constructing\n+these, we permit providing this key origin information inside the\n+descriptor language, even though it does not affect the actual\n+scriptPubKeys it refers to.\n+\n+Every public key can be prefixed by an 8-character hexadecimal\n+fingerprint plus optional derivation steps (hardened and unhardened)\n+surrounded by brackets, identifying the master and derivation path the key or xpub\n+that follows was derived with.\n+\n+Note that the fingerprint of the parent only serves as a fast way to detect\n+parent and child nodes in software, and software must be willing to deal with\n+collisions.\n+\n ### Including private keys\n \n Often it is useful to communicate a description of scripts along with the\n@@ -119,6 +173,23 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n+provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n+\n+### Checksums\n+\n+Descriptors can optionally be suffixed with a checksum to protect against\n+typos or copy-paste errors.\n+\n+These checksums consist of 8 alphanumeric characters. As long as errors are\n+restricted to substituting characters in `0123456789()[],'/*abcdefgh@:$%{}`\n+for others in that set and changes in letter case, up to 4 errors will always\n+be detected in descriptors up to 501 characters, and up to 3 errors in longer\n+ones. For larger numbers of errors, or other types of errors, there is a\n+roughly 1 in a trillion chance of not detecting the errors.\n+\n+All RPCs in Bitcoin Core will include the checksum in their output. Only\n+certain RPCs require checksums on input, including `deriveaddress` and\n+`importmulti`. The checksum for a descriptor without one can be computed\n+using the `getdescriptorinfo` RPC."
      },
      {
        "sha": "cf071167c4513350e91d02c341042ada609d716d",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 132,
        "deletions": 71,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,8 +7,8 @@ Developer Notes\n - [Developer Notes](#developer-notes)\n     - [Coding Style (General)](#coding-style-general)\n     - [Coding Style (C++)](#coding-style-c)\n-    - [Doxygen comments](#doxygen-comments)\n     - [Coding Style (Python)](#coding-style-python)\n+    - [Coding Style (Doxygen-compatible comments)](#coding-style-doxygen-compatible-comments)\n     - [Development tips and tricks](#development-tips-and-tricks)\n         - [Compiling for debugging](#compiling-for-debugging)\n         - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n@@ -17,6 +17,7 @@ Developer Notes\n         - [DEBUG_LOCKORDER](#debug_lockorder)\n         - [Valgrind suppressions file](#valgrind-suppressions-file)\n         - [Compiling for test coverage](#compiling-for-test-coverage)\n+        - [Performance profiling with perf](#performance-profiling-with-perf)\n     - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n     - [Threads](#threads)\n     - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n@@ -28,11 +29,14 @@ Developer Notes\n     - [Strings and formatting](#strings-and-formatting)\n     - [Variable names](#variable-names)\n     - [Threads and synchronization](#threads-and-synchronization)\n+    - [Scripts](#scripts)\n+        - [Shebang](#shebang)\n     - [Source code organization](#source-code-organization)\n     - [GUI](#gui)\n     - [Subtrees](#subtrees)\n     - [Git and GitHub tips](#git-and-github-tips)\n     - [Scripted diffs](#scripted-diffs)\n+    - [Release notes](#release-notes)\n     - [RPC interface guidelines](#rpc-interface-guidelines)\n \n <!-- markdown-toc end -->\n@@ -69,7 +73,7 @@ tool to clean up patches automatically before submission.\n - **Symbol naming conventions**. These are preferred in new code, but are not\n required when doing so would need changes to significant pieces of existing\n code.\n-  - Variable and namespace names are all lowercase, and may use `_` to\n+  - Variable (including function arguments) and namespace names are all lowercase, and may use `_` to\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n@@ -118,10 +122,17 @@ public:\n } // namespace foo\n ```\n \n-Doxygen comments\n------------------\n+Coding Style (Python)\n+---------------------\n+\n+Refer to [/test/functional/README.md#style-guidelines](/test/functional/README.md#style-guidelines).\n+\n+Coding Style (Doxygen-compatible comments)\n+------------------------------------------\n \n-To facilitate the generation of documentation, use doxygen-compatible comment blocks for functions, methods and fields.\n+Bitcoin Core uses [Doxygen](http://www.doxygen.nl/) to generate its official documentation.\n+\n+Use Doxygen-compatible comment blocks for functions, methods, and fields.\n \n For example, to describe a function use:\n ```c++\n@@ -133,7 +144,7 @@ For example, to describe a function use:\n  */\n bool function(int arg1, const char *arg2)\n ```\n-A complete list of `@xxx` commands can be found at http://www.stack.nl/~dimitri/doxygen/manual/commands.html.\n+A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n@@ -154,7 +165,7 @@ int var; //!< Detailed description after the member\n ```\n \n or\n-```cpp\n+```c++\n //! Description before the member\n int var;\n ```\n@@ -174,15 +185,15 @@ Not OK (used plenty in the current source, but not picked up):\n //\n ```\n \n-A full list of comment syntaxes picked up by doxygen can be found at http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n-but if possible use one of the above styles.\n-\n-Documentation can be generated with `make docs` and cleaned up with `make clean-docs`.\n+A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n+but the above styles are favored.\n \n-Coding Style (Python)\n----------------------\n+Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage.\n \n-Refer to [/test/functional/README.md#style-guidelines](/test/functional/README.md#style-guidelines).\n+Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on MacOS via Homebrew:\n+```\n+brew install doxygen --with-graphviz\n+```\n \n Development tips and tricks\n ---------------------------\n@@ -255,6 +266,51 @@ make cov\n # A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n ```\n \n+### Performance profiling with perf\n+\n+Profiling is a good way to get a precise idea of where time is being spent in\n+code. One tool for doing profiling on Linux platforms is called\n+[`perf`](http://www.brendangregg.com/perf.html), and has been integrated into\n+the functional test framework. Perf can observe a running process and sample\n+(at some frequency) where its execution is.\n+\n+Perf installation is contingent on which kernel version you're running; see\n+[this StackExchange\n+thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n+for specific instructions.\n+\n+Certain kernel parameters may need to be set for perf to be able to inspect the\n+running process' stack.\n+\n+```sh\n+$ sudo sysctl -w kernel.perf_event_paranoid=-1\n+$ sudo sysctl -w kernel.kptr_restrict=0\n+```\n+\n+Make sure you [understand the security\n+trade-offs](https://lwn.net/Articles/420403/) of setting these kernel\n+parameters.\n+\n+To profile a running bitcoind process for 60 seconds, you could use an\n+invocation of `perf record` like this:\n+\n+```sh\n+$ perf record \\\n+    -g --call-graph dwarf --per-thread -F 140 \\\n+    -p `pgrep bitcoind` -- sleep 60\n+```\n+\n+You could then analyze the results by running\n+\n+```sh\n+perf report --stdio | c++filt | less\n+```\n+\n+or using a graphical tool like [Hotspot](https://github.com/KDAB/hotspot).\n+\n+See the functional test documentation for how to invoke perf within tests.\n+\n+\n **Sanitizers**\n \n Bitcoin Core can be compiled with various \"sanitizers\" enabled, which add\n@@ -439,6 +495,11 @@ General C++\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n+- Use `MakeUnique()` to construct objects owned by `unique_ptr`s\n+\n+  - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n+    `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n+\n C++ data structures\n --------------------\n \n@@ -512,7 +573,7 @@ Strings and formatting\n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues.\n \n - Avoid using locale dependent functions if possible. You can use the provided\n-  [`lint-locale-dependence.sh`](/contrib/devtools/lint-locale-dependence.sh)\n+  [`lint-locale-dependence.sh`](/test/lint/lint-locale-dependence.sh)\n   to check for accidental use of locale dependent functions.\n \n   - *Rationale*: Unnecessary locale dependence can cause bugs that are very tricky to isolate and fix.\n@@ -559,8 +620,8 @@ class AddressBookPage\n     Mode m_mode;\n }\n \n-AddressBookPage::AddressBookPage(Mode _mode) :\n-      m_mode(_mode)\n+AddressBookPage::AddressBookPage(Mode _mode)\n+    : m_mode(_mode)\n ...\n ```\n \n@@ -597,6 +658,31 @@ TRY_LOCK(cs_vNodes, lockNodes);\n }\n ```\n \n+Scripts\n+--------------------------\n+\n+### Shebang\n+\n+- Use `#!/usr/bin/env bash` instead of obsolete `#!/bin/bash`.\n+\n+  - [*Rationale*](https://github.com/dylanaraps/pure-bash-bible#shebang):\n+\n+    `#!/bin/bash` assumes it is always installed to /bin/ which can cause issues;\n+\n+    `#!/usr/bin/env bash` searches the user's PATH to find the bash binary.\n+\n+  OK:\n+\n+```bash\n+#!/usr/bin/env bash\n+```\n+\n+  Wrong:\n+\n+```bash\n+#!/bin/bash\n+```\n+\n Source code organization\n --------------------------\n \n@@ -700,16 +786,16 @@ Current subtrees include:\n   - Upstream at https://github.com/google/leveldb ; Maintained by Google, but\n     open important PRs to Core to avoid delay.\n   - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n-    merging upstream changes to the leveldb subtree.\n+    merging upstream changes to the LevelDB subtree.\n \n - src/libsecp256k1\n-  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintaned by Core contributors.\n+  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintained by Core contributors.\n \n - src/crypto/ctaes\n   - Upstream at https://github.com/bitcoin-core/ctaes ; actively maintained by Core contributors.\n \n - src/univalue\n-  - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n+  - Upstream at https://github.com/bitcoin-core/univalue ; actively maintained by Core contributors, deviates from upstream https://github.com/jgarzik/univalue\n \n Upgrading LevelDB\n ---------------------\n@@ -758,54 +844,6 @@ would be to revert the upstream fix before applying the updates to Bitcoin's\n copy of LevelDB. In general you should be wary of any upstream changes affecting\n what data is returned from LevelDB queries.\n \n-Git and GitHub tips\n----------------------\n-\n-- For resolving merge/rebase conflicts, it can be useful to enable diff3 style using\n-  `git config merge.conflictstyle diff3`. Instead of\n-\n-        <<<\n-        yours\n-        ===\n-        theirs\n-        >>>\n-\n-  you will see\n-\n-        <<<\n-        yours\n-        |||\n-        original\n-        ===\n-        theirs\n-        >>>\n-\n-  This may make it much clearer what caused the conflict. In this style, you can often just look\n-  at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n-\n-- When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes\n-  the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1`\n-  at the end of any URL which shows a diff.\n-\n-- When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead\n-  of showing the patch as deleted/added *lines*, show deleted/added *words*.\n-\n-- When reviewing patches that move code around, try using\n-  `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the\n-  moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may\n-  even work when combined with the `-w` or `--word-diff` options described above.\n-\n-- When looking at other's pull requests, it may make sense to add the following section to your `.git/config`\n-  file:\n-\n-        [remote \"upstream-pull\"]\n-                fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n-                url = git@github.com:bitcoin/bitcoin.git\n-\n-  This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n-  or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n-  `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n-\n Scripted diffs\n --------------\n \n@@ -822,10 +860,34 @@ To create a scripted-diff:\n     - `-BEGIN VERIFY SCRIPT-`\n     - `-END VERIFY SCRIPT-`\n \n-The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`\n+The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior when supplied\n+with a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\n+the first supplied argument to `git rev-list --reverse` to determine which commits to verify script-diffs for, ignoring\n+commits that don't conform to the commit message format described above.\n+\n+For development, it might be more convenient to verify all scripted-diffs in a range `A..B`, for example:\n+\n+```bash\n+test/lint/commit-script-check.sh origin/master..HEAD\n+```\n \n Commit [`bb81e173`](https://github.com/bitcoin/bitcoin/commit/bb81e173) is an example of a scripted-diff.\n \n+Release notes\n+-------------\n+\n+Release notes should be written for any PR that:\n+\n+- introduces a notable new feature\n+- fixes a significant bug\n+- changes an API or configuration model\n+- makes any other visible change to the end-user experience.\n+\n+Release notes should be added to a PR-specific release note file at\n+`/doc/release-notes-<PR number>.md` to avoid conflicts between multiple PRs.\n+All `release-notes*` files are merged into a single\n+[/doc/release-notes.md](/doc/release-notes.md) file prior to the release.\n+\n RPC interface guidelines\n --------------------------\n \n@@ -890,8 +952,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     from there.\n \n - A RPC method must either be a wallet method or a non-wallet method. Do not\n-  introduce new methods such as `signrawtransaction` that differ in behavior\n-  based on presence of a wallet.\n+  introduce new methods that differ in behavior based on presence of a wallet.\n \n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be"
      },
      {
        "sha": "85c27f3fd0bba6c967f44d162d44cc3d10b19af3",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,25 +1,26 @@\n-\n-* banlist.dat: stores the IPs/Subnets of banned nodes\n-* bitcoin.conf: contains configuration settings for bitcoind or bitcoin-qt\n-* bitcoind.pid: stores the process id of bitcoind while running\n-* blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n-* blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n-* blocks/index/*; block index (LevelDB); since 0.8.0\n-* chainstate/*; block chain state database (LevelDB); since 0.8.0\n-* database/*: BDB database environment; only used for wallet since 0.8.0; moved to wallets/ directory on new installs since 0.16.0\n-* db.log: wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n-* debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n-* fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n-* indexes/txindex/*: optional transaction index database (LevelDB); since 0.17.0\n-* mempool.dat: dump of the mempool's transactions; since 0.14.0.\n-* peers.dat: peer IP address database (custom format); since 0.7.0\n-* wallet.dat: personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0\n-* wallets/database/*: BDB database environment; used for wallets since 0.16.0\n-* wallets/db.log: wallet database log file; since 0.16.0\n-* wallets/wallet.dat: personal wallet (BDB) with keys and transactions; since 0.16.0\n-* .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n-* onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n-* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n+Filename            | Description\n+--------------------|----------------------------------------------------------------------------------------------------------------------------\n+banlist.dat         | stores the IPs/Subnets of banned nodes\n+bitcoin.conf        | contains configuration settings for bitcoind or bitcoin-qt\n+bitcoind.pid        | stores the process id of bitcoind while running\n+blocks/blk000??.dat | block data (custom, 128 MiB per file); since 0.8.0\n+blocks/rev000??.dat | block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n+blocks/index/*      | block index (LevelDB); since 0.8.0\n+chainstate/*        | blockchain state database (LevelDB); since 0.8.0\n+database/*          | BDB database environment; only used for wallet since 0.8.0; moved to wallets/ directory on new installs since 0.16.0\n+db.log              | wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n+debug.log           | contains debug information and general logging generated by bitcoind or bitcoin-qt\n+fee_estimates.dat   | stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+indexes/txindex/*   | optional transaction index database (LevelDB); since 0.17.0\n+mempool.dat         | dump of the mempool's transactions; since 0.14.0\n+peers.dat           | peer IP address database (custom format); since 0.7.0\n+wallet.dat          | personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0\n+wallets/database/*  | BDB database environment; used for wallets since 0.16.0\n+wallets/db.log      | wallet database log file; since 0.16.0\n+wallets/wallet.dat  | personal wallet (BDB) with keys and transactions; since 0.16.0\n+.cookie             | session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n+onion_private_key   | cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+guisettings.ini.bak | backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "f9221dde5bd9703cc6e1d536b874b55089800af4",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 54,
        "deletions": 29,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,12 +1,36 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness `test_bitcoin_fuzzy` is provided to provide an easy\n-entry point for fuzzers and the like. In this document we'll describe how to\n-use it with AFL.\n+A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n+provide an easy entry point for fuzzers and the like. In this document we'll\n+describe how to use it with AFL and libFuzzer.\n \n-Building AFL\n--------------\n+## Preparing fuzzing\n+\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+libFuzzer will use the input directory as output directory.\n+\n+Extract the example seeds (or other starting inputs) into the inputs\n+directory before starting fuzzing.\n+\n+```\n+git clone https://github.com/bitcoin-core/qa-assets\n+export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n+```\n+\n+Only for AFL:\n+\n+```\n+mkdir outputs\n+export AFLOUT=$PWD/outputs\n+```\n+\n+## AFL\n+\n+### Building AFL\n \n It is recommended to always use the latest version of afl:\n ```\n@@ -17,16 +41,15 @@ make\n export AFLPATH=$PWD\n ```\n \n-Instrumentation\n-----------------\n+### Instrumentation\n \n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n-make test/test_bitcoin_fuzzy\n+make\n ```\n We disable ccache because we don't want to pollute the ccache with instrumented\n objects, and similarly don't want to use non-instrumented cached objects linked\n@@ -35,38 +58,40 @@ in.\n The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n `afl-clang-fast++` in place of `afl-gcc` and `afl-g++` when compiling. When\n compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n-`test_bitcoin_fuzzy` binary will be instrumented in such a way that the AFL\n+binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n \n-Preparing fuzzing\n-------------------\n+### Fuzzing\n \n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n+To start the actual fuzzing use:\n \n ```\n-mkdir inputs\n-AFLIN=$PWD/inputs\n-mkdir outputs\n-AFLOUT=$PWD/outputs\n+export FUZZ_TARGET=fuzz_target_foo  # Pick a fuzz_target\n+mkdir ${AFLOUT}/${FUZZ_TARGET}\n+$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- test/fuzz/${FUZZ_TARGET}\n ```\n \n-Example inputs are available from:\n+You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n+will print an error and suggestion if so.\n \n-- https://download.visucore.com/bitcoin/bitcoin_fuzzy_in.tar.xz\n-- http://strateman.ninja/fuzzing.tar.xz\n+## libFuzzer\n \n-Extract these (or other starting inputs) into the `inputs` directory before starting fuzzing.\n+A recent version of `clang`, the address sanitizer and libFuzzer is needed (all\n+found in the `compiler-rt` runtime libraries package).\n \n-Fuzzing\n---------\n+To build all fuzz targets with libFuzzer, run\n \n-To start the actual fuzzing use:\n ```\n-$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/test_bitcoin_fuzzy\n+./configure --disable-ccache --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+make\n ```\n \n-You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n-will print an error and suggestion if so.\n+The fuzzer needs some inputs to work on, but the inputs or seeds can be used\n+interchangeably between libFuzzer and AFL.\n+\n+See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n+instrumented executable.\n+\n+Alternatively run the script in `./test/fuzz/test_runner.py` and provide it\n+with the `${DIR_FUZZ_IN}` created earlier."
      },
      {
        "sha": "a6c9bb94d8453061b9b52aefc317848e07109ef9",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -22,7 +22,7 @@ Configuration\n \n At a bare minimum, bitcoind requires that the rpcpassword setting be set\n when running as a daemon.  If the configuration file does not exist or this\n-setting is not set, bitcoind will shutdown promptly after startup.\n+setting is not set, bitcoind will shut down promptly after startup.\n \n This password does not have to be remembered or typed as it is mostly used\n as a fixed token that bitcoind and client programs read from the configuration\n@@ -56,7 +56,7 @@ All three configurations assume several paths that might need to be adjusted.\n Binary:              `/usr/bin/bitcoind`  \n Configuration file:  `/etc/bitcoin/bitcoin.conf`  \n Data directory:      `/var/lib/bitcoind`  \n-PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/var/lib/bitcoind/bitcoind.pid` (systemd)  \n+PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/run/bitcoind/bitcoind.pid` (systemd)\n Lock file:           `/var/lock/subsys/bitcoind` (CentOS)  \n \n The configuration file, PID directory (if applicable) and data directory\n@@ -65,6 +65,22 @@ reasons to make the configuration file and data directory only readable by the\n bitcoin user and group.  Access to bitcoin-cli and other bitcoind rpc clients\n can then be controlled by group membership.\n \n+NOTE: When using the systemd .service file, the creation of the aforementioned\n+directories and the setting of their permissions is automatically handled by\n+systemd. Directories are given a permission of 710, giving the bitcoin group\n+access to files under it _if_ the files themselves give permission to the\n+bitcoin group to do so (e.g. when `-sysperms` is specified). This does not allow\n+for the listing of files under the directory.\n+\n+NOTE: It is not currently possible to override `datadir` in\n+`/etc/bitcoin/bitcoin.conf` with the current systemd, OpenRC, and Upstart init\n+files out-of-the-box. This is because the command line options specified in the\n+init files take precedence over the configurations in\n+`/etc/bitcoin/bitcoin.conf`. However, some init systems have their own\n+configuration mechanisms that would allow for overriding the command line\n+options specified in the init files (e.g. setting `BITCOIND_DATADIR` for\n+OpenRC).\n+\n ### macOS\n \n Binary:              `/usr/local/bin/bitcoind`  "
      },
      {
        "sha": "9b36319e649e4a8a15912590671674180860885a",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,6 +8,10 @@ if ENABLE_QT\n   dist_man1_MANS+=bitcoin-qt.1\n endif\n \n-if BUILD_BITCOIN_UTILS\n-  dist_man1_MANS+=bitcoin-cli.1 bitcoin-tx.1\n+if BUILD_BITCOIN_CLI\n+  dist_man1_MANS+=bitcoin-cli.1\n+endif\n+\n+if BUILD_BITCOIN_TX\n+  dist_man1_MANS+=bitcoin-tx.1\n endif"
      },
      {
        "sha": "95c1d24dff0cc13d6b46728008564080ffe5674c",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,22 +1,26 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"February 2019\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.99.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.99.0\n .SH OPTIONS\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -59,7 +63,8 @@ Password for JSON\\-RPC connections\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n-Connect to JSON\\-RPC on <port> (default: 8332 or testnet: 18332)\n+Connect to JSON\\-RPC on <port> (default: 8332, testnet: 18332, regtest:\n+18443)\n .HP\n \\fB\\-rpcuser=\\fR<user>\n .IP\n@@ -72,20 +77,20 @@ Wait for RPC server to start\n \\fB\\-rpcwallet=\\fR<walletname>\n .IP\n Send RPC for non\\-default wallet on RPC server (needs to exactly match\n-corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n+corresponding \\fB\\-wallet\\fR option passed to bitcoind). This changes\n+the RPC endpoint used, e.g.\n+http://127.0.0.1:8332/wallet/<walletname>\n .HP\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP\n@@ -99,7 +104,7 @@ Chain selection options:\n .IP\n Use the test chain\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "052d420608338dbd2f0db17c5fb5331bba1912ce",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 39,
        "deletions": 35,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"February 2019\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.99.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.99.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -56,12 +56,13 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -108,7 +109,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR\n@@ -117,7 +118,9 @@ Rebuild chain state and block index from the blk*.dat files on disk\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n-Rebuild chain state from the currently indexed blocks\n+Rebuild chain state from the currently indexed blocks. When in pruning\n+mode or if blocks on disk might be corrupted, use full \\fB\\-reindex\\fR\n+instead.\n .HP\n \\fB\\-sysperms\\fR\n .IP\n@@ -157,7 +160,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -178,7 +181,7 @@ unless \\fB\\-connect\\fR used)\n .HP\n \\fB\\-enablebip61\\fR\n .IP\n-Send reject messages per BIP61 (default: 1)\n+Send reject messages per BIP61 (default: 0)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -221,8 +224,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -242,11 +245,13 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 8333, testnet: 18333,\n+regtest: 18444)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -393,8 +398,7 @@ Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n .IP\n Delete all wallet transactions and only recover those parts of the\n blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n-account owner and payment request information, 2 = drop tx meta\n-data)\n+payment request information, 2 = drop tx meta data)\n .PP\n ZeroMQ notification options:\n .HP\n@@ -418,7 +422,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -433,7 +437,7 @@ or more specified categories.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n-Show all debugging options (usage: \\fB\\-\\-help\\fR \\fB\\-help\\-debug\\fR)\n+Print help message with debugging options and exit\n .HP\n \\fB\\-logips\\fR\n .IP\n@@ -452,7 +456,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP\n@@ -496,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -529,21 +533,21 @@ option can be specified multiple times\n .HP\n \\fB\\-rpcauth=\\fR<userpw>\n .IP\n-Username and hashed password for JSON\\-RPC connections. The field\n-<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n+Username and HMAC\\-SHA\\-256 hashed password for JSON\\-RPC connections. The\n+field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n canonical python script is included in share/rpcauth. The client\n then connects normally using the\n rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n option can be specified multiple times\n .HP\n \\fB\\-rpcbind=\\fR<addr>[:port]\n .IP\n-Bind to given address to listen for JSON\\-RPC connections. This option is\n-ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is optional and\n-overrides \\fB\\-rpcport\\fR. Use [host]:port notation for IPv6. This\n-option can be specified multiple times (default: 127.0.0.1 and\n-::1 i.e., localhost, or if \\fB\\-rpcallowip\\fR has been specified,\n-0.0.0.0 and :: i.e., all addresses)\n+Bind to given address to listen for JSON\\-RPC connections. Do not expose\n+the RPC server to untrusted networks such as the public internet!\n+This option is ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is\n+optional and overrides \\fB\\-rpcport\\fR. Use [host]:port notation for\n+IPv6. This option can be specified multiple times (default:\n+127.0.0.1 and ::1 i.e., localhost)\n .HP\n \\fB\\-rpccookiefile=\\fR<loc>\n .IP\n@@ -556,8 +560,8 @@ Password for JSON\\-RPC connections\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n-Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet:\n-18332)\n+Listen for JSON\\-RPC connections on <port> (default: 8332, testnet:\n+18332, regtest: 18443)\n .HP\n \\fB\\-rpcserialversion\\fR\n .IP\n@@ -602,7 +606,7 @@ Set SSL root certificates for payment request (default: \\fB\\-system\\-\\fR)\n .IP\n Show splash screen on startup (default: 1)\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "6b6071d9b744c6c21923086773b5563585d6824e",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,21 +1,20 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"February 2019\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.99.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.99.0\n .SH OPTIONS\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-create\\fR\n .IP\n@@ -93,7 +92,7 @@ sign=SIGHASH\\-FLAGS\n .IP\n Add zero or more signatures to transaction. This command requires JSON\n registers:prevtxs=JSON object, privatekeys=JSON object. See\n-signrawtransaction docs for format of sighash flags, JSON\n+signrawtransactionwithkey docs for format of sighash flags, JSON\n objects.\n .PP\n Register Commands:\n@@ -106,7 +105,7 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "1cb8cdebcd3e533936120218d5d0243ef132b842",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,67 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n+.TH BITCOIN-WALLET \"1\" \"February 2019\" \"bitcoin-wallet v0.17.99.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-wallet \\- manual page for bitcoin-wallet v0.17.99.0\n+.SH DESCRIPTION\n+Bitcoin Core bitcoin\\-wallet version v0.17.99.0\n+.PP\n+wallet\\-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\n+By default wallet\\-tool will act on wallets in the default mainnet wallet directory in the datadir.\n+To change the target wallet, use the \\fB\\-datadir\\fR, \\fB\\-wallet\\fR and \\fB\\-testnet\\fR/\\-regtest arguments.\n+.SS \"Usage:\"\n+.IP\n+bitcoin\\-wallet [options] <command>\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+Print this help message and exit\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.HP\n+\\fB\\-wallet=\\fR<wallet\\-name>\n+.IP\n+Specify wallet name\n+.PP\n+Debugging/Testing options:\n+.HP\n+\\fB\\-debug=\\fR<category>\n+.IP\n+Output debugging information (default: 0).\n+.HP\n+\\fB\\-printtoconsole\\fR\n+.IP\n+Send trace/debug info to console (default: 1 when no \\fB\\-debug\\fR is true, 0\n+otherwise.\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.PP\n+Commands:\n+.IP\n+create\n+.IP\n+Create new wallet file\n+.IP\n+info\n+.IP\n+Get wallet info\n+.SH COPYRIGHT\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <https://opensource.org/licenses/MIT>\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "5e057d923f25e557ad60ddef314259d7c60b39b4",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 39,
        "deletions": 36,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"February 2019\" \"bitcoind v0.17.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.99.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.99.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -57,12 +56,13 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -109,7 +109,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR\n@@ -118,7 +118,9 @@ Rebuild chain state and block index from the blk*.dat files on disk\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n-Rebuild chain state from the currently indexed blocks\n+Rebuild chain state from the currently indexed blocks. When in pruning\n+mode or if blocks on disk might be corrupted, use full \\fB\\-reindex\\fR\n+instead.\n .HP\n \\fB\\-sysperms\\fR\n .IP\n@@ -158,7 +160,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -179,7 +181,7 @@ unless \\fB\\-connect\\fR used)\n .HP\n \\fB\\-enablebip61\\fR\n .IP\n-Send reject messages per BIP61 (default: 1)\n+Send reject messages per BIP61 (default: 0)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -222,8 +224,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -243,11 +245,13 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 8333, testnet: 18333,\n+regtest: 18444)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -394,8 +398,7 @@ Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n .IP\n Delete all wallet transactions and only recover those parts of the\n blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n-account owner and payment request information, 2 = drop tx meta\n-data)\n+payment request information, 2 = drop tx meta data)\n .PP\n ZeroMQ notification options:\n .HP\n@@ -419,7 +422,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -434,7 +437,7 @@ or more specified categories.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n-Show all debugging options (usage: \\fB\\-\\-help\\fR \\fB\\-help\\-debug\\fR)\n+Print help message with debugging options and exit\n .HP\n \\fB\\-logips\\fR\n .IP\n@@ -453,7 +456,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP\n@@ -497,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -530,21 +533,21 @@ option can be specified multiple times\n .HP\n \\fB\\-rpcauth=\\fR<userpw>\n .IP\n-Username and hashed password for JSON\\-RPC connections. The field\n-<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n+Username and HMAC\\-SHA\\-256 hashed password for JSON\\-RPC connections. The\n+field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n canonical python script is included in share/rpcauth. The client\n then connects normally using the\n rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n option can be specified multiple times\n .HP\n \\fB\\-rpcbind=\\fR<addr>[:port]\n .IP\n-Bind to given address to listen for JSON\\-RPC connections. This option is\n-ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is optional and\n-overrides \\fB\\-rpcport\\fR. Use [host]:port notation for IPv6. This\n-option can be specified multiple times (default: 127.0.0.1 and\n-::1 i.e., localhost, or if \\fB\\-rpcallowip\\fR has been specified,\n-0.0.0.0 and :: i.e., all addresses)\n+Bind to given address to listen for JSON\\-RPC connections. Do not expose\n+the RPC server to untrusted networks such as the public internet!\n+This option is ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is\n+optional and overrides \\fB\\-rpcport\\fR. Use [host]:port notation for\n+IPv6. This option can be specified multiple times (default:\n+127.0.0.1 and ::1 i.e., localhost)\n .HP\n \\fB\\-rpccookiefile=\\fR<loc>\n .IP\n@@ -557,8 +560,8 @@ Password for JSON\\-RPC connections\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n-Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet:\n-18332)\n+Listen for JSON\\-RPC connections on <port> (default: 8332, testnet:\n+18332, regtest: 18443)\n .HP\n \\fB\\-rpcserialversion\\fR\n .IP\n@@ -577,7 +580,7 @@ Username for JSON\\-RPC connections\n .IP\n Accept command line and JSON\\-RPC commands\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "a93228ebdb538fa20a3407246b6b5cf125321c55",
        "filename": "doc/productivity.md",
        "status": "added",
        "additions": 201,
        "deletions": 0,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,201 @@\n+Productivity Notes\n+==================\n+\n+Table of Contents\n+-----------------\n+\n+* [General](#general)\n+   * [Cache compilations with `ccache`](#cache-compilations-with-ccache)\n+   * [Disable features with `./configure`](#disable-features-with-configure)\n+   * [Make use of your threads with `make -j`](#make-use-of-your-threads-with-make--j)\n+   * [Only build what you need](#only-build-what-you-need)\n+   * [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n+* [Writing code](#writing-code)\n+   * [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n+   * [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n+* [Rebasing/Merging code](#rebasingmerging-code)\n+   * [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n+* [Reviewing code](#reviewing-code)\n+   * [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options)\n+   * [Reference PRs easily with `refspec`s](#reference-prs-easily-with-refspecs)\n+   * [Diff the diffs with `git range-diff`](#diff-the-diffs-with-git-range-diff)\n+\n+General\n+------\n+\n+### Cache compilations with `ccache`\n+\n+The easiest way to faster compile times is to cache compiles. `ccache` is a way to do so, from its description at the time of writing:\n+\n+> ccache is a compiler cache. It speeds up recompilation by caching the result of previous compilations and detecting when the same compilation is being done again. Supported languages are C, C++, Objective-C and Objective-C++.\n+\n+Install `ccache` through your distribution's package manager, and run `./configure` with your normal flags to pick it up.\n+\n+To use ccache for all your C/C++ projects, follow the symlinks method [here](https://ccache.samba.org/manual/latest.html#_run_modes) to set it up.\n+\n+To get the most out of ccache, put something like this in `~/.ccache/ccache.conf`:\n+\n+```\n+max_size = 50.0G  # or whatever cache size you prefer; default is 5G; 0 means unlimited\n+base_dir = /home/yourname  # or wherever you keep your source files\n+```\n+\n+Note: base_dir is required for ccache to share cached compiles of the same file across different repositories / paths; it will only do this for paths under base_dir. So this option is required for effective use of ccache with git worktrees (described below).\n+\n+You _must not_ set base_dir to \"/\", or anywhere that contains system headers (according to the ccache docs).\n+\n+### Disable features with `./configure`\n+\n+After running `./autogen.sh`, which generates the `./configure` file, use `./configure --help` to identify features that you can disable to save on compilation time. A few common flags:\n+\n+```sh\n+--without-miniupnpc\n+--disable-bench\n+--disable-wallet\n+--without-gui\n+```\n+\n+If you do need the wallet enabled, it is common for devs to add `--with-incompatible-bdb`. This uses your system bdb version for the wallet, so you don't have to find a copy of bdb 4.8. Wallets from such a build will be incompatible with any release binary (and vice versa), so use with caution on mainnet.\n+\n+### Make use of your threads with `make -j`\n+\n+If you have multiple threads on your machine, you can tell `make` to utilize all of them with:\n+\n+```sh\n+make -j\"$(($(nproc)+1))\"\n+```\n+\n+### Only build what you need\n+\n+When rebuilding during development, note that running `make`, without giving a target, will do a lot of work you probably don't need. It will build the GUI (unless you've disabled it) and all the tests (which take much longer to build than the app does).\n+\n+Obviously, it is important to build and run the tests at appropriate times -- but when you just want a quick compile to check your work, consider picking one or a set of build targets relevant to what you're working on, e.g.:\n+\n+```sh\n+make src/bitcoind src/bitcoin-cli\n+make src/qt/bitcoin-qt\n+make -C src bitcoin_bench\n+```\n+\n+(You can and should combine this with `-j`, as above, for a parallel build.)\n+\n+### Multiple working directories with `git worktrees`\n+\n+If you work with multiple branches or multiple copies of the repository, you should try `git worktrees`.\n+\n+To create a new branch that lives under a new working directory without disrupting your current working directory (useful for creating pull requests):\n+```sh\n+git worktree add -b my-shiny-new-branch ../living-at-my-new-working-directory based-on-my-crufty-old-commit-ish\n+```\n+\n+To simply check out a commit-ish under a new working directory without disrupting your current working directory (useful for reviewing pull requests):\n+```sh\n+git worktree add --checkout ../where-my-checkout-commit-ish-will-live my-checkout-commit-ish\n+```\n+\n+-----\n+\n+This synergizes well with [`ccache`](#cache-compilations-with-ccache) as objects resulting from unchanged code will most likely hit the cache and won't need to be recompiled.\n+\n+You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to refer to pull requests easier in the above `git worktree` commands.\n+\n+Writing code\n+------------\n+\n+### Format C/C++/Protobuf diffs with `clang-format-diff.py`\n+\n+See [contrib/devtools/README.md](/contrib/devtools/README.md#clang-format-diff.py).\n+\n+### Format Python diffs with `yapf-diff.py`\n+\n+Usage is exactly the same as [`clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n+\n+Rebasing/Merging code\n+-------------\n+\n+### More conflict context with `merge.conflictstyle diff3`\n+\n+For resolving merge/rebase conflicts, it can be useful to enable diff3 style using `git config merge.conflictstyle diff3`. Instead of\n+\n+```diff\n+<<<\n+yours\n+===\n+theirs\n+>>>\n+```\n+\n+  you will see\n+\n+```diff\n+<<<\n+yours\n+|||\n+original\n+===\n+theirs\n+>>>\n+```\n+\n+This may make it much clearer what caused the conflict. In this style, you can often just look at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n+\n+Reviewing code\n+--------------\n+\n+### Reduce mental load with `git diff` options\n+\n+When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1` at the end of any URL which shows a diff.\n+\n+When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead of showing the patch as deleted/added *lines*, show deleted/added *words*.\n+\n+When reviewing patches that move code around, try using `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may even work when combined with the `-w` or `--word-diff` options described above. `--color-moved=dimmed-zebra` will also dim the coloring of moved hunks in the diff on compatible terminals.\n+\n+### Reference PRs easily with `refspec`s\n+\n+When looking at other's pull requests, it may make sense to add the following section to your `.git/config` file:\n+\n+```\n+[remote \"upstream-pull\"]\n+        fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n+        url = git@github.com:bitcoin/bitcoin.git\n+```\n+\n+This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all` or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`, `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+### Diff the diffs with `git range-diff`\n+\n+It is very common for contributors to rebase their pull requests, or make changes to commits (perhaps in response to review) that are not at the head of their branch. This poses a problem for reviewers as when the contributor force pushes, the reviewer is no longer sure that his previous reviews of commits are still valid (as the commit hashes can now be different even though the diff is semantically the same). [git range-diff](https://git-scm.com/docs/git-range-diff) (Git >= 2.19) can help solve this problem by diffing the diffs.\n+\n+For example, to identify the differences between your previously reviewed diffs P1-5, and the new diffs P1-2,N3-4 as illustrated below:\n+```\n+       P1--P2--P3--P4--P5   <-- previously-reviewed-head\n+      /\n+...--m   <-- master\n+      \\\n+       P1--P2--N3--N4--N5   <-- new-head (with P3 slightly modified)\n+```\n+\n+You can do:\n+```sh\n+git range-diff master previously-reviewed-head new-head\n+```\n+\n+Note that `git range-diff` also work for rebases:\n+\n+```\n+       P1--P2--P3--P4--P5   <-- previously-reviewed-head\n+      /\n+...--m--m1--m2--m3   <-- master\n+                  \\\n+                   P1--P2--N3--N4  <-- new-head (with P3 modified, P4 & P5 squashed)\n+\n+PREV=P5 N=4 && git range-diff `git merge-base --all HEAD $PREV`...$PREV HEAD~$N...HEAD\n+```\n+\n+Where `P5` is the commit you last reviewed and `4` is the number of commits in the new version.\n+\n+-----\n+\n+`git range-diff` also accepts normal `git diff` options, see [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options) for useful `git diff` options.\n+\n+You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to refer to pull requests easier in the above `git range-diff` commands."
      },
      {
        "sha": "9d85af034812f7148fc67c91af740f0536b8be70",
        "filename": "doc/psbt.md",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -67,15 +67,25 @@ hardware implementations will typically implement multiple roles simultaneously.\n   input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n   it, and optionally signs inputs. Where possible it also finalizes the partial\n   signatures.\n+- **`utxoupdatepsbt` (Updater)** is a node RPC that takes a PSBT and updates it\n+  to include information available from the UTXO set (works only for SegWit\n+  inputs).\n - **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n   partial signatures, and if all inputs are finalized, converts the result to a\n   fully signed transaction which can be broadcast with `sendrawtransaction`.\n - **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n   can be used at any point in the workflow to merge information added to\n   different versions of the same PSBT. In particular it is useful to combine the\n   output of multiple Updaters or Signers.\n+- **`joinpsbts`** (Creator) is a utility RPC that joins multiple PSBTs together,\n+  concatenating the inputs and outputs. This can be used to construct CoinJoin\n+  transactions.\n - **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n   a PSBT in human-readable form, as well as compute its eventual fee if known.\n+- **`analyzepsbt`** is a utility RPC that examines an RPC and reports the\n+  next steps in the workflow if known, computes the fee of the resulting\n+  transaction, and estimates the weight and feerate if possible.\n+\n \n ### Workflows\n \n@@ -90,7 +100,7 @@ the command line in case `bitcoin-cli` is used.\n Setup:\n - All three call `getnewaddress` to create a new address; call these addresses\n   *Aalice*, *Abob*, and *Acarol*.\n-- All three call `getaddressinfo X`, with *X* their respective address, and\n+- All three call `getaddressinfo \"X\"`, with *X* their respective address, and\n   remember the corresponding public keys. Call these public keys *Kalice*,\n   *Kbob*, and *Kcarol*.\n - All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n@@ -105,28 +115,28 @@ Setup:\n   output. Again, it may be necessary to explicitly specify the addresstype\n   in order to get a result that matches. This command won't enable them to\n   initiate transactions later, however.\n-- They can now give out *D* as address others can pay to.\n+- They can now give out *Amulti* as address others can pay to.\n \n Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n move the coins in their entirety to address *Asend*, with no change. Alice\n does not need to be involved.\n - One of them - let's assume Carol here - initiates the creation. She runs\n-  `walletcreatefundedpsbt [] {\"Asend\":V} 0 false {\"subtractFeeFromOutputs\":[0], \"includeWatching\":true}`.\n-  We call the resulting PSBT *P*. P does not contain any signatures.\n+  `walletcreatefundedpsbt [] {\"Asend\":V} 0 {\"subtractFeeFromOutputs\":[0], \"includeWatching\":true}`.\n+  We call the resulting PSBT *P*. *P* does not contain any signatures.\n - Carol needs to sign the transaction herself. In order to do so, she runs\n-  `walletprocesspsbt P`, and gives the resulting PSBT *P2* to Bob.\n+  `walletprocesspsbt \"P\"`, and gives the resulting PSBT *P2* to Bob.\n - Bob inspects the PSBT using `decodepsbt \"P2\"` to determine if the transaction\n   has indeed just the expected input, and an output to *Asend*, and the fee is\n   reasonable. If he agrees, he calls `walletprocesspsbt \"P2\"` to sign. The\n   resulting PSBT *P3* contains both Carol's and Bob's signature.\n-- Now anyone can call `finalizepsbt \"P2\"` to extract a fully signed transaction\n+- Now anyone can call `finalizepsbt \"P3\"` to extract a fully signed transaction\n   *T*.\n - Finally anyone can broadcast the transaction using `sendrawtransaction \"T\"`.\n \n In case there are more signers, it may be advantageous to let them all sign in\n-parallel, rather passing the PSBT from one signer to the next one. In the\n+parallel, rather than passing the PSBT from one signer to the next one. In the\n above example this would translate to Carol handing a copy of *P* to each signer\n-separately. They can then all invoke `walletprocesspsbt P`, and end up with\n+separately. They can then all invoke `walletprocesspsbt \"P\"`, and end up with\n their individually-signed PSBT structures. They then all send those back to\n Carol (or anyone) who can combine them using `combinepsbt`. The last two steps\n (`finalizepsbt` and `sendrawtransaction`) remain unchanged."
      },
      {
        "sha": "18ea6f26d0e883e24dd8d8433be9f2c2c6d6e899",
        "filename": "doc/release-notes-14023.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/release-notes-14023.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/release-notes-14023.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14023.md?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,8 +0,0 @@\n-Account API removed\n--------------------\n-\n-The 'account' API was deprecated in v0.17 and has been fully removed in v0.18.\n-The 'label' API was introduced in v0.17 as a replacement for accounts.\n-\n-See the release notes from v0.17 for a full description of the changes from the\n-'account' API to the 'label' API."
      },
      {
        "sha": "d8cad369c5d9a85aea0c3f25048a8570405f1fbb",
        "filename": "doc/release-notes-14054.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-14054.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-14054.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14054.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,7 @@\n+P2P changes\n+-----------\n+\n+BIP 61 reject messages were deprecated in v0.18. They are now disabled by\n+default, but can be enabled by setting the `-enablebip61` command line option.\n+BIP 61 reject messages will be removed entirely in a future version of\n+Bitcoin Core."
      },
      {
        "sha": "49964d755059dafc7a67b45fa8d57ae9f8472ca7",
        "filename": "doc/release-notes-15566.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15566.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15566.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15566.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,3 @@\n+Miscellaneous CLI Changes\n+-------------------------\n+- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to `chain` and now returns the current network name as defined in BIP70 (main, test, regtest).\n\\ No newline at end of file"
      },
      {
        "sha": "bf89a70a4eb81ca393237112467675d3b78feab7",
        "filename": "doc/release-notes-15620.md",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15620.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15620.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15620.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,13 @@\n+Updated RPCs\n+------------\n+\n+* The -maxtxfee setting no longer has any effect on non-wallet RPCs.\n+\n+  The `sendrawtransaction` and `testmempoolaccept` RPC methods previously\n+  accepted an `allowhighfees` parameter to fail the mempool acceptance in case\n+  the transaction's fee would exceed the value of the command line argument\n+  `-maxtxfee`. To uncouple the RPCs from the global option, they now have a\n+  hardcoded default for the maximum transaction fee, that can be changed for\n+  both RPCs on a per-call basis with the `maxfeerate` parameter. The\n+  `allowhighfees` boolean option has been removed and replaced by the\n+  `maxfeerate` numeric option."
      },
      {
        "sha": "048d5e72185214d79585543eff1b3131f9d3588e",
        "filename": "doc/release-notes-15637.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15637.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15637.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15637.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,3 @@\n+RPC changes\n+-----------\n+In getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs, to be consistent with the returned value and other RPCs such as getrawtransaction, vsize has been added and size is now deprecated. size will only be returned if bitcoind is started with `-deprecatedrpc=size`.\n\\ No newline at end of file"
      },
      {
        "sha": "a1df31f2502a0609334eb6204714707ddc626b80",
        "filename": "doc/release-notes-15849.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15849.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes-15849.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15849.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,6 @@\n+Thread names in logs\n+--------------------\n+\n+On platforms supporting `thread_local`, log lines can be prefixed with the name\n+of the thread that caused the log. To enable this behavior, use\n+`-logthreadnames=1`."
      },
      {
        "sha": "0de0f563b1188097dce4bf187898386812a5e1b9",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 40,
        "deletions": 14,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -24,14 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but might take some time if the datadir needs to be migrated.  Old\n+wallet versions of Bitcoin Core are generally supported.\n \n Downgrading warning\n -------------------\n@@ -47,25 +42,56 @@ processing the entire blockchain.\n Compatibility\n ==============\n \n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n+Bitcoin Core is supported and extensively tested on operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer.  It is not recommended\n+to use Bitcoin Core on unsupported systems.\n \n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them.\n \n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n+From 0.17.0 onwards, macOS <10.10 is no longer supported.  0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10.  Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+In addition to previously-supported CPU platforms, this release's\n+pre-compiled distribution also provides binaries for the RISC-V\n+platform.\n \n Notable changes\n ===============\n \n-Example item\n+Updated RPCs\n ------------\n \n+Note: some low-level RPC changes mainly useful for testing are described in the\n+Low-level Changes section below.\n+\n+* The `sendmany` RPC had an argument `minconf` that was not well specified and\n+  would lead to RPC errors even when the wallet's coin selection would succeed.\n+  The `sendtoaddress` RPC never had this check, so to normalize the behavior,\n+  `minconf` is now ignored in `sendmany`. If the coin selection does not\n+  succeed due to missing coins, it will still throw an RPC error. Be reminded\n+  that coin selection is influenced by the `-spendzeroconfchange`,\n+  `-limitancestorcount`, `-limitdescendantcount` and `-walletrejectlongchains`\n+  command line arguments.\n+\n+\n+Low-level changes\n+=================\n+\n+Configuration\n+------------\n+\n+* An error is issued where previously a warning was issued when a setting in\n+  the config file was specified in the default section, but not overridden for\n+  the selected network. This change takes only effect if the selected network\n+  is not mainnet.\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "8259152f0ba1de062268f7da0d93a01cb9166e83",
        "filename": "doc/release-notes/release-notes-0.14.3.md",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.14.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.14.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.14.3.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,118 @@\n+Bitcoin Core version *0.14.3* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.14.3/>\n+\n+This is a new minor version release, including various bugfixes and\n+performance improvements.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later.\n+\n+Microsoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\n+No attempt is made to prevent installing or running the software on Windows XP, you\n+can still do so at your own risk but be aware that there are known instabilities and issues.\n+Please do not report issues about Windows XP to the issue tracker.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+Denial-of-Service vulnerability CVE-2018-17144\n+ -------------------------------\n+\n+A denial-of-service vulnerability exploitable by miners has been discovered in\n+Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of\n+the vulnerable versions to 0.14.3, 0.15.2 or 0.16.3 as soon as possible.\n+\n+Known Bugs\n+==========\n+\n+Since 0.14.0 the approximate transaction fee shown in Bitcoin-Qt when using coin\n+control and smart fee estimation does not reflect any change in target from the\n+smart fee slider. It will only present an approximate fee calculated using the\n+default target. The fee calculated using the correct target is still applied to\n+the transaction and shown in the final send confirmation dialog.\n+\n+0.14.3 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### Consensus\n+- #14247 `52965fb` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n+ \n+### RPC and other APIs\n+\n+- #10445 `87a21d5` Fix: make CCoinsViewDbCursor::Seek work for missing keys (Pieter Wuille, Gregory Maxwell)\n+- #9853 Return correct error codes in setban(), fundrawtransaction(), removeprunedfunds(), bumpfee(), blockchain.cpp (John Newbery)\n+\n+\n+### P2P protocol and network code\n+\n+- #10234 `d289b56` [net] listbanned RPC and QT should show correct banned subnets (John Newbery)\n+\n+### Build system\n+\n+\n+### Miscellaneous\n+\n+- #10451 `3612219` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (Luke Dashjr)\n+- #10250 `e23cef0` Fix some empty vector references (Pieter Wuille)\n+- #10196 `d28d583` PrioritiseTransaction updates the mempool tx counter (Suhas Daftuar)\n+- #9497 `e207342` Fix CCheckQueue IsIdle (potential) race condition and remove dangerous constructors. (Jeremy Rubin)\n+\n+### GUI\n+\n+- #9481 `7abe7bb` Give fallback fee a reasonable indent (Luke Dashjr)\n+- #9481 `3e4d7bf` Qt/Send: Figure a decent warning colour from theme (Luke Dashjr)\n+- #9481 `e207342` Show more significant warning if we fall back to the default fee (Jonas Schnelli)\n+\n+### Wallet\n+\n+- #10308 `28b8b8b` Securely erase potentially sensitive keys/values (tjps)\n+- #10265 `ff13f59` Make sure pindex is non-null before possibly referencing in LogPrintf call. (Karl-Johan Alm)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Cory Fields\n+- CryptAxe\n+- fanquake\n+- Jeremy Rubin\n+- John Newbery\n+- Jonas Schnelli\n+- Gregory Maxwell\n+- Karl-Johan Alm\n+- Luke Dashjr\n+- MarcoFalke\n+- Matt Corallo\n+- Mikerah\n+- Pieter Wuille\n+- practicalswift\n+- Suhas Daftuar\n+- Thomas Snider\n+- Tjps\n+- Wladimir J. van der Laan\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+"
      },
      {
        "sha": "1f5827905120efd902472fbb0dba39b19be3c68f",
        "filename": "doc/release-notes/release-notes-0.15.2.md",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.15.2.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.15.2.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.2.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,118 @@\n+Bitcoin Core version *0.15.2* is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.2/>\n+\n+This is a new minor version release, including various bugfixes and\n+performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or higher, your chainstate database will\n+be converted to a new format, which will take anywhere from a few minutes to\n+half an hour, depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15 or upgrade to version 0.15 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+\n+Notable changes\n+===============\n+\n+Denial-of-Service vulnerability CVE-2018-17144\n+-------------------------------\n+\n+A denial-of-service vulnerability exploitable by miners has been discovered in\n+Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of\n+the vulnerable versions to 0.15.2 or 0.16.3 as soon as possible.\n+\n+0.15.2 Change log\n+=================\n+\n+### Build system\n+\n+- #11995 `9bb1a16` depends: Fix Qt build with XCode 9.2(fanquake)\n+- #12946 `93b9a61` depends: Fix Qt build with XCode 9.3(fanquake)\n+- #13544 `9fd3e00` depends: Update Qt download url (fanquake)\n+- #11847 `cb7ef31` Make boost::multi_index comparators const (sdaftuar)\n+\n+### Consensus\n+- #14247 `4b8a3f5` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n+ \n+### RPC\n+- #11676 `7af2457` contrib/init: Update openrc-run filename (Luke Dashjr)\n+- #11277 `7026845` Fix uninitialized URI in batch RPC requests (Russell Yanofsky)\n+ \n+### Wallet\n+- #11289 `3f1db56` Wrap dumpwallet warning and note scripts aren't dumped (MeshCollider)\n+- #11289 `42ea47d` Add wallet backup text to import*, add* and dumpwallet RPCs (MeshCollider)\n+- #11590 `6372a75` [Wallet] always show help-line of wallet encryption calls (Jonas Schnelli)\n+\n+### bitcoin-tx\n+\n+- #11554 `a69cc07` Sanity-check script sizes in bitcoin-tx (TheBlueMatt)\n+\n+### Tests\n+- #11277 `3a6cdd4` Add test for multiwallet batch RPC calls (Russell Yanofsky)\n+- #11647 `1c8c7f8` Add missing batch rpc calls to python coverage logs (Russell Yanofsky)\n+- #11277 `1036c43` Add missing multiwallet rpc calls to python coverage logs (Russell Yanofsky)\n+- #11277 `305f768` Limit AuthServiceProxyWrapper.\\_\\_getattr\\_\\_ wrapping (Russell Yanofsky)\n+- #11277 `2eea279` Make AuthServiceProxy.\\_batch method usable (Russell Yanofsky)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- fanquake\n+- Jonas Schnelli\n+- Luke Dashjr\n+- Matt Corallo\n+- MeshCollider\n+- Russell Yanofsky\n+- Suhas Daftuar\n+- Wladimir J. van der Laan\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+"
      },
      {
        "sha": "2e52d309c2324dbb51c76ce0ade4ea363b3d766b",
        "filename": "doc/release-notes/release-notes-0.16.3.md",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.16.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.16.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.16.3.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,88 @@\n+Bitcoin Core version 0.16.3 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.16.3/>\n+\n+This is a new minor version release, with various bugfixes.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading\n+directly from 0.7.x and earlier without re-downloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+Wallets created in 0.16 and later are not compatible with versions prior to 0.16\n+and will not work if you try to use newly created wallets in older versions. Existing\n+wallets that were created with older versions are not affected by this.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+Denial-of-Service vulnerability\n+-------------------------------\n+\n+A denial-of-service vulnerability (CVE-2018-17144) exploitable by miners has\n+been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended\n+to upgrade any of the vulnerable versions to 0.16.3 as soon as possible.\n+\n+0.16.3 change log\n+------------------\n+\n+### Consensus\n+- #14249 `696b936` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n+\n+### RPC and other APIs\n+- #13547 `212ef1f` Make `signrawtransaction*` give an error when amount is needed but missing (ajtowns)\n+\n+### Miscellaneous\n+- #13655 `1cdbea7` bitcoinconsensus: invalid flags error should be set to `bitcoinconsensus_err` (afk11)\n+\n+### Documentation\n+- #13844 `11b9dbb` correct the help output for -prune (hebasto)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Anthony Towns\n+- Hennadii Stepanov\n+- Matt Corallo\n+- Suhas Daftuar\n+- Thomas Kerin\n+- Wladimir J. van der Laan\n+\n+And to those that reported security issues:\n+\n+- (anonymous reporter)\n+"
      },
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes/release-notes-0.17.0.1.md",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.0.1.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,41 @@\n+Bitcoin Core version 0.17.0.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n+\n+This release provides a minor bug fix for 0.17.0.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+Notable changes\n+===============\n+\n+An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n+which could cause Finder to crash on install.\n+\n+There are no significant changes for other operating systems.\n+\n+0.17.0.1 change log\n+===================\n+\n+### Build system\n+- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+\n+### Documentation\n+- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Jonas Schnelli\n+- Pieter Wuille\n+- Sjors Provoost\n+- Wladimir J. van der Laan\n+"
      },
      {
        "sha": "418d7ba5f9b9d7a2d9b7ec884aae8e26ad8a2b23",
        "filename": "doc/release-notes/release-notes-0.17.0.md",
        "status": "added",
        "additions": 1105,
        "deletions": 0,
        "changes": 1105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.0.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,1105 @@\n+Bitcoin Core version 0.17.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n+support versions of macOS older than 10.10.\n+\n+Known issues\n+============\n+\n+- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n+\n+- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+\n+Notable changes\n+===============\n+\n+Changed configuration options\n+-----------------------------\n+\n+- `-includeconf=<file>` can be used to include additional configuration files.\n+  Only works inside the `bitcoin.conf` file, not inside included files or from\n+  command-line. Multiple files may be included. Can be disabled from command-\n+  line via `-noincludeconf`. Note that multi-argument commands like\n+  `-includeconf` will override preceding `-noincludeconf`, i.e.\n+  ```\n+  noincludeconf=1\n+  includeconf=relative.conf\n+  ```\n+\n+  as bitcoin.conf will still include `relative.conf`.\n+\n+GUI changes\n+-----------\n+\n+- Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n+\n+External wallet files\n+---------------------\n+\n+The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n+to be located in the -walletdir directory.\n+\n+Newly created wallet format\n+---------------------------\n+\n+If `-wallet=<path>` is specified with a path that does not exist, it will now\n+create a wallet directory at the specified location (containing a wallet.dat\n+data file, a db.log file, and database/log.?????????? files) instead of just\n+creating a data file at the path and storing log files in the parent\n+directory. This should make backing up wallets more straightforward than\n+before because the specified wallet path can just be directly archived without\n+having to look in the parent directory for transaction log files.\n+\n+For backwards compatibility, wallet paths that are names of existing data files\n+in the `-walletdir` directory will continue to be accepted and interpreted the\n+same as before.\n+\n+Dynamic loading and creation of wallets\n+---------------------------------------\n+\n+Previously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n+\n+- Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n+- New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n+- Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n+\n+This feature is currently only available through the RPC interface.\n+\n+Coin selection\n+--------------\n+\n+### Partial spend avoidance\n+\n+When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n+\n+Configuration sections for testnet and regtest\n+----------------------------------------------\n+\n+It is now possible for a single configuration file to set different\n+options for different networks. This is done by using sections or by\n+prefixing the option with the network, such as:\n+\n+    main.uacomment=bitcoin\n+    test.uacomment=bitcoin-testnet\n+    regtest.uacomment=regtest\n+    [main]\n+    mempoolsize=300\n+    [test]\n+    mempoolsize=100\n+    [regtest]\n+    mempoolsize=20\n+\n+If the following options are not in a section, they will only apply to mainnet:\n+`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n+The options to choose a network (`regtest=` and `testnet=`) must be specified\n+outside of sections.\n+\n+'label' and 'account' APIs for wallet\n+-------------------------------------\n+\n+A new 'label' API has been introduced for the wallet. This is intended as a\n+replacement for the deprecated 'account' API. The 'account' can continue to\n+be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n+argument, and will be fully removed in V0.18.\n+\n+The label RPC methods mirror the account functionality, with the following functional differences:\n+\n+- Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n+- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n+- There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n+- Labels do not have a balance.\n+\n+Here are the changes to RPC methods:\n+\n+| Deprecated Method       | New Method            | Notes       |\n+| :---------------------- | :-------------------- | :-----------|\n+| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n+| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n+| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n+| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n+| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n+| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n+| `move`                  | n/a                   | _no replacement_ |\n+| `sendfrom`              | n/a                   | _no replacement_ |\n+| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n+\n+| Changed Method         | Notes   |\n+| :--------------------- | :------ |\n+| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n+| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n+| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n+| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n+| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n+| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n+\n+BIP 174 Partially Signed Bitcoin Transactions support\n+-----------------------------------------------------\n+\n+[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+Upgrading non-HD wallets to HD wallets\n+--------------------------------------\n+\n+Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n+\n+Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n+\n+HD Master key rotation\n+----------------------\n+\n+A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n+\n+Low-level RPC changes\n+---------------------\n+\n+- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n+  that match certain output descriptors. Refer to the [output descriptors\n+  reference documentation](/doc/descriptors.md) for more details. This call\n+  is similar to `listunspent` but does not use a wallet, meaning that the\n+  wallet can be disabled at compile or run time. This call is experimental,\n+  as such, is subject to changes or removal in future releases.\n+\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n+- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- JSON transaction decomposition now includes a `weight` field which provides\n+  the transaction's exact weight. This is included in REST /rest/tx/ and\n+  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n+  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n+  `getrawtransaction` RPC commands.\n+- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n+   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n+   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n+   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n+- The new RPC `getzmqnotifications` returns information about active ZMQ\n+  notifications.\n+- When bitcoin is not started with any `-wallet=<path>` options, the name of\n+  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n+  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n+  with any `-wallet=<path>` options, there is no change in behavior, and the\n+  name of any wallet is just its `<path>` string.\n+- Passing an empty string (`\"\"`) as the `address_type` parameter to\n+  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n+  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n+  to using the default address type. It is still possible to pass null or leave\n+  the parameter unset to use the default address type.\n+\n+- Bare multisig outputs to our keys are no longer automatically treated as\n+  incoming payments. As this feature was only available for multisig outputs for\n+  which you had all private keys in your wallet, there was generally no use for\n+  them compared to single-key schemes. Furthermore, no address format for such\n+  outputs is defined, and wallet software can't easily send to it. These outputs\n+  will no longer show up in `listtransactions`, `listunspent`, or contribute to\n+  your balance, unless they are explicitly watched (using `importaddress` or\n+  `importmulti` with hex script argument). `signrawtransaction*` also still\n+  works for them.\n+\n+- The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n+- The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n+\n+- Parts of the `validateaddress` RPC method have been deprecated and moved to\n+  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n+  this information before upgrading to v0.18. The following deprecated fields\n+  have moved to `getaddressinfo` and will only be shown with\n+  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n+  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n+  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n+  `signrawtransaction` in v0.17, restart bitcoind with\n+  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n+  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n+  upgrading to v0.18.\n+\n+Other API changes\n+-----------------\n+\n+- The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n+\n+### Logging\n+\n+- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n+\n+- When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n+  is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n+  disables logging to debug.log. Instead, logging to file can be explicitly disabled\n+  by setting `-debuglogfile=0`.\n+\n+Transaction index changes\n+-------------------------\n+\n+The transaction index is now built separately from the main node procedure,\n+meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n+is run with `-txindex` on a node that is already partially or fully synced\n+without one, the transaction index will be built in the background and become\n+available once caught up. When switching from running `-txindex` to running\n+without the flag, the transaction index database will *not* be deleted\n+automatically, meaning it could be turned back on at a later time without a full\n+resync.\n+\n+Miner block size removed\n+------------------------\n+\n+The `-blockmaxsize` option for miners to limit their blocks' sizes was\n+deprecated in V0.15.1, and has now been removed. Miners should use the\n+`-blockmaxweight` option if they want to limit the weight of their blocks.\n+\n+Python Support\n+--------------\n+\n+Support for Python 2 has been discontinued for all test files and tools.\n+\n+0.17.0 change log\n+=================\n+\n+### Consensus\n+- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n+\n+### Policy\n+- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n+- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n+- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n+\n+### Mining\n+- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n+- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n+\n+### Block and transaction handling\n+- #12225 `67447ba` Mempool cleanups (sdaftuar)\n+- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n+- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n+- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n+- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n+- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n+- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n+- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n+- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n+- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n+- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n+- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n+- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n+- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n+- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n+- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n+- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n+- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n+- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n+- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n+- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n+- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n+- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n+- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n+- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n+- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n+- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n+- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n+- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n+\n+### P2P protocol and network code\n+- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n+- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n+- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n+- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n+- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n+- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n+- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n+- #12855 `c199869` Minor accumulated cleanups (tjps)\n+- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n+- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n+- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n+- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n+- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n+- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n+- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n+- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n+- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n+- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n+- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n+- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n+- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n+- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n+- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n+- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n+\n+### Wallet\n+- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n+- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n+- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n+- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n+- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n+- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n+- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n+- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n+- #11687 `98bc27f` External wallet files (ryanofsky)\n+- #12658 `af88094` Sanitize some wallet serialization (sipa)\n+- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n+- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n+- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n+- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n+- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n+- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n+- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n+- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n+- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n+- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n+- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n+- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n+- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n+- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n+- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n+- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n+- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n+- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n+- #13017 `65d7083` Add wallets management functions (promag)\n+- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n+- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n+- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n+- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n+- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n+- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n+- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n+- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n+- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n+- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n+- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n+- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n+- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n+- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n+- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n+- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n+- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n+- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n+- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n+- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n+- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n+- #13111 `000abbb` Add unloadwallet RPC (promag)\n+- #13160 `868cf43` Unlock spent outputs (promag)\n+- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n+- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n+- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n+- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n+- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n+- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n+- #13566 `ad552a5` Fix get balance (jnewbery)\n+- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n+- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n+- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n+- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n+- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n+- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n+- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n+- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n+- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n+- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n+- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n+- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n+- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n+- #13666 `2115cba` Always create signatures with Low R values (achow101)\n+- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n+- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n+- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n+\n+### RPC and other APIs\n+- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n+- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n+- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n+- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n+- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n+- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n+- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n+- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n+- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n+- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n+- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n+- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n+- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n+- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n+- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n+- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n+- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n+- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n+- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n+- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n+- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n+- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n+- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n+- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n+- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n+- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n+- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n+- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n+- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n+- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n+- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n+- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n+- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n+- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n+- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n+- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n+- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n+- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n+\n+### GUI\n+- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n+- #11733 `e782099` Remove redundant locks (practicalswift)\n+- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n+- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n+- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n+- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n+- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n+- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n+- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n+- #12080 `56cc022` Add support to search the address book (promag)\n+- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n+- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n+- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n+- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n+- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n+- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n+- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n+- #13055 `bdda14d` Don't log to console by default (laanwj)\n+- #13141 `57c57df` fixes broken link on readme (marcoagner)\n+- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n+- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n+- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n+- #13264 `2a7c53b` Satoshi unit (GreatSock)\n+- #13097 `e545503` Support wallets loaded dynamically (promag)\n+- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n+- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n+- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n+- #13341 `25d2df2` Stop translating command line options (laanwj)\n+- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n+- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n+- #13458 `dc53f7f` Drop qt4 support (laanwj)\n+- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n+- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n+- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n+- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n+\n+### Build system\n+- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n+- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n+- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n+- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n+- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n+- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n+- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n+- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n+- #12373 `f13d756` Add build support for profiling (murrayn)\n+- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n+- #12607 `29fad97` Remove ccache (fanquake)\n+- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n+- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n+- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n+- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n+- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n+- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n+- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n+- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n+- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n+- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n+- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n+- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n+- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n+- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n+- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n+- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n+- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n+- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n+- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n+- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n+- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n+- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n+- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n+- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n+- #13543 `6c6a300` Add RISC-V support (laanwj)\n+- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n+- #13659 `90b1c7e` add missing leveldb defines (theuni)\n+- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n+- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n+- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n+- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n+- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n+- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n+- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n+- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n+- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n+- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n+- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n+- #13705 `b413ba0` Add format string linter (practicalswift)\n+- #14000 `48c8459` fix qt determinism (theuni)\n+- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n+- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n+- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n+\n+### Tests and QA\n+- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n+- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n+- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n+- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n+- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n+- #12425 `26dc2da` Add some script tests (richardkiss)\n+- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n+- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n+- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n+- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n+- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n+- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n+- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n+- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n+- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n+- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n+- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n+- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n+- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n+- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n+- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n+- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n+- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n+- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n+- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n+- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n+- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n+- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n+- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n+- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n+- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n+- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n+- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n+- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n+- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n+- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n+- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n+- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n+- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n+- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n+- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n+- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n+- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n+- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n+- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n+- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n+- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n+- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n+- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n+- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n+- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n+- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n+- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n+- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n+- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n+- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n+- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n+- #13051 `e074097` Normalize executable location (MarcoFalke)\n+- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n+- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n+- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n+- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n+- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n+- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n+- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n+- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n+- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n+- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n+- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n+- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n+- #12755 `612ba35` Better stderr testing (jnewbery)\n+- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n+- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n+- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n+- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n+- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n+- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n+- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n+- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n+- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n+- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n+- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n+- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n+- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n+- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n+- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n+- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n+- #13440 `5315660` Log as utf-8 (MarcoFalke)\n+- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n+- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n+- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n+- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n+- #13457 `b222138` Drop variadic macro (MarcoFalke)\n+- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n+- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n+- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n+- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n+- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n+- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n+- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n+- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n+- #13563 `b330f3f` bench: Simplify coinselection (promag)\n+- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n+- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n+- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n+- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n+- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n+- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n+- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n+- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n+- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n+- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n+- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n+- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n+- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n+- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n+- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n+- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n+- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n+- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n+- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n+- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n+- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n+- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n+- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n+- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n+- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n+- #13851 `9c4324d` fix locale for lint-shell (scravy)\n+- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n+- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n+- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n+- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n+- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n+- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n+- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n+- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n+- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n+- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n+- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n+- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n+- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n+- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n+\n+### Miscellaneous\n+- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n+- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n+- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n+- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n+- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n+- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n+- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n+- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n+- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n+- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n+- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n+- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n+- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n+- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n+- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n+- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n+- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n+- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n+- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n+- #11881 `624bee9` Remove Python2 support (jnewbery)\n+- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n+- #12829 `252c1b0` Python3 fixup (jnewbery)\n+- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n+- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n+- #12713 `4490871` Track negated options in the option parser (eklitzke)\n+- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n+- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n+- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n+- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n+- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n+- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n+- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n+- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n+- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n+- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n+- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n+- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n+- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n+- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n+- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n+- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n+- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n+- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n+- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n+- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n+- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n+- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n+- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n+- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n+- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n+- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n+- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n+- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n+- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n+- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n+- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n+- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n+- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n+- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n+- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n+- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n+- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n+- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n+- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n+- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n+- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n+- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n+- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n+- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n+- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n+- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n+- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n+- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n+- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n+- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n+- #11862 `4366f61` Network specific conf sections (ajtowns)\n+- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n+- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n+- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n+- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n+\n+### Documentation\n+- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n+- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n+- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n+- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n+- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n+- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n+- #11761 `89005dd` initial QT documentation (Sjors)\n+- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n+- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n+- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n+- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n+- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n+- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n+- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n+- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n+- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n+- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n+- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n+- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n+- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n+- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n+- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n+- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n+- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n+- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n+- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n+- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n+- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n+- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n+- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n+- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n+- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n+- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n+- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n+- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n+- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n+- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n+- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n+- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n+- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n+- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n+- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n+- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n+- #13369 `f8bcef3` update transifex doc link (mess110)\n+- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n+- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n+- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n+- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n+- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n+- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n+- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n+- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n+- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n+- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n+- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n+- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n+- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n+- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n+- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n+- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n+- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n+- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n+- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n+- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n+- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n+- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n+- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n+- #13853 `317477a` correct versions in dependencies.md (fanquake)\n+- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n+- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n+- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n+- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n+- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n+- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n+- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n+- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n+- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n+- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 251\n+- 532479301\n+- Aaron Clauson\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alex Morcos\n+- Alex Vear\n+- Alexey Ivanov\n+- Alin Rus\n+- Andrea Comand\n+- Andrew Chow\n+- Anthony Towns\n+- AtsukiTak\n+- Ben Woosley\n+- Bernhard M. Wiedemann\n+- Brandon Ruggles\n+- buddilla\n+- ccdle12\n+- Chris Moore\n+- Chun Kuan Lee\n+- Clem Taylor\n+- Conor Scott\n+- Conrado Gouvea\n+- Cory Fields\n+- Cristian Mircea Messel\n+- ctp-tsteenholdt\n+- Damian Williamson\n+- Dan Bolser\n+- Daniel Kraft\n+- Darko Jankovi\u0107\n+- DaveFromBinary\n+- David A. Harding\n+- DesWurstes\n+- Dimitris Apostolou\n+- donaloconnor\n+- Douglas Roark\n+- DrahtBot\n+- Drew Rasmussen\n+- e0\n+- Ernest Hemingway\n+- Ethan Heilman\n+- Evan Klitzke\n+- fanquake\n+- Felix Wolfsteller\n+- fivepiece\n+- Florian Schmaus\n+- Fuzzbawls\n+- Gabriel Davidian\n+- Giulio Lombardo\n+- Gleb\n+- Grady Laksmono\n+- GreatSock\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- Henrik Jonsson\n+- Indospace.io\n+- James O'Beirne\n+- Jan \u010capek\n+- Jeff Frontz\n+- Jeff Rade\n+- Jeremy Rubin\n+- JeremyRand\n+- Jesse Cohen\n+- Jim Posen\n+- joemphilips\n+- John Bampton\n+- John Newbery\n+- johnlow95\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Hartshorn\n+- Julian Fleischer\n+- kallewoof\n+- Karel Bilek\n+- Karl-Johan Alm\n+- Ken Lee\n+- Kevin Pan\n+- Kosta Zertsekel\n+- Kristaps Kaupe\n+- Kvaciral\n+- Lawrence Nahum\n+- Linrono\n+- lmanners\n+- Loganaden Velvindron\n+- Lowell Manners\n+- lucash.dev@gmail.com\n+- Luke Dashjr\n+- lutangar\n+- Marcin Jachymiak\n+- marcoagner\n+- MarcoFalke\n+- Mark Erhardt\n+- Mark Friedenbach\n+- Martin Ankerl\n+- Mason Simon\n+- Matt Corallo\n+- Matteo Sumberaz\n+- Max Kaplan\n+- MeshCollider\n+- Micha\u0142 Zabielski\n+- Mitchell Cash\n+- mruddy\n+- mryandao\n+- murrayn\n+- Nick Vercammen\n+- Nicolas Dorier\n+- Nikolay Mitev\n+- okayplanet\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Qasim Javed\n+- Randolf Richardson\n+- Richard Kiss\n+- Roman Zeyde\n+- Russell Yanofsky\n+- Samuel B. Atwood\n+- Sebastian Kung\n+- Sjors Provoost\n+- Steve Lee\n+- steverusso\n+- Suhas Daftuar\n+- Tamas Blummer\n+- TheCharlatan\n+- Thomas Kerin\n+- Thomas Snider\n+- Tim Ruffing\n+- Varunram\n+- Vasil Dimov\n+- Will Ayd\n+- William Robinson\n+- winder\n+- Wladimir J. van der Laan\n+- wodry\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "b1e50e03912d3fb837b75286e161ac8a9fb6d308",
        "filename": "doc/release-notes/release-notes-0.17.1.md",
        "status": "added",
        "additions": 168,
        "deletions": 0,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.17.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.1.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,168 @@\n+Bitcoin Core version 0.17.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n+\n+or through BitTorrent:\n+\n+    magnet:?xt=urn:btih:c56c87ccfaa8e6fbccc90d549121e61efd97cb6f&dn=bitcoin-core-0.17.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969    \n+\n+This is a new minor version release, with various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n+support versions of macOS older than 10.10.\n+\n+Notable changes\n+===============\n+\n+`listtransactions` label support\n+--------------------------------\n+\n+The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n+and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n+\n+When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n+a label/account/dummy argument will return both outgoing and incoming\n+transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n+incoming transactions (because it used to be possible to create transactions\n+spending from specific accounts, but this is no longer possible with labels).\n+\n+When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n+to list transactions that don't have any label. Without\n+`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n+only non-labeled transactions is not generally useful behavior and can cause\n+confusion.\n+\n+0.17.1 change log\n+=================\n+\n+### P2P protocol and network code\n+- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n+- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n+\n+### Wallet\n+- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n+- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n+- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n+- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n+- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n+- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n+- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n+- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n+\n+### RPC and other APIs\n+- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n+- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n+- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n+- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n+- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n+- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n+- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n+\n+### GUI\n+- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n+- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n+\n+### Build system\n+- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n+- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n+\n+### Tests and QA\n+- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n+- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n+- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n+- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n+- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n+- #14020 `24d796a` Add tests for RPC help (promag)\n+- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n+- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n+- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n+- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n+- #14632 `96f15e8` Fix a comment (fridokus)\n+- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n+- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n+\n+### Documentation\n+- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n+- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Andrew Chow\n+- Chun Kuan Lee\n+- David A. Harding\n+- Eric Scrivner\n+- fanquake\n+- fridokus\n+- Glenn Willen\n+- Gregory Sanders\n+- gustavonalle\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Kaz Wesley\n+- Kvaciral\n+- Luke Dashjr\n+- MarcoFalke\n+- MeshCollider\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Tim Ruffing\n+- Walter\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "3ca7d522430670b52f2a580005e23a5168a8734d",
        "filename": "doc/release-notes/release-notes-0.18.0.md",
        "status": "added",
        "additions": 1224,
        "deletions": 0,
        "changes": 1224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.18.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-notes/release-notes-0.18.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.18.0.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,1224 @@\n+Bitcoin Core version 0.18.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.18.0/>\n+\n+This is a new major version release, including new features, various bug\n+fixes and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has\n+completely shut down (which might take a few minutes for older\n+versions), then run the installer (on Windows) or just copy over\n+`/Applications/Bitcoin-Qt` (on Mac) or `bitcoind`/`bitcoin-qt` (on\n+Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database\n+will be converted to a new format, which will take anywhere from a few\n+minutes to half an hour, depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and\n+there is no automatic upgrade code from before version 0.8 to version\n+0.15.0 or later. Upgrading directly from 0.7.x and earlier without\n+redownloading the blockchain is not supported.  However, as usual, old\n+wallet versions are still supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not\n+recommended to use Bitcoin Core on unsupported systems.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+as frequently tested on them.\n+\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+In addition to previously-supported CPU platforms, this release's\n+pre-compiled distribution also provides binaries for the RISC-V\n+platform.\n+\n+If you are using the `systemd` unit configuration file located at\n+`contrib/init/bitcoind.service`, it has been changed to use\n+`/var/lib/bitcoind` as the data directory instead of\n+`~bitcoin/.bitcoin`. When switching over to the new configuration file,\n+please make sure that the filesystem on which `/var/lib/bitcoind` will\n+exist has enough space (check using `df -h /var/lib/bitcoind`), and\n+optionally copy over your existing data directory. See the [systemd init\n+file section](#systemd-init-file) for more details.\n+\n+Known issues\n+============\n+\n+Wallet GUI\n+----------\n+\n+For advanced users who have both (1) enabled coin control features, and\n+(2) are using multiple wallets loaded at the same time: The coin control\n+input selection dialog can erroneously retain wrong-wallet state when\n+switching wallets using the dropdown menu. For now, it is recommended\n+not to use coin control features with multiple wallets loaded.\n+\n+Notable changes\n+===============\n+\n+Mining\n+------\n+\n+- Calls to `getblocktemplate` will fail if the segwit rule is not\n+  specified.  Calling `getblocktemplate` without segwit specified is\n+  almost certainly a misconfiguration since doing so results in lower\n+  rewards for the miner.  Failed calls will produce an error message\n+  describing how to enable the segwit rule.\n+\n+Configuration option changes\n+----------------------------\n+\n+- A warning is printed if an unrecognized section name is used in the\n+  configuration file.  Recognized sections are `[test]`, `[main]`, and\n+  `[regtest]`.\n+\n+- Four new options are available for configuring the maximum number of\n+  messages that ZMQ will queue in memory (the \"high water mark\") before\n+  dropping additional messages.  The default value is 1,000, the same as\n+  was used for previous releases.  See the [ZMQ\n+  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/zmq.md#usage)\n+  for details.\n+\n+- The `rpcallowip` option can no longer be used to automatically listen\n+  on all network interfaces.  Instead, the `rpcbind` parameter must be\n+  used to specify the IP addresses to listen on.  Listening for RPC\n+  commands over a public network connection is insecure and should be\n+  disabled, so a warning is now printed if a user selects such a\n+  configuration.  If you need to expose RPC in order to use a tool like\n+  Docker, ensure you only bind RPC to your localhost, e.g. `docker run\n+  [...] -p 127.0.0.1:8332:8332` (this is an extra `:8332` over the\n+  normal Docker port specification).\n+\n+- The `rpcpassword` option now causes a startup error if the password\n+  set in the configuration file contains a hash character (#), as it's\n+  ambiguous whether the hash character is meant for the password or as a\n+  comment.\n+\n+- The `whitelistforcerelay` option is used to relay transactions from\n+  whitelisted peers even when not accepted to the mempool. This option\n+  now defaults to being off, so that changes in policy and\n+  disconnect/ban behavior will not cause a node that is whitelisting\n+  another to be dropped by peers.  Users can still explicitly enable\n+  this behavior with the command line option (and may want to consider\n+  [contacting](https://bitcoincore.org/en/contact/) the Bitcoin Core\n+  project to let us know about their use-case, as this feature could be\n+  deprecated in the future).\n+\n+systemd init file\n+-----------------\n+\n+The systemd init file (`contrib/init/bitcoind.service`) has been changed\n+to use `/var/lib/bitcoind` as the data directory instead of\n+`~bitcoin/.bitcoin`. This change makes Bitcoin Core more consistent with\n+other services, and makes the systemd init config more consistent with\n+existing Upstart and OpenRC configs.\n+\n+The configuration, PID, and data directories are now completely managed\n+by systemd, which will take care of their creation, permissions, etc.\n+See [`systemd.exec(5)`](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RuntimeDirectory=)\n+for more details.\n+\n+When using the provided init files under `contrib/init`, overriding the\n+`datadir` option in `/etc/bitcoin/bitcoin.conf` will have no effect.\n+This is because the command line arguments specified in the init files\n+take precedence over the options specified in\n+`/etc/bitcoin/bitcoin.conf`.\n+\n+\n+Documentation\n+-------------\n+\n+- A new short [document](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n+  about the JSON-RPC interface describes cases where the results of an\n+  RPC might contain inconsistencies between data sourced from different\n+  subsystems, such as wallet state and mempool state.  A note is added\n+  to the [REST interface documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md)\n+  indicating that the same rules apply.\n+\n+- Further information is added to the [JSON-RPC\n+  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n+  about how to secure this interface.\n+\n+- A new [document](https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md)\n+  about the `bitcoin.conf` file describes how to use it to configure\n+  Bitcoin Core.\n+\n+- A new document introduces Bitcoin Core's BIP174 [Partially-Signed\n+  Bitcoin Transactions\n+  (PSBT)](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md)\n+  interface, which is used to allow multiple programs to collaboratively\n+  work to create, sign, and broadcast new transactions.  This is useful\n+  for offline (cold storage) wallets, multisig wallets, coinjoin\n+  implementations, and many other cases where two or more programs need\n+  to interact to generate a complete transaction.\n+\n+- The [output script\n+  descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)\n+  documentation has been updated with information about new features in\n+  this still-developing language for describing the output scripts that\n+  a wallet or other program wants to receive notifications for, such as\n+  which addresses it wants to know received payments.  The language is\n+  currently used in multiple new and updated RPCs described in these\n+  release notes and is expected to be adapted to other RPCs and to the\n+  underlying wallet structure.\n+\n+Build system changes\n+--------------------\n+\n+- A new `--disable-bip70` option may be passed to `./configure` to\n+  prevent Bitcoin-Qt from being built with support for the BIP70 payment\n+  protocol or from linking libssl.  As the payment protocol has exposed\n+  Bitcoin Core to libssl vulnerabilities in the past, builders who don't\n+  need BIP70 support are encouraged to use this option to reduce their\n+  exposure to future vulnerabilities.\n+\n+- The minimum required version of Qt (when building the GUI) has been\n+  increased from 5.2 to 5.5.1 (the [depends\n+  system](https://github.com/bitcoin/bitcoin/blob/master/depends/README.md)\n+  provides 5.9.7)\n+\n+New RPCs\n+--------\n+\n+- `getnodeaddresses` returns peer addresses known to this node. It may\n+  be used to find nodes to connect to without using a DNS seeder.\n+\n+- `listwalletdir` returns a list of wallets in the wallet directory\n+  (either the default wallet directory or the directory configured by\n+  the `-walletdir` parameter).\n+\n+- `getrpcinfo` returns runtime details of the RPC server. At the moment,\n+  it returns an array of the currently active commands and how long\n+  they've been running.\n+\n+- `deriveaddresses` returns one or more addresses corresponding to an\n+  [output descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md).\n+\n+- `getdescriptorinfo` accepts a descriptor and returns information about\n+  it, including its computed checksum.\n+\n+- `joinpsbts` merges multiple distinct PSBTs into a single PSBT. The\n+  multiple PSBTs must have different inputs. The resulting PSBT will\n+  contain every input and output from all of the PSBTs. Any signatures\n+  provided in any of the PSBTs will be dropped.\n+\n+- `analyzepsbt` examines a PSBT and provides information about what\n+  the PSBT contains and the next steps that need to be taken in order\n+  to complete the transaction. For each input of a PSBT, `analyzepsbt`\n+  provides information about what information is missing for that\n+  input, including whether a UTXO needs to be provided, what pubkeys\n+  still need to be provided, which scripts need to be provided, and\n+  what signatures are still needed. Every input will also list which\n+  role is needed to complete that input, and `analyzepsbt` will also\n+  list the next role in general needed to complete the PSBT.\n+  `analyzepsbt` will also provide the estimated fee rate and estimated\n+  virtual size of the completed transaction if it has enough\n+  information to do so.\n+\n+- `utxoupdatepsbt` searches the set of Unspent Transaction Outputs\n+  (UTXOs) to find the outputs being spent by the partial transaction.\n+  PSBTs need to have the UTXOs being spent to be provided because\n+  the signing algorithm requires information from the UTXO being spent.\n+  For segwit inputs, only the UTXO itself is necessary.  For\n+  non-segwit outputs, the entire previous transaction is needed so\n+  that signers can be sure that they are signing the correct thing.\n+  Unfortunately, because the UTXO set only contains UTXOs and not full\n+  transactions, `utxoupdatepsbt` will only add the UTXO for segwit\n+  inputs.\n+\n+Updated RPCs\n+------------\n+\n+Note: some low-level RPC changes mainly useful for testing are described\n+in the Low-level Changes section below.\n+\n+- `getpeerinfo` now returns an additional `minfeefilter` field set to\n+  the peer's BIP133 fee filter.  You can use this to detect that you\n+  have peers that are willing to accept transactions below the default\n+  minimum relay fee.\n+\n+- The mempool RPCs, such as `getrawmempool` with `verbose=true`, now\n+  return an additional \"bip125-replaceable\" value indicating whether the\n+  transaction (or its unconfirmed ancestors) opts-in to asking nodes and\n+  miners to replace it with a higher-feerate transaction spending any of\n+  the same inputs.\n+\n+- `settxfee` previously silently ignored attempts to set the fee below\n+  the allowed minimums.  It now prints a warning.  The special value of\n+  \"0\" may still be used to request the minimum value.\n+\n+- `getaddressinfo` now provides an `ischange` field indicating whether\n+  the wallet used the address in a change output.\n+\n+- `importmulti` has been updated to support P2WSH, P2WPKH, P2SH-P2WPKH,\n+  and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept an additional\n+  `witnessscript` parameter.\n+\n+- `importmulti` now returns an additional `warnings` field for each\n+  request with an array of strings explaining when fields are being\n+  ignored or are inconsistent, if there are any.\n+\n+- `getaddressinfo` now returns an additional `solvable` boolean field\n+  when Bitcoin Core knows enough about the address's scriptPubKey,\n+  optional redeemScript, and optional witnessScript in order for the\n+  wallet to be able to generate an unsigned input spending funds sent to\n+  that address.\n+\n+- The `getaddressinfo`, `listunspent`, and `scantxoutset` RPCs now\n+  return an additional `desc` field that contains an output descriptor\n+  containing all key paths and signing information for the address\n+  (except for the private key).  The `desc` field is only returned for\n+  `getaddressinfo` and `listunspent` when the address is solvable.\n+\n+- `importprivkey` will preserve previously-set labels for addresses or\n+  public keys corresponding to the private key being imported.  For\n+  example, if you imported a watch-only address with the label \"cold\n+  wallet\" in earlier releases of Bitcoin Core, subsequently importing\n+  the private key would default to resetting the address's label to the\n+  default empty-string label (\"\").  In this release, the previous label\n+  of \"cold wallet\" will be retained.  If you optionally specify any\n+  label besides the default when calling `importprivkey`, the new label\n+  will be applied to the address.\n+\n+- See the [Mining](#mining) section for changes to `getblocktemplate`.\n+\n+- `getmininginfo` now omits `currentblockweight` and `currentblocktx`\n+  when a block was never assembled via RPC on this node.\n+\n+- The `getrawtransaction` RPC & REST endpoints no longer check the\n+  unspent UTXO set for a transaction. The remaining behaviors are as\n+  follows: 1. If a blockhash is provided, check the corresponding block.\n+  2. If no blockhash is provided, check the mempool. 3. If no blockhash\n+  is provided but txindex is enabled, also check txindex.\n+\n+- `unloadwallet` is now synchronous, meaning it will not return until\n+  the wallet is fully unloaded.\n+\n+- `importmulti` now supports importing of addresses from descriptors. A\n+  \"desc\" parameter can be provided instead of the \"scriptPubKey\" in a\n+  request, as well as an optional range for ranged descriptors to\n+  specify the start and end of the range to import. Descriptors with key\n+  origin information imported through `importmulti` will have their key\n+  origin information stored in the wallet for use with creating PSBTs.\n+  More information about descriptors can be found\n+  [here](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md).\n+\n+- `listunspent` has been modified so that it also returns\n+  `witnessScript`, the witness script in the case of a P2WSH or\n+  P2SH-P2WSH output.\n+\n+- `createwallet` now has an optional `blank` argument that can be used\n+  to create a blank wallet. Blank wallets do not have any keys or HD\n+  seed.  They cannot be opened in software older than 0.18. Once a blank\n+  wallet has a HD seed set (by using `sethdseed`) or private keys,\n+  scripts, addresses, and other watch only things have been imported,\n+  the wallet is no longer blank and can be opened in 0.17.x. Encrypting\n+  a blank wallet will also set a HD seed for it.\n+\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- `signrawtransaction` is removed after being deprecated and hidden\n+  behind a special configuration option in version 0.17.0.\n+\n+- The 'account' API is removed after being deprecated in v0.17.  The\n+  'label' API was introduced in v0.17 as a replacement for accounts.\n+  See the [release notes from\n+  v0.17](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md#label-and-account-apis-for-wallet)\n+  for a full description of the changes from the 'account' API to the\n+  'label' API.\n+\n+- `addwitnessaddress` is removed after being deprecated in version\n+  0.16.0.\n+\n+- `generate` is deprecated and will be fully removed in a subsequent\n+  major version.  This RPC is only used for testing, but its\n+  implementation reached across multiple subsystems (wallet and mining),\n+  so it is being deprecated to simplify the wallet-node interface.\n+  Projects that are using `generate` for testing purposes should\n+  transition to using the `generatetoaddress` RPC, which does not\n+  require or use the wallet component. Calling `generatetoaddress` with\n+  an address returned by the `getnewaddress` RPC gives the same\n+  functionality as the old `generate` RPC.  To continue using `generate`\n+  in this version, restart bitcoind with the `-deprecatedrpc=generate`\n+  configuration option.\n+\n+- Be reminded that parts of the `validateaddress` command have been\n+  deprecated and moved to `getaddressinfo`. The following deprecated\n+  fields have moved to `getaddressinfo`: `ismine`, `iswatchonly`,\n+  `script`, `hex`, `pubkeys`, `sigsrequired`, `pubkey`, `embedded`,\n+  `iscompressed`, `label`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+\n+- The `addresses` field has been removed from the `validateaddress`\n+  and `getaddressinfo` RPC methods.  This field was confusing since\n+  it referred to public keys using their P2PKH address.  Clients\n+  should use the `embedded.address` field for P2SH or P2WSH wrapped\n+  addresses, and `pubkeys` for inspecting multisig participants.\n+\n+REST changes\n+------------\n+\n+- A new `/rest/blockhashbyheight/` endpoint is added for fetching the\n+  hash of the block in the current best blockchain based on its height\n+  (how many blocks it is after the Genesis Block).\n+\n+Graphical User Interface (GUI)\n+------------------------------\n+\n+- A new Window menu is added alongside the existing File, Settings, and\n+  Help menus.  Several items from the other menus that opened new\n+  windows have been moved to this new Window menu.\n+\n+- In the Send tab, the checkbox for \"pay only the required fee\" has been\n+  removed.  Instead, the user can simply decrease the value in the\n+  Custom Feerate field all the way down to the node's configured minimum\n+  relay fee.\n+\n+- In the Overview tab, the watch-only balance will be the only balance\n+  shown if the wallet was created using the `createwallet` RPC and the\n+  `disable_private_keys` parameter was set to true.\n+\n+- The launch-on-startup option is no longer available on macOS if\n+  compiled with macosx min version greater than 10.11 (use\n+  CXXFLAGS=\"-mmacosx-version-min=10.11\"\n+  CFLAGS=\"-mmacosx-version-min=10.11\" for setting the deployment sdk\n+  version)\n+\n+Tools\n+-----\n+\n+- A new `bitcoin-wallet` tool is now distributed alongside Bitcoin\n+  Core's other executables.  Without needing to use any RPCs, this tool\n+  can currently create a new wallet file or display some basic\n+  information about an existing wallet, such as whether the wallet is\n+  encrypted, whether it uses an HD seed, how many transactions it\n+  contains, and how many address book entries it has.\n+\n+Planned changes\n+===============\n+\n+This section describes planned changes to Bitcoin Core that may affect\n+other Bitcoin software and services.\n+\n+- Since version 0.16.0, Bitcoin Core\u2019s built-in wallet has defaulted to\n+  generating P2SH-wrapped segwit addresses when users want to receive\n+  payments. These addresses are backwards compatible with all\n+  widely-used software.  Starting with Bitcoin Core 0.20 (expected about\n+  a year after 0.18), Bitcoin Core will default to native segwit\n+  addresses (bech32) that provide additional fee savings and other\n+  benefits. Currently, many wallets and services already support sending\n+  to bech32 addresses, and if the Bitcoin Core project sees enough\n+  additional adoption, it will instead default to bech32 receiving\n+  addresses in Bitcoin Core 0.19 (approximately November 2019).\n+  P2SH-wrapped segwit addresses will continue to be provided if the user\n+  requests them in the GUI or by RPC, and anyone who doesn\u2019t want the\n+  update will be able to configure their default address type.\n+  (Similarly, pioneering users who want to change their default now may\n+  set the `addresstype=bech32` configuration option in any Bitcoin Core\n+  release from 0.16.0 up.)\n+\n+Deprecated P2P messages\n+-----------------------\n+\n+- BIP 61 reject messages are now deprecated. Reject messages have no use\n+  case on the P2P network and are only logged for debugging by most\n+  network nodes. Furthermore, they increase bandwidth and can be harmful\n+  for privacy and security. It has been possible to disable BIP 61\n+  messages since v0.17 with the `-enablebip61=0` option. BIP 61 messages\n+  will be disabled by default in a future version, before being removed\n+  entirely.\n+\n+Low-level changes\n+=================\n+\n+This section describes RPC changes mainly useful for testing, mostly not\n+relevant in production. The changes are mentioned for completeness.\n+\n+RPC\n+---\n+\n+- The `submitblock` RPC previously returned the reason a rejected block\n+  was invalid the first time it processed that block, but returned a\n+  generic \"duplicate\" rejection message on subsequent occasions it\n+  processed the same block.  It now always returns the fundamental\n+  reason for rejecting an invalid block and only returns \"duplicate\" for\n+  valid blocks it has already accepted.\n+\n+- A new `submitheader` RPC allows submitting block headers independently\n+  from their block.  This is likely only useful for testing.\n+\n+- The `signrawtransactionwithkey` and `signrawtransactionwithwallet`\n+  RPCs have been modified so that they also optionally accept a\n+  `witnessScript`, the witness script in the case of a P2WSH or\n+  P2SH-P2WSH output. This is compatible with the change to\n+  `listunspent`.\n+\n+- For the `walletprocesspsbt` and `walletcreatefundedpsbt` RPCs, if the\n+  `bip32derivs` parameter is set to true but the key metadata for a\n+  public key has not been updated yet, then that key will have a\n+  derivation path as if it were just an independent key (i.e. no\n+  derivation path and its master fingerprint is itself).\n+\n+Configuration\n+-------------\n+\n+- The `-usehd` configuration option was removed in version 0.16. From\n+  that version onwards, all new wallets created are hierarchical\n+  deterministic wallets. This release makes specifying `-usehd` an\n+  invalid configuration option.\n+\n+Network\n+-------\n+\n+- This release allows peers that your node automatically disconnected\n+  for misbehavior (e.g. sending invalid data) to reconnect to your node\n+  if you have unused incoming connection slots.  If your slots fill up,\n+  a misbehaving node will be disconnected to make room for nodes without\n+  a history of problems (unless the misbehaving node helps your node in\n+  some other way, such as by connecting to a part of the Internet from\n+  which you don't have many other peers).  Previously, Bitcoin Core\n+  banned the IP addresses of misbehaving peers for a period of time\n+  (default of 1 day); this was easily circumvented by attackers with\n+  multiple IP addresses. If you manually ban a peer, such as by using\n+  the `setban` RPC, all connections from that peer will still be\n+  rejected.\n+\n+Wallet\n+-------\n+\n+- The key metadata will need to be upgraded the first time that the HD\n+  seed is available.  For unencrypted wallets this will occur on wallet\n+  loading.  For encrypted wallets this will occur the first time the\n+  wallet is unlocked.\n+\n+- Newly encrypted wallets will no longer require restarting the\n+  software. Instead such wallets will be completely unloaded and\n+  reloaded to achieve the same effect.\n+\n+- A sub-project of Bitcoin Core now provides Hardware Wallet Interaction\n+  (HWI) scripts that allow command-line users to use several popular\n+  hardware key management devices with Bitcoin Core.  See their [project\n+  page](https://github.com/bitcoin-core/HWI#readme) for details.\n+\n+Security\n+--------\n+\n+- This release changes the Random Number Generator (RNG) used from\n+  OpenSSL to Bitcoin Core's own implementation, although entropy\n+  gathered by Bitcoin Core is fed out to OpenSSL and then read back in\n+  when the program needs strong randomness. This moves Bitcoin Core a\n+  little closer to no longer needing to depend on OpenSSL, a dependency\n+  that has caused security issues in the past.  The new implementation\n+  gathers entropy from multiple sources, including from hardware\n+  supporting the rdseed CPU instruction.\n+\n+Changes for particular platforms\n+--------------------------------\n+\n+- On macOS, Bitcoin Core now opts out of application CPU throttling\n+  (\"app nap\") during initial blockchain download, when catching up from\n+  over 100 blocks behind the current chain tip, or when reindexing chain\n+  data. This helps prevent these operations from taking an excessively\n+  long time because the operating system is attempting to conserve\n+  power.\n+\n+0.18.0 change log\n+=================\n+\n+### Consensus\n+- #14247 Fix crash bug with duplicate inputs within a transaction (TheBlueMatt)\n+\n+### Mining\n+- #14811 Mining: Enforce that segwit option must be set in GBT (jnewbery)\n+\n+### Block and transaction handling\n+- #13310 Report progress in ReplayBlocks while rolling forward (promag)\n+- #13783 validation: Pass tx pool reference into CheckSequenceLocks (MarcoFalke)\n+- #14834 validation: Assert that pindexPrev is non-null when required (kallewoof)\n+- #14085 index: Fix for indexers skipping genesis block (jimpo)\n+- #14963 mempool, validation: Explain `cs_main` locking semantics (MarcoFalke)\n+- #15193 Default `-whitelistforcerelay` to off (sdaftuar)\n+- #15429 Update `assumevalid`, `minimumchainwork`, and `getchaintxstats` to height 563378 (gmaxwell)\n+- #15552 Granular invalidateblock and RewindBlockIndex (MarcoFalke)\n+- #14841 Move CheckBlock() call to critical section (hebasto)\n+\n+### P2P protocol and network code\n+- #14025 Remove dead code for nVersion=10300 (MarcoFalke)\n+- #12254 BIP 158: Compact Block Filters for Light Clients (jimpo)\n+- #14073 blockfilter: Avoid out-of-bounds script access (jimpo)\n+- #14140 Switch nPrevNodeCount to vNodesSize (pstratem)\n+- #14027 Skip stale tip checking if outbound connections are off or if reindexing (gmaxwell)\n+- #14532 Never bind `INADDR_ANY` by default, and warn when doing so explicitly (luke-jr)\n+- #14733 Make peer timeout configurable, speed up very slow test and ensure correct code path tested (zallarak)\n+- #14336 Implement poll (pstratem)\n+- #15051 IsReachable is the inverse of IsLimited (DRY). Includes unit tests (mmachicao)\n+- #15138 Drop IsLimited in favor of IsReachable (Empact)\n+- #14605 Return of the Banman (dongcarl)\n+- #14970 Add dnsseed.emzy.de to DNS seeds (Emzy)\n+- #14929 Allow connections from misbehavior banned peers (gmaxwell)\n+- #15345 Correct comparison of addr count (dongcarl)\n+- #15201 Add missing locking annotation for vNodes. vNodes is guarded by cs_vNodes (practicalswift)\n+- #14626 Select orphan transaction uniformly for eviction (sipa)\n+- #15486 Ensure tried collisions resolve, and allow feeler connections to existing outbound netgroups (sdaftuar)\n+\n+### Wallet\n+- #13962 Remove unused `dummy_tx` variable from FillPSBT (dongcarl)\n+- #13967 Don't report `minversion` wallet entry as unknown (instagibbs)\n+- #13988 Add checks for settxfee reasonableness (ajtowns)\n+- #12559 Avoid locking `cs_main` in some wallet RPC (promag)\n+- #13631 Add CMerkleTx::IsImmatureCoinBase method (Empact)\n+- #14023 Remove accounts RPCs (jnewbery)\n+- #13825 Kill accounts (jnewbery)\n+- #10605 Add AssertLockHeld assertions in CWallet::ListCoins (ryanofsky)\n+- #12490 Remove deprecated wallet rpc features from `bitcoin_server` (jnewbery)\n+- #14138 Set `encrypted_batch` to nullptr after delete. Avoid double free in the case of NDEBUG (practicalswift)\n+- #14168 Remove `ENABLE_WALLET` from `libbitcoin_server.a` (jnewbery)\n+- #12493 Reopen CDBEnv after encryption instead of shutting down (achow101)\n+- #14282 Remove `-usehd` option (jnewbery)\n+- #14146 Remove trailing separators from `-walletdir` arg (PierreRochard)\n+- #14291 Add ListWalletDir utility function (promag)\n+- #14468 Deprecate `generate` RPC method (jnewbery)\n+- #11634 Add missing `cs_wallet`/`cs_KeyStore` locks to wallet (practicalswift)\n+- #14296 Remove `addwitnessaddress` (jnewbery)\n+- #14451 Add BIP70 deprecation warning and allow building GUI without BIP70 support (jameshilliard)\n+- #14320 Fix duplicate fileid detection (ken2812221)\n+- #14561 Remove `fs::relative` call and fix listwalletdir tests (promag)\n+- #14454 Add SegWit support to importmulti (MeshCollider)\n+- #14410 rpcwallet: `ischange` field for `getaddressinfo` RPC (mrwhythat)\n+- #14350 Add WalletLocation class (promag)\n+- #14689 Require a public key to be retrieved when signing a P2PKH input (achow101)\n+- #14478 Show error to user when corrupt wallet unlock fails (MeshCollider)\n+- #14411 Restore ability to list incoming transactions by label (ryanofsky)\n+- #14552 Detect duplicate wallet by comparing the db filename (ken2812221)\n+- #14678 Remove redundant KeyOriginInfo access, already done in CreateSig (instagibbs)\n+- #14477 Add ability to convert solvability info to descriptor (sipa)\n+- #14380 Fix assert crash when specified change output spend size is unknown (instagibbs)\n+- #14760 Log env path in `BerkeleyEnvironment::Flush` (promag)\n+- #14646 Add expansion cache functions to descriptors (unused for now) (sipa)\n+- #13076 Fix ScanForWalletTransactions to return an enum indicating scan result: `success` / `failure` / `user_abort` (Empact)\n+- #14821 Replace CAffectedKeysVisitor with descriptor based logic (sipa)\n+- #14957 Initialize `stop_block` in CWallet::ScanForWalletTransactions (Empact)\n+- #14565 Overhaul `importmulti` logic (sipa)\n+- #15039 Avoid leaking nLockTime fingerprint when anti-fee-sniping (MarcoFalke)\n+- #14268 Introduce SafeDbt to handle Dbt with free or `memory_cleanse` raii-style (Empact)\n+- #14711 Remove uses of chainActive and mapBlockIndex in wallet code (ryanofsky)\n+- #15279 Clarify rescanblockchain doc (MarcoFalke)\n+- #15292 Remove `boost::optional`-related false positive -Wmaybe-uninitialized warnings on GCC compiler (hebasto)\n+- #13926 [Tools] bitcoin-wallet - a tool for creating and managing wallets offline (jnewbery)\n+- #11911 Free BerkeleyEnvironment instances when not in use (ryanofsky)\n+- #15235 Do not import private keys to wallets with private keys disabled (achow101)\n+- #15263 Descriptor expansions only need pubkey entries for PKH/WPKH (sipa)\n+- #15322 Add missing `cs_db` lock (promag)\n+- #15297 Releases dangling files on `BerkeleyEnvironment::Close` (promag)\n+- #14491 Allow descriptor imports with importmulti (MeshCollider)\n+- #15365 Add lock annotation for mapAddressBook (MarcoFalke)\n+- #15226 Allow creating blank (empty) wallets (alternative) (achow101)\n+- #15390 [wallet-tool] Close bdb when flushing wallet (jnewbery)\n+- #15334 Log absolute paths for the wallets (hebasto)\n+- #14978 Factor out PSBT utilities from RPCs for use in GUI code; related refactoring (gwillen)\n+- #14481 Add P2SH-P2WSH support to listunspent RPC (MeshCollider)\n+- #14021 Import key origin data through descriptors in importmulti (achow101)\n+- #14075 Import watch only pubkeys to the keypool if private keys are disabled (achow101)\n+- #15368 Descriptor checksums (sipa)\n+- #15433 Use a single wallet batch for `UpgradeKeyMetadata` (jonasschnelli)\n+- #15408 Remove unused `TransactionError` constants (MarcoFalke)\n+- #15583 Log and ignore errors in ListWalletDir and IsBerkeleyBtree (promag)\n+- #14195 Pass privkey export DER compression flag correctly (fingera)\n+- #15299 Fix assertion in `CKey::SignCompact` (promag)\n+- #14437 Start to separate wallet from node (ryanofsky)\n+- #15749 Fix: importmulti only imports origin info for PKH outputs (sipa)\n+\n+### RPC and other APIs\n+- #12842 Prevent concurrent `savemempool` (promag)\n+- #13987 Report `minfeefilter` value in `getpeerinfo` RPC (ajtowns)\n+- #13891 Remove getinfo deprecation warning (jnewbery)\n+- #13399 Add `submitheader` (MarcoFalke)\n+- #12676 Show `bip125-replaceable` flag, when retrieving mempool entries (dexX7)\n+- #13723 PSBT key path cleanups (sipa)\n+- #14008 Preserve a format of RPC command definitions (kostyantyn)\n+- #9332 Let wallet `importmulti` RPC accept labels for standard scriptPubKeys (ryanofsky)\n+- #13983 Return more specific reject reason for submitblock (MarcoFalke)\n+- #13152 Add getnodeaddresses RPC command (chris-belcher)\n+- #14298 rest: Improve performance for JSON calls (alecalve)\n+- #14297 Remove warning for removed estimatefee RPC (jnewbery)\n+- #14373 Consistency fixes for RPC descriptions (ch4ot1c)\n+- #14150 Add key origin support to descriptors (sipa)\n+- #14518 Always throw in getblockstats if `-txindex` is required (promag)\n+- #14060 ZMQ: add options to configure outbound message high water mark, aka SNDHWM (mruddy)\n+- #13381 Add possibility to preserve labels on importprivkey (marcoagner)\n+- #14530 Use `RPCHelpMan` to generate RPC doc strings (MarcoFalke)\n+- #14720 Correctly name RPC arguments (MarcoFalke)\n+- #14726 Use `RPCHelpMan` for all RPCs (MarcoFalke)\n+- #14796 Pass argument descriptions to `RPCHelpMan` (MarcoFalke)\n+- #14670 http: Fix HTTP server shutdown (promag)\n+- #14885 Assert that named arguments are unique in `RPCHelpMan` (promag)\n+- #14877 Document default values for optional arguments (MarcoFalke)\n+- #14875 RPCHelpMan: Support required arguments after optional ones (MarcoFalke)\n+- #14993 Fix data race (UB) in InterruptRPC() (practicalswift)\n+- #14653 rpcwallet: Add missing transaction categories to RPC helptexts (andrewtoth)\n+- #14981 Clarify RPC `getrawtransaction`'s time help text (benthecarman)\n+- #12151 Remove `cs_main` lock from blockToJSON and blockheaderToJSON (promag)\n+- #15078 Document `bytessent_per_msg` and `bytesrecv_per_msg` (MarcoFalke)\n+- #15057 Correct `reconsiderblock `help text, add test (MarcoFalke)\n+- #12153 Avoid permanent `cs_main` lock in `getblockheader` (promag)\n+- #14982 Add `getrpcinfo` command (promag)\n+- #15122 Expand help text for `importmulti` changes (jnewbery)\n+- #15186 remove duplicate solvable field from `getaddressinfo` (fanquake)\n+- #15209 zmq: log outbound message high water mark when reusing socket (fanquake)\n+- #15177 rest: Improve tests and documention of /headers and /block (promag)\n+- #14353 rest: Add blockhash call, fetch blockhash by height (jonasschnelli)\n+- #15248 Compile on GCC4.8 (MarcoFalke)\n+- #14987 RPCHelpMan: Pass through Result and Examples (MarcoFalke)\n+- #15159 Remove lookup to UTXO set from GetTransaction (amitiuttarwar)\n+- #15245 remove deprecated mentions of signrawtransaction from fundraw help (instagibbs)\n+- #14667 Add `deriveaddresses` RPC util method (Sjors)\n+- #15357 Don't ignore `-maxtxfee` when wallet is disabled (JBaczuk)\n+- #15337 Fix for segfault if combinepsbt called with empty inputs (benthecarman)\n+- #14918 RPCHelpMan: Check default values are given at compile-time (MarcoFalke)\n+- #15383 mining: Omit uninitialized currentblockweight, currentblocktx (MarcoFalke)\n+- #13932 Additional utility RPCs for PSBT (achow101)\n+- #15401 Actually throw help when passed invalid number of params (MarcoFalke)\n+- #15471 rpc/gui: Remove 'Unknown block versions being mined' warning (laanwj)\n+- #15497 Consistent range arguments in scantxoutset/importmulti/deriveaddresses (sipa)\n+- #15510 deriveaddresses: add range to CRPCConvertParam (Sjors)\n+- #15582 Fix overflow bug in analyzepsbt fee: CAmount instead of int (sipa)\n+- #13424 Consistently validate txid / blockhash length and encoding in rpc calls (Empact)\n+- #15750 Remove the addresses field from the getaddressinfo return object (jnewbery)\n+\n+### GUI\n+- #13634 Compile `boost::signals2` only once (MarcoFalke)\n+- #13248 Make proxy icon from statusbar clickable (mess110)\n+- #12818 TransactionView: highlight replacement tx after fee bump (Sjors)\n+- #13529 Use new Qt5 connect syntax (promag)\n+- #14162 Also log and print messages or questions like bitcoind (MarcoFalke)\n+- #14385 Avoid system harfbuzz and bz2 (theuni)\n+- #14450 Fix QCompleter popup regression (hebasto)\n+- #14177 Set C locale for amountWidget (hebasto)\n+- #14374 Add `Blocksdir` to Debug window (hebasto)\n+- #14554 Remove unused `adjustedTime` parameter (hebasto)\n+- #14228 Enable system tray icon by default if available (hebasto)\n+- #14608 Remove the \"Pay only required fee\u2026\" checkbox (hebasto)\n+- #14521 qt, docs: Fix `bitcoin-qt -version` output formatting (hebasto)\n+- #13966 When private key is disabled, only show watch-only balance (ken2812221)\n+- #14828 Remove hidden columns in coin control dialog (promag)\n+- #14783 Fix `boost::signals2::no_slots_error` in early calls to InitWarning (promag)\n+- #14854 Cleanup SplashScreen class (hebasto)\n+- #14801 Use window() instead of obsolete topLevelWidget() (hebasto)\n+- #14573 Add Window menu (promag)\n+- #14979 Restore < Qt5.6 compatibility for addAction (jonasschnelli)\n+- #14975 Refactoring with QString::toNSString() (hebasto)\n+- #15000 Fix broken notificator on GNOME (hebasto)\n+- #14375 Correct misleading \"overridden options\" label (hebasto)\n+- #15007 Notificator class refactoring (hebasto)\n+- #14784 Use `WalletModel*` instead of the wallet name as map key (promag)\n+- #11625 Add BitcoinApplication & RPCConsole tests (ryanofsky)\n+- #14517 Fix start with the `-min` option (hebasto)\n+- #13216 implements concept for different disk sizes on intro (marcoagner)\n+- #15114 Replace remaining 0 with nullptr (Empact)\n+- #14594 Fix minimized window bug on Linux (hebasto)\n+- #14556 Fix confirmed transaction labeled \"open\" (#13299) (hebasto)\n+- #15149 Show current wallet name in window title (promag)\n+- #15136 \"Peers\" tab overhaul (hebasto)\n+- #14250 Remove redundant stopThread() and stopExecutor() signals (hebasto)\n+- #15040 Add workaround for QProgressDialog bug on macOS (hebasto)\n+- #15101 Add WalletController (promag)\n+- #15178 Improve \"help-console\" message (hebasto)\n+- #15210 Fix window title update (promag)\n+- #15167 Fix wallet selector size adjustment (hebasto)\n+- #15208 Remove macOS launch-at-startup when compiled with > macOS 10.11, fix memory mismanagement (jonasschnelli)\n+- #15163 Correct units for \"-dbcache\" and \"-prune\" (hebasto)\n+- #15225 Change the receive button to respond to keypool state changing (achow101)\n+- #15280 Fix shutdown order (promag)\n+- #15203 Fix issue #9683 \"gui, wallet: random abort (segmentation fault) (dooglus)\n+- #15091 Fix model overlay header sync (jonasschnelli)\n+- #15153 Add Open Wallet menu (promag)\n+- #15183 Fix `m_assumed_blockchain_size` variable value (marcoagner)\n+- #15063 If BIP70 is disabled, attempt to fall back to BIP21 parsing (luke-jr)\n+- #15195 Add Close Wallet action (promag)\n+- #15462 Fix async open wallet call order (promag)\n+- #15801 Bugfix: GUI: Options: Initialise prune setting range before loading current value, and remove upper bound limit (luke-jr)\n+\n+### Build system\n+- #13955 gitian: Bump descriptors for (0.)18 (fanquake)\n+- #13899 Enable -Wredundant-decls where available. Remove redundant redeclarations (practicalswift)\n+- #13665 Add RISC-V support to gitian (ken2812221)\n+- #14062 Generate MSVC project files via python script (ken2812221)\n+- #14037 Add README.md to linux release tarballs (hebasto)\n+- #14183 Remove unused Qt 4 dependencies (ken2812221)\n+- #14127 Avoid getifaddrs when unavailable (greenaddress)\n+- #14184 Scripts and tools: increased timeout downloading (cisba)\n+- #14204 Move `interfaces/*` to `libbitcoin_server` (laanwj)\n+- #14208 Actually remove `ENABLE_WALLET` (jnewbery)\n+- #14212 Remove libssl from LDADD unless GUI (MarcoFalke)\n+- #13578 Upgrade zeromq to 4.2.5 and avoid deprecated zeromq API functions (mruddy)\n+- #14281 lcov: filter /usr/lib/ from coverage reports (MarcoFalke)\n+- #14325 gitian: Use versioned unsigned tarballs instead of generically named ones (achow101)\n+- #14253 During 'make clean', remove some files that are currently missed (murrayn)\n+- #14455 Unbreak `make clean` (jamesob)\n+- #14495 Warn (don't fail!) on spelling errors (practicalswift)\n+- #14496 Pin to specific versions of Python packages we install from PyPI in Travis (practicalswift)\n+- #14568 Fix Qt link order for Windows build (ken2812221)\n+- #14252 Run functional tests and benchmarks under the undefined behaviour sanitizer (UBSan) (practicalswift)\n+- #14612 Include full version number in released file names (achow101)\n+- #14840 Remove duplicate libconsensus linking in test make (AmirAbrams)\n+- #14564 Adjust configure so that only BIP70 is disabled when protobuf is missing instead of the GUI (jameshilliard)\n+- #14883 Add `--retry 5` to curl opts in `install_db4.sh` (qubenix)\n+- #14701 Add `CLIENT_VERSION_BUILD` to CFBundleGetInfoString (fanquake)\n+- #14849 Qt 5.9.7 (fanquake)\n+- #15020 Add names to Travis jobs (gkrizek)\n+- #15047 Allow to configure --with-sanitizers=fuzzer (MarcoFalke)\n+- #15154 Configure: bitcoin-tx doesn't need libevent, so don't pull it in (luke-jr)\n+- #15175 Drop macports support (Empact)\n+- #15308 Restore compatibility with older boost (Empact)\n+- #15407 msvc: Fix silent merge conflict between #13926 and #14372 part II (ken2812221)\n+- #15388 Makefile.am: add rule for src/bitcoin-wallet (Sjors)\n+- #15393 Bump minimum Qt version to 5.5.1 (Sjors)\n+- #15285 Prefer Python 3.4 even if newer versions are present on the system (Sjors)\n+- #15398 msvc: Add rapidcheck property tests (ken2812221)\n+- #15431 msvc: scripted-diff: Remove NDEBUG pre-define in project file (ken2812221)\n+- #15549 gitian: Improve error handling (laanwj)\n+- #15548 use full version string in setup.exe (MarcoFalke)\n+- #11526 Visual Studio build configuration for Bitcoin Core (sipsorcery)\n+- #15110 build\\_msvc: Fix the build problem in `libbitcoin_server` (Mr-Leshiy)\n+- #14372 msvc: build secp256k1 and leveldb locally (ken2812221)\n+- #15325 msvc: Fix silent merge conflict between #13926 and #14372 (ken2812221)\n+- #15391 Add compile time verification of assumptions we're currently making implicitly/tacitly (practicalswift)\n+- #15503 msvc: Use a single file to specify the include path (ken2812221)\n+- #13765 contrib: Add gitian build support for github pull request (ken2812221)\n+- #15809 gitignore: plist and dat (jamesob)\n+\n+### Tests and QA\n+- #15405 appveyor: Clean cache when build configuration changes (Sjors)\n+- #13953 Fix deprecation in bitcoin-util-test.py (isghe)\n+- #13963 Replace usage of tostring() with tobytes() (dongcarl)\n+- #13964 ci: Add appveyor ci (ken2812221)\n+- #13997 appveyor: fetch the latest port data (ken2812221)\n+- #13707 Add usage note to check-rpc-mappings.py (masonicboom)\n+- #14036 travis: Run unit tests --with-sanitizers=undefined (MarcoFalke)\n+- #13861 Add testing of `value_ret` for SelectCoinsBnB (Empact)\n+- #13863 travis: Move script sections to files in `.travis/` subject to shellcheck (scravy)\n+- #14081 travis: Fix missing differentiation between unit and functional tests (scravy)\n+- #14042 travis: Add cxxflags=-wno-psabi at arm job (ken2812221)\n+- #14051 Make `combine_logs.py` handle multi-line logs (jnewbery)\n+- #14093 Fix accidental trunction from int to bool (practicalswift)\n+- #14108 Add missing locking annotations and locks (`g_cs_orphans`) (practicalswift)\n+- #14088 Don't assert(\u2026) with side effects (practicalswift)\n+- #14086 appveyor: Use clcache to speed up build (ken2812221)\n+- #13954 Warn (don't fail!) on spelling errors. Fix typos reported by codespell (practicalswift)\n+- #12775 Integration of property based testing into Bitcoin Core (Christewart)\n+- #14119 Read reject reasons from debug log, not P2P messages (MarcoFalke)\n+- #14189 Fix silent merge conflict in `wallet_importmulti` (MarcoFalke)\n+- #13419 Speed up `knapsack_solver_test` by not recreating wallet 100 times (lucash-dev)\n+- #14199 Remove redundant BIP174 test from `rpc_psbt.json` (araspitzu)\n+- #14179 Fixups to \"Run all tests even if wallet is not compiled\" (MarcoFalke)\n+- #14225 Reorder tests and move most of extended tests up to normal tests (ken2812221)\n+- #14236 `generate` --> `generatetoaddress` change to allow tests run without wallet (sanket1729)\n+- #14287 Use MakeUnique to construct objects owned by `unique_ptrs` (practicalswift)\n+- #14007 Run functional test on Windows and enable it on Appveyor (ken2812221)\n+- #14275 Write the notification message to different files to avoid race condition in `feature_notifications.py` (ken2812221)\n+- #14306 appveyor: Move AppVeyor YAML to dot-file-style YAML (MitchellCash)\n+- #14305 Enforce critical class instance attributes in functional tests, fix segwit test specificity (JustinTArthur)\n+- #12246 Bugfix: Only run bitcoin-tx tests when bitcoin-tx is enabled (luke-jr)\n+- #14316 Exclude all tests with difference parameters in `--exclude` list (ken2812221)\n+- #14381 Add missing call to `skip_if_no_cli()` (practicalswift)\n+- #14389 travis: Set codespell version to avoid breakage (MarcoFalke)\n+- #14398 Don't access out of bounds array index: array[sizeof(array)] (Empact)\n+- #14419 Remove `rpc_zmq.py` (jnewbery)\n+- #14241 appveyor: Script improvement (ken2812221)\n+- #14413 Allow closed RPC handler in `assert_start_raises_init_error` (ken2812221)\n+- #14324 Run more tests with wallet disabled (MarcoFalke)\n+- #13649 Allow arguments to be forwarded to flake8 in lint-python.sh (jamesob)\n+- #14465 Stop node before removing the notification file (ken2812221)\n+- #14460 Improve 'CAmount' tests (hebasto)\n+- #14456 forward timeouts properly in `send_blocks_and_test` (jamesob)\n+- #14527 Revert \"Make qt wallet test compatible with qt4\" (MarcoFalke)\n+- #14504 Show the progress of functional tests (isghe)\n+- #14559 appveyor: Enable multiwallet tests (ken2812221)\n+- #13515 travis: Enable qt for all jobs (ken2812221)\n+- #14571 Test that nodes respond to `getdata` with `notfound` (MarcoFalke)\n+- #14569 Print dots by default in functional tests (ken2812221)\n+- #14631 Move deterministic address import to `setup_nodes` (jnewbery)\n+- #14630 test: Remove travis specific code (MarcoFalke)\n+- #14528 travis: Compile once on xenial (MarcoFalke)\n+- #14092 Dry run `bench_bitcoin` as part `make check` to allow for quick identification of assertion/sanitizer failures in benchmarking code (practicalswift)\n+- #14664 `example_test.py`: fixup coinbase height argument, derive number clearly (instagibbs)\n+- #14522 Add invalid P2P message tests (jamesob)\n+- #14619 Fix value display name in `test_runner` help text (merland)\n+- #14672 Send fewer spam messages in `p2p_invalid_messages` (jamesob)\n+- #14673 travis: Fail the ubsan travis build in case of newly introduced ubsan errors (practicalswift)\n+- #14665 appveyor: Script improvement part II (ken2812221)\n+- #14365 Add Python dead code linter (vulture) to Travis (practicalswift)\n+- #14693 `test_node`: `get_mem_rss` fixups (MarcoFalke)\n+- #14714 util.h: explicitly include required QString header (1Il1)\n+- #14705 travis: Avoid timeout on verify-commits check (MarcoFalke)\n+- #14770 travis: Do not specify sudo in `.travis` (scravy)\n+- #14719 Check specific reject reasons in `feature_block` (MarcoFalke)\n+- #14771 Add `BOOST_REQUIRE` to getters returning optional (MarcoFalke)\n+- #14777 Add regtest for JSON-RPC batch calls (domob1812)\n+- #14764 travis: Run thread sanitizer on unit tests (MarcoFalke)\n+- #14400 Add Benchmark to test input de-duplication worst case (JeremyRubin)\n+- #14812 Fix `p2p_invalid_messages` on macOS (jamesob)\n+- #14813 Add `wallet_encryption` error tests (MarcoFalke)\n+- #14820 Fix `descriptor_tests` not checking ToString output of public descriptors (ryanofsky)\n+- #14794 Add AddressSanitizer (ASan) Travis build (practicalswift)\n+- #14819 Bugfix: `test/functional/mempool_accept`: Ensure oversize transaction is actually oversize (luke-jr)\n+- #14822 bench: Destroy wallet txs instead of leaking their memory (MarcoFalke)\n+- #14683 Better `combine_logs.py` behavior (jamesob)\n+- #14231 travis: Save cache even when build or test fail (ken2812221)\n+- #14816 Add CScriptNum decode python implementation in functional suite (instagibbs)\n+- #14861 Modify `rpc_bind` to conform to #14532 behaviour (dongcarl)\n+- #14864 Run scripted-diff in subshell (dongcarl)\n+- #14795 Allow `test_runner` command line to receive parameters for each test (marcoagner)\n+- #14788 Possible fix the permission error when the tests open the cookie file (ken2812221)\n+- #14857 `wallet_keypool_topup.py`: Test for all keypool address types (instagibbs)\n+- #14886 Refactor importmulti tests (jnewbery)\n+- #14908 Removed implicit CTransaction constructor calls from tests and benchmarks (lucash-dev)\n+- #14903 Handle ImportError explicitly, improve comparisons against None (daniel-s-ingram)\n+- #14884 travis: Enforce python 3.4 support through linter (Sjors)\n+- #14940 Add test for truncated pushdata script (MarcoFalke)\n+- #14926 consensus: Check that final transactions are valid (MarcoFalke)\n+- #14937 travis: Fix travis would always be green even if it fail (ken2812221)\n+- #14953 Make `g_insecure_rand_ctx` `thread_local` (MarcoFalke)\n+- #14931 mempool: Verify prioritization is dumped correctly (MarcoFalke)\n+- #14935 Test for expected return values when calling functions returning a success code (practicalswift)\n+- #14969 Fix `cuckoocache_tests` TSAN failure introduced in 14935 (practicalswift)\n+- #14964 Fix race in `mempool_accept` (MarcoFalke)\n+- #14829 travis: Enable functional tests in the threadsanitizer (tsan) build job (practicalswift)\n+- #14985 Remove `thread_local` from `test_bitcoin` (MarcoFalke)\n+- #15005 Bump timeout to run tests in travis thread sanitizer (MarcoFalke)\n+- #15013 Avoid race in `p2p_timeouts` (MarcoFalke)\n+- #14960 lint/format-strings: Correctly exclude escaped percent symbols (luke-jr)\n+- #14930 pruning: Check that verifychain can be called when pruned (MarcoFalke)\n+- #15022 Upgrade Travis OS to Xenial (gkrizek)\n+- #14738 Fix running `wallet_listtransactions.py` individually through `test_runner.py` (kristapsk)\n+- #15026 Rename `rpc_timewait` to `rpc_timeout` (MarcoFalke)\n+- #15069 Fix `rpc_net.py` `pong` race condition (Empact)\n+- #14790 Allow running `rpc_bind.py` --nonloopback test without IPv6 (kristapsk)\n+- #14457 add invalid tx templates for use in functional tests (jamesob)\n+- #14855 Correct ineffectual WithOrVersion from `transactions_tests` (Empact)\n+- #15099 Use `std::vector` API for construction of test data (domob1812)\n+- #15102 Run `invalid_txs.InputMissing` test in `feature_block` (MarcoFalke)\n+- #15059 Add basic test for BIP34 (MarcoFalke)\n+- #15108 Tidy up `wallet_importmulti.py` (amitiuttarwar)\n+- #15164 Ignore shellcheck warning SC2236 (promag)\n+- #15170 refactor/lint: Add ignored shellcheck suggestions to an array (koalaman)\n+- #14958 Remove race between connecting and shutdown on separate connections (promag)\n+- #15166 Pin shellcheck version (practicalswift)\n+- #15196 Update all `subprocess.check_output` functions to be Python 3.4 compatible (gkrizek)\n+- #15043 Build fuzz targets into seperate executables (MarcoFalke)\n+- #15276 travis: Compile once on trusty (MarcoFalke)\n+- #15246 Add tests for invalid message headers (MarcoFalke)\n+- #15301 When testing with --usecli, unify RPC arg to cli arg conversion and handle dicts and lists (achow101)\n+- #15247 Use wallet to retrieve raw transactions (MarcoFalke)\n+- #15303 travis: Remove unused `functional_tests_config` (MarcoFalke)\n+- #15330 Fix race in `p2p_invalid_messages` (MarcoFalke)\n+- #15324 Make bloom tests deterministic (MarcoFalke)\n+- #15328 travis: Revert \"run extended tests once daily\" (MarcoFalke)\n+- #15327 Make test `updatecoins_simulation_test` deterministic (practicalswift)\n+- #14519 add utility to easily profile node performance with perf (jamesob)\n+- #15349 travis: Only exit early if compilation took longer than 30 min (MarcoFalke)\n+- #15350 Drop RPC connection if --usecli (promag)\n+- #15370 test: Remove unused --force option (MarcoFalke)\n+- #14543 minor `p2p_sendheaders` fix of height in coinbase (instagibbs)\n+- #13787 Test for Windows encoding issue (ken2812221)\n+- #15378 Added missing tests for RPC wallet errors (benthecarman)\n+- #15238 remove some magic mining constants in functional tests (instagibbs)\n+- #15411 travis: Combine --disable-bip70 into existing job (MarcoFalke)\n+- #15295 fuzz: Add `test/fuzz/test_runner.py` and run it in travis (MarcoFalke)\n+- #15413 Add missing `cs_main` locks required when accessing pcoinsdbview, pcoinsTip or pblocktree (practicalswift)\n+- #15399 fuzz: Script validation flags (MarcoFalke)\n+- #15410 txindex: interrupt threadGroup before calling destructor (MarcoFalke)\n+- #15397 Remove manual byte editing in `wallet_tx_clone` func test (instagibbs)\n+- #15415 functional: allow custom cwd, use tmpdir as default (Sjors)\n+- #15404 Remove `-txindex` to start nodes (amitiuttarwar)\n+- #15439 remove `byte.hex()` to keep compatibility (AkioNak)\n+- #15419 Always refresh cache to be out of ibd (MarcoFalke)\n+- #15507 Bump timeout on tests that timeout on windows (MarcoFalke)\n+- #15506 appveyor: fix cache issue and reduce dependencies build time (ken2812221)\n+- #15485 add `rpc_misc.py`, mv test getmemoryinfo, add test mallocinfo (adamjonas)\n+- #15321 Add `cs_main` lock annotations for mapBlockIndex (MarcoFalke)\n+- #14128 lint: Make sure we read the command line inputs using UTF-8 decoding in python (ken2812221)\n+- #14115 lint: Make all linters work under the default macos dev environment (build-osx.md) (practicalswift)\n+- #15219 lint: Enable python linters via an array (Empact)\n+\n+### Platform support\n+- #13866 utils: Use `_wfopen` and `_wfreopen` on windows (ken2812221)\n+- #13886 utils: Run commands using UTF-8 string on windows (ken2812221)\n+- #14192 utils: Convert `fs::filesystem_error` messages from local multibyte to UTF-8 on windows (ken2812221)\n+- #13877 utils: Make fs::path::string() always return UTF-8 string on windows (ken2812221)\n+- #13883 utils: Convert windows args to UTF-8 string (ken2812221)\n+- #13878 utils: Add fstream wrapper to allow to pass unicode filename on windows (ken2812221)\n+- #14426 utils: Fix broken windows filelock (ken2812221)\n+- #14686 Fix windows build error if `--disable-bip70` (ken2812221)\n+- #14922 windows: Set `_WIN32_WINNT` to 0x0601 (Windows 7) (ken2812221)\n+- #13888 Call unicode API on Windows (ken2812221)\n+- #15468 Use `fsbridge::ifstream` to fix Windows path issue (ken2812221)\n+- #13734 Drop `boost::scoped_array` and use `wchar_t` API explicitly on Windows (ken2812221)\n+- #13884 Enable bdb unicode support for Windows (ken2812221)\n+\n+### Miscellaneous\n+- #13935 contrib: Adjust output to current test format (AkioNak)\n+- #14097 validation: Log FormatStateMessage on ConnectBlock error in ConnectTip (MarcoFalke)\n+- #13724 contrib: Support ARM and RISC-V symbol check (ken2812221)\n+- #13159 Don't close old debug log file handle prematurely when trying to re-open (on SIGHUP) (practicalswift)\n+- #14186 bitcoin-cli: don't translate command line options (HashUnlimited)\n+- #14057 logging: Only log `using config file path_to_bitcoin.conf` message on startup if conf file exists (leishman)\n+- #14164 Update univalue subtree (MarcoFalke)\n+- #14272 init: Remove deprecated args from hidden args (MarcoFalke)\n+- #14494 Error if # is used in rpcpassword in conf (MeshCollider)\n+- #14742 Properly generate salt in rpcauth.py (dongcarl)\n+- #14708 Warn unrecognised sections in the config file (AkioNak)\n+- #14756 Improve rpcauth.py by using argparse and getpass modules (promag)\n+- #14785 scripts: Fix detection of copyright holders (cornelius)\n+- #14831 scripts: Use `#!/usr/bin/env bash` instead of `#!/bin/bash` (vim88)\n+- #14869 Scripts: Add trusted key for samuel dobson (laanwj)\n+- #14809 Tools: improve verify-commits.py script (jlopp)\n+- #14624 Some simple improvements to the RNG code (sipa)\n+- #14947 scripts: Remove python 2 import workarounds (practicalswift)\n+- #15087 Error if rpcpassword contains hash in conf sections (MeshCollider)\n+- #14433 Add checksum in gitian build scripts for ossl (TheCharlatan)\n+- #15165 contrib: Allow use of github api authentication in github-merge (laanwj)\n+- #14409 utils and libraries: Make 'blocksdir' always net specific (hebasto)\n+- #14839 threads: Fix unitialized members in `sched_param` (fanquake)\n+- #14955 Switch all RNG code to the built-in PRNG (sipa)\n+- #15258 Scripts and tools: Fix `devtools/copyright_header.py` to always honor exclusions (Empact)\n+- #12255 Update bitcoin.service to conform to init.md (dongcarl)\n+- #15266 memory: Construct globals on first use (MarcoFalke)\n+- #15347 Fix build after pr 15266 merged (hebasto)\n+- #15351 Update linearize-hashes.py (OverlordQ)\n+- #15358 util: Add setuphelpoptions() (MarcoFalke)\n+- #15216 Scripts and tools: Replace script name with a special parameter (hebasto)\n+- #15250 Use RdSeed when available, and reduce RdRand load (sipa)\n+- #15278 Improve PID file error handling (hebasto)\n+- #15270 Pull leveldb subtree (MarcoFalke)\n+- #15456 Enable PID file creation on WIN (riordant)\n+- #12783 macOS: disable AppNap during sync (krab)\n+- #13910 Log progress while verifying blocks at level 4 (domob1812)\n+- #15124 Fail AppInitMain if either disk space check fails (Empact)\n+- #15117 Fix invalid memory write in case of failing mmap(\u2026) in PosixLockedPageAllocator::AllocateLocked (practicalswift)\n+- #14357 streams: Fix broken `streams_vector_reader` test. Remove unused `seek(size_t)`\n+- #11640 Make `LOCK`, `LOCK2`, `TRY_LOCK` work with CWaitableCriticalSection (ryanofsky)\n+- #14074 Use `std::unordered_set` instead of `set` in blockfilter interface (jimpo)\n+- #15275 Add gitian PGP key for hebasto (hebasto)\n+\n+### Documentation\n+- #14120 Notes about control port and read access to cookie (JBaczuk)\n+- #14135 correct GetDifficulty doc after #13288 (fanquake)\n+- #14013 Add new regtest ports in man following #10825 ports reattributions (ariard)\n+- #14149 Remove misleading checkpoints comment in CMainParams (MarcoFalke)\n+- #14153 Add disable-wallet section to OSX build instructions, update line in Unix instructions (bitstein)\n+- #13662 Explain when reindex-chainstate can be used instead of reindex (Sjors)\n+- #14207 `-help-debug` implies `-help` (laanwj)\n+- #14213 Fix reference to lint-locale-dependence.sh (hebasto)\n+- #14206 Document `-checklevel` levels (laanwj)\n+- #14217 Add GitHub PR template (MarcoFalke)\n+- #14331 doxygen: Fix member comments (MarcoFalke)\n+- #14264 Split depends installation instructions per arch (MarcoFalke)\n+- #14393 Add missing apt-get install (poiuty)\n+- #14428 Fix macOS files description in qt/README.md (hebasto)\n+- #14390 release process: RPC documentation (karel-3d)\n+- #14472 getblocktemplate: use SegWit in example (Sjors)\n+- #14497 Add doc/bitcoin-conf.md (hebasto)\n+- #14526 Document lint tests (fanquake)\n+- #14511 Remove explicit storage requirement from README.md (merland)\n+- #14600 Clarify commit message guidelines (merland)\n+- #14617 FreeBSD: Document Python 3 requirement for 'gmake check' (murrayn)\n+- #14592 Add external interface consistency guarantees (MarcoFalke)\n+- #14625 Make clear function argument case in dev notes (dongcarl)\n+- #14515 Update OpenBSD build guide for 6.4 (fanquake)\n+- #14436 Add comment explaining recentRejects-DoS behavior (jamesob)\n+- #14684 conf: Remove deprecated options from docs, Other cleanup (MarcoFalke)\n+- #14731 Improve scripted-diff developer docs (dongcarl)\n+- #14778 A few minor formatting fixes and clarifications to descriptors.md (jnewbery)\n+- #14448 Clarify rpcwallet flag url change (JBaczuk)\n+- #14808 Clarify RPC rawtransaction documentation (jlopp)\n+- #14804 Less confusing documentation for `torpassword` (fanquake)\n+- #14848 Fix broken Gmane URL in security-check.py (cyounkins-bot)\n+- #14882 developer-notes.md: Point out that UniValue deviates from upstream (Sjors)\n+- #14909 Update minimum required Qt (fanquake)\n+- #14914 Add nice table to files.md (emilengler)\n+- #14741 Indicate `-rpcauth` option password hashing alg (dongcarl)\n+- #14950 Add NSIS setup/install steps to windows docs (fanquake)\n+- #13930 Better explain GetAncestor check for `m_failed_blocks` in AcceptBlockHeader (Sjors)\n+- #14973 Improve Windows native build instructions (murrayn)\n+- #15073 Botbot.me (IRC logs) not available anymore (anduck)\n+- #15038 Get more info about GUI-related issue on Linux (hebasto)\n+- #14832 Add more Doxygen information to Developer Notes (ch4ot1c)\n+- #15128 Fix download link in doc/README.md (merland)\n+- #15127 Clarifying testing instructions (benthecarman)\n+- #15132 Add FreeBSD build notes link to doc/README.md (fanquake)\n+- #15173 Explain what .python-version does (Sjors)\n+- #15223 Add information about security to the JSON-RPC doc (harding)\n+- #15249 Update python docs to reflect that wildcard imports are disallowed (Empact)\n+- #15176 Get rid of badly named `doc/README_osx.md` (merland)\n+- #15272 Correct logging return type and RPC example (fanquake)\n+- #15244 Gdb attaching to process during tests has non-sudo solution (instagibbs)\n+- #15332 Small updates to `getrawtransaction` description (amitiuttarwar)\n+- #15354 Add missing `bitcoin-wallet` tool manpages (MarcoFalke)\n+- #15343 netaddress: Make IPv4 loopback comment more descriptive (dongcarl)\n+- #15353 Minor textual improvements in `translation_strings_policy.md` (merland)\n+- #15426 importmulti: add missing description of keypool option (harding)\n+- #15425 Add missing newline to listunspent help for witnessScript (harding)\n+- #15348 Add separate productivity notes document (dongcarl)\n+- #15416 Update FreeBSD build guide for 12.0 (fanquake)\n+- #15222 Add info about factors that affect dependency list (merland)\n+- #13676 Explain that mempool memory is added to `-dbcache` (Sjors)\n+- #15273 Slight tweak to the verify-commits script directions (droark)\n+- #15477 Remove misleading hint in getrawtransaction (MarcoFalke)\n+- #15489 Update release process for snap package (MarcoFalke)\n+- #15524 doc: Remove berkeleydb PPA from linux build instructions (MarcoFalke)\n+- #15559 Correct `analyzepsbt` rpc doc (fanquake)\n+- #15194 Add comment describing `fDisconnect` behavior (dongcarl)\n+- #15754 getrpcinfo docs (benthecarman)\n+- #15763 Update bips.md for 0.18.0 (sipa)\n+- #15757 List new RPCs in psbt.md and descriptors.md (sipa)\n+- #15765 correct bitcoinconsensus_version in shared-libraries.md (fanquake)\n+- #15792 describe onlynet option in doc/tor.md (jonatack)\n+- #15802 mention creating application support bitcoin folder on OSX (JimmyMow)\n+- #15799 Clarify RPC versioning (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 1Il1\n+- 251\n+- Aaron Clauson\n+- Adam Jonas\n+- Akio Nakamura\n+- Alexander Leishman\n+- Alexey Ivanov\n+- Alexey Poghilenkov\n+- Amir Abrams\n+- Amiti Uttarwar\n+- Andrew Chow\n+- andrewtoth\n+- Anthony Towns\n+- Antoine Le Calvez\n+- Antoine Riard\n+- Antti Majakivi\n+- araspitzu\n+- Arvid Norberg\n+- Ben Carman\n+- Ben Woosley\n+- benthecarman\n+- bitcoinhodler\n+- Carl Dong\n+- Chakib Benziane\n+- Chris Moore\n+- Chris Stewart\n+- chris-belcher\n+- Chun Kuan Lee\n+- Cornelius Schumacher\n+- Cory Fields\n+- Craig Younkins\n+- Cristian Mircea Messel\n+- Damian Mee\n+- Daniel Ingram\n+- Daniel Kraft\n+- David A. Harding\n+- DesWurstes\n+- dexX7\n+- Dimitri Deijs\n+- Dimitris Apostolou\n+- Douglas Roark\n+- DrahtBot\n+- Emanuele Cisbani\n+- Emil Engler\n+- Eric Scrivner\n+- fridokus\n+- Gal Buki\n+- Gleb Naumenko\n+- Glenn Willen\n+- Graham Krizek\n+- Gregory Maxwell\n+- Gregory Sanders\n+- gustavonalle\n+- Harry Moreno\n+- Hennadii Stepanov\n+- Isidoro Ghezzi\n+- Jack Mallers\n+- James Hilliard\n+- James O'Beirne\n+- Jameson Lopp\n+- Jeremy Rubin\n+- Jesse Cohen\n+- Jim Posen\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jordan Baczuk\n+- Jorge Tim\u00f3n\n+- Julian Fleischer\n+- Justin Turner Arthur\n+- Karel B\u00edlek\n+- Karl-Johan Alm\n+- Kaz Wesley\n+- ken2812221\n+- Kostiantyn Stepaniuk\n+- Kristaps Kaupe\n+- Lawrence Nahum\n+- Lenny Maiorani\n+- liuyujun\n+- lucash-dev\n+- luciana\n+- Luke Dashjr\n+- marcaiaf\n+- marcoagner\n+- MarcoFalke\n+- Martin Erlandsson\n+- Marty Jones\n+- Mason Simon\n+- Michael Ford\n+- Michael Goldstein\n+- Michael Polzer\n+- Mitchell Cash\n+- mruddy\n+- Murray Nesbitt\n+- OverlordQ\n+- Patrick Strateman\n+- Pierre Rochard\n+- Pieter Wuille\n+- poiuty\n+- practicalswift\n+- priscoan\n+- qubenix\n+- riordant\n+- Russell Yanofsky\n+- Samuel Dobson\n+- sanket1729\n+- Sjors Provoost\n+- Stephan Oeste\n+- Steven Roose\n+- Suhas Daftuar\n+- TheCharlatan\n+- Tim Ruffing\n+- Vidar Holen\n+- vim88\n+- Walter\n+- whythat\n+- Wladimir J. van der Laan\n+- Zain Iqbal Allarakhia\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "7522310ce2e9c444bcceea00829a45de0b20d6de",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 49,
        "deletions": 15,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -4,14 +4,14 @@ Release Process\n Before every release candidate:\n \n * Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n-\n * Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n+* Update release candidate version in `configure.ac` (`CLIENT_VERSION_RC`).\n \n Before every minor and major release:\n \n * Update [bips.md](bips.md) to account for changes since the last release.\n-* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n-* Write release notes (see below)\n+* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_RC` to `0`).\n+* Write release notes (see below).\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n * Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n@@ -22,10 +22,16 @@ Before every minor and major release:\n Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n-* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n+* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n   [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n-* Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n+* Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release.\n+* In `configure.ac` and `build_msvc/bitcoin_config.h` on _the master branch_:\n+  - update `CLIENT_VERSION_MINOR` version\n+* In `configure.ac` and `build_msvc/bitcoin_config.h` on _a new release branch_ (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd972fca3dd4a33cfff90bf901b71a687e7)):\n+  - update `CLIENT_VERSION_MINOR` version\n+  - set `CLIENT_VERSION_REVISION` to `0`\n+  - set `CLIENT_VERSION_IS_RELEASE` to `true`\n \n ### First time / New builders\n \n@@ -86,10 +92,12 @@ Ensure gitian-builder is up-to-date:\n     pushd ./gitian-builder\n     mkdir -p inputs\n     wget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-    wget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    echo 'a8c4e9cafba922f89de0df1f2152e7be286aba73f78505169bc351a7938dd911 inputs/osslsigncode-Backports-to-1.7.1.patch' | sha256sum -c\n+    wget -P inputs https://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    echo 'f9a8cdb38b9c309326764ebc937cba1523a3a751a7ab05df3ecc99d18ae466c9 inputs/osslsigncode-1.7.1.tar.gz' | sha256sum -c\n     popd\n \n-Create the macOS SDK tarball, see the [macOS readme](README_osx.md) for details, and copy it into the inputs directory.\n+Create the macOS SDK tarball, see the [macOS build instructions](build-osx.md#deterministic-macos-dmg-notes) for details, and copy it into the inputs directory.\n \n ### Optional: Seed the Gitian sources cache and offline git repositories\n \n@@ -288,22 +296,48 @@ bitcoin.org (see below for bitcoin.org update instructions).\n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n     as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n \n+- Update other repositories and websites for new version\n+\n+  - bitcoincore.org blog post\n+\n+  - bitcoincore.org RPC documentation update\n+\n+  - Update packaging repo\n+\n+      - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+\n+      - Create a new branch for the major release \"0.xx\" (used to build the snap package)\n+\n+      - Notify MarcoFalke so that he can start building the snap package\n+\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging (Click \"Import Now\" to fetch the branch)\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n+        - Name it \"bitcoin-core-snap-0.xx\"\n+        - Leave owner and series as-is\n+        - Select architectures that are compiled via gitian\n+        - Leave \"automatically build when branch changes\" unticked\n+        - Tick \"automatically upload to store\"\n+        - Put \"bitcoin-core\" in the registered store package name field\n+        - Tick the \"edge\" box\n+        - Put \"0.xx\" in the track field\n+        - Click \"create snap package\"\n+        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest gitian results)\n+        - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n+\n+  - This repo\n+\n+      - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n+\n+      - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n+\n - Announce the release:\n \n   - bitcoin-dev and bitcoin-core-dev mailing list\n \n   - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n \n-  - bitcoincore.org blog post\n-\n   - Update title of #bitcoin on Freenode IRC\n \n   - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n \n-  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n-\n-  - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n-\n-  - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n-\n   - Celebrate"
      },
      {
        "sha": "e960863a80cf40621c7bcc20df2f6bd93d69ca18",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,11 +7,11 @@ The purpose of this library is to make the verification functionality that is cr\n \n ### API\n \n-The interface is defined in the C header `bitcoinconsensus.h` located in  `src/script/bitcoinconsensus.h`.\n+The interface is defined in the C header `bitcoinconsensus.h` located in `src/script/bitcoinconsensus.h`.\n \n #### Version\n \n-`bitcoinconsensus_version` returns an `unsigned int` with the API version *(currently at an experimental `0`)*.\n+`bitcoinconsensus_version` returns an `unsigned int` with the API version *(currently `1`)*.\n \n #### Script Validation\n "
      },
      {
        "sha": "cfb7f16666c12035825275ef78453b7b03ac252c",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -16,7 +16,7 @@ outgoing connections, but more is possible.\n \n \t-onion=ip:port  Set the proxy server to use for Tor hidden services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n-\t                to explicitly disable access to hidden service.\n+\t                to explicitly disable access to hidden services.\n \n \t-listen         When using -proxy, listening is disabled by default. If you want\n \t                to run a hidden service (see next section), you'll need to enable\n@@ -27,6 +27,11 @@ outgoing connections, but more is possible.\n \t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n \t                other P2P nodes.\n \n+\t-onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n+\t                connections are not affected by this option. This option can be\n+\t                specified multiple times to allow multiple network types, e.g.\n+\t                ipv4, ipv6, or onion.\n+\n In a typical situation, this suffices to run behind a Tor proxy:\n \n \t./bitcoind -proxy=127.0.0.1:9050\n@@ -109,9 +114,13 @@ preconfigured and the creation of a hidden service is automatic. If permission p\n are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\n the user running bitcoind to the same group and setting permissions appropriately. On\n Debian-based systems the user running bitcoind can be added to the debian-tor group,\n-which has the appropriate permissions. An alternative authentication method is the use\n-of the `-torpassword` flag and a `hash-password` which can be enabled and specified in\n-Tor configuration.\n+which has the appropriate permissions.\n+\n+An alternative authentication method is the use\n+of the `-torpassword=password` option. The `password` is the clear text form that\n+was used when generating the hashed password for the `HashedControlPassword` option\n+in the tor configuration file. The hashed password can be obtained with the command\n+`tor --hash-password password` (read the tor manual for more details).\n \n ## 4. Privacy recommendations\n "
      },
      {
        "sha": "b9a10b65271be4c0565eedb1d88b04fab43665c5",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,7 +8,7 @@ Transifex is setup to monitor the GitHub repo for updates, and when code contain\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n-See the [Transifex Bitcoin project](https://www.transifex.com/projects/p/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n+See the [Transifex Bitcoin project](https://www.transifex.com/bitcoin/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n ### Writing code with translations\n We use automated scripts to help extract translations in both Qt, and non-Qt source files. It is rarely necessary to manually edit the files in `src/qt/locale/`. The translation source files must adhere to the following format:\n@@ -43,7 +43,7 @@ git commit\n ### Creating a Transifex account\n Visit the [Transifex Signup](https://www.transifex.com/signup/) page to create an account. Take note of your username and password, as they will be required to configure the command-line tool.\n \n-You can find the Bitcoin translation project at [https://www.transifex.com/projects/p/bitcoin/](https://www.transifex.com/projects/p/bitcoin/).\n+You can find the Bitcoin translation project at [https://www.transifex.com/bitcoin/bitcoin/](https://www.transifex.com/bitcoin/bitcoin/).\n \n ### Installing the Transifex client command-line tool\n The client is used to fetch updated translations. If you are having problems, or need more details, see [https://docs.transifex.com/client/installing-the-client](https://docs.transifex.com/client/installing-the-client)\n@@ -68,11 +68,21 @@ The Transifex Bitcoin project config file is included as part of the repo. It ca\n To assist in updating translations, we have created a script to help.\n \n 1. `python contrib/devtools/update-translations.py`\n-2. Update `src/qt/bitcoin_locale.qrc` manually or via\n-   `ls src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/<file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'`\n-3. Update `src/Makefile.qt.include` manually or via\n-   `ls src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'`\n-4. `git add` new translations from `src/qt/locale/`\n+2. `git add` new translations from `src/qt/locale/`\n+3. Update `src/qt/bitcoin_locale.qrc` manually or via\n+```bash\n+git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/<file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+```\n+4. Update `src/Makefile.qt.include` manually or via\n+```bash\n+git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n+```\n+5. Update `build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj` or via\n+```bash\n+git ls-files src/qt/locale/*ts|xargs -n1 basename |\n+  sed 's/@/%40/' |\n+  sed 's/\\(bitcoin_\\(.*\\)\\).ts/    <None Include=\"..\\\\..\\\\src\\\\qt\\\\locale\\\\\\1.ts\">\\n      <DeploymentContent>true<\\/DeploymentContent>\\n    <\\/None>/'\n+```\n \n **Do not directly download translations** one by one from the Transifex website, as we do a few post-processing steps before committing the translations.\n "
      },
      {
        "sha": "634aca35597ccf72580a4095b867c65ad1e67e3d",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -33,25 +33,25 @@ General recommendations\n \n Try not to burden translators with translating messages that are e.g. slight variations of other messages.\n In the GUI, avoid the use of text where an icon or symbol will do.\n-Make sure that placeholder texts in forms don't end up in the list of strings to be translated (use `<string notr=\"true\">`).\n+Make sure that placeholder texts in forms do not end up in the list of strings to be translated (use `<string notr=\"true\">`).\n \n ### Make translated strings understandable\n \n-Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages\n+Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages.\n \n ### Do not translate internal errors\n \n-Do not translate internal errors, or log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n-use a translatable generic message, then log the detailed message to the log. E.g. \"A fatal internal error occurred, see debug.log for details\".\n+Do not translate internal errors, log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n+use a translatable generic message, then log the detailed message to the log. E.g., \"A fatal internal error occurred, see debug.log for details\".\n This helps troubleshooting; if the error is the same for everyone, the likelihood is increased that it can be found using a search engine.\n \n ### Avoid fragments\n \n-Avoid dividing up a message into fragments. Translators see every string separately, so may misunderstand the context if the messages are not self-contained.\n+Avoid dividing up a message into fragments. Translators see every string separately, so they may misunderstand the context if the messages are not self-contained.\n \n ### Avoid HTML in translation strings\n \n-There have been difficulties with use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n+There have been difficulties with the use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n This may sometimes be at conflict with the recommendation in the previous section.\n \n ### Plurals\n@@ -66,7 +66,7 @@ Plurals can be complex in some languages. A quote from the gettext documentation\n     25-31 pliko'w\n     and so on\n \n-In Qt code use tr's third argument for optional plurality. For example:\n+In Qt code, use tr's third argument for optional plurality. For example:\n \n     tr(\"%n hour(s)\",\"\",secs/HOUR_IN_SECONDS);\n     tr(\"%n day(s)\",\"\",secs/DAY_IN_SECONDS);\n@@ -82,7 +82,7 @@ This adds `<numerusform>`s to the respective `.ts` file, which can be translated\n         </translation>\n     </message>\n \n-Where it is possible try to avoid embedding numbers into the flow of the string at all. e.g.\n+Where possible, try to avoid embedding numbers into the flow of the string at all. E.g.,\n \n     WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\n "
      },
      {
        "sha": "38085cec353ad321fec081e69769708a64244bde",
        "filename": "doc/travis-ci.md",
        "status": "removed",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/travis-ci.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/doc/travis-ci.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/travis-ci.md?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,42 +0,0 @@\n-Travis CI\n-=========\n-\n-Support for using travis-ci has been added in order to automate pull-testing.\n-See [travis-ci.org](https://travis-ci.org/) for more info\n-\n-This procedure is different than the pull-tester that came before it in a few\n-ways.\n-\n-There is nothing to administer. This is a major feature as it means\n-that builds have no local state. Because there is no ability to login to the\n-builders to install packages (tools, dependencies, etc), the entire build\n-procedure must instead be controlled by a declarative script `.travis.yml`.\n-This script declares each build configuration, creates virtual machines as\n-necessary, builds, then discards the virtual machines.\n-\n-A build matrix is constructed to test a wide range of configurations, rather\n-than a single pass/fail. This helps to catch build failures and logic errors\n-that present on platforms other than the ones the author has tested. This\n-matrix is defined in the build script and can be changed at any time.\n-\n-All builders use the dependency-generator in the [depends dir](/depends), rather than\n-using apt-get to install build dependencies. This guarantees that the tester\n-is using the same versions as Gitian, so the build results are nearly identical\n-to what would be found in a final release. However, this also means that builds\n-will fail if new dependencies are introduced without being added to the\n-dependency generator.\n-\n-In order to avoid rebuilding all dependencies for each build, the binaries are\n-cached and re-used when possible. Changes in the dependency-generator will\n-trigger cache-invalidation and rebuilds as necessary.\n-\n-These caches can be manually removed if necessary. This is one of the very few\n-manual operations that is possible with Travis, and it can be done by the\n-Bitcoin Core committer via the Travis web interface.\n-\n-In some cases, secure strings may be needed for hiding sensitive info such as\n-private keys or URLs. The travis client may be used to create these strings:\n-http://docs.travis-ci.com/user/encryption-keys/\n-\n-For the details of the build descriptor, see the official docs:\n-http://docs.travis-ci.com/user/build-configuration/"
      },
      {
        "sha": "7ffc5623b63abcd3f205e308628305994fed7bcc",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -33,8 +33,10 @@ buffering or reassembly.\n \n ## Prerequisites\n \n-The ZeroMQ feature in Bitcoin Core requires ZeroMQ API version 4.x or\n-newer. Typically, it is packaged by distributions as something like\n+The ZeroMQ feature in Bitcoin Core requires the ZeroMQ API >= 4.0.0\n+[libzmq](https://github.com/zeromq/libzmq/releases).\n+For version information, see [dependencies.md](dependencies.md).\n+Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n@@ -64,10 +66,21 @@ Currently, the following notifications are supported:\n The socket type is PUB and the address must be a valid ZeroMQ socket\n address. The same address can be used in more than one notification.\n \n+The option to set the PUB socket's outbound message high water mark\n+(SNDHWM) may be set individually for each notification:\n+\n+    -zmqpubhashtxhwm=n\n+    -zmqpubhashblockhwm=n\n+    -zmqpubrawblockhwm=n\n+    -zmqpubrawtxhwm=n\n+\n+The high water mark value must be an integer greater than or equal to 0.\n+\n For instance:\n \n     $ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n-               -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw\n+               -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw \\\n+               -zmqpubhashtxhwm=10000\n \n Each PUB notification has a topic and body, where the header\n corresponds to the notification type. For instance, for the"
      },
      {
        "sha": "b5475dc1c68d69e45a6f7a3c09e712bd9051c042",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -4,6 +4,10 @@\n  \n # Network-related settings:\n \n+# Note that if you use testnet or regtest, particularly with the options\n+# addnode, connect, port, bind, rpcport, rpcbind or wallet, you will also\n+# want to read \"[Sections]\" further down.\n+\n # Run on the test network instead of the real bitcoin network.\n #testnet=0\n \n@@ -53,6 +57,9 @@\n # Listening mode, enabled by default except when 'connect' is being used\n #listen=1\n \n+# Port on which to listen for connections (default: 8333, testnet: 18333, regtest: 18444)\n+#port=\n+\n # Maximum number of inbound+outbound connections.\n #maxconnections=\n \n@@ -71,12 +78,9 @@\n # is .cookie and found in the `-datadir` being used for bitcoind. This option is typically used\n # when the server and client are run as the same user.\n #\n-# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC api. The first\n-# method(DEPRECATED) is to set this pair for the server and client:\n-#rpcuser=Ulysseys\n-#rpcpassword=YourSuperGreatPasswordNumber_DO_NOT_USE_THIS_OR_YOU_WILL_GET_ROBBED_385593\n+# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC API.\n #\n-# The second method `rpcauth` can be added to server startup argument. It is set at initialization time\n+# The config option `rpcauth` can be added to server startup argument. It is set at initialization time\n # using the output from the script in share/rpcauth/rpcauth.py after providing a username:\n #\n # ./share/rpcauth/rpcauth.py alice\n@@ -116,21 +120,25 @@\n # running on another host using this option:\n #rpcconnect=127.0.0.1\n \n+# Wallet options\n+\n+# Specify where to find wallet, lockfile and logs. If not present, those files will be\n+# created as new.\n+#wallet=</path/to/dir>\n+\n # Create transactions that have enough fees so they are likely to begin confirmation within n blocks (default: 6).\n # This setting is over-ridden by the -paytxfee option.\n #txconfirmtarget=n\n \n+# Pay a transaction fee every time you send bitcoins.\n+#paytxfee=0.000x\n+\n # Miscellaneous options\n \n # Pre-generate this many public/private key pairs, so wallet backups will be valid for\n # both prior transactions and several dozen future transactions.\n #keypool=100\n \n-# Pay an optional transaction fee every time you send bitcoins.  Transactions with fees\n-# are more likely than free transactions to be included in generated blocks, so may\n-# be validated sooner.\n-#paytxfee=0.00\n-\n # Enable pruning to reduce storage requirements by deleting old blocks. \n # This mode is incompatible with -txindex and -rescan.\n # 0 = default (no pruning).\n@@ -145,3 +153,19 @@\n \n # Minimize to the system tray\n #minimizetotray=1\n+\n+# [Sections]\n+# Most options apply to mainnet, testnet and regtest.\n+# If you want to confine an option to just one network, you should add it in the\n+# relevant section below.\n+# EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet\n+# only apply to mainnet unless they appear in the appropriate section below.\n+\n+# Options only for mainnet\n+[main]\n+\n+# Options only for testnet\n+[test]\n+\n+# Options only for regtest\n+[regtest]"
      },
      {
        "sha": "3cd130ce48450dd40976817964831bf59b764453",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -17,7 +17,7 @@\n   <string>APPL</string>\n \n   <key>CFBundleGetInfoString</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@.@CLIENT_VERSION_BUILD@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n \n   <key>CFBundleShortVersionString</key>\n   <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@</string>\n@@ -97,7 +97,7 @@\n   <key>NSHighResolutionCapable</key>\n     <string>True</string>\n \n-  <key>LSAppNapIsDisabled</key>\n+  <key>NSRequiresAquaSystemAppearance</key>\n     <string>True</string>\n   \n   <key>LSApplicationCategoryType</key>"
      },
      {
        "sha": "6f627b867bca0546a9301332865eec3e9389abb0",
        "filename": "share/rpcauth/README.md",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,12 +3,16 @@ RPC Tools\n \n ### [RPCAuth](/share/rpcauth) ###\n \n-Create login credentials for a JSON-RPC user.\n+```\n+usage: rpcauth.py [-h] username [password]\n \n-Usage:\n+Create login credentials for a JSON-RPC user\n \n-    ./rpcauth.py <username>\n+positional arguments:\n+  username    the username for authentication\n+  password    leave empty to generate a random password or specify \"-\" to\n+              prompt for password\n \n-in which case the script will generate a password. To specify a custom password do:\n-\n-    ./rpcauth.py <username> <password>\n+optional arguments:\n+  -h, --help  show this help message and exit\n+  ```"
      },
      {
        "sha": "b14c80171e8ff8c91016004ee355b739f6bd20fb",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,45 +3,44 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import sys\n-import os\n-from random import SystemRandom\n-import base64\n-import hmac\n+from argparse import ArgumentParser\n+from base64 import urlsafe_b64encode\n+from binascii import hexlify\n+from getpass import getpass\n+from os import urandom\n \n-def generate_salt():\n-    # This uses os.urandom() underneath\n-    cryptogen = SystemRandom()\n+import hmac\n \n-    # Create 16 byte hex salt\n-    salt_sequence = [cryptogen.randrange(256) for _ in range(16)]\n-    return ''.join([format(r, 'x') for r in salt_sequence])\n+def generate_salt(size):\n+    \"\"\"Create size byte hex salt\"\"\"\n+    return hexlify(urandom(size)).decode()\n \n def generate_password():\n     \"\"\"Create 32 byte b64 password\"\"\"\n-    return base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')\n+    return urlsafe_b64encode(urandom(32)).decode('utf-8')\n \n def password_to_hmac(salt, password):\n     m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), 'SHA256')\n     return m.hexdigest()\n \n def main():\n-    if len(sys.argv) < 2:\n-        sys.stderr.write('Please include username (and an optional password, will generate one if not provided) as an argument.\\n')\n-        sys.exit(0)\n+    parser = ArgumentParser(description='Create login credentials for a JSON-RPC user')\n+    parser.add_argument('username', help='the username for authentication')\n+    parser.add_argument('password', help='leave empty to generate a random password or specify \"-\" to prompt for password', nargs='?')\n+    args = parser.parse_args()\n \n-    username = sys.argv[1]\n+    if not args.password:\n+        args.password = generate_password()\n+    elif args.password == '-':\n+        args.password = getpass()\n \n-    salt = generate_salt()\n-    if len(sys.argv) > 2:\n-        password = sys.argv[2]\n-    else:\n-        password = generate_password()\n-    password_hmac = password_to_hmac(salt, password)\n+    # Create 16 byte hex salt\n+    salt = generate_salt(16)\n+    password_hmac = password_to_hmac(salt, args.password)\n \n     print('String to be appended to bitcoin.conf:')\n-    print('rpcauth={0}:{1}${2}'.format(username, salt, password_hmac))\n-    print('Your password:\\n{0}'.format(password))\n+    print('rpcauth={0}:{1}${2}'.format(args.username, salt, password_hmac))\n+    print('Your password:\\n{0}'.format(args.password))\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "acf9e8666759bb4d0ab1ed7e75bed34baf463f2e",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,6 @@ SetCompressor /SOLID lzma\n \n # General Symbol Definitions\n !define REGKEY \"SOFTWARE\\$(^Name)\"\n-!define VERSION @CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@\n !define COMPANY \"@PACKAGE_NAME@ project\"\n !define URL @PACKAGE_URL@\n \n@@ -49,7 +48,7 @@ Var StartMenuGroup\n !insertmacro MUI_LANGUAGE English\n \n # Installer attributes\n-OutFile @abs_top_srcdir@/@PACKAGE_TARNAME@-${VERSION}-win@WINDOWS_BITS@-setup.exe\n+OutFile @abs_top_srcdir@/@PACKAGE_TARNAME@-@PACKAGE_VERSION@-win@WINDOWS_BITS@-setup.exe\n !if \"@WINDOWS_BITS@\" == \"64\"\n InstallDir $PROGRAMFILES64\\Bitcoin\n !else\n@@ -59,12 +58,12 @@ CRCCheck on\n XPStyle on\n BrandingText \" \"\n ShowInstDetails show\n-VIProductVersion ${VERSION}.@CLIENT_VERSION_BUILD@\n+VIProductVersion @CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@.@CLIENT_VERSION_BUILD@\n VIAddVersionKey ProductName \"@PACKAGE_NAME@\"\n-VIAddVersionKey ProductVersion \"${VERSION}\"\n+VIAddVersionKey ProductVersion \"@PACKAGE_VERSION@\"\n VIAddVersionKey CompanyName \"${COMPANY}\"\n VIAddVersionKey CompanyWebsite \"${URL}\"\n-VIAddVersionKey FileVersion \"${VERSION}\"\n+VIAddVersionKey FileVersion \"@PACKAGE_VERSION@\"\n VIAddVersionKey FileDescription \"\"\n VIAddVersionKey LegalCopyright \"\"\n InstallDirRegKey HKCU \"${REGKEY}\" Path\n@@ -80,6 +79,8 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\\daemon\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_TX_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_WALLET_TOOL_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR\n@@ -97,7 +98,7 @@ Section -post SEC0001\n     CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall $(^Name).lnk\" $INSTDIR\\uninstall.exe\n     !insertmacro MUI_STARTMENU_WRITE_END\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayName \"$(^Name)\"\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayVersion \"${VERSION}\"\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayVersion \"@PACKAGE_VERSION@\"\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" Publisher \"${COMPANY}\"\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" URLInfoAbout \"${URL}\"\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayIcon $INSTDIR\\uninstall.exe"
      },
      {
        "sha": "ed5cab7f040d1a6437a1edd4a284ef9e53a1bec8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 133,
        "deletions": 28,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -41,6 +41,7 @@ LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n endif\n if ENABLE_WALLET\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+LIBBITCOIN_WALLET_TOOL=libbitcoin_wallet_tool.a\n endif\n \n LIBBITCOIN_CRYPTO= $(LIBBITCOIN_CRYPTO_BASE)\n@@ -70,6 +71,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n@@ -83,15 +85,25 @@ if BUILD_BITCOIND\n   bin_PROGRAMS += bitcoind\n endif\n \n-if BUILD_BITCOIN_UTILS\n-  bin_PROGRAMS += bitcoin-cli bitcoin-tx\n+if BUILD_BITCOIN_CLI\n+  bin_PROGRAMS += bitcoin-cli\n+endif\n+if BUILD_BITCOIN_TX\n+  bin_PROGRAMS += bitcoin-tx\n+endif\n+if ENABLE_WALLET\n+if BUILD_BITCOIN_WALLET\n+  bin_PROGRAMS += bitcoin-wallet\n+endif\n endif\n \n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  attributes.h \\\n+  banman.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\\n@@ -101,27 +113,31 @@ BITCOIN_CORE_H = \\\n   chainparams.h \\\n   chainparamsbase.h \\\n   chainparamsseeds.h \\\n-  checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n   coins.h \\\n   compat.h \\\n+  compat/assumptions.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/tx_check.h \\\n   consensus/tx_verify.h \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  flatfile.h \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n   index/base.h \\\n+  index/blockfilterindex.h \\\n   index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n+  interfaces/chain.h \\\n   interfaces/handler.h \\\n   interfaces/node.h \\\n   interfaces/wallet.h \\\n@@ -139,23 +155,28 @@ BITCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netmessagemaker.h \\\n+  node/coin.h \\\n+  node/psbt.h \\\n+  node/transaction.h \\\n   noui.h \\\n+  optional.h \\\n   outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n+  policy/settings.h \\\n   pow.h \\\n   protocol.h \\\n+  psbt.h \\\n   random.h \\\n   reverse_iterator.h \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n-  rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n-  rpc/rawtransaction.h \\\n+  rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n@@ -180,22 +201,34 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n-  util.h \\\n-  utilmemory.h \\\n-  utilmoneystr.h \\\n-  utiltime.h \\\n+  util/bip32.h \\\n+  util/bytevectorhash.h \\\n+  util/error.h \\\n+  util/fees.h \\\n+  util/system.h \\\n+  util/memory.h \\\n+  util/moneystr.h \\\n+  util/rbf.h \\\n+  util/threadnames.h \\\n+  util/time.h \\\n+  util/url.h \\\n+  util/validation.h \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n+  versionbitsinfo.h \\\n   walletinitinterface.h \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n+  wallet/load.h \\\n+  wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/wallettool.h \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n@@ -213,32 +246,39 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n+# Contains code accessing mempool and chain state that is meant to be separated\n+# from wallet and gui code (see node/README.md). Shared code should go in\n+# libbitcoin_common or libbitcoin_util libraries, instead.\n libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrdb.cpp \\\n   addrman.cpp \\\n-  bloom.cpp \\\n+  banman.cpp \\\n   blockencodings.cpp \\\n   blockfilter.cpp \\\n   chain.cpp \\\n-  checkpoints.cpp \\\n   consensus/tx_verify.cpp \\\n+  flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\\n+  index/blockfilterindex.cpp \\\n   index/txindex.cpp \\\n+  interfaces/chain.cpp \\\n+  interfaces/node.cpp \\\n   init.cpp \\\n   dbwrapper.cpp \\\n-  merkleblock.cpp \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n+  node/coin.cpp \\\n+  node/psbt.cpp \\\n+  node/transaction.cpp \\\n   noui.cpp \\\n-  outputtype.cpp \\\n   policy/fees.cpp \\\n-  policy/policy.cpp \\\n   policy/rbf.cpp \\\n+  policy/settings.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n@@ -247,7 +287,6 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/net.cpp \\\n   rpc/rawtransaction.cpp \\\n   rpc/server.cpp \\\n-  rpc/util.cpp \\\n   script/sigcache.cpp \\\n   shutdown.cpp \\\n   timedata.cpp \\\n@@ -260,6 +299,13 @@ libbitcoin_server_a_SOURCES = \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n+if ENABLE_WALLET\n+libbitcoin_server_a_SOURCES += wallet/init.cpp\n+endif\n+if !ENABLE_WALLET\n+libbitcoin_server_a_SOURCES += dummywallet.cpp\n+endif\n+\n if ENABLE_ZMQ\n libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -282,7 +328,8 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n-  wallet/init.cpp \\\n+  wallet/load.cpp \\\n+  wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n@@ -291,6 +338,12 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/coinselection.cpp \\\n   $(BITCOIN_CORE_H)\n \n+libbitcoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_wallet_tool_a_SOURCES = \\\n+  wallet/wallettool.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n # crypto primitives library\n crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)\n crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -304,14 +357,18 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha256.h \\\n   crypto/hmac_sha512.cpp \\\n   crypto/hmac_sha512.h \\\n+  crypto/poly1305.h \\\n+  crypto/poly1305.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\\n   crypto/sha1.h \\\n   crypto/sha256.cpp \\\n   crypto/sha256.h \\\n   crypto/sha512.cpp \\\n-  crypto/sha512.h\n+  crypto/sha512.h \\\n+  crypto/siphash.cpp \\\n+  crypto/siphash.h\n \n if USE_ASM\n crypto_libbitcoin_crypto_base_a_SOURCES += crypto/sha256_sse4.cpp\n@@ -345,6 +402,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n+  consensus/tx_check.cpp \\\n   consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\\n@@ -367,8 +425,8 @@ libbitcoin_consensus_a_SOURCES = \\\n   tinyformat.h \\\n   uint256.cpp \\\n   uint256.h \\\n-  utilstrencodings.cpp \\\n-  utilstrencodings.h \\\n+  util/strencodings.cpp \\\n+  util/strencodings.h \\\n   version.h\n \n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n@@ -377,6 +435,7 @@ libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   bech32.cpp \\\n+  bloom.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n@@ -385,15 +444,22 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   key_io.cpp \\\n   keystore.cpp \\\n+  merkleblock.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n+  outputtype.cpp \\\n   policy/feerate.cpp \\\n+  policy/policy.cpp \\\n   protocol.cpp \\\n+  psbt.cpp \\\n+  rpc/rawtransaction_util.cpp \\\n+  rpc/util.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n+  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -411,17 +477,24 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n   interfaces/handler.cpp \\\n-  interfaces/node.cpp \\\n   logging.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n-  util.cpp \\\n-  utilmoneystr.cpp \\\n-  utilstrencodings.cpp \\\n-  utiltime.cpp \\\n+  util/bip32.cpp \\\n+  util/bytevectorhash.cpp \\\n+  util/error.cpp \\\n+  util/fees.cpp \\\n+  util/system.cpp \\\n+  util/moneystr.cpp \\\n+  util/rbf.cpp \\\n+  util/threadnames.cpp \\\n+  util/strencodings.cpp \\\n+  util/time.cpp \\\n+  util/url.cpp \\\n+  util/validation.cpp \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT\n@@ -449,9 +522,12 @@ if TARGET_WINDOWS\n bitcoind_SOURCES += bitcoind-res.rc\n endif\n \n+# Libraries below may be listed more than once to resolve circular dependencies (see\n+# https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking#circular-dependency)\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n@@ -463,7 +539,7 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -481,7 +557,7 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO)\n \n-bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-tx binary #\n@@ -505,6 +581,33 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-wallet binary #\n+bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+bitcoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n+endif\n+\n+bitcoin_wallet_LDADD = \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_ZMQ) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBLEVELDB_SSE42) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1) \\\n+  $(LIBUNIVALUE)\n+\n+bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n@@ -569,18 +672,20 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(top_srcdir)/contrib/devtools/symbol-check.py < $(bin_PROGRAMS)\n+\t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py < $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n+\t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n endif\n \n+if ENABLE_BIP70\n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n+endif\n \n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include"
      },
      {
        "sha": "ae7eb19ceb20d2778be227428f90be19ffcfdad6",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -18,24 +18,32 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/block_assemble.cpp \\\n   bench/checkblock.cpp \\\n   bench/checkqueue.cpp \\\n+  bench/duplicate_inputs.cpp \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n+  bench/rpc_mempool.cpp \\\n   bench/verify_script.cpp \\\n   bench/base58.cpp \\\n   bench/bech32.cpp \\\n   bench/lockedpool.cpp \\\n-  bench/prevector.cpp\n+  bench/poly1305.cpp \\\n+  bench/prevector.cpp \\\n+  test/setup_common.h \\\n+  test/setup_common.cpp \\\n+  test/util.h \\\n+  test/util.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -46,17 +54,20 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1) \\\n-  $(LIBUNIVALUE)\n+  $(LIBUNIVALUE) \\\n+  $(EVENT_PTHREADS_LIBS) \\\n+  $(EVENT_LIBS)\n \n if ENABLE_ZMQ\n bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n+bench_bench_bitcoin_SOURCES += bench/wallet_balance.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "bd08bcb4ed0c002950c19ad96d64a8996d5b4743",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -24,7 +24,7 @@ LEVELDB_CPPFLAGS_INT += -DLEVELDB_ATOMIC_PRESENT\n LEVELDB_CPPFLAGS_INT += -D__STDC_LIMIT_MACROS\n \n if TARGET_WINDOWS\n-LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_WINDOWS -DWINVER=0x0500 -D__USE_MINGW_ANSI_STDIO=1\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_WINDOWS -D__USE_MINGW_ANSI_STDIO=1\n else\n LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_POSIX\n endif"
      },
      {
        "sha": "ba6523d7c2e7d4abee944afc48fb0d006f59494b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 35,
        "deletions": 12,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -120,9 +120,9 @@ QT_MOC_CPP = \\\n   qt/moc_bantablemodel.cpp \\\n   qt/moc_bitcoinaddressvalidator.cpp \\\n   qt/moc_bitcoinamountfield.cpp \\\n+  qt/moc_bitcoin.cpp \\\n   qt/moc_bitcoingui.cpp \\\n   qt/moc_bitcoinunits.cpp \\\n-  qt/moc_callback.cpp \\\n   qt/moc_clientmodel.cpp \\\n   qt/moc_coincontroldialog.cpp \\\n   qt/moc_coincontroltreewidget.cpp \\\n@@ -157,18 +157,18 @@ QT_MOC_CPP = \\\n   qt/moc_transactiontablemodel.cpp \\\n   qt/moc_transactionview.cpp \\\n   qt/moc_utilitydialog.cpp \\\n+  qt/moc_walletcontroller.cpp \\\n   qt/moc_walletframe.cpp \\\n   qt/moc_walletmodel.cpp \\\n   qt/moc_walletview.cpp\n \n BITCOIN_MM = \\\n   qt/macdockiconhandler.mm \\\n-  qt/macnotificationhandler.mm\n+  qt/macnotificationhandler.mm \\\n+  qt/macos_appnap.mm\n \n QT_MOC = \\\n-  qt/bitcoin.moc \\\n   qt/bitcoinamountfield.moc \\\n-  qt/callback.moc \\\n   qt/intro.moc \\\n   qt/overviewpage.moc \\\n   qt/rpcconsole.moc\n@@ -178,9 +178,15 @@ QT_QRC = qt/bitcoin.qrc\n QT_QRC_LOCALE_CPP = qt/qrc_bitcoin_locale.cpp\n QT_QRC_LOCALE = qt/bitcoin_locale.qrc\n \n+if ENABLE_BIP70\n PROTOBUF_CC = qt/paymentrequest.pb.cc\n PROTOBUF_H = qt/paymentrequest.pb.h\n PROTOBUF_PROTO = qt/paymentrequest.proto\n+else\n+PROTOBUF_CC =\n+PROTOBUF_H =\n+PROTOBUF_PROTO =\n+endif\n \n BITCOIN_QT_H = \\\n   qt/addressbookpage.h \\\n@@ -189,9 +195,9 @@ BITCOIN_QT_H = \\\n   qt/bantablemodel.h \\\n   qt/bitcoinaddressvalidator.h \\\n   qt/bitcoinamountfield.h \\\n+  qt/bitcoin.h \\\n   qt/bitcoingui.h \\\n   qt/bitcoinunits.h \\\n-  qt/callback.h \\\n   qt/clientmodel.h \\\n   qt/coincontroldialog.h \\\n   qt/coincontroltreewidget.h \\\n@@ -202,6 +208,7 @@ BITCOIN_QT_H = \\\n   qt/intro.h \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n+  qt/macos_appnap.h \\\n   qt/modaloverlay.h \\\n   qt/networkstyle.h \\\n   qt/notificator.h \\\n@@ -231,6 +238,7 @@ BITCOIN_QT_H = \\\n   qt/transactiontablemodel.h \\\n   qt/transactionview.h \\\n   qt/utilitydialog.h \\\n+  qt/walletcontroller.h \\\n   qt/walletframe.h \\\n   qt/walletmodel.h \\\n   qt/walletmodeltransaction.h \\\n@@ -297,6 +305,7 @@ RES_ICONS = \\\n \n BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n+  qt/bitcoin.cpp \\\n   qt/bitcoinaddressvalidator.cpp \\\n   qt/bitcoinamountfield.cpp \\\n   qt/bitcoingui.cpp \\\n@@ -330,7 +339,6 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n-  qt/paymentrequestplus.cpp \\\n   qt/paymentserver.cpp \\\n   qt/receivecoinsdialog.cpp \\\n   qt/receiverequestdialog.cpp \\\n@@ -344,18 +352,25 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/transactionrecord.cpp \\\n   qt/transactiontablemodel.cpp \\\n   qt/transactionview.cpp \\\n+  qt/walletcontroller.cpp \\\n   qt/walletframe.cpp \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n \n+BITCOIN_QT_WALLET_BIP70_CPP = \\\n+  qt/paymentrequestplus.cpp\n+\n BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n if TARGET_WINDOWS\n BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n endif\n if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n-endif\n+if ENABLE_BIP70\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_BIP70_CPP)\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n RES_IMAGES =\n \n@@ -372,6 +387,9 @@ qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n+if TARGET_DARWIN\n+  qt_libbitcoinqt_a_SOURCES += $(BITCOIN_MM)\n+endif\n \n nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(PROTOBUF_CC) \\\n   $(PROTOBUF_H) $(QT_QRC_CPP) $(QT_QRC_LOCALE_CPP)\n@@ -394,10 +412,7 @@ qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDE\n   $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n-qt_bitcoin_qt_SOURCES = qt/bitcoin.cpp\n-if TARGET_DARWIN\n-  qt_bitcoin_qt_SOURCES += $(BITCOIN_MM)\n-endif\n+qt_bitcoin_qt_SOURCES = qt/main.cpp\n if TARGET_WINDOWS\n   qt_bitcoin_qt_SOURCES += $(BITCOIN_RC)\n endif\n@@ -409,8 +424,16 @@ if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+if ENABLE_BIP70\n+qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n+else\n+if TARGET_WINDOWS\n+qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n+endif\n+endif\n+qt_bitcoin_qt_LDADD += $(CRYPTO_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n "
      },
      {
        "sha": "4acfff809e5b23e1786e52aaa3d54f2517383529",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,19 +6,24 @@ bin_PROGRAMS += qt/test/test_bitcoin-qt\n TESTS += qt/test/test_bitcoin-qt\n \n TEST_QT_MOC_CPP = \\\n+  qt/test/moc_apptests.cpp \\\n   qt/test/moc_compattests.cpp \\\n   qt/test/moc_rpcnestedtests.cpp \\\n   qt/test/moc_uritests.cpp\n \n if ENABLE_WALLET\n TEST_QT_MOC_CPP += \\\n   qt/test/moc_addressbooktests.cpp \\\n-  qt/test/moc_paymentservertests.cpp \\\n   qt/test/moc_wallettests.cpp\n-endif\n+if ENABLE_BIP70\n+TEST_QT_MOC_CPP += \\\n+  qt/test/moc_paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n TEST_QT_H = \\\n   qt/test/addressbooktests.h \\\n+  qt/test/apptests.h \\\n   qt/test/compattests.h \\\n   qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n@@ -28,15 +33,16 @@ TEST_QT_H = \\\n   qt/test/wallettests.h\n \n TEST_BITCOIN_CPP = \\\n-  test/test_bitcoin.cpp\n+  test/setup_common.cpp\n \n TEST_BITCOIN_H = \\\n-  test/test_bitcoin.h\n+  test/setup_common.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n+  qt/test/apptests.cpp \\\n   qt/test/compattests.cpp \\\n   qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\\n@@ -48,10 +54,13 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n-  qt/test/paymentservertests.cpp \\\n   qt/test/wallettests.cpp \\\n   wallet/test/wallet_test_fixture.cpp\n-endif\n+if ENABLE_BIP70\n+qt_test_test_bitcoin_qt_SOURCES += \\\n+  qt/test/paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n "
      },
      {
        "sha": "1144ca8a78a0f5bdac2725752ecdc73519f4862f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 213,
        "deletions": 32,
        "changes": 245,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -2,8 +2,36 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+\n+FUZZ_TARGETS = \\\n+  test/fuzz/address_deserialize \\\n+  test/fuzz/addrman_deserialize \\\n+  test/fuzz/banentry_deserialize \\\n+  test/fuzz/block_deserialize \\\n+  test/fuzz/blockheader_deserialize \\\n+  test/fuzz/blocklocator_deserialize \\\n+  test/fuzz/blockmerkleroot \\\n+  test/fuzz/blocktransactions_deserialize \\\n+  test/fuzz/blocktransactionsrequest_deserialize \\\n+  test/fuzz/blockundo_deserialize \\\n+  test/fuzz/bloomfilter_deserialize \\\n+  test/fuzz/coins_deserialize \\\n+  test/fuzz/diskblockindex_deserialize \\\n+  test/fuzz/inv_deserialize \\\n+  test/fuzz/messageheader_deserialize \\\n+  test/fuzz/netaddr_deserialize \\\n+  test/fuzz/script_flags \\\n+  test/fuzz/service_deserialize \\\n+  test/fuzz/transaction_deserialize \\\n+  test/fuzz/txoutcompressor_deserialize \\\n+  test/fuzz/txundo_deserialize\n+\n+if ENABLE_FUZZ\n+noinst_PROGRAMS += $(FUZZ_TARGETS:=)\n+else\n bin_PROGRAMS += test/test_bitcoin\n-noinst_PROGRAMS += test/test_bitcoin_fuzzy\n+endif\n+\n TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n@@ -23,9 +51,31 @@ RAW_TEST_FILES =\n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TEST_SUITE = \\\n-  test/test_bitcoin_main.cpp \\\n-  test/test_bitcoin.h \\\n-  test/test_bitcoin.cpp\n+  test/main.cpp \\\n+  test/setup_common.h \\\n+  test/setup_common.cpp\n+\n+FUZZ_SUITE = \\\n+  test/setup_common.h \\\n+  test/setup_common.cpp \\\n+  test/fuzz/fuzz.cpp \\\n+  test/fuzz/fuzz.h\n+\n+FUZZ_SUITE_LD_COMMON = \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBLEVELDB) \\\n+ $(LIBLEVELDB_SSE42) \\\n+ $(BOOST_LIBS) \\\n+ $(LIBMEMENV) \\\n+ $(LIBSECP256K1) \\\n+ $(EVENT_LIBS) \\\n+ $(CRYPTO_LIBS) \\\n+ $(EVENT_PTHREADS_LIBS)\n \n # test_bitcoin binary #\n BITCOIN_TESTS =\\\n@@ -42,6 +92,7 @@ BITCOIN_TESTS =\\\n   test/blockchain_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/blockfilter_tests.cpp \\\n+  test/blockfilter_index_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\\n@@ -51,13 +102,15 @@ BITCOIN_TESTS =\\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\\n+  test/flatfile_tests.cpp \\\n+  test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n   test/dbwrapper_tests.cpp \\\n-  test/main_tests.cpp \\\n+  test/validation_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/merkle_tests.cpp \\\n   test/merkleblock_tests.cpp \\\n@@ -85,6 +138,7 @@ BITCOIN_TESTS =\\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n   test/sync_tests.cpp \\\n+  test/util_threadnames_tests.cpp \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n@@ -107,14 +161,18 @@ endif\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n+  wallet/test/db_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\\n-  wallet/test/coinselector_tests.cpp\n+  wallet/test/coinselector_tests.cpp \\\n+  wallet/test/init_tests.cpp\n \n BITCOIN_TEST_SUITE += \\\n   wallet/test/wallet_test_fixture.cpp \\\n-  wallet/test/wallet_test_fixture.h\n+  wallet/test/wallet_test_fixture.h \\\n+  wallet/test/init_test_fixture.cpp \\\n+  wallet/test/init_test_fixture.h\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n@@ -128,44 +186,158 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ\n-test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-#\n-\n-# test_bitcoin_fuzzy binary #\n-test_test_bitcoin_fuzzy_SOURCES = test/test_bitcoin_fuzzy.cpp\n-test_test_bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_test_bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_test_bitcoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-test_test_bitcoin_fuzzy_LDADD = \\\n-  $(LIBUNIVALUE) \\\n-  $(LIBBITCOIN_SERVER) \\\n-  $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_CONSENSUS) \\\n-  $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBBITCOIN_CRYPTO_SSE41) \\\n-  $(LIBBITCOIN_CRYPTO_AVX2) \\\n-  $(LIBBITCOIN_CRYPTO_SHANI) \\\n-  $(LIBSECP256K1)\n-\n-test_test_bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n-#\n+\n+if ENABLE_FUZZ\n+test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n+test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTRANSACTION_DESERIALIZE=1\n+test_fuzz_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n+test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocklocator_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n+test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockmerkleroot_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n+test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addrman_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n+test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n+test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_banentry_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n+test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n+test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n+test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n+test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_netaddr_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n+test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n+test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n+test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_messageheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n+test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n+test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_inv_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n+test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_bloomfilter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n+test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_diskblockindex_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n+test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txoutcompressor_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n+test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactions_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n+test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n \n $(BITCOIN_TESTS): $(GENERATED_TEST_FILES)\n \n-CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)\n+CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES) $(BITCOIN_TESTS:=.log)\n \n CLEANFILES += $(CLEAN_BITCOIN_TEST)\n \n+if TARGET_WINDOWS\n bitcoin_test: $(TEST_BINARY)\n+else\n+if ENABLE_BENCH\n+bitcoin_test: $(TEST_BINARY) $(BENCH_BINARY)\n+else\n+bitcoin_test: $(TEST_BINARY)\n+endif\n+endif\n \n bitcoin_test_check: $(TEST_BINARY) FORCE\n \t$(MAKE) check-TESTS TESTS=$^\n@@ -174,10 +346,19 @@ bitcoin_test_clean : FORCE\n \trm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)\n \n check-local: $(BITCOIN_TESTS:.cpp=.cpp.test)\n+if BUILD_BITCOIN_TX\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n+endif\n \t@echo \"Running test/util/rpcauth-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py\n+if TARGET_WINDOWS\n+else\n+if ENABLE_BENCH\n+\t@echo \"Running bench/bench_bitcoin -evals=1 -scaling=0...\"\n+\t$(BENCH_BINARY) -evals=1 -scaling=0 > /dev/null\n+endif\n+endif\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "c6083f5554be16a8b55f36a2a5b140114dfe41e0",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,7 +12,7 @@\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n-#include <util.h>\n+#include <util/system.h>\n \n namespace {\n \n@@ -105,19 +105,18 @@ bool DeserializeFileDB(const fs::path& path, Data& data)\n \n }\n \n-CBanDB::CBanDB()\n+CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))\n {\n-    pathBanlist = GetDataDir() / \"banlist.dat\";\n }\n \n bool CBanDB::Write(const banmap_t& banSet)\n {\n-    return SerializeFileDB(\"banlist\", pathBanlist, banSet);\n+    return SerializeFileDB(\"banlist\", m_ban_list_path, banSet);\n }\n \n bool CBanDB::Read(banmap_t& banSet)\n {\n-    return DeserializeFileDB(pathBanlist, banSet);\n+    return DeserializeFileDB(m_ban_list_path, banSet);\n }\n \n CAddrDB::CAddrDB()"
      },
      {
        "sha": "290b63dd1288d908d366fc1f30fbf87f5ebef7a2",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -43,6 +43,11 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n+    explicit CBanEntry(int64_t n_create_time_in, BanReason ban_reason_in) : CBanEntry(n_create_time_in)\n+    {\n+        banReason = ban_reason_in;\n+    }\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -92,9 +97,9 @@ class CAddrDB\n class CBanDB\n {\n private:\n-    fs::path pathBanlist;\n+    const fs::path m_ban_list_path;\n public:\n-    CBanDB();\n+    explicit CBanDB(fs::path ban_list_path);\n     bool Write(const banmap_t& banSet);\n     bool Read(banmap_t& banSet);\n };"
      },
      {
        "sha": "8a5f78d1c5161b3835038bf63c085464875371a9",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 22,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,22 +11,22 @@\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const\n {\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetHash().GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetCheapHash();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetCheapHash();\n     return hash1 % ADDRMAN_BUCKET_SIZE;\n }\n \n@@ -217,7 +217,7 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n         return;\n \n     // find a bucket it is in now\n-    int nRnd = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n+    int nRnd = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n     int nUBucket = -1;\n     for (unsigned int n = 0; n < ADDRMAN_NEW_BUCKET_COUNT; n++) {\n         int nB = (n + nRnd) % ADDRMAN_NEW_BUCKET_COUNT;\n@@ -239,7 +239,9 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n \n     // Will moving this address into tried evict another entry?\n     if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        // Output the entry we'd be colliding with, for debugging purposes\n+        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n+        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table (%s), moving %s to m_tried_collisions=%d\\n\", colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\", addr.ToString(), m_tried_collisions.size());\n         if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n             m_tried_collisions.insert(nId);\n         }\n@@ -291,7 +293,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n         int nFactor = 1;\n         for (int n = 0; n < pinfo->nRefCount; n++)\n             nFactor *= 2;\n-        if (nFactor > 1 && (RandomInt(nFactor) != 0))\n+        if (nFactor > 1 && (insecure_rand.randrange(nFactor) != 0))\n             return false;\n     } else {\n         pinfo = Create(addr, source, &nId);\n@@ -356,37 +358,37 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n \n     // Use a 50% chance for choosing between tried and new table entries.\n     if (!newOnly &&\n-       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) {\n+       (nTried > 0 && (nNew == 0 || insecure_rand.randbool() == 0))) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n-            int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n-            int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n+            int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n+            int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n                 nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n                 nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n-            if (RandomInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n+            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n     } else {\n         // use a new node\n         double fChanceFactor = 1.0;\n         while (1) {\n-            int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n-            int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n+            int nUBucket = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n+            int nUBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n                 nUBucket = (nUBucket + insecure_rand.randbits(ADDRMAN_NEW_BUCKET_COUNT_LOG2)) % ADDRMAN_NEW_BUCKET_COUNT;\n                 nUBucketPos = (nUBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n-            if (RandomInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n+            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n@@ -482,7 +484,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n         if (vAddr.size() >= nNodes)\n             break;\n \n-        int nRndPos = RandomInt(vRandom.size() - n) + n;\n+        int nRndPos = insecure_rand.randrange(vRandom.size() - n) + n;\n         SwapRandom(n, nRndPos);\n         assert(mapInfo.count(vRandom[n]) == 1);\n \n@@ -530,10 +532,6 @@ void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n     info.nServices = nServices;\n }\n \n-int CAddrMan::RandomInt(int nMax){\n-    return GetRandInt(nMax);\n-}\n-\n void CAddrMan::ResolveCollisions_()\n {\n     for (std::set<int>::iterator it = m_tried_collisions.begin(); it != m_tried_collisions.end();) {\n@@ -565,12 +563,19 @@ void CAddrMan::ResolveCollisions_()\n \n                     // Give address at least 60 seconds to successfully connect\n                     if (GetAdjustedTime() - info_old.nLastTry > 60) {\n-                        LogPrint(BCLog::ADDRMAN, \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+                        LogPrint(BCLog::ADDRMAN, \"Replacing %s with %s in tried table\\n\", info_old.ToString(), info_new.ToString());\n \n                         // Replaces an existing address already in the tried table with the new address\n                         Good_(info_new, false, GetAdjustedTime());\n                         erase_collision = true;\n                     }\n+                } else if (GetAdjustedTime() - info_new.nLastSuccess > ADDRMAN_TEST_WINDOW) {\n+                    // If the collision hasn't resolved in some reasonable amount of time,\n+                    // just evict the old entry -- we must not be able to\n+                    // connect to it for some reason.\n+                    LogPrint(BCLog::ADDRMAN, \"Unable to test; replacing %s with %s in tried table anyway\\n\", info_old.ToString(), info_new.ToString());\n+                    Good_(info_new, false, GetAdjustedTime());\n+                    erase_collision = true;\n                 }\n             } else { // Collision is not actually a collision anymore\n                 Good_(info_new, false, GetAdjustedTime());\n@@ -593,7 +598,7 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     std::set<int>::iterator it = m_tried_collisions.begin();\n \n     // Selects a random element from m_tried_collisions\n-    std::advance(it, GetRandInt(m_tried_collisions.size()));\n+    std::advance(it, insecure_rand.randrange(m_tried_collisions.size()));\n     int id_new = *it;\n \n     // If id_new not found in mapInfo remove it from m_tried_collisions"
      },
      {
        "sha": "e54184ce35de29a587bddd72d554c3d9a2eccac8",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 39,
        "deletions": 54,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,7 +11,7 @@\n #include <random.h>\n #include <sync.h>\n #include <timedata.h>\n-#include <util.h>\n+#include <util/system.h>\n \n #include <map>\n #include <set>\n@@ -23,33 +23,31 @@\n  */\n class CAddrInfo : public CAddress\n {\n-\n-\n public:\n     //! last try whatsoever by us (memory only)\n-    int64_t nLastTry;\n+    int64_t nLastTry{0};\n \n     //! last counted attempt (memory only)\n-    int64_t nLastCountAttempt;\n+    int64_t nLastCountAttempt{0};\n \n private:\n     //! where knowledge about this address first came from\n     CNetAddr source;\n \n     //! last successful connection by us\n-    int64_t nLastSuccess;\n+    int64_t nLastSuccess{0};\n \n     //! connection attempts since last successful attempt\n-    int nAttempts;\n+    int nAttempts{0};\n \n     //! reference count in new sets (memory only)\n-    int nRefCount;\n+    int nRefCount{0};\n \n     //! in tried set? (memory only)\n-    bool fInTried;\n+    bool fInTried{false};\n \n     //! position in vRandom\n-    int nRandomPos;\n+    int nRandomPos{-1};\n \n     friend class CAddrMan;\n \n@@ -65,25 +63,12 @@ class CAddrInfo : public CAddress\n         READWRITE(nAttempts);\n     }\n \n-    void Init()\n-    {\n-        nLastSuccess = 0;\n-        nLastTry = 0;\n-        nLastCountAttempt = 0;\n-        nAttempts = 0;\n-        nRefCount = 0;\n-        fInTried = false;\n-        nRandomPos = -1;\n-    }\n-\n     CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)\n     {\n-        Init();\n     }\n \n     CAddrInfo() : CAddress(), source()\n     {\n-        Init();\n     }\n \n     //! Calculate in which \"tried\" bucket this entry belongs\n@@ -106,7 +91,6 @@ class CAddrInfo : public CAddress\n \n     //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n     double GetChance(int64_t nNow = GetAdjustedTime()) const;\n-\n };\n \n /** Stochastic address manager\n@@ -182,41 +166,45 @@ class CAddrInfo : public CAddress\n //! the maximum number of tried addr collisions to store\n #define ADDRMAN_SET_TRIED_COLLISION_SIZE 10\n \n+//! the maximum time we'll spend trying to resolve a tried table collision, in seconds\n+static const int64_t ADDRMAN_TEST_WINDOW = 40*60; // 40 minutes\n+\n /**\n  * Stochastical (IP) address manager\n  */\n class CAddrMan\n {\n-private:\n+protected:\n     //! critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n+private:\n     //! last used nId\n-    int nIdCount;\n+    int nIdCount GUARDED_BY(cs);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo;\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr;\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom;\n+    std::vector<int> vRandom GUARDED_BY(cs);\n \n     // number of \"tried\" entries\n-    int nTried;\n+    int nTried GUARDED_BY(cs);\n \n     //! list of \"tried\" buckets\n-    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n     //! number of (unique) \"new\" entries\n-    int nNew;\n+    int nNew GUARDED_BY(cs);\n \n     //! list of \"new\" buckets\n-    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n     //! last time Good was called (memory only)\n-    int64_t nLastGood;\n+    int64_t nLastGood GUARDED_BY(cs);\n \n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n@@ -229,58 +217,55 @@ class CAddrMan\n     FastRandomContext insecure_rand;\n \n     //! Find an entry.\n-    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr);\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! find an entry, creating it if necessary.\n     //! nTime and nServices of the found node are updated, if necessary.\n-    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr);\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Swap two elements in vRandom.\n-    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2);\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n-    void MakeTried(CAddrInfo& info, int nId);\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Delete an entry. It must not be in tried, and have refcount 0.\n-    void Delete(int nId);\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n-    void ClearNew(int nUBucket, int nUBucketPos);\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, bool test_before_evict, int64_t time);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n-    CAddrInfo Select_(bool newOnly);\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions_();\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Return a random to-be-evicted tried table address.\n-    CAddrInfo SelectTriedCollision_();\n-\n-    //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n-    virtual int RandomInt(int nMax);\n+    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n-    int Check_();\n+    int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n #endif\n \n     //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr);\n+    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64_t nTime);\n+    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, ServiceFlags nServices);\n+    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n     /**\n@@ -472,7 +457,7 @@ class CAddrMan\n     {\n         LOCK(cs);\n         std::vector<int>().swap(vRandom);\n-        nKey = GetRandHash();\n+        nKey = insecure_rand.rand256();\n         for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n             for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n                 vvNew[bucket][entry] = -1;"
      },
      {
        "sha": "47968e80b1740bf7ce77d9f36a6852fe28842933",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,7 +12,6 @@\n typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n-static const CAmount CENT = 1000000;\n \n /** No amount larger than this (in satoshi) is valid.\n  *"
      },
      {
        "sha": "aa66d131021c875a9092650bfc1c4f8a99a7a15f",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,7 +6,7 @@\n #include <arith_uint256.h>\n \n #include <uint256.h>\n-#include <utilstrencodings.h>\n+#include <util/strencodings.h>\n #include <crypto/common.h>\n \n #include <stdio.h>\n@@ -176,7 +176,7 @@ unsigned int base_uint<BITS>::bits() const\n     for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n             for (int nbits = 31; nbits > 0; nbits--) {\n-                if (pn[pos] & 1 << nbits)\n+                if (pn[pos] & 1U << nbits)\n                     return 32 * pos + nbits + 1;\n             }\n             return 32 * pos + 1;"
      },
      {
        "sha": "bd0360087d9ea0c6aabd0ce1f44e4a3d171139f0",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <assert.h>\n #include <cstring>\n+#include <limits>\n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n@@ -189,7 +190,7 @@ class base_uint\n     {\n         // prefix operator\n         int i = 0;\n-        while (i < WIDTH && --pn[i] == (uint32_t)-1)\n+        while (i < WIDTH && --pn[i] == std::numeric_limits<uint32_t>::max())\n             i++;\n         return *this;\n     }"
      },
      {
        "sha": "45099bd8b88025cb1e77bc6648f086660bf025dc",
        "filename": "src/attributes.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ATTRIBUTES_H\n+#define BITCOIN_ATTRIBUTES_H\n+\n+#if defined(__has_cpp_attribute)\n+#  if __has_cpp_attribute(nodiscard)\n+#    define NODISCARD [[nodiscard]]\n+#  endif\n+#endif\n+#ifndef NODISCARD\n+#  if defined(_MSC_VER) && _MSC_VER >= 1700\n+#    define NODISCARD _Check_return_\n+#  else\n+#    define NODISCARD __attribute__((warn_unused_result))\n+#  endif\n+#endif\n+\n+#endif // BITCOIN_ATTRIBUTES_H"
      },
      {
        "sha": "47d64a8f31c0860db648f0bccedbc2bf11ce78b3",
        "filename": "src/banman.cpp",
        "status": "added",
        "additions": 220,
        "deletions": 0,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+\n+#include <netaddress.h>\n+#include <ui_interface.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+\n+BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)\n+    : m_client_interface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n+{\n+    if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist...\"));\n+\n+    int64_t n_start = GetTimeMillis();\n+    m_is_dirty = false;\n+    banmap_t banmap;\n+    if (m_ban_db.Read(banmap)) {\n+        SetBanned(banmap);        // thread save setter\n+        SetBannedSetDirty(false); // no need to write down, just read data\n+        SweepBanned();            // sweep out unused entries\n+\n+        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n+            banmap.size(), GetTimeMillis() - n_start);\n+    } else {\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+        SetBannedSetDirty(true); // force write\n+        DumpBanlist();\n+    }\n+}\n+\n+BanMan::~BanMan()\n+{\n+    DumpBanlist();\n+}\n+\n+void BanMan::DumpBanlist()\n+{\n+    SweepBanned(); // clean unused entries (if bantime has expired)\n+\n+    if (!BannedSetIsDirty()) return;\n+\n+    int64_t n_start = GetTimeMillis();\n+\n+    banmap_t banmap;\n+    GetBanned(banmap);\n+    if (m_ban_db.Write(banmap)) {\n+        SetBannedSetDirty(false);\n+    }\n+\n+    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+        banmap.size(), GetTimeMillis() - n_start);\n+}\n+\n+void BanMan::ClearBanned()\n+{\n+    {\n+        LOCK(m_cs_banned);\n+        m_banned.clear();\n+        m_is_dirty = true;\n+    }\n+    DumpBanlist(); //store banlist to disk\n+    if (m_client_interface) m_client_interface->BannedListChanged();\n+}\n+\n+int BanMan::IsBannedLevel(CNetAddr net_addr)\n+{\n+    // Returns the most severe level of banning that applies to this address.\n+    // 0 - Not banned\n+    // 1 - Automatic misbehavior ban\n+    // 2 - Any other ban\n+    int level = 0;\n+    auto current_time = GetTime();\n+    LOCK(m_cs_banned);\n+    for (const auto& it : m_banned) {\n+        CSubNet sub_net = it.first;\n+        CBanEntry ban_entry = it.second;\n+\n+        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n+            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n+            level = 1;\n+        }\n+    }\n+    return level;\n+}\n+\n+bool BanMan::IsBanned(CNetAddr net_addr)\n+{\n+    auto current_time = GetTime();\n+    LOCK(m_cs_banned);\n+    for (const auto& it : m_banned) {\n+        CSubNet sub_net = it.first;\n+        CBanEntry ban_entry = it.second;\n+\n+        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool BanMan::IsBanned(CSubNet sub_net)\n+{\n+    auto current_time = GetTime();\n+    LOCK(m_cs_banned);\n+    banmap_t::iterator i = m_banned.find(sub_net);\n+    if (i != m_banned.end()) {\n+        CBanEntry ban_entry = (*i).second;\n+        if (current_time < ban_entry.nBanUntil) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+{\n+    CSubNet sub_net(net_addr);\n+    Ban(sub_net, ban_reason, ban_time_offset, since_unix_epoch);\n+}\n+\n+void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+{\n+    CBanEntry ban_entry(GetTime(), ban_reason);\n+\n+    int64_t normalized_ban_time_offset = ban_time_offset;\n+    bool normalized_since_unix_epoch = since_unix_epoch;\n+    if (ban_time_offset <= 0) {\n+        normalized_ban_time_offset = m_default_ban_time;\n+        normalized_since_unix_epoch = false;\n+    }\n+    ban_entry.nBanUntil = (normalized_since_unix_epoch ? 0 : GetTime()) + normalized_ban_time_offset;\n+\n+    {\n+        LOCK(m_cs_banned);\n+        if (m_banned[sub_net].nBanUntil < ban_entry.nBanUntil) {\n+            m_banned[sub_net] = ban_entry;\n+            m_is_dirty = true;\n+        } else\n+            return;\n+    }\n+    if (m_client_interface) m_client_interface->BannedListChanged();\n+\n+    //store banlist to disk immediately if user requested ban\n+    if (ban_reason == BanReasonManuallyAdded) DumpBanlist();\n+}\n+\n+bool BanMan::Unban(const CNetAddr& net_addr)\n+{\n+    CSubNet sub_net(net_addr);\n+    return Unban(sub_net);\n+}\n+\n+bool BanMan::Unban(const CSubNet& sub_net)\n+{\n+    {\n+        LOCK(m_cs_banned);\n+        if (m_banned.erase(sub_net) == 0) return false;\n+        m_is_dirty = true;\n+    }\n+    if (m_client_interface) m_client_interface->BannedListChanged();\n+    DumpBanlist(); //store banlist to disk immediately\n+    return true;\n+}\n+\n+void BanMan::GetBanned(banmap_t& banmap)\n+{\n+    LOCK(m_cs_banned);\n+    // Sweep the banlist so expired bans are not returned\n+    SweepBanned();\n+    banmap = m_banned; //create a thread safe copy\n+}\n+\n+void BanMan::SetBanned(const banmap_t& banmap)\n+{\n+    LOCK(m_cs_banned);\n+    m_banned = banmap;\n+    m_is_dirty = true;\n+}\n+\n+void BanMan::SweepBanned()\n+{\n+    int64_t now = GetTime();\n+    bool notify_ui = false;\n+    {\n+        LOCK(m_cs_banned);\n+        banmap_t::iterator it = m_banned.begin();\n+        while (it != m_banned.end()) {\n+            CSubNet sub_net = (*it).first;\n+            CBanEntry ban_entry = (*it).second;\n+            if (now > ban_entry.nBanUntil) {\n+                m_banned.erase(it++);\n+                m_is_dirty = true;\n+                notify_ui = true;\n+                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+            } else\n+                ++it;\n+        }\n+    }\n+    // update UI\n+    if (notify_ui && m_client_interface) {\n+        m_client_interface->BannedListChanged();\n+    }\n+}\n+\n+bool BanMan::BannedSetIsDirty()\n+{\n+    LOCK(m_cs_banned);\n+    return m_is_dirty;\n+}\n+\n+void BanMan::SetBannedSetDirty(bool dirty)\n+{\n+    LOCK(m_cs_banned); //reuse m_banned lock for the m_is_dirty flag\n+    m_is_dirty = dirty;\n+}"
      },
      {
        "sha": "a1a00309dd9d0f936e30890193760fd5c225aa51",
        "filename": "src/banman.h",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BANMAN_H\n+#define BITCOIN_BANMAN_H\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include <addrdb.h>\n+#include <fs.h>\n+#include <sync.h>\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n+\n+class CClientUIInterface;\n+class CNetAddr;\n+class CSubNet;\n+\n+// Denial-of-service detection/prevention\n+// The idea is to detect peers that are behaving\n+// badly and disconnect/ban them, but do it in a\n+// one-coding-mistake-won't-shatter-the-entire-network\n+// way.\n+// IMPORTANT:  There should be nothing I can give a\n+// node that it will forward on that will make that\n+// node's peers drop it. If there is, an attacker\n+// can isolate a node and/or try to split the network.\n+// Dropping a node for sending stuff that is invalid\n+// now but might be valid in a later version is also\n+// dangerous, because it can cause a network split\n+// between nodes running old code and nodes running\n+// new code.\n+\n+class BanMan\n+{\n+public:\n+    ~BanMan();\n+    BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n+    void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void ClearBanned();\n+    int IsBannedLevel(CNetAddr net_addr);\n+    bool IsBanned(CNetAddr net_addr);\n+    bool IsBanned(CSubNet sub_net);\n+    bool Unban(const CNetAddr& net_addr);\n+    bool Unban(const CSubNet& sub_net);\n+    void GetBanned(banmap_t& banmap);\n+    void DumpBanlist();\n+\n+private:\n+    void SetBanned(const banmap_t& banmap);\n+    bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    void SetBannedSetDirty(bool dirty = true);\n+    //!clean unused entries (if bantime has expired)\n+    void SweepBanned();\n+\n+    CCriticalSection m_cs_banned;\n+    banmap_t m_banned GUARDED_BY(m_cs_banned);\n+    bool m_is_dirty GUARDED_BY(m_cs_banned);\n+    CClientUIInterface* m_client_interface = nullptr;\n+    CBanDB m_ban_db;\n+    const int64_t m_default_ban_time;\n+};\n+\n+extern std::unique_ptr<BanMan> g_banman;\n+#endif"
      },
      {
        "sha": "e3d28533999b4928b6e706fb6131222b4deb553e",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <hash.h>\n #include <uint256.h>\n+#include <util/strencodings.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -34,7 +35,7 @@ static const int8_t mapBase58[256] = {\n bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n {\n     // Skip leading spaces.\n-    while (*psz && isspace(*psz))\n+    while (*psz && IsSpace(*psz))\n         psz++;\n     // Skip and count leading '1's.\n     int zeroes = 0;\n@@ -48,7 +49,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     std::vector<unsigned char> b256(size);\n     // Process the characters.\n     static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n-    while (*psz && !isspace(*psz)) {\n+    while (*psz && !IsSpace(*psz)) {\n         // Decode base58 character\n         int carry = mapBase58[(uint8_t)*psz];\n         if (carry == -1)  // Invalid b58 character\n@@ -64,7 +65,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         psz++;\n     }\n     // Skip trailing spaces.\n-    while (isspace(*psz))\n+    while (IsSpace(*psz))\n         psz++;\n     if (*psz != 0)\n         return false;"
      },
      {
        "sha": "d6e0299a1e9a0efa3b461f2f4412f2ce106695b3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -14,6 +14,8 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n+#include <attributes.h>\n+\n #include <string>\n #include <vector>\n \n@@ -33,13 +35,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -50,12 +52,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "e7702ec4619d6983e3b30ccf3bc903488e1d3aca",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -49,7 +49,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        DecodeBase58(addr, vch);\n+        (void) DecodeBase58(addr, vch);\n     }\n }\n "
      },
      {
        "sha": "3c4b453a23aeffb863a65817ad3c5ca9486ea7bb",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,7 +6,7 @@\n \n #include <validation.h>\n #include <bech32.h>\n-#include <utilstrencodings.h>\n+#include <util/strencodings.h>\n \n #include <vector>\n #include <string>"
      },
      {
        "sha": "b08ecbb621d4589d0d15f96568053f8217d35364",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,15 +1,19 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n \n+#include <chainparams.h>\n+#include <test/setup_common.h>\n+#include <validation.h>\n+\n+#include <algorithm>\n #include <assert.h>\n-#include <iostream>\n #include <iomanip>\n-#include <algorithm>\n-#include <regex>\n+#include <iostream>\n #include <numeric>\n+#include <regex>\n \n void benchmark::ConsolePrinter::header()\n {\n@@ -108,6 +112,13 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n     printer.header();\n \n     for (const auto& p : benchmarks()) {\n+        TestingSetup test{CBaseChainParams::REGTEST};\n+        {\n+            assert(::chainActive.Height() == 0);\n+            const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), Params().GetConsensus())};\n+            assert(witness_enabled);\n+        }\n+\n         if (!std::regex_match(p.first, baseMatch, reFilter)) {\n             continue;\n         }"
      },
      {
        "sha": "3cf0bf9530fe412e5490e4a9da9367d07e3ff348",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 33,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,20 +1,16 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n \n #include <crypto/sha256.h>\n #include <key.h>\n-#include <random.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n-#include <validation.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n \n #include <memory>\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n static const int64_t DEFAULT_BENCH_EVALUATIONS = 5;\n static const char* DEFAULT_BENCH_FILTER = \".*\";\n static const char* DEFAULT_BENCH_SCALING = \"1.0\";\n@@ -25,7 +21,8 @@ static const int64_t DEFAULT_PLOT_HEIGHT = 768;\n \n static void SetupBenchArgs()\n {\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n@@ -34,18 +31,6 @@ static void SetupBenchArgs()\n     gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n-}\n-\n-static fs::path SetDataDir()\n-{\n-    fs::path ret = fs::temp_directory_path() / \"bench_bitcoin\" / fs::unique_path();\n-    fs::create_directories(ret);\n-    gArgs.ForceSetArg(\"-datadir\", ret.string());\n-    return ret;\n }\n \n int main(int argc, char** argv)\n@@ -63,14 +48,6 @@ int main(int argc, char** argv)\n         return EXIT_SUCCESS;\n     }\n \n-    // Set the datadir after parsing the bench options\n-    const fs::path bench_datadir{SetDataDir()};\n-\n-    SHA256AutoDetect();\n-    RandomInit();\n-    ECC_Start();\n-    SetupEnvironment();\n-\n     int64_t evaluations = gArgs.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n     std::string regex_filter = gArgs.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n     std::string scaling_str = gArgs.GetArg(\"-scaling\", DEFAULT_BENCH_SCALING);\n@@ -82,7 +59,7 @@ int main(int argc, char** argv)\n         return EXIT_FAILURE;\n     }\n \n-    std::unique_ptr<benchmark::Printer> printer(new benchmark::ConsolePrinter());\n+    std::unique_ptr<benchmark::Printer> printer = MakeUnique<benchmark::ConsolePrinter>();\n     std::string printer_arg = gArgs.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n     if (\"plot\" == printer_arg) {\n         printer.reset(new benchmark::PlotlyPrinter(\n@@ -93,9 +70,5 @@ int main(int argc, char** argv)\n \n     benchmark::BenchRunner::RunAll(*printer, evaluations, scaling_factor, regex_filter, is_list_only);\n \n-    fs::remove_all(bench_datadir);\n-\n-    ECC_Stop();\n-\n     return EXIT_SUCCESS;\n }"
      },
      {
        "sha": "fb33c09ab24fb467f657a63872a97d2ee9818a67",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 71,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,57 +1,18 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <chainparams.h>\n-#include <coins.h>\n-#include <consensus/merkle.h>\n #include <consensus/validation.h>\n-#include <miner.h>\n-#include <policy/policy.h>\n-#include <pow.h>\n-#include <scheduler.h>\n-#include <txdb.h>\n+#include <crypto/sha256.h>\n+#include <test/util.h>\n #include <txmempool.h>\n-#include <utiltime.h>\n #include <validation.h>\n-#include <validationinterface.h>\n \n-#include <boost/thread.hpp>\n \n #include <list>\n #include <vector>\n \n-static std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n-{\n-    auto block = std::make_shared<CBlock>(\n-        BlockAssembler{Params()}\n-            .CreateNewBlock(coinbase_scriptPubKey, /* fMineWitnessTx */ true)\n-            ->block);\n-\n-    block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n-    block->hashMerkleRoot = BlockMerkleRoot(*block);\n-\n-    return block;\n-}\n-\n-\n-static CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n-{\n-    auto block = PrepareBlock(coinbase_scriptPubKey);\n-\n-    while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n-        ++block->nNonce;\n-        assert(block->nNonce);\n-    }\n-\n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n-    assert(processed);\n-\n-    return CTxIn{block->vtx[0]->GetHash(), 0};\n-}\n-\n-\n static void AssembleBlock(benchmark::State& state)\n {\n     const std::vector<unsigned char> op_true{OP_TRUE};\n@@ -63,30 +24,6 @@ static void AssembleBlock(benchmark::State& state)\n \n     const CScript SCRIPT_PUB{CScript(OP_0) << std::vector<unsigned char>{witness_program.begin(), witness_program.end()}};\n \n-    // Switch to regtest so we can mine faster\n-    // Also segwit is active, so we can include witness transactions\n-    SelectParams(CBaseChainParams::REGTEST);\n-\n-    InitScriptExecutionCache();\n-\n-    boost::thread_group thread_group;\n-    CScheduler scheduler;\n-    {\n-        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n-        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n-        const CChainParams& chainparams = Params();\n-        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n-        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-        LoadGenesisBlock(chainparams);\n-        CValidationState state;\n-        ActivateBestChain(state, chainparams);\n-        assert(::chainActive.Tip() != nullptr);\n-        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n-        assert(witness_enabled);\n-    }\n-\n     // Collect some loose transactions that spend the coinbases of our mined blocks\n     constexpr size_t NUM_BLOCKS{200};\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n@@ -111,11 +48,6 @@ static void AssembleBlock(benchmark::State& state)\n     while (state.KeepRunning()) {\n         PrepareBlock(SCRIPT_PUB);\n     }\n-\n-    thread_group.interrupt_all();\n-    thread_group.join_all();\n-    GetMainSignals().FlushBackgroundCallbacks();\n-    GetMainSignals().UnregisterBackgroundSignalScheduler();\n }\n \n BENCHMARK(AssembleBlock, 700);"
      },
      {
        "sha": "9cfd5d23effe120ba17ede3c51e94b5b69b4b12a",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,8 +12,8 @@\n // FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n //\n // Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// two outputs.  The first has 11 and 50 COIN outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 COIN outputs\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n@@ -31,18 +31,18 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n     // Create some dummy input transactions\n     dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n+    dummyTransactions[0].vout[0].nValue = 11 * COIN;\n     dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n+    dummyTransactions[0].vout[1].nValue = 50 * COIN;\n     dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n+    AddCoins(coinsRet, CTransaction(dummyTransactions[0]), 0);\n \n     dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n+    dummyTransactions[1].vout[0].nValue = 21 * COIN;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n+    dummyTransactions[1].vout[1].nValue = 22 * COIN;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n+    AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n \n     return dummyTransactions;\n }\n@@ -72,15 +72,16 @@ static void CCoinsCaching(benchmark::State& state)\n     t1.vin[2].prevout.n = 1;\n     t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n     t1.vout.resize(2);\n-    t1.vout[0].nValue = 90 * CENT;\n+    t1.vout[0].nValue = 90 * COIN;\n     t1.vout[0].scriptPubKey << OP_1;\n \n     // Benchmark.\n+    const CTransaction tx_1(t1);\n     while (state.KeepRunning()) {\n-        bool success = AreInputsStandard(t1, coins);\n+        bool success = AreInputsStandard(tx_1, coins);\n         assert(success);\n-        CAmount value = coins.GetValueIn(t1);\n-        assert(value == (50 + 21 + 22) * CENT);\n+        CAmount value = coins.GetValueIn(tx_1);\n+        assert(value == (50 + 21 + 22) * COIN);\n     }\n }\n "
      },
      {
        "sha": "e325333c01e26b24b91d9dbf3ea2767792f85d8f",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -20,7 +20,7 @@ namespace block_bench {\n static void DeserializeBlockTest(benchmark::State& state)\n {\n     CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n             SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n@@ -36,7 +36,7 @@ static void DeserializeBlockTest(benchmark::State& state)\n static void DeserializeAndCheckBlockTest(benchmark::State& state)\n {\n     CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n             SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction"
      },
      {
        "sha": "6ab542067aac3d6bc24eccf72acad1a5e15a6b38",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <util.h>\n+#include <util/system.h>\n #include <validation.h>\n #include <checkqueue.h>\n #include <prevector.h>"
      },
      {
        "sha": "f2ab03e20e9e262c827501ee2eaf4895e5847f64",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,25 +3,20 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <wallet/wallet.h>\n+#include <interfaces/chain.h>\n #include <wallet/coinselection.h>\n+#include <wallet/wallet.h>\n \n #include <set>\n \n-static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<OutputGroup>& groups)\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\n {\n-    int nInput = 0;\n-\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n-    tx.vout.resize(nInput + 1);\n-    tx.vout[nInput].nValue = nValue;\n-    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n-\n-    int nAge = 6 * 24;\n-    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n-    groups.emplace_back(output.GetInputCoin(), 6, false, 0, 0);\n+    tx.vout.resize(1);\n+    tx.vout[0].nValue = nValue;\n+    wtxs.push_back(MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary\n@@ -33,15 +28,23 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<Ou\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+    auto chain = interfaces::MakeChain();\n+    const CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n-    std::vector<OutputGroup> groups;\n     for (int i = 0; i < 1000; ++i) {\n-        addCoin(1000 * COIN, wallet, groups);\n+        addCoin(1000 * COIN, wallet, wtxs);\n+    }\n+    addCoin(3 * COIN, wallet, wtxs);\n+\n+    // Create groups\n+    std::vector<OutputGroup> groups;\n+    for (const auto& wtx : wtxs) {\n+        COutput output(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n+        groups.emplace_back(output.GetInputCoin(), 6, false, 0, 0);\n     }\n-    addCoin(3 * COIN, wallet, groups);\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n     const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n@@ -57,7 +60,8 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static const CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+static auto testChain = interfaces::MakeChain();\n+static const CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n@@ -66,7 +70,7 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     set.emplace_back(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0);\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "dc0b05442027921e1968ecc1775c24520f623172",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -9,11 +9,12 @@\n #include <hash.h>\n #include <random.h>\n #include <uint256.h>\n-#include <utiltime.h>\n+#include <util/time.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n+#include <crypto/siphash.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;"
      },
      {
        "sha": "2d7a3515231bee8daba16e00fbc9b9ec6bfe9b62",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <test/util.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <list>\n+#include <vector>\n+\n+\n+static void DuplicateInputs(benchmark::State& state)\n+{\n+    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n+\n+    const CChainParams& chainparams = Params();\n+\n+    CBlock block{};\n+    CMutableTransaction coinbaseTx{};\n+    CMutableTransaction naughtyTx{};\n+\n+    CBlockIndex* pindexPrev = ::chainActive.Tip();\n+    assert(pindexPrev != nullptr);\n+    block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+    auto nHeight = pindexPrev->nHeight + 1;\n+\n+    // Make a coinbase TX\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+\n+\n+    naughtyTx.vout.resize(1);\n+    naughtyTx.vout[0].nValue = 0;\n+    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+\n+    uint64_t n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE / WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize())) / 41) - 100;\n+    for (uint64_t x = 0; x < (n_inputs - 1); ++x) {\n+        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n+    }\n+    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n+\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n+    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+\n+    while (state.KeepRunning()) {\n+        CValidationState cvstate{};\n+        assert(!CheckBlock(block, cvstate, chainparams.GetConsensus(), false, false));\n+        assert(cvstate.GetRejectReason() == \"bad-txns-inputs-duplicate\");\n+    }\n+}\n+\n+BENCHMARK(DuplicateInputs, 10);"
      },
      {
        "sha": "e7ddd5a938ddbd603c8ba623e5be0722b93935e3",
        "filename": "src/bench/examples.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/examples.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <bench/bench.h>\n #include <validation.h>\n-#include <utiltime.h>\n+#include <util/time.h>\n \n // Sanity test: this should loop ten times, and\n // min/max/average should be close to 100ms."
      },
      {
        "sha": "535ad35571b09dd2baf45eaf692949fc6920abca",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -17,7 +17,7 @@ static void ConstructGCSFilter(benchmark::State& state)\n \n     uint64_t siphash_k0 = 0;\n     while (state.KeepRunning()) {\n-        GCSFilter filter(siphash_k0, 0, 20, 1 << 20, elements);\n+        GCSFilter filter({siphash_k0, 0, 20, 1 << 20}, elements);\n \n         siphash_k0++;\n     }\n@@ -32,7 +32,7 @@ static void MatchGCSFilter(benchmark::State& state)\n         element[1] = static_cast<unsigned char>(i >> 8);\n         elements.insert(std::move(element));\n     }\n-    GCSFilter filter(0, 0, 20, 1 << 20, elements);\n+    GCSFilter filter({0, 0, 20, 1 << 20}, elements);\n \n     while (state.KeepRunning()) {\n         filter.Match(GCSFilter::Element());"
      },
      {
        "sha": "ac8a1823583543356ee31c5436438b329c4a4366",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -9,7 +9,7 @@\n #include <list>\n #include <vector>\n \n-static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n     int64_t nTime = 0;\n     unsigned int nHeight = 1;\n@@ -108,7 +108,7 @@ static void MempoolEviction(benchmark::State& state)\n     tx7.vout[1].nValue = 10 * COIN;\n \n     CTxMemPool pool;\n-    LOCK(pool.cs);\n+    LOCK2(cs_main, pool.cs);\n     // Create transaction references outside the \"hot loop\"\n     const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n     const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n@@ -127,7 +127,7 @@ static void MempoolEviction(benchmark::State& state)\n         AddTx(tx6_r, 1100LL, pool);\n         AddTx(tx7_r, 9000LL, pool);\n         pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n+        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n     }\n }\n "
      },
      {
        "sha": "16342d0fbe946172f20ca3a76b5d6203cb9d4d22",
        "filename": "src/bench/poly1305.cpp",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/poly1305.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/poly1305.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY  = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024*1024;\n+\n+static void POLY1305(benchmark::State& state, size_t buffersize)\n+{\n+    std::vector<unsigned char> tag(POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> key(POLY1305_KEYLEN, 0);\n+    std::vector<unsigned char> in(buffersize, 0);\n+    while (state.KeepRunning())\n+        poly1305_auth(tag.data(), in.data(), in.size(), key.data());\n+}\n+\n+static void POLY1305_64BYTES(benchmark::State& state)\n+{\n+    POLY1305(state, BUFFER_SIZE_TINY);\n+}\n+\n+static void POLY1305_256BYTES(benchmark::State& state)\n+{\n+    POLY1305(state, BUFFER_SIZE_SMALL);\n+}\n+\n+static void POLY1305_1MB(benchmark::State& state)\n+{\n+    POLY1305(state, BUFFER_SIZE_LARGE);\n+}\n+\n+BENCHMARK(POLY1305_64BYTES, 500000);\n+BENCHMARK(POLY1305_256BYTES, 250000);\n+BENCHMARK(POLY1305_1MB, 340);"
      },
      {
        "sha": "00e5d7e7a04028fccb765c208838661075d03d00",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -2,13 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <compat.h>\n #include <prevector.h>\n #include <serialize.h>\n #include <streams.h>\n+#include <type_traits>\n \n #include <bench/bench.h>\n \n+// GCC 4.8 is missing some C++11 type_traits,\n+// https://www.gnu.org/software/gcc/gcc-5/changes.html\n+#if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 5\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::has_trivial_default_constructor\n+#else\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_default_constructible\n+#endif\n+\n struct nontrivial_t {\n     int x;\n     nontrivial_t() :x(-1) {}"
      },
      {
        "sha": "67d8a255647b4e5766e7ae7c4649911da3c8199b",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <policy/policy.h>\n+#include <rpc/blockchain.h>\n+#include <txmempool.h>\n+\n+#include <univalue.h>\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n+{\n+    LockPoints lp;\n+    pool.addUnchecked(CTxMemPoolEntry(tx, fee, /* time */ 0, /* height */ 1, /* spendsCoinbase */ false, /* sigOpCost */ 4, lp));\n+}\n+\n+static void RpcMempool(benchmark::State& state)\n+{\n+    CTxMemPool pool;\n+    LOCK2(cs_main, pool.cs);\n+\n+    for (int i = 0; i < 1000; ++i) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(1);\n+        tx.vin[0].scriptSig = CScript() << OP_1;\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+        tx.vout.resize(1);\n+        tx.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+        tx.vout[0].nValue = i;\n+        const CTransactionRef tx_r{MakeTransactionRef(tx)};\n+        AddTx(tx_r, /* fee */ i, pool);\n+    }\n+\n+    while (state.KeepRunning()) {\n+        (void)MempoolToJSON(pool, /*verbose*/ true);\n+    }\n+}\n+\n+BENCHMARK(RpcMempool, 40);"
      },
      {
        "sha": "46ca12826b43415bd458fc6f579bc0fca7c2f13e",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <key_io.h>\n+#include <optional.h>\n+#include <test/util.h>\n+#include <validationinterface.h>\n+#include <wallet/wallet.h>\n+\n+static void WalletBalance(benchmark::State& state, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n+{\n+    const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n+\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain();\n+    CWallet wallet{chain.get(), WalletLocation(), WalletDatabase::CreateMock()};\n+    {\n+        bool first_run;\n+        if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n+        wallet.handleNotifications();\n+    }\n+\n+\n+    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n+    if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n+\n+    for (int i = 0; i < 100; ++i) {\n+        generatetoaddress(address_mine.get_value_or(ADDRESS_WATCHONLY));\n+        generatetoaddress(ADDRESS_WATCHONLY);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+\n+    auto bal = wallet.GetBalance(); // Cache\n+\n+    while (state.KeepRunning()) {\n+        if (set_dirty) wallet.MarkDirty();\n+        bal = wallet.GetBalance();\n+        if (add_mine) assert(bal.m_mine_trusted > 0);\n+        if (add_watchonly) assert(bal.m_watchonly_trusted > 0);\n+    }\n+}\n+\n+static void WalletBalanceDirty(benchmark::State& state) { WalletBalance(state, /* set_dirty */ true, /* add_watchonly */ true, /* add_mine */ true); }\n+static void WalletBalanceClean(benchmark::State& state) { WalletBalance(state, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ true); }\n+static void WalletBalanceMine(benchmark::State& state) { WalletBalance(state, /* set_dirty */ false, /* add_watchonly */ false, /* add_mine */ true); }\n+static void WalletBalanceWatch(benchmark::State& state) { WalletBalance(state, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ false); }\n+\n+BENCHMARK(WalletBalanceDirty, 2500);\n+BENCHMARK(WalletBalanceClean, 8000);\n+BENCHMARK(WalletBalanceMine, 16000);\n+BENCHMARK(WalletBalanceWatch, 8000);"
      },
      {
        "sha": "1009a771f804447ae10963d1fbffd8cbe6d9de55",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 22,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,11 +12,12 @@\n #include <fs.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n \n #include <memory>\n #include <stdio.h>\n+#include <tuple>\n \n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n@@ -33,11 +34,12 @@ static const int CONTINUE_EXECUTION=-1;\n \n static void SetupCliArgs()\n {\n+    SetupHelpOptions(gArgs);\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n@@ -46,18 +48,14 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n /** libevent event log callback */\n@@ -139,11 +137,6 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n-    if (gArgs.GetBoolArg(\"-rpcssl\", false))\n-    {\n-        fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n-        return EXIT_FAILURE;\n-    }\n     return CONTINUE_EXECUTION;\n }\n \n@@ -260,16 +253,12 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         }\n         result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n         result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n-        if (!batch[ID_WALLETINFO].isNull()) {\n-            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n-            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n-        }\n         result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n         result.pushKV(\"timeoffset\", batch[ID_NETWORKINFO][\"result\"][\"timeoffset\"]);\n         result.pushKV(\"connections\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n         result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n-        result.pushKV(\"testnet\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"].get_str() == \"test\"));\n+        result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO].isNull()) {\n             result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n             result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n@@ -496,9 +485,6 @@ static int CommandLineRPC(int argc, char *argv[])\n             }\n         } while (fWait);\n     }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n@@ -516,6 +502,10 @@ static int CommandLineRPC(int argc, char *argv[])\n \n int main(int argc, char* argv[])\n {\n+#ifdef WIN32\n+    util::WinCmdLineArgs winArgs;\n+    std::tie(argc, argv) = winArgs.get();\n+#endif\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n         fprintf(stderr, \"Error: Initializing networking failed\\n\");"
      },
      {
        "sha": "7f41ea7aed7176e22a1044baebc8d6dfe50df24b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 20,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -18,9 +18,10 @@\n #include <script/script.h>\n #include <script/sign.h>\n #include <univalue.h>\n-#include <util.h>\n-#include <utilmoneystr.h>\n-#include <utilstrencodings.h>\n+#include <util/rbf.h>\n+#include <util/system.h>\n+#include <util/moneystr.h>\n+#include <util/strencodings.h>\n \n #include <memory>\n #include <stdio.h>\n@@ -35,7 +36,8 @@ const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n static void SetupBitcoinTxArgs()\n {\n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n@@ -62,14 +64,10 @@ static void SetupBitcoinTxArgs()\n         \"This command requires JSON registers:\"\n         \"prevtxs=JSON object, \"\n         \"privatekeys=JSON object. \"\n-        \"See signrawtransaction docs for format of sighash flags, JSON objects.\", false, OptionsCategory::COMMANDS);\n+        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", false, OptionsCategory::COMMANDS);\n \n     gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n     gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n //\n@@ -240,10 +238,10 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         throw std::runtime_error(\"TX input missing separator\");\n \n     // extract and validate TXID\n-    std::string strTxid = vStrInputParts[0];\n-    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+    uint256 txid;\n+    if (!ParseHashStr(vStrInputParts[0], txid)) {\n         throw std::runtime_error(\"invalid TX input txid\");\n-    uint256 txid(uint256S(strTxid));\n+    }\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n@@ -255,7 +253,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         throw std::runtime_error(\"invalid TX input vout '\" + strVout + \"'\");\n \n     // extract the optional sequence number\n-    uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max();\n+    uint32_t nSequenceIn = CTxIn::SEQUENCE_FINAL;\n     if (vStrInputParts.size() > 2)\n         nSequenceIn = std::stoul(vStrInputParts[2]);\n \n@@ -356,7 +354,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     if (vStrInputParts.size() < numkeys + 3)\n         throw std::runtime_error(\"incorrect number of multisig pubkeys\");\n \n-    if (required < 1 || required > 20 || numkeys < 1 || numkeys > 20 || numkeys < required)\n+    if (required < 1 || required > MAX_PUBKEYS_PER_MULTISIG || numkeys < 1 || numkeys > MAX_PUBKEYS_PER_MULTISIG || numkeys < required)\n         throw std::runtime_error(\"multisig parameter mismatch. Required \" \\\n                             + std::to_string(required) + \" of \" + std::to_string(numkeys) + \"signatures.\");\n \n@@ -590,7 +588,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid = ParseHashStr(prevOut[\"txid\"].get_str(), \"txid\");\n+            uint256 txid;\n+            if (!ParseHashStr(prevOut[\"txid\"].get_str(), txid)) {\n+                throw std::runtime_error(\"txid must be hexadecimal string (not '\" + prevOut[\"txid\"].get_str() + \"')\");\n+            }\n \n             const int nOut = prevOut[\"vout\"].get_int();\n             if (nOut < 0)\n@@ -815,11 +816,7 @@ static int CommandLineRawTx(int argc, char* argv[])\n             MutateTx(tx, key, value);\n         }\n \n-        OutputTx(tx);\n-    }\n-\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n+        OutputTx(CTransaction(tx));\n     }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();"
      },
      {
        "sha": "e9fa2dbb40d89dd106c1e78f72286ab7bc7ebc73",
        "filename": "src/bitcoin-wallet-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-wallet-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-wallet-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-res.rc?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,35 @@\n+#include <windows.h>             // needed for VERSIONINFO\n+#include \"clientversion.h\"       // holds the needed client version information\n+\n+#define VER_PRODUCTVERSION     CLIENT_VERSION_MAJOR,CLIENT_VERSION_MINOR,CLIENT_VERSION_REVISION,CLIENT_VERSION_BUILD\n+#define VER_PRODUCTVERSION_STR STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+#define VER_FILEVERSION        VER_PRODUCTVERSION\n+#define VER_FILEVERSION_STR    VER_PRODUCTVERSION_STR\n+\n+VS_VERSION_INFO VERSIONINFO\n+FILEVERSION     VER_FILEVERSION\n+PRODUCTVERSION  VER_PRODUCTVERSION\n+FILEOS          VOS_NT_WINDOWS32\n+FILETYPE        VFT_APP\n+BEGIN\n+    BLOCK \"StringFileInfo\"\n+    BEGIN\n+        BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n+        BEGIN\n+            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"FileDescription\",    \"bitcoin-wallet (CLI tool for \" PACKAGE_NAME \" wallets)\"\n+            VALUE \"FileVersion\",        VER_FILEVERSION_STR\n+            VALUE \"InternalName\",       \"bitcoin-wallet\"\n+            VALUE \"LegalCopyright\",     COPYRIGHT_STR\n+            VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n+            VALUE \"OriginalFilename\",   \"bitcoin-wallet.exe\"\n+            VALUE \"ProductName\",        \"bitcoin-wallet\"\n+            VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n+        END\n+    END\n+\n+    BLOCK \"VarFileInfo\"\n+    BEGIN\n+        VALUE \"Translation\", 0x0, 1252 // language neutral - multilingual (decimal)\n+    END\n+END"
      },
      {
        "sha": "32a539aac66d914f4254012315ec3a7d7acb4383",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "added",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n+#include <wallet/wallettool.h>\n+\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupWalletToolArgs()\n+{\n+    SetupHelpOptions(gArgs);\n+    SetupChainParamsBaseOptions();\n+\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n+\n+    gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+}\n+\n+static bool WalletAppInit(int argc, char* argv[])\n+{\n+    SetupWalletToolArgs();\n+    std::string error_message;\n+    if (!gArgs.ParseParameters(argc, argv, error_message)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n+        return false;\n+    }\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+                                      \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                                      \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n+                                      \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n+                                      \"Usage:\\n\" +\n+                                     \"  bitcoin-wallet [options] <command>\\n\\n\" +\n+                                     gArgs.GetHelpMessage();\n+\n+        fprintf(stdout, \"%s\", usage.c_str());\n+        return false;\n+    }\n+\n+    // check for printtoconsole, allow -debug\n+    LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n+\n+    if (!fs::is_directory(GetDataDir(false))) {\n+        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        return false;\n+    }\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    SelectParams(gArgs.GetChainName());\n+\n+    return true;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+#ifdef WIN32\n+    util::WinCmdLineArgs winArgs;\n+    std::tie(argc, argv) = winArgs.get();\n+#endif\n+    SetupEnvironment();\n+    RandomInit();\n+    try {\n+        if (!WalletAppInit(argc, argv)) return EXIT_FAILURE;\n+    } catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    } catch (...) {\n+        PrintExceptionContinue(nullptr, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    std::string method {};\n+    for(int i = 1; i < argc; ++i) {\n+        if (!IsSwitchChar(argv[i][0])) {\n+            if (!method.empty()) {\n+                fprintf(stderr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n+                return EXIT_FAILURE;\n+            }\n+            method = argv[i];\n+        }\n+    }\n+\n+    if (method.empty()) {\n+        fprintf(stderr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    // A name must be provided when creating a file\n+    if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n+        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    std::string name = gArgs.GetArg(\"-wallet\", \"\");\n+\n+    ECCVerifyHandle globalVerifyHandle;\n+    ECC_Start();\n+    if (!WalletTool::ExecuteWalletToolFunc(method, name))\n+        return EXIT_FAILURE;\n+    ECC_Stop();\n+    return EXIT_SUCCESS;\n+}"
      },
      {
        "sha": "b31f86cdd9bdc92d4bb30fea8c152a30bb2b018f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,14 +11,16 @@\n #include <clientversion.h>\n #include <compat.h>\n #include <fs.h>\n+#include <interfaces/chain.h>\n #include <rpc/server.h>\n #include <init.h>\n #include <noui.h>\n #include <shutdown.h>\n-#include <util.h>\n+#include <util/system.h>\n #include <httpserver.h>\n #include <httprpc.h>\n-#include <utilstrencodings.h>\n+#include <util/threadnames.h>\n+#include <util/strencodings.h>\n #include <walletinitinterface.h>\n \n #include <stdio.h>\n@@ -58,8 +60,13 @@ static void WaitForShutdown()\n //\n static bool AppInit(int argc, char* argv[])\n {\n+    InitInterfaces interfaces;\n+    interfaces.chain = interfaces::MakeChain();\n+\n     bool fRet = false;\n \n+    util::ThreadRename(\"init\");\n+\n     //\n     // Parameters\n     //\n@@ -77,7 +84,7 @@ static bool AppInit(int argc, char* argv[])\n \n         if (gArgs.IsArgSet(\"-version\"))\n         {\n-            strUsage += FormatParagraph(LicenseInfo());\n+            strUsage += FormatParagraph(LicenseInfo()) + \"\\n\";\n         }\n         else\n         {\n@@ -164,7 +171,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain();\n+        fRet = AppInitMain(interfaces);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -178,13 +185,17 @@ static bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown();\n     }\n-    Shutdown();\n+    Shutdown(interfaces);\n \n     return fRet;\n }\n \n int main(int argc, char* argv[])\n {\n+#ifdef WIN32\n+    util::WinCmdLineArgs winArgs;\n+    std::tie(argc, argv) = winArgs.get();\n+#endif\n     SetupEnvironment();\n \n     // Connect bitcoind signal handlers"
      },
      {
        "sha": "10f51931f08ff6ebdc29138433baa7e17888cb07",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,12 +6,13 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <chainparams.h>\n-#include <hash.h>\n+#include <crypto/sha256.h>\n+#include <crypto/siphash.h>\n #include <random.h>\n #include <streams.h>\n #include <txmempool.h>\n #include <validation.h>\n-#include <util.h>\n+#include <util/system.h>\n \n #include <unordered_map>\n \n@@ -162,7 +163,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n             break;\n     }\n \n-    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n+    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, PROTOCOL_VERSION));\n \n     return READ_STATUS_OK;\n }"
      },
      {
        "sha": "0c2b83ebcfafec942725fb5accc0236e2088f0ba",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -52,12 +52,12 @@ class BlockTransactionsRequest {\n                 }\n             }\n \n-            uint16_t offset = 0;\n+            int32_t offset = 0;\n             for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n+                if (int32_t(indexes[j]) + offset > std::numeric_limits<uint16_t>::max())\n                     throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n                 indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n+                offset = int32_t(indexes[j]) + 1;\n             }\n         } else {\n             for (size_t i = 0; i < indexes.size(); i++) {\n@@ -186,6 +186,9 @@ class CBlockHeaderAndShortTxIDs {\n \n         READWRITE(prefilledtxn);\n \n+        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+            throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n+\n         if (ser_action.ForRead())\n             FillShortTxIDSelector();\n     }"
      },
      {
        "sha": "787390be31d421b792576bb9b4f2a8d7b462e6c9",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 23,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <mutex>\n+#include <sstream>\n+\n #include <blockfilter.h>\n+#include <crypto/siphash.h>\n #include <hash.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n@@ -14,6 +18,10 @@ static constexpr int GCS_SER_TYPE = SER_NETWORK;\n /// Protocol version used to serialize parameters in GCS filter encoding.\n static constexpr int GCS_SER_VERSION = 0;\n \n+static const std::map<BlockFilterType, std::string> g_filter_types = {\n+    {BlockFilterType::BASIC, \"basic\"},\n+};\n+\n template <typename OStream>\n static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n {\n@@ -78,7 +86,7 @@ static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n \n uint64_t GCSFilter::HashToRange(const Element& element) const\n {\n-    uint64_t hash = CSipHasher(m_siphash_k0, m_siphash_k1)\n+    uint64_t hash = CSipHasher(m_params.m_siphash_k0, m_params.m_siphash_k1)\n         .Write(element.data(), element.size())\n         .Finalize();\n     return MapIntoRange(hash, m_F);\n@@ -95,46 +103,42 @@ std::vector<uint64_t> GCSFilter::BuildHashedSet(const ElementSet& elements) cons\n     return hashed_elements;\n }\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M)\n-    : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_M(M), m_N(0), m_F(0)\n+GCSFilter::GCSFilter(const Params& params)\n+    : m_params(params), m_N(0), m_F(0), m_encoded{0}\n {}\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-                     std::vector<unsigned char> encoded_filter)\n-    : GCSFilter(siphash_k0, siphash_k1, P, M)\n+GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n+    : m_params(params), m_encoded(std::move(encoded_filter))\n {\n-    m_encoded = std::move(encoded_filter);\n-\n     VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n \n     uint64_t N = ReadCompactSize(stream);\n     m_N = static_cast<uint32_t>(N);\n     if (m_N != N) {\n         throw std::ios_base::failure(\"N must be <2^32\");\n     }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_M);\n+    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n \n     // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n     // data, a std::ios_base::failure exception will be raised.\n     BitStreamReader<VectorReader> bitreader(stream);\n     for (uint64_t i = 0; i < m_N; ++i) {\n-        GolombRiceDecode(bitreader, m_P);\n+        GolombRiceDecode(bitreader, m_params.m_P);\n     }\n     if (!stream.empty()) {\n         throw std::ios_base::failure(\"encoded_filter contains excess data\");\n     }\n }\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-                     const ElementSet& elements)\n-    : GCSFilter(siphash_k0, siphash_k1, P, M)\n+GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)\n+    : m_params(params)\n {\n     size_t N = elements.size();\n     m_N = static_cast<uint32_t>(N);\n     if (m_N != N) {\n         throw std::invalid_argument(\"N must be <2^32\");\n     }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_M);\n+    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n \n     CVectorWriter stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n \n@@ -149,7 +153,7 @@ GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32\n     uint64_t last_value = 0;\n     for (uint64_t value : BuildHashedSet(elements)) {\n         uint64_t delta = value - last_value;\n-        GolombRiceEncode(bitwriter, m_P, delta);\n+        GolombRiceEncode(bitwriter, m_params.m_P, delta);\n         last_value = value;\n     }\n \n@@ -169,7 +173,7 @@ bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\n     uint64_t value = 0;\n     size_t hashes_index = 0;\n     for (uint32_t i = 0; i < m_N; ++i) {\n-        uint64_t delta = GolombRiceDecode(bitreader, m_P);\n+        uint64_t delta = GolombRiceDecode(bitreader, m_params.m_P);\n         value += delta;\n \n         while (true) {\n@@ -200,6 +204,57 @@ bool GCSFilter::MatchAny(const ElementSet& elements) const\n     return MatchInternal(queries.data(), queries.size());\n }\n \n+const std::string& BlockFilterTypeName(BlockFilterType filter_type)\n+{\n+    static std::string unknown_retval = \"\";\n+    auto it = g_filter_types.find(filter_type);\n+    return it != g_filter_types.end() ? it->second : unknown_retval;\n+}\n+\n+bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type) {\n+    for (const auto& entry : g_filter_types) {\n+        if (entry.second == name) {\n+            filter_type = entry.first;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+const std::vector<BlockFilterType>& AllBlockFilterTypes()\n+{\n+    static std::vector<BlockFilterType> types;\n+\n+    static std::once_flag flag;\n+    std::call_once(flag, []() {\n+            types.reserve(g_filter_types.size());\n+            for (auto entry : g_filter_types) {\n+                types.push_back(entry.first);\n+            }\n+        });\n+\n+    return types;\n+}\n+\n+const std::string& ListBlockFilterTypes()\n+{\n+    static std::string type_list;\n+\n+    static std::once_flag flag;\n+    std::call_once(flag, []() {\n+            std::stringstream ret;\n+            bool first = true;\n+            for (auto entry : g_filter_types) {\n+                if (!first) ret << \", \";\n+                ret << entry.second;\n+                first = false;\n+            }\n+            type_list = ret.str();\n+        });\n+\n+    return type_list;\n+}\n+\n static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n                                                  const CBlockUndo& block_undo)\n {\n@@ -224,19 +279,41 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     return elements;\n }\n \n+BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n+                         std::vector<unsigned char> filter)\n+    : m_filter_type(filter_type), m_block_hash(block_hash)\n+{\n+    GCSFilter::Params params;\n+    if (!BuildParams(params)) {\n+        throw std::invalid_argument(\"unknown filter_type\");\n+    }\n+    m_filter = GCSFilter(params, std::move(filter));\n+}\n+\n BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)\n     : m_filter_type(filter_type), m_block_hash(block.GetHash())\n+{\n+    GCSFilter::Params params;\n+    if (!BuildParams(params)) {\n+        throw std::invalid_argument(\"unknown filter_type\");\n+    }\n+    m_filter = GCSFilter(params, BasicFilterElements(block, block_undo));\n+}\n+\n+bool BlockFilter::BuildParams(GCSFilter::Params& params) const\n {\n     switch (m_filter_type) {\n     case BlockFilterType::BASIC:\n-        m_filter = GCSFilter(m_block_hash.GetUint64(0), m_block_hash.GetUint64(1),\n-                             BASIC_FILTER_P, BASIC_FILTER_M,\n-                             BasicFilterElements(block, block_undo));\n-        break;\n-\n-    default:\n-        throw std::invalid_argument(\"unknown filter_type\");\n+        params.m_siphash_k0 = m_block_hash.GetUint64(0);\n+        params.m_siphash_k1 = m_block_hash.GetUint64(1);\n+        params.m_P = BASIC_FILTER_P;\n+        params.m_M = BASIC_FILTER_M;\n+        return true;\n+    case BlockFilterType::INVALID:\n+        return false;\n     }\n+\n+    return false;\n }\n \n uint256 BlockFilter::GetHash() const"
      },
      {
        "sha": "914b94fec13c94d2103ff8609ac6143e13b34e31",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 51,
        "deletions": 26,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,14 +5,16 @@\n #ifndef BITCOIN_BLOCKFILTER_H\n #define BITCOIN_BLOCKFILTER_H\n \n-#include <set>\n #include <stdint.h>\n+#include <string>\n+#include <unordered_set>\n #include <vector>\n \n #include <primitives/block.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <undo.h>\n+#include <util/bytevectorhash.h>\n \n /**\n  * This implements a Golomb-coded set as defined in BIP 158. It is a\n@@ -22,13 +24,22 @@ class GCSFilter\n {\n public:\n     typedef std::vector<unsigned char> Element;\n-    typedef std::set<Element> ElementSet;\n+    typedef std::unordered_set<Element, ByteVectorHash> ElementSet;\n+\n+    struct Params\n+    {\n+        uint64_t m_siphash_k0;\n+        uint64_t m_siphash_k1;\n+        uint8_t m_P;  //!< Golomb-Rice coding parameter\n+        uint32_t m_M;  //!< Inverse false positive rate\n+\n+        Params(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 1)\n+            : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_M(M)\n+        {}\n+    };\n \n private:\n-    uint64_t m_siphash_k0;\n-    uint64_t m_siphash_k1;\n-    uint8_t m_P;  //!< Golomb-Rice coding parameter\n-    uint32_t m_M;  //!< Inverse false positive rate\n+    Params m_params;\n     uint32_t m_N;  //!< Number of elements in the filter\n     uint64_t m_F;  //!< Range of element hashes, F = N * M\n     std::vector<unsigned char> m_encoded;\n@@ -44,19 +55,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    explicit GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n \n     /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              const ElementSet& elements);\n+    GCSFilter(const Params& params, const ElementSet& elements);\n \n-    uint8_t GetP() const { return m_P; }\n     uint32_t GetN() const { return m_N; }\n-    uint32_t GetM() const { return m_M; }\n+    const Params& GetParams() const { return m_params; }\n     const std::vector<unsigned char>& GetEncoded() const { return m_encoded; }\n \n     /**\n@@ -76,40 +84,61 @@ class GCSFilter\n constexpr uint8_t BASIC_FILTER_P = 19;\n constexpr uint32_t BASIC_FILTER_M = 784931;\n \n-enum BlockFilterType : uint8_t\n+enum class BlockFilterType : uint8_t\n {\n     BASIC = 0,\n+    INVALID = 255,\n };\n \n+/** Get the human-readable name for a filter type. Returns empty string for unknown types. */\n+const std::string& BlockFilterTypeName(BlockFilterType filter_type);\n+\n+/** Find a filter type by its human-readable name. */\n+bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type);\n+\n+/** Get a list of known filter types. */\n+const std::vector<BlockFilterType>& AllBlockFilterTypes();\n+\n+/** Get a comma-separated list of known filter type names. */\n+const std::string& ListBlockFilterTypes();\n+\n /**\n  * Complete block filter struct as defined in BIP 157. Serialization matches\n  * payload of \"cfilter\" messages.\n  */\n class BlockFilter\n {\n private:\n-    BlockFilterType m_filter_type;\n+    BlockFilterType m_filter_type = BlockFilterType::INVALID;\n     uint256 m_block_hash;\n     GCSFilter m_filter;\n \n+    bool BuildParams(GCSFilter::Params& params) const;\n+\n public:\n \n-    // Construct a new BlockFilter of the specified type from a block.\n+    BlockFilter() = default;\n+\n+    //! Reconstruct a BlockFilter from parts.\n+    BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n+                std::vector<unsigned char> filter);\n+\n+    //! Construct a new BlockFilter of the specified type from a block.\n     BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo);\n \n     BlockFilterType GetFilterType() const { return m_filter_type; }\n-\n+    const uint256& GetBlockHash() const { return m_block_hash; }\n     const GCSFilter& GetFilter() const { return m_filter; }\n \n     const std::vector<unsigned char>& GetEncodedFilter() const\n     {\n         return m_filter.GetEncoded();\n     }\n \n-    // Compute the filter hash.\n+    //! Compute the filter hash.\n     uint256 GetHash() const;\n \n-    // Compute the filter header given the previous one.\n+    //! Compute the filter header given the previous one.\n     uint256 ComputeHeader(const uint256& prev_header) const;\n \n     template <typename Stream>\n@@ -130,15 +159,11 @@ class BlockFilter\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);\n \n-        switch (m_filter_type) {\n-        case BlockFilterType::BASIC:\n-            m_filter = GCSFilter(m_block_hash.GetUint64(0), m_block_hash.GetUint64(1),\n-                                 BASIC_FILTER_P, BASIC_FILTER_M, std::move(encoded_filter));\n-            break;\n-\n-        default:\n+        GCSFilter::Params params;\n+        if (!BuildParams(params)) {\n             throw std::ios_base::failure(\"unknown filter_type\");\n         }\n+        m_filter = GCSFilter(params, std::move(encoded_filter));\n     }\n };\n "
      },
      {
        "sha": "5520d8149a1c2c46683cf6d709f930a5b927e1c2",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -59,10 +59,11 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n-CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n+CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime, int height) const\n {\n-    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n-        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });\n+    std::pair<int64_t, int> blockparams = std::make_pair(nTime, height);\n+    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), blockparams,\n+        [](CBlockIndex* pBlock, const std::pair<int64_t, int>& blockparams) -> bool { return pBlock->GetBlockTimeMax() < blockparams.first || pBlock->nHeight < blockparams.second; });\n     return (lower == vChain.end() ? nullptr : *lower);\n }\n "
      },
      {
        "sha": "dd9cc2a598a8b004ccc4c412088114f7fa105e01",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 26,
        "deletions": 48,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <arith_uint256.h>\n #include <consensus/params.h>\n+#include <flatfile.h>\n #include <primitives/block.h>\n #include <tinyformat.h>\n #include <uint256.h>\n@@ -18,15 +19,23 @@\n  * Maximum amount of time that a block timestamp is allowed to exceed the\n  * current network-adjusted time before the block will be accepted.\n  */\n-static const int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;\n+static constexpr int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;\n \n /**\n  * Timestamp window used as a grace period by code that compares external\n  * timestamps (such as timestamps passed to RPCs, or wallet key creation times)\n  * to block timestamps. This should be set at least as high as\n  * MAX_FUTURE_BLOCK_TIME.\n  */\n-static const int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;\n+static constexpr int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;\n+\n+/**\n+ * Maximum gap between node time and block time used\n+ * for the \"Catching up...\" mode in GUI.\n+ *\n+ * Ref: https://github.com/bitcoin/bitcoin/pull/1026\n+ */\n+static constexpr int64_t MAX_BLOCK_TIME_GAP = 90 * 60;\n \n class CBlockFileInfo\n {\n@@ -82,46 +91,6 @@ class CBlockFileInfo\n      }\n };\n \n-struct CDiskBlockPos\n-{\n-    int nFile;\n-    unsigned int nPos;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n-\n-    CDiskBlockPos() {\n-        SetNull();\n-    }\n-\n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n-\n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return (a.nFile == b.nFile && a.nPos == b.nPos);\n-    }\n-\n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return !(a == b);\n-    }\n-\n-    void SetNull() { nFile = -1; nPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n-    }\n-\n-};\n-\n enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n@@ -258,17 +227,17 @@ class CBlockIndex\n         nNonce         = block.nNonce;\n     }\n \n-    CDiskBlockPos GetBlockPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetBlockPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_DATA) {\n             ret.nFile = nFile;\n             ret.nPos  = nDataPos;\n         }\n         return ret;\n     }\n \n-    CDiskBlockPos GetUndoPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetUndoPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_UNDO) {\n             ret.nFile = nFile;\n             ret.nPos  = nUndoPos;\n@@ -294,6 +263,15 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n+    /**\n+     * Check whether this block's and all previous blocks' transactions have been\n+     * downloaded (and stored to disk) at some point.\n+     *\n+     * Does not imply the transactions are consensus-valid (ConnectTip might fail)\n+     * Does not imply the transactions are still stored on disk. (IsBlockPruned might return true)\n+     */\n+    bool HaveTxsDownloaded() const { return nChainTx != 0; }\n+\n     int64_t GetBlockTime() const\n     {\n         return (int64_t)nTime;\n@@ -487,8 +465,8 @@ class CChain {\n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n \n-    /** Find the earliest block with timestamp equal or greater than the given. */\n-    CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n+    /** Find the earliest block with timestamp equal or greater than the given time and height equal or greater than the given height. */\n+    CBlockIndex* FindEarliestAtLeast(int64_t nTime, int height) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "b8e0ea23dd5a452fca66110f3c93f2945872d6df",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 26,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,11 +8,15 @@\n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n #include <tinyformat.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n+#include <versionbitsinfo.h>\n \n #include <assert.h>\n \n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -52,12 +56,6 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n-void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-{\n-    consensus.vDeployments[d].nStartTime = nStartTime;\n-    consensus.vDeployments[d].nTimeout = nTimeout;\n-}\n-\n /**\n  * Main network\n  */\n@@ -93,10 +91,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000028822fef1c230963535a90d\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\"); //534292\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\"); //563378\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -109,6 +107,8 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n+        m_assumed_blockchain_size = 240;\n+        m_assumed_chain_state_size = 3;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -127,6 +127,7 @@ class CMainParams : public CChainParams {\n         vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\"); // Jonas Schnelli, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"seed.btc.petertodd.org\"); // Peter Todd, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"seed.bitcoin.sprovoost.nl\"); // Sjors Provoost\n+        vSeeds.emplace_back(\"dnsseed.emzy.de\"); // Stephan Oeste\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -161,10 +162,10 @@ class CMainParams : public CChainParams {\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from rpc: getchaintxstats 4096 0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\n-            /* nTime    */ 1532884444,\n-            /* nTxCount */ 331282217,\n-            /* dTxRate  */ 2.4\n+            // Data from rpc: getchaintxstats 4096 0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\n+            /* nTime    */ 1550374134,\n+            /* nTxCount */ 383732546,\n+            /* dTxRate  */ 3.685496590998308\n         };\n \n         /* disable fallback fee on mainnet */\n@@ -218,6 +219,8 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[3] = 0x07;\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n+        m_assumed_blockchain_size = 30;\n+        m_assumed_chain_state_size = 2;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -270,14 +273,14 @@ class CTestNetParams : public CChainParams {\n  */\n class CRegTestParams : public CChainParams {\n public:\n-    CRegTestParams() {\n+    explicit CRegTestParams(const ArgsManager& args) {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n-        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -307,6 +310,10 @@ class CRegTestParams : public CChainParams {\n         pchMessageStart[3] = 0xda;\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n+        m_assumed_blockchain_size = 0;\n+        m_assumed_chain_state_size = 0;\n+\n+        UpdateVersionBitsParametersFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -343,23 +350,65 @@ class CRegTestParams : public CChainParams {\n         /* enable fallback fee on regtest */\n         m_fallback_fee_enabled = true;\n     }\n+\n+    /**\n+     * Allows modifying the Version Bits regtest parameters.\n+     */\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    {\n+        consensus.vDeployments[d].nStartTime = nStartTime;\n+        consensus.vDeployments[d].nTimeout = nTimeout;\n+    }\n+    void UpdateVersionBitsParametersFromArgs(const ArgsManager& args);\n };\n \n-static std::unique_ptr<CChainParams> globalChainParams;\n+void CRegTestParams::UpdateVersionBitsParametersFromArgs(const ArgsManager& args)\n+{\n+    if (!args.IsArgSet(\"-vbparams\")) return;\n+\n+    for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n+        std::vector<std::string> vDeploymentParams;\n+        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n+        if (vDeploymentParams.size() != 3) {\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+        }\n+        int64_t nStartTime, nTimeout;\n+        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n+            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+        }\n+        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n+            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+        }\n+        bool found = false;\n+        for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n+            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                found = true;\n+                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                break;\n+            }\n+        }\n+        if (!found) {\n+            throw std::runtime_error(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+        }\n+    }\n+}\n+\n+static std::unique_ptr<const CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n     return *globalChainParams;\n }\n \n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CChainParams>(new CRegTestParams());\n+        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n@@ -368,8 +417,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     globalChainParams = CreateChainParams(network);\n }\n-\n-void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-{\n-    globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n-}"
      },
      {
        "sha": "6ff3dbb7e53d35477941c819b12a5988f4ea218f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -67,6 +67,10 @@ class CChainParams\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n+    /** Minimum free space (in GB) needed for data directory */\n+    uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n+    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n+    uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** Return the BIP70 network string (main, test or regtest) */\n@@ -80,14 +84,15 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n \n     Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n     int nDefaultPort;\n     uint64_t nPruneAfterHeight;\n+    uint64_t m_assumed_blockchain_size;\n+    uint64_t m_assumed_chain_state_size;\n     std::vector<std::string> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string bech32_hrp;\n@@ -107,7 +112,7 @@ class CChainParams\n  * @returns a CChainParams* of the chosen chain.\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n \n /**\n  * Return the currently selected parameters. This won't change after app\n@@ -121,9 +126,4 @@ const CChainParams &Params();\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Allows modifying the Version Bits regtest parameters.\n- */\n-void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "f0559a319acb7c419da37be6e087e557d735d10c",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,8 +6,8 @@\n #include <chainparamsbase.h>\n \n #include <tinyformat.h>\n-#include <util.h>\n-#include <utilmemory.h>\n+#include <util/system.h>\n+#include <util/memory.h>\n \n #include <assert.h>\n \n@@ -20,6 +20,7 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "ad5edfeb390b8b6ba91afd2b890df5d911f832bc",
        "filename": "src/checkpoints.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,32 +0,0 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <checkpoints.h>\n-\n-#include <chain.h>\n-#include <chainparams.h>\n-#include <reverse_iterator.h>\n-#include <validation.h>\n-\n-#include <stdint.h>\n-\n-\n-namespace Checkpoints {\n-\n-    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n-    {\n-        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n-\n-        for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n-        {\n-            const uint256& hash = i.second;\n-            CBlockIndex* pindex = LookupBlockIndex(hash);\n-            if (pindex) {\n-                return pindex;\n-            }\n-        }\n-        return nullptr;\n-    }\n-\n-} // namespace Checkpoints"
      },
      {
        "sha": "a25e97e469c8b2ae85711a3abda6b0a4470840cc",
        "filename": "src/checkpoints.h",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f8aab075e2c521020cc539e495ef6a3d5299e5/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f8aab075e2c521020cc539e495ef6a3d5299e5/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=09f8aab075e2c521020cc539e495ef6a3d5299e5",
        "patch": "@@ -1,27 +0,0 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_CHECKPOINTS_H\n-#define BITCOIN_CHECKPOINTS_H\n-\n-#include <uint256.h>\n-\n-#include <map>\n-\n-class CBlockIndex;\n-struct CCheckpointData;\n-\n-/**\n- * Block-chain checkpoints are compiled-in sanity checks.\n- * They are updated every release or three.\n- */\n-namespace Checkpoints\n-{\n-\n-//! Returns last CBlockIndex* that is a checkpoint\n-CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n-\n-} //namespace Checkpoints\n-\n-#endif // BITCOIN_CHECKPOINTS_H"
      },
      {
        "sha": "3ef9e0463c45de85727405233d6adb297efbda8b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <consensus/consensus.h>\n #include <random.h>\n+#include <version.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n@@ -244,7 +245,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);\n static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)"
      },
      {
        "sha": "482e233e8ccb9b6db6bfc484c4f463f9e8b0c5d2",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -9,7 +9,7 @@\n #include <primitives/transaction.h>\n #include <compressor.h>\n #include <core_memusage.h>\n-#include <hash.h>\n+#include <crypto/siphash.h>\n #include <memusage.h>\n #include <serialize.h>\n #include <uint256.h>\n@@ -285,30 +285,34 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Note that lightweight clients may not know anything besides the hash of previous transactions,\n      * so may not be able to calculate this.\n      *\n-     * @param[in] tx\ttransaction for which we are checking input total\n-     * @return\tSum of value of all inputs (scriptSigs)\n+     * @param[in] tx    transaction for which we are checking input total\n+     * @return  Sum of value of all inputs (scriptSigs)\n      */\n     CAmount GetValueIn(const CTransaction& tx) const;\n \n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n private:\n+    /**\n+     * @note this is marked const, but may actually append to `cacheCoins`, increasing\n+     * memory usage.\n+     */\n     CCoinsMap::iterator FetchCoin(const COutPoint &outpoint) const;\n };\n \n //! Utility function to add all of a transaction's outputs to a cache.\n-// When check is false, this assumes that overwrites are only possible for coinbase transactions.\n-// When check is true, the underlying view may be queried to determine whether an addition is\n-// an overwrite.\n+//! When check is false, this assumes that overwrites are only possible for coinbase transactions.\n+//! When check is true, the underlying view may be queried to determine whether an addition is\n+//! an overwrite.\n // TODO: pass in a boolean to limit these possible overwrites to known\n // (pre-BIP34) cases.\n void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n \n //! Utility function to find any unspent output with a given txid.\n-// This function can be quite expensive because in the event of a transaction\n-// which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n-// lookups to database, so it should be used with care.\n+//! This function can be quite expensive because in the event of a transaction\n+//! which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n+//! lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "68f6eb692c760ee5ade0f12ed3ee78ed9cfcd2fb",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 8,
        "deletions": 15,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -10,21 +10,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <type_traits>\n-\n-// GCC 4.8 is missing some C++11 type_traits,\n-// https://www.gnu.org/software/gcc/gcc-5/changes.html\n-#if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 5\n-#define IS_TRIVIALLY_CONSTRUCTIBLE std::has_trivial_default_constructor\n-#else\n-#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_default_constructible\n-#endif\n-\n #ifdef WIN32\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n #ifndef WIN32_LEAN_AND_MEAN\n #define WIN32_LEAN_AND_MEAN 1\n #endif\n@@ -102,8 +88,15 @@ typedef void* sockopt_arg_type;\n typedef char* sockopt_arg_type;\n #endif\n \n+// Note these both should work with the current usage of poll, but best to be safe\n+// WIN32 poll is broken https://daniel.haxx.se/blog/2012/10/10/wsapoll-is-broken/\n+// __APPLE__ poll is broke https://github.com/bitcoin/bitcoin/pull/14336#issuecomment-437384408\n+#if defined(__linux__)\n+#define USE_POLL\n+#endif\n+\n bool static inline IsSelectableSocket(const SOCKET& s) {\n-#ifdef WIN32\n+#if defined(USE_POLL) || defined(WIN32)\n     return true;\n #else\n     return (s < FD_SETSIZE);"
      },
      {
        "sha": "6e7b4d3dedba02e0a5646f80657f4f9901996013",
        "filename": "src/compat/assumptions.h",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Compile-time verification of assumptions we make.\n+\n+#ifndef BITCOIN_COMPAT_ASSUMPTIONS_H\n+#define BITCOIN_COMPAT_ASSUMPTIONS_H\n+\n+#include <limits>\n+\n+// Assumption: We assume that the macro NDEBUG is not defined.\n+// Example(s): We use assert(...) extensively with the assumption of it never\n+//             being a noop at runtime.\n+#if defined(NDEBUG)\n+# error \"Bitcoin cannot be compiled without assertions.\"\n+#endif\n+\n+// Assumption: We assume a C++11 (ISO/IEC 14882:2011) compiler (minimum requirement).\n+// Example(s): We assume the presence of C++11 features everywhere :-)\n+// Note:       MSVC does not report the expected __cplusplus value due to legacy\n+//             reasons.\n+#if !defined(_MSC_VER)\n+// ISO Standard C++11 [cpp.predefined]p1:\n+// \"The name __cplusplus is defined to the value 201103L when compiling a C++\n+//  translation unit.\"\n+static_assert(__cplusplus >= 201103L, \"C++11 standard assumed\");\n+#endif\n+\n+// Assumption: We assume the floating-point types to fulfill the requirements of\n+//             IEC 559 (IEEE 754) standard.\n+// Example(s): Floating-point division by zero in ConnectBlock, CreateTransaction\n+//             and EstimateMedianVal.\n+static_assert(std::numeric_limits<float>::is_iec559, \"IEEE 754 float assumed\");\n+static_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\");\n+\n+// Assumption: We assume eight bits per byte (obviously, but remember: don't\n+//             trust -- verify!).\n+// Example(s): Everywhere :-)\n+static_assert(std::numeric_limits<unsigned char>::digits == 8, \"8-bit byte assumed\");\n+\n+// Assumption: We assume floating-point widths.\n+// Example(s): Type punning in serialization code (ser_{float,double}_to_uint{32,64}).\n+static_assert(sizeof(float) == 4, \"32-bit float assumed\");\n+static_assert(sizeof(double) == 8, \"64-bit double assumed\");\n+\n+// Assumption: We assume integer widths.\n+// Example(s): GetSizeOfCompactSize and WriteCompactSize in the serialization\n+//             code.\n+static_assert(sizeof(short) == 2, \"16-bit short assumed\");\n+static_assert(sizeof(int) == 4, \"32-bit int assumed\");\n+\n+// Assumption: We assume size_t to be 32-bit or 64-bit.\n+// Example(s): size_t assumed to be at least 32-bit in ecdsa_signature_parse_der_lax(...).\n+//             size_t assumed to be 32-bit or 64-bit in MallocUsage(...).\n+static_assert(sizeof(size_t) == 4 || sizeof(size_t) == 8, \"size_t assumed to be 32-bit or 64-bit\");\n+static_assert(sizeof(size_t) == sizeof(void*), \"Sizes of size_t and void* assumed to be equal\");\n+\n+// Some important things we are NOT assuming (non-exhaustive list):\n+// * We are NOT assuming a specific value for std::endian::native.\n+// * We are NOT assuming a specific value for std::locale(\"\").name().\n+// * We are NOT assuming a specific value for std::numeric_limits<char>::is_signed.\n+\n+#endif // BITCOIN_COMPAT_ASSUMPTIONS_H"
      },
      {
        "sha": "b47d9774ca62be6a4b78d3181d68fd153862f67c",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <consensus/merkle.h>\n #include <hash.h>\n-#include <utilstrencodings.h>\n+#include <util/strencodings.h>\n \n /*     WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind"
      },
      {
        "sha": "61a607ef7f7870ec2d1bec96c0e6003e5f3b7aa4",
        "filename": "src/consensus/tx_check.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+\n+#include <primitives/transaction.h>\n+#include <consensus/validation.h>\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n+    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (const auto& txout : tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n+    if (fCheckDuplicateInputs) {\n+        std::set<COutPoint> vInOutPoints;\n+        for (const auto& txin : tx.vin)\n+        {\n+            if (!vInOutPoints.insert(txin.prevout).second)\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        }\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (const auto& txin : tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "bcfdf36bf95c59698af3886bae421eab39bfdfa8",
        "filename": "src/consensus/tx_check.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_TX_CHECK_H\n+#define BITCOIN_CONSENSUS_TX_CHECK_H\n+\n+/**\n+ * Context-independent transaction checking code that can be called outside the\n+ * bitcoin server and doesn't depend on chain or mempool state. Transaction\n+ * verification code that does call server functions or depend on server state\n+ * belongs in tx_verify.h/cpp instead.\n+ */\n+\n+class CTransaction;\n+class CValidationState;\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n+\n+#endif // BITCOIN_CONSENSUS_TX_CHECK_H"
      },
      {
        "sha": "fbbbcfd04035b28a0ff46776ce3451c41853b0b0",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 51,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2017 The Bitcoin Core developers\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,7 +12,7 @@\n // TODO remove the following dependencies\n #include <chain.h>\n #include <coins.h>\n-#include <utilmoneystr.h>\n+#include <util/moneystr.h>\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n@@ -156,55 +156,6 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n     return nSigOps;\n }\n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (const auto& txout : tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)\n {\n     // are the actual inputs available?"
      },
      {
        "sha": "3519fc555dbfa304d8fb796dfdb949218135fcae",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -17,9 +17,6 @@ class CValidationState;\n \n /** Transaction validation functions */\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n-\n namespace Consensus {\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)"
      },
      {
        "sha": "f2e2c3585a9df790b4658009dbd1d16a3da341bc",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -95,16 +95,16 @@ class CValidationState {\n // weight = (stripped_size * 3) + total_size.\n static inline int64_t GetTransactionWeight(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, PROTOCOL_VERSION);\n }\n static inline int64_t GetBlockWeight(const CBlock& block)\n {\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, PROTOCOL_VERSION);\n }\n static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n {\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n-    return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(txin, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, PROTOCOL_VERSION);\n }\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "19fb7b29f67f778be404f22474516ae62756df86",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_CORE_IO_H\n \n #include <amount.h>\n+#include <attributes.h>\n \n #include <string>\n #include <vector>\n@@ -15,19 +16,26 @@ class CBlockHeader;\n class CScript;\n class CTransaction;\n struct CMutableTransaction;\n-struct PartiallySignedTransaction;\n class uint256;\n class UniValue;\n \n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n-bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+NODISCARD bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n+NODISCARD bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n-uint256 ParseHashStr(const std::string&, const std::string& strName);\n+\n+/**\n+ * Parse a hex string into 256 bits\n+ * @param[in] strHex a hex-formatted, 64-character string\n+ * @param[out] result the result of the parasing\n+ * @returns true if successful, false if not\n+ *\n+ * @see ParseHashV for an RPC-oriented version of this\n+ */\n+bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "a879a375cef4a38dc97de40068555fd318515613",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 23,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,8 +11,8 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n #include <version.h>\n \n #include <boost/algorithm/string/classification.hpp>\n@@ -176,31 +176,13 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n+bool ParseHashStr(const std::string& strHex, uint256& result)\n {\n-    std::vector<unsigned char> tx_data = DecodeBase64(base64_tx.c_str());\n-    CDataStream ss_data(tx_data, SER_NETWORK, PROTOCOL_VERSION);\n-    try {\n-        ss_data >> psbt;\n-        if (!ss_data.empty()) {\n-            error = \"extra data after PSBT\";\n-            return false;\n-        }\n-    } catch (const std::exception& e) {\n-        error = e.what();\n+    if ((strHex.size() != 64) || !IsHex(strHex))\n         return false;\n-    }\n-    return true;\n-}\n \n-uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n-{\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n-\n-    uint256 result;\n     result.SetHex(strHex);\n-    return result;\n+    return true;\n }\n \n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)"
      },
      {
        "sha": "765a170307e31b21b5aa62915385fe103e232c9a",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,9 +12,9 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n-#include <util.h>\n-#include <utilmoneystr.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/moneystr.h>\n+#include <util/strencodings.h>\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n@@ -181,7 +181,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n-    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION));\n+    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, PROTOCOL_VERSION));\n     entry.pushKV(\"vsize\", (GetTransactionWeight(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR);\n     entry.pushKV(\"weight\", GetTransactionWeight(tx));\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);"
      },
      {
        "sha": "2dc2133434841af95d5c8bd630baed5008c2889b",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,36 +12,6 @@ extern \"C\" {\n #include <crypto/ctaes/ctaes.c>\n }\n \n-AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n-{\n-    AES128_init(&ctx, key);\n-}\n-\n-AES128Encrypt::~AES128Encrypt()\n-{\n-    memset(&ctx, 0, sizeof(ctx));\n-}\n-\n-void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n-{\n-    AES128_encrypt(&ctx, 1, ciphertext, plaintext);\n-}\n-\n-AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n-{\n-    AES128_init(&ctx, key);\n-}\n-\n-AES128Decrypt::~AES128Decrypt()\n-{\n-    memset(&ctx, 0, sizeof(ctx));\n-}\n-\n-void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n-{\n-    AES128_decrypt(&ctx, 1, plaintext, ciphertext);\n-}\n-\n AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n {\n     AES256_init(&ctx, key);\n@@ -182,35 +152,3 @@ AES256CBCDecrypt::~AES256CBCDecrypt()\n {\n     memset(iv, 0, sizeof(iv));\n }\n-\n-AES128CBCEncrypt::AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n-    : enc(key), pad(padIn)\n-{\n-    memcpy(iv, ivIn, AES_BLOCKSIZE);\n-}\n-\n-AES128CBCEncrypt::~AES128CBCEncrypt()\n-{\n-    memset(iv, 0, AES_BLOCKSIZE);\n-}\n-\n-int AES128CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n-{\n-    return CBCEncrypt(enc, iv, data, size, pad, out);\n-}\n-\n-AES128CBCDecrypt::AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n-    : dec(key), pad(padIn)\n-{\n-    memcpy(iv, ivIn, AES_BLOCKSIZE);\n-}\n-\n-AES128CBCDecrypt::~AES128CBCDecrypt()\n-{\n-    memset(iv, 0, AES_BLOCKSIZE);\n-}\n-\n-int AES128CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n-{\n-    return CBCDecrypt(dec, iv, data, size, pad, out);\n-}"
      },
      {
        "sha": "e06c8de272ea53d8c54234d016d2e0cb078de742",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -12,33 +12,8 @@ extern \"C\" {\n }\n \n static const int AES_BLOCKSIZE = 16;\n-static const int AES128_KEYSIZE = 16;\n static const int AES256_KEYSIZE = 32;\n \n-/** An encryption class for AES-128. */\n-class AES128Encrypt\n-{\n-private:\n-    AES128_ctx ctx;\n-\n-public:\n-    explicit AES128Encrypt(const unsigned char key[16]);\n-    ~AES128Encrypt();\n-    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n-};\n-\n-/** A decryption class for AES-128. */\n-class AES128Decrypt\n-{\n-private:\n-    AES128_ctx ctx;\n-\n-public:\n-    explicit AES128Decrypt(const unsigned char key[16]);\n-    ~AES128Decrypt();\n-    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n-};\n-\n /** An encryption class for AES-256. */\n class AES256Encrypt\n {\n@@ -89,30 +64,4 @@ class AES256CBCDecrypt\n     unsigned char iv[AES_BLOCKSIZE];\n };\n \n-class AES128CBCEncrypt\n-{\n-public:\n-    AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n-    ~AES128CBCEncrypt();\n-    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n-\n-private:\n-    const AES128Encrypt enc;\n-    const bool pad;\n-    unsigned char iv[AES_BLOCKSIZE];\n-};\n-\n-class AES128CBCDecrypt\n-{\n-public:\n-    AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n-    ~AES128CBCDecrypt();\n-    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n-\n-private:\n-    const AES128Decrypt dec;\n-    const bool pad;\n-    unsigned char iv[AES_BLOCKSIZE];\n-};\n-\n #endif // BITCOIN_CRYPTO_AES_H"
      },
      {
        "sha": "8a86c9601ce72d0641827479543c693625f14b18",
        "filename": "src/crypto/poly1305.cpp",
        "status": "added",
        "additions": 141,
        "deletions": 0,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/poly1305.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Based on the public domain implementation by Andrew Moon\n+// poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+\n+#include <string.h>\n+\n+#define mul32x32_64(a,b) ((uint64_t)(a) * (b))\n+\n+void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {\n+    uint32_t t0,t1,t2,t3;\n+    uint32_t h0,h1,h2,h3,h4;\n+    uint32_t r0,r1,r2,r3,r4;\n+    uint32_t s1,s2,s3,s4;\n+    uint32_t b, nb;\n+    size_t j;\n+    uint64_t t[5];\n+    uint64_t f0,f1,f2,f3;\n+    uint64_t g0,g1,g2,g3,g4;\n+    uint64_t c;\n+    unsigned char mp[16];\n+\n+    /* clamp key */\n+    t0 = ReadLE32(key+0);\n+    t1 = ReadLE32(key+4);\n+    t2 = ReadLE32(key+8);\n+    t3 = ReadLE32(key+12);\n+\n+    /* precompute multipliers */\n+    r0 = t0 & 0x3ffffff; t0 >>= 26; t0 |= t1 << 6;\n+    r1 = t0 & 0x3ffff03; t1 >>= 20; t1 |= t2 << 12;\n+    r2 = t1 & 0x3ffc0ff; t2 >>= 14; t2 |= t3 << 18;\n+    r3 = t2 & 0x3f03fff; t3 >>= 8;\n+    r4 = t3 & 0x00fffff;\n+\n+    s1 = r1 * 5;\n+    s2 = r2 * 5;\n+    s3 = r3 * 5;\n+    s4 = r4 * 5;\n+\n+    /* init state */\n+    h0 = 0;\n+    h1 = 0;\n+    h2 = 0;\n+    h3 = 0;\n+    h4 = 0;\n+\n+    /* full blocks */\n+    if (inlen < 16) goto poly1305_donna_atmost15bytes;\n+poly1305_donna_16bytes:\n+    m += 16;\n+    inlen -= 16;\n+\n+    t0 = ReadLE32(m-16);\n+    t1 = ReadLE32(m-12);\n+    t2 = ReadLE32(m-8);\n+    t3 = ReadLE32(m-4);\n+\n+    h0 += t0 & 0x3ffffff;\n+    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n+    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n+    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n+    h4 += (t3 >> 8) | (1 << 24);\n+\n+\n+poly1305_donna_mul:\n+    t[0]  = mul32x32_64(h0,r0) + mul32x32_64(h1,s4) + mul32x32_64(h2,s3) + mul32x32_64(h3,s2) + mul32x32_64(h4,s1);\n+    t[1]  = mul32x32_64(h0,r1) + mul32x32_64(h1,r0) + mul32x32_64(h2,s4) + mul32x32_64(h3,s3) + mul32x32_64(h4,s2);\n+    t[2]  = mul32x32_64(h0,r2) + mul32x32_64(h1,r1) + mul32x32_64(h2,r0) + mul32x32_64(h3,s4) + mul32x32_64(h4,s3);\n+    t[3]  = mul32x32_64(h0,r3) + mul32x32_64(h1,r2) + mul32x32_64(h2,r1) + mul32x32_64(h3,r0) + mul32x32_64(h4,s4);\n+    t[4]  = mul32x32_64(h0,r4) + mul32x32_64(h1,r3) + mul32x32_64(h2,r2) + mul32x32_64(h3,r1) + mul32x32_64(h4,r0);\n+\n+                    h0 = (uint32_t)t[0] & 0x3ffffff; c =           (t[0] >> 26);\n+    t[1] += c;      h1 = (uint32_t)t[1] & 0x3ffffff; b = (uint32_t)(t[1] >> 26);\n+    t[2] += b;      h2 = (uint32_t)t[2] & 0x3ffffff; b = (uint32_t)(t[2] >> 26);\n+    t[3] += b;      h3 = (uint32_t)t[3] & 0x3ffffff; b = (uint32_t)(t[3] >> 26);\n+    t[4] += b;      h4 = (uint32_t)t[4] & 0x3ffffff; b = (uint32_t)(t[4] >> 26);\n+    h0 += b * 5;\n+\n+    if (inlen >= 16) goto poly1305_donna_16bytes;\n+\n+    /* final bytes */\n+poly1305_donna_atmost15bytes:\n+    if (!inlen) goto poly1305_donna_finish;\n+\n+    for (j = 0; j < inlen; j++) mp[j] = m[j];\n+    mp[j++] = 1;\n+    for (; j < 16; j++) mp[j] = 0;\n+    inlen = 0;\n+\n+    t0 = ReadLE32(mp+0);\n+    t1 = ReadLE32(mp+4);\n+    t2 = ReadLE32(mp+8);\n+    t3 = ReadLE32(mp+12);\n+\n+    h0 += t0 & 0x3ffffff;\n+    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n+    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n+    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n+    h4 += (t3 >> 8);\n+\n+    goto poly1305_donna_mul;\n+\n+poly1305_donna_finish:\n+                 b = h0 >> 26; h0 = h0 & 0x3ffffff;\n+    h1 +=     b; b = h1 >> 26; h1 = h1 & 0x3ffffff;\n+    h2 +=     b; b = h2 >> 26; h2 = h2 & 0x3ffffff;\n+    h3 +=     b; b = h3 >> 26; h3 = h3 & 0x3ffffff;\n+    h4 +=     b; b = h4 >> 26; h4 = h4 & 0x3ffffff;\n+    h0 += b * 5; b = h0 >> 26; h0 = h0 & 0x3ffffff;\n+    h1 +=     b;\n+\n+    g0 = h0 + 5; b = g0 >> 26; g0 &= 0x3ffffff;\n+    g1 = h1 + b; b = g1 >> 26; g1 &= 0x3ffffff;\n+    g2 = h2 + b; b = g2 >> 26; g2 &= 0x3ffffff;\n+    g3 = h3 + b; b = g3 >> 26; g3 &= 0x3ffffff;\n+    g4 = h4 + b - (1 << 26);\n+\n+    b = (g4 >> 31) - 1;\n+    nb = ~b;\n+    h0 = (h0 & nb) | (g0 & b);\n+    h1 = (h1 & nb) | (g1 & b);\n+    h2 = (h2 & nb) | (g2 & b);\n+    h3 = (h3 & nb) | (g3 & b);\n+    h4 = (h4 & nb) | (g4 & b);\n+\n+    f0 = ((h0      ) | (h1 << 26)) + (uint64_t)ReadLE32(&key[16]);\n+    f1 = ((h1 >>  6) | (h2 << 20)) + (uint64_t)ReadLE32(&key[20]);\n+    f2 = ((h2 >> 12) | (h3 << 14)) + (uint64_t)ReadLE32(&key[24]);\n+    f3 = ((h3 >> 18) | (h4 <<  8)) + (uint64_t)ReadLE32(&key[28]);\n+\n+    WriteLE32(&out[ 0], f0); f1 += (f0 >> 32);\n+    WriteLE32(&out[ 4], f1); f2 += (f1 >> 32);\n+    WriteLE32(&out[ 8], f2); f3 += (f2 >> 32);\n+    WriteLE32(&out[12], f3);\n+}"
      },
      {
        "sha": "1598b013b9668c0f4490d30f71e948930e72173b",
        "filename": "src/crypto/poly1305.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/poly1305.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/poly1305.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/poly1305.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_POLY1305_H\n+#define BITCOIN_CRYPTO_POLY1305_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#define POLY1305_KEYLEN 32\n+#define POLY1305_TAGLEN 16\n+\n+void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen,\n+    const unsigned char key[POLY1305_KEYLEN]);\n+\n+#endif // BITCOIN_CRYPTO_POLY1305_H"
      },
      {
        "sha": "4118ac1b18943d4ed6aa62391be8b4e916f0ec14",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -17,7 +17,7 @@ class CSHA512\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 64;\n+    static constexpr size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n     CSHA512& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "e81957111ad26b85e3faf17edf0a1268cc5995c9",
        "filename": "src/crypto/siphash.cpp",
        "status": "added",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/siphash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/siphash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,173 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/siphash.h>\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define SIPROUND do { \\\n+    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n+    v0 = ROTL(v0, 32); \\\n+    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n+    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n+    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n+    v2 = ROTL(v2, 32); \\\n+} while (0)\n+\n+CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n+{\n+    v[0] = 0x736f6d6570736575ULL ^ k0;\n+    v[1] = 0x646f72616e646f6dULL ^ k1;\n+    v[2] = 0x6c7967656e657261ULL ^ k0;\n+    v[3] = 0x7465646279746573ULL ^ k1;\n+    count = 0;\n+    tmp = 0;\n+}\n+\n+CSipHasher& CSipHasher::Write(uint64_t data)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    assert(count % 8 == 0);\n+\n+    v3 ^= data;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= data;\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n+    return *this;\n+}\n+\n+uint64_t CSipHasher::Finalize() const\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= t;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v3 ^= ((uint64_t)4) << 59;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= ((uint64_t)4) << 59;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = (((uint64_t)36) << 56) | extra;\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}"
      },
      {
        "sha": "b312f913f9360abe5295afcbc737489ff9ab4450",
        "filename": "src/crypto/siphash.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/siphash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/crypto/siphash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_SIPHASH_H\n+#define BITCOIN_CRYPTO_SIPHASH_H\n+\n+#include <stdint.h>\n+\n+#include <uint256.h>\n+\n+/** SipHash-2-4 */\n+class CSipHasher\n+{\n+private:\n+    uint64_t v[4];\n+    uint64_t tmp;\n+    int count;\n+\n+public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n+    CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n+    CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n+    uint64_t Finalize() const;\n+};\n+\n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n+\n+#endif // BITCOIN_CRYPTO_SIPHASH_H"
      },
      {
        "sha": "416f5e83997a6c69edf3989c317b0c7f1350c6e4",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -9,8 +9,8 @@\n #include <fs.h>\n #include <serialize.h>\n #include <streams.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n #include <version.h>\n \n #include <leveldb/db.h>"
      },
      {
        "sha": "eeec6dec2585a1f9f8bfb19045da4c809024aaf6",
        "filename": "src/dummywallet.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdio.h>\n+#include <util/system.h>\n+#include <walletinitinterface.h>\n+\n+class CWallet;\n+\n+namespace interfaces {\n+class Chain;\n+}\n+\n+class DummyWalletInit : public WalletInitInterface {\n+public:\n+\n+    bool HasWalletSupport() const override {return false;}\n+    void AddWalletOptions() const override;\n+    bool ParameterInteraction() const override {return true;}\n+    void Construct(InitInterfaces& interfaces) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n+};\n+\n+void DummyWalletInit::AddWalletOptions() const\n+{\n+    gArgs.AddHiddenArgs({\n+        \"-addresstype\",\n+        \"-avoidpartialspends\",\n+        \"-changetype\",\n+        \"-disablewallet\",\n+        \"-discardfee=<amt>\",\n+        \"-fallbackfee=<amt>\",\n+        \"-keypool=<n>\",\n+        \"-maxtxfee=<amt>\",\n+        \"-mintxfee=<amt>\",\n+        \"-paytxfee=<amt>\",\n+        \"-rescan\",\n+        \"-salvagewallet\",\n+        \"-spendzeroconfchange\",\n+        \"-txconfirmtarget=<n>\",\n+        \"-upgradewallet\",\n+        \"-wallet=<path>\",\n+        \"-walletbroadcast\",\n+        \"-walletdir=<dir>\",\n+        \"-walletnotify=<cmd>\",\n+        \"-walletrbf\",\n+        \"-zapwallettxes=<mode>\",\n+        \"-dblogsize=<n>\",\n+        \"-flushwallet\",\n+        \"-privdb\",\n+        \"-walletrejectlongchains\",\n+    });\n+}\n+\n+const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n+\n+fs::path GetWalletDir()\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n+std::vector<fs::path> ListWalletDir()\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n+std::vector<std::shared_ptr<CWallet>> GetWallets()\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n+namespace interfaces {\n+\n+class Wallet;\n+\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n+} // namespace interfaces"
      },
      {
        "sha": "8a8f7b681c5209f1768d6f8e30004d87aad7d91c",
        "filename": "src/flatfile.cpp",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdexcept>\n+\n+#include <flatfile.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/system.h>\n+\n+FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n+    m_dir(std::move(dir)),\n+    m_prefix(prefix),\n+    m_chunk_size(chunk_size)\n+{\n+    if (chunk_size == 0) {\n+        throw std::invalid_argument(\"chunk_size must be positive\");\n+    }\n+}\n+\n+std::string FlatFilePos::ToString() const\n+{\n+    return strprintf(\"FlatFilePos(nFile=%i, nPos=%i)\", nFile, nPos);\n+}\n+\n+fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n+{\n+    return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n+}\n+\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n+{\n+    if (pos.IsNull()) {\n+        return nullptr;\n+    }\n+    fs::path path = FileName(pos);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, read_only ? \"rb\": \"rb+\");\n+    if (!file && !read_only)\n+        file = fsbridge::fopen(path, \"wb+\");\n+    if (!file) {\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        return nullptr;\n+    }\n+    if (pos.nPos && fseek(file, pos.nPos, SEEK_SET)) {\n+        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+        fclose(file);\n+        return nullptr;\n+    }\n+    return file;\n+}\n+\n+size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)\n+{\n+    out_of_space = false;\n+\n+    unsigned int n_old_chunks = (pos.nPos + m_chunk_size - 1) / m_chunk_size;\n+    unsigned int n_new_chunks = (pos.nPos + add_size + m_chunk_size - 1) / m_chunk_size;\n+    if (n_new_chunks > n_old_chunks) {\n+        size_t old_size = pos.nPos;\n+        size_t new_size = n_new_chunks * m_chunk_size;\n+        size_t inc_size = new_size - old_size;\n+\n+        if (CheckDiskSpace(m_dir, inc_size)) {\n+            FILE *file = Open(pos);\n+            if (file) {\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\n+                AllocateFileRange(file, pos.nPos, inc_size);\n+                fclose(file);\n+                return inc_size;\n+            }\n+        } else {\n+            out_of_space = true;\n+        }\n+    }\n+    return 0;\n+}\n+\n+bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)\n+{\n+    FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n+    if (!file) {\n+        return error(\"%s: failed to open file %d\", __func__, pos.nFile);\n+    }\n+    if (finalize && !TruncateFile(file, pos.nPos)) {\n+        fclose(file);\n+        return error(\"%s: failed to truncate file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file)) {\n+        fclose(file);\n+        return error(\"%s: failed to commit file %d\", __func__, pos.nFile);\n+    }\n+\n+    fclose(file);\n+    return true;\n+}"
      },
      {
        "sha": "374ceff411b49ebc5a61db77859d4aab3504f5fd",
        "filename": "src/flatfile.h",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FLATFILE_H\n+#define BITCOIN_FLATFILE_H\n+\n+#include <string>\n+\n+#include <fs.h>\n+#include <serialize.h>\n+\n+struct FlatFilePos\n+{\n+    int nFile;\n+    unsigned int nPos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(nPos));\n+    }\n+\n+    FlatFilePos() : nFile(-1), nPos(0) {}\n+\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) :\n+        nFile(nFileIn),\n+        nPos(nPosIn)\n+    {}\n+\n+    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos);\n+    }\n+\n+    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {\n+        return !(a == b);\n+    }\n+\n+    void SetNull() { nFile = -1; nPos = 0; }\n+    bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const;\n+};\n+\n+/**\n+ * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates\n+ * access to and efficient management of these files.\n+ */\n+class FlatFileSeq\n+{\n+private:\n+    const fs::path m_dir;\n+    const char* const m_prefix;\n+    const size_t m_chunk_size;\n+\n+public:\n+    /**\n+     * Constructor\n+     *\n+     * @param dir The base directory that all files live in.\n+     * @param prefix A short prefix given to all file names.\n+     * @param chunk_size Disk space is pre-allocated in multiples of this amount.\n+     */\n+    FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n+\n+    /** Get the name of the file at the given position. */\n+    fs::path FileName(const FlatFilePos& pos) const;\n+\n+    /** Open a handle to the file at the given position. */\n+    FILE* Open(const FlatFilePos& pos, bool read_only = false);\n+\n+    /**\n+     * Allocate additional space in a file after the given starting position. The amount allocated\n+     * will be the minimum multiple of the sequence chunk size greater than add_size.\n+     *\n+     * @param[in] pos The starting position that bytes will be allocated after.\n+     * @param[in] add_size The minimum number of bytes to be allocated.\n+     * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n+     * @return The number of bytes successfully allocated.\n+     */\n+    size_t Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space);\n+\n+    /**\n+     * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n+     *\n+     * @param[in] pos The first unwritten position in the file to be flushed.\n+     * @param[in] finalize True if no more data will be written to this file.\n+     * @return true on success, false on failure.\n+     */\n+    bool Flush(const FlatFilePos& pos, bool finalize = false);\n+};\n+\n+#endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "7b422b8d7012b0c4d31cd20a09df1c2838ac82c7",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 1,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -3,6 +3,9 @@\n #ifndef WIN32\n #include <fcntl.h>\n #else\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n #include <codecvt>\n #include <windows.h>\n #endif\n@@ -11,7 +14,12 @@ namespace fsbridge {\n \n FILE *fopen(const fs::path& p, const char *mode)\n {\n+#ifndef WIN32\n     return ::fopen(p.string().c_str(), mode);\n+#else\n+    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t> utf8_cvt;\n+    return ::_wfopen(p.wstring().c_str(), utf8_cvt.from_bytes(mode).c_str());\n+#endif\n }\n \n #ifndef WIN32\n@@ -84,12 +92,132 @@ bool FileLock::TryLock()\n         return false;\n     }\n     _OVERLAPPED overlapped = {0};\n-    if (!LockFileEx(hFile, LOCKFILE_EXCLUSIVE_LOCK | LOCKFILE_FAIL_IMMEDIATELY, 0, 0, 0, &overlapped)) {\n+    if (!LockFileEx(hFile, LOCKFILE_EXCLUSIVE_LOCK | LOCKFILE_FAIL_IMMEDIATELY, 0, std::numeric_limits<DWORD>::max(), std::numeric_limits<DWORD>::max(), &overlapped)) {\n         reason = GetErrorReason();\n         return false;\n     }\n     return true;\n }\n #endif\n \n+std::string get_filesystem_error_message(const fs::filesystem_error& e)\n+{\n+#ifndef WIN32\n+    return e.what();\n+#else\n+    // Convert from Multi Byte to utf-16\n+    std::string mb_string(e.what());\n+    int size = MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), nullptr, 0);\n+\n+    std::wstring utf16_string(size, L'\\0');\n+    MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), &*utf16_string.begin(), size);\n+    // Convert from utf-16 to utf-8\n+    return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>().to_bytes(utf16_string);\n+#endif\n+}\n+\n+#ifdef WIN32\n+#ifdef __GLIBCXX__\n+\n+// reference: https://github.com/gcc-mirror/gcc/blob/gcc-7_3_0-release/libstdc%2B%2B-v3/include/std/fstream#L270\n+\n+static std::string openmodeToStr(std::ios_base::openmode mode)\n+{\n+    switch (mode & ~std::ios_base::ate) {\n+    case std::ios_base::out:\n+    case std::ios_base::out | std::ios_base::trunc:\n+        return \"w\";\n+    case std::ios_base::out | std::ios_base::app:\n+    case std::ios_base::app:\n+        return \"a\";\n+    case std::ios_base::in:\n+        return \"r\";\n+    case std::ios_base::in | std::ios_base::out:\n+        return \"r+\";\n+    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc:\n+        return \"w+\";\n+    case std::ios_base::in | std::ios_base::out | std::ios_base::app:\n+    case std::ios_base::in | std::ios_base::app:\n+        return \"a+\";\n+    case std::ios_base::out | std::ios_base::binary:\n+    case std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n+        return \"wb\";\n+    case std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n+    case std::ios_base::app | std::ios_base::binary:\n+        return \"ab\";\n+    case std::ios_base::in | std::ios_base::binary:\n+        return \"rb\";\n+    case std::ios_base::in | std::ios_base::out | std::ios_base::binary:\n+        return \"r+b\";\n+    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n+        return \"w+b\";\n+    case std::ios_base::in | std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n+    case std::ios_base::in | std::ios_base::app | std::ios_base::binary:\n+        return \"a+b\";\n+    default:\n+        return std::string();\n+    }\n+}\n+\n+void ifstream::open(const fs::path& p, std::ios_base::openmode mode)\n+{\n+    close();\n+    mode |= std::ios_base::in;\n+    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n+    if (m_file == nullptr) {\n+        return;\n+    }\n+    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n+    rdbuf(&m_filebuf);\n+    if (mode & std::ios_base::ate) {\n+        seekg(0, std::ios_base::end);\n+    }\n+}\n+\n+void ifstream::close()\n+{\n+    if (m_file != nullptr) {\n+        m_filebuf.close();\n+        fclose(m_file);\n+    }\n+    m_file = nullptr;\n+}\n+\n+void ofstream::open(const fs::path& p, std::ios_base::openmode mode)\n+{\n+    close();\n+    mode |= std::ios_base::out;\n+    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n+    if (m_file == nullptr) {\n+        return;\n+    }\n+    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n+    rdbuf(&m_filebuf);\n+    if (mode & std::ios_base::ate) {\n+        seekp(0, std::ios_base::end);\n+    }\n+}\n+\n+void ofstream::close()\n+{\n+    if (m_file != nullptr) {\n+        m_filebuf.close();\n+        fclose(m_file);\n+    }\n+    m_file = nullptr;\n+}\n+#else // __GLIBCXX__\n+\n+static_assert(sizeof(*fs::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n+    \"Warning: This build is using boost::filesystem ofstream and ifstream \"\n+    \"implementations which will fail to open paths containing multibyte \"\n+    \"characters. You should delete this static_assert to ignore this warning, \"\n+    \"or switch to a different C++ standard library like the Microsoft C++ \"\n+    \"Standard Library (where boost uses non-standard extensions to construct \"\n+    \"stream objects with wide filenames), or the GNU libstdc++ library (where \"\n+    \"a more complicated workaround has been implemented above).\");\n+\n+#endif // __GLIBCXX__\n+#endif // WIN32\n+\n } // fsbridge"
      },
      {
        "sha": "8af81f173bdfbec163256ca343d33809a92424ee",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 54,
        "deletions": 2,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,10 +7,12 @@\n \n #include <stdio.h>\n #include <string>\n+#if defined WIN32 && defined __GLIBCXX__\n+#include <ext/stdio_filebuf.h>\n+#endif\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n \n /** Filesystem operations and types */\n namespace fs = boost::filesystem;\n@@ -38,6 +40,56 @@ namespace fsbridge {\n         void* hFile = (void*)-1; // INVALID_HANDLE_VALUE\n #endif\n     };\n+\n+    std::string get_filesystem_error_message(const fs::filesystem_error& e);\n+\n+    // GNU libstdc++ specific workaround for opening UTF-8 paths on Windows.\n+    //\n+    // On Windows, it is only possible to reliably access multibyte file paths through\n+    // `wchar_t` APIs, not `char` APIs. But because the C++ standard doesn't\n+    // require ifstream/ofstream `wchar_t` constructors, and the GNU library doesn't\n+    // provide them (in contrast to the Microsoft C++ library, see\n+    // https://stackoverflow.com/questions/821873/how-to-open-an-stdfstream-ofstream-or-ifstream-with-a-unicode-filename/822032#822032),\n+    // Boost is forced to fall back to `char` constructors which may not work properly.\n+    //\n+    // Work around this issue by creating stream objects with `_wfopen` in\n+    // combination with `__gnu_cxx::stdio_filebuf`. This workaround can be removed\n+    // with an upgrade to C++17, where streams can be constructed directly from\n+    // `std::filesystem::path` objects.\n+\n+#if defined WIN32 && defined __GLIBCXX__\n+    class ifstream : public std::istream\n+    {\n+    public:\n+        ifstream() = default;\n+        explicit ifstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in) { open(p, mode); }\n+        ~ifstream() { close(); }\n+        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in);\n+        bool is_open() { return m_filebuf.is_open(); }\n+        void close();\n+\n+    private:\n+        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n+        FILE* m_file = nullptr;\n+    };\n+    class ofstream : public std::ostream\n+    {\n+    public:\n+        ofstream() = default;\n+        explicit ofstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out) { open(p, mode); }\n+        ~ofstream() { close(); }\n+        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out);\n+        bool is_open() { return m_filebuf.is_open(); }\n+        void close();\n+\n+    private:\n+        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n+        FILE* m_file = nullptr;\n+    };\n+#else  // !(WIN32 && __GLIBCXX__)\n+    typedef fs::ifstream ifstream;\n+    typedef fs::ofstream ofstream;\n+#endif // WIN32 && __GLIBCXX__\n };\n \n #endif // BITCOIN_FS_H"
      },
      {
        "sha": "26150e5ca8aaa0f5f42b820a7d4e12f12617bacc",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 168,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -77,171 +77,3 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n-\n-#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n-\n-#define SIPROUND do { \\\n-    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n-    v0 = ROTL(v0, 32); \\\n-    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n-    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n-    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n-    v2 = ROTL(v2, 32); \\\n-} while (0)\n-\n-CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n-{\n-    v[0] = 0x736f6d6570736575ULL ^ k0;\n-    v[1] = 0x646f72616e646f6dULL ^ k1;\n-    v[2] = 0x6c7967656e657261ULL ^ k0;\n-    v[3] = 0x7465646279746573ULL ^ k1;\n-    count = 0;\n-    tmp = 0;\n-}\n-\n-CSipHasher& CSipHasher::Write(uint64_t data)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    assert(count % 8 == 0);\n-\n-    v3 ^= data;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= data;\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-\n-    count += 8;\n-    return *this;\n-}\n-\n-CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-    uint64_t t = tmp;\n-    int c = count;\n-\n-    while (size--) {\n-        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n-        c++;\n-        if ((c & 7) == 0) {\n-            v3 ^= t;\n-            SIPROUND;\n-            SIPROUND;\n-            v0 ^= t;\n-            t = 0;\n-        }\n-    }\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-    count = c;\n-    tmp = t;\n-\n-    return *this;\n-}\n-\n-uint64_t CSipHasher::Finalize() const\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    uint64_t t = tmp | (((uint64_t)count) << 56);\n-\n-    v3 ^= t;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= t;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v3 ^= ((uint64_t)4) << 59;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= ((uint64_t)4) << 59;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = (((uint64_t)36) << 56) | extra;\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}"
      },
      {
        "sha": "c295568a3e733038388ea7616e0b1e7783e49fd3",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 35,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n+#include <crypto/common.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha256.h>\n #include <prevector.h>\n@@ -138,6 +139,15 @@ class CHashWriter\n         return result;\n     }\n \n+    /**\n+     * Returns the first 64 bits from the resulting hash.\n+     */\n+    inline uint64_t GetCheapHash() {\n+        unsigned char result[CHash256::OUTPUT_SIZE];\n+        ctx.Finalize(result);\n+        return ReadLE64(result);\n+    }\n+\n     template<typename T>\n     CHashWriter& operator<<(const T& obj) {\n         // Serialize to this stream\n@@ -194,39 +204,4 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n-/** SipHash-2-4 */\n-class CSipHasher\n-{\n-private:\n-    uint64_t v[4];\n-    uint64_t tmp;\n-    int count;\n-\n-public:\n-    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n-    CSipHasher(uint64_t k0, uint64_t k1);\n-    /** Hash a 64-bit integer worth of data\n-     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n-     *  This function can only be used when a multiple of 8 bytes have been written so far.\n-     */\n-    CSipHasher& Write(uint64_t data);\n-    /** Hash arbitrary bytes. */\n-    CSipHasher& Write(const unsigned char* data, size_t size);\n-    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n-    uint64_t Finalize() const;\n-};\n-\n-/** Optimized SipHash-2-4 implementation for uint256.\n- *\n- *  It is identical to:\n- *    SipHasher(k0, k1)\n- *      .Write(val.GetUint64(0))\n- *      .Write(val.GetUint64(1))\n- *      .Write(val.GetUint64(2))\n- *      .Write(val.GetUint64(3))\n- *      .Finalize()\n- */\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n-\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "fcf760a4c6fe68878b78aba6c7b2ac811ca46b99",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,9 +11,10 @@\n #include <rpc/server.h>\n #include <random.h>\n #include <sync.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n #include <ui_interface.h>\n+#include <walletinitinterface.h>\n #include <crypto/hmac_sha256.h>\n #include <stdio.h>\n \n@@ -30,7 +31,7 @@ static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, std::function<void(void)>& func, int64_t millis) :\n+    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :\n         ev(eventBase, false, func)\n     {\n         struct timeval tv;\n@@ -52,7 +53,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n+    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }\n@@ -240,10 +241,9 @@ bool StartHTTPRPC()\n         return false;\n \n     RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n-#ifdef ENABLE_WALLET\n-    // ifdef can be removed once we switch to better endpoint support and API versioning\n-    RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n-#endif\n+    if (g_wallet_init_interface.HasWalletSupport()) {\n+        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+    }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);\n     httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(eventBase);\n@@ -260,9 +260,9 @@ void StopHTTPRPC()\n {\n     LogPrint(BCLog::RPC, \"Stopping HTTP RPC server\\n\");\n     UnregisterHTTPHandler(\"/\", true);\n-#ifdef ENABLE_WALLET\n-    UnregisterHTTPHandler(\"/wallet/\", false);\n-#endif\n+    if (g_wallet_init_interface.HasWalletSupport()) {\n+        UnregisterHTTPHandler(\"/wallet/\", false);\n+    }\n     if (httpRPCTimerInterface) {\n         RPCUnsetTimerInterface(httpRPCTimerInterface.get());\n         httpRPCTimerInterface.reset();"
      },
      {
        "sha": "63639fa3e0c150e6561e39f375280762ab9f93da",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 62,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -6,22 +6,23 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n-#include <util.h>\n-#include <utilstrencodings.h>\n+#include <util/threadnames.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n #include <netbase.h>\n #include <rpc/protocol.h> // For HTTP status codes\n+#include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n \n #include <memory>\n #include <stdio.h>\n #include <stdlib.h>\n-#include <string.h>\n+#include <string>\n \n #include <sys/types.h>\n #include <sys/stat.h>\n #include <signal.h>\n-#include <future>\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n@@ -124,7 +125,6 @@ class WorkQueue\n \n struct HTTPPathHandler\n {\n-    HTTPPathHandler() {}\n     HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):\n         prefix(_prefix), exactMatch(_exactMatch), handler(_handler)\n     {\n@@ -224,21 +224,25 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n-    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n-             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n-\n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Client network is not allowed RPC access\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_FORBIDDEN);\n         return;\n     }\n \n     // Early reject unknown HTTP methods\n     if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Unknown HTTP request method\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_BADMETHOD);\n         return;\n     }\n \n+    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n+             RequestMethodString(hreq->GetRequestMethod()), SanitizeString(hreq->GetURI(), SAFE_CHARS_URI).substr(0, 100), hreq->GetPeer().ToString());\n+\n     // Find registered handler for prefix\n     std::string strURI = hreq->GetURI();\n     std::string path;\n@@ -281,7 +285,7 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n /** Event dispatcher thread */\n static bool ThreadHTTP(struct event_base* base)\n {\n-    RenameThread(\"bitcoin-http\");\n+    util::ThreadRename(\"http\");\n     LogPrint(BCLog::HTTP, \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -292,33 +296,37 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    int defaultPort = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int http_port = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n-    if (!gArgs.IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n-        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n+    if (!(gArgs.IsArgSet(\"-rpcallowip\") && gArgs.IsArgSet(\"-rpcbind\"))) { // Default to loopback if not allowing external IPs\n+        endpoints.push_back(std::make_pair(\"::1\", http_port));\n+        endpoints.push_back(std::make_pair(\"127.0.0.1\", http_port));\n+        if (gArgs.IsArgSet(\"-rpcallowip\")) {\n+            LogPrintf(\"WARNING: option -rpcallowip was specified without -rpcbind; this doesn't usually make sense\\n\");\n+        }\n         if (gArgs.IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n         for (const std::string& strRPCBind : gArgs.GetArgs(\"-rpcbind\")) {\n-            int port = defaultPort;\n+            int port = http_port;\n             std::string host;\n             SplitHostPort(strRPCBind, port, host);\n             endpoints.push_back(std::make_pair(host, port));\n         }\n-    } else { // No specific bind address specified, bind to any\n-        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n     }\n \n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n         if (bind_handle) {\n+            CNetAddr addr;\n+            if (i->first.empty() || (LookupHost(i->first.c_str(), addr, false) && addr.IsBindAny())) {\n+                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n+            }\n             boundSockets.push_back(bind_handle);\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n@@ -328,9 +336,9 @@ static bool HTTPBindAddresses(struct evhttp* http)\n }\n \n /** Simple wrapper to set thread name and run work queue */\n-static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n+static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n {\n-    RenameThread(\"bitcoin-httpworker\");\n+    util::ThreadRename(strprintf(\"httpworker.%i\", worker_num));\n     queue->Run();\n }\n \n@@ -352,20 +360,13 @@ bool InitHTTPServer()\n     if (!InitHTTPAllowList())\n         return false;\n \n-    if (gArgs.GetBoolArg(\"-rpcssl\", false)) {\n-        uiInterface.ThreadSafeMessageBox(\n-            \"SSL mode for RPC (-rpcssl) is no longer supported.\",\n-            \"\", CClientUIInterface::MSG_ERROR);\n-        return false;\n-    }\n-\n     // Redirect libevent's logging to our own log\n     event_set_log_callback(&libevent_log_cb);\n     // Update libevent's log handling. Returns false if our version of\n     // libevent doesn't support debug logging, in which case we should\n     // clear the BCLog::LIBEVENT flag.\n-    if (!UpdateHTTPServerLogging(g_logger->WillLogCategory(BCLog::LIBEVENT))) {\n-        g_logger->DisableCategory(BCLog::LIBEVENT);\n+    if (!UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT))) {\n+        LogInstance().DisableCategory(BCLog::LIBEVENT);\n     }\n \n #ifdef WIN32\n@@ -420,31 +421,24 @@ bool UpdateHTTPServerLogging(bool enable) {\n }\n \n std::thread threadHTTP;\n-std::future<bool> threadResult;\n static std::vector<std::thread> g_thread_http_workers;\n \n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    std::packaged_task<bool(event_base*)> task(ThreadHTTP);\n-    threadResult = task.get_future();\n-    threadHTTP = std::thread(std::move(task), eventBase);\n+    threadHTTP = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n     }\n }\n \n void InterruptHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n-        // Unlisten sockets\n-        for (evhttp_bound_socket *socket : boundSockets) {\n-            evhttp_del_accept_socket(eventHTTP, socket);\n-        }\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n@@ -464,20 +458,14 @@ void StopHTTPServer()\n         delete workQueue;\n         workQueue = nullptr;\n     }\n+    // Unlisten sockets, these are what make the event loop running, which means\n+    // that after this and all connections are closed the event loop will quit.\n+    for (evhttp_bound_socket *socket : boundSockets) {\n+        evhttp_del_accept_socket(eventHTTP, socket);\n+    }\n+    boundSockets.clear();\n     if (eventBase) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        // Exit the event loop as soon as there are no active events.\n-        event_base_loopexit(eventBase, nullptr);\n-        // Give event loop a few seconds to exit (to send back last RPC responses), then break it\n-        // Before this was solved with event_base_loopexit, but that didn't work as expected in\n-        // at least libevent 2.0.21 and always introduced a delay. In libevent\n-        // master that appears to be solved, so in the future that solution\n-        // could be used again (if desirable).\n-        // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n-        if (threadResult.valid() && threadResult.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {\n-            LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n-            event_base_loopbreak(eventBase);\n-        }\n         threadHTTP.join();\n     }\n     if (eventHTTP) {\n@@ -505,7 +493,7 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):\n+HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n     deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n@@ -582,6 +570,9 @@ void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n {\n     assert(!replySent && req);\n+    if (ShutdownRequested()) {\n+        WriteHeader(\"Connection\", \"close\");\n+    }\n     // Send event to main http thread to send reply message\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n@@ -665,15 +656,3 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n-\n-std::string urlDecode(const std::string &urlEncoded) {\n-    std::string res;\n-    if (!urlEncoded.empty()) {\n-        char *decoded = evhttp_uridecode(urlEncoded.c_str(), false, nullptr);\n-        if (decoded) {\n-            res = std::string(decoded);\n-            free(decoded);\n-        }\n-    }\n-    return res;\n-}"
      },
      {
        "sha": "7943f0094b0c064d49defbb36ec9e9aa285d1f13",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -134,7 +134,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void()>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -143,11 +143,9 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    std::function<void(void)> handler;\n+    std::function<void()> handler;\n private:\n     struct event* ev;\n };\n \n-std::string urlDecode(const std::string &urlEncoded);\n-\n #endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "9e48f0bd27196d32a29468f4490ec9388007ef22",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 14,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -7,7 +7,7 @@\n #include <shutdown.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n-#include <util.h>\n+#include <util/system.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -41,9 +41,9 @@ bool BaseIndex::DB::ReadBestBlock(CBlockLocator& locator) const\n     return success;\n }\n \n-bool BaseIndex::DB::WriteBestBlock(const CBlockLocator& locator)\n+void BaseIndex::DB::WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator)\n {\n-    return Write(DB_BEST_BLOCK, locator);\n+    batch.Write(DB_BEST_BLOCK, locator);\n }\n \n BaseIndex::~BaseIndex()\n@@ -60,12 +60,16 @@ bool BaseIndex::Init()\n     }\n \n     LOCK(cs_main);\n-    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    if (locator.IsNull()) {\n+        m_best_block_index = nullptr;\n+    } else {\n+        m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    }\n     m_synced = m_best_block_index.load() == chainActive.Tip();\n     return true;\n }\n \n-static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n@@ -91,19 +95,29 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;\n+                // No need to handle errors in Commit. If it fails, the error will be already be\n+                // logged. The best way to recover is to continue, as index cannot be corrupted by\n+                // a missed commit to disk for an advanced index state.\n+                Commit();\n                 return;\n             }\n \n             {\n                 LOCK(cs_main);\n                 const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n                 if (!pindex_next) {\n-                    WriteBestBlock(pindex);\n                     m_best_block_index = pindex;\n                     m_synced = true;\n+                    // No need to handle errors in Commit. See rationale above.\n+                    Commit();\n                     break;\n                 }\n+                if (pindex_next->pprev != pindex && !Rewind(pindex, pindex_next->pprev)) {\n+                    FatalError(\"%s: Failed to rewind index %s to a previous chain tip\",\n+                               __func__, GetName());\n+                    return;\n+                }\n                 pindex = pindex_next;\n             }\n \n@@ -115,8 +129,10 @@ void BaseIndex::ThreadSync()\n             }\n \n             if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;\n                 last_locator_write_time = current_time;\n+                // No need to handle errors in Commit. See rationale above.\n+                Commit();\n             }\n \n             CBlock block;\n@@ -140,12 +156,35 @@ void BaseIndex::ThreadSync()\n     }\n }\n \n-bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n+bool BaseIndex::Commit()\n+{\n+    CDBBatch batch(GetDB());\n+    if (!CommitInternal(batch) || !GetDB().WriteBatch(batch)) {\n+        return error(\"%s: Failed to commit latest %s state\", __func__, GetName());\n+    }\n+    return true;\n+}\n+\n+bool BaseIndex::CommitInternal(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    if (!GetDB().WriteBestBlock(chainActive.GetLocator(block_index))) {\n-        return error(\"%s: Failed to write locator to disk\", __func__);\n+    GetDB().WriteBestBlock(batch, chainActive.GetLocator(m_best_block_index));\n+    return true;\n+}\n+\n+bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip == m_best_block_index);\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    // In the case of a reorg, ensure persisted block locator is not stale.\n+    m_best_block_index = new_tip;\n+    if (!Commit()) {\n+        // If commit fails, revert the best block index to avoid corruption.\n+        m_best_block_index = current_tip;\n+        return false;\n     }\n+\n     return true;\n }\n \n@@ -176,6 +215,11 @@ void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const\n                       best_block_index->GetBlockHash().ToString());\n             return;\n         }\n+        if (best_block_index != pindex->pprev && !Rewind(best_block_index, pindex->pprev)) {\n+            FatalError(\"%s: Failed to rewind index %s to a previous chain tip\",\n+                       __func__, GetName());\n+            return;\n+        }\n     }\n \n     if (WriteBlock(*block, pindex)) {\n@@ -220,9 +264,10 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    if (!GetDB().WriteBestBlock(locator)) {\n-        error(\"%s: Failed to write locator to disk\", __func__);\n-    }\n+    // No need to handle errors in Commit. If it fails, the error will be already be logged. The\n+    // best way to recover is to continue, as index cannot be corrupted by a missed commit to disk\n+    // for an advanced index state.\n+    Commit();\n }\n \n bool BaseIndex::BlockUntilSyncedToCurrentChain()"
      },
      {
        "sha": "31acbed0c186a37687e5a3aad67575a6855a5ac0",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -32,7 +32,7 @@ class BaseIndex : public CValidationInterface\n         bool ReadBestBlock(CBlockLocator& locator) const;\n \n         /// Write block locator of the chain that the txindex is in sync with.\n-        bool WriteBestBlock(const CBlockLocator& locator);\n+        void WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator);\n     };\n \n private:\n@@ -54,8 +54,15 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current index state (eg. chain block locator and subclass-specific items) to disk.\n+    ///\n+    /// Recommendations for error handling:\n+    /// If called on a successor of the previous committed best block in the index, the index can\n+    /// continue processing without risk of corruption, though the index state will need to catch up\n+    /// from further behind on reboot. If the new state is not a successor of the previous state (due\n+    /// to a chain reorganization), the index must halt until Commit succeeds or else it could end up\n+    /// getting corrupted.\n+    bool Commit();\n \n protected:\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n@@ -69,6 +76,14 @@ class BaseIndex : public CValidationInterface\n     /// Write update index entries for a newly connected block.\n     virtual bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) { return true; }\n \n+    /// Virtual method called internally by Commit that can be overridden to atomically\n+    /// commit more index state.\n+    virtual bool CommitInternal(CDBBatch& batch);\n+\n+    /// Rewind index to an earlier chain tip during a chain reorg. The tip must\n+    /// be an ancestor of the current best block.\n+    virtual bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip);\n+\n     virtual DB& GetDB() const = 0;\n \n     /// Get the name of the index for display in logs."
      },
      {
        "sha": "20f33baf2cdb6c9f44ed40d5aef7c6da9dd5d0bd",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "added",
        "additions": 467,
        "deletions": 0,
        "changes": 467,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,467 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size. The\n+ * disk location of the next block filter to be written (represented as a FlatFilePos) is stored\n+ * under the DB_FILTER_POS key.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 hash;\n+    uint256 header;\n+    FlatFilePos pos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+        READWRITE(header);\n+        READWRITE(pos);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 hash;\n+\n+    DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name.empty()) throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_FILTER_POS)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_FILTER_POS is not set, then initialize to the first location.\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::CommitInternal(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::CommitInternal(batch);\n+}\n+\n+bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const\n+{\n+    CAutoFile filein(m_filter_fileseq->Open(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull()) {\n+        return false;\n+    }\n+\n+    uint256 block_hash;\n+    std::vector<unsigned char> encoded_filter;\n+    try {\n+        filein >> block_hash >> encoded_filter;\n+        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter));\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Failed to deserialize block filter from disk: %s\", __func__, e.what());\n+    }\n+\n+    return true;\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FLTR_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos.nPos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all filters for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    // The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.\n+    // But since this creates new references to the filter, the position should get updated here\n+    // atomically as well in case Commit fails.\n+    batch.Write(DB_FILTER_POS, m_next_filter_pos);\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);\n+\n+    // Iterate backwards through block indexes collecting results in order to access the block hash\n+    // of each entry in case we need to look it up in the hash index.\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        if (!db.Read(DBHashKey(block_hash), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %s)\",\n+                         __func__, index_name, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    return ReadFilterFromDisk(entry.pos, filter_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    header_out = entry.header;\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<DBVal> entries;\n+    if (!LookupRange(*m_db, m_name, start_height, stop_index, entries)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(entries.size());\n+    auto filter_pos_it = filters_out.begin();\n+    for (const auto& entry : entries) {\n+        if (!ReadFilterFromDisk(entry.pos, *filter_pos_it)) {\n+            return false;\n+        }\n+        ++filter_pos_it;\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,\n+                                             std::vector<uint256>& hashes_out) const\n+\n+{\n+    std::vector<DBVal> entries;\n+    if (!LookupRange(*m_db, m_name, start_height, stop_index, entries)) {\n+        return false;\n+    }\n+\n+    hashes_out.clear();\n+    hashes_out.reserve(entries.size());\n+    for (const auto& entry : entries) {\n+        hashes_out.push_back(entry.hash);\n+    }\n+    return true;\n+}\n+\n+BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)\n+{\n+    auto it = g_filter_indexes.find(filter_type);\n+    return it != g_filter_indexes.end() ? &it->second : nullptr;\n+}\n+\n+void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)\n+{\n+    for (auto& entry : g_filter_indexes) fn(entry.second);\n+}\n+\n+bool InitBlockFilterIndex(BlockFilterType filter_type,\n+                          size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    auto result = g_filter_indexes.emplace(std::piecewise_construct,\n+                                           std::forward_as_tuple(filter_type),\n+                                           std::forward_as_tuple(filter_type,\n+                                                                 n_cache_size, f_memory, f_wipe));\n+    return result.second;\n+}\n+\n+bool DestroyBlockFilterIndex(BlockFilterType filter_type)\n+{\n+    return g_filter_indexes.erase(filter_type);\n+}\n+\n+void DestroyAllBlockFilterIndexes()\n+{\n+    g_filter_indexes.clear();\n+}"
      },
      {
        "sha": "436d52515f490c6eafced5a22a401220de2e1e72",
        "filename": "src/index/blockfilterindex.h",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+#define BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+\n+#include <blockfilter.h>\n+#include <chain.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+\n+/**\n+ * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n+ * blocks by height. An index is constructed for each supported filter type with its own database\n+ * (ie. filter data for different types are stored in separate databases).\n+ *\n+ * This index is used to serve BIP 157 net requests.\n+ */\n+class BlockFilterIndex final : public BaseIndex\n+{\n+private:\n+    BlockFilterType m_filter_type;\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    FlatFilePos m_next_filter_pos;\n+    std::unique_ptr<FlatFileSeq> m_filter_fileseq;\n+\n+    bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const;\n+    size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n+\n+protected:\n+    bool Init() override;\n+\n+    bool CommitInternal(CDBBatch& batch) override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return m_name.c_str(); }\n+\n+public:\n+    /** Constructs the index, which becomes available to be queried. */\n+    explicit BlockFilterIndex(BlockFilterType filter_type,\n+                              size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    BlockFilterType GetFilterType() const { return m_filter_type; }\n+\n+    /** Get a single filter by block. */\n+    bool LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const;\n+\n+    /** Get a single filter header by block. */\n+    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const;\n+\n+    /** Get a range of filters between two heights on a chain. */\n+    bool LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                           std::vector<BlockFilter>& filters_out) const;\n+\n+    /** Get a range of filter hashes between two heights on a chain. */\n+    bool LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,\n+                               std::vector<uint256>& hashes_out) const;\n+};\n+\n+/**\n+ * Get a block filter index by type. Returns nullptr if index has not been initialized or was\n+ * already destroyed.\n+ */\n+BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type);\n+\n+/** Iterate over all running block filter indexes, invoking fn on each. */\n+void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn);\n+\n+/**\n+ * Initialize a block filter index for the given type if one does not already exist. Returns true if\n+ * a new index is created and false if one has already been initialized.\n+ */\n+bool InitBlockFilterIndex(BlockFilterType filter_type,\n+                          size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+/**\n+ * Destroy the block filter index with the given type. Returns false if no such index exists. This\n+ * just releases the allocated memory and closes the database connection, it does not delete the\n+ * index data.\n+ */\n+bool DestroyBlockFilterIndex(BlockFilterType filter_type);\n+\n+/** Destroy all open block filter indexes. */\n+void DestroyAllBlockFilterIndexes();\n+\n+#endif // BITCOIN_INDEX_BLOCKFILTERINDEX_H"
      },
      {
        "sha": "7367ec7cb653e077a1765130b032696ca6c92e36",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -5,7 +5,7 @@\n #include <index/txindex.h>\n #include <shutdown.h>\n #include <ui_interface.h>\n-#include <util.h>\n+#include <util/system.h>\n #include <validation.h>\n \n #include <boost/thread.hpp>\n@@ -16,27 +16,27 @@ constexpr char DB_TXINDEX_BLOCK = 'T';\n \n std::unique_ptr<TxIndex> g_txindex;\n \n-struct CDiskTxPos : public CDiskBlockPos\n+struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CDiskBlockPos, *this);\n+        READWRITEAS(FlatFilePos, *this);\n         READWRITE(VARINT(nTxOffset));\n     }\n \n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n     }\n \n     CDiskTxPos() {\n         SetNull();\n     }\n \n     void SetNull() {\n-        CDiskBlockPos::SetNull();\n+        FlatFilePos::SetNull();\n         nTxOffset = 0;\n     }\n };\n@@ -245,12 +245,15 @@ bool TxIndex::Init()\n \n bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n {\n+    // Exclude genesis block transaction because outputs are not spendable.\n+    if (pindex->nHeight == 0) return true;\n+\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n     vPos.reserve(block.vtx.size());\n     for (const auto& tx : block.vtx) {\n         vPos.emplace_back(tx->GetHash(), pos);\n-        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, CLIENT_VERSION);\n     }\n     return m_db->WriteTxs(vPos);\n }"
      },
      {
        "sha": "92b3c9510aa4c5b9aac093f2fd8d963f01cd4611",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 276,
        "deletions": 194,
        "changes": 470,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -11,14 +11,17 @@\n \n #include <addrman.h>\n #include <amount.h>\n+#include <banman.h>\n+#include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n-#include <checkpoints.h>\n #include <compat/sanity.h>\n #include <consensus/validation.h>\n #include <fs.h>\n #include <httpserver.h>\n #include <httprpc.h>\n+#include <index/blockfilterindex.h>\n+#include <interfaces/chain.h>\n #include <index/txindex.h>\n #include <key.h>\n #include <validation.h>\n@@ -29,39 +32,44 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n+#include <policy/settings.h>\n #include <rpc/server.h>\n #include <rpc/register.h>\n #include <rpc/blockchain.h>\n+#include <rpc/util.h>\n #include <script/standard.h>\n #include <script/sigcache.h>\n #include <scheduler.h>\n #include <shutdown.h>\n+#include <util/threadnames.h>\n #include <timedata.h>\n #include <txdb.h>\n #include <txmempool.h>\n #include <torcontrol.h>\n #include <ui_interface.h>\n-#include <util.h>\n-#include <utilmoneystr.h>\n+#include <util/system.h>\n+#include <util/moneystr.h>\n+#include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n #include <walletinitinterface.h>\n #include <stdint.h>\n #include <stdio.h>\n \n #ifndef WIN32\n+#include <attributes.h>\n+#include <cerrno>\n #include <signal.h>\n #include <sys/stat.h>\n #endif\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/bind.hpp>\n #include <boost/thread.hpp>\n-#include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n+#include <zmq/zmqabstractnotifier.h>\n #include <zmq/zmqnotificationinterface.h>\n #include <zmq/zmqrpc.h>\n #endif\n@@ -71,35 +79,12 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n+// Dump addresses to banlist.dat every 15 minutes (900s)\n+static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n+\n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n-\n-#if !(ENABLE_WALLET)\n-class DummyWalletInit : public WalletInitInterface {\n-public:\n-\n-    void AddWalletOptions() const override;\n-    bool ParameterInteraction() const override {return true;}\n-    void RegisterRPC(CRPCTable &) const override {}\n-    bool Verify() const override {return true;}\n-    bool Open() const override {LogPrintf(\"No wallet support compiled in!\\n\"); return true;}\n-    void Start(CScheduler& scheduler) const override {}\n-    void Flush() const override {}\n-    void Stop() const override {}\n-    void Close() const override {}\n-};\n-\n-void DummyWalletInit::AddWalletOptions() const\n-{\n-    std::vector<std::string> opts = {\"-addresstype\", \"-changetype\", \"-disablewallet\", \"-discardfee=<amt>\", \"-fallbackfee=<amt>\",\n-        \"-keypool=<n>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n-        \"-upgradewallet\", \"-wallet=<path>\", \"-walletbroadcast\", \"-walletdir=<dir>\", \"-walletnotify=<cmd>\", \"-walletrbf\", \"-zapwallettxes=<mode>\",\n-        \"-dblogsize=<n>\", \"-flushwallet\", \"-privdb\", \"-walletrejectlongchains\"};\n-    gArgs.AddHiddenArgs(opts);\n-}\n-\n-const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n-#endif\n+std::unique_ptr<BanMan> g_banman;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -112,6 +97,32 @@ const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n \n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n \n+/**\n+ * The PID file facilities.\n+ */\n+static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n+static fs::path GetPidFile()\n+{\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+}\n+\n+NODISCARD static bool CreatePidFile()\n+{\n+    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n+    if (file) {\n+#ifdef WIN32\n+        fprintf(file, \"%d\\n\", GetCurrentProcessId());\n+#else\n+        fprintf(file, \"%d\\n\", getpid());\n+#endif\n+        fclose(file);\n+        return true;\n+    } else {\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -181,9 +192,10 @@ void Interrupt()\n     if (g_txindex) {\n         g_txindex->Interrupt();\n     }\n+    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n }\n \n-void Shutdown()\n+void Shutdown(InitInterfaces& interfaces)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n     static CCriticalSection cs_Shutdown;\n@@ -195,21 +207,24 @@ void Shutdown()\n     /// for example if the data directory was found to be locked.\n     /// Be sure that anything that writes files or flushes caches only does this if the respective\n     /// module was initialized.\n-    RenameThread(\"bitcoin-shutoff\");\n+    util::ThreadRename(\"shutoff\");\n     mempool.AddTransactionsUpdated(1);\n \n     StopHTTPRPC();\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-    g_wallet_init_interface.Flush();\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->flush();\n+    }\n     StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n     if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n     if (g_connman) g_connman->Stop();\n     if (g_txindex) g_txindex->Stop();\n+    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n \n     StopTorControl();\n \n@@ -222,10 +237,12 @@ void Shutdown()\n     // destruct and reset all to nullptr.\n     peerLogic.reset();\n     g_connman.reset();\n+    g_banman.reset();\n     g_txindex.reset();\n+    DestroyAllBlockFilterIndexes();\n \n-    if (g_is_mempool_loaded && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        DumpMempool();\n+    if (::mempool.IsLoaded() && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+        DumpMempool(::mempool);\n     }\n \n     if (fFeeEstimatesInitialized)\n@@ -265,7 +282,9 @@ void Shutdown()\n         pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n-    g_wallet_init_interface.Stop();\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->stop();\n+    }\n \n #if ENABLE_ZMQ\n     if (g_zmq_notification_interface) {\n@@ -275,17 +294,17 @@ void Shutdown()\n     }\n #endif\n \n-#ifndef WIN32\n     try {\n-        fs::remove(GetPidFile());\n+        if (!fs::remove(GetPidFile())) {\n+            LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n+        }\n     } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n+        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n-#endif\n+    interfaces.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-    g_wallet_init_interface.Close();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n@@ -304,7 +323,7 @@ static void HandleSIGTERM(int)\n \n static void HandleSIGHUP(int)\n {\n-    g_logger->m_reopen_file = true;\n+    LogInstance().m_reopen_file = true;\n }\n #else\n static BOOL WINAPI consoleCtrlHandler(DWORD dwCtrlType)\n@@ -326,21 +345,25 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n }\n #endif\n \n+static boost::signals2::connection rpc_notify_block_change_connection;\n static void OnRPCStarted()\n {\n-    uiInterface.NotifyBlockTip_connect(&RPCNotifyBlockChange);\n+    rpc_notify_block_change_connection = uiInterface.NotifyBlockTip_connect(&RPCNotifyBlockChange);\n }\n \n static void OnRPCStopped()\n {\n-    uiInterface.NotifyBlockTip_disconnect(&RPCNotifyBlockChange);\n+    rpc_notify_block_change_connection.disconnect();\n     RPCNotifyBlockChange(false, nullptr);\n     g_best_block_cv.notify_all();\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n void SetupServerArgs()\n {\n+    SetupHelpOptions(gArgs);\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST); // server-only for now\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n@@ -349,14 +372,11 @@ void SetupServerArgs()\n     const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n-    std::vector<std::string> hidden_args = {\"-rpcssl\", \"-benchmark\", \"-h\", \"-help\", \"-socks\", \"-tor\", \"-debugnet\", \"-whitelistalwaysrelay\",\n-        \"-prematurewitness\", \"-walletprematurewitness\", \"-promiscuousmempoolflags\", \"-blockminsize\", \"-dbcrashratio\", \"-forcecompactdb\", \"-usehd\",\n+    std::vector<std::string> hidden_args = {\n+        \"-dbcrashratio\", \"-forcecompactdb\",\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    // Set all of the args and their help\n-    // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n@@ -367,7 +387,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n@@ -379,11 +399,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n-#ifndef WIN32\n     gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n-#else\n-    hidden_args.emplace_back(\"-pid\");\n-#endif\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n@@ -395,6 +411,10 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockfilterindex=<type>\",\n+                 strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n+                 \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n+                 false, OptionsCategory::OPTIONS);\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n@@ -423,6 +443,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), true, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n@@ -445,15 +466,30 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n     hidden_args.emplace_back(\"-zmqpubrawblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubrawtx=<address>\");\n+    hidden_args.emplace_back(\"-zmqpubhashblockhwm=<n>\");\n+    hidden_args.emplace_back(\"-zmqpubhashtxhwm=<n>\");\n+    hidden_args.emplace_back(\"-zmqpubrawblockhwm=<n>\");\n+    hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n     gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n+        \"level 0 reads the blocks from disk, \"\n+        \"level 1 verifies block validity, \"\n+        \"level 2 verifies undo data, \"\n+        \"level 3 checks disconnection of tip blocks, \"\n+        \"and level 4 tries to reconnect the blocks, \"\n+        \"each level includes the checks of the previous levels \"\n+        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n@@ -465,20 +501,17 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -488,7 +521,7 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n@@ -505,8 +538,8 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::RPC);\n@@ -635,7 +668,7 @@ static void CleanupBlockRevFiles()\n static void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n-    RenameThread(\"bitcoin-loadblk\");\n+    util::ThreadRename(\"loadblk\");\n     ScheduleBatchPriority();\n \n     {\n@@ -645,8 +678,8 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (fReindex) {\n         int nFile = 0;\n         while (true) {\n-            CDiskBlockPos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n+            FlatFilePos pos(nFile, 0);\n+            if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -702,16 +735,16 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        LoadMempool();\n+        LoadMempool(::mempool);\n     }\n-    g_is_mempool_loaded = !ShutdownRequested();\n+    ::mempool.SetIsLoaded(!ShutdownRequested());\n }\n \n /** Sanity checks\n  *  Ensure that Bitcoin is running in a usable environment with all\n  *  necessary library support.\n  */\n-static bool InitSanityCheck(void)\n+static bool InitSanityCheck()\n {\n     if(!ECC_InitSanityCheck()) {\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n@@ -805,11 +838,6 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n-\n-    // Warn if network-specific options (-addnode, -connect, etc) are\n-    // specified in default section of config file, but not overridden\n-    // on the command line or in this network's section of the config file.\n-    gArgs.WarnForSectionOnlyArgs();\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n@@ -825,17 +853,18 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n  */\n void InitLogging()\n {\n-    g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    LogInstance().m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n+    LogInstance().m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n \n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n     // debug.log.\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n-    g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    g_logger->m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    g_logger->m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n+    LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    LogInstance().m_log_threadnames = gArgs.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n@@ -854,6 +883,8 @@ int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n+int64_t peer_connect_timeout;\n+std::vector<BlockFilterType> g_enabled_filter_types;\n \n } // namespace\n \n@@ -882,16 +913,7 @@ bool AppInitBasicSetup()\n #endif\n #ifdef WIN32\n     // Enable Data Execution Prevention (DEP)\n-    // Minimum supported OS versions: WinXP SP3, WinVista >= SP1, Win Server 2008\n-    // A failure is non-critical and needs no further attention!\n-#ifndef PROCESS_DEP_ENABLE\n-    // We define this here, because GCCs winbase.h limits this to _WIN32_WINNT >= 0x0601 (Windows 7),\n-    // which is not correct. Can be removed, when GCCs winbase.h is fixed!\n-#define PROCESS_DEP_ENABLE 0x00000001\n-#endif\n-    typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);\n-    PSETPROCDEPPOL setProcDEPPol = (PSETPROCDEPPOL)GetProcAddress(GetModuleHandleA(\"Kernel32.dll\"), \"SetProcessDEPPolicy\");\n-    if (setProcDEPPol != nullptr) setProcDEPPol(PROCESS_DEP_ENABLE);\n+    SetProcessDEPPolicy(PROCESS_DEP_ENABLE);\n #endif\n \n     if (!SetupNetworking())\n@@ -927,14 +949,46 @@ bool AppInitParameterInteraction()\n \n     // also see: InitParameterInteraction()\n \n-    if (!fs::is_directory(GetBlocksDir(false))) {\n+    // Warn if network-specific options (-addnode, -connect, etc) are\n+    // specified in default section of config file, but not overridden\n+    // on the command line or in this network's section of the config file.\n+    std::string network = gArgs.GetChainName();\n+    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n+        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n+    }\n+\n+    // Warn if unrecognized section name are present in the config file.\n+    for (const auto& section : gArgs.GetUnrecognizedSections()) {\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n+    }\n+\n+    if (!fs::is_directory(GetBlocksDir())) {\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n+    // parse and validate enabled filter types\n+    std::string blockfilterindex_value = gArgs.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n+    if (blockfilterindex_value == \"\" || blockfilterindex_value == \"1\") {\n+        g_enabled_filter_types = AllBlockFilterTypes();\n+    } else if (blockfilterindex_value != \"0\") {\n+        const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n+        g_enabled_filter_types.reserve(names.size());\n+        for (const auto& name : names) {\n+            BlockFilterType filter_type;\n+            if (!BlockFilterTypeByName(name, filter_type)) {\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+            }\n+            g_enabled_filter_types.push_back(filter_type);\n+        }\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (!g_enabled_filter_types.empty()) {\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+        }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n@@ -950,8 +1004,13 @@ bool AppInitParameterInteraction()\n \n     // Trim requested connection counts, to fit into system limitations\n     // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n-    nMaxConnections = std::max(std::min<int>(nMaxConnections, FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS);\n+#ifdef USE_POLL\n+    int fd_max = nFD;\n+#else\n+    int fd_max = FD_SETSIZE;\n+#endif\n+    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n@@ -967,7 +1026,7 @@ bool AppInitParameterInteraction()\n         if (std::none_of(categories.begin(), categories.end(),\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n-                if (!g_logger->EnableCategory(cat)) {\n+                if (!LogInstance().EnableCategory(cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n                 }\n             }\n@@ -976,30 +1035,11 @@ bool AppInitParameterInteraction()\n \n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-        if (!g_logger->DisableCategory(cat)) {\n+        if (!LogInstance().DisableCategory(cat)) {\n             InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n         }\n     }\n \n-    // Check for -debugnet\n-    if (gArgs.GetBoolArg(\"-debugnet\", false))\n-        InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n-    // Check for -socks - as this is a privacy risk to continue, exit here\n-    if (gArgs.IsArgSet(\"-socks\"))\n-        return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n-    // Check for -tor - as this is a privacy risk to continue, exit here\n-    if (gArgs.GetBoolArg(\"-tor\", false))\n-        return InitError(_(\"Unsupported argument -tor found, use -onion.\"));\n-\n-    if (gArgs.GetBoolArg(\"-benchmark\", false))\n-        InitWarning(_(\"Unsupported argument -benchmark ignored, use -debug=bench.\"));\n-\n-    if (gArgs.GetBoolArg(\"-whitelistalwaysrelay\", false))\n-        InitWarning(_(\"Unsupported argument -whitelistalwaysrelay ignored, use -whitelistrelay and/or -whitelistforcerelay.\"));\n-\n-    if (gArgs.IsArgSet(\"-blockminsize\"))\n-        InitWarning(\"Unsupported argument -blockminsize ignored.\");\n-\n     // Checkmempool and checkblockindex default to true in regtest mode\n     int ratio = std::min<int>(std::max<int>(gArgs.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     if (ratio != 0) {\n@@ -1066,13 +1106,19 @@ bool AppInitParameterInteraction()\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n             return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n-        LogPrintf(\"Prune configured to target %uMiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n+        LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n     }\n \n     nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n-    if (nConnectTimeout <= 0)\n+    if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n+    }\n+\n+    peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    if (peer_connect_timeout <= 0) {\n+        return InitError(\"peertimeout cannot be configured with a negative value.\");\n+    }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n@@ -1140,39 +1186,6 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (gArgs.IsArgSet(\"-vbparams\")) {\n-        // Allow overriding version bits parameters for testing\n-        if (!chainparams.MineBlocksOnDemand()) {\n-            return InitError(\"Version bits parameters may only be overridden on regtest.\");\n-        }\n-        for (const std::string& strDeployment : gArgs.GetArgs(\"-vbparams\")) {\n-            std::vector<std::string> vDeploymentParams;\n-            boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-            if (vDeploymentParams.size() != 3) {\n-                return InitError(\"Version bits parameters malformed, expecting deployment:start:end\");\n-            }\n-            int64_t nStartTime, nTimeout;\n-            if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-                return InitError(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n-            }\n-            if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-                return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n-            }\n-            bool found = false;\n-            for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n-            {\n-                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n-                    UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n-                    found = true;\n-                    LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n-                    break;\n-                }\n-            }\n-            if (!found) {\n-                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n-            }\n-        }\n-    }\n     return true;\n }\n \n@@ -1222,30 +1235,43 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain()\n+bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n-#ifndef WIN32\n-    CreatePidFile(GetPidFile(), getpid());\n-#endif\n-    if (g_logger->m_print_to_file) {\n-        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", g_logger->DefaultShrinkDebugFile())) {\n+    if (!CreatePidFile()) {\n+        // Detailed error printed inside CreatePidFile().\n+        return false;\n+    }\n+    if (LogInstance().m_print_to_file) {\n+        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n-            g_logger->ShrinkDebugFile();\n+            LogInstance().ShrinkDebugFile();\n         }\n-        if (!g_logger->OpenDebugLog()) {\n+        if (!LogInstance().OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\",\n-                                       g_logger->m_file_path.string()));\n+                LogInstance().m_file_path.string()));\n         }\n     }\n \n-    if (!g_logger->m_log_timestamps)\n+    if (!LogInstance().m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+\n+    // Only log conf file usage message if conf file actually exists.\n+    fs::path config_file_path = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    if (fs::exists(config_file_path)) {\n+        LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n+    } else if (gArgs.IsArgSet(\"-conf\")) {\n+        // Warn if no conf file exists at path provided by user\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n+    } else {\n+        // Not categorizing as \"Warning\" because it's the default behavior\n+        LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n+    }\n+\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n@@ -1263,21 +1289,30 @@ bool AppInitMain()\n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n     if (nScriptCheckThreads) {\n         for (int i=0; i<nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n     }\n \n     // Start the lightweight task scheduler thread\n-    CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n-    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n+    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(interfaces);\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-    g_wallet_init_interface.RegisterRPC(tableRPC);\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->registerRpcs();\n+    }\n+    g_rpc_interfaces = &interfaces;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1295,19 +1330,24 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    if (!g_wallet_init_interface.Verify()) return false;\n+    for (const auto& client : interfaces.chain_clients) {\n+        if (!client->verify()) {\n+            return false;\n+        }\n+    }\n \n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n     // until the very end (\"start node\") as the UTXO/block state\n     // is not yet setup and may end up being set up twice if we\n     // need to reindex later.\n \n+    assert(!g_banman);\n+    g_banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n-    CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman, scheduler, gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61)));\n+    peerLogic.reset(new PeerLogicValidation(g_connman.get(), g_banman.get(), scheduler, gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61)));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n@@ -1334,7 +1374,7 @@ bool AppInitMain()\n         for (int n = 0; n < NET_MAX; n++) {\n             enum Network net = (enum Network)n;\n             if (!nets.count(net))\n-                SetLimited(net);\n+                SetReachable(net, false);\n         }\n     }\n \n@@ -1345,7 +1385,7 @@ bool AppInitMain()\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = gArgs.GetArg(\"-proxy\", \"\");\n-    SetLimited(NET_ONION);\n+    SetReachable(NET_ONION, false);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n@@ -1360,7 +1400,7 @@ bool AppInitMain()\n         SetProxy(NET_IPV6, addrProxy);\n         SetProxy(NET_ONION, addrProxy);\n         SetNameProxy(addrProxy);\n-        SetLimited(NET_ONION, false); // by default, -proxy sets onion as reachable, unless -noonion later\n+        SetReachable(NET_ONION, true); // by default, -proxy sets onion as reachable, unless -noonion later\n     }\n \n     // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n@@ -1369,7 +1409,7 @@ bool AppInitMain()\n     std::string onionArg = gArgs.GetArg(\"-onion\", \"\");\n     if (onionArg != \"\") {\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n-            SetLimited(NET_ONION); // set onions as unreachable\n+            SetReachable(NET_ONION, false);\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n@@ -1379,7 +1419,7 @@ bool AppInitMain()\n             if (!addrOnion.IsValid())\n                 return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             SetProxy(NET_ONION, addrOnion);\n-            SetLimited(NET_ONION, false);\n+            SetReachable(NET_ONION, true);\n         }\n     }\n \n@@ -1423,18 +1463,29 @@ bool AppInitMain()\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (!g_enabled_filter_types.empty()) {\n+        size_t n_indexes = g_enabled_filter_types.size();\n+        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n+        filter_index_cache = max_cache / n_indexes;\n+        nTotalCache -= filter_index_cache * n_indexes;\n+    }\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+    }\n+    for (BlockFilterType filter_type : g_enabled_filter_types) {\n+        LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n+                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n@@ -1443,11 +1494,11 @@ bool AppInitMain()\n \n         uiInterface.InitMessage(_(\"Loading block index...\"));\n \n-        LOCK(cs_main);\n-\n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n+            bool is_coinsview_empty;\n             try {\n+                LOCK(cs_main);\n                 UnloadBlockIndex();\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n@@ -1519,7 +1570,7 @@ bool AppInitMain()\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n-                bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n@@ -1528,18 +1579,25 @@ bool AppInitMain()\n                     }\n                     assert(chainActive.Tip() != nullptr);\n                 }\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"%s\\n\", e.what());\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            }\n \n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on chainActive, and drops block data in\n-                    // mapBlockIndex based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n-                    if (!RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n-                        break;\n-                    }\n+            if (!fReset) {\n+                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                // It both disconnects blocks based on chainActive, and drops block data in\n+                // mapBlockIndex based on lack of available witness data.\n+                uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                if (!RewindBlockIndex(chainparams)) {\n+                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                    break;\n                 }\n+            }\n \n+            try {\n+                LOCK(cs_main);\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n@@ -1613,8 +1671,17 @@ bool AppInitMain()\n         g_txindex->Start();\n     }\n \n+    for (const auto& filter_type : g_enabled_filter_types) {\n+        InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n+        GetBlockFilterIndex(filter_type)->Start();\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {\n+        if (!client->load()) {\n+            return false;\n+        }\n+    }\n \n     // ********************************************************* Step 10: data directory maintenance\n \n@@ -1640,13 +1707,20 @@ bool AppInitMain()\n \n     // ********************************************************* Step 11: import blocks\n \n-    if (!CheckDiskSpace() && !CheckDiskSpace(0, true))\n+    if (!CheckDiskSpace(GetDataDir())) {\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n+        return false;\n+    }\n+    if (!CheckDiskSpace(GetBlocksDir())) {\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n+    }\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n+    boost::signals2::connection block_notify_genesis_wait_connection;\n     if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n+        block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n     } else {\n         fHaveGenesis = true;\n     }\n@@ -1659,7 +1733,7 @@ bool AppInitMain()\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n     {\n@@ -1670,7 +1744,7 @@ bool AppInitMain()\n         while (!fHaveGenesis && !ShutdownRequested()) {\n             g_genesis_wait_cv.wait_for(lock, std::chrono::milliseconds(500));\n         }\n-        uiInterface.NotifyBlockTip_disconnect(BlockNotifyGenesisWait);\n+        block_notify_genesis_wait_connection.disconnect();\n     }\n \n     if (ShutdownRequested()) {\n@@ -1707,13 +1781,15 @@ bool AppInitMain()\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n+    connOptions.m_banman = g_banman.get();\n     connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = gArgs.GetArgs(\"-addnode\");\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n+    connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n@@ -1751,7 +1827,7 @@ bool AppInitMain()\n             connOptions.m_specified_outgoing = connect;\n         }\n     }\n-    if (!connman.Start(scheduler, connOptions)) {\n+    if (!g_connman->Start(scheduler, connOptions)) {\n         return false;\n     }\n \n@@ -1760,7 +1836,13 @@ bool AppInitMain()\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-    g_wallet_init_interface.Start(scheduler);\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->start(scheduler);\n+    }\n+\n+    scheduler.scheduleEvery([]{\n+        g_banman->DumpBanlist();\n+    }, DUMP_BANS_INTERVAL * 1000);\n \n     return true;\n }"
      },
      {
        "sha": "1c59ca069edf2d706bc5c1bd5a36380e42bc1784",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -8,13 +8,19 @@\n \n #include <memory>\n #include <string>\n-#include <util.h>\n+#include <util/system.h>\n \n-class CScheduler;\n-class CWallet;\n+namespace interfaces {\n+class Chain;\n+class ChainClient;\n+} // namespace interfaces\n \n-class WalletInitInterface;\n-extern const WalletInitInterface& g_wallet_init_interface;\n+//! Pointers to interfaces used during init and destroyed on shutdown.\n+struct InitInterfaces\n+{\n+    std::unique_ptr<interfaces::Chain> chain;\n+    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+};\n \n namespace boost\n {\n@@ -23,7 +29,7 @@ class thread_group;\n \n /** Interrupt threads */\n void Interrupt();\n-void Shutdown();\n+void Shutdown(InitInterfaces& interfaces);\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n@@ -57,7 +63,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain();\n+bool AppInitMain(InitInterfaces& interfaces);\n \n /**\n  * Setup the arguments for gArgs"
      },
      {
        "sha": "f77d1721535bee672b972156960b7a93bc6607a0",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -2,9 +2,9 @@\n \n The following interfaces are defined here:\n \n-* [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#14437](https://github.com/bitcoin/bitcoin/pull/14437), [#14711](https://github.com/bitcoin/bitcoin/pull/14711), [#15288](https://github.com/bitcoin/bitcoin/pull/15288), and [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n-* [`Chain::Client`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`ChainClient`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#14437](https://github.com/bitcoin/bitcoin/pull/14437).\n \n * [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n "
      },
      {
        "sha": "617be3ca71203931f1356cdae5a72b6ce7690dc1",
        "filename": "src/interfaces/chain.cpp",
        "status": "added",
        "additions": 372,
        "deletions": 0,
        "changes": 372,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,372 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <interfaces/handler.h>\n+#include <interfaces/wallet.h>\n+#include <net.h>\n+#include <node/coin.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <policy/settings.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <rpc/protocol.h>\n+#include <rpc/server.h>\n+#include <shutdown.h>\n+#include <sync.h>\n+#include <threadsafety.h>\n+#include <timedata.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <uint256.h>\n+#include <univalue.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <memory>\n+#include <utility>\n+\n+namespace interfaces {\n+namespace {\n+\n+class LockImpl : public Chain::Lock\n+{\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        CBlockIndex* block = LookupBlockIndex(hash);\n+        if (block && ::chainActive.Contains(block)) {\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    int getBlockDepth(const uint256& hash) override\n+    {\n+        const Optional<int> tip_height = getHeight();\n+        const Optional<int> height = getBlockHeight(hash);\n+        return tip_height && height ? *tip_height - *height + 1 : 0;\n+    }\n+    uint256 getBlockHash(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockHash();\n+    }\n+    int64_t getBlockTime(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockTime();\n+    }\n+    int64_t getBlockMedianTimePast(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetMedianTimePast();\n+    }\n+    bool haveBlockOnDisk(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n+    }\n+    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n+    {\n+        CBlockIndex* block = ::chainActive.FindEarliestAtLeast(time, height);\n+        if (block) {\n+            if (hash) *hash = block->GetBlockHash();\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n+    {\n+        if (::fPruneMode) {\n+            CBlockIndex* block = stop_height ? ::chainActive[*stop_height] : ::chainActive.Tip();\n+            while (block && block->nHeight >= start_height) {\n+                if ((block->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                    return block->nHeight;\n+                }\n+                block = block->pprev;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n+    {\n+        const CBlockIndex* block = LookupBlockIndex(hash);\n+        const CBlockIndex* fork = block ? ::chainActive.FindFork(block) : nullptr;\n+        if (height) {\n+            if (block) {\n+                *height = block->nHeight;\n+            } else {\n+                height->reset();\n+            }\n+        }\n+        if (fork) {\n+            return fork->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    CBlockLocator getTipLocator() override { return ::chainActive.GetLocator(); }\n+    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        if (CBlockIndex* fork = FindForkInGlobalIndex(::chainActive, locator)) {\n+            return fork->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    bool checkFinalTx(const CTransaction& tx) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return CheckFinalTx(tx);\n+    }\n+    bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n+            false /* bypass limits */, absurd_fee);\n+    }\n+};\n+\n+class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n+{\n+    using UniqueLock::UniqueLock;\n+};\n+\n+class NotificationsHandlerImpl : public Handler, CValidationInterface\n+{\n+public:\n+    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)\n+        : m_chain(chain), m_notifications(&notifications)\n+    {\n+        RegisterValidationInterface(this);\n+    }\n+    ~NotificationsHandlerImpl() override { disconnect(); }\n+    void disconnect() override\n+    {\n+        if (m_notifications) {\n+            m_notifications = nullptr;\n+            UnregisterValidationInterface(this);\n+        }\n+    }\n+    void TransactionAddedToMempool(const CTransactionRef& tx) override\n+    {\n+        m_notifications->TransactionAddedToMempool(tx);\n+    }\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n+    {\n+        m_notifications->TransactionRemovedFromMempool(tx);\n+    }\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block,\n+        const CBlockIndex* index,\n+        const std::vector<CTransactionRef>& tx_conflicted) override\n+    {\n+        m_notifications->BlockConnected(*block, tx_conflicted);\n+    }\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    {\n+        m_notifications->BlockDisconnected(*block);\n+    }\n+    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n+    {\n+        m_notifications->UpdatedBlockTip();\n+    }\n+    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n+    Chain& m_chain;\n+    Chain::Notifications* m_notifications;\n+};\n+\n+class RpcHandlerImpl : public Handler\n+{\n+public:\n+    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n+    {\n+        m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n+            if (!m_wrapped_command) return false;\n+            try {\n+                return m_wrapped_command->actor(request, result, last_handler);\n+            } catch (const UniValue& e) {\n+                // If this is not the last handler and a wallet not found\n+                // exception was thrown, return false so the next handler can\n+                // try to handle the request. Otherwise, reraise the exception.\n+                if (!last_handler) {\n+                    const UniValue& code = e[\"code\"];\n+                    if (code.isNum() && code.get_int() == RPC_WALLET_NOT_FOUND) {\n+                        return false;\n+                    }\n+                }\n+                throw;\n+            }\n+        };\n+        ::tableRPC.appendCommand(m_command.name, &m_command);\n+    }\n+\n+    void disconnect() override final\n+    {\n+        if (m_wrapped_command) {\n+            m_wrapped_command = nullptr;\n+            ::tableRPC.removeCommand(m_command.name, &m_command);\n+        }\n+    }\n+\n+    ~RpcHandlerImpl() override { disconnect(); }\n+\n+    CRPCCommand m_command;\n+    const CRPCCommand* m_wrapped_command;\n+};\n+\n+class ChainImpl : public Chain\n+{\n+public:\n+    std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n+    {\n+        auto result = MakeUnique<LockingStateImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n+        if (try_lock && result && !*result) return {};\n+        // std::move necessary on some compilers due to conversion from\n+        // LockingStateImpl to Lock pointer\n+        return std::move(result);\n+    }\n+    std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    {\n+        CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            index = LookupBlockIndex(hash);\n+            if (!index) {\n+                return false;\n+            }\n+            if (time) {\n+                *time = index->GetBlockTime();\n+            }\n+            if (time_max) {\n+                *time_max = index->GetBlockTimeMax();\n+            }\n+        }\n+        if (block && !ReadBlockFromDisk(*block, index, Params().GetConsensus())) {\n+            block->SetNull();\n+        }\n+        return true;\n+    }\n+    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(coins); }\n+    double guessVerificationProgress(const uint256& block_hash) override\n+    {\n+        LOCK(cs_main);\n+        return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n+    }\n+    RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n+    {\n+        LOCK(::mempool.cs);\n+        return IsRBFOptIn(tx, ::mempool);\n+    }\n+    bool hasDescendantsInMempool(const uint256& txid) override\n+    {\n+        LOCK(::mempool.cs);\n+        auto it = ::mempool.GetIter(txid);\n+        return it && (*it)->GetCountWithDescendants() > 1;\n+    }\n+    void relayTransaction(const uint256& txid) override\n+    {\n+        CInv inv(MSG_TX, txid);\n+        g_connman->ForEachNode([&inv](CNode* node) { node->PushInventory(inv); });\n+    }\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    {\n+        ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n+    }\n+    bool checkChainLimits(const CTransactionRef& tx) override\n+    {\n+        LockPoints lp;\n+        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n+        CTxMemPool::setEntries ancestors;\n+        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        std::string unused_error_string;\n+        LOCK(::mempool.cs);\n+        return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n+            limit_descendant_count, limit_descendant_size, unused_error_string);\n+    }\n+    CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc) override\n+    {\n+        return ::feeEstimator.estimateSmartFee(num_blocks, calc, conservative);\n+    }\n+    unsigned int estimateMaxBlocks() override\n+    {\n+        return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    }\n+    CFeeRate mempoolMinFee() override\n+    {\n+        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n+    CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n+    CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }\n+    CFeeRate relayDustFee() override { return ::dustRelayFee; }\n+    bool getPruneMode() override { return ::fPruneMode; }\n+    bool p2pEnabled() override { return g_connman != nullptr; }\n+    bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !IsInitialBlockDownload(); }\n+    bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n+    bool shutdownRequested() override { return ShutdownRequested(); }\n+    int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n+    void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n+    void initWarning(const std::string& message) override { InitWarning(message); }\n+    void initError(const std::string& message) override { InitError(message); }\n+    void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n+    void showProgress(const std::string& title, int progress, bool resume_possible) override\n+    {\n+        ::uiInterface.ShowProgress(title, progress, resume_possible);\n+    }\n+    std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n+    {\n+        return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n+    }\n+    void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) override\n+    {\n+        if (!old_tip.IsNull()) {\n+            LOCK(::cs_main);\n+            if (old_tip == ::chainActive.Tip()->GetBlockHash()) return;\n+            CBlockIndex* block = LookupBlockIndex(old_tip);\n+            if (block && block->GetAncestor(::chainActive.Height()) == ::chainActive.Tip()) return;\n+        }\n+        SyncWithValidationInterfaceQueue();\n+    }\n+    std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) override\n+    {\n+        return MakeUnique<RpcHandlerImpl>(command);\n+    }\n+    bool rpcEnableDeprecated(const std::string& method) override { return IsDeprecatedRPCEnabled(method); }\n+    void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) override\n+    {\n+        RPCRunLater(name, std::move(fn), seconds);\n+    }\n+    int rpcSerializationFlags() override { return RPCSerializationFlags(); }\n+    void requestMempoolTransactions(Notifications& notifications) override\n+    {\n+        LOCK2(::cs_main, ::mempool.cs);\n+        for (const CTxMemPoolEntry& entry : ::mempool.mapTx) {\n+            notifications.TransactionAddedToMempool(entry.GetSharedTx());\n+        }\n+    }\n+};\n+} // namespace\n+\n+std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }\n+\n+} // namespace interfaces"
      },
      {
        "sha": "0b7249a5ab1595d1b8ec89024fd27e01dc313f40",
        "filename": "src/interfaces/chain.h",
        "status": "added",
        "additions": 318,
        "deletions": 0,
        "changes": 318,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -0,0 +1,318 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_CHAIN_H\n+#define BITCOIN_INTERFACES_CHAIN_H\n+\n+#include <optional.h>               // For Optional and nullopt\n+#include <primitives/transaction.h> // For CTransactionRef\n+\n+#include <memory>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+class CBlock;\n+class CFeeRate;\n+class CRPCCommand;\n+class CScheduler;\n+class CValidationState;\n+class Coin;\n+class uint256;\n+enum class RBFTransactionState;\n+struct CBlockLocator;\n+struct FeeCalculation;\n+\n+namespace interfaces {\n+\n+class Handler;\n+class Wallet;\n+\n+//! Interface giving clients (wallet processes, maybe other analysis tools in\n+//! the future) ability to access to the chain state, receive notifications,\n+//! estimate fees, and submit transactions.\n+//!\n+//! TODO: Current chain methods are too low level, exposing too much of the\n+//! internal workings of the bitcoin node, and not being very convenient to use.\n+//! Chain methods should be cleaned up and simplified over time. Examples:\n+//!\n+//! * The Chain::lock() method, which lets clients delay chain tip updates\n+//!   should be removed when clients are able to respond to updates\n+//!   asynchronously\n+//!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n+//!\n+//! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n+//!   with a higher-level broadcastTransaction method\n+//!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n+//!\n+//! * The initMessages() and loadWallet() methods which the wallet uses to send\n+//!   notifications to the GUI should go away when GUI and wallet can directly\n+//!   communicate with each other without going through the node\n+//!   (https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096).\n+//!\n+//! * The handleRpc, registerRpcs, rpcEnableDeprecated methods and other RPC\n+//!   methods can go away if wallets listen for HTTP requests on their own\n+//!   ports instead of registering to handle requests on the node HTTP port.\n+class Chain\n+{\n+public:\n+    virtual ~Chain() {}\n+\n+    //! Interface for querying locked chain state, used by legacy code that\n+    //! assumes state won't change between calls. New code should avoid using\n+    //! the Lock interface and instead call higher-level Chain methods\n+    //! that return more information so the chain doesn't need to stay locked\n+    //! between calls.\n+    class Lock\n+    {\n+    public:\n+        virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nullopt if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nullopt for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash. Height must be valid or this function will abort.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time. Height must be valid or this function will abort.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past. Height must be valid or this function\n+        //! will abort.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the block is available on disk (i.e. has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nullopt if there is no block with a high enough\n+        //! timestamp and height. Also return the block hash as an optional output parameter\n+        //! (to avoid the cost of a second lookup in case this information is needed.)\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nullopt if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the specified block if it is on the chain, otherwise\n+        //! return the height of the highest block on chain that's an ancestor\n+        //! of the specified block, or nullopt if there is no common ancestor.\n+        //! Also return the height of the specified block as an optional output\n+        //! parameter (to avoid the cost of a second hash lookup in case this\n+        //! information is desired).\n+        virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n+\n+        //! Get locator for the current chain tip.\n+        virtual CBlockLocator getTipLocator() = 0;\n+\n+        //! Return height of the highest block on chain in common with the locator,\n+        //! which will either be the original block used to create the locator,\n+        //! or one of its ancestors.\n+        virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+\n+        //! Check if transaction will be final given chain height current time.\n+        virtual bool checkFinalTx(const CTransaction& tx) = 0;\n+\n+        //! Add transaction to memory pool if the transaction fee is below the\n+        //! amount specified by absurd_fee. Returns false if the transaction\n+        //! could not be added due to the fee or for another reason.\n+        virtual bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) = 0;\n+    };\n+\n+    //! Return Lock interface. Chain is locked when this is called, and\n+    //! unlocked when the returned interface is freed.\n+    virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n+\n+    //! Return Lock interface assuming chain is already locked. This\n+    //! method is temporary and is only used in a few places to avoid changing\n+    //! behavior while code is transitioned to use the Chain::Lock interface.\n+    virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata\n+    //! or contents.\n+    //!\n+    //! If a block pointer is provided to retrieve the block contents, and the\n+    //! block exists but doesn't have data (for example due to pruning), the\n+    //! block will be empty and all fields set to null.\n+    virtual bool findBlock(const uint256& hash,\n+        CBlock* block = nullptr,\n+        int64_t* time = nullptr,\n+        int64_t* max_time = nullptr) = 0;\n+\n+    //! Look up unspent output information. Returns coins in the mempool and in\n+    //! the current chain UTXO set. Iterates through all the keys in the map and\n+    //! populates the values.\n+    virtual void findCoins(std::map<COutPoint, Coin>& coins) = 0;\n+\n+    //! Estimate fraction of total transactions verified if blocks up to\n+    //! the specified block hash are verified.\n+    virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n+\n+    //! Check if transaction is RBF opt in.\n+    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n+\n+    //! Check if transaction has descendants in mempool.\n+    virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n+\n+    //! Relay transaction.\n+    virtual void relayTransaction(const uint256& txid) = 0;\n+\n+    //! Calculate mempool ancestor and descendant counts for the given transaction.\n+    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n+\n+    //! Check if transaction will pass the mempool's chain limits.\n+    virtual bool checkChainLimits(const CTransactionRef& tx) = 0;\n+\n+    //! Estimate smart fee.\n+    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;\n+\n+    //! Fee estimator max target.\n+    virtual unsigned int estimateMaxBlocks() = 0;\n+\n+    //! Mempool minimum fee.\n+    virtual CFeeRate mempoolMinFee() = 0;\n+\n+    //! Relay current minimum fee (from -minrelaytxfee and -incrementalrelayfee settings).\n+    virtual CFeeRate relayMinFee() = 0;\n+\n+    //! Relay incremental fee setting (-incrementalrelayfee), reflecting cost of relay.\n+    virtual CFeeRate relayIncrementalFee() = 0;\n+\n+    //! Relay dust fee setting (-dustrelayfee), reflecting lowest rate it's economical to spend.\n+    virtual CFeeRate relayDustFee() = 0;\n+\n+    //! Check if pruning is enabled.\n+    virtual bool getPruneMode() = 0;\n+\n+    //! Check if p2p enabled.\n+    virtual bool p2pEnabled() = 0;\n+\n+    //! Check if the node is ready to broadcast transactions.\n+    virtual bool isReadyToBroadcast() = 0;\n+\n+    //! Check if in IBD.\n+    virtual bool isInitialBlockDownload() = 0;\n+\n+    //! Check if shutdown requested.\n+    virtual bool shutdownRequested() = 0;\n+\n+    //! Get adjusted time.\n+    virtual int64_t getAdjustedTime() = 0;\n+\n+    //! Send init message.\n+    virtual void initMessage(const std::string& message) = 0;\n+\n+    //! Send init warning.\n+    virtual void initWarning(const std::string& message) = 0;\n+\n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n+\n+    //! Send wallet load notification to the GUI.\n+    virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n+\n+    //! Send progress indicator.\n+    virtual void showProgress(const std::string& title, int progress, bool resume_possible) = 0;\n+\n+    //! Chain notifications.\n+    class Notifications\n+    {\n+    public:\n+        virtual ~Notifications() {}\n+        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n+        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}\n+        virtual void BlockDisconnected(const CBlock& block) {}\n+        virtual void UpdatedBlockTip() {}\n+        virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n+    };\n+\n+    //! Register handler for notifications.\n+    virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n+\n+    //! Wait for pending notifications to be processed unless block hash points to the current\n+    //! chain tip, or to a possible descendant of the current chain tip that isn't currently\n+    //! connected.\n+    virtual void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) = 0;\n+\n+    //! Register handler for RPC. Command is not copied, so reference\n+    //! needs to remain valid until Handler is disconnected.\n+    virtual std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) = 0;\n+\n+    //! Check if deprecated RPC is enabled.\n+    virtual bool rpcEnableDeprecated(const std::string& method) = 0;\n+\n+    //! Run function after given number of seconds. Cancel any previous calls with same name.\n+    virtual void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) = 0;\n+\n+    //! Current RPC serialization flags.\n+    virtual int rpcSerializationFlags() = 0;\n+\n+    //! Synchronously send TransactionAddedToMempool notifications about all\n+    //! current mempool transactions to the specified handler and return after\n+    //! the last one is sent. These notifications aren't coordinated with async\n+    //! notifications sent by handleNotifications, so out of date async\n+    //! notifications from handleNotifications can arrive during and after\n+    //! synchronous notifications from requestMempoolTransactions. Clients need\n+    //! to be prepared to handle this by ignoring notifications about unknown\n+    //! removed transactions and already added new transactions.\n+    virtual void requestMempoolTransactions(Notifications& notifications) = 0;\n+};\n+\n+//! Interface to let node manage chain clients (wallets, or maybe tools for\n+//! monitoring and analysis in the future).\n+class ChainClient\n+{\n+public:\n+    virtual ~ChainClient() {}\n+\n+    //! Register rpcs.\n+    virtual void registerRpcs() = 0;\n+\n+    //! Check for errors before loading.\n+    virtual bool verify() = 0;\n+\n+    //! Load saved state.\n+    virtual bool load() = 0;\n+\n+    //! Start client execution and provide a scheduler.\n+    virtual void start(CScheduler& scheduler) = 0;\n+\n+    //! Save state to disk.\n+    virtual void flush() = 0;\n+\n+    //! Shut down client.\n+    virtual void stop() = 0;\n+};\n+\n+//! Return implementation of Chain interface.\n+std::unique_ptr<Chain> MakeChain();\n+\n+//! Return implementation of ChainClient interface for a wallet client. This\n+//! function will be undefined in builds where ENABLE_WALLET is false.\n+//!\n+//! Currently, wallets are the only chain clients. But in the future, other\n+//! types of chain clients could be added, such as tools for monitoring,\n+//! analysis, or fee estimation. These clients need to expose their own\n+//! MakeXXXClient functions returning their implementations of the ChainClient\n+//! interface.\n+std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames);\n+\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_CHAIN_H"
      },
      {
        "sha": "92601fc4e99c88579e6761687edf4b06d82e16bd",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <interfaces/handler.h>\n \n-#include <utilmemory.h>\n+#include <util/memory.h>\n \n #include <boost/signals2/connection.hpp>\n #include <utility>"
      },
      {
        "sha": "f3ee8fe364239aa33cedd7a258277d29c8b5781d",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "1ccd2a31b72aee849bc8c11f804427789eab91b7",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 22,
        "deletions": 4,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "b57299d78d1fd278cacf81f11afc277ad5d4b714",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 213,
        "deletions": 139,
        "changes": 352,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "7096f5404724ae83813488dfadd19674ffd59c73",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "9d982fc44f56660e1b1e1e1ce716f39faa21c96b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "0f695c07b7985563c92a632f762ee73ab5f96522",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "1d53a5e074dc896a0e7eebffe51589e13b4e972a",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "148979cf3598c4bf4c1d0abac1d623f0c62c1338",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "b23e3dcc9d06a1d854152b245de6918297026072",
        "filename": "src/leveldb/db/c.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/db/c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/db/c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/c.cc?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "989c15cd91d05713a42c22d92c1be0edacb47bb3",
        "filename": "src/leveldb/port/port_win.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/port/port_win.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/port/port_win.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "830332abe9b32f2af88f463e26cb5288919a59b1",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "3eda4995dbd0c3768f4263d4b4e03a58e2f2b3ea",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "e399d4c30751c655c6d8fb2467941e71f6e97310",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 26,
        "deletions": 35,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "a54268d6558148e95677518bb186b9c2e3129e65",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "6a88e8321d866523bbba714fe3bef203d50f242f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 19,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "7c4c455072ed660fdf04cf6231876e5ac0f619af",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "1335804b06e78d6d2e52a8f6820c6fab64c57308",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 430,
        "deletions": 595,
        "changes": 1025,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "7af33ef13b0eee7e9b3ad196ad38799d434b0de6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 135,
        "deletions": 134,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "74e33189dc502d857472e3015f9906269ddf9ad8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 341,
        "deletions": 128,
        "changes": 469,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "39c22d71188862f4c8755a9134c8487e9690d8f0",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "6ee2d8a4b36b8b4dc6000ec2299673110491b2ac",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 14,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "8230e40606aeb3525331d542b70dcfc874c90ad4",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "6c386a9ade702c1caa0502244079f9955976a39d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 26,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "e99a7175344b97e0475ed049841aff10353b025d",
        "filename": "src/node/README.md",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/README.md?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "bb98e63f3aaf5495da5f6fe258c227a070bd371e",
        "filename": "src/node/coin.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "eb95b75cfb432a1845a3df6aaa7fb1a6ec6716ca",
        "filename": "src/node/coin.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "12559c5a5f19748ffc24d6627de0a95c3950d042",
        "filename": "src/node/psbt.cpp",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "e04366a20f88f6fa0648f07fb78d6d09a1db929c",
        "filename": "src/node/psbt.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "5ffb15ed3ce35e50c17b864b55091dab9b038ed7",
        "filename": "src/node/transaction.cpp",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "51033f94e56eab288556ebeb4e37ed9d4c5af38f",
        "filename": "src/node/transaction.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "c7d8fee0ba70c5cc30b1b2bd67a2bf5c777cc2e5",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "79a79a9af20f42b8bec641ec1e6a557f1bef0de0",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "95a3b24d0a0273c9b5fec23771eaaabe3f2d0a9e",
        "filename": "src/optional.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "6c30fd19505fb02c6e139c0d567c9d1be79f31a0",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "524afd014e69ab85eb9b0242943843b624685312",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 43,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "6e61f76178e236ef2b981941b5f33bb6f38dd0a2",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 23,
        "deletions": 27,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "63a3d062674ff7b2013ece2bf1d94a5fcb0178fb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "ebe040f0ea7cfdbc05a942ade85b4987eb20e54f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "b4b8341d77471cae3daa67b802696e9986fb23e1",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "0707b0044f9748321e23a298de0edf1c546d888b",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "e8e1559407a3f59c3bdcbe380443288de1490cc4",
        "filename": "src/policy/settings.cpp",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "30a7189c93d3056c8ae7a9f77be71eb7f4e663e4",
        "filename": "src/policy/settings.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/policy/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "99e57516343525d7ad9e97524ff8859a86f98505",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "a0c2e3f1257497e4bcb9e4eb7add10e41d0e625c",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "28c145f71d0c795d210b2863ae2440a7dbe56fba",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "aad991e2f156e447bb63c732393f042278f2c520",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "bdf236c2c76b203391a637ee383b9bf340727f1b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "a790a0690699778523238c15788bbed6c6fd6f0b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "97bda51a63c278ce26a41519acad63f4f71cad8e",
        "filename": "src/psbt.cpp",
        "status": "added",
        "additions": 370,
        "deletions": 0,
        "changes": 370,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      },
      {
        "sha": "1bc1e91a84ec2ee93cb3025fc11d5da557208ebc",
        "filename": "src/psbt.h",
        "status": "added",
        "additions": 599,
        "deletions": 0,
        "changes": 599,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44de01a244ee104af3694be04f08b9341e4b74f/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44de01a244ee104af3694be04f08b9341e4b74f/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=a44de01a244ee104af3694be04f08b9341e4b74f"
      }
    ]
  }
]