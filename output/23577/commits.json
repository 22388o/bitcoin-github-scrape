[
  {
    "sha": "bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
    "node_id": "C_kwDOABII59oAKGJiNGQzZTliOTcwYmUyYThkZTNlMTQ2NjIzODAxZmM4Y2JiZWIwYzc",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-22T22:13:24Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T02:48:59Z"
      },
      "message": "Address review comments for Bech32 error validation",
      "tree": {
        "sha": "a7ba4cd8be2afaeeff6abef8ef88f8537ca69020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7ba4cd8be2afaeeff6abef8ef88f8537ca69020"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d19f8c1a40a7531d2bb00febd245d127293a64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d19f8c1a40a7531d2bb00febd245d127293a64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d19f8c1a40a7531d2bb00febd245d127293a64"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ec69965d07daf5ceadbb5f77ca08d4d5f5e41db4",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
        "patch": "@@ -391,7 +391,7 @@ void push_range(int from, int to, std::vector<int>& vec)\n     }\n }\n \n-/** Return index of first invalid character in a Bech32 string. */\n+/** Return indices of invalid characters in a Bech32 string. */\n bool CheckCharacters(const std::string& str, std::vector<int>& errors) {\n     bool lower = false, upper = false;\n     for (size_t i = 0; i < str.size(); ++i) {"
      },
      {
        "sha": "c89493e29d07178beeacaa510ea66660b0ec5e0b",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
        "patch": "@@ -102,17 +102,20 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return ScriptHash(hash);\n         }\n \n-        if (!std::equal(script_prefix.begin(), script_prefix.end(), data.begin()) &&\n-            !std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            error_str = \"Invalid prefix for Base58-encoded address\";\n-        } else {\n+        // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n+        if ((data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n+            (data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n             error_str = \"Invalid length for Base58 address\";\n+        } else {\n+            error_str = \"Invalid prefix for Base58-encoded address\";\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n         // Try Base58 decoding without the checksum, using a much larger max length\n         if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid HRP or Base58 character in address\";\n+            error_str = \"Not a valid Bech32 or Base58 encoding\";\n         } else {\n             error_str = \"Invalid checksum or length of Base58 address\";\n         }"
      },
      {
        "sha": "1aaeddbf009dfc3b50e4b1e591b228f73be64020",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
        "patch": "@@ -61,7 +61,7 @@ def check_invalid(self, addr, error_str, error_locations=None):\n     def test_validateaddress(self):\n         # Invalid Bech32\n         self.check_invalid(BECH32_INVALID_SIZE, 'Invalid Bech32 address data size')\n-        self.check_invalid(BECH32_INVALID_PREFIX, 'Invalid HRP or Base58 character in address')\n+        self.check_invalid(BECH32_INVALID_PREFIX, 'Not a valid Bech32 or Base58 encoding')\n         self.check_invalid(BECH32_INVALID_BECH32, 'Version 1+ witness address must use Bech32m checksum')\n         self.check_invalid(BECH32_INVALID_BECH32M, 'Version 0 witness address must use Bech32 checksum')\n         self.check_invalid(BECH32_INVALID_VERSION, 'Invalid Bech32 address witness version')\n@@ -89,19 +89,19 @@ def test_validateaddress(self):\n         self.check_valid(BASE58_VALID)\n \n         # Invalid address format\n-        self.check_invalid(INVALID_ADDRESS, 'Invalid HRP or Base58 character in address')\n-        self.check_invalid(INVALID_ADDRESS_2, 'Invalid HRP or Base58 character in address')\n+        self.check_invalid(INVALID_ADDRESS, 'Not a valid Bech32 or Base58 encoding')\n+        self.check_invalid(INVALID_ADDRESS_2, 'Not a valid Bech32 or Base58 encoding')\n \n     def test_getaddressinfo(self):\n         node = self.nodes[0]\n \n         assert_raises_rpc_error(-5, \"Invalid Bech32 address data size\", node.getaddressinfo, BECH32_INVALID_SIZE)\n \n-        assert_raises_rpc_error(-5, \"Invalid HRP or Base58 character in address\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n+        assert_raises_rpc_error(-5, \"Not a valid Bech32 or Base58 encoding\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n \n         assert_raises_rpc_error(-5, \"Invalid prefix for Base58-encoded address\", node.getaddressinfo, BASE58_INVALID_PREFIX)\n \n-        assert_raises_rpc_error(-5, \"Invalid HRP or Base58 character in address\", node.getaddressinfo, INVALID_ADDRESS)\n+        assert_raises_rpc_error(-5, \"Not a valid Bech32 or Base58 encoding\", node.getaddressinfo, INVALID_ADDRESS)\n \n     def run_test(self):\n         self.test_validateaddress()"
      }
    ]
  },
  {
    "sha": "92f0cafdca11a9463b6f04229c1c47805c97c1b5",
    "node_id": "C_kwDOABII59oAKDkyZjBjYWZkY2ExMWE5NDYzYjZmMDQyMjljMWM0NzgwNWM5N2MxYjU",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-22T22:31:44Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T02:48:59Z"
      },
      "message": "Improve Bech32 boost tests",
      "tree": {
        "sha": "7b5ecca1ae7b932c40c6fb53e9f4d219d6c9f3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b5ecca1ae7b932c40c6fb53e9f4d219d6c9f3ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f0cafdca11a9463b6f04229c1c47805c97c1b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f0cafdca11a9463b6f04229c1c47805c97c1b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f0cafdca11a9463b6f04229c1c47805c97c1b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f0cafdca11a9463b6f04229c1c47805c97c1b5/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4d3e9b970be2a8de3e146623801fc8cbbeb0c7"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 42,
      "deletions": 36
    },
    "files": [
      {
        "sha": "7601ead5b843611638f53be57e7c27b84bc0e41c",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 36,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f0cafdca11a9463b6f04229c1c47805c97c1b5/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f0cafdca11a9463b6f04229c1c47805c97c1b5/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=92f0cafdca11a9463b6f04229c1c47805c97c1b5",
        "patch": "@@ -70,24 +70,28 @@ BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n         \"a12UEL5L\",\n         \"A12uEL5L\",\n         \"abcdef1qpzrz9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\",\n+        \"test1zg69w7y6hn0aqy352euf40x77qddq3dc\",\n     };\n-    static const std::pair<std::string, int> ERRORS[] = {\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Bech32 string too long\", 90},\n-        {\"Missing separator\", -1},\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid Base 32 character\", 2},\n-        {\"Invalid separator position\", 2},\n-        {\"Invalid character or mixed case\", 8},\n-        {\"Invalid checksum\", -1}, // The checksum is calculated using the uppercase form so the entire string is invalid, not just a few characters\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid character or mixed case\", 3},\n-        {\"Invalid character or mixed case\", 3},\n-        {\"Invalid checksum\", 11}\n+    static const std::pair<std::string, std::vector<int>> ERRORS[] = {\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Bech32 string too long\", {90}},\n+        {\"Missing separator\", {}},\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid Base 32 character\", {2}},\n+        {\"Invalid separator position\", {2}},\n+        {\"Invalid character or mixed case\", {8}},\n+        {\"Invalid checksum\", {}}, // The checksum is calculated using the uppercase form so the entire string is invalid, not just a few characters\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid character or mixed case\", {3, 4, 5, 7}},\n+        {\"Invalid character or mixed case\", {3}},\n+        {\"Invalid checksum\", {11}},\n+        {\"Invalid checksum\", {9, 16}},\n     };\n+    static_assert(std::size(CASES) == std::size(ERRORS), \"Bech32 CASES and ERRORS should have the same length\");\n+\n     int i = 0;\n     for (const std::string& str : CASES) {\n         const auto& err = ERRORS[i];\n@@ -96,8 +100,7 @@ BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n         std::vector<int> error_locations;\n         std::string error = bech32::LocateErrors(str, error_locations);\n         BOOST_CHECK_EQUAL(err.first, error);\n-        if (err.second == -1) BOOST_CHECK(error_locations.empty());\n-        else BOOST_CHECK_EQUAL(err.second, error_locations[0]);\n+        BOOST_CHECK(err.second == error_locations);\n         i++;\n     }\n }\n@@ -120,24 +123,28 @@ BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n         \"16plkw9\",\n         \"1p2gdwpf\",\n         \"abcdef1l7aum6echk45nj2s0wdvt2fg8x9yrzpqzd3ryx\",\n+        \"test1zg69v7y60n00qy352euf40x77qcusag6\",\n     };\n-    static const std::pair<std::string, int> ERRORS[] = {\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Invalid character or mixed case\", 0},\n-        {\"Bech32 string too long\", 90},\n-        {\"Missing separator\", -1},\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid Base 32 character\", 2},\n-        {\"Invalid Base 32 character\", 3},\n-        {\"Invalid separator position\", 2},\n-        {\"Invalid Base 32 character\", 8},\n-        {\"Invalid Base 32 character\", 7},\n-        {\"Invalid checksum\", -1},\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid separator position\", 0},\n-        {\"Invalid checksum\", 21},\n+    static const std::pair<std::string, std::vector<int>> ERRORS[] = {\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Invalid character or mixed case\", {0}},\n+        {\"Bech32 string too long\", {90}},\n+        {\"Missing separator\", {}},\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid Base 32 character\", {2}},\n+        {\"Invalid Base 32 character\", {3}},\n+        {\"Invalid separator position\", {2}},\n+        {\"Invalid Base 32 character\", {8}},\n+        {\"Invalid Base 32 character\", {7}},\n+        {\"Invalid checksum\", {}},\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid separator position\", {0}},\n+        {\"Invalid checksum\", {21}},\n+        {\"Invalid checksum\", {13, 32}},\n     };\n+    static_assert(std::size(CASES) == std::size(ERRORS), \"Bech32m CASES and ERRORS should have the same length\");\n+\n     int i = 0;\n     for (const std::string& str : CASES) {\n         const auto& err = ERRORS[i];\n@@ -146,8 +153,7 @@ BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n         std::vector<int> error_locations;\n         std::string error = bech32::LocateErrors(str, error_locations);\n         BOOST_CHECK_EQUAL(err.first, error);\n-        if (err.second == -1) BOOST_CHECK(error_locations.empty());\n-        else BOOST_CHECK_EQUAL(err.second, error_locations[0]);\n+        BOOST_CHECK(err.second == error_locations);\n         i++;\n     }\n }"
      }
    ]
  },
  {
    "sha": "c8b9a224e70f70ccc638b2c4200a505cdf024efd",
    "node_id": "C_kwDOABII59oAKGM4YjlhMjI0ZTcwZjcwY2NjNjM4YjJjNDIwMGE1MDVjZGYwMjRlZmQ",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-22T23:17:34Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T02:48:59Z"
      },
      "message": "Report encoding type in bech32 error message",
      "tree": {
        "sha": "158d0c3d3b9342ca4e50a1cb9f95f3bfe20cd440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/158d0c3d3b9342ca4e50a1cb9f95f3bfe20cd440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8b9a224e70f70ccc638b2c4200a505cdf024efd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b9a224e70f70ccc638b2c4200a505cdf024efd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b9a224e70f70ccc638b2c4200a505cdf024efd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b9a224e70f70ccc638b2c4200a505cdf024efd/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92f0cafdca11a9463b6f04229c1c47805c97c1b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f0cafdca11a9463b6f04229c1c47805c97c1b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92f0cafdca11a9463b6f04229c1c47805c97c1b5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7585ee944ca7036b0eae7bf1296bb7f71e99c3f8",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b9a224e70f70ccc638b2c4200a505cdf024efd/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b9a224e70f70ccc638b2c4200a505cdf024efd/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=c8b9a224e70f70ccc638b2c4200a505cdf024efd",
        "patch": "@@ -7,6 +7,7 @@\n #include <util/vector.h>\n \n #include <assert.h>\n+#include <optional>\n \n namespace bech32\n {\n@@ -539,6 +540,7 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n \n     // We attempt error detection with both bech32 and bech32m, and choose the one with the fewest errors\n     // We can't simply use the segwit version, because that may be one of the errors\n+    std::optional<Encoding> error_encoding;\n     for (Encoding encoding : {Encoding::BECH32, Encoding::BECH32M}) {\n         std::vector<int> possible_errors;\n         // Recall that (ExpandHRP(hrp) ++ values) is interpreted as a list of coefficients of a polynomial\n@@ -657,9 +659,13 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n \n         if (error_locations.empty() || (!possible_errors.empty() && possible_errors.size() < error_locations.size())) {\n             error_locations = std::move(possible_errors);\n+            if (!error_locations.empty()) error_encoding = encoding;\n         }\n     }\n-    return \"Invalid checksum\";\n+    return error_encoding == Encoding::BECH32M ? \"Invalid Bech32m checksum\"\n+            : error_encoding == Encoding::BECH32 ? \"Invalid Bech32 checksum\"\n+            : \"Invalid checksum\";\n+\n }\n \n } // namespace bech32"
      },
      {
        "sha": "5d851a97353f9508ed9256c7c4d49ec3e76175c6",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b9a224e70f70ccc638b2c4200a505cdf024efd/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b9a224e70f70ccc638b2c4200a505cdf024efd/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=c8b9a224e70f70ccc638b2c4200a505cdf024efd",
        "patch": "@@ -87,8 +87,8 @@ BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n         {\"Invalid separator position\", {0}},\n         {\"Invalid character or mixed case\", {3, 4, 5, 7}},\n         {\"Invalid character or mixed case\", {3}},\n-        {\"Invalid checksum\", {11}},\n-        {\"Invalid checksum\", {9, 16}},\n+        {\"Invalid Bech32 checksum\", {11}},\n+        {\"Invalid Bech32 checksum\", {9, 16}},\n     };\n     static_assert(std::size(CASES) == std::size(ERRORS), \"Bech32 CASES and ERRORS should have the same length\");\n \n@@ -140,8 +140,8 @@ BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n         {\"Invalid checksum\", {}},\n         {\"Invalid separator position\", {0}},\n         {\"Invalid separator position\", {0}},\n-        {\"Invalid checksum\", {21}},\n-        {\"Invalid checksum\", {13, 32}},\n+        {\"Invalid Bech32m checksum\", {21}},\n+        {\"Invalid Bech32m checksum\", {13, 32}},\n     };\n     static_assert(std::size(CASES) == std::size(ERRORS), \"Bech32m CASES and ERRORS should have the same length\");\n "
      },
      {
        "sha": "fcc49d0a7590defdaf75c6c03c6fcda10433af66",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b9a224e70f70ccc638b2c4200a505cdf024efd/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b9a224e70f70ccc638b2c4200a505cdf024efd/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=c8b9a224e70f70ccc638b2c4200a505cdf024efd",
        "patch": "@@ -67,13 +67,13 @@ def test_validateaddress(self):\n         self.check_invalid(BECH32_INVALID_VERSION, 'Invalid Bech32 address witness version')\n         self.check_invalid(BECH32_INVALID_V0_SIZE, 'Invalid Bech32 v0 address data size')\n         self.check_invalid(BECH32_TOO_LONG, 'Bech32 string too long', list(range(90, 108)))\n-        self.check_invalid(BECH32_ONE_ERROR, 'Invalid checksum', [9])\n-        self.check_invalid(BECH32_TWO_ERRORS, 'Invalid checksum', [22, 43])\n-        self.check_invalid(BECH32_ONE_ERROR_CAPITALS, 'Invalid checksum', [38])\n+        self.check_invalid(BECH32_ONE_ERROR, 'Invalid Bech32 checksum', [9])\n+        self.check_invalid(BECH32_TWO_ERRORS, 'Invalid Bech32 checksum', [22, 43])\n+        self.check_invalid(BECH32_ONE_ERROR_CAPITALS, 'Invalid Bech32 checksum', [38])\n         self.check_invalid(BECH32_NO_SEPARATOR, 'Missing separator')\n         self.check_invalid(BECH32_INVALID_CHAR, 'Invalid Base 32 character', [8])\n-        self.check_invalid(BECH32_MULTISIG_TWO_ERRORS, 'Invalid checksum', [19, 30])\n-        self.check_invalid(BECH32_WRONG_VERSION, 'Invalid checksum', [5])\n+        self.check_invalid(BECH32_MULTISIG_TWO_ERRORS, 'Invalid Bech32 checksum', [19, 30])\n+        self.check_invalid(BECH32_WRONG_VERSION, 'Invalid Bech32 checksum', [5])\n \n         # Valid Bech32\n         self.check_valid(BECH32_VALID)"
      }
    ]
  },
  {
    "sha": "63f7b6977989b93e13c3afd8dfd22b524842b9d7",
    "node_id": "C_kwDOABII59oAKDYzZjdiNjk3Nzk4OWI5M2UxM2MzYWZkOGRmZDIyYjUyNDg0MmI5ZDc",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-22T23:21:25Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-30T00:22:03Z"
      },
      "message": "Update release note for bech32 error detection",
      "tree": {
        "sha": "4e7b5f2e39d44232bb1f833354ad14a7077c21b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e7b5f2e39d44232bb1f833354ad14a7077c21b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63f7b6977989b93e13c3afd8dfd22b524842b9d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f7b6977989b93e13c3afd8dfd22b524842b9d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63f7b6977989b93e13c3afd8dfd22b524842b9d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f7b6977989b93e13c3afd8dfd22b524842b9d7/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8b9a224e70f70ccc638b2c4200a505cdf024efd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b9a224e70f70ccc638b2c4200a505cdf024efd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b9a224e70f70ccc638b2c4200a505cdf024efd"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3cdd0b36af5a272007659f3d2c2714db349d50c7",
        "filename": "doc/release-notes-16807.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63f7b6977989b93e13c3afd8dfd22b524842b9d7/doc/release-notes-16807.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63f7b6977989b93e13c3afd8dfd22b524842b9d7/doc/release-notes-16807.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16807.md?ref=63f7b6977989b93e13c3afd8dfd22b524842b9d7",
        "patch": "@@ -1,6 +1,10 @@\n Updated RPCs\n ------------\n \n-- The `validateaddress` RPC now optionally returns an `error_locations` array, with the indices of\n-invalid characters in the address. For example, this will return the locations of up to two Bech32\n-errors.\n\\ No newline at end of file\n+- The `validateaddress` RPC now returns an `error_locations` array for invalid\n+addresses, with the indices of invalid character locations in the address (if\n+known). For example, this will attempt to locate up to two Bech32 errors, and\n+return their locations if successful. Success and correctness are only guaranteed\n+if fewer than two substitution errors have been made.\n+The error message returned in the `error` field now also returns more specific\n+errors when decoding fails.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "83dc0b6392a99ea99e2d67d6893d715e48340023",
    "node_id": "C_kwDOABII59oAKDgzZGMwYjYzOTJhOTllYTk5ZTJkNjdkNjg5M2Q3MTVlNDgzNDAwMjM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T01:01:50Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-30T00:37:11Z"
      },
      "message": "Replace GF1024 tables and syndrome constants with compile-time generated constexprs.",
      "tree": {
        "sha": "ad893165689ad33e1f4f01c06556a29f2f50ed5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad893165689ad33e1f4f01c06556a29f2f50ed5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83dc0b6392a99ea99e2d67d6893d715e48340023",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83dc0b6392a99ea99e2d67d6893d715e48340023",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83dc0b6392a99ea99e2d67d6893d715e48340023",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83dc0b6392a99ea99e2d67d6893d715e48340023/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63f7b6977989b93e13c3afd8dfd22b524842b9d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f7b6977989b93e13c3afd8dfd22b524842b9d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63f7b6977989b93e13c3afd8dfd22b524842b9d7"
      }
    ],
    "stats": {
      "total": 355,
      "additions": 126,
      "deletions": 229
    },
    "files": [
      {
        "sha": "7019621fd0ea80e9966724ee385887ebb519d69f",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 229,
        "changes": 355,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83dc0b6392a99ea99e2d67d6893d715e48340023/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83dc0b6392a99ea99e2d67d6893d715e48340023/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=83dc0b6392a99ea99e2d67d6893d715e48340023",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <assert.h>\n #include <optional>\n+#include <array>\n \n namespace bech32\n {\n@@ -32,182 +33,89 @@ const int8_t CHARSET_REV[128] = {\n      1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n };\n \n-// We work with the finite field GF(1024) defined as a degree 2 extension of the base field GF(32)\n-// The defining polynomial of the extension is x^2 + 9x + 23\n-// Let (e) be a primitive element of GF(1024), that is, a generator of the field.\n-// Every non-zero element of the field can then be represented as (e)^k for some power k.\n-// The array GF1024_EXP contains all these powers of (e) - GF1024_EXP[k] = (e)^k in GF(1024).\n-// Conversely, GF1024_LOG contains the discrete logarithms of these powers, so\n-// GF1024_LOG[GF1024_EXP[k]] == k\n-// Each element v of GF(1024) is encoded as a 10 bit integer in the following way:\n-// v = v1 || v0 where v0, v1 are 5-bit integers (elements of GF(32)).\n-//\n-// The element (e) is encoded as 9 || 15. Given (v), we compute (e)*(v) by multiplying in the following way:\n-// v0' = 27*v1 + 15*v0\n-// v1' = 6*v1 + 9*v0\n-// e*v = v1' || v0'\n-//\n-// The following sage code can be used to reproduce both _EXP and _LOG arrays\n-// GF1024_LOG = [-1] + [0] * 1023\n-// GF1024_EXP = [1] * 1024\n-// v = 1\n-// for i in range(1, 1023):\n-//     v0 = v & 31\n-//     v1 = v >> 5\n-//     v0n = F.fetch_int(27)*F.fetch_int(v1) + F.fetch_int(15)*F.fetch_int(v0)\n-//     v1n = F.fetch_int(6)*F.fetch_int(v1) + F.fetch_int(9)*F.fetch_int(v0)\n-//     v = v1n.integer_representation() << 5 | v0n.integer_representation()\n-//     GF1024_EXP[i] = v\n-//     GF1024_LOG[v] = i\n-\n-const int16_t GF1024_EXP[] = {\n-    1, 303, 635, 446, 997, 640, 121, 142, 959, 420, 350, 438, 166, 39, 543,\n-    335, 831, 691, 117, 632, 719, 97, 107, 374, 558, 797, 54, 150, 858, 877,\n-    724, 1013, 294, 23, 354, 61, 164, 633, 992, 538, 469, 659, 174, 868, 184,\n-    809, 766, 563, 866, 851, 257, 520, 45, 770, 535, 524, 408, 213, 436, 760,\n-    472, 330, 933, 799, 616, 361, 15, 391, 756, 814, 58, 608, 554, 680, 993,\n-    821, 942, 813, 843, 484, 193, 935, 321, 919, 572, 741, 423, 559, 562,\n-    589, 296, 191, 493, 685, 891, 665, 435, 60, 395, 2, 606, 511, 853, 746,\n-    32, 219, 284, 631, 840, 661, 837, 332, 78, 311, 670, 887, 111, 195, 505,\n-    190, 194, 214, 709, 380, 819, 69, 261, 957, 1018, 161, 739, 588, 7, 708,\n-    83, 328, 507, 736, 317, 899, 47, 348, 1000, 345, 882, 245, 367, 996, 943,\n-    514, 304, 90, 804, 295, 312, 793, 387, 833, 249, 921, 660, 618, 823, 496,\n-    722, 30, 782, 225, 892, 93, 480, 372, 112, 738, 867, 636, 890, 950, 968,\n-    386, 622, 642, 551, 369, 234, 846, 382, 365, 442, 592, 343, 986, 122,\n-    1023, 59, 847, 81, 790, 4, 437, 983, 931, 244, 64, 415, 529, 487, 944,\n-    35, 938, 664, 156, 583, 53, 999, 222, 390, 987, 341, 388, 389, 170, 721,\n-    879, 138, 522, 627, 765, 322, 230, 440, 14, 168, 143, 656, 991, 224, 595,\n-    550, 94, 657, 752, 667, 1005, 451, 734, 744, 638, 292, 585, 157, 872,\n-    590, 601, 827, 774, 930, 475, 571, 33, 500, 871, 969, 173, 21, 828, 450,\n-    1009, 147, 960, 705, 201, 228, 998, 497, 1021, 613, 688, 772, 508, 36,\n-    366, 715, 468, 956, 725, 730, 861, 425, 647, 701, 221, 759, 95, 958, 139,\n-    805, 8, 835, 679, 614, 449, 128, 791, 299, 974, 617, 70, 628, 57, 273,\n-    430, 67, 750, 405, 780, 703, 643, 776, 778, 340, 171, 1022, 276, 308,\n-    495, 243, 644, 460, 857, 28, 336, 286, 41, 695, 448, 431, 364, 149, 43,\n-    233, 63, 762, 902, 181, 240, 501, 584, 434, 275, 1008, 444, 443, 895,\n-    812, 612, 927, 383, 66, 961, 1006, 690, 346, 3, 881, 900, 747, 271, 672,\n-    162, 402, 456, 748, 971, 755, 490, 105, 808, 977, 72, 732, 182, 897, 625,\n-    163, 189, 947, 850, 46, 115, 403, 231, 151, 629, 278, 874, 16, 934, 110,\n-    492, 898, 256, 807, 598, 700, 498, 140, 481, 91, 523, 860, 134, 252, 771,\n-    824, 119, 38, 816, 820, 641, 342, 757, 513, 577, 990, 463, 40, 920, 955,\n-    17, 649, 533, 82, 103, 896, 862, 728, 259, 86, 466, 87, 253, 556, 323,\n-    457, 963, 432, 845, 527, 745, 849, 863, 1015, 888, 488, 567, 727, 132,\n-    674, 764, 109, 669, 6, 1003, 552, 246, 542, 96, 324, 781, 912, 248, 694,\n-    239, 980, 210, 880, 683, 144, 177, 325, 546, 491, 326, 339, 623, 941, 92,\n-    207, 783, 462, 263, 483, 517, 1012, 9, 620, 220, 984, 548, 512, 878, 421,\n-    113, 973, 280, 962, 159, 310, 945, 268, 465, 806, 889, 199, 76, 873, 865,\n-    34, 645, 227, 290, 418, 693, 926, 80, 569, 639, 11, 50, 291, 141, 206,\n-    544, 949, 185, 518, 133, 909, 135, 467, 376, 646, 914, 678, 841, 954,\n-    318, 242, 939, 951, 743, 1017, 976, 359, 167, 264, 100, 241, 218, 51, 12,\n-    758, 368, 453, 309, 192, 648, 826, 553, 473, 101, 478, 673, 397, 1001,\n-    118, 265, 331, 650, 356, 982, 652, 655, 510, 634, 145, 414, 830, 924,\n-    526, 966, 298, 737, 18, 504, 401, 697, 360, 288, 1020, 842, 203, 698,\n-    537, 676, 279, 581, 619, 536, 907, 876, 1019, 398, 152, 1010, 994, 68,\n-    42, 454, 580, 836, 99, 565, 137, 379, 503, 22, 77, 582, 282, 412, 352,\n-    611, 347, 300, 266, 570, 270, 911, 729, 44, 557, 108, 946, 637, 597, 461,\n-    630, 615, 238, 763, 681, 718, 334, 528, 200, 459, 413, 79, 24, 229, 713,\n-    906, 579, 384, 48, 893, 370, 923, 202, 917, 98, 794, 754, 197, 530, 662,\n-    52, 712, 677, 56, 62, 981, 509, 267, 789, 885, 561, 316, 684, 596, 226,\n-    13, 985, 779, 123, 720, 576, 753, 948, 406, 125, 315, 104, 519, 426, 502,\n-    313, 566, 1016, 767, 796, 281, 749, 740, 136, 84, 908, 424, 936, 198,\n-    355, 274, 735, 967, 5, 154, 428, 541, 785, 704, 486, 671, 600, 532, 381,\n-    540, 574, 187, 88, 378, 216, 621, 499, 419, 922, 485, 494, 476, 255, 114,\n-    188, 668, 297, 400, 918, 787, 158, 25, 458, 178, 564, 422, 768, 73, 1011,\n-    717, 575, 404, 547, 196, 829, 237, 394, 301, 37, 65, 176, 106, 89, 85,\n-    675, 979, 534, 803, 995, 363, 593, 120, 417, 452, 26, 699, 822, 223, 169,\n-    416, 235, 609, 773, 211, 607, 208, 302, 852, 965, 603, 357, 761, 247,\n-    817, 539, 250, 232, 272, 129, 568, 848, 624, 396, 710, 525, 183, 686, 10,\n-    285, 856, 307, 811, 160, 972, 55, 441, 289, 723, 305, 373, 351, 153, 733,\n-    409, 506, 975, 838, 573, 970, 988, 913, 471, 205, 337, 49, 594, 777, 549,\n-    815, 277, 27, 916, 333, 353, 844, 800, 146, 751, 186, 375, 769, 358, 392,\n-    883, 474, 788, 602, 74, 130, 329, 212, 155, 131, 102, 687, 293, 870, 742,\n-    726, 427, 217, 834, 904, 29, 127, 869, 407, 338, 832, 470, 482, 810, 399,\n-    439, 393, 604, 929, 682, 447, 714, 251, 455, 875, 319, 477, 464, 521,\n-    258, 377, 937, 489, 792, 172, 314, 327, 124, 20, 531, 953, 591, 886, 320,\n-    696, 71, 859, 578, 175, 587, 707, 663, 283, 179, 795, 989, 702, 940, 371,\n-    692, 689, 555, 903, 410, 651, 75, 429, 818, 362, 894, 515, 31, 545, 666,\n-    706, 952, 864, 269, 254, 349, 711, 802, 716, 784, 1007, 925, 801, 445,\n-    148, 260, 658, 385, 287, 262, 204, 126, 586, 1004, 236, 165, 854, 411,\n-    932, 560, 19, 215, 1002, 775, 653, 928, 901, 964, 884, 798, 839, 786,\n-    433, 610, 116, 855, 180, 479, 910, 1014, 599, 915, 905, 306, 516, 731,\n-    626, 978, 825, 344, 605, 654, 209\n-};\n-// As above, GF1024_EXP contains all elements of GF(1024) except 0\n-static_assert(std::size(GF1024_EXP) == 1023, \"GF1024_EXP length should be 1023\");\n-\n-const int16_t GF1024_LOG[] = {\n-    -1, 0, 99, 363, 198, 726, 462, 132, 297, 495, 825, 528, 561, 693, 231,\n-    66, 396, 429, 594, 990, 924, 264, 627, 33, 660, 759, 792, 858, 330, 891,\n-    165, 957, 104, 259, 518, 208, 280, 776, 416, 13, 426, 333, 618, 339, 641,\n-    52, 388, 140, 666, 852, 529, 560, 678, 213, 26, 832, 681, 309, 70, 194,\n-    97, 35, 682, 341, 203, 777, 358, 312, 617, 125, 307, 931, 379, 765, 875,\n-    951, 515, 628, 112, 659, 525, 196, 432, 134, 717, 781, 438, 440, 740,\n-    780, 151, 408, 487, 169, 239, 293, 467, 21, 672, 622, 557, 571, 881, 433,\n-    704, 376, 779, 22, 643, 460, 398, 116, 172, 503, 751, 389, 1004, 18, 576,\n-    415, 789, 6, 192, 696, 923, 702, 981, 892, 302, 816, 876, 880, 457, 537,\n-    411, 539, 716, 624, 224, 295, 406, 531, 7, 233, 478, 586, 864, 268, 974,\n-    338, 27, 392, 614, 839, 727, 879, 211, 250, 758, 507, 830, 129, 369, 384,\n-    36, 985, 12, 555, 232, 796, 221, 321, 920, 263, 42, 934, 778, 479, 761,\n-    939, 1006, 344, 381, 823, 44, 535, 866, 739, 752, 385, 119, 91, 566, 80,\n-    120, 117, 771, 675, 721, 514, 656, 271, 670, 602, 980, 850, 532, 488,\n-    803, 1022, 475, 801, 878, 57, 121, 991, 742, 888, 559, 105, 497, 291,\n-    215, 795, 236, 167, 692, 520, 272, 661, 229, 391, 814, 340, 184, 798,\n-    984, 773, 650, 473, 345, 558, 548, 326, 202, 145, 465, 810, 471, 158,\n-    813, 908, 412, 441, 964, 750, 401, 50, 915, 437, 975, 126, 979, 491, 556,\n-    577, 636, 685, 510, 963, 638, 367, 815, 310, 723, 349, 323, 857, 394,\n-    606, 505, 713, 630, 938, 106, 826, 332, 978, 599, 834, 521, 530, 248,\n-    883, 32, 153, 90, 754, 592, 304, 635, 775, 804, 1, 150, 836, 1013, 828,\n-    324, 565, 508, 113, 154, 708, 921, 703, 689, 138, 547, 911, 929, 82, 228,\n-    443, 468, 480, 483, 922, 135, 877, 61, 578, 111, 860, 654, 15, 331, 851,\n-    895, 484, 320, 218, 420, 190, 1019, 143, 362, 634, 141, 965, 10, 838,\n-    632, 861, 34, 722, 580, 808, 869, 554, 598, 65, 954, 787, 337, 187, 281,\n-    146, 563, 183, 668, 944, 171, 837, 23, 867, 541, 916, 741, 625, 123, 736,\n-    186, 357, 665, 977, 179, 156, 219, 220, 216, 67, 870, 902, 774, 98, 820,\n-    574, 613, 900, 755, 596, 370, 390, 769, 314, 701, 894, 56, 841, 949, 987,\n-    631, 658, 587, 204, 797, 790, 522, 745, 9, 502, 763, 86, 719, 288, 706,\n-    887, 728, 952, 311, 336, 446, 1002, 348, 96, 58, 199, 11, 901, 230, 833,\n-    188, 352, 351, 973, 3, 906, 335, 301, 266, 244, 791, 564, 619, 909, 371,\n-    444, 760, 657, 328, 647, 490, 425, 913, 511, 439, 540, 283, 40, 897, 849,\n-    60, 570, 872, 257, 749, 912, 572, 1007, 170, 407, 898, 492, 79, 747, 732,\n-    206, 454, 918, 375, 482, 399, 92, 748, 325, 163, 274, 405, 744, 260, 346,\n-    707, 626, 595, 118, 842, 136, 279, 684, 584, 101, 500, 422, 149, 956,\n-    1014, 493, 536, 705, 51, 914, 225, 409, 55, 822, 590, 448, 655, 205, 676,\n-    925, 735, 431, 784, 54, 609, 604, 39, 812, 737, 729, 466, 14, 533, 958,\n-    481, 770, 499, 855, 238, 182, 464, 569, 72, 947, 442, 642, 24, 87, 989,\n-    688, 88, 47, 762, 623, 709, 455, 817, 526, 637, 258, 84, 845, 738, 768,\n-    698, 423, 933, 664, 620, 607, 629, 212, 347, 249, 982, 935, 131, 89, 252,\n-    927, 189, 788, 853, 237, 691, 646, 403, 1010, 734, 253, 874, 807, 903,\n-    1020, 100, 802, 71, 799, 1003, 633, 355, 276, 300, 649, 64, 306, 161,\n-    608, 496, 743, 180, 485, 819, 383, 1016, 226, 308, 393, 648, 107, 19, 37,\n-    585, 2, 175, 645, 247, 527, 5, 419, 181, 317, 327, 519, 542, 289, 567,\n-    430, 579, 950, 582, 994, 1021, 583, 234, 240, 976, 41, 160, 109, 677,\n-    937, 210, 95, 959, 242, 753, 461, 114, 733, 368, 573, 458, 782, 605, 680,\n-    544, 299, 73, 652, 905, 477, 690, 93, 824, 882, 277, 946, 361, 17, 945,\n-    523, 472, 334, 930, 597, 603, 793, 404, 290, 942, 316, 731, 270, 960,\n-    936, 133, 122, 821, 966, 679, 662, 907, 282, 968, 767, 653, 20, 697, 222,\n-    164, 835, 30, 285, 886, 456, 436, 640, 286, 1015, 380, 840, 245, 724,\n-    137, 593, 173, 130, 715, 85, 885, 551, 246, 449, 103, 366, 372, 714, 313,\n-    865, 241, 699, 674, 374, 68, 421, 562, 292, 59, 809, 342, 651, 459, 227,\n-    46, 711, 764, 868, 53, 413, 278, 800, 255, 993, 318, 854, 319, 695, 315,\n-    469, 166, 489, 969, 730, 1001, 757, 873, 686, 197, 303, 919, 155, 673,\n-    940, 712, 25, 999, 63, 863, 972, 967, 785, 152, 296, 512, 402, 377, 45,\n-    899, 829, 354, 77, 69, 856, 417, 811, 953, 124, 418, 75, 794, 162, 414,\n-    1018, 568, 254, 265, 772, 588, 16, 896, 157, 889, 298, 621, 110, 844,\n-    1000, 108, 545, 601, 78, 862, 447, 185, 195, 818, 450, 387, 49, 805, 102,\n-    986, 1005, 827, 329, 28, 932, 410, 287, 435, 451, 962, 517, 48, 174, 43,\n-    893, 884, 261, 251, 516, 395, 910, 611, 29, 501, 223, 476, 364, 144, 871,\n-    998, 687, 928, 115, 453, 513, 176, 94, 168, 667, 955, 353, 434, 382, 400,\n-    139, 365, 996, 343, 948, 890, 1012, 663, 610, 718, 538, 1008, 639, 470,\n-    848, 543, 1011, 859, 671, 756, 83, 427, 159, 746, 669, 589, 971, 524,\n-    356, 995, 904, 256, 201, 988, 62, 397, 81, 720, 917, 209, 549, 943, 486,\n-    76, 148, 207, 509, 644, 386, 700, 534, 177, 550, 961, 926, 546, 428, 284,\n-    127, 294, 8, 269, 359, 506, 445, 997, 806, 591, 725, 178, 262, 846, 373,\n-    831, 504, 305, 843, 553, 378, 1017, 783, 474, 683, 581, 200, 498, 694,\n-    191, 217, 847, 941, 424, 235, 38, 74, 616, 786, 147, 4, 273, 214, 142,\n-    575, 992, 463, 983, 243, 360, 970, 350, 267, 615, 766, 494, 31, 1009,\n-    452, 710, 552, 128, 612, 600, 275, 322, 193\n-};\n-static_assert(std::size(GF1024_LOG) == 1024, \"GF1024_EXP length should be 1024\");\n+/** We work with the finite field GF(1024) defined as a degree 2 extension of the base field GF(32)\n+ * The defining polynomial of the extension is x^2 + 9x + 23.\n+ * Let (e) be a root of this defining polynomial. Then (e) is a primitive element of GF(1024),\n+ * that is, a generator of the field. Every non-zero element of the field can then be represented\n+ * as (e)^k for some power k.\n+ * The array GF1024_EXP contains all these powers of (e) - GF1024_EXP[k] = (e)^k in GF(1024).\n+ * Conversely, GF1024_LOG contains the discrete logarithms of these powers, so\n+ * GF1024_LOG[GF1024_EXP[k]] == k.\n+ * The following function generates the two tables GF1024_EXP and GF1024_LOG as constexprs. */\n+constexpr std::pair<std::array<int16_t, 1023>, std::array<int16_t, 1024>> GenerateGFTables()\n+{\n+    // Build table for GF(32).\n+    // We use these tables to perform arithmetic in GF(32) below, when constructing the\n+    // tables for GF(1024).\n+    std::array<int8_t, 31> GF32_EXP{};\n+    std::array<int8_t, 32> GF32_LOG{};\n+\n+    // fmod encodes the defining polynomial of GF(32) over GF(2), x^5 + x^3 + 1.\n+    // Because coefficients in GF(2) are binary digits, the coefficients are packed as 101001.\n+    const int fmod = 41;\n+\n+    // Elements of GF(32) are encoded as vectors of length 5 over GF(2), that is,\n+    // 5 binary digits. Each element (b_4, b_3, b_2, b_1, b_0) encodes a polynomial\n+    // b_4*x^4 + b_3*x^3 + b_2*x^2 + b_1*x^1 + b_0 (modulo fmod).\n+    // For example, 00001 = 1 is the multiplicative identity.\n+    GF32_EXP[0] = 1;\n+    GF32_LOG[0] = -1;\n+    GF32_LOG[1] = 0;\n+    int v = 1;\n+    for (int i = 1; i < 31; ++i) {\n+        // Multiplication by x is the same as shifting left by 1, as\n+        // every coefficient of the polynomial is moved up one place.\n+        v = v << 1;\n+        // If the polynomial now has an x^5 term, we subtract fmod from it\n+        // to remain working modulo fmod. Subtraction is the same as XOR in characteristic\n+        // 2 fields.\n+        if (v & 32) v ^= fmod;\n+        GF32_EXP[i] = v;\n+        GF32_LOG[v] = i;\n+    }\n+\n+    // Build table for GF(1024)\n+    std::array<int16_t, 1023> GF1024_EXP{};\n+    std::array<int16_t, 1024> GF1024_LOG{};\n+\n+    GF1024_EXP[0] = 1;\n+    GF1024_LOG[0] = -1;\n+    GF1024_LOG[1] = 0;\n+\n+    // Each element v of GF(1024) is encoded as a 10 bit integer in the following way:\n+    // v = v1 || v0 where v0, v1 are 5-bit integers (elements of GF(32)).\n+    // The element (e) is encoded as 9 || 15. Given (v), we\n+    // compute (e)*(v) by multiplying in the following way:\n+    //\n+    // v0' = 27*v1 + 15*v0\n+    // v1' = 6*v1 + 9*v0\n+    // e*v = v1' || v0'\n+    //\n+    // Multiplication in GF(32) is done using the log/exp tables:\n+    // e^x * e^y = e^(x + y) so a * b = EXP[ LOG[a] + LOG [b] ]\n+    // for non-zero a and b.\n+\n+    v = 1;\n+    for (int i = 1; i < 1023; ++i) {\n+        int v0 = v & 31;\n+        int v1 = v >> 5;\n+\n+        int v0n = (v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(27)) % 31) : 0) ^\n+                    (v0 ? GF32_EXP.at((GF32_LOG.at(v0) + GF32_LOG.at(15)) % 31) : 0);\n+        int v1n = (v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(6)) % 31) : 0) ^\n+                    (v0 ? GF32_EXP.at((GF32_LOG.at(v0) + GF32_LOG.at(9)) % 31) : 0);\n+\n+        v = v1n << 5 | v0n;\n+        GF1024_EXP[i] = v;\n+        GF1024_LOG[v] = i;\n+    }\n+\n+    return std::make_pair(GF1024_EXP, GF1024_LOG);\n+}\n+\n+constexpr auto tables = GenerateGFTables();\n+constexpr const std::array<int16_t, 1023>& GF1024_EXP = tables.first;\n+constexpr const std::array<int16_t, 1024>& GF1024_LOG = tables.second;\n \n /* Determine the final constant to use for the specified encoding. */\n uint32_t EncodingConstant(Encoding encoding) {\n@@ -314,69 +222,58 @@ uint32_t PolyMod(const data& v)\n  * codeword, it is a multiple of G(X), so the residue is in fact just E(x) mod G(x). Note that all\n  * of the (e)^j are roots of G(x) by definition, so R((e)^j) = E((e)^j).\n  *\n- * Syndrome returns the three values packed into a 30-bit integer, where each 10 bits is one value.\n+ * Let R(x) = r1*x^5 + r2*x^4 + r3*x^3 + r4*x^2 + r5*x + r6\n+ *\n+ * To compute R((e)^j), we are really computing:\n+ * r1*(e)^(j*5) + r2*(e)^(j*4) + r3*(e)^(j*3) + r4*(e)^(j*2) + r5*(e)^j + r6\n+ *\n+ * Now note that all of the (e)^(j*i) for i in [5..0] are constants and can be precomputed.\n+ * But even more than that, we can consider each coefficient as a bit-string.\n+ * For example, take r5 = (b_5, b_4, b_3, b_2, b_1) written out as 5 bits. Then:\n+ * r5*(e)^j = b_1*(e)^j + b_2*(2*(e)^j) + b_3*(4*(e)^j) + b_4*(8*(e)^j) + b_5*(16*(e)^j)\n+ * where all the (2^i*(e)^j) are constants and can be precomputed.\n+ *\n+ * Then we just add each of these corresponding constants to our final value based on the\n+ * bit values b_i. This is exactly what is done in the Syndrome function below.\n+ */\n+constexpr std::array<uint32_t, 25> GenerateSyndromeConstants() {\n+    std::array<uint32_t, 25> SYNDROME_CONSTS{};\n+    for (int k = 1; k < 6; ++k) {\n+        for (int shift = 0; shift < 5; ++shift) {\n+            int16_t b = GF1024_LOG.at(1 << shift);\n+            int16_t c0 = GF1024_EXP.at((997*k + b) % 1023);\n+            int16_t c1 = GF1024_EXP.at((998*k + b) % 1023);\n+            int16_t c2 = GF1024_EXP.at((999*k + b) % 1023);\n+            uint32_t c = c2 << 20 | c1 << 10 | c0;\n+            int ind = 5*(k-1) + shift;\n+            SYNDROME_CONSTS[ind] = c;\n+        }\n+    }\n+    return SYNDROME_CONSTS;\n+}\n+constexpr const std::array<uint32_t, 25>& SYNDROME_CONSTS = GenerateSyndromeConstants();\n+\n+/**\n+ * Syndrome returns the three values s_997, s_998, and s_999 described above,\n+ * packed into a 30-bit integer, where each group of 10 bits encodes one value.\n  */\n uint32_t Syndrome(const uint32_t residue) {\n-    // Let R(x) = r1*x^5 + r2*x^4 + r3*x^3 + r4*x^2 + r5*x + r6\n     // low is the first 5 bits, corresponding to the r6 in the residue\n     // (the constant term of the polynomial).\n-\n     uint32_t low = residue & 0x1f;\n \n-    // Recall that XOR corresponds to addition in a characteristic 2 field.\n-    //\n-    // To compute R((e)^j), we are really computing:\n-    // r1*(e)^(j*5) + r2*(e)^(j*4) + r3*(e)^(j*3) + r4*(e)^(j*2) + r5*(e)^j + r6\n-    // Now note that all of the (e)^(j*i) for i in [5..0] are constants and can be precomputed\n-    // for efficiency. But even more than that, we can consider each coefficient as a bit-string.\n-    // For example, take r5 = (b_5, b_4, b_3, b_2, b_1) written out as 5 bits. Then:\n-    // r5*(e)^j = b_1*(e)^j + b_2*(2*(e)^j) + b_3*(4*(e)^j) + b_4*(8*(e)^j) + b_5*(16*(e)^j)\n-    // where all the (2^i*(e)^j) are constants and can be precomputed. Then we just add each\n-    // of these corresponding constants to our final value based on the bit values b_i.\n-    // This is exactly what is done below. Note that all three values of s_j for j in (997, 998,\n-    // 999) are computed simultaneously.\n-    //\n     // We begin by setting s_j = low = r6 for all three values of j, because these are unconditional.\n+    uint32_t result = low ^ (low << 10) ^ (low << 20);\n+\n     // Then for each following bit, we add the corresponding precomputed constant if the bit is 1.\n     // For example, 0x31edd3c4 is 1100011110 1101110100 1111000100 when unpacked in groups of 10\n     // bits, corresponding exactly to a^999 || a^998 || a^997 (matching the corresponding values in\n-    // GF1024_EXP above).\n-    //\n-    // The following sage code reproduces these constants:\n-    // for k in range(1, 6):\n-    //     for b in [1,2,4,8,16]:\n-    //         c0 = GF1024_EXP[(997*k + GF1024_LOG[b]) % 1023]\n-    //         c1 = GF1024_EXP[(998*k + GF1024_LOG[b]) % 1023]\n-    //         c2 = GF1024_EXP[(999*k + GF1024_LOG[b]) % 1023]\n-    //         c = c2 << 20 | c1 << 10 | c0\n-    //         print(\"0x%x\" % c)\n-\n-    return low ^ (low << 10) ^ (low << 20) ^\n-        ((residue >> 5) & 1 ? 0x31edd3c4 : 0) ^\n-        ((residue >> 6) & 1 ? 0x335f86a8 : 0) ^\n-        ((residue >> 7) & 1 ? 0x363b8870 : 0) ^\n-        ((residue >> 8) & 1 ? 0x3e6390c9 : 0) ^\n-        ((residue >> 9) & 1 ? 0x2ec72192 : 0) ^\n-        ((residue >> 10) & 1 ? 0x1046f79d : 0) ^\n-        ((residue >> 11) & 1 ? 0x208d4e33 : 0) ^\n-        ((residue >> 12) & 1 ? 0x130ebd6f : 0) ^\n-        ((residue >> 13) & 1 ? 0x2499fade : 0) ^\n-        ((residue >> 14) & 1 ? 0x1b27d4b5 : 0) ^\n-        ((residue >> 15) & 1 ? 0x04be1eb4 : 0) ^\n-        ((residue >> 16) & 1 ? 0x0968b861 : 0) ^\n-        ((residue >> 17) & 1 ? 0x1055f0c2 : 0) ^\n-        ((residue >> 18) & 1 ? 0x20ab4584 : 0) ^\n-        ((residue >> 19) & 1 ? 0x1342af08 : 0) ^\n-        ((residue >> 20) & 1 ? 0x24f1f318 : 0) ^\n-        ((residue >> 21) & 1 ? 0x1be34739 : 0) ^\n-        ((residue >> 22) & 1 ? 0x35562f7b : 0) ^\n-        ((residue >> 23) & 1 ? 0x3a3c5bff : 0) ^\n-        ((residue >> 24) & 1 ? 0x266c96f7 : 0) ^\n-        ((residue >> 25) & 1 ? 0x25c78b65 : 0) ^\n-        ((residue >> 26) & 1 ? 0x1b1f13ea : 0) ^\n-        ((residue >> 27) & 1 ? 0x34baa2f4 : 0) ^\n-        ((residue >> 28) & 1 ? 0x3b61c0e1 : 0) ^\n-        ((residue >> 29) & 1 ? 0x265325c2 : 0);\n+    // GF1024_EXP above). In this way, we compute all three values of s_j for j in (997, 998, 999)\n+    // simultaneously. Recall that XOR corresponds to addition in a characteristic 2 field.\n+    for (int i = 0; i < 25; ++i) {\n+        result ^= ((residue >> (5+i)) & 1 ? SYNDROME_CONSTS.at(i) : 0);\n+    }\n+    return result;\n }\n \n /** Convert to lower case. */"
      }
    ]
  },
  {
    "sha": "0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
    "node_id": "C_kwDOABII59oAKDBmNTNjMmNjNTg4MDcyYjZjM2NlODhjMDA5Y2IzMmRmZTZhMjRkMWM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-29T22:49:06Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-30T00:37:11Z"
      },
      "message": "Simplify encoding of e in GF(1024) tables to (1,0)\n\nThis follows PR 64 of the sipa/bech32 repo.",
      "tree": {
        "sha": "e6095d37edd112c52c535c759aa870df20a91405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6095d37edd112c52c535c759aa870df20a91405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83dc0b6392a99ea99e2d67d6893d715e48340023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83dc0b6392a99ea99e2d67d6893d715e48340023",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83dc0b6392a99ea99e2d67d6893d715e48340023"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "77519d92923368f20a90cae75edf8d2173039291",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
        "patch": "@@ -84,14 +84,16 @@ constexpr std::pair<std::array<int16_t, 1023>, std::array<int16_t, 1024>> Genera\n \n     // Each element v of GF(1024) is encoded as a 10 bit integer in the following way:\n     // v = v1 || v0 where v0, v1 are 5-bit integers (elements of GF(32)).\n-    // The element (e) is encoded as 9 || 15. Given (v), we\n-    // compute (e)*(v) by multiplying in the following way:\n+    // The element (e) is encoded as 1 || 0, to represent 1*(e) + 0. Every other element\n+    // a*(e) + b is represented as a || b (a and b are both GF(32) elements). Given (v),\n+    // we compute (e)*(v) by multiplying in the following way:\n     //\n-    // v0' = 27*v1 + 15*v0\n-    // v1' = 6*v1 + 9*v0\n+    // v0' = 23*v1\n+    // v1' = 9*v1 + v0\n     // e*v = v1' || v0'\n     //\n-    // Multiplication in GF(32) is done using the log/exp tables:\n+    // Where 23, 9 are GF(32) elements encoded as described above. Multiplication in GF(32)\n+    // is done using the log/exp tables:\n     // e^x * e^y = e^(x + y) so a * b = EXP[ LOG[a] + LOG [b] ]\n     // for non-zero a and b.\n \n@@ -100,10 +102,8 @@ constexpr std::pair<std::array<int16_t, 1023>, std::array<int16_t, 1024>> Genera\n         int v0 = v & 31;\n         int v1 = v >> 5;\n \n-        int v0n = (v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(27)) % 31) : 0) ^\n-                    (v0 ? GF32_EXP.at((GF32_LOG.at(v0) + GF32_LOG.at(15)) % 31) : 0);\n-        int v1n = (v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(6)) % 31) : 0) ^\n-                    (v0 ? GF32_EXP.at((GF32_LOG.at(v0) + GF32_LOG.at(9)) % 31) : 0);\n+        int v0n = v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(23)) % 31) : 0;\n+        int v1n = (v1 ? GF32_EXP.at((GF32_LOG.at(v1) + GF32_LOG.at(9)) % 31) : 0) ^ v0;\n \n         v = v1n << 5 | v0n;\n         GF1024_EXP[i] = v;"
      }
    ]
  },
  {
    "sha": "4d166b1e9f988bc4d2e434afff3639875d6df58d",
    "node_id": "C_kwDOABII59oAKDRkMTY2YjFlOWY5ODhiYzRkMmU0MzRhZmZmMzYzOTg3NWQ2ZGY1OGQ",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T02:52:33Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-30T00:37:11Z"
      },
      "message": "Use bounds-checked array lookups in Bech32 error detection code",
      "tree": {
        "sha": "7168d70320990d066f2eb3f9894500fda5b06530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7168d70320990d066f2eb3f9894500fda5b06530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d166b1e9f988bc4d2e434afff3639875d6df58d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d166b1e9f988bc4d2e434afff3639875d6df58d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d166b1e9f988bc4d2e434afff3639875d6df58d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d166b1e9f988bc4d2e434afff3639875d6df58d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f53c2cc588072b6c3ce88c009cb32dfe6a24d1c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f2461382c906877909ee149dac9f2caa9270cf0b",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d166b1e9f988bc4d2e434afff3639875d6df58d/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d166b1e9f988bc4d2e434afff3639875d6df58d/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=4d166b1e9f988bc4d2e434afff3639875d6df58d",
        "patch": "@@ -457,9 +457,9 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n             int s2 = syn >> 20;\n \n             // Get the discrete logs of these values in GF1024 for more efficient computation\n-            int l_s0 = GF1024_LOG[s0];\n-            int l_s1 = GF1024_LOG[s1];\n-            int l_s2 = GF1024_LOG[s2];\n+            int l_s0 = GF1024_LOG.at(s0);\n+            int l_s1 = GF1024_LOG.at(s1);\n+            int l_s2 = GF1024_LOG.at(s2);\n \n             // First, suppose there is only a single error. Then E(x) = e1*x^p1 for some position p1\n             // Then s0 = E((e)^997) = e1*(e)^(997*p1) and s1 = E((e)^998) = e1*(e)^(998*p1)\n@@ -494,15 +494,15 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n                     //    (Because we are working in characteristic 2.)\n                     //          = e2*(e)^(998*p2) ((e)^p2 + (e)^p1)\n                     //\n-                    int s2_s1p1 = s2 ^ (s1 == 0 ? 0 : GF1024_EXP[(l_s1 + p1) % 1023]);\n+                    int s2_s1p1 = s2 ^ (s1 == 0 ? 0 : GF1024_EXP.at((l_s1 + p1) % 1023));\n                     if (s2_s1p1 == 0) continue;\n-                    int l_s2_s1p1 = GF1024_LOG[s2_s1p1];\n+                    int l_s2_s1p1 = GF1024_LOG.at(s2_s1p1);\n \n                     // Similarly, s1 + s0*(e)^p1\n                     //          = e2*(e)^(997*p2) ((e)^p2 + (e)^p1)\n-                    int s1_s0p1 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p1) % 1023]);\n+                    int s1_s0p1 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP.at((l_s0 + p1) % 1023));\n                     if (s1_s0p1 == 0) continue;\n-                    int l_s1_s0p1 = GF1024_LOG[s1_s0p1];\n+                    int l_s1_s0p1 = GF1024_LOG.at(s1_s0p1);\n \n                     // So, putting these together, we can compute the second error position as\n                     // (e)^p2 = (s2 + s1^p1)/(s1 + s0^p1)\n@@ -515,12 +515,12 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n                     // Now we want to compute the error values e1 and e2.\n                     // Similar to above, we compute s1 + s0*(e)^p2\n                     //          = e1*(e)^(997*p1) ((e)^p1 + (e)^p2)\n-                    int s1_s0p2 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p2) % 1023]);\n+                    int s1_s0p2 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP.at((l_s0 + p2) % 1023));\n                     if (s1_s0p2 == 0) continue;\n-                    int l_s1_s0p2 = GF1024_LOG[s1_s0p2];\n+                    int l_s1_s0p2 = GF1024_LOG.at(s1_s0p2);\n \n                     // And compute (the log of) 1/((e)^p1 + (e)^p2))\n-                    int inv_p1_p2 = 1023 - GF1024_LOG[GF1024_EXP[p1] ^ GF1024_EXP[p2]];\n+                    int inv_p1_p2 = 1023 - GF1024_LOG.at(GF1024_EXP.at(p1) ^ GF1024_EXP.at(p2));\n \n                     // Then (s1 + s0*(e)^p1) * (1/((e)^p1 + (e)^p2)))\n                     //         = e2*(e)^(997*p2)"
      }
    ]
  },
  {
    "sha": "1e24b1d385d64892389985afc058c83410c44311",
    "node_id": "C_kwDOABII59oAKDFlMjRiMWQzODVkNjQ4OTIzODk5ODVhZmMwNThjODM0MTBjNDQzMTE",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-23T04:33:46Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-11-30T00:37:11Z"
      },
      "message": "Use std::iota instead of manually pushing range",
      "tree": {
        "sha": "34c3f3d3cfb68af6704668e76642f3a767a1ae56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34c3f3d3cfb68af6704668e76642f3a767a1ae56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e24b1d385d64892389985afc058c83410c44311",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e24b1d385d64892389985afc058c83410c44311",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e24b1d385d64892389985afc058c83410c44311",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e24b1d385d64892389985afc058c83410c44311/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d166b1e9f988bc4d2e434afff3639875d6df58d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d166b1e9f988bc4d2e434afff3639875d6df58d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d166b1e9f988bc4d2e434afff3639875d6df58d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "fae92e4306685fdbc057e9b9d743391007ac6b0b",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e24b1d385d64892389985afc058c83410c44311/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e24b1d385d64892389985afc058c83410c44311/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=1e24b1d385d64892389985afc058c83410c44311",
        "patch": "@@ -6,9 +6,10 @@\n #include <bech32.h>\n #include <util/vector.h>\n \n+#include <array>\n #include <assert.h>\n+#include <numeric>\n #include <optional>\n-#include <array>\n \n namespace bech32\n {\n@@ -282,13 +283,6 @@ inline unsigned char LowerCase(unsigned char c)\n     return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n }\n \n-void push_range(int from, int to, std::vector<int>& vec)\n-{\n-    for (int i = from; i < to; i++) {\n-        vec.push_back(i);\n-    }\n-}\n-\n /** Return indices of invalid characters in a Bech32 string. */\n bool CheckCharacters(const std::string& str, std::vector<int>& errors) {\n     bool lower = false, upper = false;\n@@ -404,7 +398,8 @@ DecodeResult Decode(const std::string& str) {\n /** Find index of an incorrect character in a Bech32 string. */\n std::string LocateErrors(const std::string& str, std::vector<int>& error_locations) {\n     if (str.size() > 90) {\n-        push_range(90, str.size(), error_locations);\n+        error_locations.resize(str.size() - 90);\n+        std::iota(error_locations.begin(), error_locations.end(), 90);\n         return \"Bech32 string too long\";\n     }\n     if (!CheckCharacters(str, error_locations)){"
      }
    ]
  }
]