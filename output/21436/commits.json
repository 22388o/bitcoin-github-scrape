[
  {
    "sha": "e54a411c3268fbbfa9ed41546489538354c0cc08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTRhNDExYzMyNjhmYmJmYTllZDQxNTQ2NDg5NTM4MzU0YzBjYzA4",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-03-14T11:53:08Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-09-02T20:11:23Z"
      },
      "message": "Documentation fixes after #19478 (Remove CTxMempool::mapLinks data structure member)",
      "tree": {
        "sha": "3d402633aed54cc5baaa1527f305987b223602f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d402633aed54cc5baaa1527f305987b223602f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e54a411c3268fbbfa9ed41546489538354c0cc08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54a411c3268fbbfa9ed41546489538354c0cc08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e54a411c3268fbbfa9ed41546489538354c0cc08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54a411c3268fbbfa9ed41546489538354c0cc08/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0bc27a14ceb18bfe3dd9ebdae6bef447c4ec922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bc27a14ceb18bfe3dd9ebdae6bef447c4ec922",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bc27a14ceb18bfe3dd9ebdae6bef447c4ec922"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c76b6c0ea4de4f5f3313f4c62d7bc696667838cc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54a411c3268fbbfa9ed41546489538354c0cc08/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54a411c3268fbbfa9ed41546489538354c0cc08/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e54a411c3268fbbfa9ed41546489538354c0cc08",
        "patch": "@@ -54,9 +54,6 @@ size_t CTxMemPoolEntry::GetTxSize() const\n     return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n }\n \n-// Update the given tx for any in-mempool descendants.\n-// Assumes that CTxMemPool::m_children is correct for the given tx and all\n-// descendants.\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n     CTxMemPoolEntry::Children stageEntries, descendants;\n@@ -119,7 +116,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // Iterate in reverse, so that whenever we are looking at a transaction\n     // we are sure that all in-mempool descendants have already been processed.\n     // This maximizes the benefit of the descendant cache and guarantees that\n-    // CTxMemPool::m_children will be updated, an assumption made in\n+    // CTxMemPoolEntry::m_children will be updated, an assumption made in\n     // UpdateForDescendants.\n     for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n         // calculate children from mapNextTx\n@@ -128,7 +125,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n             continue;\n         }\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n-        // First calculate the children, and update CTxMemPool::m_children to\n+        // First calculate the children, and update CTxMemPoolEntry::m_children to\n         // include them, and update their CTxMemPoolEntry::m_parents to include this tx.\n         // we cache the in-mempool children to avoid duplicate updates\n         {\n@@ -260,8 +257,8 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // updateDescendants should be true whenever we're not recursively\n         // removing a tx and all its descendants, eg when a transaction is\n         // confirmed in a block.\n-        // Here we only update statistics and not data in CTxMemPool::Parents\n-        // and CTxMemPoolEntry::Children (which we need to preserve until we're\n+        // Here we only update statistics and not data in CTxMemPoolEntry::m_parents\n+        // and CTxMemPoolEntry::m_children (which we need to preserve until we're\n         // finished with all operations that need to traverse the mempool).\n         for (txiter removeIt : entriesToRemove) {\n             setEntries setDescendants;"
      },
      {
        "sha": "8a2a32ff328ec64170c01d202df449e85e01bb1e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54a411c3268fbbfa9ed41546489538354c0cc08/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54a411c3268fbbfa9ed41546489538354c0cc08/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e54a411c3268fbbfa9ed41546489538354c0cc08",
        "patch": "@@ -435,12 +435,12 @@ enum class MemPoolRemovalReason {\n  * Usually when a new transaction is added to the mempool, it has no in-mempool\n  * children (because any such children would be an orphan).  So in\n  * addUnchecked(), we:\n- * - update a new entry's setMemPoolParents to include all in-mempool parents\n+ * - update a new entry's CTxMemPoolEntry::m_parents to include all in-mempool parents\n  * - update the new entry's direct parents to include the new tx as a child\n  * - update all ancestors of the transaction to include the new tx's size/fee\n  *\n  * When a transaction is removed from the mempool, we must:\n- * - update all in-mempool parents to not track the tx in setMemPoolChildren\n+ * - update all in-mempool parents to not track the tx in each CTxMemPoolEntry::m_children\n  * - update all ancestors to not include the tx's size/fees in descendant state\n  * - update all in-mempool children to not include it as a parent\n  *\n@@ -607,7 +607,7 @@ class CTxMemPool\n      */\n     void check(CChainState& active_chainstate) const EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    // addUnchecked must updated state for all ancestors of a given transaction,\n+    // addUnchecked must update state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n@@ -677,7 +677,7 @@ class CTxMemPool\n      *  limitDescendantSize = max size of descendants any ancestor can have\n      *  errString = populated with error reason if any limits are hit\n      *  fSearchForParents = whether to search a tx's vin for in-mempool parents, or\n-     *    look up parents from mapLinks. Must be true for entries not in the mempool\n+     *    look up parents from \\link CTxMemPoolEntry::m_parents entry.m_parents \\endlink. Must be true for entries not in the mempool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -803,6 +803,9 @@ class CTxMemPool\n      *  cachedDescendants will be updated with the descendants of the transaction\n      *  being updated, so that future invocations don't need to walk the\n      *  same transaction again, if encountered in another transaction chain.\n+     *\n+     *  @note Assumes that \\link CTxMemPoolEntry::m_children updateIt.m_children \\endlink\n+     *  is correct for the given tx and all descendants.\n      */\n     void UpdateForDescendants(txiter updateIt,\n             cacheMap &cachedDescendants,\n@@ -821,7 +824,7 @@ class CTxMemPool\n     /** Before calling removeUnchecked for a given transaction,\n      *  UpdateForRemoveFromMempool must be called on the entire (dependent) set\n      *  of transactions being removed at the same time.  We use each\n-     *  CTxMemPoolEntry's setMemPoolParents in order to walk ancestors of a\n+     *  \\link CTxMemPoolEntry::m_parents entry.m_parents \\endlink in order to walk ancestors of a\n      *  given transaction that is removed, so we can't remove intermediate\n      *  transactions in a chain before we've updated all the state for the\n      *  removal."
      }
    ]
  }
]