BitcoinPullTester,2014-09-22T01:43:11Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4955_87314c1c5e69035fefa638de8e237e4ce09788e9/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56320931,56320931,
laanwj,2014-09-22T06:51:36Z,"There's quite some undefined behaviour with regard to vectors in the bitcoin core code (indexing into an empty vector, or dereferencing begin() from an empty vector). I sincerely doubt that this creates an exploitable bug, but it's not correct C++. For this reason I added `begin_ptr` and `end_ptr` to serialize.h, the intent is to replace naive `&vchIn.begin()[0]`-like expressions with those.\n\nHo",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56334733,56334733,
laanwj,2014-09-22T15:44:13Z,> I wasn't aware that a std::vector<unsigned char>::iterator could be passed to the std::vector<char> constructor\n\nI've looked it up and this is indeed allowed. You can pass any kind of iterator that produces objects that can be cast to the type of the vector. It basically does a loop with a static_cast (not reinterpret_cast).\n,https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56393108,56393108,
ENikS,2014-09-22T23:06:41Z,"Paraphrasing Murphyâ€™s Law: if something could be exploited it will be exploited.\nJudging from the fact that this code was there from the day one, passes all the build checks, unit tests and is significantly different from the rest of API, makes me think it may be left there as a deliberate attempt at leaving a backdoor into the system. \n\n```\n914: CDataStream(const vector_type& vchIn, int nType",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56457098,56457098,
theuni,2014-09-22T23:51:33Z,"@ENikS In this case, one-past-the-end is.... the end-marker. While dereferencing that is nasty and should indeed be fixed, there's no reason to sound the alarms. It's ""significantly different"" from the rest of the api because its arguments are different. You'll notice that the (int,int) ctor is even more significantly different...\n\nEither way, if you can come up with a unit test that induces fai",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56460812,56460812,
ENikS,2014-09-23T00:13:08Z,"@theuni  Debug build of Microsoft implementation of STL has these checks and boundaries built in. If you run your tests linked with it, all these errors will be apparent. This is what I do in https://github.com/ENikS/bitcoin-dev-msvc\n\nFor more information about this feature of MS STL watch this short video: http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Advanced-STL/C9-Lectures-St",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56462464,56462464,
sipa,2014-09-23T00:27:31Z,"It's a good thing that Microsoft's STL checks this, as it is outside of the spec, so this code needs to be fixed for that reason - no argument about that.\n\nHowever, I'm pretty sure that any reasonable implementation will - in term of actual semantics - have the exact same behaviour using `x.begin() + x.size()` vs `&(x[x.size()])`; both are implemented as a pointer one past the end. It's just tha",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56463378,56463378,
ENikS,2014-09-23T00:38:13Z,>  It's just that for iterators this is defined behavior and for the access operator it is not.\n\n@sipa You are right about access operators and I would add one more offender to the list: x.end()[0] - does not have any meaning in any implementation. As **laanwj** mentioned earlier it is not a proper C++.\n,https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56464076,56464076,
sipa,2014-09-23T00:43:11Z,"It does. It's a reference to the byte one past the end of the vector (or a NULL reference in case of no allocated vector storage). _Accessing_ the reference is clearly invalid, but taking a pointer to it or using it as reference is not.\n\nYou are absolutely correct that this is not valid C++, and should be fixed. But in any sane implementation (i.e. if it doesn't want unnecessary performance impa",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56464376,56464376,
laanwj,2014-09-23T07:43:47Z,"There is no way that this code allowed actual out-of-buffer access, it is well known that MSVC in debug mode does a pedantic bounds check at vch.size()-1 - and thus forbids &vch[vch.size()] and such. This would be valid with an array, as the resulting pointer is only used as end guard and not actually dereferenced. Treating a vector as array is incorrect C++ but not dangerous, as a vector is imple",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56485507,56485507,
theuni,2014-09-23T15:24:29Z,I've reproduced these errors with libstdc++ using debug mode. It looks like a few are legitimate bugs while most are harmless in practice.\n\nI'll PR a change to enable them for travis builds so that they can be discussed and fixed in one place.\n,https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56537440,56537440,
laanwj,2014-09-23T17:08:06Z,"As discussed with @theuni I'm a bit divided about the undefined casting behavior from unsigned char to signed char here (for values >127). We shouldn't be using signed chars for a binary buffer in the first place.\n\nBut anyhow, this is an improvement to what there is now, and I don't think this brings any risks in practice, so ACK.\n",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56554440,56554440,
sipa,2014-09-23T17:51:32Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56561069,56561069,
theuni,2014-09-23T18:03:09Z,"Agreed. I created a few quick test progs trying to create brokenness from this undefined behavior, but everything seemed to work as intended. ACK.\n\n+1 on using unsigned chars instead, but I doubt that will change any time soon.\n",https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56562892,56562892,
