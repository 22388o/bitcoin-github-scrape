[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56320931",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56320931",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56320931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzIwOTMx",
    "user": {
      "login": "BitcoinPullTester",
      "id": 2110907,
      "node_id": "MDQ6VXNlcjIxMTA5MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinPullTester",
      "html_url": "https://github.com/BitcoinPullTester",
      "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
      "following_url": "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
      "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
      "events_url": "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-22T01:43:11Z",
    "updated_at": "2014-09-22T01:43:11Z",
    "author_association": "NONE",
    "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4955_87314c1c5e69035fefa638de8e237e4ce09788e9/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56320931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56334733",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56334733",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56334733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzM0NzMz",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-22T06:51:36Z",
    "updated_at": "2014-09-22T06:51:36Z",
    "author_association": "MEMBER",
    "body": "There's quite some undefined behaviour with regard to vectors in the bitcoin core code (indexing into an empty vector, or dereferencing begin() from an empty vector). I sincerely doubt that this creates an exploitable bug, but it's not correct C++. For this reason I added `begin_ptr` and `end_ptr` to serialize.h, the intent is to replace naive `&vchIn.begin()[0]`-like expressions with those.\n\nHowever - in this case they doesn't seem to be needed. Which is interesting. I wasn't aware that a `std::vector<unsigned char>::iterator` could be passed to the `std::vector<char>` constructor.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56334733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56393108",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56393108",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56393108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzkzMTA4",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-22T15:44:13Z",
    "updated_at": "2014-09-22T15:44:13Z",
    "author_association": "MEMBER",
    "body": "> I wasn't aware that a std::vector<unsigned char>::iterator could be passed to the std::vector<char> constructor\n\nI've looked it up and this is indeed allowed. You can pass any kind of iterator that produces objects that can be cast to the type of the vector. It basically does a loop with a static_cast (not reinterpret_cast).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56393108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56457098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56457098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56457098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDU3MDk4",
    "user": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?u=c7c36e344099f9891c1882c73f85bd15ef09897e&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-22T23:06:41Z",
    "updated_at": "2014-09-22T23:06:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Paraphrasing Murphy\u2019s Law: if something could be exploited it will be exploited.\nJudging from the fact that this code was there from the day one, passes all the build checks, unit tests and is significantly different from the rest of API, makes me think it may be left there as a deliberate attempt at leaving a backdoor into the system. \n\n```\n914: CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n919: CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n924: CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n```\n\nI am not familiar with assembly emitted by GCC, but it certainly looks like something that could be used for malicious purposes. It defensively needs to be fixed and perhaps even investigated if any security was compromised because of this and other cases of vector boundary logic violations.  \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56457098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56460812",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56460812",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56460812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDYwODEy",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-22T23:51:33Z",
    "updated_at": "2014-09-22T23:51:33Z",
    "author_association": "MEMBER",
    "body": "@ENikS In this case, one-past-the-end is.... the end-marker. While dereferencing that is nasty and should indeed be fixed, there's no reason to sound the alarms. It's \"significantly different\" from the rest of the api because its arguments are different. You'll notice that the (int,int) ctor is even more significantly different...\n\nEither way, if you can come up with a unit test that induces failure here, it would be added for sure.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56460812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56462464",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56462464",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56462464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDYyNDY0",
    "user": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?u=c7c36e344099f9891c1882c73f85bd15ef09897e&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T00:13:08Z",
    "updated_at": "2014-09-23T00:14:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@theuni  Debug build of Microsoft implementation of STL has these checks and boundaries built in. If you run your tests linked with it, all these errors will be apparent. This is what I do in https://github.com/ENikS/bitcoin-dev-msvc\n\nFor more information about this feature of MS STL watch this short video: http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Advanced-STL/C9-Lectures-Stephan-T-Lavavej-Advanced-STL-3-of-n \n\nAs for raising the alarm I disagree with you. I see this as huge potential for abuse and would like more attention to these vulnerabilities. I see this as much higher priority compared to any new features. The whole project could be in jeopardy if it could be proven that bitcoin core allows unauthorized access to private data. This is not just a technical issue in my view.\n\nI offered help to set it up as part of automated build and test and I repeating the offer. I have to work at my job so I could not chase you on IRC or any other arbitrary place. If you are serious and would like to discuss this offer I could give you email or phone number so we could communicate.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56462464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56463378",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56463378",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56463378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDYzMzc4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T00:27:31Z",
    "updated_at": "2014-09-23T00:27:31Z",
    "author_association": "MEMBER",
    "body": "It's a good thing that Microsoft's STL checks this, as it is outside of the spec, so this code needs to be fixed for that reason - no argument about that.\n\nHowever, I'm pretty sure that any reasonable implementation will - in term of actual semantics - have the exact same behaviour using `x.begin() + x.size()` vs `&(x[x.size()])`; both are implemented as a pointer one past the end. It's just that for iterators this is defined behavior and for the access operator it is not.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56463378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56464076",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56464076",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56464076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDY0MDc2",
    "user": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?u=c7c36e344099f9891c1882c73f85bd15ef09897e&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T00:38:13Z",
    "updated_at": "2014-09-23T00:38:13Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  It's just that for iterators this is defined behavior and for the access operator it is not.\n\n@sipa You are right about access operators and I would add one more offender to the list: x.end()[0] - does not have any meaning in any implementation. As **laanwj** mentioned earlier it is not a proper C++.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56464076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56464376",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56464376",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56464376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDY0Mzc2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T00:43:11Z",
    "updated_at": "2014-09-23T00:43:39Z",
    "author_association": "MEMBER",
    "body": "It does. It's a reference to the byte one past the end of the vector (or a NULL reference in case of no allocated vector storage). _Accessing_ the reference is clearly invalid, but taking a pointer to it or using it as reference is not.\n\nYou are absolutely correct that this is not valid C++, and should be fixed. But in any sane implementation (i.e. if it doesn't want unnecessary performance impact) I expect it to be perfectly safe.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56464376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56485507",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56485507",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56485507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDg1NTA3",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T07:43:47Z",
    "updated_at": "2014-09-23T07:43:47Z",
    "author_association": "MEMBER",
    "body": "There is no way that this code allowed actual out-of-buffer access, it is well known that MSVC in debug mode does a pedantic bounds check at vch.size()-1 - and thus forbids &vch[vch.size()] and such. This would be valid with an array, as the resulting pointer is only used as end guard and not actually dereferenced. Treating a vector as array is incorrect C++ but not dangerous, as a vector is implemented as array (not guaranteed, but in practice it is for the code that is out there).\n\nAlso we _all_ have to work at our job. This is starting to get old, I'm not sure why you keep repeating it as if it makes you exceptional.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56485507/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56537440",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56537440",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56537440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTM3NDQw",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T15:24:29Z",
    "updated_at": "2014-09-23T15:24:29Z",
    "author_association": "MEMBER",
    "body": "I've reproduced these errors with libstdc++ using debug mode. It looks like a few are legitimate bugs while most are harmless in practice.\n\nI'll PR a change to enable them for travis builds so that they can be discussed and fixed in one place.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56537440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56554440",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56554440",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56554440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTU0NDQw",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T17:08:06Z",
    "updated_at": "2014-09-23T17:08:06Z",
    "author_association": "MEMBER",
    "body": "As discussed with @theuni I'm a bit divided about the undefined casting behavior from unsigned char to signed char here (for values >127). We shouldn't be using signed chars for a binary buffer in the first place.\n\nBut anyhow, this is an improvement to what there is now, and I don't think this brings any risks in practice, so ACK.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56554440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56561069",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56561069",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56561069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTYxMDY5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T17:51:32Z",
    "updated_at": "2014-09-23T17:51:32Z",
    "author_association": "MEMBER",
    "body": "ut ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56561069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56562892",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4955#issuecomment-56562892",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4955",
    "id": 56562892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTYyODky",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-23T18:03:09Z",
    "updated_at": "2014-09-23T18:03:09Z",
    "author_association": "MEMBER",
    "body": "Agreed. I created a few quick test progs trying to create brokenness from this undefined behavior, but everything seemed to work as intended. ACK.\n\n+1 on using unsigned chars instead, but I doubt that will change any time soon.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56562892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]