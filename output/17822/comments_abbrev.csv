fanquake,2019-12-28 22:54:52,"> Each use of unsigned short is for a port value.\n\nThe usage in `src/secp256k1/src/tests.c` is not for a port value, nor in `src/addrdb.cpp`. Also, modifications to subtrees [need to be sent upstream](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#subtrees). \n\nPrevious similar refactors: #8394, #15586.",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569457352,569457352,
ahook,2019-12-28 23:08:07,"Updated the comment in the description and reverted the secp256k1 change.\n\nAlso, props for finding those other related PRs so fast!",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569458061,569458061,
practicalswift,2019-12-29 00:13:44,"Concept ACK: explicit is better - let's get rid of `unsigned short` once and for all :)\n\nThis PR is trivially correct (`s/unsigned short/uint16_t/` in this PR combined with the existing assumption `static_assert(sizeof(short) == 2, ""16-bit short assumed"");` in `src/compat/assumptions.h`) in contrast to the somewhat related PRs linked by @fanquake above.",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569461970,569461970,
DrahtBot,2019-12-29 04:50:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17877](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17877.html) (qt, refactor: Make enums in BitcoinUnits cl",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569474714,569474714,
promag,2019-12-29 15:35:22,"ACK, needs squash.",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569516183,569516183,
practicalswift,2019-12-29 20:51:06,ACK ee71d9584d94c774cdba029f986b1cecd3774b61 modulo squash of the three commits into one :),https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-569540945,569540945,
practicalswift,2020-01-12 20:06:28,ACK c3e3700540d8e2f5b2738b6d0a4e882db9d450a2,https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-573451843,573451843,
hebasto,2020-01-19 10:03:17,"> Please replace `cstdint` with `stdint.h`\n> `cstdint` doesn't require putting the types in global namespace, meaning if you use that header you need to do `std::uint16_t`.\n> \n> Only `stdint.h` promise that the int types will be in global namespace, and these headers _are part of C++ standard_ (see D.5)\n> \n> D.5.3: (latest draft I could find of C++11: http://www.open-std.org/jtc1/sc22/wg",https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-575987559,575987559,
DrahtBot,2020-01-27 17:36:57,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-578863935,578863935,
jonatack,2020-03-16 17:47:17,ACK. @ahook this PR has several ACKS and only needs a rebase; can you revisit?.,https://github.com/bitcoin/bitcoin/pull/17822#issuecomment-599674635,599674635,
practicalswift,2019-12-29 16:31:29,"Nit: Use `#include <cstdint>` throughout this PR. The `#include <stdint.h>` form for including C standard library headers is deprecated (but unlikely to be purged any time soon) :)\n\nGenerally `#include <cfoo>` is preferred over `#include <foo.h>` (deprecated) where `foo.h` is a C standard library header.",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361860385,361860385,src/addrdb.cpp
hebasto,2019-12-29 16:59:58,"s/`std::numeric_limits<uint16_t>::max()`/`UINT16_MAX`/\nRef: https://en.cppreference.com/w/cpp/types/integer\n\nnm",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361861686,361861686,src/serialize.h
hebasto,2019-12-29 17:00:53,"s/`std::numeric_limits<uint16_t>::max()`/`UINT16_MAX`/\nRef: https://en.cppreference.com/w/cpp/types/integer\n\nnm (https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361862264)",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361861738,361861738,src/serialize.h
practicalswift,2019-12-29 17:12:42,"Why? :)  `numeric_limits` is the preferred choice in C++11 code, no?",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361862264,361862264,src/serialize.h
hebasto,2019-12-29 17:15:14,@practicalswift agree.,https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361862373,361862373,src/serialize.h
ahook,2019-12-29 17:21:46,"Sounds good, will make that change. I intentionally used the deprecated version simply because there were 138 instances of stdint.h and only 18 cstdint, but I agree cstdint is the better option. Only downside of cstdint is that we have to tack on std:: to all the uses.",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361862658,361862658,src/addrdb.cpp
ahook,2019-12-29 20:35:00,"Ah neat, I was mistaken, cstdint provides the global-namespace types as well as the std namespace. Just swapping the includes was sufficient.",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r361870831,361870831,src/addrdb.cpp
elichai,2020-01-19 10:07:18,"@practicalswift I disagree.\nIf we want to switch to the non deprecated `<cstdint>` we will need to add something like `using std::uint16_t` as this header doesn't promise injecting the types into global namespace and FWIW the support for C headers is still in C++17 standard and the current draft of C++20 .\nSee https://github.com/bitcoin/bitcoin/pull/17822#pullrequestreview-344990693\n\nUsing",https://github.com/bitcoin/bitcoin/pull/17822#discussion_r368281621,368281621,src/addrdb.cpp
