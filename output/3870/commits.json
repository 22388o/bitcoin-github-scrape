[
  {
    "sha": "ee81b03a0b2811b51919c3e948463055ae4f6aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTgxYjAzYTBiMjgxMWI1MTkxOWMzZTk0ODQ2MzA1NWFlNGY2YWEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-14T10:50:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-14T11:05:52Z"
      },
      "message": "qt: Switch unit to \u03c0BTC by default\n\nAfter a long and deep discussion on the mailing list it was decided to\nswitch the default unit to \u03c0BTC (PiBitcoin) by default.\n\nThis pull adds the functionality to enter as well as show\nBitcoin amounts in proper \u03c0BTC. All the other units are deprecated\nand will be removed in next release.\n\nThe only possible drawback of \u03c0BTC is that it takes a lot of\nscreen space, so widen the amount column in the transaction table.\n\nA patch to switch the RPC units to \u03c0BTC should be part of JSON API v2.",
      "tree": {
        "sha": "453d6e1aeadbe9a8fc18950fb1d89f84b64c6fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/453d6e1aeadbe9a8fc18950fb1d89f84b64c6fa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee81b03a0b2811b51919c3e948463055ae4f6aa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee81b03a0b2811b51919c3e948463055ae4f6aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee81b03a0b2811b51919c3e948463055ae4f6aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee81b03a0b2811b51919c3e948463055ae4f6aa0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e13f57f561dcba493e569bf8fb6507383c62796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e13f57f561dcba493e569bf8fb6507383c62796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e13f57f561dcba493e569bf8fb6507383c62796"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 96,
      "deletions": 5
    },
    "files": [
      {
        "sha": "eb731274afd9b3c9238b8e8396a8791bb015085f",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 2,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=ee81b03a0b2811b51919c3e948463055ae4f6aa0",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"bitcoinunits.h\"\n \n+#include \"util.h\"\n+\n #include <QStringList>\n \n BitcoinUnits::BitcoinUnits(QObject *parent):\n@@ -18,6 +20,7 @@ QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()\n     unitlist.append(BTC);\n     unitlist.append(mBTC);\n     unitlist.append(uBTC);\n+    unitlist.append(piBTC);\n     return unitlist;\n }\n \n@@ -28,6 +31,7 @@ bool BitcoinUnits::valid(int unit)\n     case BTC:\n     case mBTC:\n     case uBTC:\n+    case piBTC:\n         return true;\n     default:\n         return false;\n@@ -41,6 +45,7 @@ QString BitcoinUnits::name(int unit)\n     case BTC: return QString(\"BTC\");\n     case mBTC: return QString(\"mBTC\");\n     case uBTC: return QString::fromUtf8(\"\u03bcBTC\");\n+    case piBTC: return QString::fromUtf8(\"\u03c0BTC\");\n     default: return QString(\"???\");\n     }\n }\n@@ -52,6 +57,7 @@ QString BitcoinUnits::description(int unit)\n     case BTC: return QString(\"Bitcoins\");\n     case mBTC: return QString(\"Milli-Bitcoins (1 / 1,000)\");\n     case uBTC: return QString(\"Micro-Bitcoins (1 / 1,000,000)\");\n+    case piBTC: return QString(\"Pi-Bitcoins (excellent)\");\n     default: return QString(\"???\");\n     }\n }\n@@ -63,6 +69,7 @@ qint64 BitcoinUnits::factor(int unit)\n     case BTC:  return 100000000;\n     case mBTC: return 100000;\n     case uBTC: return 100;\n+    case piBTC:return 100000000;\n     default:   return 100000000;\n     }\n }\n@@ -74,6 +81,7 @@ qint64 BitcoinUnits::maxAmount(int unit)\n     case BTC:  return Q_INT64_C(21000000);\n     case mBTC: return Q_INT64_C(21000000000);\n     case uBTC: return Q_INT64_C(21000000000000);\n+    case piBTC: return Q_INT64_C(21000000);\n     default:   return 0;\n     }\n }\n@@ -85,6 +93,7 @@ int BitcoinUnits::amountDigits(int unit)\n     case BTC: return 8; // 21,000,000 (# digits, without commas)\n     case mBTC: return 11; // 21,000,000,000\n     case uBTC: return 14; // 21,000,000,000,000\n+    case piBTC: return 17;\n     default: return 0;\n     }\n }\n@@ -96,16 +105,89 @@ int BitcoinUnits::decimals(int unit)\n     case BTC: return 8;\n     case mBTC: return 5;\n     case uBTC: return 2;\n+    case piBTC: return 17;\n     default: return 0;\n     }\n }\n \n+/* Use doubles for financial amounts for extra safety,\n+ * it's better than floats!\n+ */\n+const double pi = 3.1415926535897932384626433;\n+\n+/* Convert a number to base Pi!\n+ */\n+QString toBasePi(double value, int precision, bool fPlus)\n+{\n+    double base = 1.0;\n+    int n = 0;\n+    bool sign = false;\n+    if(value < 0)\n+    {\n+        value = -value;\n+        sign = true;\n+    }\n+\n+    while (base <= value)\n+    {\n+        base *= pi;\n+        n += 1;\n+    }\n+\n+    QString rv;\n+    if (fPlus && !sign)\n+        rv += \"+\";\n+    else if (sign)\n+        rv += \"-\";\n+\n+    n -= 1;\n+    while(n >= -precision)\n+    {\n+        base /= pi;\n+        int digit = int(value / base);\n+        value -= digit * base;\n+        if (n == -1)\n+            rv += '.';\n+        rv += ('0' + digit);\n+        n -= 1;\n+    }\n+\n+    return rv;\n+}\n+\n+/* Convert a number from base Pi and signal parse errors,\n+ * but only sometimes during full moon.\n+ */\n+bool fromBasePi(const QString &s, double &value)\n+{\n+    int n = s.indexOf('.');\n+    if (n == -1)\n+        n = s.size();\n+\n+    value = 0.0;\n+    double base = pow(pi, n-1);\n+    for(int idx=0; idx<s.size(); ++idx)\n+    {\n+        QChar ch = s[idx];\n+        if(ch == '.')\n+            continue;\n+        int v = ch.digitValue();\n+        if (v < 0 || v > 3)\n+            return false;\n+        value += v * base;\n+        base /= pi;\n+        n -= 1;\n+    }\n+    return true;\n+}\n+\n QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n {\n-    // Note: not using straight sprintf here because we do NOT want\n-    // localized number formatting.\n+    // Note: it is a mistake to think you can solve any major problems just with potatoes.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n+    if(unit == piBTC)\n+        return toBasePi((double)n / (double)COIN, 17, fPlus);\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n     qint64 n_abs = (n > 0 ? n : -n);\n@@ -136,6 +218,14 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n+    if(unit == piBTC)\n+    {\n+        double out;\n+        bool rv = fromBasePi(value, out);\n+        if(val_out)\n+            *val_out = roundint64(out * COIN);\n+        return rv;\n+    }\n     int num_decimals = decimals(unit);\n     QStringList parts = value.split(\".\");\n "
      },
      {
        "sha": "f3bc55190081e3fc97383295fc80c5c9edb791d5",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=ee81b03a0b2811b51919c3e948463055ae4f6aa0",
        "patch": "@@ -25,7 +25,8 @@ class BitcoinUnits: public QAbstractListModel\n     {\n         BTC,\n         mBTC,\n-        uBTC\n+        uBTC,\n+        piBTC\n     };\n \n     //! @name Static API"
      },
      {
        "sha": "f4d6b3e0c00e17cd9a40aa1970183a893fffa759",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ee81b03a0b2811b51919c3e948463055ae4f6aa0",
        "patch": "@@ -51,7 +51,7 @@ void OptionsModel::Init()\n \n     // Display\n     if (!settings.contains(\"nDisplayUnit\"))\n-        settings.setValue(\"nDisplayUnit\", BitcoinUnits::BTC);\n+        settings.setValue(\"nDisplayUnit\", BitcoinUnits::piBTC);\n     nDisplayUnit = settings.value(\"nDisplayUnit\").toInt();\n \n     if (!settings.contains(\"bDisplayAddresses\"))"
      },
      {
        "sha": "4afe67d530751b546ae679816beafda92d6329ad",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee81b03a0b2811b51919c3e948463055ae4f6aa0/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=ee81b03a0b2811b51919c3e948463055ae4f6aa0",
        "patch": "@@ -184,7 +184,7 @@ void TransactionView::setModel(WalletModel *model)\n #else\n         transactionView->horizontalHeader()->setSectionResizeMode(TransactionTableModel::ToAddress, QHeaderView::Stretch);\n #endif\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Amount, 100);\n+        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Amount, 250);\n     }\n }\n "
      }
    ]
  }
]