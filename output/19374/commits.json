[
  {
    "sha": "072066eb0376b86f4a5787bcf7893218edcfdf0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzIwNjZlYjAzNzZiODZmNGE1Nzg3YmNmNzg5MzIxOGVkY2ZkZjBk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-26T15:09:27Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-27T12:45:21Z"
      },
      "message": "refactor: Replace iterators w/ references in mapOrphanTransactionsByPrev\n\nThis change is required to replace std::map with std::unordered_map for\nmapOrphanTransactions as iterators could be invalidated on rehashing.",
      "tree": {
        "sha": "3d8c129e2e96d34c05425dca0efe176e0f041c07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d8c129e2e96d34c05425dca0efe176e0f041c07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072066eb0376b86f4a5787bcf7893218edcfdf0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl73P2EACgkQQQEIES5+\nqB+dVBAAi6oJ8aIJJv+CSXPf3OwcWpC1YBeJJ8ltqT9iC+zkeTWxT0L5vKEd6zdz\nVARcfNtfBVbfERqGSqwlCUAHuGNgP7XpOzhx38RnctB/ijbAwapDUR9FOFD5U1Xu\n2PVKaAp35oqpzF8IOR61+66D8mZuVmNFRPiYKkfLS8emE1xs9/UJmI9XfWZsT15/\n5J+FHDtqoXdXsNyGik3sQzrvy/zv1Ltb5B6L4GVIJSURWrtVa1yAaUxdfIngypfd\nPYirqTLrD7x2S5l/IFdgn+rDQ5UGvtrtO3gXAuOjdTH5MHjB/Kz2wuLdMq5zH6m6\no1U7vxl9mF2/hRNVfVUM791RA8CZ1AoTfM7Lb77wSy5Q1Vug1FgCHRESFKk/v/2O\nxlOvtq0xOT7JWxYEnJ9PC/JFM1YD3v5V8rWry83XoKBx/J/6y/2MN5BxYo3MNeM9\n9Yogn0fThbbywFJbMmgokpCqZNlhWCpdT+mSj+4JuRTJMYgoBU36u4zcOPUFxhp9\nahULNhwLLsW80jBBwmuN0nzya/k2g7f1pSZjEfTezQ03yErbDz/qBO4pmAmBSFA+\n7VhoD7ai6eDi/F/zICZ8m9jjWfFI3QXcJlLfCYDHmucNJzerIh83bXB+pEFMqcuX\ngqHwX96hdv6VyAfUAK5WCby3vONbYPUWPta3jDvh+bgQmuICEM4=\n=R48g\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d8c129e2e96d34c05425dca0efe176e0f041c07\nparent 205b87d2f6bd01285de50ba742e32e4ab1298b13\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1593184167 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1593261921 +0300\n\nrefactor: Replace iterators w/ references in mapOrphanTransactionsByPrev\n\nThis change is required to replace std::map with std::unordered_map for\nmapOrphanTransactions as iterators could be invalidated on rehashing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072066eb0376b86f4a5787bcf7893218edcfdf0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/072066eb0376b86f4a5787bcf7893218edcfdf0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072066eb0376b86f4a5787bcf7893218edcfdf0d/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "205b87d2f6bd01285de50ba742e32e4ab1298b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/205b87d2f6bd01285de50ba742e32e4ab1298b13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/205b87d2f6bd01285de50ba742e32e4ab1298b13"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 9,
      "deletions": 19
    },
    "files": [
      {
        "sha": "24e1bf105d39771a6e8b0bf3b6c092b4c1f81cc5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072066eb0376b86f4a5787bcf7893218edcfdf0d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072066eb0376b86f4a5787bcf7893218edcfdf0d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=072066eb0376b86f4a5787bcf7893218edcfdf0d",
        "patch": "@@ -222,15 +222,7 @@ namespace {\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n \n-    struct IteratorComparator\n-    {\n-        template<typename I>\n-        bool operator()(const I& a, const I& b) const\n-        {\n-            return &(*a) < &(*b);\n-        }\n-    };\n-    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+    std::map<COutPoint, std::set<std::reference_wrapper<const uint256>>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n \n     std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans); //! For random eviction\n \n@@ -925,7 +917,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n     assert(ret.second);\n     g_orphan_list.push_back(ret.first);\n     for (const CTxIn& txin : tx->vin) {\n-        mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n+        mapOrphanTransactionsByPrev[txin.prevout].insert(hash);\n     }\n \n     AddToCompactExtraTransactions(tx);\n@@ -945,7 +937,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n         auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n             continue;\n-        itPrev->second.erase(it);\n+        itPrev->second.erase(hash);\n         if (itPrev->second.empty())\n             mapOrphanTransactionsByPrev.erase(itPrev);\n     }\n@@ -1209,10 +1201,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n             for (const auto& txin : tx.vin) {\n                 auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n                 if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n-                for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-                    const CTransaction& orphanTx = *(*mi)->second.tx;\n-                    const uint256& orphanHash = orphanTx.GetHash();\n-                    vOrphanErase.push_back(orphanHash);\n+                for (const uint256& hash : itByPrev->second) {\n+                    vOrphanErase.push_back(hash);\n                 }\n             }\n         }\n@@ -1955,8 +1945,8 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n-                    for (const auto& elem : it_by_prev->second) {\n-                        orphan_work_set.insert(elem->first);\n+                    for (const uint256& hash : it_by_prev->second) {\n+                        orphan_work_set.insert(hash);\n                     }\n                 }\n             }\n@@ -2831,8 +2821,8 @@ void ProcessMessage(\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n-                    for (const auto& elem : it_by_prev->second) {\n-                        pfrom.orphan_work_set.insert(elem->first);\n+                    for (const uint256& hash : it_by_prev->second) {\n+                        pfrom.orphan_work_set.insert(hash);\n                     }\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDJmY2QwZDQ1ZjQyOGY3M2JkMWRlOGE3YTQxMWZkMzQyMTZkMmZj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-27T12:45:55Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-29T08:24:01Z"
      },
      "message": "refactor: Make unordered_map type for mapOrphanTransactions\n\nDropped g_orphan_list global.\nTo get the random element from an std::unordered_map the fact is used\nthat internal container hashes are uniformly distributed.",
      "tree": {
        "sha": "a0be02df20ff3448bbfe9ee35d8724612d38e536",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0be02df20ff3448bbfe9ee35d8724612d38e536"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl75pSQACgkQQQEIES5+\nqB93Kw//Xdan3jg2Lacp7fY3IEmJLYdsooQiWINlE8qbTDtUwaAHbsjkpSTSnzDB\n1yFfzeRJpxfDpAlWMtqYHHue6uYWabuipq9Q7BS0wPUzQb6TxQFrTefMPruTBKFU\nQjCBmtGiu2G4CODL3vH+jd/eUu8NCp5pDoyp/YDbYBeq7CZXDhltMQ7iYdzq3Z6V\nUgpkJ+sDcaVd+VHH+fVtNAjA3BCwWWa9fX1NnuQlrgg8SFHngPIojtOAfSU5ieoA\n84JeEQzj0/qU4pbUWg+9+ZPnQb9ivTaSXRJvR96J8C7DOq/B/YVJFhHVEomLvM8V\nzGAPPXnNak9VGvej8vxdixAquDg4icCTuG/rjLf2959i3nmWbHkvLm/nAOtzbVDg\nOvDcrsCcoOvL8gqU73ENN1nOT9HM5lRUR8IgBnKTAHX5u/nG3Ni9xX2USEJPQxUq\n0a9GlsPBFG7pisWAbnPw1uGofx0SNVHHR0OqzAEmrI5cLTPAyBsNp0na3YAt9gxa\nmZcI35IUtFtDMxGLX3R2S7YwQvw0S8p8tZryJLNCoiEcS4/XZeQHDXUeQuffZoPS\nMBcVxOP8rqGD8DKxDinuXBB6ZGuApxU6T8v6j6f0+Ygc1zc0uwBhTN/NtaE9Xxaa\nb8ILYyETx7z+FPhKFGKFPD9IjmIgHP1N+f+8G4oowvpVJ6kJ7No=\n=St6C\n-----END PGP SIGNATURE-----",
        "payload": "tree a0be02df20ff3448bbfe9ee35d8724612d38e536\nparent 072066eb0376b86f4a5787bcf7893218edcfdf0d\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1593261955 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1593419041 +0300\n\nrefactor: Make unordered_map type for mapOrphanTransactions\n\nDropped g_orphan_list global.\nTo get the random element from an std::unordered_map the fact is used\nthat internal container hashes are uniformly distributed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "072066eb0376b86f4a5787bcf7893218edcfdf0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072066eb0376b86f4a5787bcf7893218edcfdf0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/072066eb0376b86f4a5787bcf7893218edcfdf0d"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 22,
      "deletions": 37
    },
    "files": [
      {
        "sha": "abf84c00106adba4250df685a5e9bb32b01575f1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 31,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
        "patch": "@@ -31,6 +31,7 @@\n \n #include <memory>\n #include <typeinfo>\n+#include <unordered_map>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n@@ -139,10 +140,10 @@ struct COrphanTx {\n     CTransactionRef tx;\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n-    size_t list_pos;\n };\n RecursiveMutex g_cs_orphans;\n-std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+using OrphanTxPool = std::unordered_map<uint256, COrphanTx, SaltedTxidHasher>;\n+OrphanTxPool mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n \n@@ -224,8 +225,6 @@ namespace {\n \n     std::map<COutPoint, std::set<std::reference_wrapper<const uint256>>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n \n-    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans); //! For random eviction\n-\n     static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n     static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n } // namespace\n@@ -913,9 +912,8 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n         return false;\n     }\n \n-    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n+    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n-    g_orphan_list.push_back(ret.first);\n     for (const CTxIn& txin : tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(hash);\n     }\n@@ -929,7 +927,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n {\n-    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    const auto it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n     for (const CTxIn& txin : it->second.tx->vin)\n@@ -942,34 +940,26 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n             mapOrphanTransactionsByPrev.erase(itPrev);\n     }\n \n-    size_t old_pos = it->second.list_pos;\n-    assert(g_orphan_list[old_pos] == it);\n-    if (old_pos + 1 != g_orphan_list.size()) {\n-        // Unless we're deleting the last entry in g_orphan_list, move the last\n-        // entry to the position we're deleting.\n-        auto it_last = g_orphan_list.back();\n-        g_orphan_list[old_pos] = it_last;\n-        it_last->second.list_pos = old_pos;\n-    }\n-    g_orphan_list.pop_back();\n-\n     mapOrphanTransactions.erase(it);\n     return 1;\n }\n \n void EraseOrphansFor(NodeId peer)\n {\n     LOCK(g_cs_orphans);\n-    int nErased = 0;\n-    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n-    while (iter != mapOrphanTransactions.end())\n-    {\n-        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n-        if (maybeErase->second.fromPeer == peer)\n-        {\n-            nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n+\n+    std::vector<OrphanTxPool::iterator> erase_candidates;\n+    for (auto it = mapOrphanTransactions.begin(); it != mapOrphanTransactions.end(); ++it) {\n+        if (it->second.fromPeer == peer) {\n+            erase_candidates.push_back(it);\n         }\n     }\n+\n+    int nErased = 0;\n+    for (auto it : erase_candidates) {\n+        nErased += EraseOrphanTx(it->second.tx->GetHash());\n+    }\n+\n     if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n@@ -985,10 +975,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n         // Sweep out expired orphan pool entries:\n         int nErased = 0;\n         int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        auto iter = mapOrphanTransactions.begin();\n         while (iter != mapOrphanTransactions.end())\n         {\n-            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            const auto maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n                 nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n             } else {\n@@ -999,12 +989,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n         nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n         if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n     }\n-    FastRandomContext rng;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n-        size_t randompos = rng.randrange(g_orphan_list.size());\n-        EraseOrphanTx(g_orphan_list[randompos]->first);\n+        EraseOrphanTx(mapOrphanTransactions.begin()->first);\n         ++nEvicted;\n     }\n     return nEvicted;"
      },
      {
        "sha": "0c32b2e6e0caf582b4dbe810cc861c1cac4ae099",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02fcd0d45f428f73bd1de8a7a411fd34216d2fc/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d02fcd0d45f428f73bd1de8a7a411fd34216d2fc",
        "patch": "@@ -21,6 +21,7 @@\n #include <test/util/setup_common.h>\n \n #include <stdint.h>\n+#include <unordered_map>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -52,7 +53,7 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+extern std::unordered_map<uint256, COrphanTx, SaltedTxidHasher> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n static CService ip(uint32_t i)\n {\n@@ -358,12 +359,8 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n static CTransactionRef RandomOrphan()\n {\n-    std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n-    if (it == mapOrphanTransactions.end())\n-        it = mapOrphanTransactions.begin();\n-    return it->second.tx;\n+    return mapOrphanTransactions.begin()->second.tx;\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)"
      }
    ]
  }
]