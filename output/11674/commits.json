[
  {
    "sha": "47bc05c5894e7ff12b2ad7d840357a868c7f145b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JjMDVjNTg5NGU3ZmYxMmIyYWQ3ZDg0MDM1N2E4NjhjN2YxNDVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T09:17:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T09:41:49Z"
      },
      "message": "leveldb: Add filename to corruption errors\n\nWhen a corruption happens, report the filename of the file where corruptions happens.\nThis will aid in diagnosing database corruption issues.\n\nAdds a GetName() to all the environment file classes to make it possible\nto report a filename downstream.",
      "tree": {
        "sha": "ccd7950ad1b63b4839522421208cf0dcc3c92a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccd7950ad1b63b4839522421208cf0dcc3c92a33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47bc05c5894e7ff12b2ad7d840357a868c7f145b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47bc05c5894e7ff12b2ad7d840357a868c7f145b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47bc05c5894e7ff12b2ad7d840357a868c7f145b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47bc05c5894e7ff12b2ad7d840357a868c7f145b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6de3203cdce2d8532f39f9f9428c33b0dd53f623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de3203cdce2d8532f39f9f9428c33b0dd53f623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6de3203cdce2d8532f39f9f9428c33b0dd53f623"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 31,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bc05c5894e7ff12b2ad7d840357a868c7f145b/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=47bc05c5894e7ff12b2ad7d840357a868c7f145b",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  }
]