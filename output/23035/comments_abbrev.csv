DrahtBot,2021-09-19 15:22:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23053](https://github.com/bitcoin/bitcoin/pull/23053) ([fuzz] Use public methods in addrman fuzz tests by jnewbery)\n* [",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-922491047,922491047,
jnewbery,2021-09-19 15:56:54,"Concept ACK, approach NACK. I don't think it makes sense to add this addrman-specific data into the `CAddress` class, which is used by many different components.\n\n> Two ways to expose them are (1) move them from CAddrInfo to CAddress or (2) use CAddrInfo instead of CAddress for the GetAddr_(), GetAddr() and GetAddresses() functions and callers.\n\nI don't think we want to do (2) either. In g",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-922495928,922495928,
jonatack,2021-09-19 16:01:17,Thanks @jnewbery. I agree the two approaches aren't ideal. Will have a look at your suggested approach.,https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-922496560,922496560,
mzumsande,2021-09-20 11:24:30,"> I think the best way to do this is update `CAddrMan::GetAddr()` to return a vector of tuples, `std::vector<std::tuple<CAddress, /* tried */ bool, /* refcount*/ int>>`\n\nA vector of `std::pair` might be sufficient, because `nRefCount==0` means it's in Tried.",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-922841444,922841444,
jonatack,2021-09-20 11:37:01,"> A vector of `std::pair` might be sufficient, because `nRefCount==0` means it's in Tried.\n\nGood point, though I'm not sure we want to depend on that coupling.\n\n(Ideally I'll try to use a struct as it's nicer to work with.)",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-922849038,922849038,
jnewbery,2021-09-20 17:07:43,"> Ideally I'll try to use a struct as it's nicer to work with.\n\nI'm curious why that is. I would have thought that using structured bindings to unpack a returned tuple would be just as easy: https://en.cppreference.com/w/cpp/language/structured_binding#Case_2:_binding_a_tuple-like_type.\n\nAnother possible approach would be to add a new public method `GetAddressesWithRefcounts()` that could ",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923114340,923114340,
jonatack,2021-09-20 17:32:38,Pushed an update that doesn't touch CAddress or CAddrInfo while attempting to be clear and simple.,https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923133482,923133482,
amitiuttarwar,2021-09-20 17:32:56,">> A vector of std::pair might be sufficient, because nRefCount==0 means it's in Tried.\n\n> Good point, though I'm not sure we want to depend on that coupling.\n\nI don't think there would be much logic coupling with a clearly documented function that returns pairs of < `CAddress`, `multiplicity_on_new` > with `0` for the second field indicating that the address is on the tried table. \n\n>",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923133672,923133672,
jonatack,2021-09-20 18:02:44,"Hm, this isn't urgent, so it might be an idea to try the new public method variant based on/built on #22950 to be sure it's compatible.",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923153690,923153690,
MarcoFalke,2021-09-21 07:35:16,Needs rebase?,https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923718525,923718525,
jnewbery,2021-09-21 08:39:53,"> Hm, this isn't urgent, so it might be an idea to try the new public method variant based on/built on #22950 to be sure it's compatible.\n\nAs long as you're just adding a new public method, it's compatible. @amitiuttarwar will need to update the header file to include that public method in the interface class declaration if this gets merged first, but I don't think that's any more/less work th",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923764309,923764309,
jonatack,2021-09-21 12:31:12,"Rebased after merge of #22831.\n\nStructs/classes:  I guess I like the friendly, readable built-in access to members via named methods, and their flexibility and adaptability to changing future requirements, like adding/removing members.\n\n> I'm happy to have a first attempt at implementing my suggestion if that'd be helpful to you.\n\nSGTM! can pull it in. With that alternative, maybe we c",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923939903,923939903,
jnewbery,2021-09-21 13:08:35,"> SGTM! can pull it in.\n\nHere you go: https://github.com/jnewbery/bitcoin/tree/2021-09-getaddrwithrefcount. The first two commits add the new `GetAddrWithRefcount()` method. Let me know what you think!\n\n> With that alternative, maybe we could also remove the std::optional network arg from the existing GetAddr/GetAddresses functions.\n\nGreat idea! I added that as the final commit in the ",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-923971357,923971357,
jonatack,2021-09-21 13:41:12,Thanks! That is helpful. I see that I was misreading the previous suggestion.,https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-924001229,924001229,
DrahtBot,2021-09-23 10:40:04,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-925696199,925696199,
amitiuttarwar,2021-09-24 00:11:03,"I'm uncertain about this concept (adding table & refcount in `getnodeaddresses`), I don't currently have a strong opinion, so am just sharing some thoughts & tradeoffs:\n- From the POV of a user, I can see how this additional information could be interesting. Since the `getnodeaddresses` endpoint is already essentially for super users or clients utilizing addrman, it seems reasonable to add this ",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-926251838,926251838,
jonatack,2021-10-05 11:02:15,"It may also be handy for `getnodeaddresses` to return all addresses, including IsTerrible() ones, along with a boolean field indicating whether the address is terrible or not.  Along with the other feedback here, it may be a good idea for `getnodeaddresses` to have its own GetAddr-like function that is separate from the one used by internal components.",https://github.com/bitcoin/bitcoin/pull/23035#issuecomment-934302975,934302975,
