[
  {
    "sha": "91868e6288abf9d133620b585bc6de793a11e0e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTg2OGU2Mjg4YWJmOWQxMzM2MjBiNTg1YmM2ZGU3OTNhMTFlMGUz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-30T20:00:56Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-05T14:20:00Z"
      },
      "message": "Remove use CValidationInterface in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "19fd82b1cfacf752ea4802b6ae4c0dfda9a94c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19fd82b1cfacf752ea4802b6ae4c0dfda9a94c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91868e6288abf9d133620b585bc6de793a11e0e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91868e6288abf9d133620b585bc6de793a11e0e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91868e6288abf9d133620b585bc6de793a11e0e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91868e6288abf9d133620b585bc6de793a11e0e3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a62db8bf68896397f175e1d7d52b7be5021985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a62db8bf68896397f175e1d7d52b7be5021985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a62db8bf68896397f175e1d7d52b7be5021985"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 107,
      "deletions": 25
    },
    "files": [
      {
        "sha": "8ce718cc50723fc8e1d603d67e7934fcc7553c44",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <policy/fees.h>\n@@ -22,6 +23,7 @@\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n+#include <validationinterface.h>\n \n #include <memory>\n #include <utility>\n@@ -161,6 +163,55 @@ class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n     using UniqueLock::UniqueLock;\n };\n \n+class NotificationsHandlerImpl : public Handler, CValidationInterface\n+{\n+public:\n+    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)\n+        : m_chain(chain), m_notifications(&notifications)\n+    {\n+        RegisterValidationInterface(this);\n+    }\n+    ~NotificationsHandlerImpl() override { disconnect(); }\n+    void disconnect() override\n+    {\n+        if (m_notifications) {\n+            m_notifications = nullptr;\n+            UnregisterValidationInterface(this);\n+        }\n+    }\n+    void TransactionAddedToMempool(const CTransactionRef& tx) override\n+    {\n+        m_notifications->TransactionAddedToMempool(tx);\n+    }\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n+    {\n+        m_notifications->TransactionRemovedFromMempool(tx);\n+    }\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block,\n+        const CBlockIndex* index,\n+        const std::vector<CTransactionRef>& tx_conflicted) override\n+    {\n+        m_notifications->BlockConnected(*block, tx_conflicted);\n+    }\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    {\n+        m_notifications->BlockDisconnected(*block);\n+    }\n+    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n+    void ResendWalletTransactions(int64_t best_block_time, CConnman*) override\n+    {\n+        // `cs_main` is always held when this method is called, so it is safe to\n+        // call `assumeLocked`. This is awkward, and the `assumeLocked` method\n+        // should be able to be removed entirely if `ResendWalletTransactions`\n+        // is replaced by a wallet timer as suggested in\n+        // https://github.com/bitcoin/bitcoin/issues/15619\n+        auto locked_chain = m_chain.assumeLocked();\n+        m_notifications->ResendWalletTransactions(*locked_chain, best_block_time);\n+    }\n+    Chain& m_chain;\n+    Chain::Notifications* m_notifications;\n+};\n+\n class ChainImpl : public Chain\n {\n public:\n@@ -254,6 +305,11 @@ class ChainImpl : public Chain\n     void initWarning(const std::string& message) override { InitWarning(message); }\n     void initError(const std::string& message) override { InitError(message); }\n     void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n+    std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n+    {\n+        return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n+    }\n+    void waitForNotifications() override { SyncWithValidationInterfaceQueue(); }\n };\n \n } // namespace"
      },
      {
        "sha": "72862617b3741117ce8f4cabf92d8197ed3ceade",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -25,6 +25,7 @@ struct FeeCalculation;\n \n namespace interfaces {\n \n+class Handler;\n class Wallet;\n \n //! Interface giving clients (wallet processes, maybe other analysis tools in\n@@ -40,6 +41,12 @@ class Wallet;\n //!   asynchronously\n //!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n //!\n+//! * The isPotentialTip() and waitForNotifications() methods are too low-level\n+//!   and should be replaced with a higher level\n+//!   waitForNotificationsUpTo(block_hash) method that the wallet can call\n+//!   instead\n+//!   (https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266995234).\n+//!\n //! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n //!   with a higher-level broadcastTransaction method\n //!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n@@ -217,6 +224,25 @@ class Chain\n \n     //! Send wallet load notification to the GUI.\n     virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n+\n+    //! Chain notifications.\n+    class Notifications\n+    {\n+    public:\n+        virtual ~Notifications() {}\n+        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n+        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}\n+        virtual void BlockDisconnected(const CBlock& block) {}\n+        virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n+        virtual void ResendWalletTransactions(Lock& locked_chain, int64_t best_block_time) {}\n+    };\n+\n+    //! Register handler for notifications.\n+    virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n+\n+    //! Wait for pending notifications to be handled.\n+    virtual void waitForNotifications() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6a9922b3cd7c2c1e95f5c85cd406ea0c4481c6f9",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -13,12 +13,7 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);\n-    RegisterValidationInterface(&m_wallet);\n+    m_wallet.m_chain_notifications_handler = m_chain->handleNotifications(m_wallet);\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n-\n-WalletTestingSetup::~WalletTestingSetup()\n-{\n-    UnregisterValidationInterface(&m_wallet);\n-}"
      },
      {
        "sha": "edc06a8351ab91f1fc4a87f3f80ada1c27f568e2",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -17,7 +17,6 @@\n  */\n struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n-    ~WalletTestingSetup();\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n     CWallet m_wallet;"
      },
      {
        "sha": "f6acec2d3ef84d147cb1961a471d778b3e01637a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -96,7 +96,7 @@ static void ReleaseWallet(CWallet* wallet)\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n-    UnregisterValidationInterface(wallet);\n+    wallet->m_chain_notifications_handler.reset();\n     delete wallet;\n     // Wallet is now released, notify UnloadWallet, if any.\n     {\n@@ -1243,7 +1243,8 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n     }\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) {\n+    const uint256& block_hash = block.GetHash();\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before\n@@ -1258,19 +1259,19 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n         SyncTransaction(ptx, {} /* block hash */, 0 /* position in block */);\n         TransactionRemovedFromMempool(ptx);\n     }\n-    for (size_t i = 0; i < pblock->vtx.size(); i++) {\n-        SyncTransaction(pblock->vtx[i], pindex->GetBlockHash(), i);\n-        TransactionRemovedFromMempool(pblock->vtx[i]);\n+    for (size_t i = 0; i < block.vtx.size(); i++) {\n+        SyncTransaction(block.vtx[i], block_hash, i);\n+        TransactionRemovedFromMempool(block.vtx[i]);\n     }\n \n-    m_last_block_processed = pindex->GetBlockHash();\n+    m_last_block_processed = block_hash;\n }\n \n-void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+void CWallet::BlockDisconnected(const CBlock& block) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n-    for (const CTransactionRef& ptx : pblock->vtx) {\n+    for (const CTransactionRef& ptx : block.vtx) {\n         SyncTransaction(ptx, {} /* block hash */, 0 /* position in block */);\n     }\n }\n@@ -1297,7 +1298,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n     // ...otherwise put a callback in the validation interface queue and wait\n     // for the queue to drain enough to execute it (indicating we are caught up\n     // at least with the time we entered this function).\n-    SyncWithValidationInterfaceQueue();\n+    chain().waitForNotifications();\n }\n \n \n@@ -2137,7 +2138,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     return result;\n }\n \n-void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman)\n+void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n@@ -2155,8 +2156,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n \n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n-    auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(locked_chain, nBestBlockTime-5*60);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -4385,8 +4385,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n     chain.loadWallet(interfaces::MakeWallet(walletInstance));\n \n-    // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n-    RegisterValidationInterface(walletInstance.get());\n+    // Register with the validation interface. It's ok to do this after rescan since we're still holding locked_chain.\n+    walletInstance->m_chain_notifications_handler = chain.handleNotifications(*walletInstance);\n \n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n "
      },
      {
        "sha": "02f1788ddb6ce00a8613497a5d2b98d220d4561b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91868e6288abf9d133620b585bc6de793a11e0e3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=91868e6288abf9d133620b585bc6de793a11e0e3",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <interfaces/chain.h>\n+#include <interfaces/handler.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <streams.h>\n@@ -637,7 +638,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public CCryptoKeyStore, public CValidationInterface\n+class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notifications\n {\n private:\n     std::atomic<bool> fAbortRescan{false};\n@@ -808,6 +809,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n+    /** Registered interfaces::Chain::Notifications handler. */\n+    std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n+\n     /** Interface for accessing chain state. */\n     interfaces::Chain& chain() const { return m_chain; }\n \n@@ -920,8 +924,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     void LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n+    void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected(const CBlock& block) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n \n     struct ScanResult {\n@@ -942,7 +946,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n     std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n@@ -1220,6 +1224,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Add a KeyOriginInfo to the wallet */\n     bool AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    friend struct WalletTestingSetup;\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTRkOWU5Zjg1ZWFmOWMzYmVjNDg1NTliZDRjYWQzZThhOTMzM2Nh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-31T15:46:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-05T14:20:00Z"
      },
      "message": "Remove use of CRPCTable::appendCommand in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "32ed7d798e1feaa8e1490d403f4d83760cddcd04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32ed7d798e1feaa8e1490d403f4d83760cddcd04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91868e6288abf9d133620b585bc6de793a11e0e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91868e6288abf9d133620b585bc6de793a11e0e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91868e6288abf9d133620b585bc6de793a11e0e3"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 128,
      "deletions": 40
    },
    "files": [
      {
        "sha": "f04d07d49da58672c1a9e0f998b76f7cbb97930c",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -15,12 +15,15 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <protocol.h>\n+#include <rpc/protocol.h>\n+#include <rpc/server.h>\n #include <sync.h>\n #include <threadsafety.h>\n #include <timedata.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <univalue.h>\n #include <util/system.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -212,6 +215,45 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n     Chain::Notifications* m_notifications;\n };\n \n+class RpcHandlerImpl : public Handler\n+{\n+public:\n+    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n+    {\n+        m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n+            if (!m_wrapped_command) return false;\n+            try {\n+                return m_wrapped_command->actor(request, result, last_handler);\n+            } catch (const UniValue& e) {\n+                // If this is not the last handler and a wallet not found\n+                // exception was thrown, return false so the next handler can\n+                // try to handle the request. Otherwise, reraise the exception.\n+                if (!last_handler) {\n+                    const UniValue& code = e[\"code\"];\n+                    if (code.isNum() && code.get_int() == RPC_WALLET_NOT_FOUND) {\n+                        return false;\n+                    }\n+                }\n+                throw;\n+            }\n+        };\n+        ::tableRPC.appendCommand(m_command.name, &m_command);\n+    }\n+\n+    void disconnect() override final\n+    {\n+        if (m_wrapped_command) {\n+            m_wrapped_command = nullptr;\n+            ::tableRPC.removeCommand(m_command.name, &m_command);\n+        }\n+    }\n+\n+    ~RpcHandlerImpl() override { disconnect(); }\n+\n+    CRPCCommand m_command;\n+    const CRPCCommand* m_wrapped_command;\n+};\n+\n class ChainImpl : public Chain\n {\n public:\n@@ -310,8 +352,11 @@ class ChainImpl : public Chain\n         return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n     }\n     void waitForNotifications() override { SyncWithValidationInterfaceQueue(); }\n+    std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) override\n+    {\n+        return MakeUnique<RpcHandlerImpl>(command);\n+    }\n };\n-\n } // namespace\n \n std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }"
      },
      {
        "sha": "0936449e2258694a5bc4ed5e4ee803972dda3828",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -16,6 +16,7 @@\n \n class CBlock;\n class CFeeRate;\n+class CRPCCommand;\n class CScheduler;\n class CValidationState;\n class uint256;\n@@ -243,6 +244,10 @@ class Chain\n \n     //! Wait for pending notifications to be handled.\n     virtual void waitForNotifications() = 0;\n+\n+    //! Register handler for RPC. Command is not copied, so reference\n+    //! needs to remain valid until Handler is disconnected.\n+    virtual std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "97eadac6a9665cedced9dcaf54afe873da3cf438",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -514,7 +514,7 @@ class WalletClientImpl : public ChainClient\n         : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n     {\n     }\n-    void registerRpcs() override { return RegisterWalletRPCCommands(::tableRPC); }\n+    void registerRpcs() override { return RegisterWalletRPCCommands(m_chain, m_rpc_handlers); }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n     bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler); }\n@@ -524,6 +524,7 @@ class WalletClientImpl : public ChainClient\n \n     Chain& m_chain;\n     std::vector<std::string> m_wallet_filenames;\n+    std::vector<std::unique_ptr<Handler>> m_rpc_handlers;\n };\n \n } // namespace"
      },
      {
        "sha": "e803fabcc6d1aec86f4ee8a6506d6c0f52d54657",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 25,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -30,6 +30,7 @@ static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server starte\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler);\n \n struct RPCCommandExecutionInfo\n {\n@@ -173,11 +174,11 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n {\n     std::string strRet;\n     std::string category;\n-    std::set<rpcfn_type> setDone;\n+    std::set<intptr_t> setDone;\n     std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n \n     for (const auto& entry : mapCommands)\n-        vCommands.push_back(make_pair(entry.second->category + entry.first, entry.second));\n+        vCommands.push_back(make_pair(entry.second.front()->category + entry.first, entry.second.front()));\n     sort(vCommands.begin(), vCommands.end());\n \n     JSONRPCRequest jreq(helpreq);\n@@ -193,9 +194,9 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n         jreq.strMethod = strMethod;\n         try\n         {\n-            rpcfn_type pfn = pcmd->actor;\n-            if (setDone.insert(pfn).second)\n-                (*pfn)(jreq);\n+            UniValue unused_result;\n+            if (setDone.insert(pcmd->unique_id).second)\n+                pcmd->actor(jreq, unused_result, true /* last_handler */);\n         }\n         catch (const std::exception& e)\n         {\n@@ -337,32 +338,32 @@ CRPCTable::CRPCTable()\n         const CRPCCommand *pcmd;\n \n         pcmd = &vRPCCommands[vcidx];\n-        mapCommands[pcmd->name] = pcmd;\n+        mapCommands[pcmd->name].push_back(pcmd);\n     }\n }\n \n-const CRPCCommand *CRPCTable::operator[](const std::string &name) const\n-{\n-    std::map<std::string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n-    if (it == mapCommands.end())\n-        return nullptr;\n-    return (*it).second;\n-}\n-\n bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n {\n     if (IsRPCRunning())\n         return false;\n \n-    // don't allow overwriting for now\n-    std::map<std::string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n-    if (it != mapCommands.end())\n-        return false;\n-\n-    mapCommands[name] = pcmd;\n+    mapCommands[name].push_back(pcmd);\n     return true;\n }\n \n+bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)\n+{\n+    auto it = mapCommands.find(name);\n+    if (it != mapCommands.end()) {\n+        auto new_end = std::remove(it->second.begin(), it->second.end(), pcmd);\n+        if (it->second.end() != new_end) {\n+            it->second.erase(new_end, it->second.end());\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n void StartRPC()\n {\n     LogPrint(BCLog::RPC, \"Starting RPC\\n\");\n@@ -543,18 +544,28 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n     }\n \n     // Find method\n-    const CRPCCommand *pcmd = tableRPC[request.strMethod];\n-    if (!pcmd)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n+    auto it = mapCommands.find(request.strMethod);\n+    if (it != mapCommands.end()) {\n+        UniValue result;\n+        for (const auto& command : it->second) {\n+            if (ExecuteCommand(*command, request, result, &command == &it->second.back())) {\n+                return result;\n+            }\n+        }\n+    }\n+    throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n+}\n \n+static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n+{\n     try\n     {\n         RPCCommandExecution execution(request.strMethod);\n         // Execute, convert arguments to array if necessary\n         if (request.params.isObject()) {\n-            return pcmd->actor(transformNamedArguments(request, pcmd->argNames));\n+            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler);\n         } else {\n-            return pcmd->actor(request);\n+            return command.actor(request, result, last_handler);\n         }\n     }\n     catch (const std::exception& e)"
      },
      {
        "sha": "e2a85887ba05c20278895df1f401bebd4d72fda8",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -131,10 +131,31 @@ typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n class CRPCCommand\n {\n public:\n+    //! RPC method handler reading request and assigning result. Should return\n+    //! true if request is fully handled, false if it should be passed on to\n+    //! subsequent handlers.\n+    using Actor = std::function<bool(const JSONRPCRequest& request, UniValue& result, bool last_handler)>;\n+\n+    //! Constructor taking Actor callback supporting multiple handlers.\n+    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)\n+        : category(std::move(category)), name(std::move(name)), actor(std::move(actor)), argNames(std::move(args)),\n+          unique_id(unique_id)\n+    {\n+    }\n+\n+    //! Simplified constructor taking plain rpcfn_type function pointer.\n+    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)\n+        : CRPCCommand(category, name,\n+                      [fn](const JSONRPCRequest& request, UniValue& result, bool) { result = fn(request); return true; },\n+                      {args.begin(), args.end()}, intptr_t(fn))\n+    {\n+    }\n+\n     std::string category;\n     std::string name;\n-    rpcfn_type actor;\n+    Actor actor;\n     std::vector<std::string> argNames;\n+    intptr_t unique_id;\n };\n \n /**\n@@ -143,10 +164,9 @@ class CRPCCommand\n class CRPCTable\n {\n private:\n-    std::map<std::string, const CRPCCommand*> mapCommands;\n+    std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;\n public:\n     CRPCTable();\n-    const CRPCCommand* operator[](const std::string& name) const;\n     std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n \n     /**\n@@ -169,16 +189,15 @@ class CRPCTable\n      *\n      * Returns false if RPC server is already running (dump concurrency protection).\n      *\n-     * Commands cannot be overwritten (returns false).\n-     *\n-     * Commands with different method names but the same callback function will\n+     * Commands with different method names but the same unique_id will\n      * be considered aliases, and only the first registered method name will\n      * show up in the help text command listing. Aliased commands do not have\n      * to have the same behavior. Server and client code can distinguish\n      * between calls based on method name, and aliased commands can also\n      * register different names, types, and numbers of parameters.\n      */\n     bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n+    bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n \n bool IsDeprecatedRPCEnabled(const std::string& method);"
      },
      {
        "sha": "9bb2bf551b33e4fe61a34e1ead6fa619172547ae",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -31,10 +31,9 @@ UniValue CallRPC(std::string args)\n     request.strMethod = strMethod;\n     request.params = RPCConvertValues(strMethod, vArgs);\n     request.fHelp = false;\n-    BOOST_CHECK(tableRPC[strMethod]);\n-    rpcfn_type method = tableRPC[strMethod]->actor;\n+    if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();\n     try {\n-        UniValue result = (*method)(request);\n+        UniValue result = tableRPC.execute(request);\n         return result;\n     }\n     catch (const UniValue& objError) {"
      },
      {
        "sha": "3a197ec0ef4b117cd72c92f7b7d418d67a39cdb8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -4156,8 +4156,8 @@ static const CRPCCommand commands[] =\n };\n // clang-format on\n \n-void RegisterWalletRPCCommands(CRPCTable &t)\n+void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n {\n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+        handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n }"
      },
      {
        "sha": "7cf607ccc72904b7f48bcb528865690fd6a03da5",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -5,7 +5,9 @@\n #ifndef BITCOIN_WALLET_RPCWALLET_H\n #define BITCOIN_WALLET_RPCWALLET_H\n \n+#include <memory>\n #include <string>\n+#include <vector>\n \n class CRPCTable;\n class CWallet;\n@@ -14,7 +16,12 @@ class UniValue;\n struct PartiallySignedTransaction;\n class CTransaction;\n \n-void RegisterWalletRPCCommands(CRPCTable &t);\n+namespace interfaces {\n+class Chain;\n+class Handler;\n+}\n+\n+void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n \n /**\n  * Figures out what wallet, if any, to use for a JSONRPCRequest."
      },
      {
        "sha": "6a051214a9cbd04ab8912b5318e127e54b0e0c9e",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -15,5 +15,5 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     m_wallet.LoadWallet(fFirstRun);\n     m_wallet.m_chain_notifications_handler = m_chain->handleNotifications(m_wallet);\n \n-    RegisterWalletRPCCommands(tableRPC);\n+    m_chain_client->registerRpcs();\n }"
      },
      {
        "sha": "dcfbc55f94bee5d8add4eec18f5dcca3a1ce0a32",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "patch": "@@ -19,6 +19,7 @@ struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, {});\n     CWallet m_wallet;\n };\n "
      }
    ]
  },
  {
    "sha": "b1b2b238928e7be044ad62cf1b222464907ece2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWIyYjIzODkyOGU3YmUwNDRhZDYyY2YxYjIyMjQ2NDkwN2VjZTJj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-07-17T17:04:35Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-05T14:20:00Z"
      },
      "message": "Remove use of CCoinsViewMemPool::GetCoin in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "50767a07bf5bdca1b6b4e2de761e90957febfaf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50767a07bf5bdca1b6b4e2de761e90957febfaf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1b2b238928e7be044ad62cf1b222464907ece2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b2b238928e7be044ad62cf1b222464907ece2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1b2b238928e7be044ad62cf1b222464907ece2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b2b238928e7be044ad62cf1b222464907ece2c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 75,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5131c6819ab249cc68f4a53947415d02280905a6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -154,6 +154,7 @@ BITCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netmessagemaker.h \\\n+  node/coin.h \\\n   node/transaction.h \\\n   noui.h \\\n   optional.h \\\n@@ -262,6 +263,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n+  node/coin.cpp \\\n   node/transaction.cpp \\\n   noui.cpp \\\n   outputtype.cpp \\"
      },
      {
        "sha": "7913c4473e30d14755325349a3b92c0d32cce034",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -9,6 +9,7 @@\n #include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n+#include <node/coin.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -287,6 +288,7 @@ class ChainImpl : public Chain\n         }\n         return true;\n     }\n+    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "b4db9dda15487ee9ca12459c924b88cf74dfbf13",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -19,6 +19,7 @@ class CFeeRate;\n class CRPCCommand;\n class CScheduler;\n class CValidationState;\n+class Coin;\n class uint256;\n enum class RBFTransactionState;\n struct CBlockLocator;\n@@ -168,6 +169,11 @@ class Chain\n         int64_t* time = nullptr,\n         int64_t* max_time = nullptr) = 0;\n \n+    //! Look up unspent output information. Returns coins in the mempool and in\n+    //! the current chain UTXO set. Iterates through all the keys in the map and\n+    //! populates the values.\n+    virtual void findCoins(std::map<COutPoint, Coin>& coins) = 0;\n+\n     //! Estimate fraction of total transactions verified if blocks up to\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;"
      },
      {
        "sha": "bb98e63f3aaf5495da5f6fe258c227a070bd371e",
        "filename": "src/node/coin.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/coin.h>\n+\n+#include <txmempool.h>\n+#include <validation.h>\n+\n+void FindCoins(std::map<COutPoint, Coin>& coins)\n+{\n+    LOCK2(cs_main, ::mempool.cs);\n+    assert(pcoinsTip);\n+    CCoinsViewCache& chain_view = *::pcoinsTip;\n+    CCoinsViewMemPool mempool_view(&chain_view, ::mempool);\n+    for (auto& coin : coins) {\n+        if (!mempool_view.GetCoin(coin.first, coin.second)) {\n+            // Either the coin is not in the CCoinsViewCache or is spent. Clear it.\n+            coin.second.Clear();\n+        }\n+    }\n+}"
      },
      {
        "sha": "eb95b75cfb432a1845a3df6aaa7fb1a6ec6716ca",
        "filename": "src/node/coin.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_COIN_H\n+#define BITCOIN_NODE_COIN_H\n+\n+#include <map>\n+\n+class COutPoint;\n+class Coin;\n+\n+/**\n+ * Look up unspent output information. Returns coins in the mempool and in the\n+ * current chain UTXO set. Iterates through all the keys in the map and\n+ * populates the values.\n+ *\n+ * @param[in,out] coins map to fill\n+ */\n+void FindCoins(std::map<COutPoint, Coin>& coins);\n+\n+#endif // BITCOIN_NODE_COIN_H"
      },
      {
        "sha": "133674029292bc5fdc922cb1d310a2d5f0289b37",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 23,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b2b238928e7be044ad62cf1b222464907ece2c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b2b238928e7be044ad62cf1b222464907ece2c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b1b2b238928e7be044ad62cf1b222464907ece2c",
        "patch": "@@ -11,6 +11,7 @@\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <key_io.h>\n #include <keystore.h>\n #include <merkleblock.h>\n@@ -790,23 +791,20 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(CTransaction(mergedTx));\n }\n \n+// TODO(https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267084237):\n+// This function is called from both wallet and node rpcs\n+// (signrawtransactionwithwallet and signrawtransactionwithkey). It should be\n+// moved to a util file so wallet code doesn't need to link against node code.\n+// Also the dependency on interfaces::Chain should be removed, so\n+// signrawtransactionwithkey doesn't need access to a Chain instance.\n UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n     // Fetch previous transactions (inputs):\n-    CCoinsView viewDummy;\n-    CCoinsViewCache view(&viewDummy);\n-    {\n-        LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = *pcoinsTip;\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n-\n-        for (const CTxIn& txin : mtx.vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n-        }\n-\n-        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : mtx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n+    chain.findCoins(coins);\n \n     // Add previous txouts given in the RPC call:\n     if (!prevTxsUnival.isNull()) {\n@@ -838,10 +836,10 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n             {\n-                const Coin& coin = view.AccessCoin(out);\n-                if (!coin.IsSpent() && coin.out.scriptPubKey != scriptPubKey) {\n+                auto coin = coins.find(out);\n+                if (coin != coins.end() && !coin->second.IsSpent() && coin->second.out.scriptPubKey != scriptPubKey) {\n                     std::string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + ScriptToAsmStr(coin.out.scriptPubKey) + \"\\nvs:\\n\"+\n+                    err = err + ScriptToAsmStr(coin->second.out.scriptPubKey) + \"\\nvs:\\n\"+\n                         ScriptToAsmStr(scriptPubKey);\n                     throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n@@ -852,7 +850,7 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n                     newcoin.out.nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n                 }\n                 newcoin.nHeight = 1;\n-                view.AddCoin(out, std::move(newcoin), true);\n+                coins[out] = std::move(newcoin);\n             }\n \n             // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n@@ -896,15 +894,15 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n     // Sign what we can:\n     for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n         CTxIn& txin = mtx.vin[i];\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-        if (coin.IsSpent()) {\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n             TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n             continue;\n         }\n-        const CScript& prevPubKey = coin.out.scriptPubKey;\n-        const CAmount& amount = coin.out.nValue;\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n \n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin.out);\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n@@ -914,7 +912,7 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n \n         // amount must be specified for valid segwit signature\n         if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin.out.ToString()));\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n         }\n \n         ScriptError serror = SCRIPT_ERR_OK;"
      }
    ]
  },
  {
    "sha": "d358466de15ef29c1d2bccb9aebab360d574d1d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzU4NDY2ZGUxNWVmMjljMWQyYmNjYjlhZWJhYjM2MGQ1NzRkMWQw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-06T21:47:57Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-06T21:47:57Z"
      },
      "message": "Remove remaining wallet accesses to node globals",
      "tree": {
        "sha": "731dd3ff9701381826ca0d0e3598f2de488b812b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/731dd3ff9701381826ca0d0e3598f2de488b812b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d358466de15ef29c1d2bccb9aebab360d574d1d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d358466de15ef29c1d2bccb9aebab360d574d1d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d358466de15ef29c1d2bccb9aebab360d574d1d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d358466de15ef29c1d2bccb9aebab360d574d1d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1b2b238928e7be044ad62cf1b222464907ece2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b2b238928e7be044ad62cf1b222464907ece2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1b2b238928e7be044ad62cf1b222464907ece2c"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 63,
      "deletions": 49
    },
    "files": [
      {
        "sha": "0c765f20921702fdcd283356098cca4ee957b5cc",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -18,6 +18,7 @@\n #include <protocol.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n+#include <shutdown.h>\n #include <sync.h>\n #include <threadsafety.h>\n #include <timedata.h>\n@@ -340,15 +341,23 @@ class ChainImpl : public Chain\n     {\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n+    CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n+    CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }\n+    CFeeRate relayDustFee() override { return ::dustRelayFee; }\n     CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n+    bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }\n     void initError(const std::string& message) override { InitError(message); }\n     void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n+    void showProgress(const std::string& title, int progress, bool resume_possible) override\n+    {\n+        ::uiInterface.ShowProgress(title, progress, resume_possible);\n+    }\n     std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n     {\n         return MakeUnique<NotificationsHandlerImpl>(*this, notifications);"
      },
      {
        "sha": "a9b05f27fc5248a2269c71b7562874b4858d0a22",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -202,6 +202,15 @@ class Chain\n     //! Mempool minimum fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n \n+    //! Relay current minimum fee (from -minrelaytxfee and -incrementalrelayfee settings).\n+    virtual CFeeRate relayMinFee() = 0;\n+\n+    //! Relay incremental fee setting (-incrementalrelayfee), reflecting cost of relay.\n+    virtual CFeeRate relayIncrementalFee() = 0;\n+\n+    //! Relay dust fee setting (-dustrelayfee), reflecting lowest rate it's economical to spend.\n+    virtual CFeeRate relayDustFee() = 0;\n+\n     //! Node max tx fee setting (-maxtxfee).\n     //! This could be replaced by a per-wallet max fee, as proposed at\n     //! https://github.com/bitcoin/bitcoin/issues/15355\n@@ -214,9 +223,12 @@ class Chain\n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n \n-    // Check if in IBD.\n+    //! Check if in IBD.\n     virtual bool isInitialBlockDownload() = 0;\n \n+    //! Check if shutdown requested.\n+    virtual bool shutdownRequested() = 0;\n+\n     //! Get adjusted time.\n     virtual int64_t getAdjustedTime() = 0;\n \n@@ -232,6 +244,9 @@ class Chain\n     //! Send wallet load notification to the GUI.\n     virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n \n+    //! Send progress indicator.\n+    virtual void showProgress(const std::string& title, int progress, bool resume_possible) = 0;\n+\n     //! Chain notifications.\n     class Notifications\n     {"
      },
      {
        "sha": "60173b29acb927040c1122f2bc2d984fc306ee5d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -47,8 +47,6 @@ class PendingWalletTxImpl : public PendingWalletTx\n \n     const CTransaction& get() override { return *m_tx; }\n \n-    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_tx); }\n-\n     bool commit(WalletValueMap value_map,\n         WalletOrderForm order_form,\n         std::string& reject_reason) override\n@@ -99,12 +97,8 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n //! Construct wallet tx status struct.\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for mapBlockIndex below. Removed in upcoming commit.\n-\n     WalletTxStatus result;\n-    auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n-    CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n-    result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max());\n+    result.block_height = locked_chain.getBlockHeight(wtx.hashBlock).get_value_or(std::numeric_limits<int>::max());\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity(locked_chain);\n     result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;"
      },
      {
        "sha": "cabc455b1f461a7064b824c174b74ea031b62faf",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -292,9 +292,6 @@ class PendingWalletTx\n     //! Get transaction data.\n     virtual const CTransaction& get() = 0;\n \n-    //! Get virtual transaction size.\n-    virtual int64_t getVirtualSize() = 0;\n-\n     //! Send pending transaction and commit to wallet.\n     virtual bool commit(WalletValueMap value_map,\n         WalletOrderForm order_form,"
      },
      {
        "sha": "2694d6780041f4e1cc3a5c3161b3a8208376aa7b",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -29,7 +29,7 @@ std::unique_ptr<interfaces::PendingWalletTx>& WalletModelTransaction::getWtx()\n \n unsigned int WalletModelTransaction::getTransactionSize()\n {\n-    return wtx ? wtx->getVirtualSize() : 0;\n+    return wtx ? GetVirtualTransactionSize(wtx->get()) : 0;\n }\n \n CAmount WalletModelTransaction::getTransactionFee() const"
      },
      {
        "sha": "ef7f3be728ac4447bd93ab18ac101a91752983d5",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -123,16 +123,17 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n     // fee that our node may not be aware of.\n+    CFeeRate nodeIncrementalRelayFee = wallet->chain().relayIncrementalFee();\n     CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n-    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n-        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    if (nodeIncrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = nodeIncrementalRelayFee;\n     }\n \n     if (total_fee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n         if (total_fee < minTotalFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n             return Result::INVALID_PARAMETER;\n         }\n         CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n@@ -159,9 +160,10 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (new_fee > maxTxFee) {\n+     const CAmount max_tx_fee = wallet->chain().maxTxFee();\n+     if (new_fee > max_tx_fee) {\n          errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                               FormatMoney(new_fee), FormatMoney(maxTxFee)));\n+                               FormatMoney(new_fee), FormatMoney(max_tx_fee)));\n          return Result::WALLET_ERROR;\n      }\n "
      },
      {
        "sha": "560c86a70afb3be9e6f9bba5ff490c4dbc6d89d5",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -22,16 +22,17 @@ CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinC\n {\n     CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n-    if (fee_needed > maxTxFee) {\n-        fee_needed = maxTxFee;\n+    const CAmount max_tx_fee = wallet.chain().maxTxFee();\n+    if (fee_needed > max_tx_fee) {\n+        fee_needed = max_tx_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n     }\n     return fee_needed;\n }\n \n CFeeRate GetRequiredFeeRate(const CWallet& wallet)\n {\n-    return std::max(wallet.m_min_fee, ::minRelayTxFee);\n+    return std::max(wallet.m_min_fee, wallet.chain().relayMinFee());\n }\n \n CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n@@ -96,6 +97,6 @@ CFeeRate GetDiscardRate(const CWallet& wallet)\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n     discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee\n-    discard_rate = std::max(discard_rate, ::dustRelayFee);\n+    discard_rate = std::max(discard_rate, wallet.chain().relayDustFee());\n     return discard_rate;\n }"
      },
      {
        "sha": "76a7eaa6811bdaf9c1d09480085c44ac69634981",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -153,7 +153,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n     LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n \n-    uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n+    chain.initMessage(_(\"Verifying wallet(s)...\"));\n \n     // Parameter interaction code should have thrown an error if -salvagewallet\n     // was enabled with more than wallet file, so the wallet_files size check"
      },
      {
        "sha": "6c3b5a49dc4a06da2f0917c443f09602e915a2b9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -595,11 +595,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n         // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n-        uiInterface.ShowProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n+        pwallet->chain().showProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n         std::vector<std::tuple<CKey, int64_t, bool, std::string>> keys;\n         std::vector<std::pair<CScript, int64_t>> scripts;\n         while (file.good()) {\n-            uiInterface.ShowProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n+            pwallet->chain().showProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n             std::string line;\n             std::getline(file, line);\n             if (line.empty() || line[0] == '#')\n@@ -637,13 +637,13 @@ UniValue importwallet(const JSONRPCRequest& request)\n         file.close();\n         // We now know whether we are importing private keys, so we can error if private keys are disabled\n         if (keys.size() > 0 && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-            uiInterface.ShowProgress(\"\", 100, false); // hide progress dialog in GUI\n+            pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled when private keys are disabled\");\n         }\n         double total = (double)(keys.size() + scripts.size());\n         double progress = 0;\n         for (const auto& key_tuple : keys) {\n-            uiInterface.ShowProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n             const CKey& key = std::get<0>(key_tuple);\n             int64_t time = std::get<1>(key_tuple);\n             bool has_label = std::get<2>(key_tuple);\n@@ -668,7 +668,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             progress++;\n         }\n         for (const auto& script_pair : scripts) {\n-            uiInterface.ShowProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n             const CScript& script = script_pair.first;\n             int64_t time = script_pair.second;\n             CScriptID id(script);\n@@ -687,10 +687,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n             }\n             progress++;\n         }\n-        uiInterface.ShowProgress(\"\", 100, false); // hide progress dialog in GUI\n+        pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n         pwallet->UpdateTimeFirstKey(nTimeBegin);\n     }\n-    uiInterface.ShowProgress(\"\", 100, false); // hide progress dialog in GUI\n+    pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n     RescanWallet(*pwallet, reserver, nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n "
      },
      {
        "sha": "fa7604b69524ae642e57bece2cb30895108307c5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -2367,8 +2367,8 @@ static UniValue settxfee(const JSONRPCRequest& request)\n     CFeeRate tx_fee_rate(nAmount, 1000);\n     if (tx_fee_rate == 0) {\n         // automatic selection\n-    } else if (tx_fee_rate < ::minRelayTxFee) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than min relay tx fee (%s)\", ::minRelayTxFee.ToString()));\n+    } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than min relay tx fee (%s)\", pwallet->chain().relayMinFee().ToString()));\n     } else if (tx_fee_rate < pwallet->m_min_fee) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than wallet min fee (%s)\", pwallet->m_min_fee.ToString()));\n     }"
      },
      {
        "sha": "7b7ad35f55e34077e7f367a2aba4470ab486b53c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -1791,7 +1791,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n         }\n         double progress_current = progress_begin;\n-        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+        while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n             if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n@@ -1853,7 +1853,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n         if (block_height && fAbortRescan) {\n             WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n             result.status = ScanResult::USER_ABORT;\n-        } else if (block_height && ShutdownRequested()) {\n+        } else if (block_height && chain().shutdownRequested()) {\n             WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);\n             result.status = ScanResult::USER_ABORT;\n         }\n@@ -2310,7 +2310,6 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n-    AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n \n     vCoins.clear();\n@@ -2420,7 +2419,6 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n \n std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Chain::Lock& locked_chain) const\n {\n-    AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n@@ -2692,13 +2690,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n-static bool IsCurrentForAntiFeeSniping(interfaces::Chain::Lock& locked_chain)\n+static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)\n {\n-    if (IsInitialBlockDownload()) {\n+    if (chain.isInitialBlockDownload()) {\n         return false;\n     }\n     constexpr int64_t MAX_ANTI_FEE_SNIPING_TIP_AGE = 8 * 60 * 60; // in seconds\n-    if (chainActive.Tip()->GetBlockTime() < (GetTime() - MAX_ANTI_FEE_SNIPING_TIP_AGE)) {\n+    if (locked_chain.getBlockTime(*locked_chain.getHeight()) < (GetTime() - MAX_ANTI_FEE_SNIPING_TIP_AGE)) {\n         return false;\n     }\n     return true;\n@@ -2708,7 +2706,7 @@ static bool IsCurrentForAntiFeeSniping(interfaces::Chain::Lock& locked_chain)\n  * Return a height-based locktime for new transactions (uses the height of the\n  * current chain tip unless we are not synced with the current chain\n  */\n-static uint32_t GetLocktimeForNewTransaction(interfaces::Chain::Lock& locked_chain)\n+static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)\n {\n     uint32_t const height = locked_chain.getHeight().get_value_or(-1);\n     uint32_t locktime;\n@@ -2732,7 +2730,7 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain::Lock& locked_cha\n     // enough, that fee sniping isn't a problem yet, but by implementing a fix\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n-    if (IsCurrentForAntiFeeSniping(locked_chain)) {\n+    if (IsCurrentForAntiFeeSniping(chain, locked_chain)) {\n         locktime = height;\n \n         // Secondly occasionally randomly pick a nLockTime even further back, so\n@@ -2806,7 +2804,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     CMutableTransaction txNew;\n \n-    txNew.nLockTime = GetLocktimeForNewTransaction(locked_chain);\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), locked_chain);\n \n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;\n@@ -2902,7 +2900,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // Include the fee cost for outputs. Note this is only used for BnB right now\n                     coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n \n-                    if (IsDust(txout, ::dustRelayFee))\n+                    if (IsDust(txout, chain().relayDustFee()))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -3003,7 +3001,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n-                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n+                if (nFeeNeeded < chain().relayMinFee().GetFee(nBytes))\n                 {\n                     strFailReason = _(\"Transaction too large for fee policy\");\n                     return false;\n@@ -4281,9 +4279,9 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n                               _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n-        if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {\n+        if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n             chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n             return nullptr;\n         }\n     }\n@@ -4446,8 +4444,6 @@ int CMerkleTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n     if (hashUnset())\n         return 0;\n \n-    AssertLockHeld(cs_main);\n-\n     return locked_chain.getBlockDepth(hashBlock) * (nIndex == -1 ? -1 : 1);\n }\n "
      },
      {
        "sha": "7473172a211a87f27f2fc91f35a58861008d08bd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358466de15ef29c1d2bccb9aebab360d574d1d0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d358466de15ef29c1d2bccb9aebab360d574d1d0",
        "patch": "@@ -506,7 +506,7 @@ class CWalletTx : public CMerkleTx\n     CAmount GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const;\n     CAmount GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true) const;\n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n-    // annotation \"EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\". The\n+    // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The\n     // annotation \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid\n     // having to resolve the issue of member access into incomplete type CWallet.\n     CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;"
      }
    ]
  }
]