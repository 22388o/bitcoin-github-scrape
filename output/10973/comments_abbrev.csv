jonasschnelli,2017-08-03T09:41:03Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-319920836,319920836,
ryanofsky,2017-09-01T17:05:20Z,"@jnewbery, the change to stop deduping link arguments is in Makefile.am [here](https://github.com/bitcoin/bitcoin/commit/7bfb409ad9e27df07108c17d63c3efc5f4bfb6a6)\n",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-326633872,326633872,
ryanofsky,2018-04-10T13:38:56Z,"@skeees, this PR might be relevant to the `GetDepthInMainChain` discussion from https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111. This PR replaces direct accesses to `chainActive` and `cs_main`  global variables in the wallet with calls to a `Chain::Lock` interface:\n\nhttps://github.com/bitcoin/bitcoin/blob/6efd1524caf008641c4ffc15e8a2b2c2586c6d0f/src/interfaces/chain.h#L42-",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269,380101269,
JeremyRubin,2018-04-10T18:24:42Z,"It might also be decent to use a RW-lock -- I'd imagine *all* of the wallet code is only in read mode, and a good chunk of other code can run in read mode as well.",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380200698,380200698,
ryanofsky,2018-04-11T15:22:37Z,"> It might also be decent to use a RW-lock -- I'd imagine all of the wallet code is only in read mode,\n\nThis is a really interesting suggestion and observation. The benefit of using a RW lock would be that multiple wallets could hold the lock at same time, though I think we'd also need to prevent the wallets from blocking the `SingleThreadedSchedulerClient` notification thread to really take a",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380492056,380492056,
jamesob,2018-05-03T14:47:21Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-386321291,386321291,
ryanofsky,2018-05-03T15:13:14Z,"> Needs rebase.\n\nRebased ce6af5dd9e70db2dfcd5d5f1ae10494b5129ff88 -> af8f8087699c30ec83995c54112955253bcaba84 ([pr/wipc-sep.50](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.50) -> [pr/wipc-sep.51](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.51)) due to conflicts with #12639 and #12507.\n\n(Reminders to rebase this are welcome, but not needed. Since this conflicts wit",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-386330307,386330307,
jnewbery,2018-05-07T20:33:54Z,"Overall, I think this is a huge improvement. It gives us a well-defined interface between the wallet and node and is a huge step towards separating out the different subsystems. Whether or not we decide to go ahead with process separation, this is very useful work.\n\nThe wallet<->node interface could certainly be tidied up in future PRs. Since this is an internal interface, that shouldn't stop ",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-387196649,387196649,
sipa,2018-05-17T19:40:55Z,Concept ACK on a better defined interface between wallet and node.,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389985196,389985196,
promag,2018-05-17T19:45:24Z,"Concept ACK, makes sense!",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389986573,389986573,
jonasschnelli,2018-05-17T19:48:26Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389987377,389987377,
MarcoFalke,2018-05-17T20:02:28Z,"In case there is agreement to do this change, there should be a plan on how to review and merge without wasting a lot of (re)review and rebase resources. Even though the commits make little sense on their own without the large picture, I assume it would help to split out the mechanical-diff part from the actual code-review part?\nAlso, it should probably wait for the current conflicting high-prio",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389991468,389991468,
jnewbery,2018-05-17T20:02:48Z,"Great. 3 concept ACKs!\n\nSplitting first 6 commits into their own PR could make this easier to review: https://botbot.me/freenode/bitcoin-core-dev/2018-05-17/?msg=100176268&page=4\n\n@ryanofsky - let me know if I can help with that.",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389991584,389991584,
ryanofsky,2018-05-18T20:10:00Z,Rebased b13720a225f50f9fa96b7e10fda181b1d2770cb8 -> a71c5b8e73d991f28945280c8812fa0c2898a710 ([pr/wipc-sep.55](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.55) -> [pr/wipc-sep.56](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.56)) due to conflict with #10740,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-390318779,390318779,
jimpo,2018-05-18T21:22:45Z,"Wow, this is heroic. Big Concept ACK. But I would like to see it split into multiple PRs.\n\nAlso, I'll note that the lowercasing of method names on the interfaces conflicts with the [Coding Style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style).",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-390335988,390335988,
MarcoFalke,2018-05-22T19:50:34Z,"utACK f06a3cc9190bcac4f6109bf9a9f03f92edf1d1fd (not the head commit)\n\nWill leave <strike>two</strike> one questions for clarification.",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-391118517,391118517,
jnewbery,2018-06-20T18:16:40Z,@ryanofsky - are you still maintaining this? What are your thoughts about splitting the first 6 commits into a separate PR (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-389991584)?,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-398847006,398847006,
ryanofsky,2018-06-26T17:24:52Z,"Rebased a71c5b8e73d991f28945280c8812fa0c2898a710 -> 7e906d547788bddb9a7993d98e310c65cf6b6604 ([pr/wipc-sep.56](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.56\n) -> [pr/wipc-sep.57](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.57)) due to conflict with #13063\nRebased 7e906d547788bddb9a7993d98e310c65cf6b6604 -> f8bdedf99707d9317cb600a99ccdece63bea33f8 ([pr/wipc-sep.57](ht",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-400396804,400396804,
ken2812221,2018-09-05T07:14:50Z,"- [x] [`d487d953c9` Add skeleton chain and client classes](https://github.com/bitcoin/bitcoin/pull/10973/commits/d487d953c9a10b11693ba8af62f5b54a77ec7686)\n- [x] [`6f47f5be74` Pass chain and client variables where needed](https://github.com/bitcoin/bitcoin/pull/10973/commits/6f47f5be74453f3e4bbf91f57d6ac1925db68e46)\n- [x] [`dff1e12e92` Remove direct node->wallet calls in init.cpp](https://githu",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-418624533,418624533,
laanwj,2018-09-13T15:37:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-421051664,421051664,
practicalswift,2018-09-21T07:53:26Z,This PR does not seem to compile when rebased on `master` :-),https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-423447036,423447036,
jamesob,2018-10-10T07:29:51Z,Should this be closed now that https://github.com/bitcoin/bitcoin/pull/14437 has been opened?,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-428467415,428467415,
ryanofsky,2018-10-10T07:45:45Z,"> Should this be closed now that #14437 has been opened?\n\nI updated the PR description above to make it obvious that review comments be added in #14437. I'd still like to keep updating this PR though. I think for example being able to see the complete [`Chain`](https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep/src/interfaces/chain.h) interface added here is useful for understanding the dir",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-428471793,428471793,
jnewbery,2018-10-11T05:42:49Z,"@practicalswift - see note in PR description:\n\n> This PR is based on #14437, so review comments for initial commits should be posted there.\n\nI recommend you don't spend time reviewing this until #14437 is merged.",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-428827811,428827811,
practicalswift,2018-10-11T07:22:43Z,"@jnewbery Oh, thanks!",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-428848760,428848760,
meshcollider,2018-11-11T11:16:58Z,"Concept ACK, will this PR be rebased and ready for review now #14437 has been merged, or will you make another smaller PR for the next steps and leave this just to track overall?",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-437661545,437661545,
DrahtBot,2019-03-06T19:07:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-470235111,470235111,
MarcoFalke,2019-03-06T19:16:50Z,utACK 6898f53760,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-470238555,470238555,
ryanofsky,2019-03-12T01:02:32Z,"Updated 244edfe470d8b6a4c449649952bb2130e0d10bd5 -> 591434b72c3b0ec218fbe30969ae5a819ca224c4 ([pr/wipc-sep.98](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.98) -> [pr/wipc-sep.99](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.99), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wipc-sep.98..pr/wipc-sep.99)) to fix travis error with old boost.\n",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-471803386,471803386,
MarcoFalke,2019-03-12T16:15:33Z,"nit: In commit  591434b\n\nCould also update the TODO comment for `GetAvailableCredit` and remove the `cs_main` from it?",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-472069472,472069472,
ryanofsky,2019-03-12T18:01:08Z,"Updated 591434b72c3b0ec218fbe30969ae5a819ca224c4 -> b7c78217ca7aa861b58fddcfdb82a09ca56f8023 ([pr/wipc-sep.99](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.99) -> [pr/wipc-sep.100](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.100), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wipc-sep.99..pr/wipc-sep.100)) with Marco's GetAvailableCredit suggestion from https:/",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-472115030,472115030,
promag,2019-03-17T22:58:28Z,"> Instead, I'd like to just add a new `libbitcoin_node.a` library, analogous to the existing `libbitcoin_wallet.a` library, and move symbol definitions like `cs_main` `pcoinsTip` `chainActive` there that wallet and gui code shouldn't access.\n\nNice!",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-473724089,473724089,
jnewbery,2019-03-20T20:27:20Z,"utACK d358466de15ef29c1d2bccb9aebab360d574d1d0. This version is much clearer to me than the previous branch. Thank you!\n\nI still think that handling multiple clients is an unnecessary complication for this PR. The `RPC_WALLET_NOT_FOUND` catch/throw in the `RpcHandlerImpl` actor and the `last_handler` bool passed to the actor seem particularly strange to me.\n\nThat said, I've reviewed the co",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-475014521,475014521,
meshcollider,2019-03-21T07:57:09Z,I think this is ready 🎉 ,https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-475138852,475138852,
ryanofsky,2019-03-22T17:07:31Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#pullrequestreview-213000398\n\n> Instead, I'd like to just add a new libbitcoin_node.a library, analogous to the existing libbitcoin_wallet.a library, and move symbol definitions like cs_main pcoinsTip chainActive there that wallet and gui code shouldn't access\n\nTo follow up, I did this in #15638 and #15639, only using the existing `libbitcoi",https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-475701656,475701656,
JeremyRubin,2017-09-05T21:32:14Z,Maybe `block && !ReadBlockFromDisk`,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r137120520,137120520,src/ipc/local/bitcoind.cpp
JeremyRubin,2017-09-05T21:50:38Z,"Maybe this would be a good place to use boost::option to simplify this API -- would be much clearer to get back `Some(Height) | Nothing` or `Some(Depth) | Nothing` than having semantics around if the invalid return is -1 or 0.\n",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r137124189,137124189,src/ipc/interfaces.h
JeremyRubin,2017-09-05T23:02:42Z,"Can we have something that wraps both ipc_chain and ipc_clients for passing in? Is there a reason to have them separate? I don't want to add another useless class, it just seems they are always passed around together & are created together.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r137136281,137136281,src/init.cpp
JeremyRubin,2017-09-05T23:22:48Z,nit: semantics of name LockedState is maybe a bit clearer as ChainStateLock?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r137139176,137139176,src/ipc/interfaces.h
ryanofsky,2017-09-21T16:53:36Z,"> Can we have something that wraps both ipc_chain and ipc_clients for passing in? Is there a reason to have them separate? I don't want to add another useless class, it just seems they are always passed around together & are created together.\n\nGood suggestion. I wrapped these in the InitInterfaces struct which simplified some things.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r140299282,140299282,src/init.cpp
ryanofsky,2017-09-21T16:53:51Z,"> nit: semantics of name LockedState is maybe a bit clearer as ChainStateLock?\n\nThis is now named Chain::Lock, which hopefully is clearer. I kind of wanted to chose a shorter name because locked_chain variables so commonly used in [https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep/src/wallet/wallet.cpp](wallet.cpp) after this.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r140299357,140299357,src/ipc/interfaces.h
ryanofsky,2017-09-21T16:54:02Z,"> Maybe block && !ReadBlockFromDisk\n\nThanks, done in f98a13387d8c409153748996a64eb6051cfecfec",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r140299394,140299394,src/ipc/local/bitcoind.cpp
ryanofsky,2017-09-22T21:47:15Z,"> Maybe this would be a good place to use boost::option to simplify this API -- would be much clearer to get back Some(Height) | Nothing or Some(Depth) | Nothing than having semantics around if the invalid return is -1 or 0.\n\nDone in 4b2ae4761c9e75e2d39ce46671d4562b28e54e6f. I'm not sure if it is a simplification, but it is definitely safer and probably clearer. Leaving it unsquashed for now, ",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r140603814,140603814,src/ipc/interfaces.h
MarcoFalke,2018-04-09T15:54:33Z,"```\nInclude(s) from src/interfaces/chain.h duplicated in src/interfaces/chain.cpp:\n#include <memory>\nInclude(s) from src/interfaces/wallet.h duplicated in src/interfaces/wallet.cpp:\n#include <memory>\n#include <string>\n#include <utility>\n#include <vector>\nInclude(s) from src/wallet/init.h duplicated in src/wallet/init.cpp:\n#include <walletinitinterface.h>\n^---- failure generated",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r180142594,180142594,src/interfaces/chain.cpp
ryanofsky,2018-04-10T10:45:55Z,"> failure generated from contrib/devtools/lint-includes.sh\n\nI'll try to submit a pr to simplify the developer guideline and this lint check. This check is incompatible with the [iwyu tool](https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md), and I think ""include what you use"" is a better and simpler policy than ""include what you use most of the time but no",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r180375204,180375204,src/interfaces/chain.cpp
MarcoFalke,2018-04-10T13:07:17Z,"@ryanofsky Agree with you here. I merged that pull request because it had some acks and no nack, afaics. I am happy to ACK a pull that adjusts the developer guidelines and removes the lint check.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r180412881,180412881,src/interfaces/chain.cpp
jamesob,2018-04-30T18:58:14Z,"(in https://github.com/bitcoin/bitcoin/pull/10973/commits/a0279e40745dfb8692e92c5cac0848a25b37f930)\n\nI think we'll need to make an equivalent change in `addressbooktests.cpp` as well.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185077211,185077211,src/qt/test/wallettests.cpp
jamesob,2018-05-01T20:09:37Z,"(in https://github.com/bitcoin/bitcoin/pull/10973/commits/ba1e24b718d1db1c2ed06f88087e28994248b1c7)\n\nShould be ""1 for following block ...""?",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185320554,185320554,src/interfaces/chain.h
jamesob,2018-05-01T20:12:15Z,"(in https://github.com/bitcoin/bitcoin/pull/10973/commits/ba1e24b718d1db1c2ed06f88087e28994248b1c7)\n\n> optinal",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185321164,185321164,src/interfaces/chain.h
jamesob,2018-05-01T20:40:33Z,Are the `UniValue` calls necessary?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185327873,185327873,src/wallet/rpcwallet.cpp
jamesob,2018-05-03T13:28:04Z,"(in https://github.com/bitcoin/bitcoin/pull/10973/commits/7f087936082170018b189f19adb7d789f4c2969d)\n> transac<tions",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185796547,185796547,src/wallet/wallet.cpp
jamesob,2018-05-03T17:56:10Z,"Any reason you don't just want to do \n```c++\nfor (const CRPCCommand* command : m_commands) { ... }\n```\nhere?",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185886977,185886977,src/interfaces/chain.cpp
jamesob,2018-05-03T20:58:18Z,"Seems like these instances of straight pass-through to some underlying function may be good cases for templated argument forwarding. I don't feel strongly either way, but maybe worth considering to cut down on interface duplication?\n\nI guess if the end objective is to come up with a cross-process interface, duplicating these arguments in the meantime is actually what we want to do.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185934311,185934311,src/interfaces/chain.cpp
jnewbery,2018-05-04T15:52:41Z,"I don't understand why this is in `parseParameters()`, rather than a constructor for `NodeImpl`",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186125434,186125434,src/interfaces/node.cpp
jnewbery,2018-05-04T16:15:54Z,I think the `(Scheduler is ignored if client is out-of-process).` comment can be saved for #10102,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186132129,186132129,src/interfaces/chain.h
jnewbery,2018-05-04T18:16:35Z,"I find the name of this class quite confusing, since it's not actually a lock. How about renaming this to `LockedChain` and renaming `LockingStateImpl` to `ChainLockImpl`?",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186174271,186174271,src/interfaces/chain.h
jnewbery,2018-05-04T18:18:55Z,"There are 4 of these `Temporary. Removed in upcoming lock cleanup` comments. Sorry if I missed the answer to this, but what's the plan for removing them?",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186174854,186174854,src/wallet/rpcwallet.cpp
jnewbery,2018-05-04T18:35:39Z,s/optinal/optional,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186179348,186179348,src/interfaces/chain.h
jnewbery,2018-05-04T18:42:13Z,Comment is wrong. Needs to be updated to `Should be called with non-zero block_hash and posInBlock...`,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186181022,186181022,src/wallet/wallet.h
jnewbery,2018-05-04T18:43:37Z,Remove comment,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186181393,186181393,src/wallet/wallet.h
jnewbery,2018-05-04T20:46:48Z,"The ""missing block hash"" and ""missing block time"" outputs here are a change in behaviour (and could potentially break clients using the dumpwallet API)",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186216539,186216539,src/wallet/rpcdump.cpp
jnewbery,2018-05-04T21:26:29Z,Can you use `locked_chain->getDepth(blockId)` here?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186225645,186225645,src/wallet/rpcwallet.cpp
ryanofsky,2018-05-05T21:28:20Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185320554\n\n> Should be ""1 for following block ...""?\n\n Thanks, fixed in 7f2f5cc41aa05e6f2ad7bfa74173c11136b67cf9",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272603,186272603,src/interfaces/chain.h
ryanofsky,2018-05-05T21:28:34Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185321164\n\n> optinal\n\nFixed in 6bb7af9b1e41f833389f6d4d7ceb02b947dbfd07",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272611,186272611,src/interfaces/chain.h
ryanofsky,2018-05-05T21:28:42Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186179348\n\n> s/optinal/optional\n\nFixed in 6bb7af9b1e41f833389f6d4d7ceb02b947dbfd07",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272614,186272614,src/interfaces/chain.h
ryanofsky,2018-05-05T21:28:53Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185077211\n\n> I think we'll need to make an equivalent change in addressbooktests.cpp as well.\n\nThanks, moved this change to the right commit (it was in c917d976c039c3bb79bb4a1b7aff72117b066597 instead of a0279e40745dfb8692e92c5cac0848a25b37f930)",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272619,186272619,src/qt/test/wallettests.cpp
ryanofsky,2018-05-05T21:30:24Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185327873\n\n> Are the UniValue calls necessary?\n\nGood catch, removed in 63dd8abdf822026a4a93356546ff1220e6c00e9e",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272655,186272655,src/wallet/rpcwallet.cpp
ryanofsky,2018-05-05T21:30:40Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185796547\n\n> transac<tions\n\nFixed in 62f15da95f7abb4ae0a02517885d7fb69097f698",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272662,186272662,src/wallet/wallet.cpp
ryanofsky,2018-05-05T21:31:02Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185886977\n\n> Any reason you don't just want to do for (const CRPCCommand* command : m_commands) { ... }\n\nHaving access to the iterator makes it possible to detect the last loop iteration and let `RPC_WALLET_NOT_FOUND` exceptions from the last wallet process get reraised instead of being suppressed.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272672,186272672,src/interfaces/chain.cpp
ryanofsky,2018-05-05T21:31:40Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186174271\n\n> I find the name of this class quite confusing, since it's not actually a lock. How about renaming this to LockedChain and renaming LockingStateImpl to ChainLockImpl?\n\nIt is really a lock, analogous to `std::unique_lock` (and the implementation will even inherit from a class called `UniqueLock` after #11599 renames `CCri",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272697,186272697,src/interfaces/chain.h
ryanofsky,2018-05-05T21:32:05Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186132129\n\n> I think the (Scheduler is ignored if client is out-of-process). comment can be saved for #10102\n\nSure, removed in 0d9ba1a093e30d77348efc55f0ff6599cef76621.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272710,186272710,src/interfaces/chain.h
ryanofsky,2018-05-05T21:32:26Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186125434\n\n> I don't understand why this is in parseParameters(), rather than a constructor for NodeImpl\n\nGood suggestion. Moved to constructor in 53a5d3e48093b366e4a227fc9c3e50d7729ba461. An earlier version of #10102 initialized `m_interfaces` here in order to be able to use the `argv[0]` directory from the `bitcoin-gui` process to",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272718,186272718,src/interfaces/node.cpp
ryanofsky,2018-05-05T21:32:43Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186216539\n\n> The ""missing block hash"" and ""missing block time"" outputs here are a change in behaviour (and could potentially break clients using the dumpwallet API)\n\nI don't think there is a risk of clients breaking, since the change in behavior is outputting ""(missing block hash)"" and ""(missing block time)"" where previously the cod",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272735,186272735,src/wallet/rpcdump.cpp
ryanofsky,2018-05-05T21:33:00Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186225645\n\n> Can you use locked_chain->getDepth(blockId) here?\n\nI think so, but it seems like it would be deviating unnecessarily from current code and also obscuring relationship between height and depth which is currently explicit here.\n",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272743,186272743,src/wallet/rpcwallet.cpp
ryanofsky,2018-05-05T21:33:18Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186174854\n\n> There are 4 of these Temporary. Removed in upcoming lock cleanup comments. Sorry if I missed the answer to this, but what's the plan for removing them?\n\nThese are introduced in commit 4d11732cc453b8ad5db571491909259fbacd1f51 (Remove uses of cs_main in wallet code), which like other commits in this PR, is just supposed t",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272746,186272746,src/wallet/rpcwallet.cpp
ryanofsky,2018-05-05T21:33:33Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186181022\n\n> Comment is wrong. Needs to be updated to Should be called with non-zero block_hash and posInBlock...\n\nThanks, fixed in 77cd28c7f5043ff82500fe59936d7a6abc8d0bf6",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272748,186272748,src/wallet/wallet.h
ryanofsky,2018-05-05T21:33:48Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186181393\n\n> Remove comment\n\nRemoved in cc2290887af57d60640e7ec90afe2a87dcee3ed7",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186272752,186272752,src/wallet/wallet.h
jnewbery,2018-05-07T14:42:19Z,Would it make sense to have a `Chain::Lock.getTip()` to just return the tip hash?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186444555,186444555,src/wallet/wallet.cpp
jnewbery,2018-05-07T15:42:19Z,"This variable isn't a pointer to a CBlockIndex, and should be named `max_height` or similar.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186462615,186462615,src/wallet/wallet.cpp
jnewbery,2018-05-07T17:49:23Z,would `block_height` or `block_index` be a better variable name here?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186496577,186496577,src/wallet/wallet.cpp
jnewbery,2018-05-07T17:51:27Z,"I think this comment should make clear that the block must be available on disk:\n\n`Check that the full block is available on disk (ie has not been pruned), and contains transactions.`",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186497214,186497214,src/interfaces/chain.h
jnewbery,2018-05-07T17:59:43Z,"In fact, I think this function is misnamed. What we're interested in is whether the block is available on disk or not. The 'block contains transactions' conditional test was added here: https://github.com/bitcoin/bitcoin/commit/7e6569ea5be8cb26454ede3efb6a50b393aaa9be (comment here: https://github.com/bitcoin/bitcoin/pull/6057#issuecomment-97393680). I suggest renaming the function to `haveBlockOn",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186499592,186499592,src/interfaces/chain.h
jnewbery,2018-05-07T18:05:22Z,"Shouldn't this be ""height greater than or equal to the given""? The implementation starts at `start_height` and moves forwards along the chain.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186501200,186501200,src/interfaces/chain.h
jnewbery,2018-05-07T20:23:47Z,"Supporting multiple clients makes this more complex than it needs to be.\n\nThis PR would be easier to review if it initially supported just a single client (as we do today). A future PR could extend the RPC forwarding to support multiple clients.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186538449,186538449,src/interfaces/chain.cpp
ryanofsky,2018-05-08T16:39:31Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186497214\n\n> I think this comment should make clear that the block must be available on disk:\n\nRenamed as suggested and added your comment in 731b02dd1885e5d7242c894d14054ead91044550.\n",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791509,186791509,src/interfaces/chain.h
ryanofsky,2018-05-08T16:39:47Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186501200\n\n> Shouldn't this be ""height greater than or equal to the given""?\n\nYes you're right. Updated comment and renamed method to reflect this in d1ea68d7aa0e8a5b7389a38c4176b38bff5e94b4.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791578,186791578,src/interfaces/chain.h
ryanofsky,2018-05-08T16:40:21Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186538449\n\n> Supporting multiple clients makes this more complex than it needs to be.\n>\n> This PR would be easier to review if it initially supported just a single client (as we do today). A future PR could extend the RPC forwarding to support multiple clients.\n\nRPC forwarding is complex I think mostly because I tried to make fe",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791740,186791740,src/interfaces/chain.cpp
ryanofsky,2018-05-08T16:40:41Z,"> https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186444555\n\n> Would it make sense to have a Chain::Lock.getTip() to just return the tip hash?\n\n I started to implement this and look for different places where `getTip` could be used, and found that this was actually the only place it would remove any code. So I think it doesn't make sense to add for now.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791830,186791830,src/wallet/wallet.cpp
ryanofsky,2018-05-08T16:40:58Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186462615\n\n> This variable isn't a pointer to a CBlockIndex, and should be named max_height or similar.\n\nRenamed as suggested in 63158224c69bd3d3621569a42132012ad186eb76.\n\n",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791900,186791900,src/wallet/wallet.cpp
ryanofsky,2018-05-08T16:41:16Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186496577\n\n> would block_height or block_index be a better variable name here?\n\nYes, I think so and went with block_height in b2224a586fd6d9f186f9b45a778f70b7294bb83c.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186791980,186791980,src/wallet/wallet.cpp
jamesob,2018-05-08T19:53:25Z,We need `tip_height` for later and so using `getDepth()` would do an extra `getHeight()` call. But agree that it's a shame to see the depth arithmetic repeated...,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186847373,186847373,src/wallet/rpcwallet.cpp
jimpo,2018-05-18T21:19:06Z,This feels like a weird method to put in the chain interface because it's just an RPC helper function. I'd actually rather it be duplicated (though that might still require a `maxConfirmTarget` method on the interface).,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r189395768,189395768,src/interfaces/chain.h
MarcoFalke,2018-05-22T19:51:52Z,Mind to explain why this is removed? I believe `Construct` will still return without creating a chain client and thus `RegisterWalletRPCCommands` is never called.,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r190031428,190031428,src/wallet/rpcwallet.cpp
ken2812221,2018-06-20T17:39:35Z,"Maybe replace these two lines as `#include <boost/optional.hpp>` to pass travis tests.\n\nIn commit 'Remove uses of chainActive and mapBlockIndex in wallet code '",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r196881338,196881338,src/optional.h
jamesob,2018-08-28T21:10:55Z,Probably out-of-scope nit: I wish the uint32_t max was instead a named constant that had meaning relative to use with nLockTime (e.g. `IGNORE_NLOCKTIME`).,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r213473620,213473620,src/wallet/wallet.cpp
ken2812221,2018-09-15T08:29:29Z,"In commit ""Remove use of g_connman / PushInventory in wallet code"": unnecessary changes",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r217879497,217879497,src/Makefile.bench.include
practicalswift,2018-09-21T07:54:18Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/wallet/test/wallet_test_fixture.cpp:20:21: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219411542,219411542,src/wallet/test/wallet_test_fixture.cpp
practicalswift,2018-09-21T07:56:18Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:81:25: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412134,219412134,src/interfaces/chain.cpp
practicalswift,2018-09-21T07:56:31Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:105:22: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412177,219412177,src/interfaces/chain.cpp
practicalswift,2018-09-21T07:56:49Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:121:13: warning: implicit conversion 'Optional<int> *' (aka 'boost::optional<int> *') -> bool [readability-implicit-bool-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412247,219412247,src/interfaces/chain.cpp
practicalswift,2018-09-21T07:57:11Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:168:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [hicpp-explicit-conversions]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412334,219412334,src/interfaces/chain.cpp
practicalswift,2018-09-21T07:57:23Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:182:9: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412384,219412384,src/interfaces/chain.cpp
practicalswift,2018-09-21T07:57:48Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:212:74: warning: parameter 'connman' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219412493,219412493,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:11:03Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:315:20: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219415575,219415575,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:11:24Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:362:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219415650,219415650,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:12:32Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:373:9: warning: this call will remove at most one item even when multiple items should be removed [bugprone-inaccurate-erase]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219415928,219415928,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:13:37Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:432:5: warning: annotate this function with 'override' or (rarely) 'final' [hicpp-use-override]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219416164,219416164,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:14:02Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/interfaces/chain.cpp:432:21: warning: Call to virtual function during destruction [clang-analyzer-optin.cplusplus.VirtualCall]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219416254,219416254,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:15:15Z,"```\n2018-09-19 14:39:06 clang-tidy(pr=10973): src/wallet/wallet.cpp:950:65: warning: parameter 'locked_chain' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219416534,219416534,src/wallet/wallet.cpp
practicalswift,2018-09-21T08:29:41Z,"```\n2018-09-20 04:12:32 cppcheck(pr=10973): [src/threadsafety.h:62]: (style) Struct 'LockAnnotation' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219420130,219420130,src/threadsafety.h
practicalswift,2018-09-21T08:30:14Z,"```\n2018-09-20 04:12:32 cppcheck(pr=10973): [src/interfaces/chain.cpp:168]: (style) Class 'HandlerImpl' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219420288,219420288,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:30:27Z,"```\n2018-09-20 04:12:32 cppcheck(pr=10973): [src/interfaces/chain.cpp:182]: (style) Struct 'Forwarder' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219420364,219420364,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:30:43Z,"```\n2018-09-20 04:12:32 cppcheck(pr=10973): [src/interfaces/chain.cpp:362]: (style) Class 'RpcForwarder' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219420448,219420448,src/interfaces/chain.cpp
practicalswift,2018-09-21T08:31:01Z,"```\n2018-09-20 04:12:32 cppcheck(pr=10973): [src/interfaces/chain.h:209]: (style) The function 'Inventory' is never used.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219420677,219420677,src/interfaces/chain.h
practicalswift,2018-09-23T08:23:05Z,"```\n\n2018-09-22 22:50:20 cpplint(pr=10973): src/interfaces/chain.cpp:0:  No copyright message found.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691759,219691759,src/interfaces/chain.cpp
practicalswift,2018-09-23T08:23:28Z,"```\n2018-09-22 22:50:20 cpplint(pr=10973): src/interfaces/chain.cpp:168:  Single-parameter constructors should be marked explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691763,219691763,src/interfaces/chain.cpp
practicalswift,2018-09-23T08:24:00Z,"```\n2018-09-22 22:50:20 cpplint(pr=10973): src/interfaces/chain.cpp:182:  Single-parameter constructors should be marked explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691774,219691774,src/interfaces/chain.cpp
practicalswift,2018-09-23T08:24:17Z,"```\n2018-09-22 22:50:20 cpplint(pr=10973): src/interfaces/chain.cpp:362:  Single-parameter constructors should be marked explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691784,219691784,src/interfaces/chain.cpp
practicalswift,2018-09-23T08:24:35Z,"```\n2018-09-22 22:50:20 cpplint(pr=10973): src/interfaces/chain.h:0:  No copyright message found.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691793,219691793,src/interfaces/chain.h
practicalswift,2018-09-23T08:24:56Z,"```\n2018-09-22 22:50:20 cpplint(pr=10973): src/threadsafety.h:62:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219691803,219691803,src/threadsafety.h
flack,2018-09-23T16:42:36Z,"@practicalswift You know, the signal/noise ratio of these comments would be higher if you omitted the timestamp (which isn't interesting), the PR number and the file path (which are redundant, because that's where the comment is attached). Currently in the web UI, you always have to scroll each comment horizontally to see what it's actually about.\n\nstatus quo:\n<img width=""676"" alt=""bildschir",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219704316,219704316,src/interfaces/chain.cpp
practicalswift,2018-09-23T17:22:36Z,@flack Good point! I'll implement that!,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r219705466,219705466,src/interfaces/chain.cpp
practicalswift,2018-10-11T05:24:57Z,An implicit conversion from `unsigned int` to `int` takes place here. Return an unsigned integer instead?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r224318014,224318014,src/interfaces/chain.cpp
practicalswift,2018-10-11T05:27:31Z,Nit: Remove `;` :-),https://github.com/bitcoin/bitcoin/pull/10973#discussion_r224318332,224318332,src/interfaces/chain.cpp
practicalswift,2018-10-11T05:28:52Z,Should be marked `override`?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r224318496,224318496,src/rpc/rawtransaction.cpp
practicalswift,2018-10-15T12:16:14Z,Make this and the conversions on the lines below explicit?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r225142332,225142332,src/interfaces/chain.cpp
practicalswift,2018-10-15T12:17:43Z,Implicit sign conversion here: see comment on `estimateMaxBlocks` above.,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r225142764,225142764,src/wallet/fees.cpp
ryanofsky,2018-10-18T19:36:06Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r185934311\n\n> Seems like these instances of straight pass-through to some underlying function may be good cases for templated argument forwarding.\n\nI think fully specifying the interface in `chain.h` is nicer than having to look in different files to see names and types of the arguments. Writing the arguments explicitly also mean",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r226438193,226438193,src/interfaces/chain.cpp
ryanofsky,2018-10-29T20:05:49Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r189395768\n\n> This feels like a weird method to put in the chain interface\n\nAgree, removed this method.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r229078622,229078622,src/interfaces/chain.h
ryanofsky,2018-11-01T16:47:16Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r213473620\n\n> Probably out-of-scope nit: I wish the uint32_t max was instead a named constant\n\nAdded LOCKTIME_MAX constant here and in #14636.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r230112626,230112626,src/wallet/wallet.cpp
practicalswift,2018-11-09T18:31:35Z,Nit: Looks like a potential opportunity for `std::any_of`? :-),https://github.com/bitcoin/bitcoin/pull/10973#discussion_r232349663,232349663,src/init.cpp
practicalswift,2018-11-09T18:32:00Z,Nit: Looks like a potential opportunity for `std::any_of`? :-),https://github.com/bitcoin/bitcoin/pull/10973#discussion_r232349796,232349796,src/init.cpp
ryanofsky,2018-11-12T18:34:00Z,Discussed in base PR: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r232767596,232767596,src/init.cpp
ryanofsky,2018-11-12T18:34:14Z,Discussed in base PR: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r232767664,232767664,src/init.cpp
promag,2019-03-11T10:40:50Z,"nit, align.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264173415,264173415,src/rpc/rawtransaction.cpp
promag,2019-03-11T10:40:59Z,"nit, format.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264173464,264173464,src/rpc/rawtransaction.cpp
promag,2019-03-11T11:11:13Z,"I wonder if this should return an `std::vector<std::pair<COutPoint, Coin>>`? Otherwise could note in the comment that result follows `outputs` order.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184370,264184370,src/interfaces/chain.h
promag,2019-03-11T11:11:29Z,Why?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184444,264184444,src/rpc/rawtransaction.cpp
promag,2019-03-11T11:11:44Z,"nit, `{`",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184576,264184576,src/rpc/server.cpp
promag,2019-03-11T11:23:27Z,"Can you explain why not do the following:\n```cpp\nCoinFill view(...);\nfor (...) {\n   view.AccessCoin(...)\n}\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264188304,264188304,src/rpc/rawtransaction.cpp
promag,2019-03-11T11:32:15Z,When can `inserted.second` fail?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191105,264191105,src/interfaces/chain.cpp
promag,2019-03-11T11:33:37Z,"`handleRpc` can return an ""empty"" handler.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191494,264191494,src/wallet/rpcwallet.cpp
promag,2019-03-11T11:34:24Z,"nit, maybe a bit late, but should be uppercase RPC?",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191750,264191750,src/interfaces/chain.cpp
ryanofsky,2019-03-11T18:08:30Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191750\n\n> nit, maybe a bit late, but should be uppercase RPC?\n\nIMO, strict camel case without exceptions for acronyms is easier to read. (`JSONRPCRequest` `JsonRpcRequest`)",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264361814,264361814,src/interfaces/chain.cpp
ryanofsky,2019-03-11T18:08:38Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191105\n\n> When can inserted.second fail?\n\nAdded comment, but `inserted.second` being false isn't a failure. It's just checked to prevent work being repeated when there are multiple wallet processes.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264361879,264361879,src/interfaces/chain.cpp
ryanofsky,2019-03-11T18:09:12Z,"https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184576\n\n> nit, {\n\nWill leave since I'm just replacing `pfn` with `pcmd->unique_id` here and I think it's nice that this function uses a consistent style.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362081,264362081,src/rpc/server.cpp
ryanofsky,2019-03-11T18:09:27Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264191494\n\n> handleRpc can return an ""empty"" handler.\n\nNot sure if there is a suggested change, but `handleRpc` will return null if `CRPCTable::appendCommand` returns false. There should be no change in behavior as this is.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362191,264362191,src/wallet/rpcwallet.cpp
ryanofsky,2019-03-11T18:09:46Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184370\n\n> I wonder if this should return an std::vector<std::pair<COutPoint, Coin>>? Otherwise could note in the comment that result follows outputs order.\n\nAgree this was awkward. Replaced with in/out param in simplification.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362318,264362318,src/interfaces/chain.h
ryanofsky,2019-03-11T18:09:56Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264173415\n\n> nit, align.\n\nRemoved in simplification.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362391,264362391,src/rpc/rawtransaction.cpp
ryanofsky,2019-03-11T18:10:06Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264173464\n\n> nit, format.\n\nRemoved in simplification.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362457,264362457,src/rpc/rawtransaction.cpp
ryanofsky,2019-03-11T18:10:27Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264184444\n\nIn commit ""Remove use of CCoinsViewMemPool::GetCoin in wallet code"" (016b121b447d5383614ef77d6a050bd66994170b)\n\n> Why?\n\nRemoved in simplification. `&` would have worked here too, but `&&` seemed to make sense since this was a reference to a temporary that was moved from.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362610,264362610,src/rpc/rawtransaction.cpp
ryanofsky,2019-03-11T18:10:37Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264188304\n\n> Can you explain why not do the following:\n\nPrefer short lifetimes and less persistent state. In any case, this has been removed in a simplification.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264362676,264362676,src/rpc/rawtransaction.cpp
promag,2019-03-12T01:45:05Z,But why let `handlers` have a null entry?,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264493627,264493627,src/wallet/rpcwallet.cpp
ryanofsky,2019-03-12T02:59:12Z,"> But why let handlers have a null entry?\n\nWhat is the suggestion? This condition won't happen and it wouldn't be a problem if it did happen. I'm trying not to change behavior and this is a straight translation of the previous code. Neither the old code nor the new code cares about this condition. If there are concerns about rpc registration they would probably be better to address in another ",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r264505016,264505016,src/wallet/rpcwallet.cpp
jnewbery,2019-03-18T15:02:26Z,"Can you simplify this interface to `(cont CBlock& block, const std::vector<CTransactionRef>& tx_conflicted)`? The client can get the block hash using `CBlock->GetHash()`.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266484246,266484246,src/interfaces/chain.h
jnewbery,2019-03-18T15:17:49Z,"I think this comment could be changed slightly now, since 'we' (the wallet) don't ever hold `cs_main` now.\n\n`since we're still holding cs_main` -> `since we're still holding the Chain::Lock interface`.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266492528,266492528,src/wallet/wallet.cpp
jnewbery,2019-03-18T15:34:09Z,"I don't really like this name `m_handler`, (or the class name `HandlerImpl`), since the name handler is generic for any interface handler. It's more verbose, but I think `m_validation_interface_handler` and `ValidationInterfaceHandlerImpl` are more explicit.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266501274,266501274,src/wallet/wallet.h
ryanofsky,2019-03-18T16:49:19Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266484246\n\n> Can you simplify this interface to (cont CBlock& block, const std::vector\<CTransactionRef>& tx_conflicted)? \n\nSimplified as suggested",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266539338,266539338,src/interfaces/chain.h
ryanofsky,2019-03-18T16:49:28Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266492528\n\n> I think this comment could be changed slightly now, since 'we' (the wallet) don't ever hold cs_main now.\n\nChanged this to reference locked_chain instead of cs_main (it seemed to good to reference the actual variable name).",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266539438,266539438,src/wallet/wallet.cpp
ryanofsky,2019-03-18T16:49:35Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266501274\n\n> I don't really like this name m_handler, (or the class name HandlerImpl)\n\nRenamed to m_chain_notifications_handler to match Chain::Notifications, Chain::handleNotifications, Chain::waitForNotifications.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266539497,266539497,src/wallet/wallet.h
jamesob,2019-03-18T19:09:26Z,Maybe outdated? Since `m_chain_notifications_handler` is public I don't see why we'd need this.,https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266598533,266598533,src/wallet/wallet.h
ryanofsky,2019-03-18T22:00:03Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266598533\n\n> Maybe outdated? Since m_chain_notifications_handler is public I don't see why we'd need this.\n\nIt's needed to avoid ""error: cannot cast 'CWallet' to its private base class 'interfaces::Chain::Notifications'"" in the WalletTestingSetup constructor:\n\nhttps://github.com/bitcoin/bitcoin/blob/0ca5446db3cda7f911e911a09",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266659428,266659428,src/wallet/wallet.h
jnewbery,2019-03-19T16:57:35Z,"Is this `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` still required? `ResendWalletTransactions()` grabs a `locked_chain` interface.\n\nSee also the `LOCKS_EXCLUDED(cs_main` annotation on `BlockUntilSyncedToCurrentChain()` and the comment above it. Can that also go?\n\nThe `BlockUntilSyncedToCurrentChain()` function can definitely use some clean-up after this PR to remove the `locked_chain` and move `is",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266995234,266995234,src/wallet/wallet.h
jnewbery,2019-03-19T20:32:26Z,"I don't very much like that:\n\n- `SignTransction()` is taking a `Chain` interface as an argument\n- rpcwallet is calling into rpc/rawtransaction , which should eventually be part of `libbitcoin_node` (https://github.com/bitcoin/bitcoin/pull/10973#pullrequestreview-213000398)\n\nThose can both be done in a future PR.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267084237,267084237,src/rpc/rawtransaction.cpp
jnewbery,2019-03-19T20:47:26Z,"Might be worth a comment here:\n\n```\n// Either the coin is not in the CCoinsViewCache or is spent. Clear it.\n```",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267090091,267090091,src/interfaces/chain.cpp
ryanofsky,2019-03-20T02:21:46Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267090091\n\n> // Either the coin is not in the CCoinsViewCache or is spent. Clear it.\n\nAdded comment\n\n ",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267165239,267165239,src/interfaces/chain.cpp
ryanofsky,2019-03-20T02:23:45Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r186538449\n\n> Supporting multiple clients makes this more complex than it needs to be.\n\nThis should be a lot simpler with commit f157e7a73ba746c38c5437540806151fbfa4b286 replaced by 4e4d9e9f85eaf9c3bec48559bd4cad3e8a9333ca ([pr/wipc-sep.101](https://github.com/ryanofsky/bitcoin/commits/pr/wipc-sep.101) -> [pr/wipc-sep.102](https:",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267165538,267165538,src/interfaces/chain.cpp
ryanofsky,2019-03-20T02:24:08Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267084237\n\n> Those can both be done in a future PR.\n\nAdded todo (https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep.102/src/rpc/rawtransaction.cpp#L794-L799) and also moved `findCoins` code into a global method so it will be easier to get rid of the Chain argument later.",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267165594,267165594,src/rpc/rawtransaction.cpp
ryanofsky,2019-03-20T02:24:20Z,"re: https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266995234\n\n> Is this EXCLUSIVE_LOCKS_REQUIRED(cs_main) still required? ResendWalletTransactions() grabs a locked_chain interface.\n\nIt's not required and should have been removed. I replaced `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` with a `locked_chain` argument. \n\nI also added todos in https://github.com/ryanofsky/bitcoin/blob/pr",https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267165624,267165624,src/wallet/wallet.h
