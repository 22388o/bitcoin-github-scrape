[
  {
    "sha": "7eb702954ed0e297c5ded548e6c4f11f55313b7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWI3MDI5NTRlZDBlMjk3YzVkZWQ1NDhlNmM0ZjExZjU1MzEzYjdh",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-02-19T00:31:12Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-03-23T14:40:38Z"
      },
      "message": "Add importprunedfunds rpc call",
      "tree": {
        "sha": "3054521bdf5815fafa803017f2ce72f427e3d108",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3054521bdf5815fafa803017f2ce72f427e3d108"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7eb702954ed0e297c5ded548e6c4f11f55313b7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb702954ed0e297c5ded548e6c4f11f55313b7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb702954ed0e297c5ded548e6c4f11f55313b7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb702954ed0e297c5ded548e6c4f11f55313b7a/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bdc583b3f072d0d23b1fc858890fd1acaff5914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc583b3f072d0d23b1fc858890fd1acaff5914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdc583b3f072d0d23b1fc858890fd1acaff5914"
      }
    ],
    "stats": {
      "total": 247,
      "additions": 224,
      "deletions": 23
    },
    "files": [
      {
        "sha": "10b51fef7a7182a16b1c774c8e6eee6d03cef63d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -116,6 +116,7 @@\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n+    'importprunedfunds.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n@@ -127,6 +128,7 @@\n     'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n+    'pruning.py',\n     'forknotify.py',\n     'invalidateblock.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655"
      },
      {
        "sha": "bac144cd75aefddce28d34e0b88b7d31ee06373a",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import decimal\n+\n+class ImportPrunedFundsTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(101)\n+\n+        # sync\n+        self.sync_all()\n+        \n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        self.sync_all()\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),101)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        #Send funds to self\n+        txnid1 = self.nodes[0].sendtoaddress(address1, 0.1)\n+        self.nodes[0].generate(1)\n+        rawtxn1 = self.nodes[0].gettransaction(txnid1)['hex']\n+        proof1 = self.nodes[0].gettxoutproof([txnid1])\n+\n+        txnid2 = self.nodes[0].sendtoaddress(address2, 0.05)\n+        self.nodes[0].generate(1)\n+        rawtxn2 = self.nodes[0].gettransaction(txnid2)['hex']\n+        proof2 = self.nodes[0].gettxoutproof([txnid2])\n+\n+\n+        txnid3 = self.nodes[0].sendtoaddress(address3, 0.025)\n+        self.nodes[0].generate(1)\n+        rawtxn3 = self.nodes[0].gettransaction(txnid3)['hex']\n+        proof3 = self.nodes[0].gettxoutproof([txnid3])\n+\n+        self.sync_all()\n+\n+        #Import with no affiliated address\n+        try:\n+            result1 = self.nodes[1].importprunedfunds(rawtxn1, proof1, \"\")\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert('No addresses' in errorString)\n+\n+        balance1 = self.nodes[1].getbalance(\"\", 0, True)\n+        assert_equal(balance1, Decimal(0))\n+\n+        #Import with affiliated address with no rescan\n+        self.nodes[1].importaddress(address2, \"\", False)\n+        result2 = self.nodes[1].importprunedfunds(rawtxn2, proof2, \"\")\n+        balance2 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        assert_equal(balance2, Decimal('0.05'))\n+\n+        #Import with private key with no rescan\n+        self.nodes[1].importprivkey(address3_privkey, \"\", False)\n+        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3, \"\")\n+        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, False))\n+        assert_equal(balance3, Decimal('0.025'))\n+        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        assert_equal(balance3, Decimal('0.075'))\n+\n+        #Addresses Test - after import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], True)\n+\n+if __name__ == '__main__':\n+    ImportPrunedFundsTest ().main ()"
      },
      {
        "sha": "dca4973cc4d88a7aaaa01e1a99d7871b267a6753",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -95,7 +95,7 @@ void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const st\n     }\n }\n \n-uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {\n+uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {\n     if (nBitsUsed >= vBits.size()) {\n         // overflowed the bits array - failure\n         fBad = true;\n@@ -110,14 +110,16 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n             return uint256();\n         }\n         const uint256 &hash = vHash[nHashUsed++];\n-        if (height==0 && fParentOfMatch) // in case of height 0, we have a matched txid\n+        if (height==0 && fParentOfMatch) { // in case of height 0, we have a matched txid\n             vMatch.push_back(hash);\n+            vnIndex.push_back(pos);\n+        }\n         return hash;\n     } else {\n         // otherwise, descend into the subtrees to extract matched txids and hashes\n-        uint256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch), right;\n+        uint256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch, vnIndex), right;\n         if (pos*2+1 < CalcTreeWidth(height-1)) {\n-            right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch);\n+            right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch, vnIndex);\n             if (right == left) {\n                 // The left and right branches should never be identical, as the transaction\n                 // hashes covered by them must each be unique.\n@@ -147,7 +149,7 @@ CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const\n \n CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}\n \n-uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n+uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n@@ -167,7 +169,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n         nHeight++;\n     // traverse the partial tree\n     unsigned int nBitsUsed = 0, nHashUsed = 0;\n-    uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n+    uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch, vnIndex);\n     // verify that no problems occurred during the tree traversal\n     if (fBad)\n         return uint256();"
      },
      {
        "sha": "835cbcce5550da0f3b6d6c5d63a81b745dc1b677",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -75,9 +75,9 @@ class CPartialMerkleTree\n \n     /**\n      * recursive function that traverses tree nodes, consuming the bits and hashes produced by TraverseAndBuild.\n-     * it returns the hash of the respective node.\n+     * it returns the hash of the respective node and its respective index.\n      */\n-    uint256 TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch);\n+    uint256 TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex);\n \n public:\n \n@@ -110,10 +110,11 @@ class CPartialMerkleTree\n     CPartialMerkleTree();\n \n     /**\n-     * extract the matching txid's represented by this partial merkle tree.\n+     * extract the matching txid's represented by this partial merkle tree\n+     * and their respective indices within the partial tree.\n      * returns the merkle root, or 0 in case of failure\n      */\n-    uint256 ExtractMatches(std::vector<uint256> &vMatch);\n+    uint256 ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex);\n };\n \n "
      },
      {
        "sha": "34dd3b30f50ffba278d94d0376cba21c364045f1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -303,7 +303,8 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     UniValue res(UniValue::VARR);\n \n     vector<uint256> vMatch;\n-    if (merkleBlock.txn.ExtractMatches(vMatch) != merkleBlock.header.hashMerkleRoot)\n+    vector<unsigned int> vIndex;\n+    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) != merkleBlock.header.hashMerkleRoot)\n         return res;\n \n     LOCK(cs_main);"
      },
      {
        "sha": "9557000ddcc1119dfa5e7da3113e990f14241435",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -204,7 +204,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    vector<unsigned int> vIndex;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -221,7 +222,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -249,7 +250,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    vector<unsigned int> vIndex;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -275,7 +277,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -303,7 +305,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    vector<unsigned int> vIndex;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -326,7 +329,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -353,7 +356,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    vector<unsigned int> vIndex;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -392,7 +396,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    vector<unsigned int> vIndex;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -409,7 +414,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);"
      },
      {
        "sha": "2f3f607889498cdd9c651da837cd6833ce4262c0",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -88,7 +88,8 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n             // extract merkle root and matched txids from copy\n             std::vector<uint256> vMatchTxid2;\n-            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n+            std::vector<unsigned int> vIndex;\n+            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2, vIndex);\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n@@ -102,7 +103,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n                 CPartialMerkleTreeTester pmt3(pmt2);\n                 pmt3.Damage();\n                 std::vector<uint256> vMatchTxid3;\n-                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n+                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3, vIndex);\n                 BOOST_CHECK(merkleRoot3 != merkleRoot1);\n             }\n         }\n@@ -122,7 +123,8 @@ BOOST_AUTO_TEST_CASE(pmt_malleability)\n \n     CPartialMerkleTree tree(vTxid, vMatch);\n     std::vector<uint256> vTxid2;\n-    BOOST_CHECK(tree.ExtractMatches(vTxid).IsNull());\n+    std::vector<unsigned int> vIndex;\n+    BOOST_CHECK(tree.ExtractMatches(vTxid, vIndex).IsNull());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "899ed1b3d744be4df0589bf2150d62df5d9e7576",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -13,6 +13,8 @@\n #include \"util.h\"\n #include \"utiltime.h\"\n #include \"wallet.h\"\n+#include \"merkleblock.h\"\n+#include \"core_io.h\"\n \n #include <fstream>\n #include <stdint.h>\n@@ -243,6 +245,71 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+UniValue importprunedfunds(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+            \"importprunedfunds\\n\"\n+            \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n+            \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n+            \"3. \\\"label\\\"          (string, optional) An optional label\\n\"\n+        );\n+\n+    CTransaction tx;\n+    if (!DecodeHexTx(tx, params[0].get_str()))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    uint256 hashTx = tx.GetHash();\n+    CWalletTx wtx(pwalletMain,tx);\n+\n+    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CMerkleBlock merkleBlock;\n+    ssMB >> merkleBlock;\n+\n+    string strLabel = \"\";\n+    if (params.size() == 3)\n+        strLabel = params[2].get_str();\n+\n+    //Search partial merkle tree in proof for our transaction and index in valid block\n+    vector<uint256> vMatch;\n+    vector<unsigned int> vIndex;\n+    unsigned int txnIndex = 0;\n+    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n+\n+        LOCK(cs_main);\n+\n+        if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n+\n+        vector<uint256>::const_iterator it;\n+        if ((it = std::find(vMatch.begin(), vMatch.end(), hashTx))==vMatch.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction given doesn't exist in proof\");\n+        }\n+\n+        txnIndex = vIndex[it - vMatch.begin()];\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n+    }\n+\n+    wtx.nIndex = txnIndex;\n+    wtx.hashBlock = merkleBlock.header.GetHash();\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    if (pwalletMain->IsMine(tx)) {\n+        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n+        pwalletMain->AddToWallet(wtx, false, &walletdb);\n+        return NullUniValue;\n+    }\n+\n+    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n+}\n+\n UniValue importpubkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      },
      {
        "sha": "fbe95a14c2e34614d8df2ea6d3efed43fe477d37",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb702954ed0e297c5ded548e6c4f11f55313b7a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "patch": "@@ -2503,6 +2503,7 @@ extern UniValue importaddress(const UniValue& params, bool fHelp);\n extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n+extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n \n const CRPCCommand vWalletRPCCommands[] =\n { //  category              name                        actor (function)           okSafeMode\n@@ -2529,6 +2530,7 @@ const CRPCCommand vWalletRPCCommands[] =\n     { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n     { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n     { \"wallet\",             \"importaddress\",            &importaddress,            true  },\n+    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true  },\n     { \"wallet\",             \"importpubkey\",             &importpubkey,             true  },\n     { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true  },\n     { \"wallet\",             \"listaccounts\",             &listaccounts,             false },"
      }
    ]
  },
  {
    "sha": "f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWJiMTNjOTNkYTVkNGJlZGY5ZGQyY2Q3MzU3MDA4Mzc2ZTlhMmI0",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-03-07T13:51:06Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-03-23T14:40:38Z"
      },
      "message": "Added companion removeprunedfunds call.",
      "tree": {
        "sha": "402e4fd30562dc5c4a6e438961b0387ec87c8e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/402e4fd30562dc5c4a6e438961b0387ec87c8e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb702954ed0e297c5ded548e6c4f11f55313b7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb702954ed0e297c5ded548e6c4f11f55313b7a"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 127,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5cbdcde9aa997362e133788af9345e46459ec867",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -115,5 +115,26 @@ def run_test (self):\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n \n+        #Remove transactions\n+\n+        try:\n+            self.nodes[1].removeprunedfunds(txnid1)\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert('does not exist' in errorString)\n+\n+        balance1 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        assert_equal(balance1, Decimal('0.075'))\n+\n+\n+        self.nodes[1].removeprunedfunds(txnid2)\n+        balance2 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        assert_equal(balance2, Decimal('0.025'))\n+\n+        self.nodes[1].removeprunedfunds(txnid3)\n+        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        assert_equal(balance3, Decimal('0.0'))\n+\n if __name__ == '__main__':\n     ImportPrunedFundsTest ().main ()"
      },
      {
        "sha": "bb40cf724536a464fec3a0121f9b97372e5e3de1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -310,6 +310,44 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n }\n \n+UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"removeprunedfunds \\\"txid\\\"\\n\"\n+            \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"removprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    vector<uint256> vHash;\n+    vHash.push_back(hash);\n+    vector<uint256> vHashOut;\n+\n+    if(pwalletMain->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n+    }\n+\n+    if(vHashOut.empty()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction does not exist in wallet.\");\n+    }\n+\n+    ThreadFlushWalletDB(pwalletMain->strWalletFile);\n+\n+    return NullUniValue;\n+}\n+\n UniValue importpubkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      },
      {
        "sha": "29f7802c5c88aad5fbe449657b6632a723a8f5dc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -2504,6 +2504,7 @@ extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n+extern UniValue removeprunedfunds(const UniValue& params, bool fHelp);\n \n const CRPCCommand vWalletRPCCommands[] =\n { //  category              name                        actor (function)           okSafeMode\n@@ -2552,6 +2553,7 @@ const CRPCCommand vWalletRPCCommands[] =\n     { \"wallet\",             \"walletlock\",               &walletlock,               true  },\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true  },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true  },\n+    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true  },\n };\n \n void walletRegisterRPCCommands()"
      },
      {
        "sha": "801ef986841d5a144d3df2efc276adc3bbdf62e6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -2362,6 +2362,31 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     return DB_LOAD_OK;\n }\n \n+DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOut)\n+{\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n+    if (nZapSelectTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // that requires a new key.\n+        }\n+    }\n+\n+    if (nZapSelectTxRet != DB_LOAD_OK)\n+        return nZapSelectTxRet;\n+\n+    MarkDirty();\n+\n+    return DB_LOAD_OK;\n+\n+}\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {"
      },
      {
        "sha": "5db36f52d17227efa2d3a434d3efd6c2f40b21da",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -792,6 +792,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n "
      },
      {
        "sha": "f2b5408e92b5d7f9d4c3e75f626a035e92b3b48e",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -785,6 +785,45 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n     return result;\n }\n \n+DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, vector<uint256>& vTxHashOut)\n+{\n+    // build list of wallet TXs and hashes\n+    vector<uint256> vTxHash;\n+    vector<CWalletTx> vWtx;\n+    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+    if (err != DB_LOAD_OK) {\n+        return err;\n+    }\n+\n+    std::sort(vTxHash.begin(), vTxHash.end());\n+    std::sort(vTxHashIn.begin(), vTxHashIn.end());\n+\n+    // erase each matching wallet TX\n+    bool delerror = false;\n+    vector<uint256>::iterator it = vTxHashIn.begin();\n+    BOOST_FOREACH (uint256 hash, vTxHash) {\n+        while (it < vTxHashIn.end() && (*it) < hash) {\n+            it++;\n+        }\n+        if (it == vTxHashIn.end()) {\n+            break;\n+        }\n+        else if ((*it) == hash) {\n+            pwallet->mapWallet.erase(hash);\n+            if(!EraseTx(hash)) {\n+                LogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n+                delerror = true;\n+            }\n+            vTxHashOut.push_back(hash);\n+        }\n+    }\n+\n+    if (delerror) {\n+        return DB_CORRUPT;\n+    }\n+    return DB_LOAD_OK;\n+}\n+\n DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n {\n     // build list of wallet TXs"
      },
      {
        "sha": "fe6c366343599368c7892313ca63523111fba98c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=f1bb13c93da5d4bedf9dd2cd7357008376e9a2b4",
        "patch": "@@ -130,6 +130,7 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename);\n "
      }
    ]
  }
]