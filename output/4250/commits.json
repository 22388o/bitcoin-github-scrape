[
  {
    "sha": "b33d1f5ee512da5719b793b3867f75f1eea5cf52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzNkMWY1ZWU1MTJkYTU3MTliNzkzYjM4NjdmNzVmMWVlYTVjZjUy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-05-27T19:44:57Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-03T17:44:33Z"
      },
      "message": "Use fee/priority estimates in wallet CreateTransaction\n\nThe wallet now uses the mempool fee estimator with a new\ncommand-line option: -txconfirmtarget (default: 1) instead\nof using hard-coded fees or priorities.\n\nA new bitcoind that hasn't seen enough transactions to estimate\nwill fall back to the old hard-coded minimum priority or\ntransaction fee.\n\n-paytxfee option overrides -txconfirmtarget.\n\nRelaying and mining code isn't changed.\n\nFor Qt, the coin control dialog now uses priority estimates to\nlabel transaction priority (instead of hard-coded constants);\nunspent outputs were consistently labeled with a much higher\npriority than is justified by the free transactions actually\nbeing accepted into blocks.\n\nI did not implement any GUI for setting -txconfirmtarget; I would\nsuggest getting rid of the \"Pay transaction fee\" GUI and replace\nit with either \"target number of confirmations\" or maybe\na \"faster confirmation <--> lower fee\" slider or select box.",
      "tree": {
        "sha": "7bb3a60c6ca9c66c10920068bf7d63c942e52570",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bb3a60c6ca9c66c10920068bf7d63c942e52570"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b33d1f5ee512da5719b793b3867f75f1eea5cf52",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlO1loEACgkQdYgkL74406hMBQCgmOq1fGWaCqgeZGcGFdHhdpcc\nlBsAn12tM+hwUqj21OrVp/adX+VF52RU\n=Stm2\n-----END PGP SIGNATURE-----",
        "payload": "tree 7bb3a60c6ca9c66c10920068bf7d63c942e52570\nparent 29264a0a60fb18671ab43713f168765ab7609cd6\nauthor Gavin Andresen <gavinandresen@gmail.com> 1401219897 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1404409473 -0400\n\nUse fee/priority estimates in wallet CreateTransaction\n\nThe wallet now uses the mempool fee estimator with a new\ncommand-line option: -txconfirmtarget (default: 1) instead\nof using hard-coded fees or priorities.\n\nA new bitcoind that hasn't seen enough transactions to estimate\nwill fall back to the old hard-coded minimum priority or\ntransaction fee.\n\n-paytxfee option overrides -txconfirmtarget.\n\nRelaying and mining code isn't changed.\n\nFor Qt, the coin control dialog now uses priority estimates to\nlabel transaction priority (instead of hard-coded constants);\nunspent outputs were consistently labeled with a much higher\npriority than is justified by the free transactions actually\nbeing accepted into blocks.\n\nI did not implement any GUI for setting -txconfirmtarget; I would\nsuggest getting rid of the \"Pay transaction fee\" GUI and replace\nit with either \"target number of confirmations\" or maybe\na \"faster confirmation <--> lower fee\" slider or select box.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33d1f5ee512da5719b793b3867f75f1eea5cf52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b33d1f5ee512da5719b793b3867f75f1eea5cf52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33d1f5ee512da5719b793b3867f75f1eea5cf52/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29264a0a60fb18671ab43713f168765ab7609cd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29264a0a60fb18671ab43713f168765ab7609cd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29264a0a60fb18671ab43713f168765ab7609cd6"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 105,
      "deletions": 47
    },
    "files": [
      {
        "sha": "66059800b67bedc438b0c6fe07aae2ea39e14ae0",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -1,6 +1,26 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n+Transaction fee changes\n+=======================\n+\n+This release automatically estimates how high a transaction fee (or how\n+high a priority) transactions require to be confirmed quickly. The default\n+settings will create transactions that confirm quickly; see the new\n+'txconfirmtarget' setting to control the tradeoff between fees and\n+confirmation times.\n+\n+Prior releases used hard-coded fees (and priorities), and would\n+sometimes create transactions that took a very long time to confirm.\n+\n+\n+New Command Line Options\n+========================\n+\n+-txconfirmtarget=n : create transactions that have enough fees (or priority)\n+so they are likely to confirm within n blocks (default: 1). This setting\n+is over-ridden by the -paytxfee option.\n+\n New RPC methods\n ===============\n "
      },
      {
        "sha": "d6e7ab870d90813a161ab0cc8324a83176bd09af",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -131,7 +131,8 @@ class CFeeRate\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n-\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n     std::string ToString() const;\n \n     IMPLEMENT_SERIALIZE( READWRITE(nSatoshisPerK); )"
      },
      {
        "sha": "3ee0f2aa39c8242a3be2464f11dbe977cdb72c3e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -254,6 +254,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n+    strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n@@ -635,7 +636,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (nFeePerK > nHighTransactionFeeWarning)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < CTransaction::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       mapArgs[\"-paytxfee\"], CTransaction::minRelayTxFee.ToString()));\n+        }\n     }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n     bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");"
      },
      {
        "sha": "6be1a29c6cc898ba5a9686aa1b80d5653073b915",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -858,7 +858,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode)\n+int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n         LOCK(mempool.cs);\n@@ -870,20 +870,15 @@ int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree,\n             return 0;\n     }\n \n-    // Base fee is either minTxFee or minRelayTxFee\n-    CFeeRate baseFeeRate = (mode == GMF_RELAY) ? tx.minRelayTxFee : tx.minTxFee;\n-\n-    int64_t nMinFee = baseFeeRate.GetFee(nBytes);\n+    int64_t nMinFee = tx.minRelayTxFee.GetFee(nBytes);\n \n     if (fAllowFree)\n     {\n         // There is a free transaction area in blocks created by most miners,\n         // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n         //   to be considered to fall into this category. We don't want to encourage sending\n         //   multiple transactions instead of one big transaction to avoid fees.\n-        // * If we are creating a transaction we allow transactions up to 1,000 bytes\n-        //   to be considered safe and assume they can likely make it into this section.\n-        if (nBytes < (mode == GMF_SEND ? 1000 : (DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n+        if (nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n             nMinFee = 0;\n     }\n \n@@ -1005,7 +1000,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        int64_t txMinFee = GetMinFee(tx, nSize, true, GMF_RELAY);\n+        int64_t txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),"
      },
      {
        "sha": "e8df17dda00523b76cc63161664902e88c623c66",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -245,14 +245,7 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-\n-enum GetMinFee_mode\n-{\n-    GMF_RELAY,\n-    GMF_SEND,\n-};\n-\n-int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode);\n+int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n //\n // Check transaction inputs, and make sure any"
      },
      {
        "sha": "73494f52ea32869048bab9c3cc65036d29bb9428",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 20,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -16,6 +16,8 @@\n #include \"main.h\"\n #include \"wallet.h\"\n \n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+\n #include <QApplication>\n #include <QCheckBox>\n #include <QCursor>\n@@ -400,23 +402,24 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n }\n \n // return human readable label for priority number\n-QString CoinControlDialog::getPriorityLabel(double dPriority)\n+QString CoinControlDialog::getPriorityLabel(const CTxMemPool& pool, double dPriority)\n {\n-    if (AllowFree(dPriority)) // at least medium\n+    // confirmations -> textual description\n+    typedef std::map<unsigned int, QString> PriorityDescription;\n+    static PriorityDescription priorityDescriptions = boost::assign::map_list_of\n+        (1, tr(\"highest\"))(2, tr(\"higher\"))(3, tr(\"high\"))\n+        (5, tr(\"medium-high\"))(6, tr(\"medium\"))\n+        (10, tr(\"low-medium\"))(15, tr(\"low\"))\n+        (20, tr(\"lower\"));\n+\n+    BOOST_FOREACH(const PriorityDescription::value_type& i, priorityDescriptions)\n     {\n-        if      (AllowFree(dPriority / 1000000))  return tr(\"highest\");\n-        else if (AllowFree(dPriority / 100000))   return tr(\"higher\");\n-        else if (AllowFree(dPriority / 10000))    return tr(\"high\");\n-        else if (AllowFree(dPriority / 1000))     return tr(\"medium-high\");\n-        else                                      return tr(\"medium\");\n-    }\n-    else\n-    {\n-        if      (AllowFree(dPriority * 10))   return tr(\"low-medium\");\n-        else if (AllowFree(dPriority * 100))  return tr(\"low\");\n-        else if (AllowFree(dPriority * 1000)) return tr(\"lower\");\n-        else                                  return tr(\"lowest\");\n+        double p = mempool.estimatePriority(i.first);\n+        if (p > 0 && dPriority >= p) return i.second;\n     }\n+    // Note: if mempool hasn't accumulated enough history (estimatePriority\n+    // returns -1) we're conservative and classify as \"lowest\"\n+    return tr(\"lowest\");\n }\n \n // shows count of locked unspent outputs\n@@ -518,15 +521,20 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         // Priority\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n-        sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority);\n+        sPriorityLabel = CoinControlDialog::getPriorityLabel(mempool, dPriority);\n \n         // Fee\n         int64_t nFee = payTxFee.GetFee(max((unsigned int)1000, nBytes));\n \n         // Min Fee\n-        int64_t nMinFee = GetMinFee(txDummy, nBytes, AllowFree(dPriority), GMF_SEND);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+\n+        double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n+        if (dPriorityNeeded <= 0) // Not enough mempool history: never send free\n+            dPriorityNeeded = std::numeric_limits<double>::max();\n \n-        nPayFee = max(nFee, nMinFee);\n+        if (nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE && dPriority >= dPriorityNeeded)\n+            nPayFee = 0;\n \n         if (nPayAmount > 0)\n         {\n@@ -591,7 +599,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     }\n \n     // turn labels \"red\"\n-    l5->setStyleSheet((nBytes >= 1000) ? \"color:red;\" : \"\");                            // Bytes >= 1000\n+    l5->setStyleSheet((nBytes >= MAX_FREE_TRANSACTION_CREATE_SIZE) ? \"color:red;\" : \"\");// Bytes >= 1000\n     l6->setStyleSheet((dPriority > 0 && !AllowFree(dPriority)) ? \"color:red;\" : \"\");    // Priority < \"medium\"\n     l7->setStyleSheet((fDust) ? \"color:red;\" : \"\");                                     // Dust = \"yes\"\n \n@@ -732,7 +740,7 @@ void CoinControlDialog::updateView()\n \n             // priority\n             double dPriority = ((double)out.tx->vout[out.i].nValue  / (nInputSize + 78)) * (out.nDepth+1); // 78 = 2 * 34 + 10\n-            itemOutput->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(dPriority));\n+            itemOutput->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(mempool, dPriority));\n             itemOutput->setText(COLUMN_PRIORITY_INT64, strPad(QString::number((int64_t)dPriority), 20, \" \"));\n             dPrioritySum += (double)out.tx->vout[out.i].nValue  * (out.nDepth+1);\n             nInputSum    += nInputSize;\n@@ -765,7 +773,7 @@ void CoinControlDialog::updateView()\n             itemWalletAddress->setText(COLUMN_CHECKBOX, \"(\" + QString::number(nChildren) + \")\");\n             itemWalletAddress->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, nSum));\n             itemWalletAddress->setText(COLUMN_AMOUNT_INT64, strPad(QString::number(nSum), 15, \" \"));\n-            itemWalletAddress->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(dPrioritySum));\n+            itemWalletAddress->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(mempool, dPrioritySum));\n             itemWalletAddress->setText(COLUMN_PRIORITY_INT64, strPad(QString::number((int64_t)dPrioritySum), 20, \" \"));\n         }\n     }"
      },
      {
        "sha": "4f7422642fd19196d858d95ca25fa71ee57b1076",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -19,6 +19,7 @@ namespace Ui {\n }\n class WalletModel;\n class CCoinControl;\n+class CTxMemPool;\n \n class CoinControlDialog : public QDialog\n {\n@@ -32,7 +33,7 @@ class CoinControlDialog : public QDialog\n \n     // static because also called from sendcoinsdialog\n     static void updateLabels(WalletModel*, QDialog*);\n-    static QString getPriorityLabel(double);\n+    static QString getPriorityLabel(const CTxMemPool& pool, double);\n \n     static QList<qint64> payAmounts;\n     static CCoinControl *coinControl;"
      },
      {
        "sha": "d9187e4be3d2fc38d117902399f53be5382113d4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 8,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -18,6 +18,7 @@ using namespace std;\n \n // Settings\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n+unsigned int nTxConfirmTarget = 1;\n bool bSpendZeroConfChange = true;\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -1273,6 +1274,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n         return false;\n     }\n \n+    wtxNew.fTimeReceivedIsTxTime = true;\n     wtxNew.BindWallet(this);\n     CMutableTransaction txNew;\n \n@@ -1393,19 +1395,31 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 }\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n-                // Check that enough fee is included\n-                int64_t nPayFee = payTxFee.GetFee(nBytes);\n-                bool fAllowFree = AllowFree(dPriority);\n-                int64_t nMinFee = GetMinFee(wtxNew, nBytes, fAllowFree, GMF_SEND);\n-                if (nFeeRet < max(nPayFee, nMinFee))\n+                int64_t nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+\n+                if (nFeeRet >= nFeeNeeded)\n+                    break; // Done, enough fee included.\n+\n+                // Too big to send for free? Include more fee and try again:\n+                if (nBytes > MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n-                    nFeeRet = max(nPayFee, nMinFee);\n+                    nFeeRet = nFeeNeeded;\n                     continue;\n                 }\n \n-                wtxNew.fTimeReceivedIsTxTime = true;\n+                // Not enough fee: enough priority?\n+                double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n+                // Not enough mempool history to estimate: use hard-coded AllowFree.\n+                if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n+                    break;\n \n-                break;\n+                // Small enough, and priority high enough, to send for free\n+                if (dPriority >= dPriorityNeeded)\n+                    break;\n+\n+                // Include more fee and try again.\n+                nFeeRet = nFeeNeeded;\n+                continue;\n             }\n         }\n     }\n@@ -1513,6 +1527,20 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64_t nV\n     return SendMoney(scriptPubKey, nValue, wtxNew);\n }\n \n+int64_t CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+{\n+    // payTxFee is user-set \"I want to pay this much\"\n+    int64_t nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    // User didn't set: use -txconfirmtarget to estimate...\n+    if (nFeeNeeded == 0)\n+        nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n+    // ... unless we don't have enough mempool data, in which case fall\n+    // back to a hard-coded fee\n+    if (nFeeNeeded == 0)\n+        nFeeNeeded = CTransaction::minTxFee.GetFee(nTxBytes);\n+    return nFeeNeeded;\n+}\n+\n \n \n "
      },
      {
        "sha": "19a1b185237f55c37b85c9dd06bb4dd853b20108",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33d1f5ee512da5719b793b3867f75f1eea5cf52/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "patch": "@@ -25,12 +25,15 @@\n \n // Settings\n extern CFeeRate payTxFee;\n+extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n \n // -paytxfee default\n static const int64_t DEFAULT_TRANSACTION_FEE = 0;\n // -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const int nHighTransactionFeeWarning = 0.01 * COIN;\n+// Largest (in bytes) free transaction we're willing to create\n+static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n class CAccountingEntry;\n class CCoinControl;\n@@ -265,6 +268,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew);\n     std::string SendMoneyToDestination(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n \n+    static int64_t GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+\n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);"
      }
    ]
  },
  {
    "sha": "4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjdiMWJiMWFjNTRlMDY3ZDg4OTE3MDc1N2E4YzQ1ZjBiYWFhZTNk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-06-23T14:58:59Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-03T17:44:56Z"
      },
      "message": "Sanity checks for estimates\n\nRequire at least 11 samples before giving fee/priority estimates.\n\nAnd have wallet-created transactions go throught the fee-sanity-check\ncode path.",
      "tree": {
        "sha": "137436a4b855fd776d59f019e5a4d304c9253424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/137436a4b855fd776d59f019e5a4d304c9253424"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlO1lpgACgkQdYgkL74406hExQCglkl18z09O5YUKINhSNc2z7Ta\nHvoAoJX9mA/ooGGdXa8UrESPVf2YmYga\n=EuUd\n-----END PGP SIGNATURE-----",
        "payload": "tree 137436a4b855fd776d59f019e5a4d304c9253424\nparent b33d1f5ee512da5719b793b3867f75f1eea5cf52\nauthor Gavin Andresen <gavinandresen@gmail.com> 1403535539 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1404409496 -0400\n\nSanity checks for estimates\n\nRequire at least 11 samples before giving fee/priority estimates.\n\nAnd have wallet-created transactions go throught the fee-sanity-check\ncode path.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33d1f5ee512da5719b793b3867f75f1eea5cf52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b33d1f5ee512da5719b793b3867f75f1eea5cf52"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d1ddf1600dcb97dc36d71daf58d0f66e602b6025",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
        "patch": "@@ -1129,10 +1129,10 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n }\n \n "
      },
      {
        "sha": "4c7b7fd8d4cb54d579906a84ad4a0f17951f7f58",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
        "patch": "@@ -452,7 +452,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n };\n \n "
      },
      {
        "sha": "0a8ad96aace420e615f352de0d5d9135529887a7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7b1bb1ac54e067d889170757a8c45f0baaae3d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
        "patch": "@@ -251,8 +251,13 @@ class CMinerPolicyEstimator\n             std::sort(sortedFeeSamples.begin(), sortedFeeSamples.end(),\n                       std::greater<CFeeRate>());\n         }\n-        if (sortedFeeSamples.size() == 0)\n+        if (sortedFeeSamples.size() < 11)\n+        {\n+            // Eleven is Gavin's Favorite Number\n+            // ... but we also take a maximum of 10 samples per block so eleven means\n+            // we're getting samples from at least two different blocks\n             return CFeeRate(0);\n+        }\n \n         int nBucketSize = history.at(nBlocksToConfirm).FeeSamples();\n \n@@ -281,7 +286,7 @@ class CMinerPolicyEstimator\n             std::sort(sortedPrioritySamples.begin(), sortedPrioritySamples.end(),\n                       std::greater<double>());\n         }\n-        if (sortedPrioritySamples.size() == 0)\n+        if (sortedPrioritySamples.size() < 11)\n             return -1.0;\n \n         int nBucketSize = history.at(nBlocksToConfirm).PrioritySamples();"
      }
    ]
  },
  {
    "sha": "13fc83c77bb9108c00dd7709ce17719edb763273",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2ZjODNjNzdiYjkxMDhjMDBkZDc3MDljZTE3NzE5ZWRiNzYzMjcz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-03T18:25:32Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-03T18:42:16Z"
      },
      "message": "Move fee policy out of core",
      "tree": {
        "sha": "4d9397d208b3c74bea11056ec9402fdfc81a36f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d9397d208b3c74bea11056ec9402fdfc81a36f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13fc83c77bb9108c00dd7709ce17719edb763273",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlO1pAkACgkQdYgkL74406ir7gCeNOMxui6ILJCWkVMxNaKY8WwV\n+K8AoNL0KRYkXGrRiwdzO4MLdiDelLFQ\n=7OZi\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d9397d208b3c74bea11056ec9402fdfc81a36f5\nparent 4b7b1bb1ac54e067d889170757a8c45f0baaae3d\nauthor Gavin Andresen <gavinandresen@gmail.com> 1404411932 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1404412936 -0400\n\nMove fee policy out of core\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13fc83c77bb9108c00dd7709ce17719edb763273",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13fc83c77bb9108c00dd7709ce17719edb763273",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13fc83c77bb9108c00dd7709ce17719edb763273/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7b1bb1ac54e067d889170757a8c45f0baaae3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7b1bb1ac54e067d889170757a8c45f0baaae3d"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 70,
      "deletions": 61
    },
    "files": [
      {
        "sha": "47f3b2a015ae86a6cd4b50b584ba6b5ca45e31db",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -80,7 +80,7 @@ CFeeRate::CFeeRate(int64_t nFeePaid, size_t nSize)\n         nSatoshisPerK = 0;\n }\n \n-int64_t CFeeRate::GetFee(size_t nSize)\n+int64_t CFeeRate::GetFee(size_t nSize) const\n {\n     return nSatoshisPerK*nSize / 1000;\n }"
      },
      {
        "sha": "0387336c98fdb7c58eb453e9dddb88671c6ba1d3",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -125,8 +125,8 @@ class CFeeRate\n     CFeeRate(int64_t nFeePaid, size_t nSize);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n \n-    int64_t GetFee(size_t size); // unit returned is satoshis\n-    int64_t GetFeePerK() { return GetFee(1000); } // satoshis-per-1000-bytes\n+    int64_t GetFee(size_t size) const; // unit returned is satoshis\n+    int64_t GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n \n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n@@ -217,8 +217,6 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n-    static CFeeRate minTxFee;\n-    static CFeeRate minRelayTxFee;\n     static const int CURRENT_VERSION=1;\n \n     // The local variables are made const to prevent unintended modification"
      },
      {
        "sha": "5afae32327464c84ed197fda08ef9a8cbf187b70",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -253,15 +253,16 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n+    strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n+    strUsage += \"  -respendnotify=<cmd>   \" + _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n+    strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + _(\"(default: wallet.dat)\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -respendnotify=<cmd>   \" + _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\") + \"\\n\";\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those part of the blockchain through -rescan on startup\") + \"\\n\";\n     strUsage += \"                         \" + _(\"(default: 1, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n #endif\n@@ -295,8 +296,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += \"  -limitfreerelay=<n>    \" + _(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:15)\") + \"\\n\";\n         strUsage += \"  -maxsigcachesize=<n>   \" + _(\"Limit size of signature cache to <n> entries (default: 50000)\") + \"\\n\";\n     }\n-    strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CTransaction::minTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(CTransaction::minRelayTxFee.GetFeePerK())) + \"\\n\";\n+    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n@@ -610,24 +610,24 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // a transaction spammer can cheaply fill blocks using\n     // 1-satoshi-fee transactions. It should be set above the real\n     // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-mintxfee\"))\n-    {\n-        int64_t n = 0;\n-        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n-            CTransaction::minTxFee = CFeeRate(n);\n-        else\n-            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n-    }\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n         int64_t n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n-            CTransaction::minRelayTxFee = CFeeRate(n);\n+            ::minRelayTxFee = CFeeRate(n);\n         else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n #ifdef ENABLE_WALLET\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        int64_t n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CWallet::minTxFee = CFeeRate(n);\n+        else\n+            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n+    }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n         int64_t nFeePerK = 0;\n@@ -636,10 +636,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (nFeePerK > nHighTransactionFeeWarning)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < CTransaction::minRelayTxFee)\n+        if (payTxFee < ::minRelayTxFee)\n         {\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], CTransaction::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);"
      },
      {
        "sha": "54b926abdb8558a9219f021405c981c91dae1ddd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -38,8 +38,6 @@ using namespace boost;\n \n CCriticalSection cs_main;\n \n-CTxMemPool mempool;\n-\n map<uint256, CBlockIndex*> mapBlockIndex;\n CChain chainActive;\n int64_t nTimeBestReceived = 0;\n@@ -50,10 +48,10 @@ bool fBenchmark = false;\n bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-CFeeRate CTransaction::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate CTransaction::minRelayTxFee = CFeeRate(1000);\n+CFeeRate minRelayTxFee = CFeeRate(1000);\n+\n+CTxMemPool mempool(::minRelayTxFee);\n \n struct COrphanBlock {\n     uint256 hashBlock;\n@@ -617,7 +615,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n         }\n         if (whichType == TX_NULL_DATA)\n             nDataOut++;\n-        else if (txout.IsDust(CTransaction::minRelayTxFee)) {\n+        else if (txout.IsDust(::minRelayTxFee)) {\n             reason = \"dust\";\n             return false;\n         }\n@@ -870,7 +868,7 @@ int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n             return 0;\n     }\n \n-    int64_t nMinFee = tx.minRelayTxFee.GetFee(nBytes);\n+    int64_t nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n     if (fAllowFree)\n     {\n@@ -1009,7 +1007,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Continuously rate-limit free (really, very-low-fee)transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < CTransaction::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n         {\n             static double dFreeCount;\n             static int64_t nLastFreeTime;\n@@ -1022,10 +1020,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n         }\n \n-        if (fRejectInsaneFee && nFees > CTransaction::minRelayTxFee.GetFee(nSize) * 10000)\n+        if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n             return error(\"AcceptToMemoryPool: : insane fees %s, %d > %d\",\n                          hash.ToString(),\n-                         nFees, CTransaction::minRelayTxFee.GetFee(nSize) * 10000);\n+                         nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks."
      },
      {
        "sha": "961f2e78affdd0ffe5893a56e7d1971f29561fa9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -93,6 +93,7 @@ extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n+extern CFeeRate minRelayTxFee;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;"
      },
      {
        "sha": "17918a1280d9334812882718871f3a1a36530b79",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -236,7 +236,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             double dPriorityDelta = 0;\n             int64_t nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < CTransaction::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n             // Prioritise by fee once past the priority size or we run out of high-priority"
      },
      {
        "sha": "e0a524a55e75c471afa8b9d90096dfab666c28f3",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -406,7 +406,7 @@ QString CoinControlDialog::getPriorityLabel(const CTxMemPool& pool, double dPrio\n {\n     // confirmations -> textual description\n     typedef std::map<unsigned int, QString> PriorityDescription;\n-    static PriorityDescription priorityDescriptions = boost::assign::map_list_of\n+    const static PriorityDescription priorityDescriptions = boost::assign::map_list_of\n         (1, tr(\"highest\"))(2, tr(\"higher\"))(3, tr(\"high\"))\n         (5, tr(\"medium-high\"))(6, tr(\"medium\"))\n         (10, tr(\"low-medium\"))(15, tr(\"low\"))\n@@ -452,7 +452,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(CTransaction::minRelayTxFee))\n+            if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n         }\n     }\n@@ -544,7 +544,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < CENT)\n             {\n                 CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n-                if (txout.IsDust(CTransaction::minRelayTxFee))\n+                if (txout.IsDust(::minRelayTxFee))\n                 {\n                     nPayFee += nChange;\n                     nChange = 0;\n@@ -605,17 +605,17 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     // tool tips\n     QString toolTip1 = tr(\"This label turns red, if the transaction size is greater than 1000 bytes.\") + \"<br /><br />\";\n-    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CTransaction::minTxFee.GetFeePerK())) + \"<br /><br />\";\n+    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK())) + \"<br /><br />\";\n     toolTip1 += tr(\"Can vary +/- 1 byte per input.\");\n \n     QString toolTip2 = tr(\"Transactions with higher priority are more likely to get included into a block.\") + \"<br /><br />\";\n     toolTip2 += tr(\"This label turns red, if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n-    toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CTransaction::minTxFee.GetFeePerK()));\n+    toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n \n-    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CTransaction::minRelayTxFee.GetFee(546)));\n+    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    double dFeeVary = (double)std::max(CTransaction::minTxFee.GetFeePerK(), payTxFee.GetFeePerK()) / 1000;\n+    double dFeeVary = (double)std::max(CWallet::minTxFee.GetFeePerK(), payTxFee.GetFeePerK()) / 1000;\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);"
      },
      {
        "sha": "60a131df7ef028e6c46fef0409915e0b4b4ee084",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"core.h\"\n #include \"init.h\"\n+#include \"main.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n \n@@ -212,7 +213,7 @@ bool isDust(const QString& address, qint64 amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script; script.SetDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(CTransaction::minRelayTxFee);\n+    return txOut.IsDust(::minRelayTxFee);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "9502dba904f3baab0a32c3e7680a666812a6afae",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -14,7 +14,10 @@\n #include \"monitoreddatamapper.h\"\n #include \"optionsmodel.h\"\n \n-#include \"main.h\" // for CTransaction::minTxFee and MAX_SCRIPTCHECK_THREADS\n+#include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n+#ifdef ENABLE_WALLET\n+#include \"wallet.h\" // for CWallet::minTxFee\n+#endif\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n \n@@ -101,7 +104,9 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n #endif\n \n     ui->unit->setModel(new BitcoinUnits(this));\n-    ui->transactionFee->setSingleStep(CTransaction::minTxFee.GetFeePerK());\n+#ifdef ENABLE_WALLET\n+    ui->transactionFee->setSingleStep(CWallet::minTxFee.GetFeePerK());\n+#endif\n \n     /* Widget-to-option mapper */\n     mapper = new MonitoredDataMapper(this);"
      },
      {
        "sha": "53db2c5cd96375f9b6305d68329b6495583d8f69",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -551,7 +551,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(CTransaction::minRelayTxFee)) {\n+        if (txOut.IsDust(::minRelayTxFee)) {\n             emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "9ed6b52513ba5201494a1520b0a544d18bb6e833",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -84,7 +84,7 @@ Value getinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "cd3bd59f8f6ed32d941816f810972809aaabeaf3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -372,7 +372,7 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n     Array localAddresses;\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "a852de5da885092a674a6fea5dbbf557bb892202",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -80,13 +80,13 @@ class CBlockAverage\n \n     // Used as belt-and-suspenders check when reading to detect\n     // file corruption\n-    bool AreSane(const std::vector<CFeeRate>& vecFee)\n+    bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n     {\n         BOOST_FOREACH(CFeeRate fee, vecFee)\n         {\n             if (fee < CFeeRate(0))\n                 return false;\n-            if (fee.GetFee(1000) > CTransaction::minRelayTxFee.GetFee(1000) * 10000)\n+            if (fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000)\n                 return false;\n         }\n         return true;\n@@ -109,10 +109,10 @@ class CBlockAverage\n         fileout << vecPriority;\n     }\n \n-    void Read(CAutoFile& filein) {\n+    void Read(CAutoFile& filein, const CFeeRate& minRelayFee) {\n         std::vector<CFeeRate> vecFee;\n         filein >> vecFee;\n-        if (AreSane(vecFee))\n+        if (AreSane(vecFee, minRelayFee))\n             feeSamples.insert(feeSamples.end(), vecFee.begin(), vecFee.end());\n         else\n             throw runtime_error(\"Corrupt fee value in estimates file.\");\n@@ -141,15 +141,15 @@ class CMinerPolicyEstimator\n \n     // nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n     // nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n-    void seenTxConfirm(CFeeRate feeRate, double dPriority, int nBlocksAgo)\n+    void seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo)\n     {\n         // Last entry records \"everything else\".\n         int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n         assert(nBlocksTruncated >= 0);\n \n         // We need to guess why the transaction was included in a block-- either\n         // because it is high-priority or because it has sufficient fees.\n-        bool sufficientFee = (feeRate > CTransaction::minRelayTxFee);\n+        bool sufficientFee = (feeRate > minRelayFee);\n         bool sufficientPriority = AllowFree(dPriority);\n         const char* assignedTo = \"unassigned\";\n         if (sufficientFee && !sufficientPriority)\n@@ -177,7 +177,7 @@ class CMinerPolicyEstimator\n         history.resize(nEntries);\n     }\n \n-    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight)\n+    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee)\n     {\n         if (nBlockHeight <= nBestSeenHeight)\n         {\n@@ -222,7 +222,7 @@ class CMinerPolicyEstimator\n                 // Fees are stored and reported as BTC-per-kb:\n                 CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n                 double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n-                seenTxConfirm(feeRate, dPriority, i);\n+                seenTxConfirm(feeRate, minRelayFee, dPriority, i);\n             }\n         }\n         for (size_t i = 0; i < history.size(); i++) {\n@@ -313,7 +313,7 @@ class CMinerPolicyEstimator\n         }\n     }\n \n-    void Read(CAutoFile& filein)\n+    void Read(CAutoFile& filein, const CFeeRate& minRelayFee)\n     {\n         filein >> nBestSeenHeight;\n         size_t numEntries;\n@@ -322,14 +322,14 @@ class CMinerPolicyEstimator\n         for (size_t i = 0; i < numEntries; i++)\n         {\n             CBlockAverage entry;\n-            entry.Read(filein);\n+            entry.Read(filein, minRelayFee);\n             history.push_back(entry);\n         }\n     }\n };\n \n \n-CTxMemPool::CTxMemPool()\n+CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) : minRelayFee(_minRelayFee)\n {\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n@@ -445,7 +445,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n         if (mapTx.count(hash))\n             entries.push_back(mapTx[hash]);\n     }\n-    minerPolicyEstimator->seenBlock(entries, nBlockHeight);\n+    minerPolicyEstimator->seenBlock(entries, nBlockHeight, minRelayFee);\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         std::list<CTransaction> dummy;\n@@ -560,7 +560,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n             return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n-        minerPolicyEstimator->Read(filein);\n+        minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (std::exception &e) {\n         LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");"
      },
      {
        "sha": "41b2c52f39c70922f0403ca706c48d178ab552d7",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -67,13 +67,15 @@ class CTxMemPool\n     unsigned int nTransactionsUpdated;\n     CMinerPolicyEstimator* minerPolicyEstimator;\n \n+    CFeeRate minRelayFee; // Passed to constructor to avoid dependency on main\n+\n public:\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, int64_t> > mapDeltas;\n \n-    CTxMemPool();\n+    CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n \n     /*"
      },
      {
        "sha": "318a1388d20eda17b0884b2519808cafcfca8205",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -21,6 +21,9 @@ CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = 1;\n bool bSpendZeroConfChange = true;\n \n+/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n+CFeeRate CWallet::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapWallet\n@@ -1294,7 +1297,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n-                    if (txout.IsDust(CTransaction::minRelayTxFee))\n+                    if (txout.IsDust(::minRelayTxFee))\n                     {\n                         strFailReason = _(\"Transaction amount too small\");\n                         return false;\n@@ -1355,7 +1358,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(CTransaction::minRelayTxFee))\n+                    if (newTxOut.IsDust(::minRelayTxFee))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();\n@@ -1537,7 +1540,7 @@ int64_t CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     // ... unless we don't have enough mempool data, in which case fall\n     // back to a hard-coded fee\n     if (nFeeNeeded == 0)\n-        nFeeNeeded = CTransaction::minTxFee.GetFee(nTxBytes);\n+        nFeeNeeded = minTxFee.GetFee(nTxBytes);\n     return nFeeNeeded;\n }\n "
      },
      {
        "sha": "a5162bb8386668bc1c4205d587728f6a01f195c3",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13fc83c77bb9108c00dd7709ce17719edb763273/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13fc83c77bb9108c00dd7709ce17719edb763273/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=13fc83c77bb9108c00dd7709ce17719edb763273",
        "patch": "@@ -268,6 +268,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew);\n     std::string SendMoneyToDestination(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n \n+    static CFeeRate minTxFee;\n     static int64_t GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n     bool NewKeyPool();"
      }
    ]
  }
]