[
  {
    "sha": "65d0697fe34de1c8a172b5267f122a2e15e63b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWQwNjk3ZmUzNGRlMWM4YTE3MmI1MjY3ZjEyMmEyZTE1ZTYzYjk0",
    "commit": {
      "author": {
        "name": "pnn",
        "email": "pierre@pnn.sh",
        "date": "2021-05-06T21:08:46Z"
      },
      "committer": {
        "name": "pnn",
        "email": "pierre@pnn.sh",
        "date": "2021-05-06T21:08:46Z"
      },
      "message": "rpc: allow dumptxoutset to dump human-readable data",
      "tree": {
        "sha": "bbfe96c1a7c463b2be26ebc79ae099ae95b2e5c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbfe96c1a7c463b2be26ebc79ae099ae95b2e5c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65d0697fe34de1c8a172b5267f122a2e15e63b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "no_user",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEWCV6LlmGs/fLm2z1iQdEWv5Fu/oFAmCUWt4ACgkQiQdEWv5F\nu/qWCA//UBdf3a/b4KO8cjT4EuPytY61aQPbqxonbp1vlKQ38iQPIIJBmXDl0ZaR\n+FnQ6YNTayCBZZZJtBqEsGP5dK9yWBgNn+3F+Xq7FYuHmg40VE5OtSDA6+gkSFKS\nYjWWmefYTjOTr9SqZYkZfrk4NuXYCoWO6aKfwF/4b1J/6SL9cv2CL8I0+cfcJU6u\nc/T8/nWOPmOCUMtBKFuirEmQVDA2kavbIgc6C5JYB1J977mP4f1iXKO8nB7ql6tt\nDxKrS2Kfk5p/YDxvQCBvMt+EFXNFBsCgW+sh2fUZoxRGIf2CuwBAjAzdKIk41Ruz\nkMQMR5oL+65Y9KjTlgqTG7tiffU79uPb03oay1MwSejAW1iygdDnKSog09G6hxtG\nANx5q+JG4DuE4aUInVTbwXqCT0mzJkTTcqvbSEzKF5ijCVnw5XpUxRepOUuh7AnE\nsK99+DI8WK8Le8xrcnTJ0mOZO382odZnTmENY2ast3QFIwaaM0svmobhDlLCUsiV\nuDBCgkNCvYDZgmT59K43R2l1IN4WK9kRoLzy9u1Sw256xVXOI/vLVw4qk+qtIJqN\ndVv6l6d6O3c48hXdeg26CxWeoswEB7xV2Ti5wMiIPjFuUkR0wgQPTV46I6OPXZLz\nZ/SqRHwVtGjStHXY38aR/yJfTDPejnjZI0jOUUwJ+K/Xj5e38a4=\n=8Wle\n-----END PGP SIGNATURE-----",
        "payload": "tree bbfe96c1a7c463b2be26ebc79ae099ae95b2e5c9\nparent 06d573f053c63eb6521c62d210c5924418ae2b83\nauthor pnn <pierre@pnn.sh> 1620335326 +0900\ncommitter pnn <pierre@pnn.sh> 1620335326 +0900\n\nrpc: allow dumptxoutset to dump human-readable data\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d0697fe34de1c8a172b5267f122a2e15e63b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65d0697fe34de1c8a172b5267f122a2e15e63b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d0697fe34de1c8a172b5267f122a2e15e63b94/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "06d573f053c63eb6521c62d210c5924418ae2b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06d573f053c63eb6521c62d210c5924418ae2b83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06d573f053c63eb6521c62d210c5924418ae2b83"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 126,
      "deletions": 30
    },
    "files": [
      {
        "sha": "ef747476a3dcf657f0ff233bd8fa5f31fc5a8661",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 10,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -33,6 +33,7 @@\n #include <txmempool.h>\n #include <undo.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -2516,15 +2517,35 @@ static RPCHelpMan getblockfilter()\n  */\n static RPCHelpMan dumptxoutset()\n {\n+    const std::vector<std::pair<std::string, coinascii_cb_t>> ascii_types{\n+        {\"txid\",         [](const COutPoint& k, const Coin& c) { return k.hash.GetHex(); }},\n+        {\"vout\",         [](const COutPoint& k, const Coin& c) { return ToString(static_cast<int32_t>(k.n)); }},\n+        {\"value\",        [](const COutPoint& k, const Coin& c) { return ToString(c.out.nValue); }},\n+        {\"coinbase\",     [](const COutPoint& k, const Coin& c) { return ToString(c.fCoinBase); }},\n+        {\"height\",       [](const COutPoint& k, const Coin& c) { return ToString(static_cast<uint32_t>(c.nHeight)); }},\n+        {\"scriptPubKey\", [](const COutPoint& k, const Coin& c) { return HexStr(c.out.scriptPubKey); }},\n+        // add any other desired items here\n+    };\n+\n+    std::vector<RPCArg> ascii_args;\n+    std::transform(std::begin(ascii_types), std::end(ascii_types), std::back_inserter(ascii_args),\n+            [](const std::pair<std::string, coinascii_cb_t>& t) { return RPCArg{t.first, RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Info to write for a given UTXO\"}; });\n+\n     return RPCHelpMan{\n         \"dumptxoutset\",\n-        \"\\nWrite the serialized UTXO set to disk.\\n\",\n+        \"\\nWrite the UTXO set to disk.\\n\",\n         {\n             {\"path\",\n                 RPCArg::Type::STR,\n                 RPCArg::Optional::NO,\n                 /* default_val */ \"\",\n                 \"path to the output file. If relative, will be prefixed by datadir.\"},\n+            {\"format\", RPCArg::Type::ARR, RPCArg::DefaultHint{\"compact serialized format\"},\n+                                        \"If no argument is provided, a compact binary serialized format is used; otherwise only requested items \"\n+                                        \"available below are written in ASCII format (if an empty array is provided, all items are written in ASCII).\",\n+                                        ascii_args, \"format\"},\n+            {\"show_header\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include the header line in non-serialized (ASCII) mode\"},\n+            {\"separator\", RPCArg::Type::STR, RPCArg::Default{\",\"}, \"Field separator to use in non-serialized (ASCII) mode\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -2536,10 +2557,33 @@ static RPCHelpMan dumptxoutset()\n                 }\n         },\n         RPCExamples{\n-            HelpExampleCli(\"dumptxoutset\", \"utxo.dat\")\n+            HelpExampleCli(\"dumptxoutset\", \"utxo.dat\") +\n+            HelpExampleCli(\"dumptxoutset\", \"utxo.dat '[]'\") +\n+            HelpExampleCli(\"dumptxoutset\", \"utxo.dat '[\\\"txid\\\", \\\"vout\\\"]' false ':'\")\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    // handle optional ASCII parameters\n+    const bool is_compact = request.params[1].isNull();\n+    const bool show_header = request.params[2].isNull() || request.params[2].get_bool();\n+    const std::string separator = request.params[3].isNull() ? \",\" : request.params[3].get_str();\n+    std::vector<std::pair<std::string, coinascii_cb_t>> requested;\n+    if (!is_compact) {\n+        const auto& arr = request.params[1].get_array();\n+        const std::unordered_map<std::string, coinascii_cb_t> ascii_map(std::begin(ascii_types), std::end(ascii_types));\n+        for(size_t i = 0; i < arr.size(); ++i) {\n+            const auto it = ascii_map.find(arr[i].get_str());\n+            if (it == std::end(ascii_map))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"unable to find item '\"+arr[i].get_str()+\"'\");\n+\n+            requested.push_back(*it);\n+        }\n+\n+        // if nothing was found, shows everything by default\n+        if (requested.size() == 0)\n+            requested = ascii_types;\n+    }\n+\n     const fs::path path = fsbridge::AbsPathJoin(GetDataDir(), request.params[0].get_str());\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n@@ -2552,10 +2596,10 @@ static RPCHelpMan dumptxoutset()\n             \"move it out of the way first\");\n     }\n \n-    FILE* file{fsbridge::fopen(temppath, \"wb\")};\n+    FILE* file{fsbridge::fopen(temppath, is_compact ? \"wb\" : \"w\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n-    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n+    UniValue result = CreateUTXOSnapshot(is_compact, show_header, separator, node, node.chainman->ActiveChainstate(), afile, requested);\n     fs::rename(temppath, path);\n \n     result.pushKV(\"path\", path.string());\n@@ -2564,7 +2608,7 @@ static RPCHelpMan dumptxoutset()\n     };\n }\n \n-UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)\n+UniValue CreateUTXOSnapshot(const bool is_compact, const bool show_header, const std::string& separator, NodeContext& node, CChainState& chainstate, CAutoFile& afile, const std::vector<std::pair<std::string, coinascii_cb_t>>& requested)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor;\n     CCoinsStats stats{CoinStatsHashType::NONE};\n@@ -2596,9 +2640,18 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n         CHECK_NONFATAL(tip);\n     }\n \n-    SnapshotMetadata metadata{tip->GetBlockHash(), stats.coins_count, tip->nChainTx};\n-\n-    afile << metadata;\n+    if (is_compact) {\n+        SnapshotMetadata metadata{tip->GetBlockHash(), stats.coins_count, tip->nChainTx};\n+        afile << metadata;\n+    } else if (show_header) {\n+        afile.write(\"#(blockhash \" + tip->GetBlockHash().ToString() + \" ) \");\n+        for (auto it = std::begin(requested); it != std::end(requested); ++it) {\n+            if (it != std::begin(requested))\n+                afile.write(separator);\n+            afile.write(it->first);\n+        }\n+        afile.write(\"\\n\");\n+    }\n \n     COutPoint key;\n     Coin coin;\n@@ -2608,8 +2661,17 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n         if (iter % 5000 == 0) node.rpc_interruption_point();\n         ++iter;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n-            afile << key;\n-            afile << coin;\n+            if (is_compact) {\n+                afile << key;\n+                afile << coin;\n+            } else {\n+                for (auto it = std::begin(requested); it != std::end(requested); ++it) {\n+                    if (it != std::begin(requested))\n+                        afile.write(separator);\n+                    afile.write(it->second(key, coin));\n+                }\n+                afile.write(\"\\n\");\n+            }\n         }\n \n         pcursor->Next();"
      },
      {
        "sha": "4a80b308866c1c661be7beccb28c69e242184c74",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -9,6 +9,7 @@\n #include <core_io.h>\n #include <streams.h>\n #include <sync.h>\n+#include <coins.h>\n \n #include <any>\n #include <stdint.h>\n@@ -26,6 +27,7 @@ class UniValue;\n struct NodeContext;\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n+using coinascii_cb_t = std::function<std::string(const COutPoint&, const Coin&)>;\n \n /**\n  * Get the difficulty of the net wrt to the given block index.\n@@ -68,6 +70,6 @@ CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n  * Helper to create UTXO snapshots given a chainstate and a file handle.\n  * @return a UniValue map containing metadata about the snapshot.\n  */\n-UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n+UniValue CreateUTXOSnapshot(const bool is_compact, const bool show_header, const std::string& separator, NodeContext& node, CChainState& chainstate, CAutoFile& afile, const std::vector<std::pair<std::string, coinascii_cb_t>>& requested);\n \n #endif"
      },
      {
        "sha": "e217a2b57eafea28a1a37f8b4555d98238049ce1",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -77,6 +77,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 8, \"fee_rate\"},\n     { \"sendmany\", 9, \"verbose\" },\n     { \"deriveaddresses\", 1, \"range\" },\n+    { \"dumptxoutset\", 1, \"format\" },\n+    { \"dumptxoutset\", 2, \"show_header\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      },
      {
        "sha": "5836dda01e28e6e8042bcca74f45a39ec5e99f2d",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -643,6 +643,11 @@ class CAutoFile\n             throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n     }\n \n+    void write(const std::string& s)\n+    {\n+        write(s.c_str(), s.size());\n+    }\n+\n     template<typename T>\n     CAutoFile& operator<<(const T& obj)\n     {"
      },
      {
        "sha": "ab6a48d239cad01847b02025e597ae58740a4133",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -183,7 +183,7 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleati\n     FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n     CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n \n-    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    UniValue result = CreateUTXOSnapshot(false, false, \"\", node, node.chainman->ActiveChainstate(), auto_outfile, {});\n     BOOST_TEST_MESSAGE(\n         \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n "
      },
      {
        "sha": "5dcc94af1630e04bddfc2e11969dbb0901db6821",
        "filename": "test/functional/rpc_dumptxoutset.py",
        "status": "modified",
        "additions": 43,
        "deletions": 18,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0697fe34de1c8a172b5267f122a2e15e63b94/test/functional/rpc_dumptxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0697fe34de1c8a172b5267f122a2e15e63b94/test/functional/rpc_dumptxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_dumptxoutset.py?ref=65d0697fe34de1c8a172b5267f122a2e15e63b94",
        "patch": "@@ -18,34 +18,59 @@ def set_test_params(self):\n \n     def run_test(self):\n         \"\"\"Test a trivial usage of the dumptxoutset RPC command.\"\"\"\n+\n+        # format: test title, kwargs, file hash\n+        TESTS = [[\"no_option\",      {},\n+                  'be032e5f248264ba08e11099ac09dbd001f6f87ffc68bf0f87043d8146d50664'],\n+                 [\"all_data\",       {\"format\": []},\n+                  '5554c7d08c2f9aaacbbc66617eb59f13aab4b8c0574f4d8b12f728c60dc7d287'],\n+                 [\"partial_data_1\", {\"format\": [\"txid\"]},\n+                  'eaec3b56b285dcae610be0975d494befa5a6a130211dda0e1ec1ef2c4afa4389'],\n+                 [\"partial_data_order\", {\"format\": [\"height\", \"vout\"]},\n+                  '3e5d6d1cb44595eb7c9d13b3370d14b8826c0d81798c29339794623d4ab6091c'],\n+                 [\"partial_data_double\", {\"format\": [\"scriptPubKey\", \"scriptPubKey\"]},\n+                  '0eb83a3bf6a7580333fdaf7fd6cebebe93096e032d49049229124ca699222919'],\n+                 [\"no_header\",      {\"format\": [], \"show_header\": False},\n+                  'ba85c1db5df6de80c783f2c9a617de4bd7e0e92125a0d318532218eaaed28bfa'],\n+                 [\"separator\",      {\"format\": [], \"separator\": \":\"},\n+                  '3352b4db7a9f63629cf255c1a805241f1bee2b557e5f113993669cd3085e9b0f'],\n+                 [\"all_options\",    {\"format\": [], \"show_header\": False, \"separator\": \":\"},\n+                  '7df9588375f8bd01d0b6f902a55e086c2d0549c3f08f389baa28b398e987f8a2']]\n+\n         node = self.nodes[0]\n         mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n         node.setmocktime(mocktime)\n         node.generate(100)\n \n-        FILENAME = 'txoutset.dat'\n-        out = node.dumptxoutset(FILENAME)\n-        expected_path = Path(node.datadir) / self.chain / FILENAME\n-\n-        assert expected_path.is_file()\n+        for test in TESTS:\n+            self.log.info(test[0])\n+            test[1][\"path\"] = test[0]+'_txoutset.dat'\n+            out = node.dumptxoutset(**test[1])\n+            expected_path = Path(node.datadir) / self.chain / test[1][\"path\"]\n \n-        assert_equal(out['coins_written'], 100)\n-        assert_equal(out['base_height'], 100)\n-        assert_equal(out['path'], str(expected_path))\n-        # Blockhash should be deterministic based on mocked time.\n-        assert_equal(\n-            out['base_hash'],\n-            '6fd417acba2a8738b06fee43330c50d58e6a725046c3d843c8dd7e51d46d1ed6')\n+            assert expected_path.is_file()\n \n-        with open(str(expected_path), 'rb') as f:\n-            digest = hashlib.sha256(f.read()).hexdigest()\n-            # UTXO snapshot hash should be deterministic based on mocked time.\n+            assert_equal(out['coins_written'], 100)\n+            assert_equal(out['base_height'], 100)\n+            assert_equal(out['path'], str(expected_path))\n+            # Blockhash should be deterministic based on mocked time.\n             assert_equal(\n-                digest, '7ae82c986fa5445678d2a21453bb1c86d39e47af13da137640c2b1cf8093691c')\n+                out['base_hash'],\n+                '6fd417acba2a8738b06fee43330c50d58e6a725046c3d843c8dd7e51d46d1ed6')\n \n-        # Specifying a path to an existing file will fail.\n+            with open(str(expected_path), 'rb') as f:\n+                digest = hashlib.sha256(f.read()).hexdigest()\n+                # UTXO snapshot hash should be deterministic based on mocked time.\n+                assert_equal(digest, test[2])\n+\n+            # Specifying a path to an existing file will fail.\n+            assert_raises_rpc_error(\n+                -8, '{} already exists'.format(test[1][\"path\"]),  node.dumptxoutset, test[1][\"path\"])\n+\n+        # Other failing tests\n         assert_raises_rpc_error(\n-            -8, '{} already exists'.format(FILENAME),  node.dumptxoutset, FILENAME)\n+            -8, 'unable to find item \\'sample\\'',  node.dumptxoutset, path='xxx', format=['sample'])\n+\n \n if __name__ == '__main__':\n     DumptxoutsetTest().main()"
      }
    ]
  }
]