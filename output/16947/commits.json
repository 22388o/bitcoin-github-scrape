[
  {
    "sha": "15ac916642f20918f66e32729bb6b0b674e3bc24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWFjOTE2NjQyZjIwOTE4ZjY2ZTMyNzI5YmI2YjBiNjc0ZTNiYzI0",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-23T20:54:01Z"
      },
      "committer": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-24T05:14:20Z"
      },
      "message": "doc: Doxygen-friendly descriptor.h comments",
      "tree": {
        "sha": "8a751a6953f87e1c782f4b4c66d77cd746cbb728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a751a6953f87e1c782f4b4c66d77cd746cbb728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15ac916642f20918f66e32729bb6b0b674e3bc24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ac916642f20918f66e32729bb6b0b674e3bc24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15ac916642f20918f66e32729bb6b0b674e3bc24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ac916642f20918f66e32729bb6b0b674e3bc24/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce829888861a6dc6a29da669584ada961d965fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce829888861a6dc6a29da669584ada961d965fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce829888861a6dc6a29da669584ada961d965fa"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 40,
      "deletions": 38
    },
    "files": [
      {
        "sha": "5a1b55259a4b51bc1f33b3cfc6fbb1dcbadbbdb1",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 40,
        "deletions": 38,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ac916642f20918f66e32729bb6b0b674e3bc24/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ac916642f20918f66e32729bb6b0b674e3bc24/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=15ac916642f20918f66e32729bb6b0b674e3bc24",
        "patch": "@@ -11,22 +11,24 @@\n \n #include <vector>\n \n-// Descriptors are strings that describe a set of scriptPubKeys, together with\n-// all information necessary to solve them. By combining all information into\n-// one, they avoid the need to separately import keys and scripts.\n-//\n-// Descriptors may be ranged, which occurs when the public keys inside are\n-// specified in the form of HD chains (xpubs).\n-//\n-// Descriptors always represent public information - public keys and scripts -\n-// but in cases where private keys need to be conveyed along with a descriptor,\n-// they can be included inside by changing public keys to private keys (WIF\n-// format), and changing xpubs by xprvs.\n-//\n-// Reference documentation about the descriptor language can be found in\n-// doc/descriptors.md.\n-\n-/** Interface for parsed descriptor objects. */\n+\n+/** \\brief Interface for parsed descriptor objects.\n+ *\n+ * Descriptors are strings that describe a set of scriptPubKeys, together with\n+ * all information necessary to solve them. By combining all information into\n+ * one, they avoid the need to separately import keys and scripts.\n+ *\n+ * Descriptors may be ranged, which occurs when the public keys inside are\n+ * specified in the form of HD chains (xpubs).\n+ *\n+ * Descriptors always represent public information - public keys and scripts -\n+ * but in cases where private keys need to be conveyed along with a descriptor,\n+ * they can be included inside by changing public keys to private keys (WIF\n+ * format), and changing xpubs by xprvs.\n+ *\n+ * Reference documentation about the descriptor language can be found in\n+ * doc/descriptors.md.\n+ */\n struct Descriptor {\n     virtual ~Descriptor() = default;\n \n@@ -45,51 +47,51 @@ struct Descriptor {\n \n     /** Expand a descriptor at a specified position.\n      *\n-     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * provider: the provider to query for private keys in case of hardened derivation.\n-     * output_scripts: the expanded scriptPubKeys will be put here.\n-     * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n-     * cache: vector which will be overwritten with cache data necessary to evaluate the descriptor at this point without access to private keys.\n+     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider: The provider to query for private keys in case of hardened derivation.\n+     * @param[out] output_scripts: The expanded scriptPubKeys.\n+     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n+     * @param[out] cache: Cache data necessary to evaluate the descriptor at this point without access to private keys.\n      */\n     virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position using cached expansion data.\n      *\n-     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * cache: vector from which cached expansion data will be read.\n-     * output_scripts: the expanded scriptPubKeys will be put here.\n-     * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n+     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] cache: Cached expansion data.\n+     * @param[out] output_scripts: The expanded scriptPubKeys.\n+     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n \n     /** Expand the private key for a descriptor at a specified position, if possible.\n      *\n-     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * provider: the provider to query for the private keys.\n-     * out: any private keys available for the specified pos will be placed here.\n+     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider: The provider to query for the private keys.\n+     * @param[out] out: Any private keys available for the specified `pos`.\n      */\n     virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n };\n \n-/** Parse a descriptor string. Included private keys are put in out.\n+/** Parse a `descriptor` string. Included private keys are put in `out`.\n  *\n- * If the descriptor has a checksum, it must be valid. If require_checksum\n+ * If the descriptor has a checksum, it must be valid. If `require_checksum`\n  * is set, the checksum is mandatory - otherwise it is optional.\n  *\n  * If a parse error occurs, or the checksum is missing/invalid, or anything\n- * else is wrong, nullptr is returned.\n+ * else is wrong, `nullptr` is returned.\n  */\n std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum = false);\n \n-/** Get the checksum for a descriptor.\n+/** Get the checksum for a `descriptor`.\n  *\n- * If it already has one, and it is correct, return the checksum in the input.\n- * If it already has one that is wrong, return \"\".\n- * If it does not already have one, return the checksum that would need to be added.\n+ * - If it already has one, and it is correct, return the checksum in the input.\n+ * - If it already has one that is wrong, return \"\".\n+ * - If it does not already have one, return the checksum that would need to be added.\n  */\n std::string GetDescriptorChecksum(const std::string& descriptor);\n \n-/** Find a descriptor for the specified script, using information from provider where possible.\n+/** Find a descriptor for the specified `script`, using information from `provider` where possible.\n  *\n  * A non-ranged descriptor which only generates the specified script will be returned in all\n  * circumstances.\n@@ -98,9 +100,9 @@ std::string GetDescriptorChecksum(const std::string& descriptor);\n  * descriptor.\n  *\n  * - If all information for solving `script` is present in `provider`, a descriptor will be returned\n- *   which is `IsSolvable()` and encapsulates said information.\n+ *   which is IsSolvable() and encapsulates said information.\n  * - Failing that, if `script` corresponds to a known address type, an \"addr()\" descriptor will be\n- *   returned (which is not `IsSolvable()`).\n+ *   returned (which is not IsSolvable()).\n  * - Failing that, a \"raw()\" descriptor is returned.\n  */\n std::unique_ptr<Descriptor> InferDescriptor(const CScript& script, const SigningProvider& provider);"
      }
    ]
  }
]