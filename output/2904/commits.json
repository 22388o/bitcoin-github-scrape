[
  {
    "sha": "20469d83dd2fd7d8efacf94f017b926be7c92e63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDQ2OWQ4M2RkMmZkN2Q4ZWZhY2Y5NGYwMTdiOTI2YmU3YzkyZTYz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-08-16T04:53:21Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-08-23T19:01:57Z"
      },
      "message": "[QT] Don't ask for a passphrase to getnewaddress.\n\nWith an encrypted wallet the GUI was prompting for a passphrase every time\n the user requested a new address.  This is unnecessary, increases the\n exposure to keyboard sniffers, and discourages using fresh addresses for\n every transaction.\n\nInstead only prompt for a passphrase when the keypool runs out, also call\n the new address function with the flag that prevents reuse.\n\nThanks to AlexNagy on IRC for pointing this out and who wouldn't take any\n lip from a curmudgeonly developer and insisted on what he knew to be true.",
      "tree": {
        "sha": "8720b5fe9d1ae1ea9c2b67886e37bc9c7cd9f166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8720b5fe9d1ae1ea9c2b67886e37bc9c7cd9f166"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20469d83dd2fd7d8efacf94f017b926be7c92e63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20469d83dd2fd7d8efacf94f017b926be7c92e63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20469d83dd2fd7d8efacf94f017b926be7c92e63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20469d83dd2fd7d8efacf94f017b926be7c92e63/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b60012f2b6770105557db2af40dc34947e884330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b60012f2b6770105557db2af40dc34947e884330",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b60012f2b6770105557db2af40dc34947e884330"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d4a7a92876fada1fe41d6d2a5dfd19f43e39e6fa",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20469d83dd2fd7d8efacf94f017b926be7c92e63/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20469d83dd2fd7d8efacf94f017b926be7c92e63/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=20469d83dd2fd7d8efacf94f017b926be7c92e63",
        "patch": "@@ -355,18 +355,21 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     else if(type == Receive)\n     {\n         // Generate a new address to associate with given label\n-        WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n-        if(!ctx.isValid())\n-        {\n-            // Unlock wallet failed or was cancelled\n-            editStatus = WALLET_UNLOCK_FAILURE;\n-            return QString();\n-        }\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey, true))\n+        if(!wallet->GetKeyFromPool(newKey, false))\n         {\n-            editStatus = KEY_GENERATION_FAILURE;\n-            return QString();\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if(!ctx.isValid())\n+            {\n+                // Unlock wallet failed or was cancelled\n+                editStatus = WALLET_UNLOCK_FAILURE;\n+                return QString();\n+            }\n+            if(!wallet->GetKeyFromPool(newKey, false))\n+            {\n+                editStatus = KEY_GENERATION_FAILURE;\n+                return QString();\n+            }\n         }\n         strAddress = CBitcoinAddress(newKey.GetID()).ToString();\n     }"
      }
    ]
  },
  {
    "sha": "71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWFjNTA1MmQ4M2ZjYmEyMWEwOWU1ZTJiN2FkNjZmYWVhNmJkNDJh",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-08-23T19:54:50Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-08-23T19:54:50Z"
      },
      "message": "Remove fAllowReuse from GetKeyFromPool.\n\nWith the GUI password fix this was always false.",
      "tree": {
        "sha": "45c6cf793ee33237699ed83d8cd12d8fdefb4a6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c6cf793ee33237699ed83d8cd12d8fdefb4a6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20469d83dd2fd7d8efacf94f017b926be7c92e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20469d83dd2fd7d8efacf94f017b926be7c92e63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20469d83dd2fd7d8efacf94f017b926be7c92e63"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c607fe14d3869da04063fe02b82de741e77c9e3b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -893,7 +893,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         RandAddSeedPerfmon();\n \n         CPubKey newDefaultKey;\n-        if (pwalletMain->GetKeyFromPool(newDefaultKey, false)) {\n+        if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n             pwalletMain->SetDefaultKey(newDefaultKey);\n             if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n                 strErrors << _(\"Cannot write default address\") << \"\\n\";"
      },
      {
        "sha": "03517c657fd1a6124786c8d8f351e4be143a1c5a",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -356,7 +356,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         // Generate a new address to associate with given label\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey, false))\n+        if(!wallet->GetKeyFromPool(newKey))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -365,7 +365,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!wallet->GetKeyFromPool(newKey, false))\n+            if(!wallet->GetKeyFromPool(newKey))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();"
      },
      {
        "sha": "ff3c2a0981523bb3651fa2507fa364ba440c1c6a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -531,7 +531,7 @@ PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QB\n     }\n     else {\n         CPubKey newKey;\n-        if (wallet->GetKeyFromPool(newKey, false)) {\n+        if (wallet->GetKeyFromPool(newKey)) {\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n "
      },
      {
        "sha": "34bd4ffccfaad0a068ca41860885274daac30887",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -110,7 +110,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey, false))\n+    if (!pwalletMain->GetKeyFromPool(newKey))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n@@ -148,7 +148,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Generate a new key\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n-        if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n+        if (!pwalletMain->GetKeyFromPool(account.vchPubKey))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n         pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");"
      },
      {
        "sha": "7a3855c025333da2a3b3e918d52118291ffffe4d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -493,7 +493,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                     if (txout.scriptPubKey == scriptDefaultKey)\n                     {\n                         CPubKey newDefaultKey;\n-                        if (GetKeyFromPool(newDefaultKey, false))\n+                        if (GetKeyFromPool(newDefaultKey))\n                         {\n                             SetDefaultKey(newDefaultKey);\n                             SetAddressBook(vchDefaultKey.GetID(), \"\", \"receive\");\n@@ -1647,7 +1647,7 @@ void CWallet::ReturnKey(int64 nIndex)\n     printf(\"keypool return %\"PRI64d\"\\n\", nIndex);\n }\n \n-bool CWallet::GetKeyFromPool(CPubKey& result, bool fAllowReuse)\n+bool CWallet::GetKeyFromPool(CPubKey& result)\n {\n     int64 nIndex = 0;\n     CKeyPool keypool;\n@@ -1656,11 +1656,6 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool fAllowReuse)\n         ReserveKeyFromKeyPool(nIndex, keypool);\n         if (nIndex == -1)\n         {\n-            if (fAllowReuse && vchDefaultKey.IsValid())\n-            {\n-                result = vchDefaultKey;\n-                return true;\n-            }\n             if (IsLocked()) return false;\n             result = GenerateNewKey();\n             return true;"
      },
      {
        "sha": "d61548433ef3d31012fbe9e6f834fceff5e8d355",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71ac5052d83fcba21a09e5e2b7ad66faea6bd42a/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=71ac5052d83fcba21a09e5e2b7ad66faea6bd42a",
        "patch": "@@ -220,7 +220,7 @@ class CWallet : public CCryptoKeyStore\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n     void KeepKey(int64 nIndex);\n     void ReturnKey(int64 nIndex);\n-    bool GetKeyFromPool(CPubKey &key, bool fAllowReuse=true);\n+    bool GetKeyFromPool(CPubKey &key);\n     int64 GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n "
      }
    ]
  }
]