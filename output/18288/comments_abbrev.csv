MarcoFalke,2020-03-07 21:20:59,"We already run against valgrind and msan is a subset of valgrind according to: ""MSan implements a subset of functionality found in Valgrind (Memcheck tool). It is significantly faster than Memcheck (TODO:benchmark)."" (https://github.com/google/sanitizers/wiki/MemorySanitizer)",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596138689,596138689,
practicalswift,2020-03-07 23:14:33,"@MarcoFalke \n\nI think we should use both. While both tools try to find uses of uninitialized memory (UUM) they are implemented in totally different ways: Valgrind's memcheck is using binary translation while MSan is using compiler-based instrumentation. ~~From my experience it is not guaranteed that Valgrind finds all issues reported by MSan and vice versa.~~\n\nFurthermore, having the combi",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596147058,596147058,
practicalswift,2020-03-07 23:23:02,"@MarcoFalke \n\n> We already run against valgrind […]\n\nCorrect if you mean the unit tests.\n\nIncorrect if you mean the functional tests :)\n\nDue to Valgrind's slowness we currently only run a single(!) functional test under Valgrind (`TEST_RUNNER_EXTRA=""p2p_segwit.py""`).\n\nNote that this PR runs all available functional tests (and unit tests) under MSan.",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596147603,596147603,
gmaxwell,2020-03-08 01:38:36,I'd love to see a bug that msan catches that valgrind doesn't.,https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596156198,596156198,
practicalswift,2020-03-08 08:24:41,"> > From my experience it is not guaranteed that Valgrind finds all issues reported by MSan and vice versa.\n>\n> I'd love to see a bug that msan catches that valgrind doesn't.\n\nSorry about making a vague claim that I cannot back up with an example. Until I can provide an example we can simplify the discussion by assuming that I was flat out wrong about the possibility of Valgrind not catchi",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596179265,596179265,
gmaxwell,2020-03-08 09:39:12,"That's fine, if you ever find any-- I'd be interested in seeing them whenever that is. The question was primarily driven out of my own curiosity. \n\nFaster can be pretty useful, though I've found msan in the past to be somewhat lacking compared to valgrind in terms of sensitivity -- though my experience is mostly from when msan was very new. I've found msan most useful in the context of fuzzing",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-596185375,596185375,
practicalswift,2020-03-10 13:27:36,"@MarcoFalke \n\nWould you mind reviewing? :)\n\nI believe that having this merged would have allowed us to automatically detect at least two remotely triggerable uses of uninitialized memory (UUM) in our P2P networking code:\n* 2020: [Use of uninitialized memory in Erlay networking code](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815) - found pre-merge\n* 2020: [Use of ",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-597084905,597084905,
practicalswift,2020-03-10 15:38:12,"> Not sure though if we should also run this on travis, given that travis hopefully will run valgrind on everything: #18304\n\nEven if we assume that we get Valgrind to run all the unit and functional tests within the Travis time limit (which I unfortunately doubt is technically possible) I still don't see why we would not like to use **both** Valgrind and MSan in Travis? :)\n\nAs @gmaxwell pu",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-597154576,597154576,
Sjors,2020-03-12 13:17:48,"Concept ACK. cd120cf71cb98f06fd779a0ccfa62afd8ab86c00 looks sane, doesn't hurt my macOS build, but otherwise a bit above my pay-grade. The changes are contained to their own machine, except:\n* boost depends tweak that's now moved to  #18308\n* MSAN handling in `GetOSRand`, which is a more surgical alternative to #17627  \n\n> For the libFuzzer+MSan combination to be available it is important ",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-598180483,598180483,
practicalswift,2020-03-12 22:57:05,"> The build took 1 hours and 15 minutes the first time.\n\nThat seems to be roughly the time it takes also with caching. That might sound long but it is still 45 minutes quicker than the current `valgrind` job which only covers a subset of the functional tests whereas this one covers all of them :)\n\n(To be clear: even with the two hour `valgrind` job I think it easily is worth taking that co",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-598468231,598468231,
Sjors,2020-03-13 17:02:27,Moving this and the valgrind task to a separate Travis phase can be experimented with in another PR.,https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-598822152,598822152,
MarcoFalke,2020-03-13 18:12:16,"Running this on odroid c2, gave me:\n\n```\n...\n\n\nranlib libdb-4.8.a\nrm -f libdb.a\nln -s libdb-4.8.a libdb.a\n./libtool --mode=compile clang++-8 -c -I. -I/root/workspace/bitcoin-core/db4/db-4.8.30.NC/dist/..  -D_GNU_SOURCE -D_REENTRANT -fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls -nostdinc++ -stdlib=libc++ -L/root/work",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-598850935,598850935,
practicalswift,2020-03-15 15:10:57,@MarcoFalke I wonder if that is MSan-related. Could you try if `contrib/install_db4.sh` (without MSan) works on your odroid c2? :),https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-599222886,599222886,
MarcoFalke,2020-03-16 21:38:05,"```\nrm -r db4/ && ./contrib/install_db4.sh `pwd` CC=clang-8 CXX=clang++-8\n```\n passed",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-599769655,599769655,
practicalswift,2020-03-16 21:51:40,@MarcoFalke I'd love to help out but looks hard to debug remotely and I've never tried compiling anything on under MSan on an odroid c2. Can you give the context: are we doing CI under odroid c2 in a way that makes it blocking? :),https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-599774164,599774164,
MarcoFalke,2020-03-17 02:22:36,"As msan does a subset of what valgrind does, this is effectively testing valgrind, and not Bitcoin Core. Note that we already have a valgrind ci run.\n\nThe only issue I saw was when running the ci on non-x86, which spit out too many warnings under valgrind, so maybe msan is better suited for that use case.\n\nI am not against adding this ci config, but I'd say to disable it for travis. At lea",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-599844055,599844055,
DrahtBot,2020-04-09 07:40:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19424 (ci: Run tsan ci config on cirrus by MarcoFalke)\n* #19179 ([WIP RFC DONOTMERGE] ci: Run ci configs on cirrus by Ma",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-611381317,611381317,
practicalswift,2020-04-28 06:41:47,"@MarcoFalke \n\n> As msan does a subset of what valgrind does, this is effectively testing valgrind, and not Bitcoin Core. Note that we already have a valgrind ci run.\n\nAre you sure the claim ""valgrind is a strict subset of MSAN"" holds also in the presence of compiler optimisations?\n\nSee the well-documented optimisation issues in the Valgrind documentation:\n\n_""If you are planning to ",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-620412471,620412471,
practicalswift,2020-04-29 14:28:58,"@MarcoFalke Following up on yesterday's addition on information: is there anything I can change in this PR to make it more appropriate for Travis? :)\n\nPerhaps we can enable it for branch pushes to start with as you suggested in an earlier comment?\n\nI think everything that can help us guard against uninitialised reads entering `master` is worth considering :)",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-621247980,621247980,
MarcoFalke,2020-04-29 15:06:03,"Concept ACK, but this is waiting on the depends change to boost to go in first (and probably the non-ci related things as well)",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-621271590,621271590,
practicalswift,2020-04-29 15:34:08,@MarcoFalke Do you mean #18308 (friendly ping @dongcarl)? :),https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-621289751,621289751,
fanquake,2020-05-07 12:07:28,"@practicalswift can you drop your boost changes here, and rebase on #18820? We'll get the macOS issues sorted out.",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-625214815,625214815,
practicalswift,2020-06-01 09:01:48,"Updated now that the depends change to boost has been merged in to `master`.\n\nThis PR should be ready for final review.\n\nIt has previously received concept ACK:ish comments from MarcoFalke¹, gmaxwell² and Sjors³:\n\n> Concept ACK, but this is waiting on the depends change to boost to go in first (and probably the non-ci related things as well)¹\n\n> I don't see any problem with making ",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-636716594,636716594,
jonatack,2020-06-15 09:32:15,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-644017283,644017283,
practicalswift,2020-06-17 05:49:26,"@fanquake \n\n> @practicalswift can you drop your boost changes here, and rebase on #18820? We'll get the macOS issues sorted out.\n\nThat has been done :)  Ready for final review? :)",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-645166193,645166193,
practicalswift,2020-06-23 07:37:48,"@MarcoFalke @fanquake Thanks a lot for great and detailed feedback!\n\nAll feedback should now be addressed:\n* Dropped `--disable-asm`.\n* Now building with ZeroMQ (dropped `NO_ZMQ=1` and `--disable-zmq`).\n* Bumped to `clang-9` and `llvm-9`.\n* No longer patching `src/random.cpp` with MemorySanitizer annotations.\n* Removed unneccessary bash export of `LIBCXX_DIR`.\n\nThe current versio",https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-647967339,647967339,
MarcoFalke,2020-06-24 22:07:20,ACK 870f0cd2a0534d54bba18190e9f024f88e832933,https://github.com/bitcoin/bitcoin/pull/18288#issuecomment-649098537,649098537,
MarcoFalke,2020-03-10 14:43:46,"The file name indicates nowallet, this is --enable-wallet. Which is true?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390366382,390366382,ci/test/00_setup_env_native_nowallet_msan.sh
MarcoFalke,2020-03-10 14:44:37,"Any reason this needs clang-8, as opposed to just `clang`?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390367031,390367031,ci/test/00_setup_env_native_nowallet_msan.sh
MarcoFalke,2020-03-10 14:44:54,"```suggestion\n      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [depends, sanitizers: memory (MSan), no wallet]'\n```",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390367263,390367263,.travis.yml
MarcoFalke,2020-03-10 14:47:07,This should probably be a separate pull?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390368931,390368931,depends/packages/boost.mk
practicalswift,2020-03-10 15:14:26,I could not get it working reliably with a version older than Clang 8. I guess MSan has matured over the versions :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390390424,390390424,ci/test/00_setup_env_native_nowallet_msan.sh
practicalswift,2020-03-10 15:16:15,"Thanks! The filename is wrong -- wallet is used. See `contrib/install_db4.sh $(pwd) --enable-umrw` below :)\n\n`--enable-umrw` required to avoid UUM.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390391870,390391870,ci/test/00_setup_env_native_nowallet_msan.sh
practicalswift,2020-03-10 15:19:52,Fixed!,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390394638,390394638,.travis.yml
practicalswift,2020-03-10 15:31:18,Sure! Submitted as #18308 :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r390403544,390403544,depends/packages/boost.mk
MarcoFalke,2020-03-13 17:04:01,"Just testing locally and it takes a long time to download all of this, mostly it times out. Would it be possible to set `--depth=1`?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r392357410,392357410,ci/test/04_install.sh
practicalswift,2020-03-13 19:40:01,"Oh, of course! Thanks! Now updated.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r392432426,392432426,ci/test/04_install.sh
MarcoFalke,2020-06-01 10:45:30,Not sure if we want to compile a random commit from the default branch. Is msan required to be built from source? Would it help if you used the Ubuntu focal libcxx like in #19041?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433164425,433164425,ci/test/04_install.sh
practicalswift,2020-06-01 11:11:46,"Pinning against a specific commit in the LLVM repo sounds like a good idea :)\n\nUnfortunately I am not aware of any way to to achieve full MemorySanitizer instrumentation without linking against an MSan-instrumented C++ standard library, and I'm now aware of any way of doing so without compiling from source.\n\nFrom various parts of the MemorySanitizer documentation: _""Full MemorySanitizer in",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433175123,433175123,ci/test/04_install.sh
practicalswift,2020-06-01 11:19:49,Now pinning against `e5b8772756737e41cb1e8ee1a5a33cb3d8a25be6` (https://github.com/llvm/llvm-project/commit/e5b8772756737e41cb1e8ee1a5a33cb3d8a25be6) which happens to be the current `master` at the time of writing.,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433178096,433178096,ci/test/04_install.sh
MarcoFalke,2020-06-01 11:21:19,"Oh, so the Ubuntu focal libcxx does not ship with  msan?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433178675,433178675,ci/test/04_install.sh
practicalswift,2020-06-01 11:34:20,"Nope, I don't think so (in other words: it is not built with MSan-instrumentation AFAIK).",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433183859,433183859,ci/test/04_install.sh
MarcoFalke,2020-06-01 11:49:07,Why is this needed and why can't the bdb from depends be used instead?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433189350,433189350,ci/test/05_before_script.sh
practicalswift,2020-06-01 12:21:12,"I tried to build bdb from depends first but couldn't get it to work with MSan instrumentation, so I simply switched to using `contrib/install_db4.sh` which worked out of the box. Perhaps @dongcarl or some other expert on the depends system would succeed where I failed :)\n\nNote that regardless of method of installation `--enable-umrw` is needed for MSan to work:\n\n```\n--enable-umrw\n\n  ",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433201782,433201782,ci/test/05_before_script.sh
MarcoFalke,2020-06-01 12:48:05,It would be good to document the error you ran into when building bdb in depends. Otherwise the workaround will be left in the code lingering likely forever.,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433213461,433213461,ci/test/05_before_script.sh
practicalswift,2020-06-01 12:55:20,Sure! I'll try to reproduce the issue: it was a while ago so I don't remember the details TBH :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433216775,433216775,ci/test/05_before_script.sh
practicalswift,2020-06-01 14:14:12,Now pinning to v10.0.0 instead which feels less random :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433259379,433259379,ci/test/04_install.sh
practicalswift,2020-06-01 15:26:46,"Patch to reproduce:\n\n```diff\ndiff --git a/ci/test/00_setup_env_native_msan.sh b/ci/test/00_setup_env_native_msan.sh\nindex f868142a2..41c788738 100644\n--- a/ci/test/00_setup_env_native_msan.sh\n+++ b/ci/test/00_setup_env_native_msan.sh\n@@ -10,12 +10,11 @@ export LIBCXX_DIR=""${BASE_ROOT_DIR}/ci/scratch/msan/build/""\n export MSAN_FLAGS=""-fsanitize=memory -fsanitize-memory-track-origins=",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433302626,433302626,ci/test/05_before_script.sh
practicalswift,2020-06-01 17:39:59,Comment added :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433385935,433385935,ci/test/05_before_script.sh
fjahr,2020-06-16 16:14:50,"This seems unrelated to the actual change? I guess it's fine to remove the verbose option, I am just curious if this was done on purpose.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r440975378,440975378,contrib/install_db4.sh
practicalswift,2020-06-16 21:01:29,@fjahr This change is intentional: this PR uses `contrib/install_db4.sh` and the `-v` flag fills the CI output with an unnecessary file listing. That said: if anyone finds a need for the verbose flag (`-v`) here I'm happy to revert :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441139594,441139594,contrib/install_db4.sh
fanquake,2020-06-17 07:54:35,`--with-asm=no` should be redundant if you're already passing `--disable-asm`. Although I'd be interested to know what issues you were seeing?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441352525,441352525,ci/test/00_setup_env_native_msan.sh
fanquake,2020-06-17 07:55:30,"If depends is being built with `NO_ZMQ=1`, `--disable-zmq` shouldn't be  needed.  Was zmq skipped for a particular reason?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441353027,441353027,ci/test/00_setup_env_native_msan.sh
fanquake,2020-06-17 07:59:19,Can we use `clang-9` and `llvm-9` here now?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441355392,441355392,ci/test/00_setup_env_native_msan.sh
fanquake,2020-06-17 08:19:49,"I don't like that we're patching our RNG to ""work around"" a tool. I have not tested it yet, but why couldn't we a [sanitizer special case list](https://clang.llvm.org/docs/SanitizerSpecialCaseList.html), rather than this patch? If the issue is just with `syscall`, then the list won't be very long, as this is the only place we are using it in `/src`.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441367723,441367723,src/random.cpp
MarcoFalke,2020-06-17 12:51:00,Might as well use focal and clang-10 to avoid another bump,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441519595,441519595,ci/test/00_setup_env_native_msan.sh
MarcoFalke,2020-06-17 12:53:55,Could add some documentation which parts of the build system pick up this global?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441521336,441521336,ci/test/00_setup_env_native_msan.sh
MarcoFalke,2020-06-17 12:54:52,I guess none? So this wouldn't need to be a global?,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441521973,441521973,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-17 13:35:09,You're right: no longer a global. Good catch! :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441549232,441549232,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-17 13:35:43,Removed this change to minimize the diff and avoid review distractions :),https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441549648,441549648,contrib/install_db4.sh
practicalswift,2020-06-17 14:43:09,"Judging from my testing `--disable-asm` does not seem to imply `--with-asm=no`:\n\nWhen building with `--disable-asm` but without `--with-asm=no` I'm getting the following:\n\n```\n==5175==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x55da72d1630e in secp256k1_fe_normalize_var /home/travis/build/practicalswift/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/secp256k",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441600054,441600054,ci/test/00_setup_env_native_msan.sh
fanquake,2020-06-17 14:51:45,"Right, `--with-asm` is an option for libsecp's configure. I assume there are issues with our assembly as well then?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441606689,441606689,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-17 23:21:42,"Without `NO_ZMQ=1`:\n\n```\n/usr/bin/ld: /home/travis/build/practicalswift/bitcoin/depends/x86_64-pc-linux-gnu/share/../lib/libzmq.a(src_libzmq_la-ctx.o): in function `zmq::thread_ctx_t::thread_ctx_t()':\nctx.cpp:(.text+0x2da): undefined reference to `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()'\n/usr/bin/ld: /home/travis/build/practicalswif",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441885198,441885198,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-17 23:22:14,It seems like `--with-asm=no` is enough. Will drop `--disable-asm`.,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441885354,441885354,ci/test/00_setup_env_native_msan.sh
fanquake,2020-06-18 04:49:05,"Can you try passing the flags through to zeromq, same as you're doing with Boost? i.e: [`zeromq_cxxflags=""-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}""`](https://github.com/fanquake/core-review/tree/master/msan#build-depends). Doing that I can compile with zmq.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r441966227,441966227,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-18 10:27:21,Done!,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r442127213,442127213,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-18 10:29:12,"Now bumped to focal and `clang-9`/`llvm-9`. Ran in to some issues with `clang-10` which I'll investigate later, but perhaps we can go with `focal` and `clang-9` for now?",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r442128200,442128200,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-18 11:40:45,I'm afraid getting the same issue when passing `zeromq_cxxflags` :\,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r442163318,442163318,ci/test/00_setup_env_native_msan.sh
MarcoFalke,2020-06-18 12:08:19,Agree with this ^,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r442177080,442177080,src/random.cpp
fanquake,2020-06-21 11:30:06,"I tried using a sanitizer special case list, https://github.com/fanquake/core-review/commit/9158e2d0d56b6aab86a8ee47eb8d8a6a70800c5a, and it seems to work ok.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r443210147,443210147,src/random.cpp
practicalswift,2020-06-22 18:10:50,Managed to get it working with ZeroMQ support. Thanks for helping out!,https://github.com/bitcoin/bitcoin/pull/18288#discussion_r443739601,443739601,ci/test/00_setup_env_native_msan.sh
practicalswift,2020-06-23 07:33:48,"Good points. I also dislike patching non-testing code for testing purposes: I've now removed the patching.\n\nSince MemorySanitizer (MSAN) does not support tracking memory initialization done by using the Linux `getrandom` I'm now opting out of `getrandom` usage by undefining `HAVE_SYS_GETRANDOM`.\n\nThat is done without touching anything in `src/`.",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r444020007,444020007,src/random.cpp
MarcoFalke,2020-06-27 14:09:20,"```suggestion\nexport PACKAGES=""clang-9 llvm-9 cmake""  # When changing the clang version, also adjust ci/test/04_install.sh\n```",https://github.com/bitcoin/bitcoin/pull/18288#discussion_r446530340,446530340,ci/test/00_setup_env_native_msan.sh
