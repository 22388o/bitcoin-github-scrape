[
  {
    "sha": "f780aa47d40e848faa38f716ef47ec67cf3514a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzgwYWE0N2Q0MGU4NDhmYWEzOGY3MTZlZjQ3ZWM2N2NmMzUxNGEy",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:50:17Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:27:45Z"
      },
      "message": "Make net debug more granular (move some into net2, block, tx)",
      "tree": {
        "sha": "07f86000fefbbb38f435aa73c700ab1f485ee740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07f86000fefbbb38f435aa73c700ab1f485ee740"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f780aa47d40e848faa38f716ef47ec67cf3514a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780aa47d40e848faa38f716ef47ec67cf3514a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f780aa47d40e848faa38f716ef47ec67cf3514a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780aa47d40e848faa38f716ef47ec67cf3514a2/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5799c52535a3fc20e885916f1e7ed33ecc7f46"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 50,
      "deletions": 46
    },
    "files": [
      {
        "sha": "10f0edad39d84caa8e0fcca8ce4ae15748ca0601",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "c598440477db4a7c202c66af8c25bd10f07cb5a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 35,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "patch": "@@ -4805,7 +4805,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n                 if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n-                    LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+                    LogPrint(\"block\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n                     //disconnect node\n                     pfrom->fDisconnect = true;\n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5265,14 +5265,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n-                    LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n             else\n             {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n@@ -5303,10 +5303,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n \n         if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n@@ -5328,28 +5328,28 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex)\n             pindex = chainActive.Next(pindex);\n         int nLimit = 500;\n-        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        LogPrint(\"block\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                LogPrint(\"block\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }\n             // If pruning, don't inv blocks unless we have on disk and are likely to still have\n             // for some reasonable time window (1 hour) that block relay might require.\n             const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / chainparams.GetConsensus().nPowTargetSpacing;\n             if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= chainActive.Tip()->nHeight - nPrunedBlocksLikelyToHave))\n             {\n-                LogPrint(\"net\", \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                LogPrint(\"block\", \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll\n                 // trigger the peer to getblocks the next batch of inventory.\n-                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                LogPrint(\"block\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n@@ -5369,7 +5369,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (it->second->nHeight < chainActive.Height() - 15) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n             return true;\n         }\n \n@@ -5397,7 +5397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n-            LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5422,7 +5422,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n-        LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n+        LogPrint(\"block\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -5444,7 +5444,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n-            LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n+            LogPrint(\"tx\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5672,7 +5672,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"net\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n                         return true;\n                     }\n                 }\n@@ -5741,7 +5741,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5813,7 +5813,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n-            LogPrint(\"net\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            LogPrint(\"block\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n@@ -5847,7 +5847,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(\"net\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n+            LogPrint(\"block\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n         }\n         nodestate->nUnconnectingHeaders = 0;\n \n@@ -5858,7 +5858,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n-            LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n+            LogPrint(\"block\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n         }\n \n@@ -5883,7 +5883,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // the main chain -- this shouldn't really happen.  Bail out on the\n             // direct fetch and rely on parallel download instead.\n             if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(\"net\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                LogPrint(\"block\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n@@ -5897,11 +5897,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n+                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n                 }\n                 if (vGetData.size() > 1) {\n-                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n@@ -5928,7 +5928,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -5966,7 +5966,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Only send one GetAddr response per connection to reduce resource waste\n         //  and discourage addr stamping of INV announcements.\n         if (pfrom->fSentAddr) {\n-            LogPrint(\"net\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n+            LogPrint(\"net2\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n             return true;\n         }\n         pfrom->fSentAddr = true;\n@@ -6150,7 +6150,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     vRecv >> hash;\n                     ss << \": hash \" << hash.ToString();\n                 }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+                if (strMsg == NetMsgType::BLOCK)\n+                    LogPrint(\"block\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else if (strMsg == NetMsgType::TX)\n+                    LogPrint(\"tx\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else\n+                    LogPrint(\"net\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n             } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n                 LogPrint(\"net\", \"Unparseable reject message received\\n\");\n@@ -6445,7 +6450,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n+                LogPrint(\"block\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n@@ -6529,7 +6534,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6539,12 +6544,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6566,14 +6571,14 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // This should be very rare and could be optimized out.\n                     // Just log for now.\n                     if (chainActive[pindex->nHeight] != pindex) {\n-                        LogPrint(\"net\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n+                        LogPrint(\"block\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n                             hashToAnnounce.ToString(), chainActive.Tip()->GetBlockHash().ToString());\n                     }\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->id, hashToAnnounce.ToString());\n                     }\n                 }\n@@ -6750,13 +6755,13 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n                     State(staller)->nStallingSince = nNow;\n-                    LogPrint(\"net\", \"Stall started peer=%d\\n\", staller);\n+                    LogPrint(\"block\", \"Stall started peer=%d\\n\", staller);\n                 }\n             }\n         }\n@@ -6770,7 +6775,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             if (!AlreadyHave(inv))\n             {\n                 if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      },
      {
        "sha": "bca147d9d015bad017389875d045d3deb6b7b2d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "patch": "@@ -185,7 +185,7 @@ void AdvertiseLocal(CNode *pnode)\n         }\n         if (addrLocal.IsRoutable())\n         {\n-            LogPrint(\"net\", \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n+            LogPrint(\"net2\", \"AdvertiseLocal: advertising address %s to peer=%d\\n\", addrLocal.ToString(), pnode->id);\n             pnode->PushAddress(addrLocal);\n         }\n     }\n@@ -1246,7 +1246,7 @@ void CConnman::ThreadSocketHandler()\n                         {\n                             // socket closed gracefully\n                             if (!pnode->fDisconnect)\n-                                LogPrint(\"net\", \"socket closed\\n\");\n+                                LogPrint(\"net2\", \"socket closed\\n\");\n                             pnode->CloseSocketDisconnect();\n                         }\n                         else if (nBytes < 0)\n@@ -2596,7 +2596,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(\"tx\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;\n@@ -2619,7 +2619,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(Params().MessageStart(), pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n+    LogPrint(\"net2\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n@@ -2628,7 +2628,7 @@ void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n \n-    LogPrint(\"net\", \"(aborted)\\n\");\n+    LogPrint(\"net2\", \"(aborted)\\n\");\n }\n \n void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n@@ -2664,7 +2664,7 @@ void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n     assert(ssSend.size () >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum));\n     memcpy((char*)&ssSend[CMessageHeader::CHECKSUM_OFFSET], &nChecksum, sizeof(nChecksum));\n \n-    LogPrint(\"net\", \"(%d bytes) peer=%d\\n\", nSize, id);\n+    LogPrint(\"net2\", \"(%d bytes) peer=%d\\n\", nSize, id);\n \n     std::deque<CSerializeData>::iterator it = vSendMsg.insert(vSendMsg.end(), CSerializeData());\n     ssSend.GetAndClear(*it);"
      },
      {
        "sha": "c78dadd087d23c964bf250f73520769831a4f963",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f780aa47d40e848faa38f716ef47ec67cf3514a2/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "patch": "@@ -59,7 +59,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n     // Add data\n     static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n-    LogPrint(\"net\",\"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    LogPrint(nOffsetSample ? \"net\":\"net2\", \"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n \n     // There is a known issue here (see issue #4521):\n     //\n@@ -111,9 +111,8 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n         \n         BOOST_FOREACH(int64_t n, vSorted)\n-            LogPrint(\"net\", \"%+d  \", n);\n-        LogPrint(\"net\", \"|  \");\n+            LogPrint(nTimeOffset ? \"net\":\"net2\", \"%+d  \", n);\n         \n-        LogPrint(\"net\", \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+        LogPrint(nTimeOffset ? \"net\":\"net2\", \"|  nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }\n }"
      }
    ]
  },
  {
    "sha": "3365bd0f37e4437b37a692cac1262f0433f08b51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzY1YmQwZjM3ZTQ0MzdiMzdhNjkyY2FjMTI2MmYwNDMzZjA4YjUx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T15:05:46Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:27:52Z"
      },
      "message": "Split debug for estimatefee into {estimatefee,2}",
      "tree": {
        "sha": "85b9a0ee6325c64db09d93f96dad0615a11a79b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85b9a0ee6325c64db09d93f96dad0615a11a79b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3365bd0f37e4437b37a692cac1262f0433f08b51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3365bd0f37e4437b37a692cac1262f0433f08b51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3365bd0f37e4437b37a692cac1262f0433f08b51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3365bd0f37e4437b37a692cac1262f0433f08b51/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780aa47d40e848faa38f716ef47ec67cf3514a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f780aa47d40e848faa38f716ef47ec67cf3514a2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f011e0dd3e274b2e1880ff8f6dce049f92b9d137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3365bd0f37e4437b37a692cac1262f0433f08b51/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3365bd0f37e4437b37a692cac1262f0433f08b51/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3365bd0f37e4437b37a692cac1262f0433f08b51",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "a6b9a0024c8a055f1e05def3c2de7a0f80ff4f78",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3365bd0f37e4437b37a692cac1262f0433f08b51/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3365bd0f37e4437b37a692cac1262f0433f08b51/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3365bd0f37e4437b37a692cac1262f0433f08b51",
        "patch": "@@ -251,7 +251,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n+    LogPrint(\"estimatefee2\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -380,7 +380,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     double curPri = entry.GetPriority(txHeight);\n     mapMemPoolTxs[hash].blockHeight = txHeight;\n \n-    LogPrint(\"estimatefee\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n+    LogPrint(\"estimatefee2\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n     // Record this as a priority estimate\n     if (entry.GetFee() == 0 || isPriDataPoint(feeRate, curPri)) {\n         mapMemPoolTxs[hash].stats = &priStats;\n@@ -392,9 +392,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\");\n+        LogPrint(\"estimatefee2\", \"not adding\");\n     }\n-    LogPrint(\"estimatefee\", \"\\n\");\n+    LogPrint(\"estimatefee2\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      }
    ]
  },
  {
    "sha": "569cbc0a3c439c85d224b9800e59be8d7821f2c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjljYmMwYTNjNDM5Yzg1ZDIyNGI5ODAwZTU5YmU4ZDc4MjFmMmMx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T14:51:49Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:27:52Z"
      },
      "message": "Move a bunch of fairly verbose debug messages from mempool to mempool2",
      "tree": {
        "sha": "2531f58760cf8d54f6f6d55f1e5d368af0db106e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2531f58760cf8d54f6f6d55f1e5d368af0db106e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/569cbc0a3c439c85d224b9800e59be8d7821f2c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569cbc0a3c439c85d224b9800e59be8d7821f2c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/569cbc0a3c439c85d224b9800e59be8d7821f2c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569cbc0a3c439c85d224b9800e59be8d7821f2c1/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3365bd0f37e4437b37a692cac1262f0433f08b51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3365bd0f37e4437b37a692cac1262f0433f08b51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3365bd0f37e4437b37a692cac1262f0433f08b51"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e423e2a991c84f246a751e031a6a3827002c724a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=569cbc0a3c439c85d224b9800e59be8d7821f2c1",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "89cd20601e9b4403461d40117f7dbd3bba96b74a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=569cbc0a3c439c85d224b9800e59be8d7821f2c1",
        "patch": "@@ -689,7 +689,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     unsigned int sz = GetTransactionWeight(tx);\n     if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n-        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        LogPrint(\"mempool2\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n     }\n \n@@ -699,7 +699,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+    LogPrint(\"mempool2\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n@@ -1320,7 +1320,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            LogPrint(\"mempool2\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n@@ -5473,7 +5473,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             pfrom->nLastTXTime = GetTime();\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n+            LogPrint(\"mempool2\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n@@ -5502,7 +5502,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                             vWorkQueue.emplace_back(orphanHash, i);\n@@ -5517,11 +5517,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n                             setMisbehaving.insert(fromPeer);\n-                            LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                            LogPrint(\"mempool2\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n                         // Probably non-standard or insufficient fee/priority\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n                         if (orphanTx.wit.IsNull() && !stateDummy.CorruptionPossible()) {\n                             // Do not use rejection cache for witness transactions or\n@@ -5559,9 +5559,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0)\n-                    LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                    LogPrint(\"mempool2\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n             } else {\n-                LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n+                LogPrint(\"mempool2\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n             }\n         } else {\n             if (tx.wit.IsNull() && !state.CorruptionPossible()) {"
      },
      {
        "sha": "496bed1a68cbdd22b76d6247db167739c1c4a0f1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569cbc0a3c439c85d224b9800e59be8d7821f2c1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=569cbc0a3c439c85d224b9800e59be8d7821f2c1",
        "patch": "@@ -1134,5 +1134,5 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n     }\n \n     if (maxFeeRateRemoved > CFeeRate(0))\n-        LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n+        LogPrint(\"mempool2\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n }"
      }
    ]
  },
  {
    "sha": "9756a297fa27cca366dc5e8ae94002682c797089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzU2YTI5N2ZhMjdjY2EzNjZkYzVlOGFlOTQwMDI2ODJjNzk3MDg5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T06:30:32Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:27:52Z"
      },
      "message": "Move logic for TX INVs together",
      "tree": {
        "sha": "4a43ad3e2586eddeb2096dff516dffe36512fff8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a43ad3e2586eddeb2096dff516dffe36512fff8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9756a297fa27cca366dc5e8ae94002682c797089",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756a297fa27cca366dc5e8ae94002682c797089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9756a297fa27cca366dc5e8ae94002682c797089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756a297fa27cca366dc5e8ae94002682c797089/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "569cbc0a3c439c85d224b9800e59be8d7821f2c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569cbc0a3c439c85d224b9800e59be8d7821f2c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/569cbc0a3c439c85d224b9800e59be8d7821f2c1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "928467f3d7795ca5b3734440f224200ee0fb2e53",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9756a297fa27cca366dc5e8ae94002682c797089/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9756a297fa27cca366dc5e8ae94002682c797089/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9756a297fa27cca366dc5e8ae94002682c797089",
        "patch": "@@ -5238,8 +5238,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n+                pfrom->AddInventoryKnown(inv);\n+                if (fBlocksOnly)\n+                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n+                    pfrom->AskFor(inv);\n             }\n-\n+            else\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -5268,14 +5273,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n-            else\n-            {\n-                pfrom->AddInventoryKnown(inv);\n-                if (fBlocksOnly)\n-                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n-                else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n-                    pfrom->AskFor(inv);\n-            }\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);"
      }
    ]
  },
  {
    "sha": "1683c7905fb722f663d0d09cdc0c800009d73e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjgzYzc5MDVmYjcyMmY2NjNkMGQwOWNkYzBjODAwMDA5ZDczZTky",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:51:04Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "Improve conformity in debug messages",
      "tree": {
        "sha": "2f1a17976e86c9765e89d08702568cbed338c4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f1a17976e86c9765e89d08702568cbed338c4c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1683c7905fb722f663d0d09cdc0c800009d73e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1683c7905fb722f663d0d09cdc0c800009d73e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1683c7905fb722f663d0d09cdc0c800009d73e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1683c7905fb722f663d0d09cdc0c800009d73e92/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9756a297fa27cca366dc5e8ae94002682c797089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756a297fa27cca366dc5e8ae94002682c797089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9756a297fa27cca366dc5e8ae94002682c797089"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 28,
      "deletions": 34
    },
    "files": [
      {
        "sha": "f72cf5d700d6e0e41dedefafee0526482dc02b17",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 34,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1683c7905fb722f663d0d09cdc0c800009d73e92/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1683c7905fb722f663d0d09cdc0c800009d73e92/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1683c7905fb722f663d0d09cdc0c800009d73e92",
        "patch": "@@ -734,7 +734,7 @@ void EraseOrphansFor(NodeId peer)\n             nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n \n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"recv %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5270,7 +5270,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n-                    LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"block\", \"send getheaders (%d) to %s peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n \n@@ -5325,7 +5325,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex)\n             pindex = chainActive.Next(pindex);\n         int nLimit = 500;\n-        LogPrint(\"block\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        LogPrint(\"block\", \"recv getblocks %d to %s limit %d peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n@@ -5394,7 +5394,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n-            LogPrint(\"block\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv getheaders. Ignoring because node is in initial block download. peer=%d\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5419,7 +5419,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n-        LogPrint(\"block\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n+        LogPrint(\"block\", \"recv getheaders (%d) to %s peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -5625,7 +5625,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0)\n                     Misbehaving(pfrom->GetId(), nDoS);\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->id);\n+                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n                 return true;\n             }\n         }\n@@ -5669,7 +5669,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"recv cmpctblock. already being synced! peer=%d\\n\", pfrom->id);\n                         return true;\n                     }\n                 }\n@@ -5738,7 +5738,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s not expected peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n             return true;\n         }\n \n@@ -5748,7 +5748,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (status == READ_STATUS_INVALID) {\n             MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n             Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn. INVALID. peer=%d\\n\", pfrom->id);\n             return true;\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n@@ -5810,11 +5810,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n-            LogPrint(\"block\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            LogPrint(\"block\", \"recv header %s. missing prev block %s. send getheaders (%d) to end nUnconnectingHeaders=%d peer=%d\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n-                    pfrom->id, nodestate->nUnconnectingHeaders);\n+                    nodestate->nUnconnectingHeaders, pfrom->id);\n             // Set hashLastUnknownBlock for this peer, so that if we\n             // eventually get the headers - even from a different peer -\n             // we can use this peer to download.\n@@ -5855,7 +5855,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n-            LogPrint(\"block\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n+            LogPrint(\"block\", \"send more getheaders (%d) to end peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n         }\n \n@@ -5894,12 +5894,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->id);\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                    LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight, pfrom->id);\n                 }\n                 if (vGetData.size() > 0) {\n                     if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n@@ -5925,7 +5920,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"recv %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -6148,14 +6143,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     ss << \": hash \" << hash.ToString();\n                 }\n                 if (strMsg == NetMsgType::BLOCK)\n-                    LogPrint(\"block\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                    LogPrint(\"block\", \"recv reject %s peer=%d\\n\", SanitizeString(ss.str()), pfrom->id);\n                 else if (strMsg == NetMsgType::TX)\n-                    LogPrint(\"tx\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                    LogPrint(\"tx\", \"recv reject %s peer=%d\\n\", SanitizeString(ss.str()), pfrom->id);\n                 else\n-                    LogPrint(\"net\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                    LogPrint(\"net\", \"recv reject %s peer=%d\\n\", SanitizeString(ss.str()), pfrom->id);\n             } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+                LogPrint(\"net\", \"recv reject. unable to parse. peer=%d\\n\", pfrom->id);\n             }\n         }\n     }\n@@ -6447,7 +6442,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(\"block\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n+                LogPrint(\"block\", \"send getheaders (%d) to end peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n@@ -6531,7 +6526,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"send cmpctblock %s peer=%d\\n\",\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6541,12 +6536,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send %u headers(%s to %s) peer=%d\\n\",\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send header %s peer=%d\\n\",\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6575,8 +6570,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n-                            pto->id, hashToAnnounce.ToString());\n+                        LogPrint(\"block\", \"send inv block %s (%d) peer=%d\\n\",\n+                            hashToAnnounce.ToString(), pindex->nHeight, pto->id);\n                     }\n                 }\n             }\n@@ -6752,7 +6747,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n@@ -6771,8 +6766,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))\n             {\n-                if (fDebug)\n-                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                LogPrint(\"tx2\", \"send getdata %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      }
    ]
  },
  {
    "sha": "236b264a686591d7a95145b9b1b1b9c48c18d738",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzZiMjY0YTY4NjU5MWQ3YTk1MTQ1YjliMWIxYjljNDhjMThkNzM4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T14:01:50Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "Split logging of invs into debug: tx2, block{,2}\n\nblock2 is used for older block invs where nodes are in IBD, so it can be quite verbose.\nThe debug message is now sent after calling UpdateBlockAvailability() and therefore can include the block height if we have received the header.",
      "tree": {
        "sha": "9f7a559599ace27a672c624f9fdf2ecb648b19e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f7a559599ace27a672c624f9fdf2ecb648b19e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236b264a686591d7a95145b9b1b1b9c48c18d738",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236b264a686591d7a95145b9b1b1b9c48c18d738",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/236b264a686591d7a95145b9b1b1b9c48c18d738",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236b264a686591d7a95145b9b1b1b9c48c18d738/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1683c7905fb722f663d0d09cdc0c800009d73e92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1683c7905fb722f663d0d09cdc0c800009d73e92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1683c7905fb722f663d0d09cdc0c800009d73e92"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8dbfa6e71e1f847b644b93277cb25d751e3ee7fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236b264a686591d7a95145b9b1b1b9c48c18d738/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236b264a686591d7a95145b9b1b1b9c48c18d738/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=236b264a686591d7a95145b9b1b1b9c48c18d738",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block{,2}, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx{,2}, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "e53809cae8aa20fe70ecbcbbdade5c16a860bb5b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236b264a686591d7a95145b9b1b1b9c48c18d738/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236b264a686591d7a95145b9b1b1b9c48c18d738/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=236b264a686591d7a95145b9b1b1b9c48c18d738",
        "patch": "@@ -5234,19 +5234,27 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n+                LogPrint(\"tx2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n                 inv.type |= nFetchFlags;\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"tx\", \"recv inv %s in violation of protocol peer=%d\\n\", inv.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n             else\n             if (inv.type == MSG_BLOCK) {\n-                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+                UpdateBlockAvailability(pfrom->GetId(), inv.hash); // update pindexBestKnownBlock\n+                if (!fAlreadyHave) {\n+                    LogPrint(\"block\", \"recv inv %s (new) peer=%d\\n\", inv.ToString(), pfrom->id);\n+                } else {\n+                    int theirheight = State(pfrom->id)->pindexBestKnownBlock ? State(pfrom->id)->pindexBestKnownBlock->nHeight : -1;\n+                    bool fRecent = false;\n+                    if (theirheight >= chainActive.Height()-2) fRecent = true;\n+                    LogPrint(fRecent ? \"block\" : \"block2\", \"recv inv %s (%d) peer=%d\\n\", inv.ToString(), theirheight, pfrom->id);\n+                }\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n                     // First request the headers preceding the announced block. In the normal fully-synced\n                     // case where a new block is announced that succeeds the current tip (no reorganization),\n@@ -5272,7 +5280,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     }\n                     LogPrint(\"block\", \"send getheaders (%d) to %s peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n-            }\n+            } else\n+                LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);"
      },
      {
        "sha": "d353c8024b77633836ff6dd49375ae6c654245ea",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236b264a686591d7a95145b9b1b1b9c48c18d738/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236b264a686591d7a95145b9b1b1b9c48c18d738/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=236b264a686591d7a95145b9b1b1b9c48c18d738",
        "patch": "@@ -2596,7 +2596,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(\"tx\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(\"tx2\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;"
      }
    ]
  },
  {
    "sha": "f39be4f4075c5637bfcef549311a9ade0c767118",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzliZTRmNDA3NWM1NjM3YmZjZWY1NDkzMTFhOWFkZTBjNzY3MTE4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:13:19Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "Debug headers received (\"block\" for new block announcement, \"block2\" for expected).",
      "tree": {
        "sha": "0f7a5e13b3354bbf8019eddf005d4a825b372e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f7a5e13b3354bbf8019eddf005d4a825b372e4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f39be4f4075c5637bfcef549311a9ade0c767118",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39be4f4075c5637bfcef549311a9ade0c767118",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f39be4f4075c5637bfcef549311a9ade0c767118",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39be4f4075c5637bfcef549311a9ade0c767118/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "236b264a686591d7a95145b9b1b1b9c48c18d738",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236b264a686591d7a95145b9b1b1b9c48c18d738",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/236b264a686591d7a95145b9b1b1b9c48c18d738"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0453b585e67a68ce50cf522f86c874b1aa711439",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f39be4f4075c5637bfcef549311a9ade0c767118/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f39be4f4075c5637bfcef549311a9ade0c767118/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f39be4f4075c5637bfcef549311a9ade0c767118",
        "patch": "@@ -281,6 +281,8 @@ struct CNodeState {\n     int64_t nDownloadingSince;\n     int nBlocksInFlight;\n     int nBlocksInFlightValidHeaders;\n+    //! Whether we have requested headers.\n+    bool fExpectingHeaders;\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n@@ -306,6 +308,7 @@ struct CNodeState {\n         nDownloadingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n+        fExpectingHeaders = false;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n         fPreferHeaderAndIDs = false;\n@@ -5266,6 +5269,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n+                    nodestate->fExpectingHeaders = true;\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n@@ -5622,8 +5626,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n-            if (!IsInitialBlockDownload())\n+            if (!IsInitialBlockDownload()) {\n                 pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n+                State(pfrom->id)->fExpectingHeaders = true;\n+            }\n             return true;\n         }\n \n@@ -5824,6 +5830,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n                     nodestate->nUnconnectingHeaders, pfrom->id);\n+            nodestate->fExpectingHeaders = true;\n             // Set hashLastUnknownBlock for this peer, so that if we\n             // eventually get the headers - even from a different peer -\n             // we can use this peer to download.\n@@ -5850,7 +5857,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return error(\"invalid header received\");\n                 }\n             }\n+            LogPrint(nodestate->fExpectingHeaders ? \"block2\" : \"block\", \"recv header %s (%d) peer=%d\\n\", header.GetHash().ToString(), pindexLast->nHeight, pfrom->id);\n         }\n+        nodestate->fExpectingHeaders = false;\n \n         if (nodestate->nUnconnectingHeaders > 0) {\n             LogPrint(\"block\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n@@ -5866,6 +5875,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // from there instead.\n             LogPrint(\"block\", \"send more getheaders (%d) to end peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n+            nodestate->fExpectingHeaders = true;\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n@@ -6453,6 +6463,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(\"block\", \"send getheaders (%d) to end peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n+                state.fExpectingHeaders = true;\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "4b35ba847cc69292122c10014699cee5f9c77837",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjM1YmE4NDdjYzY5MjkyMTIyYzEwMDE0Njk5Y2VlNWY5Yzc3ODM3",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:02:07Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "Log height of block messages, if known, when received",
      "tree": {
        "sha": "a931760084d40c2e42359068e8321a717e04b3af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a931760084d40c2e42359068e8321a717e04b3af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b35ba847cc69292122c10014699cee5f9c77837",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b35ba847cc69292122c10014699cee5f9c77837",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b35ba847cc69292122c10014699cee5f9c77837",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b35ba847cc69292122c10014699cee5f9c77837/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f39be4f4075c5637bfcef549311a9ade0c767118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39be4f4075c5637bfcef549311a9ade0c767118",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f39be4f4075c5637bfcef549311a9ade0c767118"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c75c2cbf09a2ab480bb54231ba9933a952ca301b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b35ba847cc69292122c10014699cee5f9c77837/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b35ba847cc69292122c10014699cee5f9c77837/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4b35ba847cc69292122c10014699cee5f9c77837",
        "patch": "@@ -3743,9 +3743,13 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n         CBlockIndex *pindex = NULL;\n         bool fNewBlock = false;\n         bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n-        if (pindex && pfrom) {\n-            mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n-            if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n+        if (pfrom) {\n+            if (pindex) {\n+                LogPrint(\"block\", \"recv block %s (%d) peer=%d\\n\", pblock->GetHash().ToString(), pindex->nHeight, pfrom->id);\n+                mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n+                if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n+            } else\n+                LogPrint(\"block\", \"recv block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->id);\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret)\n@@ -5939,8 +5943,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"block\", \"recv %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n-\n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network."
      }
    ]
  },
  {
    "sha": "7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjdiZWQ2YjlkZTI1YzAxZjVmMjg2NWNmMzNiODZhODZlNWQwMWY1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:10:39Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "Additional logging of block download and correct order of events.",
      "tree": {
        "sha": "146ece683e45cd1c01e7cdd63da0ee2a786fec6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/146ece683e45cd1c01e7cdd63da0ee2a786fec6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b35ba847cc69292122c10014699cee5f9c77837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b35ba847cc69292122c10014699cee5f9c77837",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b35ba847cc69292122c10014699cee5f9c77837"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 20,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3ab16dedc67d1b8b2f5e7f0e8809696ca63d8939",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
        "patch": "@@ -482,13 +482,15 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n             // As per BIP152, we only get 3 of our peers to announce\n             // blocks using compact encodings.\n             bool found = connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                LogPrint(\"block\", \"sending SENDCMPCT (no announce) to peer %s\\n\", pnodeStop->id);\n                 pnodeStop->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n                 return true;\n             });\n             if(found)\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n         }\n         fAnnounceUsingCMPCTBLOCK = true;\n+        LogPrint(\"block\", \"sending SENDCMPCT (announce) to peer %s\\n\", pfrom->id);\n         pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n         lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n     }\n@@ -5271,22 +5273,25 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // time the block arrives, the header chain leading up to it is already validated. Not\n                     // doing this will result in the received block being rejected as an orphan in case it is\n                     // not a direct successor.\n+                    LogPrint(\"block\", \"send getheaders (%d) %s peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     nodestate->fExpectingHeaders = true;\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         inv.type |= nFetchFlags;\n-                        if (nodestate->fProvidesHeaderAndIDs && !(pfrom->GetLocalServices() & NODE_WITNESS))\n+                        if (nodestate->fProvidesHeaderAndIDs && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n+                            LogPrint(\"block\", \"send getdata cmpct %s peer=%d\\n\", inv.ToString(), pfrom->id);\n                             vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n-                        else\n+                        } else {\n+                            LogPrint(\"block\", \"send getdata %s peer=%d\\n\", inv.ToString(), pfrom->id);\n                             vToFetch.push_back(inv);\n+                        }\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n-                    LogPrint(\"block\", \"send getheaders (%d) to %s peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             } else\n                 LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n@@ -5631,6 +5636,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!IsInitialBlockDownload()) {\n+                LogPrint(\"block\", \"recv cmpctblock %s. prev %s not found. send getheaders (%d) peer=%d\\n\", cmpctblock.header.GetHash().ToString(), cmpctblock.header.hashPrevBlock.ToString(), pindexBestHeader->nHeight, pfrom->id);\n                 pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n                 State(pfrom->id)->fExpectingHeaders = true;\n             }\n@@ -5651,6 +5657,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         // If AcceptBlockHeader returned true, it set pindex\n         assert(pindex);\n+        LogPrint(\"block\", \"recv cmpctblock %s (%d) peer=%d\\n\", cmpctblock.header.GetHash().ToString(), pindex->nHeight, pfrom->id);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n         std::map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n@@ -5666,6 +5673,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // so we just grab the block via normal getdata\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                LogPrint(\"block\", \"send getdata %s (%d) peer=%d\\n\", vInv[0].ToString(), pindex->nHeight, pfrom->id);\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n             }\n             return true;\n@@ -5688,7 +5696,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"block\", \"recv cmpctblock. already being synced! peer=%d\\n\", pfrom->id);\n+                        LogPrint(\"block\", \"cmpctblock (%d) already being synced! peer=%d\\n\", pindex->nHeight, pfrom->id);\n                         return true;\n                     }\n                 }\n@@ -5704,12 +5712,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n                     std::vector<CInv> vInv(1);\n                     vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                    LogPrint(\"block\", \"send getdata %s (%d) peer=%d\\n\", vInv[0].ToString(), pindex->nHeight, pfrom->id);\n                     pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                     return true;\n                 }\n \n                 BlockTransactionsRequest req;\n-                for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+                size_t i;\n+                for (i = 0; i < cmpctblock.BlockTxCount(); i++) {\n                     if (!partialBlock.IsTxAvailable(i))\n                         req.indexes.push_back(i);\n                 }\n@@ -5722,6 +5732,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman);\n                 } else {\n                     req.blockhash = pindex->GetBlockHash();\n+                    LogPrint(\"block\", \"send getblocktxn %s (%d) %d indexes peer=%d\\n\", req.blockhash.ToString(), pindex->nHeight, i, pfrom->id);\n                     pfrom->PushMessage(NetMsgType::GETBLOCKTXN, req);\n                 }\n             }\n@@ -5731,6 +5742,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // mempool will probably be useless - request the block normally\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                LogPrint(\"block\", \"to peer %d: getdata %s (%d)\\n\", pfrom->id, vInv[0].ToString(), pindex->nHeight);\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                 return true;\n             } else {\n@@ -5773,8 +5785,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Might have collided, fall back to getdata now :(\n             std::vector<CInv> invs;\n             invs.push_back(CInv(MSG_BLOCK, resp.blockhash));\n+            LogPrint(\"block\", \"recv blocktxn. FAILED. send getdata %s peer=%d\\n\", invs[0].ToString(), pfrom->id);\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n+            LogPrint(\"block\", \"recv blocktxn %s peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n             CValidationState state;\n             ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n             int nDoS;\n@@ -5926,6 +5940,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                        LogPrint(\"block\", \"send getdata %s peer=%d\\n\", vGetData[0].ToString(), pfrom->id);\n                     }\n                     pfrom->PushMessage(NetMsgType::GETDATA, vGetData);\n                 }"
      }
    ]
  },
  {
    "sha": "32e14e98b2ee8790467e49745c40c20437b23e68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmUxNGU5OGIyZWU4NzkwNDY3ZTQ5NzQ1YzQwYzIwNDM3YjIzZTY4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:14:44Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:01Z"
      },
      "message": "More granular logging of received getdata requests.",
      "tree": {
        "sha": "49fe856cf17fb1be40da0f445f026dcdc0c4d360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49fe856cf17fb1be40da0f445f026dcdc0c4d360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e14e98b2ee8790467e49745c40c20437b23e68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e14e98b2ee8790467e49745c40c20437b23e68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32e14e98b2ee8790467e49745c40c20437b23e68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e14e98b2ee8790467e49745c40c20437b23e68/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f7bed6b9de25c01f5f2865cf33b86a86e5d01f5"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3e5a685f2ec787d52217dda6afc5348a78222514",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e14e98b2ee8790467e49745c40c20437b23e68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e14e98b2ee8790467e49745c40c20437b23e68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=32e14e98b2ee8790467e49745c40c20437b23e68",
        "patch": "@@ -4808,7 +4808,8 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n                     }\n-                }\n+                } else // Should be considered misbehaviour?\n+                    LogPrint(\"block2\", \"recv getdata %d - UNKNOWN! peer=%d\\n\", inv.ToString(), pfrom->id);\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n@@ -4882,10 +4883,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         pfrom->PushMessage(NetMsgType::INV, vInv);\n                         pfrom->hashContinue.SetNull();\n                     }\n-                }\n+                } else if (send)\n+                    LogPrint(\"block2\", \"recv getdata %s (%d). NO DATA. peer=%d\\n\", inv.ToString(), mi->second->nHeight, pfrom->id);\n             }\n             else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)\n             {\n+                LogPrint(\"tx2\", \"recv getdata %s peer=%d\\n\", inv.ToString(), pfrom->id);\n                 // Send stream from relay memory\n                 bool push = false;\n                 auto mi = mapRelay.find(inv.hash);\n@@ -4903,8 +4906,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n                 if (!push) {\n                     vNotFound.push_back(inv);\n+                    LogPrint(\"tx2\", \"recv getdata %s. send notfound. peer=%d\\n\", inv.ToString(), pfrom->id);\n                 }\n-            }\n+            } else\n+                LogPrint(\"net2\", \"recv getdata %s peer=%d\\n\", inv.ToString(), pfrom->id); // Should never get here\n \n             // Track requests for our stuff.\n             GetMainSignals().Inventory(inv.hash);\n@@ -5321,12 +5326,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return error(\"message getdata size() = %u\", vInv.size());\n         }\n \n-        if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net2\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n-\n-        if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net2\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n-\n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n     }"
      }
    ]
  },
  {
    "sha": "0176da1b7c9fe4436aa4dae672e9d58effff9c84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTc2ZGExYjdjOWZlNDQzNmFhNGRhZTY3MmU5ZDU4ZWZmZmY5Yzg0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:18:16Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Make logging of getblocks and getheaders requests more informative yet concise.",
      "tree": {
        "sha": "0dd28addf42f4a1768bf35581071ff5e86031a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dd28addf42f4a1768bf35581071ff5e86031a45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0176da1b7c9fe4436aa4dae672e9d58effff9c84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0176da1b7c9fe4436aa4dae672e9d58effff9c84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0176da1b7c9fe4436aa4dae672e9d58effff9c84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0176da1b7c9fe4436aa4dae672e9d58effff9c84/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32e14e98b2ee8790467e49745c40c20437b23e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e14e98b2ee8790467e49745c40c20437b23e68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32e14e98b2ee8790467e49745c40c20437b23e68"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "2905b69363b0e11e084fecbd71f0a050feaa708d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0176da1b7c9fe4436aa4dae672e9d58effff9c84/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0176da1b7c9fe4436aa4dae672e9d58effff9c84/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0176da1b7c9fe4436aa4dae672e9d58effff9c84",
        "patch": "@@ -5346,32 +5346,29 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex)\n             pindex = chainActive.Next(pindex);\n         int nLimit = 500;\n-        LogPrint(\"block\", \"recv getblocks %d to %s limit %d peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        int nHeightStart = pindex ? pindex->nHeight : -1;\n+        int nHeightEnd = nHeightStart;\n+        int nCount = 0;\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n-            {\n-                LogPrint(\"block\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n-            }\n             // If pruning, don't inv blocks unless we have on disk and are likely to still have\n             // for some reasonable time window (1 hour) that block relay might require.\n             const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / chainparams.GetConsensus().nPowTargetSpacing;\n             if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= chainActive.Tip()->nHeight - nPrunedBlocksLikelyToHave))\n-            {\n-                LogPrint(\"block\", \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n-            }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n-            if (--nLimit <= 0)\n-            {\n+            nCount++;\n+            nHeightEnd = pindex->nHeight;\n+            if (--nLimit <= 0) {\n                 // When this block is requested, we'll send an inv that'll\n                 // trigger the peer to getblocks the next batch of inventory.\n-                LogPrint(\"block\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n         }\n+        LogPrint(\"block\", \"recv getblocks to %s. send %d block invs (height %d to %d) peer=%d\\n\", hashStop.IsNull() ? \"end\" : hashStop.ToString(), nCount, nHeightStart, nHeightEnd, pfrom->id);\n     }\n \n \n@@ -5440,10 +5437,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n-        LogPrint(\"block\", \"recv getheaders (%d) to %s peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n+        int nHeightStart = pindex ? pindex->nHeight : -1;\n+        int nHeightEnd = nHeightStart;\n+        int nCount = 0;\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n+            nCount++;\n+            nHeightEnd = pindex->nHeight;\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n@@ -5452,6 +5453,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // headers message). In both cases it's safe to update\n         // pindexBestHeaderSent to be our tip.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n+        LogPrint(\"block\", \"recv getheaders to %s. send %d headers (height %d to %d) peer=%d\\n\", hashStop.IsNull() ? \"end\" : hashStop.ToString(), nCount, nHeightStart, nHeightEnd, pfrom->id);\n         pfrom->PushMessage(NetMsgType::HEADERS, vHeaders);\n     }\n "
      }
    ]
  },
  {
    "sha": "de77c25acca0f51139d27c2da692f59e7876d42d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTc3YzI1YWNjYTBmNTExMzlkMjdjMmRhNjkyZjU5ZTc4NzZkNDJk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:47:23Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Debug sending of recent blocks and compact blocks",
      "tree": {
        "sha": "d4e5b72fa9ce047b7c4974b8db069e83206b8075",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e5b72fa9ce047b7c4974b8db069e83206b8075"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de77c25acca0f51139d27c2da692f59e7876d42d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de77c25acca0f51139d27c2da692f59e7876d42d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de77c25acca0f51139d27c2da692f59e7876d42d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de77c25acca0f51139d27c2da692f59e7876d42d/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0176da1b7c9fe4436aa4dae672e9d58effff9c84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0176da1b7c9fe4436aa4dae672e9d58effff9c84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0176da1b7c9fe4436aa4dae672e9d58effff9c84"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fef7bb4e7b86dd980bd8e4e1e0a0e8b5e407c7c9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de77c25acca0f51139d27c2da692f59e7876d42d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de77c25acca0f51139d27c2da692f59e7876d42d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=de77c25acca0f51139d27c2da692f59e7876d42d",
        "patch": "@@ -4791,9 +4791,13 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n+                bool fRecent = false;\n+                int nHeight = 0;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n-                if (mi != mapBlockIndex.end())\n-                {\n+                if (mi != mapBlockIndex.end()) {\n+                    nHeight = mi->second->nHeight;\n+                    if (nHeight > chainActive.Height()-3)\n+                        fRecent=true;\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n@@ -4829,12 +4833,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     CBlock block;\n                     if (!ReadBlockFromDisk(block, (*mi).second, consensusParams))\n                         assert(!\"cannot load block from disk\");\n+                    else\n+                        if (fRecent)\n+                            LogPrint(\"block\", \"recv getdata %s (%d). sending. peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n-                    else if (inv.type == MSG_FILTERED_BLOCK)\n-                    {\n+                    else if (inv.type == MSG_FILTERED_BLOCK) {\n                         bool sendMerkleBlock = false;\n                         CMerkleBlock merkleBlock;\n                         {\n@@ -5392,14 +5398,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         assert(ReadBlockFromDisk(block, it->second, chainparams.GetConsensus()));\n \n         BlockTransactions resp(req);\n-        for (size_t i = 0; i < req.indexes.size(); i++) {\n+        size_t i;\n+        for (i = 0; i < req.indexes.size(); i++) {\n             if (req.indexes[i] >= block.vtx.size()) {\n                 Misbehaving(pfrom->GetId(), 100);\n                 LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->id);\n                 return true;\n             }\n             resp.txn[i] = block.vtx[req.indexes[i]];\n         }\n+        LogPrint(\"block\", \"recv getblocktxn %s (%d). send blocktxn (%d indexes) peer=%d\\n\", req.blockhash.ToString(), it->second->nHeight, i, pfrom->id);\n         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n     }\n "
      }
    ]
  },
  {
    "sha": "7e6be0bc4f094a59df184eee749823d0d772fdc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTZiZTBiYzRmMDk0YTU5ZGYxODRlZWU3NDk4MjNkMGQ3NzJmZGM4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:05:52Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Show additional info when advertising our addresses",
      "tree": {
        "sha": "90d24438420811403cfc4b48f2d8fce8d9cbbeb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90d24438420811403cfc4b48f2d8fce8d9cbbeb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e6be0bc4f094a59df184eee749823d0d772fdc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6be0bc4f094a59df184eee749823d0d772fdc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6be0bc4f094a59df184eee749823d0d772fdc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6be0bc4f094a59df184eee749823d0d772fdc8/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de77c25acca0f51139d27c2da692f59e7876d42d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de77c25acca0f51139d27c2da692f59e7876d42d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de77c25acca0f51139d27c2da692f59e7876d42d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6ad802f79aa843f893421a51be6ade653f177af6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6be0bc4f094a59df184eee749823d0d772fdc8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6be0bc4f094a59df184eee749823d0d772fdc8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7e6be0bc4f094a59df184eee749823d0d772fdc8",
        "patch": "@@ -5085,11 +5085,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n                 if (addr.IsRoutable())\n                 {\n-                    LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n+                    LogPrint(\"net\", \"%s: advertising routable address %s\\n\", __func__, addr.ToString());\n                     pfrom->PushAddress(addr);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n-                    LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n+                    LogPrint(\"net\", \"%s: advertising local address %s\\n\", __func__, addr.ToString());\n                     pfrom->PushAddress(addr);\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "bce545dea07baf92efb486190c0a2533bd8349ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2U1NDVkZWEwN2JhZjkyZWZiNDg2MTkwYzBhMjUzM2JkODM0OWNl",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:59:13Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "More detailed logging of version messages",
      "tree": {
        "sha": "1ada6ab9600633668c6fe72371c32fe6fb4a863d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ada6ab9600633668c6fe72371c32fe6fb4a863d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bce545dea07baf92efb486190c0a2533bd8349ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce545dea07baf92efb486190c0a2533bd8349ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bce545dea07baf92efb486190c0a2533bd8349ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce545dea07baf92efb486190c0a2533bd8349ce/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e6be0bc4f094a59df184eee749823d0d772fdc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6be0bc4f094a59df184eee749823d0d772fdc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6be0bc4f094a59df184eee749823d0d772fdc8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7ba1c0b8dd2806ec01edea2a4060116fec369490",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bce545dea07baf92efb486190c0a2533bd8349ce/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bce545dea07baf92efb486190c0a2533bd8349ce/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bce545dea07baf92efb486190c0a2533bd8349ce",
        "patch": "@@ -5107,12 +5107,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         string remoteAddr;\n         if (fLogIPs)\n-            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n+            remoteAddr = \", them=\" + pfrom->addr.ToString();\n \n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+        LogPrintf(\"receive version message: %s: version %d, blocks=%d, relay=%s, services=%08x us=%s%s, peer=%d\\n\",\n                   pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n-                  remoteAddr);\n+                  pfrom->nStartingHeight, pfrom->fRelayTxes ? \"1\" : \"0\", nServiceInt, addrMe.ToString(),\n+                  remoteAddr, pfrom->id);\n \n         int64_t nTimeOffset = nTime - GetTime();\n         pfrom->nTimeOffset = nTimeOffset;"
      }
    ]
  },
  {
    "sha": "ad2594830272351fbb9c7dde2dbb43abefcec100",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDI1OTQ4MzAyNzIzNTFmYmI5YzdkZGUyZGJiNDNhYmVmY2VjMTAw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-15T02:39:56Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Move version debug to before other debug messages for later events are shown.",
      "tree": {
        "sha": "55016066e0e8e9e100e8fc4c104ff2647a80773b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55016066e0e8e9e100e8fc4c104ff2647a80773b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad2594830272351fbb9c7dde2dbb43abefcec100",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad2594830272351fbb9c7dde2dbb43abefcec100",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad2594830272351fbb9c7dde2dbb43abefcec100",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad2594830272351fbb9c7dde2dbb43abefcec100/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bce545dea07baf92efb486190c0a2533bd8349ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce545dea07baf92efb486190c0a2533bd8349ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bce545dea07baf92efb486190c0a2533bd8349ce"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0c2dd6582163d062d16c784655b60fe0ccf6c55f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad2594830272351fbb9c7dde2dbb43abefcec100/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad2594830272351fbb9c7dde2dbb43abefcec100/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ad2594830272351fbb9c7dde2dbb43abefcec100",
        "patch": "@@ -5049,6 +5049,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n+        string remoteAddr;\n+        if (fLogIPs)\n+            remoteAddr = \", them=\" + pfrom->addr.ToString();\n+\n+        LogPrintf(\"receive version message: %s: version %d, blocks=%d, relay=%s, services=%08x us=%s%s, peer=%d\\n\",\n+                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  pfrom->nStartingHeight, pfrom->fRelayTxes ? \"1\" : \"0\", nServiceInt, addrMe.ToString(),\n+                  remoteAddr, pfrom->id);\n+\n         pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n@@ -5105,15 +5114,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        string remoteAddr;\n-        if (fLogIPs)\n-            remoteAddr = \", them=\" + pfrom->addr.ToString();\n-\n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, relay=%s, services=%08x us=%s%s, peer=%d\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, pfrom->fRelayTxes ? \"1\" : \"0\", nServiceInt, addrMe.ToString(),\n-                  remoteAddr, pfrom->id);\n-\n         int64_t nTimeOffset = nTime - GetTime();\n         pfrom->nTimeOffset = nTimeOffset;\n         AddTimeData(pfrom->addr, nTimeOffset);"
      }
    ]
  },
  {
    "sha": "88104e4312c2cb735a57a4d6301231b76f16a5db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODEwNGU0MzEyYzJjYjczNWE1N2E0ZDYzMDEyMzFiNzZmMTZhNWRi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-15T07:22:41Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Show whether connection is Inbound or Outbound when adding connection\n\nand remove one debug line that appears immediately before this line.",
      "tree": {
        "sha": "7056726e23a3eb2f0feb73a237f8bda0409e47e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7056726e23a3eb2f0feb73a237f8bda0409e47e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88104e4312c2cb735a57a4d6301231b76f16a5db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88104e4312c2cb735a57a4d6301231b76f16a5db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88104e4312c2cb735a57a4d6301231b76f16a5db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88104e4312c2cb735a57a4d6301231b76f16a5db/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad2594830272351fbb9c7dde2dbb43abefcec100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad2594830272351fbb9c7dde2dbb43abefcec100",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad2594830272351fbb9c7dde2dbb43abefcec100"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "896b425b40cf4d0a6d7c35435192883394dd6682",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88104e4312c2cb735a57a4d6301231b76f16a5db/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88104e4312c2cb735a57a4d6301231b76f16a5db/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=88104e4312c2cb735a57a4d6301231b76f16a5db",
        "patch": "@@ -1027,8 +1027,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n \n-    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -2562,10 +2560,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n \n-    if (fLogIPs)\n-        LogPrint(\"net\", \"Added connection to %s peer=%d\\n\", addrName, id);\n-    else\n-        LogPrint(\"net\", \"Added connection peer=%d\\n\", id);\n+    LogPrint(\"net\", \"Added %s connection %speer=%d\\n\", fInbound ? \"Inbound\" : \"Outbound\", fLogIPs ? addrName + \" \" : \"\", id);\n \n     // Be shy and don't send version until we hear\n     if (hSocket != INVALID_SOCKET && !fInbound)"
      }
    ]
  },
  {
    "sha": "82d74f410b2074e07cd21ff83e1bc27074c9a7af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmQ3NGY0MTBiMjA3NGUwN2NkMjFmZjgzZTFiYzI3MDc0YzlhN2Fm",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T02:29:27Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Show lastseen as days instead of hours",
      "tree": {
        "sha": "b2c7e5ae9a8891cde15d6e35307d2f99c14aaa65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2c7e5ae9a8891cde15d6e35307d2f99c14aaa65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82d74f410b2074e07cd21ff83e1bc27074c9a7af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d74f410b2074e07cd21ff83e1bc27074c9a7af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82d74f410b2074e07cd21ff83e1bc27074c9a7af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d74f410b2074e07cd21ff83e1bc27074c9a7af/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88104e4312c2cb735a57a4d6301231b76f16a5db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88104e4312c2cb735a57a4d6301231b76f16a5db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88104e4312c2cb735a57a4d6301231b76f16a5db"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd9934d286a92f0aec03eb9e0a31616d28369fdf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d74f410b2074e07cd21ff83e1bc27074c9a7af/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d74f410b2074e07cd21ff83e1bc27074c9a7af/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=82d74f410b2074e07cd21ff83e1bc27074c9a7af",
        "patch": "@@ -348,9 +348,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     }\n \n     /// debug print\n-    LogPrint(\"net\", \"trying connection %s lastseen=%.1fhrs\\n\",\n+    LogPrint(\"net\", \"trying connection %s lastseen=%.1fdays\\n\",\n         pszDest ? pszDest : addrConnect.ToString(),\n-        pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n+        pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/86400.0);\n \n     // Connect\n     SOCKET hSocket;"
      }
    ]
  },
  {
    "sha": "bad92e3c7e6db9721a3b260e98727f319d7d5d00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWQ5MmUzYzdlNmRiOTcyMWEzYjI2MGU5ODcyN2YzMTlkN2Q1ZDAw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:54:05Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Report NodeId in misbehaving debug",
      "tree": {
        "sha": "0456fe054b44890ec86fb9d2fe5b49dfd2a8e150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0456fe054b44890ec86fb9d2fe5b49dfd2a8e150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bad92e3c7e6db9721a3b260e98727f319d7d5d00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad92e3c7e6db9721a3b260e98727f319d7d5d00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bad92e3c7e6db9721a3b260e98727f319d7d5d00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad92e3c7e6db9721a3b260e98727f319d7d5d00/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82d74f410b2074e07cd21ff83e1bc27074c9a7af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d74f410b2074e07cd21ff83e1bc27074c9a7af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82d74f410b2074e07cd21ff83e1bc27074c9a7af"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65f818e21fd780d8c9fb7c796b3f6dd1627bd5c5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bad92e3c7e6db9721a3b260e98727f319d7d5d00/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bad92e3c7e6db9721a3b260e98727f319d7d5d00/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bad92e3c7e6db9721a3b260e98727f319d7d5d00",
        "patch": "@@ -1836,10 +1836,10 @@ void Misbehaving(NodeId pnode, int howmuch)\n     int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s (%d -> %d)\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: peer=%d (%d -> %d)\\n\", __func__, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n }\n \n void static InvalidChainFound(CBlockIndex* pindexNew)"
      }
    ]
  },
  {
    "sha": "845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDVkMmQ5NDBiM2ZlODZjYmUzYjdhZTI2ZGM1NWUzZWFhN2Q5Y2U0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:58:24Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Shrink debug line for new best block",
      "tree": {
        "sha": "004f18205b6d3c0b6c02dd5e1e932dc68d0715c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/004f18205b6d3c0b6c02dd5e1e932dc68d0715c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bad92e3c7e6db9721a3b260e98727f319d7d5d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad92e3c7e6db9721a3b260e98727f319d7d5d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bad92e3c7e6db9721a3b260e98727f319d7d5d00"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eba923926bd14f3e07d08cbc00bdf5bd47d97368",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
        "patch": "@@ -2718,11 +2718,11 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n             }\n         }\n     }\n-    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utx)\", __func__,\n+    LogPrintf(\"%s: new best=%s (%d) ver=0x%08x log2_work=%.8g tx=%lu date=%s %f%% cache=%.1fMiB(%utx)\", __func__,\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), chainActive.Tip()->nVersion,\n       log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n+      Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip())*100, pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n     LogPrintf(\"\\n\");"
      }
    ]
  },
  {
    "sha": "917a0eeed30dc009fa932125eeea3fd543176c1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTdhMGVlZWQzMGRjMDA5ZmE5MzIxMjVlZWVhM2ZkNTQzMTc2YzFi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T16:26:37Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Log heights rather than hashes of headers being sent.",
      "tree": {
        "sha": "eafb3a78b4b41d7bca9e014f95304603fc335c85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eafb3a78b4b41d7bca9e014f95304603fc335c85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/917a0eeed30dc009fa932125eeea3fd543176c1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917a0eeed30dc009fa932125eeea3fd543176c1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/917a0eeed30dc009fa932125eeea3fd543176c1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917a0eeed30dc009fa932125eeea3fd543176c1b/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/845d2d940b3fe86cbe3b7ae26dc55e3eaa7d9ce4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "703ba176a269ecb35ce72870464bc4956f05195e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917a0eeed30dc009fa932125eeea3fd543176c1b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917a0eeed30dc009fa932125eeea3fd543176c1b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=917a0eeed30dc009fa932125eeea3fd543176c1b",
        "patch": "@@ -6520,6 +6520,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n             ProcessBlockAvailability(pto->id); // ensure pindexBestKnownBlock is up-to-date\n \n+            int nHeightStart = 0;\n+            int nHeightEnd = 0;\n             if (!fRevertToInv) {\n                 bool fFoundStartingHeader = false;\n                 // Try to find first header that our peer doesn't have, and\n@@ -6553,13 +6555,17 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     if (fFoundStartingHeader) {\n                         // add this to the headers message\n                         vHeaders.push_back(pindex->GetBlockHeader());\n+                        if (!nHeightStart || pindex->nHeight < nHeightStart) nHeightStart = pindex->nHeight;\n+                        if (pindex->nHeight > nHeightEnd) nHeightEnd = pindex->nHeight;\n                     } else if (PeerHasHeader(&state, pindex)) {\n                         continue; // keep looking for the first new block\n                     } else if (pindex->pprev == NULL || PeerHasHeader(&state, pindex->pprev)) {\n                         // Peer doesn't have this header but they do have the prior one.\n                         // Start sending headers.\n                         fFoundStartingHeader = true;\n                         vHeaders.push_back(pindex->GetBlockHeader());\n+                        if (!nHeightStart || pindex->nHeight < nHeightStart) nHeightStart = pindex->nHeight;\n+                        if (pindex->nHeight > nHeightEnd) nHeightEnd = pindex->nHeight;\n                     } else {\n                         // Peer doesn't have this header or the prior one -- nothing will\n                         // connect, so bail out.\n@@ -6582,13 +6588,11 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"block\", \"send %u headers(%s to %s) peer=%d\\n\",\n-                                vHeaders.size(),\n-                                vHeaders.front().GetHash().ToString(),\n-                                vHeaders.back().GetHash().ToString(), pto->id);\n+                        LogPrint(\"block\", \"send %u headers (%d to %d) peer=%d\\n\",\n+                                vHeaders.size(), nHeightStart, nHeightEnd, pto->id);\n                     } else {\n-                        LogPrint(\"block\", \"send header %s peer=%d\\n\",\n-                                vHeaders.front().GetHash().ToString(), pto->id);\n+                        LogPrint(\"block\", \"send header %s (%d) peer=%d\\n\",\n+                                vHeaders.front().GetHash().ToString(), nHeightEnd, pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n                     state.pindexBestHeaderSent = pBestIndex;"
      }
    ]
  },
  {
    "sha": "da064bb3691a2a3936f272125b52482c352ad22a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTA2NGJiMzY5MWEyYTM5MzZmMjcyMTI1YjUyNDgyYzM1MmFkMjJh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:20:54Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Move debug message to before Misbehavior message",
      "tree": {
        "sha": "9badbee6f1bc59b8e8b66a3262cca8bed9d11aa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9badbee6f1bc59b8e8b66a3262cca8bed9d11aa8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da064bb3691a2a3936f272125b52482c352ad22a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da064bb3691a2a3936f272125b52482c352ad22a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da064bb3691a2a3936f272125b52482c352ad22a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da064bb3691a2a3936f272125b52482c352ad22a/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "917a0eeed30dc009fa932125eeea3fd543176c1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917a0eeed30dc009fa932125eeea3fd543176c1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/917a0eeed30dc009fa932125eeea3fd543176c1b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ee48b1e1bd4585a79818baaafda36cbf760b5d3a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da064bb3691a2a3936f272125b52482c352ad22a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da064bb3691a2a3936f272125b52482c352ad22a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=da064bb3691a2a3936f272125b52482c352ad22a",
        "patch": "@@ -5401,8 +5401,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         size_t i;\n         for (i = 0; i < req.indexes.size(); i++) {\n             if (req.indexes[i] >= block.vtx.size()) {\n-                Misbehaving(pfrom->GetId(), 100);\n                 LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->id);\n+                Misbehaving(pfrom->GetId(), 100);\n                 return true;\n             }\n             resp.txn[i] = block.vtx[req.indexes[i]];\n@@ -5543,9 +5543,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         if (stateDummy.IsInvalid(nDos) && nDos > 0)\n                         {\n                             // Punish peer that gave us an invalid orphan tx\n+                            LogPrint(\"mempool2\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                             Misbehaving(fromPeer, nDos);\n                             setMisbehaving.insert(fromPeer);\n-                            LogPrint(\"mempool2\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n                         // Probably non-standard or insufficient fee/priority\n@@ -5657,9 +5657,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!AcceptBlockHeader(cmpctblock.header, state, chainparams, &pindex)) {\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n+                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n                 if (nDoS > 0)\n                     Misbehaving(pfrom->GetId(), nDoS);\n-                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n                 return true;\n             }\n         }\n@@ -5714,8 +5714,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 ReadStatus status = partialBlock.InitData(cmpctblock);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n-                    Misbehaving(pfrom->GetId(), 100);\n                     LogPrintf(\"Peer %d sent us invalid compact block\\n\", pfrom->id);\n+                    Misbehaving(pfrom->GetId(), 100);\n                     return true;\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n@@ -5787,8 +5787,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n         if (status == READ_STATUS_INVALID) {\n             MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-            Misbehaving(pfrom->GetId(), 100);\n             LogPrint(\"block\", \"recv blocktxn. INVALID. peer=%d\\n\", pfrom->id);\n+            Misbehaving(pfrom->GetId(), 100);\n             return true;\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :("
      }
    ]
  },
  {
    "sha": "c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDI4MDE2ZWQ2MzI5ZjAxN2JmOWU0YTA2YjNhMTBmMzBhN2M0OGE0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T10:03:40Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Log size of blocks received and distinguish between blocks received and blocks made.",
      "tree": {
        "sha": "55cd8f7c18d189509b58496479af08582f3c723d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55cd8f7c18d189509b58496479af08582f3c723d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da064bb3691a2a3936f272125b52482c352ad22a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da064bb3691a2a3936f272125b52482c352ad22a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da064bb3691a2a3936f272125b52482c352ad22a"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c5c29b6b1c443100f55dd4b8f2270af3cb1f91bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
        "patch": "@@ -3667,7 +3667,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static int AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n@@ -3710,10 +3710,11 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n \n     int nHeight = pindex->nHeight;\n+    unsigned int nBlockSize = 0;\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+        nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n@@ -3731,7 +3732,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     if (fCheckForPruning)\n         FlushStateToDisk(state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n-    return true;\n+    return nBlockSize;\n }\n \n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman)\n@@ -3744,14 +3745,22 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool fNewBlock = false;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n+        unsigned int ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n+        unsigned int nSize = pfrom->nBlockSize;\n+        if (!nSize) nSize = ret;\n+        if (pfrom) {\n+            if (pindex)\n+                LogPrint(\"block\", \"%s block %s (%d) size=%d peer=%d\\n\", pfrom->nBlockSize ? \"recv\" : \"made\", pblock->GetHash().ToString(), pindex->nHeight, nSize, pfrom->id);\n+            else\n+                LogPrint(\"block\", \"%s block %s size=%d peer=%d\\n\", pfrom->nBlockSize ? \"recv\" : \"made\", pblock->GetHash().ToString(), nSize, pfrom->id);\n+            if (ret > 1 && nSize && ret != nSize)\n+                LogPrint(\"block\", \"block size received (%d) differs from serialized block size (%d) peer=%d\\n\", pfrom->nBlockSize, ret, pfrom->id);\n+        }\n         if (pfrom) {\n             if (pindex) {\n-                LogPrint(\"block\", \"recv block %s (%d) peer=%d\\n\", pblock->GetHash().ToString(), pindex->nHeight, pfrom->id);\n                 mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n                 if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n-            } else\n-                LogPrint(\"block\", \"recv block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->id);\n+            }\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret)\n@@ -5965,6 +5974,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n+        pfrom->nBlockSize = vRecv.size(); // Used by ProcessNewBlock() debug\n         vRecv >> block;\n \n         CValidationState state;\n@@ -5974,6 +5984,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n         ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, &connman);\n+        pfrom->nBlockSize = 0; // Reset back to zero\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "eca218b29c371a10fc2875ed9f5b0037e8014974",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
        "patch": "@@ -2520,6 +2520,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n+    nBlockSize = 0;\n     fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "b9dc5424536879a7b870f1aa9588e53b05f46e30",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c428016ed6329f017bf9e4a06b3a10f30a7c48a4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
        "patch": "@@ -574,6 +574,7 @@ class CNode\n     std::string strSubVer, cleanSubVer;\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n+    unsigned int nBlockSize; // Used by ProcessNewBlock() for debug message.\n     bool fOneShot;\n     bool fClient;\n     bool fInbound;"
      }
    ]
  },
  {
    "sha": "770b26cf39508cb03b721cac956cbd8f422ae757",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzBiMjZjZjM5NTA4Y2IwM2I3MjFjYWM5NTZjYmQ4ZjQyMmFlNzU3",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T15:32:03Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Log sizes of compact block messages (and txs in violation of protocol)",
      "tree": {
        "sha": "3451f8752f8a18ee097ce63293e1b9ce9b443eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3451f8752f8a18ee097ce63293e1b9ce9b443eb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/770b26cf39508cb03b721cac956cbd8f422ae757",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/770b26cf39508cb03b721cac956cbd8f422ae757",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/770b26cf39508cb03b721cac956cbd8f422ae757",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/770b26cf39508cb03b721cac956cbd8f422ae757/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c428016ed6329f017bf9e4a06b3a10f30a7c48a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c428016ed6329f017bf9e4a06b3a10f30a7c48a4"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "666cd62abec5133124ba0002c8b4fa09386bee94",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/770b26cf39508cb03b721cac956cbd8f422ae757/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/770b26cf39508cb03b721cac956cbd8f422ae757/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=770b26cf39508cb03b721cac956cbd8f422ae757",
        "patch": "@@ -5390,6 +5390,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::GETBLOCKTXN)\n     {\n         BlockTransactionsRequest req;\n+        int nSize = vRecv.size();\n         vRecv >> req;\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n@@ -5416,7 +5417,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n             resp.txn[i] = block.vtx[req.indexes[i]];\n         }\n-        LogPrint(\"block\", \"recv getblocktxn %s (%d). send blocktxn (%d indexes) peer=%d\\n\", req.blockhash.ToString(), it->second->nHeight, i, pfrom->id);\n+        LogPrint(\"block\", \"recv getblocktxn %s (%d) size=%d. send blocktxn (%d indexes) peer=%d\\n\", req.blockhash.ToString(), it->second->nHeight, nSize, i, pfrom->id);\n         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n     }\n \n@@ -5481,7 +5482,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n-            LogPrint(\"tx\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n+            LogPrint(\"tx\", \"recv tx (%d bytes). sent in violation of protocol peer=%d\\n\", vRecv.size(), pfrom->id);\n             return true;\n         }\n \n@@ -5647,6 +5648,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::CMPCTBLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlockHeaderAndShortTxIDs cmpctblock;\n+        int nSize = vRecv.size();\n         vRecv >> cmpctblock;\n \n         LOCK(cs_main);\n@@ -5666,7 +5668,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!AcceptBlockHeader(cmpctblock.header, state, chainparams, &pindex)) {\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n-                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n+                LogPrintf(\"recv cmpctblock (%d bytes). INVALID HEADER peer=%d\\n\", nSize, pfrom->id);\n                 if (nDoS > 0)\n                     Misbehaving(pfrom->GetId(), nDoS);\n                 return true;\n@@ -5675,7 +5677,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         // If AcceptBlockHeader returned true, it set pindex\n         assert(pindex);\n-        LogPrint(\"block\", \"recv cmpctblock %s (%d) peer=%d\\n\", cmpctblock.header.GetHash().ToString(), pindex->nHeight, pfrom->id);\n+        LogPrint(\"block\", \"recv cmpctblock %s (%d) %d bytes peer=%d\\n\", cmpctblock.header.GetHash().ToString(), pindex->nHeight, nSize, pfrom->id);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n         std::map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n@@ -5780,14 +5782,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         BlockTransactions resp;\n+        int nSize = vRecv.size();\n         vRecv >> resp;\n \n         LOCK(cs_main);\n \n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"block\", \"recv blocktxn %s not expected peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s %d bytes not expected peer=%d\\n\", resp.blockhash.ToString(), nSize, pfrom->id);\n             return true;\n         }\n \n@@ -5796,17 +5799,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n         if (status == READ_STATUS_INVALID) {\n             MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-            LogPrint(\"block\", \"recv blocktxn. INVALID. peer=%d\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s bytes. INVALID. peer=%d\\n\", nSize, pfrom->id);\n             Misbehaving(pfrom->GetId(), 100);\n             return true;\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n             std::vector<CInv> invs;\n             invs.push_back(CInv(MSG_BLOCK, resp.blockhash));\n-            LogPrint(\"block\", \"recv blocktxn. FAILED. send getdata %s peer=%d\\n\", invs[0].ToString(), pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s bytes. FAILED. send getdata %s peer=%d\\n\", nSize, invs[0].ToString(), pfrom->id);\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n-            LogPrint(\"block\", \"recv blocktxn %s peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s %d bytes peer=%d\\n\", resp.blockhash.ToString(), nSize, pfrom->id);\n             CValidationState state;\n             ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n             int nDoS;"
      }
    ]
  },
  {
    "sha": "67cddfa992235803d393a60231011a800c7aaaba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2NkZGZhOTkyMjM1ODAzZDM5M2E2MDIzMTAxMWE4MDBjN2FhYWJh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-08T05:13:00Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-17T02:53:02Z"
      },
      "message": "Show when we choose to disconnect.",
      "tree": {
        "sha": "a36733fc84de6d30a5d627b8eca2924e9a980bad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a36733fc84de6d30a5d627b8eca2924e9a980bad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67cddfa992235803d393a60231011a800c7aaaba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67cddfa992235803d393a60231011a800c7aaaba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67cddfa992235803d393a60231011a800c7aaaba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67cddfa992235803d393a60231011a800c7aaaba/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "770b26cf39508cb03b721cac956cbd8f422ae757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/770b26cf39508cb03b721cac956cbd8f422ae757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/770b26cf39508cb03b721cac956cbd8f422ae757"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3a5821362eb097aea1168df445461891933f3e97",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67cddfa992235803d393a60231011a800c7aaaba/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67cddfa992235803d393a60231011a800c7aaaba/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=67cddfa992235803d393a60231011a800c7aaaba",
        "patch": "@@ -431,12 +431,13 @@ void CConnman::DumpBanlist()\n \n void CNode::CloseSocketDisconnect()\n {\n-    fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n+        LogPrint(\"net\", \"disconnecting %speer=%d\\n\", fDisconnect ? \"(as requested) \" : \"\", id);\n+        fDisconnect = true;\n         CloseSocket(hSocket);\n     }\n+    fDisconnect = true;\n \n     // in case this fails, we'll empty the recv buffer when the CNode is deleted\n     TRY_LOCK(cs_vRecvMsg, lockRecv);"
      }
    ]
  }
]