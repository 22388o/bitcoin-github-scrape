[
  {
    "sha": "46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmZhODgwZjE4YzlkOGZkNzE3M2YzNWYzNzQ4ZWEzMzk5ODE5ZDQ0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-04T20:42:33Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:07:42Z"
      },
      "message": "Make functions in validation.cpp static:\n\n- ReceivedBlockTransactions\n- AcceptToMemoryPoolWorker\n- AcceptToMemoryPoolWithTime\n\nalso pass Consensus::Params to them directly",
      "tree": {
        "sha": "1524c1f5344555b82ca6e77460b8d2cdd6d7da53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1524c1f5344555b82ca6e77460b8d2cdd6d7da53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9kfeAAoJEIhmwY6hyUSiwUsP/ihxHDsVkMskA1xp0jTk7yLO\n4iPO5ysWK3FNcwO1QmJ8JmpIwFw/ATgve4xgQvSrw1g+MJkNFOd5x/2d67HJgjmb\nKmoP4hZN7L0e/eGmLNBX3gJz27m+YyYQ90ZS83WuqDh/1wIUlrcVxwa4vkW9nxaa\nOBEglOVKSS4OgVDkNi0b1T+3AiauPvxRtu/iWr8uTXNes53+fz2B4hc12C96uvv8\nqft8TefGIza1kTihZbnR+OJkS232PPfkRHfMCmPuWonEitRi4knnv+EOeB0e1qFF\nCUEI+aD5fvgYcQhhIzCm5J/l6JwF1MOIRkTyztbtc6DLv/ErQEW2THCjKk5kBfY1\nS5D/Xgp6WoGx7L4n+7RmUFKFWSBs0KNQbWbqxg9rY9SLvRc7rn0hE3Yk4+fL/EtA\nO7YJGAFPuQ23m7T1vBfu5NBcU9Dbt/jLQrZzgaVlLrQXlOd4dKyBYfggXeWLNnG/\nzaK+Cu6rHwcO3oGOsaCY3gVOR5Q+BhxphsGzzXjg1qqfdwGxPlclzJpq9j8xP7cV\njKGLD5IKC2E2MXMv8X+ZgeokTfCd7bynY4jexW0QqjtmvJc9rj6HSQZOXIbzfBH4\nPw2evbdMwbXldTCq36W8LmXDgseSb950HQ5ZjRSgoHjwDGUQLLy7ucdx9axlGme5\nOJljaruzWn10pI/YMi6T\n=tFNg\n-----END PGP SIGNATURE-----",
        "payload": "tree 1524c1f5344555b82ca6e77460b8d2cdd6d7da53\nparent 9111df9673beb6d6616d491a5478f09b5f14d040\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491338553 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535262 +0200\n\nMake functions in validation.cpp static:\n\n- ReceivedBlockTransactions\n- AcceptToMemoryPoolWorker\n- AcceptToMemoryPoolWithTime\n\nalso pass Consensus::Params to them directly\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9111df9673beb6d6616d491a5478f09b5f14d040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9111df9673beb6d6616d491a5478f09b5f14d040",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9111df9673beb6d6616d491a5478f09b5f14d040"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ba63bc3e8f9afe6ddbd0bc80c9086d51668c36ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "patch": "@@ -537,7 +537,7 @@ static bool IsCurrentForFeeEstimation()\n     return true;\n }\n \n-bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<uint256>& vHashTxnToUncache)\n {\n@@ -555,7 +555,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n     if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n@@ -884,7 +884,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-        if (!Params().RequireStandard()) {\n+        if (!chainparams.RequireStandard()) {\n             scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n         }\n \n@@ -954,12 +954,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     return true;\n }\n \n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+/** (try to) add transaction to memory pool with a specified acceptance time **/\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -974,7 +975,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n+    const CChainParams& chainparams = Params();\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -2677,15 +2679,15 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)\n+static bool ReceivedBlockTransactions(const Consensus::Params& consensusParams, const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, Params().GetConsensus())) {\n+    if (IsWitnessEnabled(pindexNew->pprev, consensusParams)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3207,7 +3209,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n                 AbortNode(state, \"Failed to write block\");\n-        if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n+        if (!ReceivedBlockTransactions(chainparams.GetConsensus(), block, state, pindex, blockPos))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n@@ -3838,7 +3840,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n                 return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n-            if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n+            if (!ReceivedBlockTransactions(chainparams.GetConsensus(), block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -4177,6 +4179,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(void)\n {\n+    const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n@@ -4213,7 +4216,7 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(mempool, state, tx, true, NULL, nTime);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, NULL, nTime, NULL, false, 0);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "9f9a0a227bf7bc8588f06180b32dcd52fe4df6ed",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "patch": "@@ -322,11 +322,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = NULL,\n                         bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n-/** (try to) add transaction to memory pool with a specified acceptance time **/\n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced = NULL,\n-                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n-\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n "
      }
    ]
  }
]