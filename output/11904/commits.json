[
  {
    "sha": "e60cb99c580a602a83856769ad2ac882d3cdfcb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjBjYjk5YzU4MGE2MDJhODM4NTY3NjlhZDJhYzg4MmQzY2RmY2I1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-14T22:06:22Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-01-16T06:02:57Z"
      },
      "message": "Add a lock to the wallet directory",
      "tree": {
        "sha": "60d15f0527d6b5289547f411d8717e1e3a67d355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60d15f0527d6b5289547f411d8717e1e3a67d355"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e60cb99c580a602a83856769ad2ac882d3cdfcb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc91b7699732efc20ac1526383515c944b66d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc91b7699732efc20ac1526383515c944b66d70"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 47,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c0c24ae98b100586275c1b5db110996073ff8877",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 20,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60cb99c580a602a83856769ad2ac882d3cdfcb5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60cb99c580a602a83856769ad2ac882d3cdfcb5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=e60cb99c580a602a83856769ad2ac882d3cdfcb5",
        "patch": "@@ -18,6 +18,7 @@\n #include <sys/stat.h>\n #endif\n \n+#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n \n namespace {\n@@ -52,6 +53,24 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n         }\n     }\n }\n+\n+bool LockEnvDirectory(const fs::path& env_path)\n+{\n+    // Make sure only a single Bitcoin process is using the wallet directory.\n+    fs::path lock_file_path = env_path / \".lock\";\n+    FILE* file = fsbridge::fopen(lock_file_path, \"a\"); // empty lock file; created if it doesn't exist.\n+    if (file) fclose(file);\n+\n+    try {\n+        static boost::interprocess::file_lock lock(lock_file_path.string().c_str());\n+        if (!lock.try_lock()) {\n+            return false;\n+        }\n+    } catch (const boost::interprocess::interprocess_exception& e) {\n+        return error(\"Error obtaining lock on wallet directory %s: %s.\", env_path.string(), e.what());\n+    }\n+    return true;\n+}\n } // namespace\n \n //\n@@ -95,13 +114,17 @@ void CDBEnv::Close()\n     EnvShutdown();\n }\n \n-bool CDBEnv::Open(const fs::path& pathIn)\n+bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n+    if (!LockEnvDirectory(pathIn)) {\n+        return false;\n+    }\n+\n     strPath = pathIn.string();\n     fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n@@ -134,7 +157,24 @@ bool CDBEnv::Open(const fs::path& pathIn)\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0) {\n         dbenv->close(0);\n-        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        if (retry) {\n+            // try moving the database env out of the way\n+            fs::path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n+            try {\n+                fs::rename(pathLogDir, pathDatabaseBak);\n+                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n+            } catch (const fs::filesystem_error&) {\n+                // failure is ok (well, not really, but it's not worse than what we started with)\n+            }\n+            // try opening it again one more time\n+            if (!Open(pathIn, false)) {\n+                // if it still fails, it probably means we can't even create the database env\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n     }\n \n     fDbEnvInit = true;\n@@ -269,25 +309,11 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walle\n         return false;\n     }\n \n-    if (!bitdb.Open(walletDir))\n-    {\n-        // try moving the database env out of the way\n-        fs::path pathDatabase = walletDir / \"database\";\n-        fs::path pathDatabaseBak = walletDir / strprintf(\"database.%d.bak\", GetTime());\n-        try {\n-            fs::rename(pathDatabase, pathDatabaseBak);\n-            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-        } catch (const fs::filesystem_error&) {\n-            // failure is ok (well, not really, but it's not worse than what we started with)\n-        }\n-\n-        // try again\n-        if (!bitdb.Open(walletDir)) {\n-            // if it still fails, it probably means we can't even create the database env\n-            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n-            return false;\n-        }\n+    if (!bitdb.Open(walletDir, true)) {\n+        errorStr = strprintf(_(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\"), walletDir);\n+        return false;\n     }\n+\n     return true;\n }\n "
      },
      {
        "sha": "787135e400ce562117937a35c4107cc028f0b68f",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60cb99c580a602a83856769ad2ac882d3cdfcb5/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60cb99c580a602a83856769ad2ac882d3cdfcb5/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=e60cb99c580a602a83856769ad2ac882d3cdfcb5",
        "patch": "@@ -68,7 +68,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const fs::path& path);\n+    bool Open(const fs::path& path, bool retry = 0);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);"
      }
    ]
  },
  {
    "sha": "c9ed4bd58cac05b355ab103476ff29ecd10ce263",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWVkNGJkNThjYWMwNWIzNTVhYjEwMzQ3NmZmMjllY2QxMGNlMjYz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-14T22:15:18Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-01-16T06:05:45Z"
      },
      "message": "Add a test for wallet directory locking",
      "tree": {
        "sha": "1c339adb96a5a6d802b17c29d72c8e6b9fb777d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c339adb96a5a6d802b17c29d72c8e6b9fb777d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ed4bd58cac05b355ab103476ff29ecd10ce263",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e60cb99c580a602a83856769ad2ac882d3cdfcb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e60cb99c580a602a83856769ad2ac882d3cdfcb5"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "38e2a8bfeca305679c2ab5d793078b38ed77492c",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9ed4bd58cac05b355ab103476ff29ecd10ce263/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9ed4bd58cac05b355ab103476ff29ecd10ce263/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=c9ed4bd58cac05b355ab103476ff29ecd10ce263",
        "patch": "@@ -15,8 +15,8 @@\n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w']]\n+        self.num_nodes = 2\n+        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w'], []]\n         self.supports_cli = True\n \n     def run_test(self):\n@@ -28,7 +28,7 @@ def run_test(self):\n \n         assert_equal(set(node.listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n \n-        self.stop_node(0)\n+        self.stop_nodes()\n \n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n@@ -59,19 +59,21 @@ def run_test(self):\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         w5.generate(1)\n-        self.stop_node(0)\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n-        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n+        self.restart_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         w5_info = w5.getwalletinfo()\n         assert_equal(w5_info['immature_balance'], 50)\n \n-        self.stop_node(0)\n+        competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n+        os.mkdir(competing_wallet_dir)\n+        self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n+        self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Cannot obtain a lock on wallet directory')\n \n-        self.start_node(0, self.extra_args[0])\n+        self.restart_node(0, self.extra_args[0])\n \n         w1 = wallet(\"w1\")\n         w2 = wallet(\"w2\")"
      }
    ]
  },
  {
    "sha": "64226de908c76997fadf147342c494ad0662fa43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDIyNmRlOTA4Yzc2OTk3ZmFkZjE0NzM0MmM0OTRhZDA2NjJmYTQz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-23T23:45:33Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-01-16T06:05:45Z"
      },
      "message": "Generalise walletdir lock error message for correctness",
      "tree": {
        "sha": "19810e302a362ed8a16c794d214bd411730bfa2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19810e302a362ed8a16c794d214bd411730bfa2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64226de908c76997fadf147342c494ad0662fa43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64226de908c76997fadf147342c494ad0662fa43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9ed4bd58cac05b355ab103476ff29ecd10ce263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ed4bd58cac05b355ab103476ff29ecd10ce263"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a647a5b025f8b94ded3b3badb5e790af5a8e7e73",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64226de908c76997fadf147342c494ad0662fa43/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64226de908c76997fadf147342c494ad0662fa43/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=64226de908c76997fadf147342c494ad0662fa43",
        "patch": "@@ -121,11 +121,12 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n \n     boost::this_thread::interruption_point();\n \n+    strPath = pathIn.string();\n     if (!LockEnvDirectory(pathIn)) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\", strPath);\n         return false;\n     }\n \n-    strPath = pathIn.string();\n     fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n     fs::path pathErrorFile = pathIn / \"db.log\";\n@@ -310,7 +311,7 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walle\n     }\n \n     if (!bitdb.Open(walletDir, true)) {\n-        errorStr = strprintf(_(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\"), walletDir);\n+        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n         return false;\n     }\n "
      },
      {
        "sha": "0891829127708a0945f399307a9b03c1a6c93bce",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64226de908c76997fadf147342c494ad0662fa43/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64226de908c76997fadf147342c494ad0662fa43/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=64226de908c76997fadf147342c494ad0662fa43",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n-        self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Cannot obtain a lock on wallet directory')\n+        self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n         self.restart_node(0, self.extra_args[0])\n "
      }
    ]
  },
  {
    "sha": "5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYwYTRhY2ExZTZjMTFlMWRiY2E5ZDMzOTBjMGRjNzM5ZTgxMjA0",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-26T06:18:39Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-01-16T06:05:46Z"
      },
      "message": "Make .walletlock distinct from .lock",
      "tree": {
        "sha": "8a49f7e4369a6cb5ea299b905f990944aae2a93e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a49f7e4369a6cb5ea299b905f990944aae2a93e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64226de908c76997fadf147342c494ad0662fa43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64226de908c76997fadf147342c494ad0662fa43"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e3366e10602db9a92741ef76b957c87c212cf98f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5260a4aca1e6c11e1dbca9d3390c0dc739e81204/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5260a4aca1e6c11e1dbca9d3390c0dc739e81204/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
        "patch": "@@ -57,7 +57,7 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n bool LockEnvDirectory(const fs::path& env_path)\n {\n     // Make sure only a single Bitcoin process is using the wallet directory.\n-    fs::path lock_file_path = env_path / \".lock\";\n+    fs::path lock_file_path = env_path / \".walletlock\";\n     FILE* file = fsbridge::fopen(lock_file_path, \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n@@ -123,7 +123,7 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n \n     strPath = pathIn.string();\n     if (!LockEnvDirectory(pathIn)) {\n-        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\", strPath);\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "2f3bd47d44634cfc0a4261e64af178407ce2869c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjNiZDQ3ZDQ0NjM0Y2ZjMGE0MjYxZTY0YWYxNzg0MDdjZTI4Njlj",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-26T06:41:55Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-01-16T06:05:46Z"
      },
      "message": "Abstract directory locking into util.cpp",
      "tree": {
        "sha": "a604dd3608644a7cc968253bde02cbedbd30d916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a604dd3608644a7cc968253bde02cbedbd30d916"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f3bd47d44634cfc0a4261e64af178407ce2869c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5260a4aca1e6c11e1dbca9d3390c0dc739e81204"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 27,
      "deletions": 36
    },
    "files": [
      {
        "sha": "b48802637b34f93086bb2b03c8b990540231a52a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2f3bd47d44634cfc0a4261e64af178407ce2869c",
        "patch": "@@ -1143,23 +1143,10 @@ bool AppInitParameterInteraction()\n \n static bool LockDataDirectory(bool probeOnly)\n {\n-    std::string strDataDir = GetDataDir().string();\n-\n     // Make sure only a single Bitcoin process is using the data directory.\n-    fs::path pathLockFile = GetDataDir() / \".lock\";\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n-    if (file) fclose(file);\n-\n-    try {\n-        static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n-        if (!lock.try_lock()) {\n-            return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), strDataDir, _(PACKAGE_NAME)));\n-        }\n-        if (probeOnly) {\n-            lock.unlock();\n-        }\n-    } catch(const boost::interprocess::interprocess_exception& e) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\") + \" %s.\", strDataDir, _(PACKAGE_NAME), e.what()));\n+    fs::path datadir = GetDataDir();\n+    if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n     }\n     return true;\n }"
      },
      {
        "sha": "80eed24ffdc902bf1d44938b045b7d59e0ccd7ec",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2f3bd47d44634cfc0a4261e64af178407ce2869c",
        "patch": "@@ -72,6 +72,7 @@\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n+#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n@@ -375,6 +376,27 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n+{\n+    fs::path pathLockFile = directory / lockfile_name;\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+    if (file) fclose(file);\n+\n+    try {\n+        static std::map<std::string, boost::interprocess::file_lock> locks;\n+        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n+        if (!lock.try_lock()) {\n+            return false;\n+        }\n+        if (probe_only) {\n+            lock.unlock();\n+        }\n+    } catch (const boost::interprocess::interprocess_exception& e) {\n+        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n+    }\n+    return true;\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "277b4c66af6cfe5bcb2855f8733d58a0b77cd97c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2f3bd47d44634cfc0a4261e64af178407ce2869c",
        "patch": "@@ -173,6 +173,7 @@ bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n+bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);"
      },
      {
        "sha": "23c6279128722f3b01e814d9c95427edd39548e3",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 20,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f3bd47d44634cfc0a4261e64af178407ce2869c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=2f3bd47d44634cfc0a4261e64af178407ce2869c",
        "patch": "@@ -18,7 +18,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n \n namespace {\n@@ -53,24 +52,6 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n         }\n     }\n }\n-\n-bool LockEnvDirectory(const fs::path& env_path)\n-{\n-    // Make sure only a single Bitcoin process is using the wallet directory.\n-    fs::path lock_file_path = env_path / \".walletlock\";\n-    FILE* file = fsbridge::fopen(lock_file_path, \"a\"); // empty lock file; created if it doesn't exist.\n-    if (file) fclose(file);\n-\n-    try {\n-        static boost::interprocess::file_lock lock(lock_file_path.string().c_str());\n-        if (!lock.try_lock()) {\n-            return false;\n-        }\n-    } catch (const boost::interprocess::interprocess_exception& e) {\n-        return error(\"Error obtaining lock on wallet directory %s: %s.\", env_path.string(), e.what());\n-    }\n-    return true;\n-}\n } // namespace\n \n //\n@@ -122,7 +103,7 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n     boost::this_thread::interruption_point();\n \n     strPath = pathIn.string();\n-    if (!LockEnvDirectory(pathIn)) {\n+    if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n     }"
      }
    ]
  }
]