[
  {
    "sha": "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQyNmVkNWZhNWJmOWZjMGNmNjBlODRhMTM1ZTdkMDNjOTM0MDAw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-08T18:06:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-19T20:24:11Z"
      },
      "message": "test: Use RPC mempool sync to speed up tests",
      "tree": {
        "sha": "b921d9f524bca836a5a86b7c4b2ce80fe830af1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b921d9f524bca836a5a86b7c4b2ce80fe830af1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgmyAv9FDIPt1poFFQZyrB8MfFMmPnARyxEi8Bcxsix3MS0qUsrsfjbOIB1IaSw\nh3ZUHAk0DrC+733TqIzsPwWHDkaeMzBfjCdf0R9AsiDtQUC+sFIcEj9qlFmv9GHK\n1Xor+6mcPwdrltMUK0hr56PtT/t3g4S7TlX6bSe7Tuvm0bX7j8lF4tqAB6PHmN51\n8oHGOciLOiUOQ239cPRH2IGMoovlw38XL3F9B0ECiz4WhUT0e92Zf2y0lQq+xvMA\neYL/PuiTdS+Fnhwhjo2h47MH7/xxWjyjEwy3sfQfGs/RRgJ8anoY+7rJSUjm34/X\noo7IhfbfPiu894lo/prq9jv0+bRCEIxj5Pizm0HI/JzGGlXlBIu9E3IBecsUQcMx\nW1S9z8plHsVhwRl3OutRio+Y0j2YBIY/+OHolscOK/XqOX2b/yR4Qfmk8YGrqa+7\nQ3ZqsRMbydhIKUgyYcDUvnwJA0EjDk+h5DWWlHgPtZDHs7afJIjL4nS4HN7WFg2z\nEi1Nee4c\n=1zv0\n-----END PGP SIGNATURE-----",
        "payload": "tree b921d9f524bca836a5a86b7c4b2ce80fe830af1c\nparent b6a5583c4f9becbccc4cfb1fb93d190a45cb27ea\nauthor MarcoFalke <falke.marco@gmail.com> 1554746781 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555705451 -0400\n\ntest: Use RPC mempool sync to speed up tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6a5583c4f9becbccc4cfb1fb93d190a45cb27ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6a5583c4f9becbccc4cfb1fb93d190a45cb27ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6a5583c4f9becbccc4cfb1fb93d190a45cb27ea"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 64,
      "deletions": 3
    },
    "files": [
      {
        "sha": "353592691140276a3d9246edcc83a65ae524fcc5",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -123,6 +123,7 @@ def check_estimates(node, fees_seen):\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.use_rpc_sync = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "3c3f3e89cb50be43dde3fd66999ce498691312ff",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -26,6 +26,7 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n+        self.use_rpc_sync = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9900112c6f56180b57ee43e17ea031028c777427",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -42,6 +42,7 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.use_rpc_sync = True\n         self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "9100158eef433a925a1457e7f409743da38f69e8",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -95,6 +95,7 @@ def __init__(self):\n         self.nodes = []\n         self.network_thread = None\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n+        self.use_rpc_sync = False\n         self.supports_cli = False\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n@@ -410,7 +411,7 @@ def sync_blocks(self, nodes=None, **kwargs):\n         sync_blocks(nodes or self.nodes, **kwargs)\n \n     def sync_mempools(self, nodes=None, **kwargs):\n-        sync_mempools(nodes or self.nodes, **kwargs)\n+        sync_mempools(nodes or self.nodes, use_rpc_sync=self.use_rpc_sync, **kwargs)\n \n     def sync_all(self, nodes=None, **kwargs):\n         self.sync_blocks(nodes, **kwargs)"
      },
      {
        "sha": "d3eb644300b76de89281f3c045a2af37e891ebb0",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            for i_remote, rpc_remote in enumerate(rpc_connections):\n+                pool_remote = {\n+                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                }\n+                # Create \"recursive pools\" for ancestors\n+                for tx in pool_remote:\n+                    pool_remote[tx].ancestors = {a: pool_remote[a] for a in pool_remote[tx].ancestors}\n+\n+                # Push this pool to all targets\n+                for i_target, rpc_target in enumerate(rpc_connections):\n+                    missing_txids = pool[i_remote].difference(pool[i_target])\n+                    if not missing_txids:\n+                        continue\n+                    # Send missing txs\n+                    topo_send(\n+                        txs={txid: pool_remote[txid]\n+                             for txid in pool_remote if txid in missing_txids},\n+                        rpc=rpc_target,\n+                        pool_add=pool[i_target],\n+                    )\n+            # Refresh pools to update any removed (replaced) txs\n+            pool = [set(r.getrawmempool()) for r in rpc_connections]\n+            sync_done = pool.count(pool[0]) == len(rpc_connections)\n+            assert sync_done  # If the sync fails there is a logic error in the sync or test code\n+        if sync_done:\n             if flush_scheduler:\n                 for r in rpc_connections:\n                     r.syncwithvalidationinterfacequeue()"
      },
      {
        "sha": "482458a275e0e28092a5684da5d030e287e999c0",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -24,6 +24,7 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.use_rpc_sync = True\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "7e5b378eb5053d51db5298b5b3d769e527b74009",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -69,6 +69,7 @@\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n+        self.use_rpc_sync = True\n         self.extra_args = [\n             [\"-addresstype=legacy\"],\n             [\"-addresstype=p2sh-segwit\"],"
      },
      {
        "sha": "0780eb1756d4b3ba69260062ec1e4ba60d2dfbcd",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -47,6 +47,7 @@ class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.use_rpc_sync = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n "
      },
      {
        "sha": "8927d7396ab514958cc885c96c915381fceb3f91",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -39,6 +39,7 @@ def create_transactions(node, address, amt, fees):\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.use_rpc_sync = True\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "7d27da170ba9a32c12911167379600fd1d736e40",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -20,6 +20,7 @@\n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.use_rpc_sync = True\n         self.setup_clean_chain = True\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "f44b1cbe609ffb07e82bfa5aad3ea9681b148fa6",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -33,6 +33,7 @@\n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.use_rpc_sync = True\n         self.setup_clean_chain = True\n         self.extra_args = [[\n             \"-walletrbf={}\".format(i),"
      },
      {
        "sha": "da4e2d879745c1007b70480c60c245a68a9981f8",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -19,6 +19,7 @@ def assert_approx(v, vexp, vspan=0.00001):\n class WalletGroupTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n+        self.use_rpc_sync = True\n         self.num_nodes = 3\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timeout = 120"
      },
      {
        "sha": "420a2031f444b72357788dc561eb7a8d301983eb",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -16,6 +16,7 @@\n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.use_rpc_sync = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "24d1209ec3b0d00600ae9cf42875a3332476db15",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "patch": "@@ -23,6 +23,7 @@ def tx_from_hex(hexstring):\n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.use_rpc_sync = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "faac5a8ff6c9966daa880bc8c02951fea804589d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFjNWE4ZmY2Yzk5NjZkYWE4ODBiYzhjMDI5NTFmZWE4MDQ1ODlk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-22T12:41:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-22T20:12:45Z"
      },
      "message": "test: Add documentation to sync_mempools::use_rpc_sync",
      "tree": {
        "sha": "bd90020cb18f50b2367cf8884cb0fbbf2b892496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd90020cb18f50b2367cf8884cb0fbbf2b892496"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faac5a8ff6c9966daa880bc8c02951fea804589d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhPvAv/Z6I+BTHKBQW8r0R4ECrkCHDqbfPn5cwPLehHYseROTsi5v9wrk+vOhMI\n4W81dnL6hSpUZfQjanrAQ1d+43iZrnpPDeFkfIAux40OiRK0JAF7eAidsukKrRKm\nYEQokRcfx6Oh/JF0auoIqGOgtY9X4LSUxtB6LQrPCy1EkSA9MFY561Y4SDAU0WB8\n8SUM9HoO5fUynRxT4dsF8ic2b2bEkslxso8dFPmMvcd/E4mhLN4zEvfw2err2lnt\nHdxwuVHiRIkRg0urC3VrHiUde91uHcF6Y1RIeO4iWW5/fkDkMcw6CeD2mCDnUiqR\n0IwGSC4rpUgb2hrIvVsjadfW6wKNdwh+BmKjV4slziK/U0qH15QaNd/cmklkcbqU\nxRjirzHJiorlGjTDOPJ95OHs0IntK1X2JmOVd4OFKRa+a4kFmXGvxNWRXF5PFkeY\nxCqk8/wVn3BuIH0EdLn5c3VLW7qTbA7L2ufU9TyHewaiTIvwVPBUpBMYQH2siWTd\nLcImbEvb\n=gXU9\n-----END PGP SIGNATURE-----",
        "payload": "tree bd90020cb18f50b2367cf8884cb0fbbf2b892496\nparent fad26ed5fa5bf9fc0cf60e84a135e7d03c934000\nauthor MarcoFalke <falke.marco@gmail.com> 1555936890 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555963965 -0400\n\ntest: Add documentation to sync_mempools::use_rpc_sync\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faac5a8ff6c9966daa880bc8c02951fea804589d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faac5a8ff6c9966daa880bc8c02951fea804589d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faac5a8ff6c9966daa880bc8c02951fea804589d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad26ed5fa5bf9fc0cf60e84a135e7d03c934000"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "254be1f9056fa9c2a45feafd9ff1f8bc8f35b323",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faac5a8ff6c9966daa880bc8c02951fea804589d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faac5a8ff6c9966daa880bc8c02951fea804589d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faac5a8ff6c9966daa880bc8c02951fea804589d",
        "patch": "@@ -393,7 +393,7 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n \n     class TxInfo:\n@@ -410,37 +410,38 @@ def topo_send(txs, rpc, pool_add):\n                     pool_add.add(i)\n                     # Note that conflicted txs (due to RBF) are not removed\n                     # from the pool\n-                except JSONRPCException:\n+                except JSONRPCException as e:\n                     # This transaction violates policy (e.g. RBF policy). The\n                     # mempools should still converge when the high-fee\n                     # replacement is synced in a later call\n-                    pass\n+                    assert 'insufficient fee' in e.error['message']\n \n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n         sync_done = pool.count(pool[0]) == len(rpc_connections)\n         if use_rpc_sync and not sync_done:\n-            for i_remote, rpc_remote in enumerate(rpc_connections):\n+            # Iterate over all nodes, get their raw mempool and send the\n+            # missing txs to all other nodes\n+            for i_from, rpc_from in enumerate(rpc_connections):\n+                # A pool is a map txid->TxInfo\n                 pool_remote = {\n-                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n-                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                    txid: TxInfo(raw=rpc_from.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_from.getrawmempool(verbose=True).items()\n                 }\n-                # Create \"recursive pools\" for ancestors\n+                # Create a pool for all ancestor txids (this pool needs to be sent first)\n                 for tx in pool_remote:\n                     pool_remote[tx].ancestors = {a: pool_remote[a] for a in pool_remote[tx].ancestors}\n \n                 # Push this pool to all targets\n-                for i_target, rpc_target in enumerate(rpc_connections):\n-                    missing_txids = pool[i_remote].difference(pool[i_target])\n-                    if not missing_txids:\n-                        continue\n+                for i_to, rpc_to in enumerate(rpc_connections):\n+                    missing_txids = pool[i_from].difference(pool[i_to])\n                     # Send missing txs\n                     topo_send(\n                         txs={txid: pool_remote[txid]\n                              for txid in pool_remote if txid in missing_txids},\n-                        rpc=rpc_target,\n-                        pool_add=pool[i_target],\n+                        rpc=rpc_to,\n+                        pool_add=pool[i_to],\n                     )\n             # Refresh pools to update any removed (replaced) txs\n             pool = [set(r.getrawmempool()) for r in rpc_connections]"
      }
    ]
  }
]