jnewbery,2019-04-19T20:33:13Z,"Nice! This has been on my list for a long time. Thanks for doing it!\n\nðŸš€ concept ACK ",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485007223,485007223,
laanwj,2019-04-20T12:20:05Z,"This is an impressive improvement in speed!\nACK fad26ed5fa5bf9fc0cf60e84a135e7d03c934000\n\na test here:\n```\nALL                                   | âœ“ Passed  | 1788 s (accumulated)\nRuntime: 472 s\n```\n```\nALL                                   | âœ“ Passed  | 1516 s (accumulated)\nRuntime: 388 s\n```",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485107509,485107509,
MarcoFalke,2019-04-22T12:35:19Z,"Added a commit to extend the docstring, as requested by @promag and @jonatack",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485407600,485407600,
jnewbery,2019-04-22T21:26:46Z,"Aesthetic disagreements aside, this is a great improvement. utACK faac5a8ff6c9966daa880bc8c02951fea804589d",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485558503,485558503,
MarcoFalke,2019-04-24T15:20:02Z,"Going back to this approach, since modifying bitcoind is interpreted as too controversial",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486287647,486287647,
MarcoFalke,2019-04-24T15:20:21Z,Unless there are objections this will be merged on Monday,https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486287775,486287775,
promag,2019-04-24T15:26:07Z,Could make sense to skip this optimization in one of the travis job?,https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486290266,486290266,
DrahtBot,2019-04-25T16:28:53Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15911](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15911.html) (Use wallet RBF default for walletcreatefund",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486744481,486744481,
jonatack,2019-04-29T22:55:52Z,"Functional tests on master at 8da1aa4 with Linux Debian 4.19.28-2 (2019-03-15) x86/64\n\nALL                                   | âœ“ Passed  | 1824 s (accumulated)\nRuntime: 466 s\n\nALL                                   | âœ“ Passed  | 1867 s (accumulated) \nRuntime: 476 s\n\nALL                                   | âœ“ Passed  | 1856 s (accumulated) \nRuntime: 473 s\n\nALL                   ",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-487772015,487772015,
laanwj,2019-04-30T20:19:12Z,"> Going back to this approach, since modifying bitcoind is interpreted as too controversial\n\nI prefer this approach as well. I think the only use for this, ever, is the tests, so I'd prefer not to change `bitcoind` with a special case for it.",https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-488100037,488100037,
promag,2019-04-21T23:02:05Z,"Could assert error ""insufficient fee""?",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184364,277184364,test/functional/test_framework/util.py
promag,2019-04-21T23:04:49Z,Could skip when `i_remove == i_target`?,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184430,277184430,test/functional/test_framework/util.py
promag,2019-04-21T23:14:46Z,A brief description of the following algorithm would be handy.,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184625,277184625,test/functional/test_framework/util.py
jonatack,2019-04-22T09:04:38Z,"Adding code documentation in the docstring here would be great, detailling `use_rpc_sync` purpose and use.",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277243663,277243663,test/functional/test_framework/util.py
jnewbery,2019-04-22T19:39:29Z,"It seems slightly odd to me that this code, which we only ever expect to run once, should be in a `while` loop. I think it'd be clearer to split it out into its own function. Something like:\n\n```python\ndef sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n    """"""\n    Wait until everybody has the same transactions in their memory\n    pools.",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277408817,277408817,test/functional/test_framework/util.py
jnewbery,2019-04-22T19:40:27Z,nit: `remote` and `target` don't seem like very descriptive names to me `from` and `to` seem more intuitive to me as the node you're sync'ing from and to.,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409123,277409123,test/functional/test_framework/util.py
jnewbery,2019-04-22T19:41:38Z,"nit: can you make this comment more explicit? What is a ""recursive pool""?",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409494,277409494,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T20:08:56Z,"I'd rather not use a while-else, which I have to look up what it does every time I encounter it. I opted for a smaller diff and added an `assert`, so the diff should be easier to review and it should be clear that it is only run once via the assert.",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277418142,277418142,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T20:13:39Z,Renamed to `to` and `from`,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419678,277419678,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T20:13:53Z,"Removed mention of ""recursive""",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419747,277419747,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T20:15:16Z,I opted for code brevity. Calculating the empty set as a difference from two equal sets should take negligible time compared to an rpc call,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420191,277420191,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T20:17:20Z,Also rewriting the function would invalidate previous review,https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420863,277420863,test/functional/test_framework/util.py
jnewbery,2019-04-22T21:25:29Z,"I'm surprised you think Python's `while-else` syntax is confusing. I don't think I've ever had a problem with it: https://stackoverflow.com/a/3295949. I certainly think it's clearer than the existing code, which has a `return` buried in a conditional in the `while` loop, but hidden under the `flush_scheduler` cleanup code.\n\nI'm pretty sure you've been pushed into this weird construction (execu",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277443342,277443342,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T22:06:43Z,"Unlike `if-else`, where only *one* branch is executed, the `while-else` (or `for-else`) generally execute *both* branches. To make it even more confusing, it won't execute the else branch when you `break`.",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277454926,277454926,test/functional/test_framework/util.py
MarcoFalke,2019-04-22T22:09:19Z,"Anyway, I am happy to review a follow-up pull that switches both sync_ helpers to the `while-else` syntax. But, I'd rather not do it here.",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277455581,277455581,test/functional/test_framework/util.py
kostyantyn,2019-04-23T14:38:14Z,"Curious, as the improvement is mostly gained by bypassing Poisson feature, why don't disable it via parameter e.,g,`-enablepoisson=0`, which would be allowed only in regtest? In this case, nodes behave closer to a real scenario, we have cleaner logs as txs are exchanged via P2P only (no race condition), would work even if `sync_mempool` hasn't been called and no need to maintain a custom tx exchan",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277712902,277712902,test/functional/test_framework/test_framework.py
MarcoFalke,2019-04-23T21:02:09Z,"@kostyantyn Good point! Done in\n\n* net: Send txs without delay on regtest #15881 ",https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277870423,277870423,test/functional/test_framework/test_framework.py
