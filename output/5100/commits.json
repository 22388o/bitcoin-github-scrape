[
  {
    "sha": "eda37330911b005f4be0c2d934346b26247d50f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGEzNzMzMDkxMWIwMDVmNGJlMGMyZDkzNDM0NmIyNjI0N2Q1MGY1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-23T00:05:11Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-27T12:54:37Z"
      },
      "message": "MOVEONLY: Move CFeeRate and Amount constants to amount.o",
      "tree": {
        "sha": "47b9e17e2ec8bf2a351608a2cada601ec9d7e0bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47b9e17e2ec8bf2a351608a2cada601ec9d7e0bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eda37330911b005f4be0c2d934346b26247d50f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda37330911b005f4be0c2d934346b26247d50f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eda37330911b005f4be0c2d934346b26247d50f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda37330911b005f4be0c2d934346b26247d50f5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6c99efe9ccb44a4324bacb879ab1f43960bf69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c99efe9ccb44a4324bacb879ab1f43960bf69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c99efe9ccb44a4324bacb879ab1f43960bf69b"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 82,
      "deletions": 65
    },
    "files": [
      {
        "sha": "d5abbc17d3d5ba24092b4fcff36cf143310716ba",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -208,6 +208,7 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n   allocators.cpp \\\n+  amount.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\"
      },
      {
        "sha": "e6f5b7d4407daf756a9da4f8fbfe3e10b29a76cc",
        "filename": "src/amount.cpp",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"amount.h\"\n+\n+#include \"tinyformat.h\"\n+\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n+{\n+    if (nSize > 0)\n+        nSatoshisPerK = nFeePaid*1000/nSize;\n+    else\n+        nSatoshisPerK = 0;\n+}\n+\n+CAmount CFeeRate::GetFee(size_t nSize) const\n+{\n+    CAmount nFee = nSatoshisPerK*nSize / 1000;\n+\n+    if (nFee == 0 && nSatoshisPerK > 0)\n+        nFee = nSatoshisPerK;\n+\n+    return nFee;\n+}\n+\n+std::string CFeeRate::ToString() const\n+{\n+    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n+}"
      },
      {
        "sha": "c0d37954cb04bbd5b428845a3a56b8aee8301118",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 42,
        "deletions": 1,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -6,8 +6,49 @@\n #ifndef BITCOIN_AMOUNT_H\n #define BITCOIN_AMOUNT_H\n \n-#include <stdint.h>\n+#include \"serialize.h\"\n+\n+#include <stdlib.h>\n+#include <string>\n \n typedef int64_t CAmount;\n \n+static const CAmount COIN = 100000000;\n+static const CAmount CENT = 1000000;\n+\n+/** No amount larger than this (in satoshi) is valid */\n+static const CAmount MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+\n+/** Type-safe wrapper class to for fee rates\n+ * (how much to pay based on transaction size)\n+ */\n+class CFeeRate\n+{\n+private:\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+public:\n+    CFeeRate() : nSatoshisPerK(0) { }\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n+    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n+\n+    CAmount GetFee(size_t size) const; // unit returned is satoshis\n+    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n+\n+    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n+    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n+    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    std::string ToString() const;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(nSatoshisPerK);\n+    }\n+};\n+\n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "ac180cc5098347866fa0e1742a5910ea80110d78",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -59,29 +59,6 @@ std::string CTxOut::ToString() const\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n }\n \n-CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n-{\n-    if (nSize > 0)\n-        nSatoshisPerK = nFeePaid*1000/nSize;\n-    else\n-        nSatoshisPerK = 0;\n-}\n-\n-CAmount CFeeRate::GetFee(size_t nSize) const\n-{\n-    CAmount nFee = nSatoshisPerK*nSize / 1000;\n-\n-    if (nFee == 0 && nSatoshisPerK > 0)\n-        nFee = nSatoshisPerK;\n-\n-    return nFee;\n-}\n-\n-std::string CFeeRate::ToString() const\n-{\n-    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n-}\n-\n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n "
      },
      {
        "sha": "f7a46da2c1358466ac90a74b572766c1fe3895c5",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -16,13 +16,6 @@\n \n class CTransaction;\n \n-static const int64_t COIN = 100000000;\n-static const int64_t CENT = 1000000;\n-\n-/** No amount larger than this (in satoshi) is valid */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n-\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -109,40 +102,6 @@ class CTxIn\n     std::string ToString() const;\n };\n \n-\n-\n-/** Type-safe wrapper class to for fee rates\n- * (how much to pay based on transaction size)\n- */\n-class CFeeRate\n-{\n-private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n-public:\n-    CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n-    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n-\n-    CAmount GetFee(size_t size) const; // unit returned is satoshis\n-    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n-\n-    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n-    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n-    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n-    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n-    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n-    std::string ToString() const;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(nSatoshisPerK);\n-    }\n-};\n-\n-\n /** An output of a transaction.  It contains the public key that the next input\n  * must be able to sign with to claim it.\n  */"
      },
      {
        "sha": "d928094bbae536b2e7ba0c2691dc34bc85f0b773",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"init.h\"\n \n #include \"addrman.h\"\n+#include \"amount.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"key.h\""
      },
      {
        "sha": "2686ed948f15947bade75a1ee11aae962aa8bb8f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\""
      },
      {
        "sha": "897f7c56d7e55b130479218b56f3dab48b0a4ab5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"miner.h\"\n \n+#include \"amount.h\"\n #include \"core.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "c941ebd4caf1b53940faf283a2f706f1e3d33fd3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n \n+#include \"amount.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "8af3c46348fbc3e705085b5d4cbefa23adff2a74",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n #include \"chainparams.h\"\n #include \"core_io.h\"\n #include \"init.h\""
      },
      {
        "sha": "2728fb4fb3592e636cbba5d2add730b45170e253",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n #include \"base58.h\"\n #include \"core_io.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "df2fbc78c37d0cbe1755aca0a3959899ec3920c9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <list>\n \n+#include \"amount.h\"\n #include \"coins.h\"\n #include \"core.h\"\n #include \"sync.h\""
      },
      {
        "sha": "6a4b4b7f8d8f21c87c729f4add9b09805ca71260",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda37330911b005f4be0c2d934346b26247d50f5/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda37330911b005f4be0c2d934346b26247d50f5/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=eda37330911b005f4be0c2d934346b26247d50f5",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include \"amount.h\"\n #include \"core.h\"\n #include \"crypter.h\"\n #include \"key.h\""
      }
    ]
  },
  {
    "sha": "4a3587d8db9f651866ce70312ac9de11316b42c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTM1ODdkOGRiOWY2NTE4NjZjZTcwMzEyYWM5ZGUxMTMxNmI0MmM5",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-18T00:34:06Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-27T12:54:37Z"
      },
      "message": "MOVEONLY: Separate CTransaction and dependencies from core",
      "tree": {
        "sha": "4717c2c662fb32ff2286f6bb656659566a2fe2ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4717c2c662fb32ff2286f6bb656659566a2fe2ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a3587d8db9f651866ce70312ac9de11316b42c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3587d8db9f651866ce70312ac9de11316b42c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3587d8db9f651866ce70312ac9de11316b42c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3587d8db9f651866ce70312ac9de11316b42c9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eda37330911b005f4be0c2d934346b26247d50f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda37330911b005f4be0c2d934346b26247d50f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eda37330911b005f4be0c2d934346b26247d50f5"
      }
    ],
    "stats": {
      "total": 860,
      "additions": 441,
      "deletions": 419
    },
    "files": [
      {
        "sha": "5485127e6811c5f5c177e9f60d30c617e41b9962",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -81,6 +81,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   core.h \\\n+  core/transaction.h \\\n   core_io.h \\\n   crypter.h \\\n   db.h \\\n@@ -213,6 +214,7 @@ libbitcoin_common_a_SOURCES = \\\n   chainparams.cpp \\\n   coins.cpp \\\n   core.cpp \\\n+  core/transaction.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   hash.cpp \\"
      },
      {
        "sha": "6f3409edf30a5e41ef487e8af64a247812f5fe1c",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n #include \"main.h\" // for MAX_BLOCK_SIZE"
      },
      {
        "sha": "c1e7aeb3bf196184fb61c45d827d4f9a7e0d8edc",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"bloom.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"streams.h\""
      },
      {
        "sha": "c8f12d92de6462ea09108693c8757a279e8df640",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef COINCONTROL_H\n #define COINCONTROL_H\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n \n /** Coin Control Features. */\n class CCoinControl"
      },
      {
        "sha": "eafe3bec64133a17ed671795a5f94b1c17890c3b",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -6,7 +6,8 @@\n #ifndef BITCOIN_COINS_H\n #define BITCOIN_COINS_H\n \n-#include \"core.h\"\n+#include \"core.h\" // Only for CTxOutCompressor\n+#include \"core/transaction.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "34188bca63a365bac4de776fc186a4e8b587e605",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 132,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -9,138 +9,6 @@\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n \n-std::string COutPoint::ToString() const\n-{\n-    return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n-}\n-\n-CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n-{\n-    prevout = prevoutIn;\n-    scriptSig = scriptSigIn;\n-    nSequence = nSequenceIn;\n-}\n-\n-CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n-{\n-    prevout = COutPoint(hashPrevTx, nOut);\n-    scriptSig = scriptSigIn;\n-    nSequence = nSequenceIn;\n-}\n-\n-std::string CTxIn::ToString() const\n-{\n-    std::string str;\n-    str += \"CTxIn(\";\n-    str += prevout.ToString();\n-    if (prevout.IsNull())\n-        str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n-    else\n-        str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24));\n-    if (nSequence != std::numeric_limits<unsigned int>::max())\n-        str += strprintf(\", nSequence=%u\", nSequence);\n-    str += \")\";\n-    return str;\n-}\n-\n-CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n-{\n-    nValue = nValueIn;\n-    scriptPubKey = scriptPubKeyIn;\n-}\n-\n-uint256 CTxOut::GetHash() const\n-{\n-    return SerializeHash(*this);\n-}\n-\n-std::string CTxOut::ToString() const\n-{\n-    return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n-}\n-\n-CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n-\n-uint256 CMutableTransaction::GetHash() const\n-{\n-    return SerializeHash(*this);\n-}\n-\n-void CTransaction::UpdateHash() const\n-{\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n-}\n-\n-CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n-\n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n-    UpdateHash();\n-}\n-\n-CTransaction& CTransaction::operator=(const CTransaction &tx) {\n-    *const_cast<int*>(&nVersion) = tx.nVersion;\n-    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n-    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n-    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n-    *const_cast<uint256*>(&hash) = tx.hash;\n-    return *this;\n-}\n-\n-CAmount CTransaction::GetValueOut() const\n-{\n-    CAmount nValueOut = 0;\n-    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n-    {\n-        nValueOut += it->nValue;\n-        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n-    }\n-    return nValueOut;\n-}\n-\n-double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const\n-{\n-    nTxSize = CalculateModifiedSize(nTxSize);\n-    if (nTxSize == 0) return 0.0;\n-\n-    return dPriorityInputs / nTxSize;\n-}\n-\n-unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n-{\n-    // In order to avoid disincentivizing cleaning up the UTXO set we don't count\n-    // the constant overhead for each txin and up to 110 bytes of scriptSig (which\n-    // is enough to cover a compressed pubkey p2sh redemption) for priority.\n-    // Providing any more cleanup incentive than making additional inputs free would\n-    // risk encouraging people to create junk outputs to redeem later.\n-    if (nTxSize == 0)\n-        nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n-    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n-    {\n-        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n-        if (nTxSize > offset)\n-            nTxSize -= offset;\n-    }\n-    return nTxSize;\n-}\n-\n-std::string CTransaction::ToString() const\n-{\n-    std::string str;\n-    str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)\\n\",\n-        GetHash().ToString().substr(0,10),\n-        nVersion,\n-        vin.size(),\n-        vout.size(),\n-        nLockTime);\n-    for (unsigned int i = 0; i < vin.size(); i++)\n-        str += \"    \" + vin[i].ToString() + \"\\n\";\n-    for (unsigned int i = 0; i < vout.size(); i++)\n-        str += \"    \" + vout[i].ToString() + \"\\n\";\n-    return str;\n-}\n-\n // Amount compression:\n // * If the amount is 0, output 0\n // * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)"
      },
      {
        "sha": "ad4c8832503d45d9d10242c9b129332975422edd",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 1,
        "deletions": 269,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -6,279 +6,11 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n-#include \"amount.h\"\n+#include \"core/transaction.h\"\n #include \"script/compressor.h\"\n-#include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-#include <stdint.h>\n-\n-class CTransaction;\n-\n-/** An outpoint - a combination of a transaction hash and an index n into its vout */\n-class COutPoint\n-{\n-public:\n-    uint256 hash;\n-    uint32_t n;\n-\n-    COutPoint() { SetNull(); }\n-    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n-    }\n-\n-    void SetNull() { hash = 0; n = (uint32_t) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n-\n-    friend bool operator<(const COutPoint& a, const COutPoint& b)\n-    {\n-        return (a.hash < b.hash || (a.hash == b.hash && a.n < b.n));\n-    }\n-\n-    friend bool operator==(const COutPoint& a, const COutPoint& b)\n-    {\n-        return (a.hash == b.hash && a.n == b.n);\n-    }\n-\n-    friend bool operator!=(const COutPoint& a, const COutPoint& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    std::string ToString() const;\n-};\n-\n-/** An input of a transaction.  It contains the location of the previous\n- * transaction's output that it claims and a signature that matches the\n- * output's public key.\n- */\n-class CTxIn\n-{\n-public:\n-    COutPoint prevout;\n-    CScript scriptSig;\n-    uint32_t nSequence;\n-\n-    CTxIn()\n-    {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n-    }\n-\n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    }\n-\n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<uint32_t>::max());\n-    }\n-\n-    friend bool operator==(const CTxIn& a, const CTxIn& b)\n-    {\n-        return (a.prevout   == b.prevout &&\n-                a.scriptSig == b.scriptSig &&\n-                a.nSequence == b.nSequence);\n-    }\n-\n-    friend bool operator!=(const CTxIn& a, const CTxIn& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    std::string ToString() const;\n-};\n-\n-/** An output of a transaction.  It contains the public key that the next input\n- * must be able to sign with to claim it.\n- */\n-class CTxOut\n-{\n-public:\n-    CAmount nValue;\n-    CScript scriptPubKey;\n-\n-    CTxOut()\n-    {\n-        SetNull();\n-    }\n-\n-    CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    }\n-\n-    void SetNull()\n-    {\n-        nValue = -1;\n-        scriptPubKey.clear();\n-    }\n-\n-    bool IsNull() const\n-    {\n-        return (nValue == -1);\n-    }\n-\n-    uint256 GetHash() const;\n-\n-    bool IsDust(CFeeRate minRelayTxFee) const\n-    {\n-        // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n-        // which has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n-        // with default minRelayTxFee.\n-        size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return (nValue < 3*minRelayTxFee.GetFee(nSize));\n-    }\n-\n-    friend bool operator==(const CTxOut& a, const CTxOut& b)\n-    {\n-        return (a.nValue       == b.nValue &&\n-                a.scriptPubKey == b.scriptPubKey);\n-    }\n-\n-    friend bool operator!=(const CTxOut& a, const CTxOut& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    std::string ToString() const;\n-};\n-\n-\n-struct CMutableTransaction;\n-\n-/** The basic transaction that is broadcasted on the network and contained in\n- * blocks.  A transaction can contain multiple inputs and outputs.\n- */\n-class CTransaction\n-{\n-private:\n-    /** Memory only. */\n-    const uint256 hash;\n-    void UpdateHash() const;\n-\n-public:\n-    static const int32_t CURRENT_VERSION=1;\n-\n-    // The local variables are made const to prevent unintended modification\n-    // without updating the cached hash value. However, CTransaction is not\n-    // actually immutable; deserialization and assignment are implemented,\n-    // and bypass the constness. This is safe, as they update the entire\n-    // structure, including the hash.\n-    const int32_t nVersion;\n-    const std::vector<CTxIn> vin;\n-    const std::vector<CTxOut> vout;\n-    const uint32_t nLockTime;\n-\n-    /** Construct a CTransaction that qualifies as IsNull() */\n-    CTransaction();\n-\n-    /** Convert a CMutableTransaction into a CTransaction. */\n-    CTransaction(const CMutableTransaction &tx);\n-\n-    CTransaction& operator=(const CTransaction& tx);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n-        if (ser_action.ForRead())\n-            UpdateHash();\n-    }\n-\n-    bool IsNull() const {\n-        return vin.empty() && vout.empty();\n-    }\n-\n-    const uint256& GetHash() const {\n-        return hash;\n-    }\n-\n-    // Return sum of txouts.\n-    CAmount GetValueOut() const;\n-    // GetValueIn() is a method on CCoinsViewCache, because\n-    // inputs must be known to compute value in.\n-\n-    // Compute priority, given priority of inputs and (optionally) tx size\n-    double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n-\n-    // Compute modified tx size for priority calculation (optionally given tx size)\n-    unsigned int CalculateModifiedSize(unsigned int nTxSize=0) const;\n-\n-    bool IsCoinBase() const\n-    {\n-        return (vin.size() == 1 && vin[0].prevout.IsNull());\n-    }\n-\n-    friend bool operator==(const CTransaction& a, const CTransaction& b)\n-    {\n-        return a.hash == b.hash;\n-    }\n-\n-    friend bool operator!=(const CTransaction& a, const CTransaction& b)\n-    {\n-        return a.hash != b.hash;\n-    }\n-\n-    std::string ToString() const;\n-};\n-\n-/** A mutable version of CTransaction. */\n-struct CMutableTransaction\n-{\n-    int32_t nVersion;\n-    std::vector<CTxIn> vin;\n-    std::vector<CTxOut> vout;\n-    uint32_t nLockTime;\n-\n-    CMutableTransaction();\n-    CMutableTransaction(const CTransaction& tx);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n-    }\n-\n-    /** Compute the hash of this CMutableTransaction. This is computed on the\n-     * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n-     */\n-    uint256 GetHash() const;\n-};\n-\n /** wrapper for CTxOut that provides a more compact serialization */\n class CTxOutCompressor\n {"
      },
      {
        "sha": "f835bafb9f7e6c19f83fe4cab35f4b325b08ff04",
        "filename": "src/core/transaction.cpp",
        "status": "added",
        "additions": 142,
        "deletions": 0,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/transaction.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -0,0 +1,142 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"core/transaction.h\"\n+\n+#include \"hash.h\"\n+#include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n+\n+std::string COutPoint::ToString() const\n+{\n+    return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n+}\n+\n+CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n+{\n+    prevout = prevoutIn;\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n+{\n+    prevout = COutPoint(hashPrevTx, nOut);\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+std::string CTxIn::ToString() const\n+{\n+    std::string str;\n+    str += \"CTxIn(\";\n+    str += prevout.ToString();\n+    if (prevout.IsNull())\n+        str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n+    else\n+        str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24));\n+    if (nSequence != std::numeric_limits<unsigned int>::max())\n+        str += strprintf(\", nSequence=%u\", nSequence);\n+    str += \")\";\n+    return str;\n+}\n+\n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n+{\n+    nValue = nValueIn;\n+    scriptPubKey = scriptPubKeyIn;\n+}\n+\n+uint256 CTxOut::GetHash() const\n+{\n+    return SerializeHash(*this);\n+}\n+\n+std::string CTxOut::ToString() const\n+{\n+    return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n+}\n+\n+CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+\n+uint256 CMutableTransaction::GetHash() const\n+{\n+    return SerializeHash(*this);\n+}\n+\n+void CTransaction::UpdateHash() const\n+{\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+}\n+\n+CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+    UpdateHash();\n+}\n+\n+CTransaction& CTransaction::operator=(const CTransaction &tx) {\n+    *const_cast<int*>(&nVersion) = tx.nVersion;\n+    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n+    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n+    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n+    *const_cast<uint256*>(&hash) = tx.hash;\n+    return *this;\n+}\n+\n+CAmount CTransaction::GetValueOut() const\n+{\n+    CAmount nValueOut = 0;\n+    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n+    {\n+        nValueOut += it->nValue;\n+        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n+            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+    }\n+    return nValueOut;\n+}\n+\n+double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const\n+{\n+    nTxSize = CalculateModifiedSize(nTxSize);\n+    if (nTxSize == 0) return 0.0;\n+\n+    return dPriorityInputs / nTxSize;\n+}\n+\n+unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n+{\n+    // In order to avoid disincentivizing cleaning up the UTXO set we don't count\n+    // the constant overhead for each txin and up to 110 bytes of scriptSig (which\n+    // is enough to cover a compressed pubkey p2sh redemption) for priority.\n+    // Providing any more cleanup incentive than making additional inputs free would\n+    // risk encouraging people to create junk outputs to redeem later.\n+    if (nTxSize == 0)\n+        nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n+    {\n+        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n+        if (nTxSize > offset)\n+            nTxSize -= offset;\n+    }\n+    return nTxSize;\n+}\n+\n+std::string CTransaction::ToString() const\n+{\n+    std::string str;\n+    str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)\\n\",\n+        GetHash().ToString().substr(0,10),\n+        nVersion,\n+        vin.size(),\n+        vout.size(),\n+        nLockTime);\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+        str += \"    \" + vin[i].ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+        str += \"    \" + vout[i].ToString() + \"\\n\";\n+    return str;\n+}"
      },
      {
        "sha": "c21558cfeb43e7c42280a05738fb03c64e414940",
        "filename": "src/core/transaction.h",
        "status": "added",
        "additions": 276,
        "deletions": 0,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/transaction.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -0,0 +1,276 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_CORE_TRANSACTION\n+#define H_BITCOIN_CORE_TRANSACTION\n+\n+#include \"amount.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+/** An outpoint - a combination of a transaction hash and an index n into its vout */\n+class COutPoint\n+{\n+public:\n+    uint256 hash;\n+    uint32_t n;\n+\n+    COutPoint() { SetNull(); }\n+    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(FLATDATA(*this));\n+    }\n+\n+    void SetNull() { hash = 0; n = (uint32_t) -1; }\n+    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n+\n+    friend bool operator<(const COutPoint& a, const COutPoint& b)\n+    {\n+        return (a.hash < b.hash || (a.hash == b.hash && a.n < b.n));\n+    }\n+\n+    friend bool operator==(const COutPoint& a, const COutPoint& b)\n+    {\n+        return (a.hash == b.hash && a.n == b.n);\n+    }\n+\n+    friend bool operator!=(const COutPoint& a, const COutPoint& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+/** An input of a transaction.  It contains the location of the previous\n+ * transaction's output that it claims and a signature that matches the\n+ * output's public key.\n+ */\n+class CTxIn\n+{\n+public:\n+    COutPoint prevout;\n+    CScript scriptSig;\n+    uint32_t nSequence;\n+\n+    CTxIn()\n+    {\n+        nSequence = std::numeric_limits<unsigned int>::max();\n+    }\n+\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(prevout);\n+        READWRITE(scriptSig);\n+        READWRITE(nSequence);\n+    }\n+\n+    bool IsFinal() const\n+    {\n+        return (nSequence == std::numeric_limits<uint32_t>::max());\n+    }\n+\n+    friend bool operator==(const CTxIn& a, const CTxIn& b)\n+    {\n+        return (a.prevout   == b.prevout &&\n+                a.scriptSig == b.scriptSig &&\n+                a.nSequence == b.nSequence);\n+    }\n+\n+    friend bool operator!=(const CTxIn& a, const CTxIn& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+/** An output of a transaction.  It contains the public key that the next input\n+ * must be able to sign with to claim it.\n+ */\n+class CTxOut\n+{\n+public:\n+    CAmount nValue;\n+    CScript scriptPubKey;\n+\n+    CTxOut()\n+    {\n+        SetNull();\n+    }\n+\n+    CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(nValue);\n+        READWRITE(scriptPubKey);\n+    }\n+\n+    void SetNull()\n+    {\n+        nValue = -1;\n+        scriptPubKey.clear();\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return (nValue == -1);\n+    }\n+\n+    uint256 GetHash() const;\n+\n+    bool IsDust(CFeeRate minRelayTxFee) const\n+    {\n+        // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n+        // which has units satoshis-per-kilobyte.\n+        // If you'd pay more than 1/3 in fees\n+        // to spend something, then we consider it dust.\n+        // A typical txout is 34 bytes big, and will\n+        // need a CTxIn of at least 148 bytes to spend:\n+        // so dust is a txout less than 546 satoshis \n+        // with default minRelayTxFee.\n+        size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n+        return (nValue < 3*minRelayTxFee.GetFee(nSize));\n+    }\n+\n+    friend bool operator==(const CTxOut& a, const CTxOut& b)\n+    {\n+        return (a.nValue       == b.nValue &&\n+                a.scriptPubKey == b.scriptPubKey);\n+    }\n+\n+    friend bool operator!=(const CTxOut& a, const CTxOut& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+struct CMutableTransaction;\n+\n+/** The basic transaction that is broadcasted on the network and contained in\n+ * blocks.  A transaction can contain multiple inputs and outputs.\n+ */\n+class CTransaction\n+{\n+private:\n+    /** Memory only. */\n+    const uint256 hash;\n+    void UpdateHash() const;\n+\n+public:\n+    static const int32_t CURRENT_VERSION=1;\n+\n+    // The local variables are made const to prevent unintended modification\n+    // without updating the cached hash value. However, CTransaction is not\n+    // actually immutable; deserialization and assignment are implemented,\n+    // and bypass the constness. This is safe, as they update the entire\n+    // structure, including the hash.\n+    const int32_t nVersion;\n+    const std::vector<CTxIn> vin;\n+    const std::vector<CTxOut> vout;\n+    const uint32_t nLockTime;\n+\n+    /** Construct a CTransaction that qualifies as IsNull() */\n+    CTransaction();\n+\n+    /** Convert a CMutableTransaction into a CTransaction. */\n+    CTransaction(const CMutableTransaction &tx);\n+\n+    CTransaction& operator=(const CTransaction& tx);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n+        nVersion = this->nVersion;\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n+        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n+        if (ser_action.ForRead())\n+            UpdateHash();\n+    }\n+\n+    bool IsNull() const {\n+        return vin.empty() && vout.empty();\n+    }\n+\n+    const uint256& GetHash() const {\n+        return hash;\n+    }\n+\n+    // Return sum of txouts.\n+    CAmount GetValueOut() const;\n+    // GetValueIn() is a method on CCoinsViewCache, because\n+    // inputs must be known to compute value in.\n+\n+    // Compute priority, given priority of inputs and (optionally) tx size\n+    double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n+\n+    // Compute modified tx size for priority calculation (optionally given tx size)\n+    unsigned int CalculateModifiedSize(unsigned int nTxSize=0) const;\n+\n+    bool IsCoinBase() const\n+    {\n+        return (vin.size() == 1 && vin[0].prevout.IsNull());\n+    }\n+\n+    friend bool operator==(const CTransaction& a, const CTransaction& b)\n+    {\n+        return a.hash == b.hash;\n+    }\n+\n+    friend bool operator!=(const CTransaction& a, const CTransaction& b)\n+    {\n+        return a.hash != b.hash;\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+/** A mutable version of CTransaction. */\n+struct CMutableTransaction\n+{\n+    int32_t nVersion;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n+    uint32_t nLockTime;\n+\n+    CMutableTransaction();\n+    CMutableTransaction(const CTransaction& tx);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(vin);\n+        READWRITE(vout);\n+        READWRITE(nLockTime);\n+    }\n+\n+    /** Compute the hash of this CMutableTransaction. This is computed on the\n+     * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n+     */\n+    uint256 GetHash() const;\n+};\n+\n+#endif // H_BITCOIN_CORE_TRANSACTION"
      },
      {
        "sha": "d39bc9a7808991c5651f0630f4bb0eb9e0cfc0b8",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"core_io.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"streams.h\""
      },
      {
        "sha": "a3ae8eec07be6991c98382ede8f6546ac311174f",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,7 @@\n #include \"core_io.h\"\n \n #include \"base58.h\"\n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"serialize.h\""
      },
      {
        "sha": "3a3687ec1df0ffd326db6aa03bb3a3a01771d605",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -15,6 +15,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"net.h\"\n #include \"pow.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "cf47b65a5cf93ea165771181883da9f077d436f4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "6cccdca9522c942df37a494b750f50790223a680",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"addrman.h\"\n #include \"chainparams.h\"\n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"ui_interface.h\"\n \n #ifdef WIN32"
      },
      {
        "sha": "c85f569fd33ce2afd3abd2b20c4c8a373497a2dd",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"bitcoinunits.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n \n #include <QStringList>\n "
      },
      {
        "sha": "22a1f019e99507054d1cf00c77839762041d7cb9",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -9,7 +9,7 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"protocol.h\""
      },
      {
        "sha": "d3ce3b3191c50a3ec5f3023f3d5932aed198c0df",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -4,7 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\""
      },
      {
        "sha": "44f5df28f3cf094cf3c4c0033cebabffcdae93de",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"interpreter.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\""
      },
      {
        "sha": "0eab0626e59f4f1f231181c2780805cdf2537369",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"script/sign.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "78c41814093ec0e2b90bca8506e5bc8c07b84a11",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"main.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "761210feac72cc51b981f73189b2d42bd614b56f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"util.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"random.h\"\n #include \"sync.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "0731d843f3eec8f81c19036ff5cbb6c4db1a22c2",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"txdb.h\"\n \n-#include \"core.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "c042dd8467cb589ff74cb751007e0058c970d075",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"txmempool.h\"\n \n-#include \"core.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "2ec80cb8609046dac1b4b3a866df1371957f52fa",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"amount.h\"\n #include \"coins.h\"\n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"sync.h\"\n \n class CAutoFile;"
      },
      {
        "sha": "267a5b845c62630b1ef264c355c190b017372d78",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"utilmoneystr.h\"\n \n-#include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n "
      },
      {
        "sha": "4c559cb7b1535cafc3da118b450fa419500d5254",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3587d8db9f651866ce70312ac9de11316b42c9/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3587d8db9f651866ce70312ac9de11316b42c9/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4a3587d8db9f651866ce70312ac9de11316b42c9",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"amount.h\"\n #include \"core.h\"\n+#include \"core/transaction.h\"\n #include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\""
      }
    ]
  },
  {
    "sha": "999a2ab41ec96311c145d74822c246a3b92a9b33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTlhMmFiNDFlYzk2MzExYzE0NWQ3NDgyMmMyNDZhM2I5MmE5YjMz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-18T17:53:37Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-27T12:54:37Z"
      },
      "message": "MOVEONLY: separate CTxUndo out of core",
      "tree": {
        "sha": "0074ad1e89eeba1150d9470f29ba901e087c300d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0074ad1e89eeba1150d9470f29ba901e087c300d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999a2ab41ec96311c145d74822c246a3b92a9b33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999a2ab41ec96311c145d74822c246a3b92a9b33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999a2ab41ec96311c145d74822c246a3b92a9b33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999a2ab41ec96311c145d74822c246a3b92a9b33/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a3587d8db9f651866ce70312ac9de11316b42c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3587d8db9f651866ce70312ac9de11316b42c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3587d8db9f651866ce70312ac9de11316b42c9"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 74,
      "deletions": 60
    },
    "files": [
      {
        "sha": "6d0e1ed7b879d713752a80431230e85e97778d46",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999a2ab41ec96311c145d74822c246a3b92a9b33/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999a2ab41ec96311c145d74822c246a3b92a9b33/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=999a2ab41ec96311c145d74822c246a3b92a9b33",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   uint256.h \\\n+  undo.h \\\n   util.h \\\n   utilstrencodings.h \\\n   utilmoneystr.h \\"
      },
      {
        "sha": "295b3d70d14beb1dc37e6f6e024cb990caf3d53d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999a2ab41ec96311c145d74822c246a3b92a9b33/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999a2ab41ec96311c145d74822c246a3b92a9b33/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=999a2ab41ec96311c145d74822c246a3b92a9b33",
        "patch": "@@ -10,6 +10,7 @@\n #include \"core/transaction.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"undo.h\"\n \n #include <assert.h>\n #include <stdint.h>"
      },
      {
        "sha": "aeae9a1911cd771059a9f40abd7683043d9f411b",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999a2ab41ec96311c145d74822c246a3b92a9b33/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999a2ab41ec96311c145d74822c246a3b92a9b33/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=999a2ab41ec96311c145d74822c246a3b92a9b33",
        "patch": "@@ -40,65 +40,6 @@ class CTxOutCompressor\n     }\n };\n \n-/** Undo information for a CTxIn\n- *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n- */\n-class CTxInUndo\n-{\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n-               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n-               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n-        unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n-    }\n-};\n-\n-/** Undo information for a CTransaction */\n-class CTxUndo\n-{\n-public:\n-    // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(vprevout);\n-    }\n-};\n-\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "09f22471d63b32df78473f6d5a6f05b9e8753d5b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999a2ab41ec96311c145d74822c246a3b92a9b33/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999a2ab41ec96311c145d74822c246a3b92a9b33/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=999a2ab41ec96311c145d74822c246a3b92a9b33",
        "patch": "@@ -25,6 +25,7 @@\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\"\n+#include \"undo.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -129,7 +130,6 @@ static const uint64_t nMinDiskSpace = 52428800;\n \n \n class CBlockTreeDB;\n-class CTxUndo;\n class CScriptCheck;\n class CValidationState;\n class CValidationInterface;"
      },
      {
        "sha": "78e37f628ca21677d9cb01741c5c2cfa1fadef97",
        "filename": "src/undo.h",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999a2ab41ec96311c145d74822c246a3b92a9b33/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999a2ab41ec96311c145d74822c246a3b92a9b33/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=999a2ab41ec96311c145d74822c246a3b92a9b33",
        "patch": "@@ -0,0 +1,71 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_TXUNDO\n+#define H_BITCOIN_TXUNDO\n+\n+#include \"core.h\" // Only for CTxOutCompressor\n+#include \"core/transaction.h\"\n+#include \"serialize.h\"\n+\n+/** Undo information for a CTxIn\n+ *\n+ *  Contains the prevout's CTxOut being spent, and if this was the\n+ *  last output of the affected transaction, its metadata as well\n+ *  (coinbase or not, height, transaction version)\n+ */\n+class CTxInUndo\n+{\n+public:\n+    CTxOut txout;         // the txout data before being spent\n+    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n+    unsigned int nHeight; // if the outpoint was the last unspent: its height\n+    int nVersion;         // if the outpoint was the last unspent: its version\n+\n+    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n+    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n+               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n+               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s, int nType, int nVersion) const {\n+        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n+        if (nHeight > 0)\n+            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s, int nType, int nVersion) {\n+        unsigned int nCode = 0;\n+        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        nHeight = nCode / 2;\n+        fCoinBase = nCode & 1;\n+        if (nHeight > 0)\n+            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n+    }\n+};\n+\n+/** Undo information for a CTransaction */\n+class CTxUndo\n+{\n+public:\n+    // undo information for all txins\n+    std::vector<CTxInUndo> vprevout;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(vprevout);\n+    }\n+};\n+\n+#endif // H_BITCOIN_TXUNDO"
      }
    ]
  },
  {
    "sha": "561e9e9de9793c187f29ab2d41b43a36447e9357",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjFlOWU5ZGU5NzkzYzE4N2YyOWFiMmQ0MWI0M2EzNjQ0N2U5MzU3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-19T02:28:43Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-27T12:54:37Z"
      },
      "message": "MOVEONLY: Move script/compressor out of script and put CTxOutCompressor (from\ncore) with it",
      "tree": {
        "sha": "ef319f91d36d8568bd34a624e4420191f639230d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef319f91d36d8568bd34a624e4420191f639230d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/561e9e9de9793c187f29ab2d41b43a36447e9357",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561e9e9de9793c187f29ab2d41b43a36447e9357",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/561e9e9de9793c187f29ab2d41b43a36447e9357",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561e9e9de9793c187f29ab2d41b43a36447e9357/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999a2ab41ec96311c145d74822c246a3b92a9b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999a2ab41ec96311c145d74822c246a3b92a9b33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999a2ab41ec96311c145d74822c246a3b92a9b33"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 93,
      "deletions": 93
    },
    "files": [
      {
        "sha": "0385ad9025585bbc8929dbb054480d84c85b4e59",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_CORE_H = \\\n   coincontrol.h \\\n   coins.h \\\n   compat.h \\\n+  compressor.h \\\n   core.h \\\n   core/transaction.h \\\n   core_io.h \\\n@@ -103,7 +104,6 @@ BITCOIN_CORE_H = \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n-  script/compressor.h \\\n   script/interpreter.h \\\n   script/script.h \\\n   script/sigcache.h \\\n@@ -214,6 +214,7 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n+  compressor.cpp \\\n   core.cpp \\\n   core/transaction.cpp \\\n   core_read.cpp \\\n@@ -223,7 +224,6 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n-  script/compressor.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n   script/sigcache.cpp \\"
      },
      {
        "sha": "ee9051562bf4d180c753889c54a281420c73e601",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -6,8 +6,7 @@\n #ifndef BITCOIN_COINS_H\n #define BITCOIN_COINS_H\n \n-#include \"core.h\" // Only for CTxOutCompressor\n-#include \"core/transaction.h\"\n+#include \"compressor.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"undo.h\""
      },
      {
        "sha": "806175dd3ecd21e2165b251798cb06e8d2dc3add",
        "filename": "src/compressor.cpp",
        "status": "renamed",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"compressor.h\"\n \n+#include \"hash.h\"\n #include \"key.h\"\n #include \"script/standard.h\"\n \n@@ -128,3 +129,57 @@ bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigne\n     }\n     return false;\n }\n+\n+// Amount compression:\n+// * If the amount is 0, output 0\n+// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n+// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n+//   * call the result n\n+//   * output 1 + 10*(9*n + d - 1) + e\n+// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n+// (this is decodable, as d is in [1-9] and e is in [0-9])\n+\n+uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n+{\n+    if (n == 0)\n+        return 0;\n+    int e = 0;\n+    while (((n % 10) == 0) && e < 9) {\n+        n /= 10;\n+        e++;\n+    }\n+    if (e < 9) {\n+        int d = (n % 10);\n+        assert(d >= 1 && d <= 9);\n+        n /= 10;\n+        return 1 + (n*9 + d - 1)*10 + e;\n+    } else {\n+        return 1 + (n - 1)*10 + 9;\n+    }\n+}\n+\n+uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n+{\n+    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n+    if (x == 0)\n+        return 0;\n+    x--;\n+    // x = 10*(9*n + d - 1) + e\n+    int e = x % 10;\n+    x /= 10;\n+    uint64_t n = 0;\n+    if (e < 9) {\n+        // x = 9*n + d - 1\n+        int d = (x % 9) + 1;\n+        x /= 9;\n+        // x = n\n+        n = x*10 + d;\n+    } else {\n+        n = x+1;\n+    }\n+    while (e) {\n+        n *= 10;\n+        e--;\n+    }\n+    return n;\n+}",
        "previous_filename": "src/script/compressor.cpp"
      },
      {
        "sha": "a612c3a883df417437c8edae1dfc2fe10a71f77a",
        "filename": "src/compressor.h",
        "status": "renamed",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -3,9 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef H_BITCOIN_SCRIPT_COMPRESSOR\n-#define H_BITCOIN_SCRIPT_COMPRESSOR\n+#ifndef H_BITCOIN_COMPRESSOR\n+#define H_BITCOIN_COMPRESSOR\n \n+#include \"core/transaction.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n \n@@ -86,4 +87,33 @@ class CScriptCompressor\n     }\n };\n \n-#endif // H_BITCOIN_SCRIPT_COMPRESSOR\n+/** wrapper for CTxOut that provides a more compact serialization */\n+class CTxOutCompressor\n+{\n+private:\n+    CTxOut &txout;\n+\n+public:\n+    static uint64_t CompressAmount(uint64_t nAmount);\n+    static uint64_t DecompressAmount(uint64_t nAmount);\n+\n+    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!ser_action.ForRead()) {\n+            uint64_t nVal = CompressAmount(txout.nValue);\n+            READWRITE(VARINT(nVal));\n+        } else {\n+            uint64_t nVal = 0;\n+            READWRITE(VARINT(nVal));\n+            txout.nValue = DecompressAmount(nVal);\n+        }\n+        CScriptCompressor cscript(REF(txout.scriptPubKey));\n+        READWRITE(cscript);\n+    }\n+};\n+\n+#endif // H_BITCOIN_COMPRESSOR",
        "previous_filename": "src/script/compressor.h"
      },
      {
        "sha": "08139d54249e9d9f49e68008dbf44cfc326a1f0a",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 54,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -9,60 +9,6 @@\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n \n-// Amount compression:\n-// * If the amount is 0, output 0\n-// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n-// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n-//   * call the result n\n-//   * output 1 + 10*(9*n + d - 1) + e\n-// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n-// (this is decodable, as d is in [1-9] and e is in [0-9])\n-\n-uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n-{\n-    if (n == 0)\n-        return 0;\n-    int e = 0;\n-    while (((n % 10) == 0) && e < 9) {\n-        n /= 10;\n-        e++;\n-    }\n-    if (e < 9) {\n-        int d = (n % 10);\n-        assert(d >= 1 && d <= 9);\n-        n /= 10;\n-        return 1 + (n*9 + d - 1)*10 + e;\n-    } else {\n-        return 1 + (n - 1)*10 + 9;\n-    }\n-}\n-\n-uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n-{\n-    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n-    if (x == 0)\n-        return 0;\n-    x--;\n-    // x = 10*(9*n + d - 1) + e\n-    int e = x % 10;\n-    x /= 10;\n-    uint64_t n = 0;\n-    if (e < 9) {\n-        // x = 9*n + d - 1\n-        int d = (x % 9) + 1;\n-        x /= 9;\n-        // x = n\n-        n = x*10 + d;\n-    } else {\n-        n = x+1;\n-    }\n-    while (e) {\n-        n *= 10;\n-        e--;\n-    }\n-    return n;\n-}\n-\n uint256 CBlockHeader::GetHash() const\n {\n     return Hash(BEGIN(nVersion), END(nNonce));"
      },
      {
        "sha": "b2288e24ca4812b8f9b180e73209e19d8a82219d",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -7,39 +7,9 @@\n #define BITCOIN_CORE_H\n \n #include \"core/transaction.h\"\n-#include \"script/compressor.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** wrapper for CTxOut that provides a more compact serialization */\n-class CTxOutCompressor\n-{\n-private:\n-    CTxOut &txout;\n-\n-public:\n-    static uint64_t CompressAmount(uint64_t nAmount);\n-    static uint64_t DecompressAmount(uint64_t nAmount);\n-\n-    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!ser_action.ForRead()) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64_t nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n-        }\n-        CScriptCompressor cscript(REF(txout.scriptPubKey));\n-        READWRITE(cscript);\n-    }\n-};\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "bf404cf0cfa82db2dc3c1bc72b8e95abb0662be0",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"compressor.h\"\n #include \"util.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "232c193429992534f764b9de746f1f869543cbad",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561e9e9de9793c187f29ab2d41b43a36447e9357/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561e9e9de9793c187f29ab2d41b43a36447e9357/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=561e9e9de9793c187f29ab2d41b43a36447e9357",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef H_BITCOIN_TXUNDO\n #define H_BITCOIN_TXUNDO\n \n-#include \"core.h\" // Only for CTxOutCompressor\n+#include \"compressor.h\" \n #include \"core/transaction.h\"\n #include \"serialize.h\"\n "
      }
    ]
  },
  {
    "sha": "99f41b9cf7b8e039cea75500a905498a1f6969f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWY0MWI5Y2Y3YjhlMDM5Y2VhNzU1MDBhOTA1NDk4YTFmNjk2OWYz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-20T22:13:47Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-27T12:54:37Z"
      },
      "message": "MOVEONLY: core.o -> core/block.o",
      "tree": {
        "sha": "ec54a7cac01b19148b41f125fc887454f76a1fe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec54a7cac01b19148b41f125fc887454f76a1fe8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99f41b9cf7b8e039cea75500a905498a1f6969f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f41b9cf7b8e039cea75500a905498a1f6969f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99f41b9cf7b8e039cea75500a905498a1f6969f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f41b9cf7b8e039cea75500a905498a1f6969f3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "561e9e9de9793c187f29ab2d41b43a36447e9357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561e9e9de9793c187f29ab2d41b43a36447e9357",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/561e9e9de9793c187f29ab2d41b43a36447e9357"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4ca75d6a775a296cf73aaa716fcffaec6736294d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -81,7 +81,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n-  core.h \\\n+  core/block.h \\\n   core/transaction.h \\\n   core_io.h \\\n   crypter.h \\\n@@ -215,7 +215,7 @@ libbitcoin_common_a_SOURCES = \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n-  core.cpp \\\n+  core/block.cpp \\\n   core/transaction.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\"
      },
      {
        "sha": "2a5577162291ac2729fb9a889f7e0f0367bff8d2",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef H_BITCOIN_CHAIN\n #define H_BITCOIN_CHAIN\n \n-#include \"core.h\"\n+#include \"core/block.h\"\n #include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "e27728dbd5413f3d14c31936cd41fc064fb962d7",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_CHAIN_PARAMS_H\n #define BITCOIN_CHAIN_PARAMS_H\n \n-#include \"core.h\"\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n+#include \"core/block.h\"\n #include \"protocol.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "2010d44dac4b8ad32b98eb8391fd57d7b6e5a943",
        "filename": "src/core/block.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/core/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/core/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/block.cpp?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core.h\"\n+#include \"core/block.h\"\n \n #include \"hash.h\"\n #include \"tinyformat.h\"",
        "previous_filename": "src/core.cpp"
      },
      {
        "sha": "f1eb7a844fdbe98adfe6fcb2d4d6d8ebf7fb2336",
        "filename": "src/core/block.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/core/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/core/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/block.h?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_CORE_H\n-#define BITCOIN_CORE_H\n+#ifndef H_BITCOIN_CORE_BLOCK\n+#define H_BITCOIN_CORE_BLOCK\n \n #include \"core/transaction.h\"\n #include \"serialize.h\"\n@@ -165,4 +165,4 @@ struct CBlockLocator\n     }\n };\n \n-#endif // BITCOIN_CORE_H\n+#endif // H_BITCOIN_CORE_BLOCK",
        "previous_filename": "src/core.h"
      },
      {
        "sha": "1941ca705981edab37ff4deca78a1fc3585f05e4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -14,7 +14,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"core.h\"\n+#include \"core/block.h\"\n #include \"core/transaction.h\"\n #include \"net.h\"\n #include \"pow.h\""
      },
      {
        "sha": "0235de3ab3d38efd44a62fd881e79d5aad604906",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -6,7 +6,7 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"core.h\"\n+#include \"core/block.h\"\n #include \"core/transaction.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "af7fc488ef36446f22d11518fd9406fa0aead94f",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -6,7 +6,7 @@\n #include \"pow.h\"\n \n #include \"chainparams.h\"\n-#include \"core.h\"\n+#include \"core/block.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "acb30970c64ff085b2218850ceec5604ebdfab1b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f41b9cf7b8e039cea75500a905498a1f6969f3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=99f41b9cf7b8e039cea75500a905498a1f6969f3",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n-#include \"core.h\"\n+#include \"core/block.h\"\n #include \"core/transaction.h\"\n #include \"crypter.h\"\n #include \"key.h\""
      }
    ]
  }
]