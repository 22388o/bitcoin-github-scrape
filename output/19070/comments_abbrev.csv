jnewbery,2020-05-26 16:45:35,"This is the final PR in the #18876 series of PRs.\n\nNote that there are a couple of differences from @jimpo's original PR:\n\n1. I didn't include the `BlockUntilSyncedToCurrentChain()` call from within `PrepareBlockFilterRequest()` (https://github.com/bitcoin/bitcoin/pull/16442/files#diff-eff7adeaec73a769788bb78858815c91R2068). I wanted to avoid having the message handler thread blocked on th",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-634142901,634142901,
DrahtBot,2020-05-27 19:56:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n\nIf you consider this pull request important, please",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-634906456,634906456,
jimpo,2020-05-27 21:07:06,"Both of these changes from the original PR violate BIP 157 as it is currently written. The BIP was designed to expose a consistent interface to clients, which is conceptually simpler, making it easier to implement client code correctly. The guarantee is that if a node has the COMPACT_FILTER service bit on and advertises that some block is in its main chain, then it must be able to serve the block ",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-634940156,634940156,
jnewbery,2020-05-27 22:22:08,"Thanks for summarising your thoughts @jimpo. As you point out, there's already been debate about this. For the benefit for other reviewers, here are the comments from the original PR relevant to setting the service bits:\n\n- https://github.com/bitcoin/bitcoin/pull/16442#discussion_r322897395\n- https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317867252\n- https://github.com/bitcoin/b",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-634974738,634974738,
jnewbery,2020-06-01 03:04:59,"Rebased on master and applied suggested changes by @fjahr (https://github.com/bitcoin/bitcoin/pull/19044#discussion_r432985941) and @jkczyz (https://github.com/bitcoin/bitcoin/pull/19044#discussion_r432201307, https://github.com/bitcoin/bitcoin/pull/19044#discussion_r432204149)",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-636588390,636588390,
MarcoFalke,2020-06-01 12:44:57,"re-review and Concept ACK f5c003d3ead182335252558c5c6c9b9ca8968065\n\nChanges since my previous review https://github.com/bitcoin/bitcoin/pull/18876#issuecomment-627322015:\n\n* Adding back `NODE_COMPACT_FILTERS` test which was temporarily removed for the earlier prs: https://github.com/bitcoin/bitcoin/pull/18876#issuecomment-627354481\n* Remove `BlockUntilSyncedToCurrentChain`: I liked the s",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-636840238,636840238,
jkczyz,2020-06-01 17:50:54,"@jnewbery Does a node serve blocks during IBD? If not, would it be reasonable to simply remain in this state until the index is built?\n\n",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-637012339,637012339,
fjahr,2020-06-01 19:20:55,"Code review ACK f5c003d3ead182335252558c5c6c9b9ca8968065\n\nConcerning the conceptual changes:\n- I prefer to not dynamically change the service bit, as you say they advertise capabilities, not state.\n- I am currently not sure about the removal of `BlockUntilSyncedToCurrentChain()`. I see the arguments for both but I am not sure which weighs heavier.",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-637054024,637054024,
jnewbery,2020-06-01 19:25:42,"> Does a node serve blocks during IBD?\n\nI believe the behaviour is:\n\n- we don't relay headers from blocks when we connect them (obviously, since we're not yet at the most work tip): https://github.com/bitcoin/bitcoin/blob/9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2/src/net_processing.cpp#L1311-L1316\n- we won't respond if a peer sends us a `getheaders` message: https://github.com/bitcoin/bit",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-637056107,637056107,
clarkmoody,2020-06-03 22:00:42,"Concept ACK f5c003d3ead182335252558c5c6c9b9ca8968065\n\nI agree that service bits should not signal state.\n\nI'm also unsure on the `BlockUntilSyncedToCurrentChain()` story, as I don't quite understand the implications either way. This seems like an issue that could be addressed in a follow-up PR.\n\nIf BIPs 157 and 158 conflict with one another, then there should definitely be a clarificat",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-638484104,638484104,
jnewbery,2020-06-12 02:08:13,"There was some discussion in the PR Review Club about the two questions above (blocking the message handler thread on background tasks and whether to signal NODE_COMPACT_FILTERS before the filter index is built). I still feel strongly that we shouldn't add code in net_processing that blocks on the scheduler thread (and should make a rule that we *never* do that), and I also think we shouldn't flip",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-643024428,643024428,
MarcoFalke,2020-06-12 12:17:01,"This is an optional service that is offered to light clients to provide them data that is hopefully useful to them. It seems a bit odd to signal support for that, but then degrade the user experience of light clients by making the service more fragile.\n\nDisconnecting early when the filter is still syncing should be a one-line check in our c++ code that helps light clients save 20 seconds. The ",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-643239985,643239985,
jnewbery,2020-06-12 20:15:11,@MarcoFalke : what's the request here? Will you be happy if I changed the behavior when a filter can't be served to just disconnect immediately?,https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-643464937,643464937,
MarcoFalke,2020-06-12 20:41:20,"I haven't written the code, but I am assuming that the disconnect can be done with minimal added complexity and it would indeed make me like the changes here more.\n\nThough, looking into the future, p2p filters might not only be serviced to random 3rd party clients, but maybe also to your own light client (via a trusted connection), in which case redundancy is neither required nor possible. So ",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-643474746,643474746,
jnewbery,2020-06-18 21:44:29,I've updated this so that we disconnect immediately if we're not able to service a request. @MarcoFalke - care to rereview?,https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-646321412,646321412,
jnewbery,2020-06-21 17:40:03,"ok, I've reverted back to the version that has 3 ACKs.",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-647158749,647158749,
MarcoFalke,2020-06-22 09:47:54,"Yeah, sorry for being unclear in what situations to disconnect. I will create a follow-up pull later this week unless someone beats me to it.\n\nThis might be ready for merge.",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-647409624,647409624,
jnewbery,2020-07-22 20:06:43,"@MarcoFalke ready for merge, or does this require something else?",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-662669108,662669108,
jnewbery,2020-08-11 09:36:52,"This PR has ACKs/concept ACKs from:\n\n- @MarcoFalke (https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-636840238)\n- @fjahr (https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-637054024)\n- @clarkmoody (https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-638484104)\n- @ariard (https://github.com/bitcoin/bitcoin/pull/19070#pullrequestreview-423997602)\n- @jonatack (ht",https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-671841647,671841647,
ariard,2020-06-03 23:09:50,"If it's likely implementation will diverge from BIP with regards to error handling, it should be hinted somewhere. Better in release notes than here ?",https://github.com/bitcoin/bitcoin/pull/19070#discussion_r434906014,434906014,src/protocol.h
jnewbery,2020-06-12 01:46:37,"Yes, I'm happy to add release notes describing the behavior. I won't do it in this branch unless I need to retouch it (to not invalidate the three ACKs).",https://github.com/bitcoin/bitcoin/pull/19070#discussion_r439164089,439164089,src/protocol.h
ysangkok,2020-06-18 23:26:07,@jnewbery you just requested an ack from MarcoFalke so I dunno if the ACKs have been invalidated?,https://github.com/bitcoin/bitcoin/pull/19070#discussion_r442552811,442552811,src/protocol.h
MarcoFalke,2020-06-21 14:34:25,"in commit fe2e6bb06705f72346ed636becc60c45075a451e\n\nIt looks like this could disconnect a permissioned peer, which is probably unwanted. See the second part of https://github.com/bitcoin/bitcoin/pull/19070#issuecomment-643474746\n\nI'd prefer to wait until we can reply to the peer with a proper result.",https://github.com/bitcoin/bitcoin/pull/19070#discussion_r443225609,443225609,src/net_processing.cpp
jnewbery,2020-06-21 17:39:01,Reverted,https://github.com/bitcoin/bitcoin/pull/19070#discussion_r443240823,443240823,src/net_processing.cpp
