[
  {
    "sha": "b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2ZiYzk0ZDRmMjkzN2JiNjgyZjI3NjZjYzlhOGQ0ZmRlMzI4YTNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-01T02:58:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-01T02:58:42Z"
      },
      "message": "Apply cfilters review fixups",
      "tree": {
        "sha": "8e30bbce00041b5e9408280336c9fbae99393123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e30bbce00041b5e9408280336c9fbae99393123"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a65b55fa45d41761c3e67ac5107d284d6edc2525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65b55fa45d41761c3e67ac5107d284d6edc2525",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a65b55fa45d41761c3e67ac5107d284d6edc2525"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 26,
      "deletions": 27
    },
    "files": [
      {
        "sha": "321e54b3dc28fd979a6a125e4802363c480029d2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 26,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
        "patch": "@@ -1991,7 +1991,7 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  *\n  * May disconnect from the peer in the case of a bad request.\n  *\n- * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   peer            The peer that we received the request from\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n  * @param[in]   start_height    The start height for the request\n@@ -2001,7 +2001,7 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n-static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_params,\n+static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n                                       BlockFilterType filter_type, uint32_t start_height,\n                                       const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n@@ -2012,8 +2012,8 @@ static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_pa\n          gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n     if (!supported_filter_type) {\n         LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n-                 pfrom.GetId(), static_cast<uint8_t>(filter_type));\n-        pfrom.fDisconnect = true;\n+                 peer.GetId(), static_cast<uint8_t>(filter_type));\n+        peer.fDisconnect = true;\n         return false;\n     }\n \n@@ -2024,8 +2024,8 @@ static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_pa\n         // Check that the stop block exists and the peer would be allowed to fetch it.\n         if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n             LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n-                     pfrom.GetId(), stop_hash.ToString());\n-            pfrom.fDisconnect = true;\n+                     peer.GetId(), stop_hash.ToString());\n+            peer.fDisconnect = true;\n             return false;\n         }\n     }\n@@ -2034,14 +2034,14 @@ static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_pa\n     if (start_height > stop_height) {\n         LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n                  \"start height %d and stop height %d\\n\",\n-                 pfrom.GetId(), start_height, stop_height);\n-        pfrom.fDisconnect = true;\n+                 peer.GetId(), start_height, stop_height);\n+        peer.fDisconnect = true;\n         return false;\n     }\n     if (stop_height - start_height >= max_height_diff) {\n         LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n-                 pfrom.GetId(), stop_height - start_height + 1, max_height_diff);\n-        pfrom.fDisconnect = true;\n+                 peer.GetId(), stop_height - start_height + 1, max_height_diff);\n+        peer.fDisconnect = true;\n         return false;\n     }\n \n@@ -2059,12 +2059,12 @@ static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_pa\n  *\n  * May disconnect from the peer in the case of a bad request.\n  *\n- * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFilters(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+static void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                CConnman& connman)\n {\n     uint8_t filter_type_ser;\n@@ -2077,23 +2077,22 @@ static void ProcessGetCFilters(CNode& pfrom, CDataStream& vRecv, const CChainPar\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n                                    MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n         return;\n     }\n \n     std::vector<BlockFilter> filters;\n-\n     if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n         LogPrint(BCLog::NET, \"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n                      BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n         return;\n     }\n \n     for (const auto& filter : filters) {\n-        CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+        CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n             .Make(NetMsgType::CFILTER, filter);\n-        connman.PushMessage(&pfrom, std::move(msg));\n+        connman.PushMessage(&peer, std::move(msg));\n     }\n }\n \n@@ -2102,12 +2101,12 @@ static void ProcessGetCFilters(CNode& pfrom, CDataStream& vRecv, const CChainPar\n  *\n  * May disconnect from the peer in the case of a bad request.\n  *\n- * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFHeaders(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+static void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                 CConnman& connman)\n {\n     uint8_t filter_type_ser;\n@@ -2120,7 +2119,7 @@ static void ProcessGetCFHeaders(CNode& pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n                                    MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n         return;\n     }\n@@ -2143,26 +2142,26 @@ static void ProcessGetCFHeaders(CNode& pfrom, CDataStream& vRecv, const CChainPa\n         return;\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n         .Make(NetMsgType::CFHEADERS,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n               prev_header,\n               filter_hashes);\n-    connman.PushMessage(&pfrom, std::move(msg));\n+    connman.PushMessage(&peer, std::move(msg));\n }\n \n /**\n  * Handle a getcfcheckpt request.\n  *\n  * May disconnect from the peer in the case of a bad request.\n  *\n- * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFCheckPt(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                 CConnman& connman)\n {\n     uint8_t filter_type_ser;\n@@ -2174,7 +2173,7 @@ static void ProcessGetCFCheckPt(CNode& pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, /*start_height=*/0, stop_hash,\n                                    /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n@@ -2195,12 +2194,12 @@ static void ProcessGetCFCheckPt(CNode& pfrom, CDataStream& vRecv, const CChainPa\n         }\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n         .Make(NetMsgType::CFCHECKPT,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n               headers);\n-    connman.PushMessage(&pfrom, std::move(msg));\n+    connman.PushMessage(&peer, std::move(msg));\n }\n \n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, ChainstateManager& chainman, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)"
      },
      {
        "sha": "6d26da38411ad65971c8595d23a630087e24686f",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfheaders and cfcheckpts.\n+cfilters, cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import ("
      }
    ]
  },
  {
    "sha": "132b30d9c84f2a8053714a438f227b583a89a9ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzJiMzBkOWM4NGYyYTgwNTM3MTRhNDM4ZjIyN2I1ODNhODlhOWVh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T15:13:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-01T03:01:06Z"
      },
      "message": "[net] Signal NODE_COMPACT_FILTERS if we're serving compact filters.\n\nIf -peerblockfilters is configured, signal the NODE_COMPACT_FILTERS service\nbit to indicate that we are able to serve compact block filters, headers\nand checkpoints.",
      "tree": {
        "sha": "fbabe20e488f17a3d1d58724d772d5381723b256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbabe20e488f17a3d1d58724d772d5381723b256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/132b30d9c84f2a8053714a438f227b583a89a9ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132b30d9c84f2a8053714a438f227b583a89a9ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/132b30d9c84f2a8053714a438f227b583a89a9ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132b30d9c84f2a8053714a438f227b583a89a9ea/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3fbc94d4f2937bb682f2766cc9a8d4fde328a3f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "24ddaac066b4043510d247373fff434ccf9b69ca",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132b30d9c84f2a8053714a438f227b583a89a9ea/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132b30d9c84f2a8053714a438f227b583a89a9ea/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=132b30d9c84f2a8053714a438f227b583a89a9ea",
        "patch": "@@ -996,11 +996,13 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n-    // Basic filters are the only supported filters. The basic filters index must be enabled\n-    // to serve compact filters\n-    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS) &&\n-        g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n-        return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+    // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+        if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n+            return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+        }\n+\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n     // if using block pruning, then disallow txindex"
      },
      {
        "sha": "587b655d1c7e3da1979c4adedeea6d8c2f317456",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132b30d9c84f2a8053714a438f227b583a89a9ea/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132b30d9c84f2a8053714a438f227b583a89a9ea/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=132b30d9c84f2a8053714a438f227b583a89a9ea",
        "patch": "@@ -2009,7 +2009,7 @@ static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_par\n {\n     const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n-         gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n+         (peer.GetLocalServices() & NODE_COMPACT_FILTERS));\n     if (!supported_filter_type) {\n         LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n                  peer.GetId(), static_cast<uint8_t>(filter_type));"
      },
      {
        "sha": "7f58125f00e457b3d378d4beb85540bdc2525ca2",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132b30d9c84f2a8053714a438f227b583a89a9ea/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132b30d9c84f2a8053714a438f227b583a89a9ea/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=132b30d9c84f2a8053714a438f227b583a89a9ea",
        "patch": "@@ -213,6 +213,7 @@ static std::string serviceFlagToStr(size_t bit)\n     case NODE_GETUTXO:         return \"GETUTXO\";\n     case NODE_BLOOM:           return \"BLOOM\";\n     case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_COMPACT_FILTERS: return \"COMPACT_FILTERS\";\n     case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n     // Not using default, so we get warned when a case is missing\n     }"
      },
      {
        "sha": "a68f30287d7f77c8c89c4ed129430223fcc917e4",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132b30d9c84f2a8053714a438f227b583a89a9ea/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132b30d9c84f2a8053714a438f227b583a89a9ea/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=132b30d9c84f2a8053714a438f227b583a89a9ea",
        "patch": "@@ -285,6 +285,9 @@ enum ServiceFlags : uint64_t {\n     // NODE_WITNESS indicates that a node can be asked for blocks and transactions including\n     // witness data.\n     NODE_WITNESS = (1 << 3),\n+    // NODE_COMPACT_FILTERS means the node will service basic block filter requests.\n+    // See BIP157 and BIP158 for details on how this is implemented.\n+    NODE_COMPACT_FILTERS = (1 << 6),\n     // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n     // serving the last 288 (2 day) blocks\n     // See BIP159 for details on how this is implemented."
      }
    ]
  },
  {
    "sha": "f5c003d3ead182335252558c5c6c9b9ca8968065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWMwMDNkM2VhZDE4MjMzNTI1MjU1OGM1YzZjOWI5Y2E4OTY4MDY1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:29:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-01T03:01:13Z"
      },
      "message": "[test] Add test for NODE_COMPACT_FILTER.\n\nTest that a node configured to serve compact filters will signal\nNODE_COMPACT_FILTER service bit.",
      "tree": {
        "sha": "dbd8fc908443b5b2f2413ab62e270b54466d06a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbd8fc908443b5b2f2413ab62e270b54466d06a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5c003d3ead182335252558c5c6c9b9ca8968065",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5c003d3ead182335252558c5c6c9b9ca8968065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5c003d3ead182335252558c5c6c9b9ca8968065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5c003d3ead182335252558c5c6c9b9ca8968065/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "132b30d9c84f2a8053714a438f227b583a89a9ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132b30d9c84f2a8053714a438f227b583a89a9ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/132b30d9c84f2a8053714a438f227b583a89a9ea"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9e86bd2fc08e7d28bf30392e03d3c87da5fa629",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5c003d3ead182335252558c5c6c9b9ca8968065/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5c003d3ead182335252558c5c6c9b9ca8968065/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=f5c003d3ead182335252558c5c6c9b9ca8968065",
        "patch": "@@ -4,12 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n-Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfilters, cfheaders and cfcheckpts.\n+Tests that a node configured with -blockfilterindex and -peerblockfilters signals\n+NODE_COMPACT_FILTERS and can serve cfilters, cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    NODE_COMPACT_FILTERS,\n     hash256,\n     msg_getcfcheckpt,\n     msg_getcfheaders,\n@@ -70,6 +71,14 @@ def run_test(self):\n         self.nodes[1].generate(1001)\n         wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n \n+        # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n+        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+\n+        # Check that the localservices is as expected.\n+        assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n+        assert int(self.nodes[1].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS == 0\n+\n         self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,"
      },
      {
        "sha": "9a6fa66d549b6685ab875ce27f90f09a290f30ab",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5c003d3ead182335252558c5c6c9b9ca8968065/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5c003d3ead182335252558c5c6c9b9ca8968065/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=f5c003d3ead182335252558c5c6c9b9ca8968065",
        "patch": "@@ -49,6 +49,7 @@\n NODE_GETUTXO = (1 << 1)\n NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n+NODE_COMPACT_FILTERS = (1 << 6)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n MSG_TX = 1"
      }
    ]
  }
]