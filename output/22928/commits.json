[
  {
    "sha": "2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
    "node_id": "C_kwDOABII59oAKDJlYzM4YmRlYmJkZmQzZjkzMmVhYTg1Yzk4YjYxN2Q3YjkzMjYzOTk",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-09-09T05:53:16Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-11-09T10:27:06Z"
      },
      "message": "Remove `gArgs` from `wallet.h` and `wallet.cpp`\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "deb39da0b3700ba18ab344ba977cd74f52dbdc2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deb39da0b3700ba18ab344ba977cd74f52dbdc2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94db963de501e4aba6e5d8150a01ceb85753dee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94db963de501e4aba6e5d8150a01ceb85753dee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94db963de501e4aba6e5d8150a01ceb85753dee1"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 62,
      "deletions": 57
    },
    "files": [
      {
        "sha": "f6a8c567437622b6ae93a4e9656725f08c4be581",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -32,7 +32,7 @@ static void CoinSelection(benchmark::Bench& bench)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+    CWallet wallet(chain.get(), \"\", gArgs, CreateDummyWalletDatabase());\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "8e3ca59496f289bed6383cc03038e2b1ec7ff5ab",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -20,7 +20,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n-    CWallet wallet{test_setup->m_node.chain.get(), \"\", CreateMockWalletDatabase()};\n+    CWallet wallet{test_setup->m_node.chain.get(), \"\", gArgs, CreateMockWalletDatabase()};\n     {\n         LOCK(wallet.cs_wallet);\n         wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);"
      },
      {
        "sha": "39cc1c1e1d6fd04ace5065c5a8ef32bf8408351f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -63,7 +63,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n     test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n-    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n+    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", gArgs, CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     {"
      },
      {
        "sha": "93d6aa805f6c65c60d2e4486cd5022f206f46566",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -141,7 +141,7 @@ void TestGUI(interfaces::Node& node)\n     auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n     test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n-    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n+    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", gArgs, CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     {"
      },
      {
        "sha": "e50b4ca5f72b35f458a4d9af406d42c70c9dc041",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -191,7 +191,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n \n     // dummy chain interface\n     bool ret = true;\n-    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, gArgs, std::move(database)), WalletToolReleaseWallet);\n     {\n         LOCK(wallet->cs_wallet);\n         DBErrors load_wallet_ret = wallet->LoadWallet();"
      },
      {
        "sha": "241d77c9deb58e8670fa2a4cc5a8f0082052ce51",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -133,7 +133,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n-    CWallet dummyWallet(nullptr, \"\", CreateDummyWalletDatabase());\n+    CWallet dummyWallet(nullptr, \"\", gArgs, CreateDummyWalletDatabase());\n     for (KeyValPair& row : salvagedData)\n     {\n         /* Filter for only private key type KV pairs to be added to the salvaged wallet */"
      },
      {
        "sha": "a8a7e12a3202469d860d11036a72f71b05cbd845",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -273,7 +273,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n                                                   /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n                                                   /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     {\n-        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase());\n         wallet->LoadWallet();\n         LOCK(wallet->cs_wallet);\n         wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -297,7 +297,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n \n     {\n-        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase());\n         wallet->LoadWallet();\n         LOCK(wallet->cs_wallet);\n         wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -320,7 +320,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n {\n-    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     LOCK(wallet->cs_wallet);\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -601,7 +601,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n {\n-    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     LOCK(wallet->cs_wallet);\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -624,7 +624,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value\n BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n-    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     LOCK(wallet->cs_wallet);\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);"
      },
      {
        "sha": "dda202d55e1b04f0d115858ae77f8458e6075be0",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK compressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n@@ -51,7 +51,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK uncompressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH compressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH uncompressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -126,7 +126,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -144,7 +144,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -178,7 +178,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH compressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH uncompressed\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // scriptPubKey multisig\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -261,7 +261,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH multisig\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -282,7 +282,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with compressed keys\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -308,7 +308,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with uncompressed key\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -334,7 +334,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig wrapped in P2SH\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -361,7 +361,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // OP_RETURN\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -375,7 +375,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unspendable\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -389,7 +389,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unknown\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -403,7 +403,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // Nonstandard\n     {\n-        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));"
      },
      {
        "sha": "0e78855ced33c54b282ac33dcb51d84ad3a00d75",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(scriptpubkeyman_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(CanProvide)\n {\n     // Set up wallet and keyman variables.\n-    CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+    CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n     LegacyScriptPubKeyMan& keyman = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n     // Make a 1 of 2 multisig script"
      },
      {
        "sha": "926f28686d21f672debd922b71b94ea20a14328d",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(spend_tests, WalletTestingSetup)\n BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n {\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    auto wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), coinbaseKey);\n+    auto wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), m_args, coinbaseKey);\n \n     // Check that a subtract-from-recipient transaction slightly less than the\n     // coinbase input amount does not create a change output (because it would"
      },
      {
        "sha": "93a3404d2c805da118e4d295f0be87383d17bf79",
        "filename": "src/wallet/test/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -15,9 +15,9 @@\n \n #include <memory>\n \n-std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, const CKey& key)\n+std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, ArgsManager& args, const CKey& key)\n {\n-    auto wallet = std::make_unique<CWallet>(&chain, \"\", CreateMockWalletDatabase());\n+    auto wallet = std::make_unique<CWallet>(&chain, \"\", args, CreateMockWalletDatabase());\n     {\n         LOCK2(wallet->cs_wallet, ::cs_main);\n         wallet->SetLastBlockProcessed(cchain.Height(), cchain.Tip()->GetBlockHash());"
      },
      {
        "sha": "3adb82b85fd60540304fbe7fae48a81a866b59d0",
        "filename": "src/wallet/test/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.h?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -7,13 +7,14 @@\n \n #include <memory>\n \n+class ArgsManager;\n class CChain;\n class CKey;\n class CWallet;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n-std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, const CKey& key);\n+std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, ArgsManager& args, const CKey& key);\n \n #endif // BITCOIN_WALLET_TEST_UTIL_H"
      },
      {
        "sha": "762702522e71375794203d494ff64d0d8f2f61bb",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -8,7 +8,7 @@\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n-      m_wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase())\n+      m_wallet(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase())\n {\n     m_wallet.LoadWallet();\n     m_chain_notifications_handler = m_node.chain->handleNotifications({ &m_wallet, [](CWallet*) {} });"
      },
      {
        "sha": "4499eb5903110dbea0a8dfc2fe463ce88dac5eec",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -98,7 +98,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n-        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -118,7 +118,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -145,7 +145,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -171,7 +171,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n-        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n@@ -208,7 +208,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         WalletContext context;\n@@ -274,7 +274,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     {\n         WalletContext context;\n         context.args = &gArgs;\n-        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n@@ -296,7 +296,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n@@ -329,7 +329,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+    CWallet wallet(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n     CWalletTx wtx(m_coinbase_txns.back());\n \n     LOCK(wallet.cs_wallet);\n@@ -503,7 +503,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), coinbaseKey);\n+        wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), m_args, coinbaseKey);\n     }\n \n     ~ListCoinsTestingSetup()\n@@ -606,7 +606,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoinsTest, ListCoinsTestingSetup)\n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     {\n-        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         wallet->SetMinVersion(FEATURE_LATEST);\n         wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n@@ -616,7 +616,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n         BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n     }\n     {\n-        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", m_args, CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n         wallet->SetMinVersion(FEATURE_LATEST);"
      },
      {
        "sha": "7f60dd690600415d1392da78b99f335c22380295",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -959,7 +959,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n \n #if HAVE_SYSTEM\n     // notify an external script when a wallet transaction comes in or is updated\n-    std::string strCmd = gArgs.GetArg(\"-walletnotify\", \"\");\n+    std::string strCmd = m_args.GetArg(\"-walletnotify\", \"\");\n \n     if (!strCmd.empty())\n     {\n@@ -2540,7 +2540,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     int64_t nStart = GetTimeMillis();\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    const std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n+    const std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, args, std::move(database)), ReleaseWallet);\n     bool rescan_required = false;\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {"
      },
      {
        "sha": "3855ad821d9d8d8033739c98aa5a45e06d603e43",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -298,6 +298,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Unset the blank wallet flag and saves it to disk\n     void UnsetBlankWalletFlag(WalletBatch& batch) override;\n \n+    /** Provider of aplication-wide arguments. */\n+    const ArgsManager& m_args;\n+\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n@@ -359,8 +362,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database)\n-        : m_chain(chain),\n+    CWallet(interfaces::Chain* chain, const std::string& name, const ArgsManager& args, std::unique_ptr<WalletDatabase> database)\n+        : m_args(args),\n+          m_chain(chain),\n           m_name(name),\n           m_database(std::move(database))\n     {"
      },
      {
        "sha": "b609ba68816cc30bf54bdde7f4ce3f50469981f0",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec38bdebbdfd3f932eaa85c98b617d7b9326399/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=2ec38bdebbdfd3f932eaa85c98b617d7b9326399",
        "patch": "@@ -40,7 +40,7 @@ static void WalletCreate(CWallet* wallet_instance, uint64_t wallet_creation_flag\n     wallet_instance->TopUpKeyPool();\n }\n \n-static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n+static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, const ArgsManager& args, DatabaseOptions options)\n {\n     DatabaseStatus status;\n     bilingual_str error;\n@@ -51,7 +51,7 @@ static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const\n     }\n \n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet};\n+    std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, args, std::move(database)), WalletToolReleaseWallet};\n     DBErrors load_wallet_ret;\n     try {\n         load_wallet_ret = wallet_instance->LoadWallet();\n@@ -151,15 +151,15 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n             options.require_format = DatabaseFormat::SQLITE;\n         }\n \n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, args, options);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, args, options);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Close();\n@@ -184,7 +184,7 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n     } else if (command == \"dump\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, args, options);\n         if (!wallet_instance) return false;\n         bilingual_str error;\n         bool ret = DumpWallet(*wallet_instance, error);"
      }
    ]
  }
]