[
  {
    "sha": "13ac0814afab7635c9617d9f17c30393f77d23d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2FjMDgxNGFmYWI3NjM1Yzk2MTdkOWYxN2MzMDM5M2Y3N2QyM2Q5",
    "commit": {
      "author": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2014-12-29T09:12:03Z"
      },
      "committer": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2014-12-29T09:12:03Z"
      },
      "message": "Added balance column to transactions table.",
      "tree": {
        "sha": "3159f3c8e87c1bdd6c0b3e9776610890cbbda464",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3159f3c8e87c1bdd6c0b3e9776610890cbbda464"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13ac0814afab7635c9617d9f17c30393f77d23d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ac0814afab7635c9617d9f17c30393f77d23d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13ac0814afab7635c9617d9f17c30393f77d23d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ac0814afab7635c9617d9f17c30393f77d23d9/comments",
    "author": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f914f1a746d7f91951c1da262a4a749dd3ebfa71"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 171,
      "deletions": 15
    },
    "files": [
      {
        "sha": "67e17fc704c5ed806d3b242ef6317e0e98c2fc47",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -199,6 +199,16 @@ QString BitcoinUnits::getAmountColumnTitle(int unit)\n     return amountTitle;\n }\n \n+QString BitcoinUnits::getBalanceColumnTitle(int unit)\n+{\n+    QString balanceTitle = QObject::tr(\"Balance\");\n+    if (BitcoinUnits::valid(unit))\n+    {\n+        balanceTitle += \" (\"+BitcoinUnits::name(unit) + \")\";\n+    }\n+    return balanceTitle;\n+}\n+\n int BitcoinUnits::rowCount(const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);"
      },
      {
        "sha": "05ba6342445cce73212afcef87fdc7ee247b6738",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -95,6 +95,8 @@ class BitcoinUnits: public QAbstractListModel\n     static bool parse(int unit, const QString &value, CAmount *val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n     static QString getAmountColumnTitle(int unit);\n+    //! Gets title for balance column including current display unit if optionsModel reference available */\n+    static QString getBalanceColumnTitle(int unit);\n     ///@}\n \n     //! @name AbstractListModel implementation"
      },
      {
        "sha": "a783326a2f13d825942e75af18ab0ffe6a7b4c30",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -24,6 +24,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     typeFilter(ALL_TYPES),\n     watchOnlyFilter(WatchOnlyFilter_All),\n     minAmount(0),\n+    minBalance(0),\n     limitRows(-1),\n     showInactive(true)\n {\n@@ -39,6 +40,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n+    qint64 balance = llabs(index.data(TransactionTableModel::BalanceRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n     if(!showInactive && status == TransactionStatus::Conflicted)\n@@ -55,6 +57,8 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n         return false;\n     if(amount < minAmount)\n         return false;\n+    if(balance < minBalance)\n+        return false;\n \n     return true;\n }\n@@ -84,6 +88,12 @@ void TransactionFilterProxy::setMinAmount(const CAmount& minimum)\n     invalidateFilter();\n }\n \n+void TransactionFilterProxy::setMinBalance(const CAmount& minimum)\n+{\n+    this->minBalance = minimum;\n+    invalidateFilter();\n+}\n+\n void TransactionFilterProxy::setWatchOnlyFilter(WatchOnlyFilter filter)\n {\n     this->watchOnlyFilter = filter;"
      },
      {
        "sha": "cf05d38b73237cf765ea4b0b49cc45f99b671a6e",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -41,6 +41,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n      */\n     void setTypeFilter(quint32 modes);\n     void setMinAmount(const CAmount& minimum);\n+    void setMinBalance(const CAmount& minimum);\n     void setWatchOnlyFilter(WatchOnlyFilter filter);\n \n     /** Set maximum number of rows returned, -1 if unlimited. */\n@@ -61,6 +62,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n     CAmount minAmount;\n+    CAmount minBalance;\n     int limitRows;\n     bool showInactive;\n };"
      },
      {
        "sha": "271dbe9703eab081aebacf45ece54f7a50110321",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -83,21 +83,21 @@ class TransactionRecord\n     static const int RecommendedNumConfirmations = 6;\n \n     TransactionRecord():\n-            hash(), time(0), type(Other), address(\"\"), debit(0), credit(0), idx(0)\n+            hash(), time(0), type(Other), address(\"\"), debit(0), credit(0), idx(0), balance(0)\n     {\n     }\n \n     TransactionRecord(uint256 hash, qint64 time):\n             hash(hash), time(time), type(Other), address(\"\"), debit(0),\n-            credit(0), idx(0)\n+            credit(0), idx(0), balance(0)\n     {\n     }\n \n     TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n                 const CAmount& debit, const CAmount& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n-            idx(0)\n+            idx(0), balance(0)\n     {\n     }\n \n@@ -125,6 +125,9 @@ class TransactionRecord\n     /** Whether the transaction was sent/received with a watch-only address */\n     bool involvesWatchAddress;\n \n+    /** Balance as of this transaction */\n+    CAmount balance;\n+\n     /** Return the unique identifier for this transaction (part) */\n     QString getTxID() const;\n "
      },
      {
        "sha": "716ee0e78e3d4aa9bc7b0e17691d54bae53ee4ea",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 8,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -26,12 +26,13 @@\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n-        Qt::AlignLeft|Qt::AlignVCenter, /* status */\n-        Qt::AlignLeft|Qt::AlignVCenter, /* watchonly */\n-        Qt::AlignLeft|Qt::AlignVCenter, /* date */\n-        Qt::AlignLeft|Qt::AlignVCenter, /* type */\n-        Qt::AlignLeft|Qt::AlignVCenter, /* address */\n-        Qt::AlignRight|Qt::AlignVCenter /* amount */\n+        Qt::AlignLeft|Qt::AlignVCenter,  /* status */\n+        Qt::AlignLeft|Qt::AlignVCenter,  /* watchonly */\n+        Qt::AlignLeft|Qt::AlignVCenter,  /* date */\n+        Qt::AlignLeft|Qt::AlignVCenter,  /* type */\n+        Qt::AlignLeft|Qt::AlignVCenter,  /* address */\n+        Qt::AlignRight|Qt::AlignVCenter, /* amount */\n+        Qt::AlignRight|Qt::AlignVCenter  /* balance */\n     };\n \n // Comparison operator for sort/binary search of model tx list\n@@ -51,6 +52,19 @@ struct TxLessThan\n     }\n };\n \n+// Comparison operator for sort/binary search of tx time list\n+struct TxTimeLessThan\n+{\n+    bool operator()(const TransactionRecord *a, const TransactionRecord *b) const\n+    {\n+        return a->time < b->time;\n+    }\n+    bool operator()(const TransactionRecord &a, const TransactionRecord &b) const\n+    {\n+        return a.time < b.time;\n+    }\n+};\n+\n // Private implementation\n class TransactionTablePriv\n {\n@@ -63,13 +77,37 @@ class TransactionTablePriv\n \n     CWallet *wallet;\n     TransactionTableModel *parent;\n-\n+    \n     /* Local cache of wallet.\n      * As it is in the same order as the CWallet, by definition\n      * this is sorted by sha256.\n      */\n     QList<TransactionRecord> cachedWallet;\n \n+    /**\n+     * Scan cached transactions in order from frist to last,\n+     * updating each transaction's current running balance.\n+     */\n+    void updateWalletBalances()\n+    {\n+        int i;\n+        QList<TransactionRecord*> timeSortedCachedWallet;\n+        // Build a temprorary list of pointers to the cached tranasctions that we can sort.\n+        // The cachedWallet's transactions are expected to stay sorted by hash.\n+        for (i = 0;i < cachedWallet.size();i++)\n+            timeSortedCachedWallet.append(&cachedWallet[i]);\n+        // Sort the list by transaction times.\n+        qSort(timeSortedCachedWallet.begin(), timeSortedCachedWallet.end(), TxTimeLessThan());\n+        // Start with a zero balance and itterate the transactions in order,\n+        // calculating the new balance and updating each transaction's balance property\n+        // as we go.\n+        CAmount balance = 0;\n+        for (i = 0;i < timeSortedCachedWallet.size();i++){\n+            balance += timeSortedCachedWallet[i]->credit + timeSortedCachedWallet[i]->debit;\n+            timeSortedCachedWallet[i]->balance = balance;\n+        }\n+    }\n+\n     /* Query entire wallet anew from core.\n      */\n     void refreshWallet()\n@@ -84,6 +122,8 @@ class TransactionTablePriv\n                     cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, it->second));\n             }\n         }\n+        // Transaction balances need updated.\n+        updateWalletBalances();\n     }\n \n     /* Update our model of the wallet incrementally, to synchronize our model of the wallet\n@@ -148,6 +188,8 @@ class TransactionTablePriv\n                     }\n                     parent->endInsertRows();\n                 }\n+                // Transactions were added, we need to update all transaction's balances.\n+                updateWalletBalances();\n             }\n             break;\n         case CT_DELETED:\n@@ -160,6 +202,8 @@ class TransactionTablePriv\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n             cachedWallet.erase(lower, upper);\n             parent->endRemoveRows();\n+            // Transactions were deleted, we need to update all transaction's balances.\n+            updateWalletBalances();\n             break;\n         case CT_UPDATED:\n             // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n@@ -226,7 +270,7 @@ TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *paren\n         priv(new TransactionTablePriv(wallet, this)),\n         fProcessingQueuedTransactions(false)\n {\n-    columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n+    columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit()) << BitcoinUnits::getBalanceColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n \n     connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n@@ -247,6 +291,13 @@ void TransactionTableModel::updateAmountColumnTitle()\n     emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n+/** Updates the column title to \"Balance (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+void TransactionTableModel::updateBalanceColumnTitle()\n+{\n+    columns[Balance] = BitcoinUnits::getBalanceColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n+    emit headerDataChanged(Qt::Horizontal,Balance,Balance);\n+}\n+\n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n {\n     uint256 updated;\n@@ -440,6 +491,13 @@ QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool\n     return QString(str);\n }\n \n+QString TransactionTableModel::formatTxBalance(const TransactionRecord *wtx, BitcoinUnits::SeparatorStyle separators) const\n+{\n+    if(!wtx->status.countsForBalance)\n+         return \" \";\n+    return BitcoinUnits::format(walletModel->getOptionsModel()->getDisplayUnit(), wtx->balance, false, separators);\n+}\n+\n QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const\n {\n     switch(wtx->status.status)\n@@ -526,6 +584,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n             return formatTxToAddress(rec, false);\n         case Amount:\n             return formatTxAmount(rec, true, BitcoinUnits::separatorAlways);\n+        case Balance:\n+            return formatTxBalance(rec, BitcoinUnits::separatorAlways);\n         }\n         break;\n     case Qt::EditRole:\n@@ -544,6 +604,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n             return formatTxToAddress(rec, true);\n         case Amount:\n             return qint64(rec->credit + rec->debit);\n+        case Balance:\n+            return qint64(rec->balance);\n         }\n         break;\n     case Qt::ToolTipRole:\n@@ -581,6 +643,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n         return qint64(rec->credit + rec->debit);\n+    case BalanceRole:\n+        return qint64(rec->balance);\n     case TxIDRole:\n         return rec->getTxID();\n     case TxHashRole:\n@@ -590,6 +654,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case FormattedAmountRole:\n         // Used for copy/export, so don't include separators\n         return formatTxAmount(rec, false, BitcoinUnits::separatorNever);\n+    case FormattedBalanceRole:\n+        return formatTxBalance(rec, BitcoinUnits::separatorNever);\n     case StatusRole:\n         return rec->status.status;\n     }\n@@ -623,6 +689,8 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n                 return tr(\"Destination address of transaction.\");\n             case Amount:\n                 return tr(\"Amount removed from or added to balance.\");\n+            case Balance:\n+                return tr(\"Current balance at this transaction.\");\n             }\n         }\n     }\n@@ -644,7 +712,9 @@ void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();\n+    updateBalanceColumnTitle();\n     emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n+    emit dataChanged(index(0, Balance), index(priv->size()-1, Balance));\n }\n \n // queue notifications to show a non freezing progress dialog e.g. for rescan"
      },
      {
        "sha": "3c73fdb770835649f351a11dc821c0ebfc9be2f4",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -32,7 +32,8 @@ class TransactionTableModel : public QAbstractTableModel\n         Date = 2,\n         Type = 3,\n         ToAddress = 4,\n-        Amount = 5\n+        Amount = 5,\n+        Balance = 6\n     };\n \n     /** Roles to get specific information from a transaction row.\n@@ -55,6 +56,8 @@ class TransactionTableModel : public QAbstractTableModel\n         LabelRole,\n         /** Net amount of transaction */\n         AmountRole,\n+        /** Balance at transaction */\n+        BalanceRole,\n         /** Unique identifier */\n         TxIDRole,\n         /** Transaction hash */\n@@ -63,6 +66,8 @@ class TransactionTableModel : public QAbstractTableModel\n         ConfirmedRole,\n         /** Formatted amount, without brackets when unconfirmed */\n         FormattedAmountRole,\n+        /** Formatted balance */\n+        FormattedBalanceRole,\n         /** Transaction status (TransactionRecord::Status) */\n         StatusRole\n     };\n@@ -91,6 +96,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QString formatTxType(const TransactionRecord *wtx) const;\n     QString formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const;\n     QString formatTxAmount(const TransactionRecord *wtx, bool showUnconfirmed=true, BitcoinUnits::SeparatorStyle separators=BitcoinUnits::separatorStandard) const;\n+    QString formatTxBalance(const TransactionRecord *wtx, BitcoinUnits::SeparatorStyle separators=BitcoinUnits::separatorStandard) const;\n     QString formatTooltip(const TransactionRecord *rec) const;\n     QVariant txStatusDecoration(const TransactionRecord *wtx) const;\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n@@ -103,6 +109,8 @@ public slots:\n     void updateDisplayUnit();\n     /** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n     void updateAmountColumnTitle();\n+    /** Updates the column title to \"Balance (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+    void updateBalanceColumnTitle();\n     /* Needed to update fProcessingQueuedTransactions through a QueuedConnection */\n     void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }\n "
      },
      {
        "sha": "19e9dbc2c90ed1edfa2e131013303cd0043a275e",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 3,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -109,6 +109,18 @@ TransactionView::TransactionView(QWidget *parent) :\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n+    balanceWidget = new QLineEdit(this);\n+#if QT_VERSION >= 0x040700\n+    balanceWidget->setPlaceholderText(tr(\"Min amount\"));\n+#endif\n+#ifdef Q_OS_MAC\n+    balanceWidget->setFixedWidth(97);\n+#else\n+    balanceWidget->setFixedWidth(100);\n+#endif\n+    balanceWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n+    hlayout->addWidget(balanceWidget);\n+\n     QVBoxLayout *vlayout = new QVBoxLayout(this);\n     vlayout->setContentsMargins(0,0,0,0);\n     vlayout->setSpacing(0);\n@@ -138,6 +150,7 @@ TransactionView::TransactionView(QWidget *parent) :\n     QAction *copyAddressAction = new QAction(tr(\"Copy address\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n+    QAction *copyBalanceAction = new QAction(tr(\"Copy balance\"), this);\n     QAction *copyTxIDAction = new QAction(tr(\"Copy transaction ID\"), this);\n     QAction *editLabelAction = new QAction(tr(\"Edit label\"), this);\n     QAction *showDetailsAction = new QAction(tr(\"Show transaction details\"), this);\n@@ -146,6 +159,7 @@ TransactionView::TransactionView(QWidget *parent) :\n     contextMenu->addAction(copyAddressAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);\n+    contextMenu->addAction(copyBalanceAction);\n     contextMenu->addAction(copyTxIDAction);\n     contextMenu->addAction(editLabelAction);\n     contextMenu->addAction(showDetailsAction);\n@@ -160,13 +174,15 @@ TransactionView::TransactionView(QWidget *parent) :\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n     connect(addressWidget, SIGNAL(textChanged(QString)), this, SLOT(changedPrefix(QString)));\n     connect(amountWidget, SIGNAL(textChanged(QString)), this, SLOT(changedAmount(QString)));\n+    connect(balanceWidget, SIGNAL(textChanged(QString)), this, SLOT(changedBalance(QString)));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n \n     connect(copyAddressAction, SIGNAL(triggered()), this, SLOT(copyAddress()));\n     connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n     connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n+    connect(copyBalanceAction, SIGNAL(triggered()), this, SLOT(copyBalance()));\n     connect(copyTxIDAction, SIGNAL(triggered()), this, SLOT(copyTxID()));\n     connect(editLabelAction, SIGNAL(triggered()), this, SLOT(editLabel()));\n     connect(showDetailsAction, SIGNAL(triggered()), this, SLOT(showDetails()));\n@@ -199,6 +215,7 @@ void TransactionView::setModel(WalletModel *model)\n         transactionView->setColumnWidth(TransactionTableModel::Date, DATE_COLUMN_WIDTH);\n         transactionView->setColumnWidth(TransactionTableModel::Type, TYPE_COLUMN_WIDTH);\n         transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Balance, BALANCE_MINIMUM_COLUMN_WIDTH);\n \n         columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n \n@@ -315,6 +332,21 @@ void TransactionView::changedAmount(const QString &amount)\n     }\n }\n \n+void TransactionView::changedBalance(const QString &balance)\n+{\n+    if(!transactionProxyModel)\n+        return;\n+    CAmount balance_parsed = 0;\n+    if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), balance, &balance_parsed))\n+    {\n+        transactionProxyModel->setMinBalance(balance_parsed);\n+    }\n+    else\n+    {\n+        transactionProxyModel->setMinBalance(0);\n+    }\n+}\n+\n void TransactionView::exportClicked()\n {\n     // CSV is currently the only supported format\n@@ -337,6 +369,8 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);\n     writer.addColumn(tr(\"Address\"), 0, TransactionTableModel::AddressRole);\n     writer.addColumn(BitcoinUnits::getAmountColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedAmountRole);\n+    writer.addColumn(tr(\"Balance\"), 0, TransactionTableModel::BalanceRole);\n+    writer.addColumn(BitcoinUnits::getBalanceColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedBalanceRole);\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {\n@@ -373,6 +407,11 @@ void TransactionView::copyAmount()\n     GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::FormattedAmountRole);\n }\n \n+void TransactionView::copyBalance()\n+{\n+    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::FormattedBalanceRole);\n+}\n+\n void TransactionView::copyTxID()\n {\n     GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxIDRole);\n@@ -517,10 +556,18 @@ bool TransactionView::eventFilter(QObject *obj, QEvent *event)\n         if (ke->key() == Qt::Key_C && ke->modifiers().testFlag(Qt::ControlModifier))\n         {\n             QModelIndex i = this->transactionView->currentIndex();\n-            if (i.isValid() && i.column() == TransactionTableModel::Amount)\n+            if (i.isValid())\n             {\n-                 GUIUtil::setClipboard(i.data(TransactionTableModel::FormattedAmountRole).toString());\n-                 return true;\n+                if (i.column() == TransactionTableModel::Amount)\n+                {\n+                    GUIUtil::setClipboard(i.data(TransactionTableModel::FormattedAmountRole).toString());\n+                    return true;\n+                }\n+                if (i.column() == TransactionTableModel::Balance)\n+                {\n+                    GUIUtil::setClipboard(i.data(TransactionTableModel::FormattedBalanceRole).toString());\n+                    return true;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "6760155f4a092b6ad6197c7c4e21232c89ac0c1c",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ac0814afab7635c9617d9f17c30393f77d23d9/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=13ac0814afab7635c9617d9f17c30393f77d23d9",
        "patch": "@@ -54,6 +54,7 @@ class TransactionView : public QWidget\n         DATE_COLUMN_WIDTH = 120,\n         TYPE_COLUMN_WIDTH = 120,\n         AMOUNT_MINIMUM_COLUMN_WIDTH = 120,\n+        BALANCE_MINIMUM_COLUMN_WIDTH = 120,\n         MINIMUM_COLUMN_WIDTH = 23\n     };\n \n@@ -67,6 +68,7 @@ class TransactionView : public QWidget\n     QComboBox *watchOnlyWidget;\n     QLineEdit *addressWidget;\n     QLineEdit *amountWidget;\n+    QLineEdit *balanceWidget;\n \n     QMenu *contextMenu;\n     QSignalMapper *mapperThirdPartyTxUrls;\n@@ -91,6 +93,7 @@ private slots:\n     void editLabel();\n     void copyLabel();\n     void copyAmount();\n+    void copyBalance();\n     void copyTxID();\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n@@ -107,6 +110,7 @@ public slots:\n     void chooseWatchonly(int idx);\n     void changedPrefix(const QString &prefix);\n     void changedAmount(const QString &amount);\n+    void changedBalance(const QString &balance);\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      }
    ]
  },
  {
    "sha": "a8152fab6c423286e98d642b0a569e8e29fdc9ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODE1MmZhYjZjNDIzMjg2ZTk4ZDY0MmIwYTU2OWU4ZTI5ZmRjOWFj",
    "commit": {
      "author": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2014-12-29T11:20:15Z"
      },
      "committer": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2014-12-29T11:20:15Z"
      },
      "message": "Revised TableViewLastColumnResizingFixer to support multiple columns to the right of the stretching column.",
      "tree": {
        "sha": "6b8a178c4d69d1ba902bb56d5aa6c6d25c670391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b8a178c4d69d1ba902bb56d5aa6c6d25c670391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8152fab6c423286e98d642b0a569e8e29fdc9ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8152fab6c423286e98d642b0a569e8e29fdc9ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8152fab6c423286e98d642b0a569e8e29fdc9ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8152fab6c423286e98d642b0a569e8e29fdc9ac/comments",
    "author": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13ac0814afab7635c9617d9f17c30393f77d23d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ac0814afab7635c9617d9f17c30393f77d23d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13ac0814afab7635c9617d9f17c30393f77d23d9"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 128,
      "deletions": 96
    },
    "files": [
      {
        "sha": "451382c16dca9c2501c368143e18f62214399274",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 79,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "patch": "@@ -428,121 +428,156 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n-void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n+/**\n+ * Initializes all internal variables and set the handled\n+ * columns into interactive mode.\n+ */\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColumnIndex, int stretchColumnIndex, int minimumColumnWidth) :\n+    tableView(table),\n+    lastColIndex(lastColumnIndex),\n+    stretchColIndex(stretchColumnIndex),\n+    minColWidth(minimumColumnWidth)\n {\n-    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    setViewHeaderResizeMode(stretchColumnIndex, QHeaderView::Interactive);\n+    setViewHeaderResizeMode(lastColIndex, QHeaderView::Interactive);\n }\n \n-// We need to disconnect these while handling the resize events, otherwise we can enter infinite loops.\n-void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n+/**\n+ * Called by external sources such as TransactionView\n+ * on a resizeEvent. Scales the stretch column to fill\n+ * or give up the size change.\n+ */\n+void TableViewLastColumnResizingFixer::resized()\n {\n-    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n-// Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.\n-// Refactored here for readability.\n-void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n+/**\n+ * Make sure the columns don't get wider than the viewport.\n+ * Also, keey the last column's size snug against the right side.\n+ */\n+void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n-#if QT_VERSION < 0x050000\n-    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n-#else\n-    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n-#endif\n+    // We no longer stretch the last column here, since we have\n+    // elaborated on on_sectionResized handling.\n+    if (getColumnsWidth() > tableView->horizontalHeader()->width())\n+        resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n-void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width)\n+/**\n+ * Add up the total current width of all the columns.\n+ */\n+int TableViewLastColumnResizingFixer::getColumnsWidth()\n {\n-    tableView->setColumnWidth(nColumnIndex, width);\n-    tableView->horizontalHeader()->resizeSection(nColumnIndex, width);\n+    int totalWidth = 0;\n+    for (int i = 0;i <= lastColIndex;i++)\n+        totalWidth += tableView->horizontalHeader()->sectionSize(i);\n+    return totalWidth;\n }\n \n-int TableViewLastColumnResizingFixer::getColumnsWidth()\n+/**\n+ * Calculate the width availible for the specified column from the \n+ * availible width left after teh total column widths not including\n+ * the column being determined.\n+ */\n+int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int colIndex)\n {\n-    int nColumnsWidthSum = 0;\n-    for (int i = 0; i < columnCount; i++)\n-    {\n-        nColumnsWidthSum += tableView->horizontalHeader()->sectionSize(i);\n+    int width = tableView->horizontalHeader()->width();\n+    if (width > 0) {\n+        width -= (getColumnsWidth() - tableView->horizontalHeader()->sectionSize(colIndex));\n+        return std::max(minColWidth, width);\n     }\n-    return nColumnsWidthSum;\n+    return minColWidth;\n }\n \n-int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n+/**\n+ * Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.\n+ * Refactored here for readability.\n+ */\n+void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n {\n-    int nResult = lastColumnMinimumWidth;\n-    int nTableWidth = tableView->horizontalHeader()->width();\n-\n-    if (nTableWidth > 0)\n-    {\n-        int nOtherColsWidth = getColumnsWidth() - tableView->horizontalHeader()->sectionSize(column);\n-        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n-    }\n-\n-    return nResult;\n+#if QT_VERSION < 0x050000\n+    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n+#else\n+    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n+#endif\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n-void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n+/** \n+ * Manually sets a column's width while ignoring singnals\n+ * the resize causes to prevent infinate loops.\n+ */\n+void TableViewLastColumnResizingFixer::resizeColumn(int colIndex, int width)\n {\n     disconnectViewHeadersSignals();\n-    resizeColumn(lastColumnIndex, getAvailableWidthForColumn(lastColumnIndex));\n+    tableView->setColumnWidth(colIndex, width);\n+    tableView->horizontalHeader()->resizeSection(colIndex, width);\n     connectViewHeadersSignals();\n-\n-    int nTableWidth = tableView->horizontalHeader()->width();\n-    int nColsWidth = getColumnsWidth();\n-    if (nColsWidth > nTableWidth)\n-    {\n-        resizeColumn(secondToLastColumnIndex,getAvailableWidthForColumn(secondToLastColumnIndex));\n-    }\n }\n \n-// Make column use all the space available, useful during window resizing.\n-void TableViewLastColumnResizingFixer::stretchColumnWidth(int column)\n+/**\n+ * Connect to table view column header's relevant resizing signals.\n+ */\n+void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n {\n-    disconnectViewHeadersSignals();\n-    resizeColumn(column, getAvailableWidthForColumn(column));\n-    connectViewHeadersSignals();\n+    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n+    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n }\n \n-// When a section is resized this is a slot-proxy for ajustAmountColumnWidth().\n-void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)\n+/**\n+ * Disconnect from table view column header's resizing signals\n+ * so we can listen to and ignore these signals as we wish.\n+ */\n+void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n {\n-    adjustTableColumnsWidth();\n-    int remainingWidth = getAvailableWidthForColumn(logicalIndex);\n-    if (newSize > remainingWidth)\n-    {\n-       resizeColumn(logicalIndex, remainingWidth);\n-    }\n+    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n+    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n }\n \n-// When the tabless geometry is ready, we manually perform the stretch of the \"Message\" column,\n-// as the \"Stretch\" resize mode does not allow for interactive resizing.\n-void TableViewLastColumnResizingFixer::on_geometriesChanged()\n+/**\n+ * When a column section is resized we handle specific columns of interest\n+ * with special handling to dictate which column fills the leftover space.\n+ * Also use the stretch column to fill any caps or to shink incase we exceed\n+ * availible space.\n+ */\n+void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)\n {\n-    if ((getColumnsWidth() - this->tableView->horizontalHeader()->width()) != 0)\n-    {\n-        disconnectViewHeadersSignals();\n-        resizeColumn(secondToLastColumnIndex, getAvailableWidthForColumn(secondToLastColumnIndex));\n-        connectViewHeadersSignals();\n+    // Cause stretch column resizing to take and give width from its neighbor to the right.\n+    if (logicalIndex == stretchColIndex) {\n+        resizeColumn(stretchColIndex, newSize);\n+        resizeColumn(stretchColIndex + 1, getAvailableWidthForColumn(stretchColIndex + 1));\n+    }\n+    else if (logicalIndex == lastColIndex -1){\n+        // Special handling for the next to last column causes it to stretch the last column\n+        // and bypass the standard handling.\n+        resizeColumn(logicalIndex, newSize);\n+        resizeColumn(lastColIndex, getAvailableWidthForColumn(lastColIndex));\n+        adjustTableColumnsWidth();\n+        return; // Special case bypasses standard handling.\n+    }\n+    else {\n+        // Otherwise, the stretch column will give or take any slack.\n+        resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n+    }\n+    \n+    adjustTableColumnsWidth();\n+    int avail = getAvailableWidthForColumn(logicalIndex);\n+    // logicalIndex column is already resized to newSize. Now we have expanded\n+    // to fill in the leftover gaps or shrunk to give it space. If there is no\n+    // longer enough space for this new size, we restrict it to what size we do have.\n+    if (newSize > avail) {\n+        resizeColumn(logicalIndex, avail);\n+        resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\t\n     }\n }\n \n /**\n- * Initializes all internal variables and prepares the\n- * the resize modes of the last 2 columns of the table and\n+ * When the table's geometry is ready, we stretch our intended column.\n  */\n-TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth) :\n-    tableView(table),\n-    lastColumnMinimumWidth(lastColMinimumWidth),\n-    allColumnsMinimumWidth(allColsMinimumWidth)\n-{\n-    columnCount = tableView->horizontalHeader()->count();\n-    lastColumnIndex = columnCount - 1;\n-    secondToLastColumnIndex = columnCount - 2;\n-    tableView->horizontalHeader()->setMinimumSectionSize(allColumnsMinimumWidth);\n-    setViewHeaderResizeMode(secondToLastColumnIndex, QHeaderView::Interactive);\n-    setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Interactive);\n+void TableViewLastColumnResizingFixer::on_geometriesChanged()\n+{\n+    if ((getColumnsWidth() - tableView->horizontalHeader()->width()) != 0)\n+        resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n #ifdef WIN32"
      },
      {
        "sha": "02ebcd7cba90105b7be3e90a1389c814b754f8ef",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "patch": "@@ -126,7 +126,7 @@ namespace GUIUtil\n     private:\n         int size_threshold;\n     };\n-\n+    \n     /**\n      * Makes a QTableView last column feel as if it was being resized from its left border.\n      * Also makes sure the column widths are never larger than the table's viewport.\n@@ -142,24 +142,22 @@ namespace GUIUtil\n         Q_OBJECT\n \n         public:\n-            TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth);\n-            void stretchColumnWidth(int column);\n+            TableViewLastColumnResizingFixer(QTableView* table, int lastColumnIndex, int stretchColumnIndex, int minimumColumnWidth);\n+            void resized();\n \n         private:\n             QTableView* tableView;\n-            int lastColumnMinimumWidth;\n-            int allColumnsMinimumWidth;\n-            int lastColumnIndex;\n-            int columnCount;\n-            int secondToLastColumnIndex;\n-\n+            int lastColIndex;\n+            int stretchColIndex;\n+            int minColWidth;\n             void adjustTableColumnsWidth();\n-            int getAvailableWidthForColumn(int column);\n+            int getAvailableWidthForColumn(int colIndex);\n             int getColumnsWidth();\n+            void autosizeColumn(int colIndex);\n+            void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n+            void resizeColumn(int colIndex, int width);\n             void connectViewHeadersSignals();\n             void disconnectViewHeadersSignals();\n-            void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n-            void resizeColumn(int nColumnIndex, int width);\n \n         private slots:\n             void on_sectionResized(int logicalIndex, int oldSize, int newSize);"
      },
      {
        "sha": "bef6495ace5dea18f90014fbbc713cdaa315e3b7",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "patch": "@@ -80,7 +80,7 @@ void ReceiveCoinsDialog::setModel(WalletModel *model)\n             SIGNAL(selectionChanged(QItemSelection, QItemSelection)), this,\n             SLOT(recentRequestsView_selectionChanged(QItemSelection, QItemSelection)));\n         // Last 2 columns are set by the columnResizingFixer, when the table geometry is ready.\n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, RecentRequestsTableModel::Amount, RecentRequestsTableModel::Message, MINIMUM_COLUMN_WIDTH);\n     }\n }\n \n@@ -202,7 +202,7 @@ void ReceiveCoinsDialog::on_removeRequestButton_clicked()\n void ReceiveCoinsDialog::resizeEvent(QResizeEvent *event)\n {\n     QWidget::resizeEvent(event);\n-    columnResizingFixer->stretchColumnWidth(RecentRequestsTableModel::Message);\n+    columnResizingFixer->resized();\n }\n \n void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)"
      },
      {
        "sha": "5cd7d43a9f88dbf4361ba276323a0055c6144ff9",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8152fab6c423286e98d642b0a569e8e29fdc9ac/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "patch": "@@ -217,7 +217,7 @@ void TransactionView::setModel(WalletModel *model)\n         transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n         transactionView->setColumnWidth(TransactionTableModel::Balance, BALANCE_MINIMUM_COLUMN_WIDTH);\n \n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, TransactionTableModel::Balance, TransactionTableModel::ToAddress, MINIMUM_COLUMN_WIDTH);\n \n         if (model->getOptionsModel())\n         {\n@@ -369,7 +369,6 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);\n     writer.addColumn(tr(\"Address\"), 0, TransactionTableModel::AddressRole);\n     writer.addColumn(BitcoinUnits::getAmountColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedAmountRole);\n-    writer.addColumn(tr(\"Balance\"), 0, TransactionTableModel::BalanceRole);\n     writer.addColumn(BitcoinUnits::getBalanceColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedBalanceRole);\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n@@ -544,7 +543,7 @@ void TransactionView::focusTransaction(const QModelIndex &idx)\n void TransactionView::resizeEvent(QResizeEvent* event)\n {\n     QWidget::resizeEvent(event);\n-    columnResizingFixer->stretchColumnWidth(TransactionTableModel::ToAddress);\n+    columnResizingFixer->resized();\n }\n \n // Need to override default Ctrl+C action for amount as default behaviour is just to copy DisplayRole text"
      }
    ]
  },
  {
    "sha": "758a0a7418d44dc4ecf35a48048f7e1974baf705",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NThhMGE3NDE4ZDQ0ZGM0ZWNmMzVhNDgwNDhmN2UxOTc0YmFmNzA1",
    "commit": {
      "author": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2015-01-01T02:57:59Z"
      },
      "committer": {
        "name": "SoCo",
        "email": "soco@socosoftware.com",
        "date": "2015-01-01T02:57:59Z"
      },
      "message": "Adjusted TableViewLastColumnResizingFixer imply the last column index and not require specifying it.",
      "tree": {
        "sha": "dbdef46d19ae7167d177f895f1ed4de18a0edb98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbdef46d19ae7167d177f895f1ed4de18a0edb98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/758a0a7418d44dc4ecf35a48048f7e1974baf705",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758a0a7418d44dc4ecf35a48048f7e1974baf705",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/758a0a7418d44dc4ecf35a48048f7e1974baf705",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758a0a7418d44dc4ecf35a48048f7e1974baf705/comments",
    "author": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SoCoCpp",
      "id": 6132807,
      "node_id": "MDQ6VXNlcjYxMzI4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6132807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoCoCpp",
      "html_url": "https://github.com/SoCoCpp",
      "followers_url": "https://api.github.com/users/SoCoCpp/followers",
      "following_url": "https://api.github.com/users/SoCoCpp/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoCoCpp/subscriptions",
      "organizations_url": "https://api.github.com/users/SoCoCpp/orgs",
      "repos_url": "https://api.github.com/users/SoCoCpp/repos",
      "events_url": "https://api.github.com/users/SoCoCpp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoCoCpp/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8152fab6c423286e98d642b0a569e8e29fdc9ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8152fab6c423286e98d642b0a569e8e29fdc9ac"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "71a53b60ccd4f7c4612aa769c2598da1a19e14b3",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=758a0a7418d44dc4ecf35a48048f7e1974baf705",
        "patch": "@@ -432,12 +432,12 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n  * Initializes all internal variables and set the handled\n  * columns into interactive mode.\n  */\n-TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColumnIndex, int stretchColumnIndex, int minimumColumnWidth) :\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int stretchColumnIndex, int minimumColumnWidth) :\n     tableView(table),\n-    lastColIndex(lastColumnIndex),\n     stretchColIndex(stretchColumnIndex),\n     minColWidth(minimumColumnWidth)\n {\n+    lastColIndex = tableView->horizontalHeader()->count() - 1;\n     setViewHeaderResizeMode(stretchColumnIndex, QHeaderView::Interactive);\n     setViewHeaderResizeMode(lastColIndex, QHeaderView::Interactive);\n }"
      },
      {
        "sha": "716e973987d756f14edf0a6e223a19eca2319216",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=758a0a7418d44dc4ecf35a48048f7e1974baf705",
        "patch": "@@ -142,7 +142,7 @@ namespace GUIUtil\n         Q_OBJECT\n \n         public:\n-            TableViewLastColumnResizingFixer(QTableView* table, int lastColumnIndex, int stretchColumnIndex, int minimumColumnWidth);\n+            TableViewLastColumnResizingFixer(QTableView* table, int stretchColumnIndex, int minimumColumnWidth);\n             void resized();\n \n         private:"
      },
      {
        "sha": "1c816d37b6e8bb09118b9a7bb9a2993a3f96be51",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=758a0a7418d44dc4ecf35a48048f7e1974baf705",
        "patch": "@@ -80,7 +80,7 @@ void ReceiveCoinsDialog::setModel(WalletModel *model)\n             SIGNAL(selectionChanged(QItemSelection, QItemSelection)), this,\n             SLOT(recentRequestsView_selectionChanged(QItemSelection, QItemSelection)));\n         // Last 2 columns are set by the columnResizingFixer, when the table geometry is ready.\n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, RecentRequestsTableModel::Amount, RecentRequestsTableModel::Message, MINIMUM_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, RecentRequestsTableModel::Message, MINIMUM_COLUMN_WIDTH);\n     }\n }\n "
      },
      {
        "sha": "bcc847b39e24170c2e984d9899e93b8a33adcca0",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758a0a7418d44dc4ecf35a48048f7e1974baf705/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=758a0a7418d44dc4ecf35a48048f7e1974baf705",
        "patch": "@@ -217,7 +217,7 @@ void TransactionView::setModel(WalletModel *model)\n         transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n         transactionView->setColumnWidth(TransactionTableModel::Balance, BALANCE_MINIMUM_COLUMN_WIDTH);\n \n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, TransactionTableModel::Balance, TransactionTableModel::ToAddress, MINIMUM_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, TransactionTableModel::ToAddress, MINIMUM_COLUMN_WIDTH);\n \n         if (model->getOptionsModel())\n         {"
      }
    ]
  }
]