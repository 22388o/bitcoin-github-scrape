[
  {
    "sha": "429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
    "node_id": "C_kwDOABII59oAKDQyOWI0OTM3OGVlM2EzZDczYWJlMjc2Y2ZkMTc2YzFjYTA4YmY5Yjk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-28T11:37:46Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-29T12:09:14Z"
      },
      "message": "test: introduce script_util helper for creating P2PK scripts",
      "tree": {
        "sha": "0ae03630c70c2b4a11cb100a4128d53f527aa604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ae03630c70c2b4a11cb100a4128d53f527aa604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d648bbb0a7909aed953b6f7907690134606a033a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d648bbb0a7909aed953b6f7907690134606a033a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d648bbb0a7909aed953b6f7907690134606a033a"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 26,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2f9ab34e999b02ebb9ef3c5a4aa98117c9f906c6",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -31,11 +31,11 @@\n     OP_1,\n     OP_2,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n     OP_DROP,\n     OP_TRUE,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2pkh_script,\n     key_to_p2wpkh_script,\n     script_to_p2sh_script,\n@@ -459,7 +459,7 @@ def run_test(self):\n                 importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n                 pubkey = bytes.fromhex(v['pubkey'])\n-                p2pk = CScript([pubkey, OP_CHECKSIG])\n+                p2pk = key_to_p2pk_script(pubkey)\n                 p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n@@ -628,7 +628,7 @@ def p2pkh_address_to_script(self, v):\n         pubkey = bytes.fromhex(v['pubkey'])\n         p2wpkh = key_to_p2wpkh_script(pubkey)\n         p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n-        p2pk = CScript([pubkey, OP_CHECKSIG])\n+        p2pk = key_to_p2pk_script(pubkey)\n         p2pkh = CScript(bytes.fromhex(v['scriptPubKey']))\n         p2sh_p2pk = script_to_p2sh_script(p2pk)\n         p2sh_p2pkh = script_to_p2sh_script(p2pkh)"
      },
      {
        "sha": "50a25ee1ef5c955ae2275a29623f5d3fb0292014",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -76,6 +76,7 @@\n     taproot_construct,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n@@ -1109,7 +1110,7 @@ def predict_sigops_ratio(n, dummy_size):\n             for witv0 in [False, True]:\n                 for hashtype in VALID_SIGHASHES_ECDSA + [random.randrange(0x04, 0x80), random.randrange(0x84, 0x100)]:\n                     standard = (hashtype in VALID_SIGHASHES_ECDSA) and (compressed or not witv0)\n-                    add_spender(spenders, \"legacy/pk-wrongkey\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, script=CScript([pubkey1, OP_CHECKSIG]), **SINGLE_SIG, key=eckey1, failure={\"key\": eckey2}, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n+                    add_spender(spenders, \"legacy/pk-wrongkey\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, script=key_to_p2pk_script(pubkey1), **SINGLE_SIG, key=eckey1, failure={\"key\": eckey2}, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n                     add_spender(spenders, \"legacy/pkh-sighashflip\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, pkh=pubkey1, key=eckey1, **SIGHASH_BITFLIP, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n \n     # Verify that OP_CHECKSIGADD wasn't accidentally added to pre-taproot validation logic."
      },
      {
        "sha": "4e21d08e5c634b9fef0253ca8d379cec182c4fdb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -72,6 +72,7 @@\n     hash160,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n@@ -1455,7 +1456,7 @@ def test_uncompressed_pubkey(self):\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n-        witness_script = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_script = key_to_p2pk_script(pubkey)\n         script_wsh = script_to_p2wsh_script(witness_script)\n \n         tx2 = CTransaction()\n@@ -1533,7 +1534,7 @@ def test_signature_version_1(self):\n         key.generate()\n         pubkey = key.get_pubkey().get_bytes()\n \n-        witness_script = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_script = key_to_p2pk_script(pubkey)\n         script_pubkey = script_to_p2wsh_script(witness_script)\n \n         # First create a witness output for use in the tests."
      },
      {
        "sha": "c519d0c7d19075fc524fe760fbd1768aa7bd687f",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -25,12 +25,12 @@\n from test_framework.script import (\n     CScript,\n     OP_CHECKLOCKTIMEVERIFY,\n-    OP_CHECKSIG,\n     OP_CHECKSEQUENCEVERIFY,\n     OP_DROP,\n     OP_TRUE,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2pkh_script,\n     script_to_p2sh_p2wsh_script,\n     script_to_p2wsh_script,\n@@ -229,7 +229,7 @@ def verify_txn_with_witness_script(self, tx_type):\n         embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n         witness_script = {\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n-            'P2PK': CScript([bytes.fromhex(embedded_pubkey), OP_CHECKSIG]).hex()\n+            'P2PK': key_to_p2pk_script(embedded_pubkey).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n         redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)"
      },
      {
        "sha": "85e3c2a3834c1c98bce5580656f6867aade8d3b7",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -33,11 +33,11 @@\n     CScriptOp,\n     OP_1,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n )\n from .script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     script_to_p2wsh_script,\n )\n@@ -134,7 +134,7 @@ def create_coinbase(height, pubkey=None, extra_output_script=None, fees=0, nValu\n         coinbaseoutput.nValue >>= halvings\n         coinbaseoutput.nValue += fees\n     if pubkey is not None:\n-        coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n+        coinbaseoutput.scriptPubKey = key_to_p2pk_script(pubkey)\n     else:\n         coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n     coinbase.vout = [coinbaseoutput]"
      },
      {
        "sha": "82a9067dd2d6fa5c2ae2ed94805141906bcc7fa1",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -5,14 +5,14 @@\n \"\"\"Useful Script constants and utils.\"\"\"\n from test_framework.script import (\n     CScript,\n-    hash160,\n-    sha256,\n     OP_0,\n-    OP_DUP,\n-    OP_HASH160,\n     OP_CHECKSIG,\n+    OP_DUP,\n     OP_EQUAL,\n     OP_EQUALVERIFY,\n+    OP_HASH160,\n+    hash160,\n+    sha256,\n )\n \n # To prevent a \"tx-size-small\" policy rule error, a transaction has to have a\n@@ -36,6 +36,11 @@\n DUMMY_2_P2WPKH_SCRIPT = CScript([b'b' * 21])\n \n \n+def key_to_p2pk_script(key):\n+    key = check_key(key)\n+    return CScript([key, OP_CHECKSIG])\n+\n+\n def keyhash_to_p2pkh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])"
      },
      {
        "sha": "5bbb7ad5a100b4e3c5a1c1cb2eaa3ee29f1661ba",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429b49378ee3a3d73abe276cfd176c1ca08bf9b9/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=429b49378ee3a3d73abe276cfd176c1ca08bf9b9",
        "patch": "@@ -23,12 +23,14 @@\n from test_framework.script import (\n     CScript,\n     LegacySignatureHash,\n-    OP_CHECKSIG,\n     OP_TRUE,\n     OP_NOP,\n     SIGHASH_ALL,\n )\n-from test_framework.script_util import key_to_p2wpkh_script\n+from test_framework.script_util import (\n+    key_to_p2pk_script,\n+    key_to_p2wpkh_script,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n@@ -75,7 +77,7 @@ def __init__(self, test_node, *, mode=MiniWalletMode.ADDRESS_OP_TRUE):\n             self._priv_key = ECKey()\n             self._priv_key.set((1).to_bytes(32, 'big'), True)\n             pub_key = self._priv_key.get_pubkey()\n-            self._scriptPubKey = bytes(CScript([pub_key.get_bytes(), OP_CHECKSIG]))\n+            self._scriptPubKey = key_to_p2pk_script(pub_key.get_bytes())\n         elif mode == MiniWalletMode.ADDRESS_OP_TRUE:\n             self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n             self._scriptPubKey = bytes.fromhex(self._test_node.validateaddress(self._address)['scriptPubKey'])"
      }
    ]
  }
]