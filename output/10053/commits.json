[
  {
    "sha": "232b6665bc3e5b134821dc7584968fb439fd5f44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzJiNjY2NWJjM2U1YjEzNDgyMWRjNzU4NDk2OGZiNDM5ZmQ1ZjQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T14:26:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T14:26:02Z"
      },
      "message": "Allow test cases to be skipped\n\nCurrently, functional test cases can either pass or fail. There are\noccasions when it is helpful to skip tests, for example if the\nsystem they are running on does not meet the requirements for the test.\nThe rest of the test suite can run without being marked as a failure.\n\nThis commit adds framework for tests to skip if their requirements\naren't met.",
      "tree": {
        "sha": "fce7c7a20289da596cac34147e20f5cd7303b5ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fce7c7a20289da596cac34147e20f5cd7303b5ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/232b6665bc3e5b134821dc7584968fb439fd5f44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232b6665bc3e5b134821dc7584968fb439fd5f44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/232b6665bc3e5b134821dc7584968fb439fd5f44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232b6665bc3e5b134821dc7584968fb439fd5f44/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d64bd929c9663ba38e96721c6dbd89972d043d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d64bd929c9663ba38e96721c6dbd89972d043d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d64bd929c9663ba38e96721c6dbd89972d043d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 23,
      "deletions": 12
    },
    "files": [
      {
        "sha": "198c0cb5afdf8753b38de2aa6d032c9376ff0309",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232b6665bc3e5b134821dc7584968fb439fd5f44/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232b6665bc3e5b134821dc7584968fb439fd5f44/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=232b6665bc3e5b134821dc7584968fb439fd5f44",
        "patch": "@@ -28,9 +28,12 @@\n )\n from .authproxy import JSONRPCException\n \n-\n class BitcoinTestFramework(object):\n \n+    TEST_EXIT_PASSED = 0\n+    TEST_EXIT_FAILED = 1\n+    TEST_EXIT_SKIPPED = 77\n+\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n@@ -183,11 +186,11 @@ def main(self):\n                     print(\"\".join(deque(open(f), MAX_LINES_TO_PRINT)))\n         if success:\n             self.log.info(\"Tests successful\")\n-            sys.exit(0)\n+            sys.exit(self.TEST_EXIT_PASSED)\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n             logging.shutdown()\n-            sys.exit(1)\n+            sys.exit(self.TEST_EXIT_FAILED)\n \n     def _start_logging(self):\n         # Add logger and logging handlers"
      },
      {
        "sha": "41885e52438b50dd99d8500f2705641003cf2510",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232b6665bc3e5b134821dc7584968fb439fd5f44/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232b6665bc3e5b134821dc7584968fb439fd5f44/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=232b6665bc3e5b134821dc7584968fb439fd5f44",
        "patch": "@@ -24,6 +24,9 @@\n import tempfile\n import re\n \n+TEST_EXIT_PASSED = 0\n+TEST_EXIT_SKIPPED = 77\n+\n BASE_SCRIPTS= [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n@@ -245,20 +248,20 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n \n     max_len_name = len(max(test_list, key=len))\n-    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED \", \"DURATION\") + BOLD[0]\n     for _ in range(len(test_list)):\n-        (name, stdout, stderr, passed, duration) = job_queue.get_next()\n-        all_passed = all_passed and passed\n+        (name, stdout, stderr, status, duration) = job_queue.get_next()\n+        all_passed = all_passed and status != \"Failed\"\n         time_sum += duration\n \n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n-        print('' if passed else stdout + '\\n', end='')\n+        print('' if status == \"Passed\" else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+        print(\"Status: %s%s%s, Duration: %s s\\n\" % (BOLD[1], status, BOLD[0], duration))\n \n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), status.ljust(7), duration)\n \n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n \n@@ -315,10 +318,15 @@ def get_next(self):\n                     log_out.seek(0), log_err.seek(0)\n                     [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n                     log_out.close(), log_err.close()\n-                    passed = stderr == \"\" and proc.returncode == 0\n+                    if proc.returncode == TEST_EXIT_PASSED and stderr == \"\":\n+                        status = \"Passed\"\n+                    elif proc.returncode == TEST_EXIT_SKIPPED:\n+                        status = \"Skipped\"\n+                    else:\n+                        status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n-                    return name, stdout, stderr, passed, int(time.time() - time0)\n+                    return name, stdout, stderr, status, int(time.time() - time0)\n             print('.', end='', flush=True)\n \n "
      }
    ]
  },
  {
    "sha": "0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzFhZGU2YTRiMzkyMWRhNmY4ZjJiMTdjOGZjMjNlMTVlZGVmNDI2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T14:29:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T04:05:30Z"
      },
      "message": "Skip rpcbind_test if OS/network requirements are not met.",
      "tree": {
        "sha": "c6fd19903a96b6488b3c58289de64f65a0a0b4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6fd19903a96b6488b3c58289de64f65a0a0b4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232b6665bc3e5b134821dc7584968fb439fd5f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232b6665bc3e5b134821dc7584968fb439fd5f44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232b6665bc3e5b134821dc7584968fb439fd5f44"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 17,
      "deletions": 3
    },
    "files": [
      {
        "sha": "efc36481d183fa722cca88cc56521a711f33ff00",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
        "patch": "@@ -4,6 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test running bitcoind with the -rpcbind and -rpcallowip options.\"\"\"\n \n+import socket\n+import sys\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.netutil import *\n@@ -52,15 +55,26 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux\n-        assert(sys.platform.startswith('linux'))\n+        if not sys.platform.startswith('linux'):\n+            self.log.warning(\"This test can only be run on linux. Skipping test.\")\n+            sys.exit(self.TEST_EXIT_SKIPPED)\n         # find the first non-loopback interface for testing\n         non_loopback_ip = None\n         for name,ip in all_interfaces():\n             if ip != '127.0.0.1':\n                 non_loopback_ip = ip\n                 break\n         if non_loopback_ip is None:\n-            assert(not 'This test requires at least one non-loopback IPv4 interface')\n+            self.log.warning(\"This test requires at least one non-loopback IPv4 interface. Skipping test.\")\n+            sys.exit(self.TEST_EXIT_SKIPPED)\n+        try:\n+            s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+            s.connect((\"::1\",1))\n+            s.close\n+        except OSError:\n+            self.log.warning(\"This test requires IPv6 support. Skipping test.\")\n+            sys.exit(self.TEST_EXIT_SKIPPED)\n+\n         self.log.info(\"Using interface %s for testing\" % non_loopback_ip)\n \n         defaultport = rpc_port(0)"
      },
      {
        "sha": "5bd71fe328b72cd3092cb71895514f10d94c6576",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1ade6a4b3921da6f8f2b17c8fc23e15edef426/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0c1ade6a4b3921da6f8f2b17c8fc23e15edef426",
        "patch": "@@ -248,7 +248,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n \n     max_len_name = len(max(test_list, key=len))\n-    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED \", \"DURATION\") + BOLD[0]\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, status, duration) = job_queue.get_next()\n         all_passed = all_passed and status != \"Failed\""
      }
    ]
  }
]