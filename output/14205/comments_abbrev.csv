MarcoFalke,2018-09-12T12:51:38Z,"Hmm, doing linting with overly complicated regexes seems fragile. Couldn't this be done by a compiler warning or by running the AST?",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420636423,420636423,
practicalswift,2018-09-12T13:59:28Z,"@MarcoFalke Perhaps this simple linter can be replaced by a more advanced AST based solution in the future should we encounter any problems? I don't oppose an AST based solution, but I'm afraid it might introduce significant running time to the linting job – don't you think?\n\nFWIW, this linter has a running time of 16 milliseconds – `git grep` is blazingly fast! :-)\n\n`[^A-Za-z0-9_""]NULL[^A",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420658675,420658675,
MarcoFalke,2018-09-12T15:25:54Z,"Note that several linters already take a couple of seconds and the travis instance takes sometimes up to one minute to boot. Building the AST shouldn't take much longer than that? Also, it could be built once and reused for all linters.\n\nNote that with ""fragile"" I mean ""works fine right now, but breaks after some refactoring and has to be fixed up with another confusing regex that works fine r",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420690530,420690530,
donaloconnor,2018-09-12T17:56:03Z,"Would this fail for a CPP comment? Eg:\n// Add string NULL character to end of buffer",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420740841,420740841,
practicalswift,2018-09-12T20:17:21Z,"@donaloconnor Nope, that is taken care of – see the `grep -vE` :-)",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420782796,420782796,
promag,2018-09-12T20:37:59Z,"We could remove all NULL occurrences:\n```\nsrc/qt/paymentserver.cpp:        // Don't log NULL certificates\nsrc/torcontrol.cpp:        // Prefer NULL, otherwise SAFECOOKIE. If a password is provided, use HASHEDPASSWORD\nsrc/torcontrol.cpp:            LogPrint(BCLog::TOR, ""tor: Using NULL authentication\n"");\nsrc/wallet/wallet.cpp:        return NULL;\n```\nAnd then just disallow all NULL?",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420789078,420789078,
practicalswift,2018-09-12T21:07:17Z,@promag Removing the `NULL` occurences and then keeping the `git grep` as is but removing the `grep -vE`?,https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420797989,420797989,
promag,2018-09-12T21:11:50Z,"Yup, with `grep -vE` we have like a blacklist, beside being fragile.\n\nAnyway, I'm -0 on this matter, no strong opinion really.",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420799344,420799344,
DrahtBot,2018-09-13T00:25:35Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #10973 (Refactor: separate wallet from node by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420841826,420841826,
HashUnlimited,2018-09-13T05:50:04Z,"trying to find a ""simple"" regex I failed there:\n\n```\ntor control_tests.cpp:\n\n        ""AUTH METHODS=NULL"",\n        ""AUTH"", ""METHODS=NULL"");\n        ""METHODS=NULL"", {\n            {""METHODS"", ""NULL""},\n```",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420891459,420891459,
practicalswift,2018-09-13T06:29:37Z,"Updated version to address raised concerns.\n\nI've now also added a comment clarifying the meaning of the POSIX regex `[^abc]`:\n\n> The POSIX regular expression [^abc] matches any character except a, b and c.\n\nTo make sure the linter is robust against false positives I've back tested this by stepping back iteratively in the git history – running `git reset --hard HEAD~N` repeatedly and c",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420898374,420898374,
laanwj,2018-09-13T08:09:25Z,"> Hmm, doing linting with overly complicated regexes seems fragile. Couldn't this be done by a compiler warning or by running the AST?\n\nI agree, and, IMO, this is not worth it.\nusing `NULL` instead of `nullptr` will not result in any potential bugs, which is the only valid reason to add linters IMO",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420921267,420921267,
laanwj,2018-09-13T08:12:52Z,"as i've said before, I'm not happy with piling up an increasingly large heap of shell scripts running fragile regexps over the source code",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420922203,420922203,
donaloconnor,2018-09-13T08:16:10Z,I'd argue NULL could (in rare cases) cause incorrect overload functions to be called (int vs T*) but I don't think the extra lint step is necessary. These things should be caught in reviews anyway :-),https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420923107,420923107,
practicalswift,2018-09-13T08:28:00Z,"> using `NULL` instead of `nullptr` will not result in any potential bugs, which is the only valid reason to add linters IMO\n\n`nullptr` cannot be confused with an `int`. `nullptr` also has a well-specified (very restrictive) type, and thus works in more scenarios where type deduction might do the wrong thing on `NULL` or `0`.\n\nThus: using `nullptr` instead of `NULL` consistently will avoid",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420926455,420926455,
practicalswift,2018-09-13T09:04:58Z,"> These things should be caught in reviews anyway :-)\n\nWhile one certainly would hope so I wouldn't bet my money on expert human reviewing alone. We need both.\n\nMy automated analysis has uncovered numerous real bugs that were not caught in human review: everything from boring/mundane things like the use of uninitialized variables, reliance on undefined behaviour etc and all the way up to t",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420936985,420936985,
donaloconnor,2018-09-13T09:44:38Z,"> While one certainly would hope so I wouldn't bet my money on expert human reviewing alone. We need both.\n\nIndeed! That's why I said *should* catch these things. ;-)\n\n> My automated analysis has uncovered numerous real bugs that were not caught in human review: everything from boring/mundane things like the use of uninitialized variables, reliance on undefined behaviour etc and all the wa",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420948319,420948319,
practicalswift,2018-09-13T09:51:12Z,@donaloconnor Agreed! My point was simply that human review didn't catch the mentioned severe issues so I wouldn't count on it to catch less severe issues like type deduction doing the wrong thing due to `NULL` being used instead of `nullptr` :-),https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-420950214,420950214,
practicalswift,2018-09-14T07:52:50Z,Added technical rationale in OP since it was questioned if using `nullptr` instead of `NULL` consistently could avoid any potential bugs.,https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421263202,421263202,
scravy,2018-09-14T08:13:50Z,"I am wondering – there are quite a few shell/python linters checking different things. The one presented here in this PR seems oddly specific to me. Wouldn't a tool like `checkcpp` or `clang-tidy` do a much better (and broader) job?\n\nI guess it could be configured like the `shellcheck` tool we're already using to lint shell script code style to not execute certain checks which would fail a zil",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421268395,421268395,
practicalswift,2018-09-14T08:19:28Z,"@scravy Absolutely! Based on previous discussions regarding review automation I've simply assumed that @MarcoFalke and/or @laanwj would object to having broader static analyzers like `cppcheck`, `clang-tidy` or Clang Static Analyzer run as part of Travis, but if I'm mistaken about that I'd be glad to put in the required work to add it :-)\n\n@MarcoFalke and @laanwj, can you clarify your (prelimi",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421269790,421269790,
MarcoFalke,2018-09-14T12:38:56Z,"Personally I wouldn't object running a cpp checker, but we used to have problems where purely stylistic issues (such as shadowing to only name one example) caused massive disruption of progress on the project as a whole. So clearly we don't want to run cpp checkers for stylistic issues or on issues that have false positives. Other than that, I don't object running them to check for critical cpp pr",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421345702,421345702,
laanwj,2018-09-14T12:53:41Z,"Fully agree with @MarcoFalke, also as I've said before: if it catches real errors or wacky dangerous code, it's good to have.\n\nThis also means that the static check shouldn't need to much accommodation or hand-holding: don't want to change the code to work around peculiarities of a specific tool.\n\nIf the gain is questionable, say for spelling errors or cosmetic issues (as I consider this o",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421349164,421349164,
scravy,2018-09-14T13:08:57Z,"[cppcheck](http://cppcheck.sourceforge.net/)'s goal is to actually improve security of software by first and foremost identifying undefined behavior.\n\nTo quote:\n\n> Cppcheck is a static analysis tool for C/C++ code. It provides unique code analysis to detect bugs and focuses on detecting undefined behaviour and dangerous coding constructs. The goal is to detect only real errors in the code ",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-421352976,421352976,
MarcoFalke,2018-09-20T17:07:51Z,A conversation with 24 comments is too much noise for a simple stylistic change like this. These stylistic changes are better catched during review and too late to fix up after review due to the massive overhead involved in pull requests.,https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-423260527,423260527,
jnewbery,2018-09-20T19:49:01Z,"> can you clarify your (preliminary) positions so that I don't put in work on something that has near zero chance of getting merged? :-)\n\n@practicalswift - I think as a general rule, contributors should rate-limit their refactor PRs. There are currently ~550 open issues on this project. Contributor and reviewer time spent on getting that number down would be more valuable than yet more refacto",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-423310192,423310192,
MarcoFalke,2018-09-20T19:59:19Z,"@practicalswift I feel guilty myself for doing too much refactoring, but what helps me to keep the number down is to rate-limit myself by postponing every pull request by one day or week. If I still feel the improvement is worth it after that time, I submit it for review.",https://github.com/bitcoin/bitcoin/pull/14205#issuecomment-423313237,423313237,
