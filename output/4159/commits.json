[
  {
    "sha": "4def248b2b47e5440b8ed53b9dd12e8303601eb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGVmMjQ4YjJiNDdlNTQ0MGI4ZWQ1M2I5ZGQxMmU4MzAzNjAxZWIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T15:20:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T15:22:49Z"
      },
      "message": "Move bignum.h to src/test\n\nAfter #4076, #3965 and #4048 bignum.h is only used\nfor verifying scriptnum.",
      "tree": {
        "sha": "e3870e39f70dded2869d7dd1ce5ccbd737d38c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3870e39f70dded2869d7dd1ce5ccbd737d38c7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4def248b2b47e5440b8ed53b9dd12e8303601eb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4def248b2b47e5440b8ed53b9dd12e8303601eb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4def248b2b47e5440b8ed53b9dd12e8303601eb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4def248b2b47e5440b8ed53b9dd12e8303601eb0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 3,
      "deletions": 140
    },
    "files": [
      {
        "sha": "a49ad587160bb3bc5ac5c675ea438eec514460b5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "patch": "@@ -28,7 +28,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n   allocators.h \\\n-  base58.h bignum.h \\\n+  base58.h \\\n   bloom.h \\\n   chainparams.h \\\n   checkpoints.h \\"
      },
      {
        "sha": "5600b904ccdcfc82973bf07e106b53a252401296",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_CHAIN_PARAMS_H\n #define BITCOIN_CHAIN_PARAMS_H\n \n-#include \"bignum.h\"\n #include \"uint256.h\"\n \n #include <vector>"
      },
      {
        "sha": "e6f105fe5c052aecb4e7831e4ce11a01c95dbdfd",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "patch": "@@ -14,6 +14,7 @@\n #include \"netbase.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "fb06fb34354797ae19dcad545c383cf89cc78556",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "patch": "@@ -8,7 +8,6 @@\n \n \n \n-#include \"bignum.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "6aabf50edac0077ceef527c17aef0e78e7486d52",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "patch": "@@ -37,7 +37,6 @@ test_bitcoin_SOURCES = \\\n   base32_tests.cpp \\\n   base58_tests.cpp \\\n   base64_tests.cpp \\\n-  bignum_tests.cpp \\\n   bloom_tests.cpp \\\n   canonical_tests.cpp \\\n   checkblock_tests.cpp \\\n@@ -63,6 +62,7 @@ test_bitcoin_SOURCES = \\\n   util_tests.cpp \\\n   scriptnum_tests.cpp \\\n   sighash_tests.cpp \\\n+  bignum.h \\\n   $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "6b77462d838b9736ff9142f336f6fca96eef4be7",
        "filename": "src/test/bignum.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4def248b2b47e5440b8ed53b9dd12e8303601eb0/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=4def248b2b47e5440b8ed53b9dd12e8303601eb0",
        "previous_filename": "src/bignum.h"
      },
      {
        "sha": "01967c76847211d6ede0fb1df0ecdf8d26a186c0",
        "filename": "src/test/bignum_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 136,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa/src/test/bignum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa/src/test/bignum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum_tests.cpp?ref=8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "patch": "@@ -1,136 +0,0 @@\n-// Copyright (c) 2012-2014 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"bignum.h\"\n-\n-#include <limits>\n-#include <stdint.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(bignum_tests)\n-\n-// Unfortunately there's no standard way of preventing a function from being\n-// inlined, so we define a macro for it.\n-//\n-// You should use it like this:\n-//   NOINLINE void function() {...}\n-#if defined(__GNUC__)\n-// This also works and will be defined for any compiler implementing GCC\n-// extensions, such as Clang and ICC.\n-#define NOINLINE __attribute__((noinline))\n-#elif defined(_MSC_VER)\n-#define NOINLINE __declspec(noinline)\n-#else\n-// We give out a warning because it impacts the correctness of one bignum test.\n-#warning You should define NOINLINE for your compiler.\n-#define NOINLINE\n-#endif\n-\n-// For the following test case, it is useful to use additional tools.\n-//\n-// The simplest one to use is the compiler flag -ftrapv, which detects integer\n-// overflows and similar errors. However, due to optimizations and compilers\n-// taking advantage of undefined behavior sometimes it may not actually detect\n-// anything.\n-//\n-// You can also use compiler-based stack protection to possibly detect possible\n-// stack buffer overruns.\n-//\n-// For more accurate diagnostics, you can use an undefined arithmetic operation\n-// detector such as the clang's undefined behaviour checker.\n-// See also: http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation\n-//\n-// It might also be useful to use Google's AddressSanitizer to detect\n-// stack buffer overruns, which valgrind can't currently detect.\n-\n-// Let's force this code not to be inlined, in order to actually\n-// test a generic version of the function. This increases the chance\n-// that -ftrapv will detect overflows.\n-NOINLINE void mysetint64(CBigNum& num, int64_t n)\n-{\n-    num.setint64(n);\n-}\n-\n-// For each number, we do 2 tests: one with inline code, then we reset the\n-// value to 0, then the second one with a non-inlined function.\n-BOOST_AUTO_TEST_CASE(bignum_setint64)\n-{\n-    int64_t n;\n-\n-    {\n-        n = 0;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-    }\n-    {\n-        n = 1;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"1\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"1\");\n-    }\n-    {\n-        n = -1;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-1\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-1\");\n-    }\n-    {\n-        n = 5;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"5\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"5\");\n-    }\n-    {\n-        n = -5;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-5\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-5\");\n-    }\n-    {\n-        n = std::numeric_limits<int64_t>::min();\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n-    }\n-    {\n-        n = std::numeric_limits<int64_t>::max();\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"9223372036854775807\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"9223372036854775807\");\n-    }\n-}\n-\n-\n-BOOST_AUTO_TEST_CASE(bignum_SetHex)\n-{\n-    std::string hexStr = \"deecf97fd890808b9cc0f1b6a3e7a60b400f52710e6ad075b1340755bfa58cc9\";\n-    CBigNum num;\n-    num.SetHex(hexStr);\n-    BOOST_CHECK_EQUAL(num.GetHex(), hexStr);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]