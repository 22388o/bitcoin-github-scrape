[
  {
    "sha": "ce994e1202c4820b1ad5c375d3d671fd0a18e092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTk5NGUxMjAyYzQ4MjBiMWFkNWMzNzVkM2Q2NzFmZDBhMThlMDky",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-25T07:11:25Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-31T19:09:59Z"
      },
      "message": "test: add tx modfication helper function in feature_cltv.py\n\n+ reformat python imports\n+ fix PEP8 warnings (all except E501 line too long)",
      "tree": {
        "sha": "e388a46f70b5469685a70a99da1778e5632419da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e388a46f70b5469685a70a99da1778e5632419da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce994e1202c4820b1ad5c375d3d671fd0a18e092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce994e1202c4820b1ad5c375d3d671fd0a18e092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce994e1202c4820b1ad5c375d3d671fd0a18e092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce994e1202c4820b1ad5c375d3d671fd0a18e092/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b14462083f82aeaa9a376978f210db5538db296f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b14462083f82aeaa9a376978f210db5538db296f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b14462083f82aeaa9a376978f210db5538db296f"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 43,
      "deletions": 20
    },
    "files": [
      {
        "sha": "0e8a5c01bb6cca736996cda60b074705d0dd3d3f",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 43,
        "deletions": 20,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce994e1202c4820b1ad5c375d3d671fd0a18e092/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce994e1202c4820b1ad5c375d3d671fd0a18e092/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=ce994e1202c4820b1ad5c375d3d671fd0a18e092",
        "patch": "@@ -8,10 +8,24 @@\n 1351.\n \"\"\"\n \n-from test_framework.blocktools import create_coinbase, create_block, create_transaction\n-from test_framework.messages import CTransaction, msg_block, ToHex\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+    create_transaction,\n+)\n+from test_framework.messages import (\n+    CTransaction,\n+    ToHex,\n+    msg_block,\n+)\n from test_framework.p2p import P2PInterface\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n+from test_framework.script import (\n+    CScript,\n+    CScriptNum,\n+    OP_1NEGATE,\n+    OP_CHECKLOCKTIMEVERIFY,\n+    OP_DROP,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -23,6 +37,25 @@\n CLTV_HEIGHT = 1351\n \n \n+# Helper function to modify a transaction by\n+# 1) prepending a given script to the scriptSig of vin 0 and\n+# 2) (optionally) modify the nSequence of vin 0 and the tx's nLockTime\n+def cltv_modify_tx(node, tx, prepend_scriptsig, nsequence=None, nlocktime=None):\n+    if nsequence is not None:\n+        tx.vin[0].nSequence = nsequence\n+        tx.nLockTime = nlocktime\n+\n+        # Need to re-sign, since nSequence and nLockTime changed\n+        signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n+        new_tx = CTransaction()\n+        new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n+    else:\n+        new_tx = tx\n+\n+    new_tx.vin[0].scriptSig = CScript(prepend_scriptsig + list(CScript(new_tx.vin[0].scriptSig)))\n+    return new_tx\n+\n+\n def cltv_invalidate(tx):\n     '''Modify the signature in vin 0 of the tx to fail CLTV\n \n@@ -31,24 +64,15 @@ def cltv_invalidate(tx):\n     TODO: test more ways that transactions using CLTV could be invalid (eg\n     locktime requirements fail, sequence time requirements fail, etc).\n     '''\n-    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n-                                  list(CScript(tx.vin[0].scriptSig)))\n+    cltv_modify_tx(None, tx, [OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP])\n+\n \n def cltv_validate(node, tx, height):\n     '''Modify the signature in vin 0 of the tx to pass CLTV\n     Prepends <height> CLTV DROP in the scriptSig, and sets\n     the locktime to height'''\n-    tx.vin[0].nSequence = 0\n-    tx.nLockTime = height\n-\n-    # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n-    new_tx = CTransaction()\n-    new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n-\n-    new_tx.vin[0].scriptSig = CScript([CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n-                                  list(CScript(new_tx.vin[0].scriptSig)))\n-    return new_tx\n+    return cltv_modify_tx(node, tx, [CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP],\n+                          nsequence=0, nlocktime=height)\n \n \n class BIP65Test(BitcoinTestFramework):\n@@ -66,8 +90,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def test_cltv_info(self, *, is_active):\n-        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip65'],\n-            {\n+        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip65'], {\n                 \"active\": is_active,\n                 \"height\": CLTV_HEIGHT,\n                 \"type\": \"buried\",\n@@ -86,7 +109,7 @@ def run_test(self):\n         self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n-                self.nodeaddress, amount=1.0)\n+                                     self.nodeaddress, amount=1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n@@ -119,7 +142,7 @@ def run_test(self):\n         block.nVersion = 4\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n-                self.nodeaddress, amount=1.0)\n+                                     self.nodeaddress, amount=1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n "
      }
    ]
  },
  {
    "sha": "8d0ce50c4826529a2d30ffc850bce4d44da6019b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDBjZTUwYzQ4MjY1MjlhMmQzMGZmYzg1MGJjZTRkNDRkYTYwMTli",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-25T07:33:04Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-31T19:09:59Z"
      },
      "message": "test: prepare cltv_invalidate to test all failure reasons in feature_cltv.py\n\nonly the \"top item on the stack is less than 0\" is used in the test right now",
      "tree": {
        "sha": "115a6e0830442e8abb577e3c81521a6d624322e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/115a6e0830442e8abb577e3c81521a6d624322e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0ce50c4826529a2d30ffc850bce4d44da6019b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ce50c4826529a2d30ffc850bce4d44da6019b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ce50c4826529a2d30ffc850bce4d44da6019b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ce50c4826529a2d30ffc850bce4d44da6019b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce994e1202c4820b1ad5c375d3d671fd0a18e092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce994e1202c4820b1ad5c375d3d671fd0a18e092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce994e1202c4820b1ad5c375d3d671fd0a18e092"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 28,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e2e6c5e600571309e9d2be241a765e2ad87690f2",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 28,
        "deletions": 16,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ce50c4826529a2d30ffc850bce4d44da6019b/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ce50c4826529a2d30ffc850bce4d44da6019b/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=8d0ce50c4826529a2d30ffc850bce4d44da6019b",
        "patch": "@@ -56,23 +56,35 @@ def cltv_modify_tx(node, tx, prepend_scriptsig, nsequence=None, nlocktime=None):\n     return new_tx\n \n \n-def cltv_invalidate(tx):\n-    '''Modify the signature in vin 0 of the tx to fail CLTV\n-\n-    Prepends -1 CLTV DROP in the scriptSig itself.\n-\n-    TODO: test more ways that transactions using CLTV could be invalid (eg\n-    locktime requirements fail, sequence time requirements fail, etc).\n-    '''\n-    cltv_modify_tx(None, tx, [OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP])\n+def cltv_invalidate(node, tx, failure_reason):\n+    # Modify the signature in vin 0 and nSequence/nLockTime of the tx to fail CLTV\n+    #\n+    # According to BIP65, OP_CHECKLOCKTIMEVERIFY can fail due the following reasons:\n+    # 1) the stack is empty\n+    # 2) the top item on the stack is less than 0\n+    # 3) the lock-time type (height vs. timestamp) of the top stack item and the\n+    #    nLockTime field are not the same\n+    # 4) the top stack item is greater than the transaction's nLockTime field\n+    # 5) the nSequence field of the txin is 0xffffffff\n+    assert failure_reason in range(5)\n+    scheme = [\n+        # | Script to prepend to scriptSig                  | nSequence  | nLockTime    |\n+        # +-------------------------------------------------+------------+--------------+\n+        [[OP_CHECKLOCKTIMEVERIFY],                            None,       None],\n+        [[OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP],       None,       None],\n+        [[CScriptNum(1000), OP_CHECKLOCKTIMEVERIFY, OP_DROP], 0,          1296688602],  # timestamp of genesis block\n+        [[CScriptNum(1000), OP_CHECKLOCKTIMEVERIFY, OP_DROP], 0,          500],\n+        [[CScriptNum(500),  OP_CHECKLOCKTIMEVERIFY, OP_DROP], 0xffffffff, 500],\n+    ][failure_reason]\n+\n+    return cltv_modify_tx(node, tx, prepend_scriptsig=scheme[0], nsequence=scheme[1], nlocktime=scheme[2])\n \n \n def cltv_validate(node, tx, height):\n-    '''Modify the signature in vin 0 of the tx to pass CLTV\n-    Prepends <height> CLTV DROP in the scriptSig, and sets\n-    the locktime to height'''\n-    return cltv_modify_tx(node, tx, [CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP],\n-                          nsequence=0, nlocktime=height)\n+    # Modify the signature in vin 0 and nSequence/nLockTime of the tx to pass CLTV\n+    scheme = [[CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP], 0, height]\n+\n+    return cltv_modify_tx(node, tx, prepend_scriptsig=scheme[0], nsequence=scheme[1], nlocktime=scheme[2])\n \n \n class BIP65Test(BitcoinTestFramework):\n@@ -110,7 +122,7 @@ def run_test(self):\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n                                      self.nodeaddress, amount=1.0)\n-        cltv_invalidate(spendtx)\n+        spendtx = cltv_invalidate(self.nodes[0], spendtx, 1)\n         spendtx.rehash()\n \n         tip = self.nodes[0].getbestblockhash()\n@@ -143,7 +155,7 @@ def run_test(self):\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n                                      self.nodeaddress, amount=1.0)\n-        cltv_invalidate(spendtx)\n+        spendtx = cltv_invalidate(self.nodes[0], spendtx, 1)\n         spendtx.rehash()\n \n         # First we show that this tx is valid except for CLTV by getting it"
      }
    ]
  },
  {
    "sha": "dbc19814743cb12960a99793197c811e2750a06b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmMxOTgxNDc0M2NiMTI5NjBhOTk3OTMxOTdjODExZTI3NTBhMDZi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-25T07:46:05Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-31T19:09:59Z"
      },
      "message": "test: check that _all_ invalid-CLTV txs are allowed in a block pre-BIP65",
      "tree": {
        "sha": "bdc247a92f9642fb7c0c93886e372dd5afb1dad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdc247a92f9642fb7c0c93886e372dd5afb1dad0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbc19814743cb12960a99793197c811e2750a06b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc19814743cb12960a99793197c811e2750a06b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc19814743cb12960a99793197c811e2750a06b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc19814743cb12960a99793197c811e2750a06b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0ce50c4826529a2d30ffc850bce4d44da6019b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ce50c4826529a2d30ffc850bce4d44da6019b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ce50c4826529a2d30ffc850bce4d44da6019b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c5b8e7ee6e4190f0abda7338d24e60629f9ff595",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc19814743cb12960a99793197c811e2750a06b/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc19814743cb12960a99793197c811e2750a06b/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=dbc19814743cb12960a99793197c811e2750a06b",
        "patch": "@@ -118,18 +118,22 @@ def run_test(self):\n         self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(CLTV_HEIGHT - 2)]\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n-        self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n+        self.log.info(\"Test that invalid-according-to-CLTV transactions can still appear in a block\")\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n-                                     self.nodeaddress, amount=1.0)\n-        spendtx = cltv_invalidate(self.nodes[0], spendtx, 1)\n-        spendtx.rehash()\n+        # create one invalid tx per CLTV failure reason (5 in total) and collect them\n+        invalid_ctlv_txs = []\n+        for i in range(5):\n+            spendtx = create_transaction(self.nodes[0], self.coinbase_txids[i],\n+                                         self.nodeaddress, amount=1.0)\n+            spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n+            spendtx.rehash()\n+            invalid_ctlv_txs.append(spendtx)\n \n         tip = self.nodes[0].getbestblockhash()\n         block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n         block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time)\n         block.nVersion = 3\n-        block.vtx.append(spendtx)\n+        block.vtx.extend(invalid_ctlv_txs)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n \n@@ -153,7 +157,7 @@ def run_test(self):\n         self.log.info(\"Test that invalid-according-to-cltv transactions cannot appear in a block\")\n         block.nVersion = 4\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n+        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[10],\n                                      self.nodeaddress, amount=1.0)\n         spendtx = cltv_invalidate(self.nodes[0], spendtx, 1)\n         spendtx.rehash()"
      }
    ]
  },
  {
    "sha": "b01cd9471f435bb36b8ed5211a56baad51111ad2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDFjZDk0NzFmNDM1YmIzNmI4ZWQ1MjExYTU2YmFhZDUxMTExYWQy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-25T08:12:03Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-31T19:30:25Z"
      },
      "message": "test: check that _all_ invalid-CLTV txs are rejected after BIP65 activation",
      "tree": {
        "sha": "889298d93d1b6495bef15eeacc4356e6087ec409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/889298d93d1b6495bef15eeacc4356e6087ec409"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b01cd9471f435bb36b8ed5211a56baad51111ad2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01cd9471f435bb36b8ed5211a56baad51111ad2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b01cd9471f435bb36b8ed5211a56baad51111ad2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01cd9471f435bb36b8ed5211a56baad51111ad2/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc19814743cb12960a99793197c811e2750a06b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc19814743cb12960a99793197c811e2750a06b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc19814743cb12960a99793197c811e2750a06b"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 37,
      "deletions": 26
    },
    "files": [
      {
        "sha": "f2130fb588b3f0b462affc020ea9aae0d6031f8a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 37,
        "deletions": 26,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01cd9471f435bb36b8ed5211a56baad51111ad2/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01cd9471f435bb36b8ed5211a56baad51111ad2/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=b01cd9471f435bb36b8ed5211a56baad51111ad2",
        "patch": "@@ -154,35 +154,46 @@ def run_test(self):\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             peer.sync_with_ping()\n \n-        self.log.info(\"Test that invalid-according-to-cltv transactions cannot appear in a block\")\n+        self.log.info(\"Test that invalid-according-to-CLTV transactions cannot appear in a block\")\n         block.nVersion = 4\n+        block.vtx.append(CTransaction()) # dummy tx after coinbase that will be replaced later\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[10],\n-                                     self.nodeaddress, amount=1.0)\n-        spendtx = cltv_invalidate(self.nodes[0], spendtx, 1)\n-        spendtx.rehash()\n-\n-        # First we show that this tx is valid except for CLTV by getting it\n-        # rejected from the mempool for exactly that reason.\n-        assert_equal(\n-            [{\n-                'txid': spendtx.hash,\n-                'wtxid': spendtx.getwtxid(),\n-                'allowed': False,\n-                'reject-reason': 'non-mandatory-script-verify-flag (Negative locktime)',\n-            }],\n-            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0),\n-        )\n-\n-        # Now we verify that a block with this transaction is also invalid.\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.solve()\n+        # create and test one invalid tx per CLTV failure reason (5 in total)\n+        for i in range(5):\n+            spendtx = create_transaction(self.nodes[0], self.coinbase_txids[10+i],\n+                                         self.nodeaddress, amount=1.0)\n+            spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n+            spendtx.rehash()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputScripts on {} failed with non-mandatory-script-verify-flag (Negative locktime)'.format(block.vtx[-1].hash)]):\n-            peer.send_and_ping(msg_block(block))\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n-            peer.sync_with_ping()\n+            expected_cltv_reject_reason = [\n+                \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\",\n+                \"non-mandatory-script-verify-flag (Negative locktime)\",\n+                \"non-mandatory-script-verify-flag (Locktime requirement not satisfied)\",\n+                \"non-mandatory-script-verify-flag (Locktime requirement not satisfied)\",\n+                \"non-mandatory-script-verify-flag (Locktime requirement not satisfied)\",\n+            ][i]\n+            # First we show that this tx is valid except for CLTV by getting it\n+            # rejected from the mempool for exactly that reason.\n+            assert_equal(\n+                [{\n+                    'txid': spendtx.hash,\n+                    'wtxid': spendtx.getwtxid(),\n+                    'allowed': False,\n+                    'reject-reason': expected_cltv_reject_reason,\n+                }],\n+                self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0),\n+            )\n+\n+            # Now we verify that a block with this transaction is also invalid.\n+            block.vtx[1] = spendtx\n+            block.hashMerkleRoot = block.calc_merkle_root()\n+            block.solve()\n+\n+            with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputScripts on {} failed with {}'.format(\n+                                                block.vtx[-1].hash, expected_cltv_reject_reason)]):\n+                peer.send_and_ping(msg_block(block))\n+                assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n+                peer.sync_with_ping()\n \n         self.log.info(\"Test that a version 4 block with a valid-according-to-CLTV transaction is accepted\")\n         spendtx = cltv_validate(self.nodes[0], spendtx, CLTV_HEIGHT - 1)"
      }
    ]
  }
]