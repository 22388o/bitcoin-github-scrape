[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397171968",
    "pull_request_review_id": 380333628,
    "id": 397171968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTk2OA==",
    "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_permissions.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(32);\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) : static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());",
    "path": "src/test/fuzz/net_permissions.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "39d387e92ac47a0723c9ad725087c6bf8f67d595",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd prefer to have them in multiple lines, so that adding and removing values is easier to follow in the diff and in git blame",
    "created_at": "2020-03-24T13:57:41Z",
    "updated_at": "2020-03-24T14:39:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397171968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397171968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397171968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397171968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397175253",
    "pull_request_review_id": 380333628,
    "id": 397175253,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3NTI1Mw==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <timedata.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const unsigned int max_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 1000);\n+    // Divide by 2 to avoid signed integer overflow in .median()\n+    const int64_t initial_value = fuzzed_data_provider.ConsumeIntegral<int64_t>() / 2;\n+    CMedianFilter<int64_t> median_filter{max_size, initial_value};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        (void)median_filter.median();\n+        assert(median_filter.size() > 0);\n+        assert(static_cast<size_t>(median_filter.size()) == median_filter.sorted().size());\n+        assert(static_cast<unsigned int>(median_filter.size()) <= max_size || max_size == 0);",
    "path": "src/test/fuzz/timedata.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "39d387e92ac47a0723c9ad725087c6bf8f67d595",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this needed?\r\n\r\n```suggestion\r\n        assert(static_cast<unsigned int>(median_filter.size()) <= max_size);\r\n```",
    "created_at": "2020-03-24T14:02:14Z",
    "updated_at": "2020-03-24T14:39:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397175253",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397175253"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397175253"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397175253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397215884",
    "pull_request_review_id": 380390150,
    "id": 397215884,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTg4NA==",
    "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_permissions.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(32);\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) : static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());",
    "path": "src/test/fuzz/net_permissions.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "39d387e92ac47a0723c9ad725087c6bf8f67d595",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now fixed. Considering updating `.clang-format` regarding this whitespace nit since it seems to be recurring (I agree with your rationale).\r\n\r\nIdeally the `.clang-format` should be written such that `clang-format -i` makes a PR immune against whitespace nits :)",
    "created_at": "2020-03-24T14:54:22Z",
    "updated_at": "2020-03-24T14:54:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397215884",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397215884"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397215884"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397215884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 397171968
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397216344",
    "pull_request_review_id": 380390755,
    "id": 397216344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjM0NA==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <timedata.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const unsigned int max_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 1000);\n+    // Divide by 2 to avoid signed integer overflow in .median()\n+    const int64_t initial_value = fuzzed_data_provider.ConsumeIntegral<int64_t>() / 2;\n+    CMedianFilter<int64_t> median_filter{max_size, initial_value};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        (void)median_filter.median();\n+        assert(median_filter.size() > 0);\n+        assert(static_cast<size_t>(median_filter.size()) == median_filter.sorted().size());\n+        assert(static_cast<unsigned int>(median_filter.size()) <= max_size || max_size == 0);",
    "path": "src/test/fuzz/timedata.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "39d387e92ac47a0723c9ad725087c6bf8f67d595",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is needed since `max_size == 0` means unbounded size as `CMedianFilter` is currently implemented :)",
    "created_at": "2020-03-24T14:54:59Z",
    "updated_at": "2020-03-24T14:55:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397216344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397216344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397216344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397216344/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 397175253
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397222759",
    "pull_request_review_id": 380399000,
    "id": 397222759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMjc1OQ==",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const CBanEntry ban_entry = [&] {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n+        case 0:\n+            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+            break;\n+        case 1:\n+            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>(), fuzzed_data_provider.PickValueInArray<BanReason>({\n+                                                                                  BanReason::BanReasonUnknown,\n+                                                                                  BanReason::BanReasonNodeMisbehaving,\n+                                                                                  BanReason::BanReasonManuallyAdded,\n+                                                                              })};\n+            break;\n+        case 2: {\n+            const Optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n+            if (ban_entry) {\n+                return *ban_entry;\n+            }\n+            break;\n+        }\n+        }\n+        return CBanEntry{};\n+    }();\n+    assert(!ban_entry.banReasonToString().empty());",
    "path": "src/test/fuzz/addrdb.cpp",
    "position": 42,
    "original_position": 42,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it make sense to also add an `AssertEqualAfterSerializeDeserialize` here?",
    "created_at": "2020-03-24T15:02:58Z",
    "updated_at": "2020-03-24T15:02:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397222759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397222759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397222759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397222759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 42,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397223309",
    "pull_request_review_id": 380399675,
    "id": 397223309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzMwOQ==",
    "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_permissions.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(32);\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) : static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());",
    "path": "src/test/fuzz/net_permissions.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "39d387e92ac47a0723c9ad725087c6bf8f67d595",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the goal of clang-format is to only add whitespace, not commas or even normalize whitespace like black does for python",
    "created_at": "2020-03-24T15:03:38Z",
    "updated_at": "2020-03-24T15:03:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397223309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397223309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397223309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397223309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 397171968
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397239827",
    "pull_request_review_id": 380420797,
    "id": 397239827,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTgyNw==",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const CBanEntry ban_entry = [&] {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n+        case 0:\n+            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+            break;\n+        case 1:\n+            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>(), fuzzed_data_provider.PickValueInArray<BanReason>({\n+                                                                                  BanReason::BanReasonUnknown,\n+                                                                                  BanReason::BanReasonNodeMisbehaving,\n+                                                                                  BanReason::BanReasonManuallyAdded,\n+                                                                              })};\n+            break;\n+        case 2: {\n+            const Optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n+            if (ban_entry) {\n+                return *ban_entry;\n+            }\n+            break;\n+        }\n+        }\n+        return CBanEntry{};\n+    }();\n+    assert(!ban_entry.banReasonToString().empty());",
    "path": "src/test/fuzz/addrdb.cpp",
    "position": 42,
    "original_position": 42,
    "commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "original_commit_id": "4308aa67e3ea38e3fe5ac84e38a29df36c0d0e10",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm afraid equality is not defined for `CBanEntry`. That goes for quite a few of our classes :)",
    "created_at": "2020-03-24T15:24:49Z",
    "updated_at": "2020-03-24T15:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397239827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397239827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18417#discussion_r397239827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18417"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397239827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 42,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 397222759
  }
]