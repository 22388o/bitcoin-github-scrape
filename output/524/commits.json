[
  {
    "sha": "4e67a6216bf3633320950117aba3566cbfd5ffda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTY3YTYyMTZiZjM2MzMzMjA5NTAxMTdhYmEzNTY2Y2JmZDVmZmRh",
    "commit": {
      "author": {
        "name": "JoelKatz",
        "email": "DavidJoelSchwartz@GMail.com",
        "date": "2011-07-25T22:13:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:47:34Z"
      },
      "message": "Faster Base64 decoder.",
      "tree": {
        "sha": "e5739dd58720f6d65979f158bf51eb006ce77000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5739dd58720f6d65979f158bf51eb006ce77000"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e67a6216bf3633320950117aba3566cbfd5ffda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e67a6216bf3633320950117aba3566cbfd5ffda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e67a6216bf3633320950117aba3566cbfd5ffda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e67a6216bf3633320950117aba3566cbfd5ffda/comments",
    "author": {
      "login": "JoelKatz",
      "id": 877549,
      "node_id": "MDQ6VXNlcjg3NzU0OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoelKatz",
      "html_url": "https://github.com/JoelKatz",
      "followers_url": "https://api.github.com/users/JoelKatz/followers",
      "following_url": "https://api.github.com/users/JoelKatz/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoelKatz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoelKatz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoelKatz/subscriptions",
      "organizations_url": "https://api.github.com/users/JoelKatz/orgs",
      "repos_url": "https://api.github.com/users/JoelKatz/repos",
      "events_url": "https://api.github.com/users/JoelKatz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoelKatz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a1ce869690fe87fbce169a4b685695dc9e575f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a1ce869690fe87fbce169a4b685695dc9e575f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a1ce869690fe87fbce169a4b685695dc9e575f6"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 60,
      "deletions": 18
    },
    "files": [
      {
        "sha": "db2e610fadfd5414de47f3824e1bfa1d42d1e415",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e67a6216bf3633320950117aba3566cbfd5ffda/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e67a6216bf3633320950117aba3566cbfd5ffda/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=4e67a6216bf3633320950117aba3566cbfd5ffda",
        "patch": "@@ -1830,24 +1830,6 @@ string EncodeBase64(string s)\n     return result;\n }\n \n-string DecodeBase64(string s)\n-{\n-    BIO *b64, *bmem;\n-\n-    char* buffer = static_cast<char*>(calloc(s.size(), sizeof(char)));\n-\n-    b64 = BIO_new(BIO_f_base64());\n-    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);\n-    bmem = BIO_new_mem_buf(const_cast<char*>(s.c_str()), s.size());\n-    bmem = BIO_push(b64, bmem);\n-    BIO_read(bmem, buffer, s.size());\n-    BIO_free_all(bmem);\n-\n-    string result(buffer);\n-    free(buffer);\n-    return result;\n-}\n-\n bool HTTPAuthorized(map<string, string>& mapHeaders)\n {\n     string strAuth = mapHeaders[\"authorization\"];"
      },
      {
        "sha": "5b6d26bb8927bc3e0523e9587a3e3ed220faf85a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e67a6216bf3633320950117aba3566cbfd5ffda/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e67a6216bf3633320950117aba3566cbfd5ffda/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4e67a6216bf3633320950117aba3566cbfd5ffda",
        "patch": "@@ -470,6 +470,65 @@ void ParseParameters(int argc, char* argv[])\n     }\n }\n \n+static const int decode64_table[256]=\n+{\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n+ -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n+ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n+ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n+ 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n+};\n+\n+std::string DecodeBase64(const std::string &s)\n+{\n+    char buf[1024];\n+    if(s.length()>512) return \"\";\n+    char *optr=buf;\n+\n+    int dec, mode=0, left=0;\n+    size_t index=0;\n+    for (int i=0; i<s.length(); i++)\n+    {\n+         dec=decode64_table[s[i]];\n+         if(dec==-1) break;\n+         switch(mode)\n+         {\n+             case 0: // we have no bits and get 6\n+                 left = dec;\n+                 mode = 1;\n+                 break;\n+\n+              case 1: // we have 6 bits and keep 4\n+                 *optr++ = (left<<2) | (dec>>4);\n+                  left = dec & 15;\n+                  mode = 2;\n+                  break;\n+                  \n+             case 2: // we have 4 bits and get 6, we keep 2            \n+                  *optr++ = (left<<4) | (dec>>2);\n+                 left = dec & 3;\n+                 mode = 3;\n+                 break;\n+                 \n+             case 3: // we have 2 bits and get 6\n+                 *optr++ = (left<<6) | dec;\n+                 mode=0;\n+                 break;\n+         }\n+    }\n+\n+    *optr=0;   \n+    return buf;\n+}\n+\n \n \n bool WildcardMatch(const char* psz, const char* mask)"
      },
      {
        "sha": "92a2b839caf3b1d6d9d072f2ea1906f0cd588818",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e67a6216bf3633320950117aba3566cbfd5ffda/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e67a6216bf3633320950117aba3566cbfd5ffda/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4e67a6216bf3633320950117aba3566cbfd5ffda",
        "patch": "@@ -201,6 +201,7 @@ void SetMockTime(int64 nMockTimeIn);\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n std::string FormatFullVersion();\n+std::string DecodeBase64(const std::string &s);\n \n \n "
      }
    ]
  },
  {
    "sha": "4b603f1cd6a0b8480c15555389077a4b401c2c7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjYwM2YxY2Q2YTBiODQ4MGMxNTU1NTM4OTA3N2E0YjQwMWMyYzdi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-20T13:38:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:47:35Z"
      },
      "message": "Inline base64 encoder/decoder\n\nThis replaces the openssl-based base64 encoder and decoder with a more\nefficient internal one. Tested against the rfc4648 test vectors.\n\nDecoder is based on JoelKatz' version.",
      "tree": {
        "sha": "3ac0b307439f1fbac5b5f53eebad4603dbdba0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ac0b307439f1fbac5b5f53eebad4603dbdba0e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b603f1cd6a0b8480c15555389077a4b401c2c7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b603f1cd6a0b8480c15555389077a4b401c2c7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b603f1cd6a0b8480c15555389077a4b401c2c7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b603f1cd6a0b8480c15555389077a4b401c2c7b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e67a6216bf3633320950117aba3566cbfd5ffda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e67a6216bf3633320950117aba3566cbfd5ffda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e67a6216bf3633320950117aba3566cbfd5ffda"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 118,
      "deletions": 55
    },
    "files": [
      {
        "sha": "23d97db89b917b11a8d213575138fbdfbb27615f",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=4b603f1cd6a0b8480c15555389077a4b401c2c7b",
        "patch": "@@ -1811,25 +1811,6 @@ int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRe\n     return nStatus;\n }\n \n-string EncodeBase64(string s)\n-{\n-    BIO *b64, *bmem;\n-    BUF_MEM *bptr;\n-\n-    b64 = BIO_new(BIO_f_base64());\n-    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);\n-    bmem = BIO_new(BIO_s_mem());\n-    b64 = BIO_push(b64, bmem);\n-    BIO_write(b64, s.c_str(), s.size());\n-    BIO_flush(b64);\n-    BIO_get_mem_ptr(b64, &bptr);\n-\n-    string result(bptr->data, bptr->length);\n-    BIO_free_all(b64);\n-\n-    return result;\n-}\n-\n bool HTTPAuthorized(map<string, string>& mapHeaders)\n {\n     string strAuth = mapHeaders[\"authorization\"];"
      },
      {
        "sha": "fb648a97212dc2c859ef1e7688d001f494cd5c0c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 35,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4b603f1cd6a0b8480c15555389077a4b401c2c7b",
        "patch": "@@ -443,7 +443,6 @@ vector<unsigned char> ParseHex(const string& str)\n     return ParseHex(str.c_str());\n }\n \n-\n void ParseParameters(int argc, char* argv[])\n {\n     mapArgs.clear();\n@@ -470,65 +469,145 @@ void ParseParameters(int argc, char* argv[])\n     }\n }\n \n-static const int decode64_table[256]=\n+string EncodeBase64(const unsigned char* pch, size_t len)\n {\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n- -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n- 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n- 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n- 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n-};\n+    static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+\n+    string strRet=\"\";\n+    strRet.reserve((len+2)/3*4);\n+\n+    int mode=0, left=0;\n+    const unsigned char *pchEnd = pch+len;\n+\n+    while (pch<pchEnd)\n+    {\n+        int enc = *(pch++);\n+        switch (mode)\n+        {\n+            case 0: // we have no bits\n+                strRet += pbase64[enc >> 2];\n+                left = (enc & 3) << 4;\n+                mode = 1;\n+                break;\n+\n+            case 1: // we have two bits\n+                strRet += pbase64[left | (enc >> 4)];\n+                left = (enc & 15) << 2;\n+                mode = 2;\n+                break;\n+\n+            case 2: // we have four bits\n+                strRet += pbase64[left | (enc >> 6)];\n+                strRet += pbase64[enc & 63];\n+                mode = 0;\n+                break;\n+        }\n+    }\n+\n+    if (mode)\n+    {\n+        strRet += pbase64[left];\n+        strRet += '=';\n+        if (mode == 1)\n+            strRet += '=';\n+    }\n \n-std::string DecodeBase64(const std::string &s)\n+    return strRet;\n+}\n+\n+string EncodeBase64(const string& str)\n {\n-    char buf[1024];\n-    if(s.length()>512) return \"\";\n-    char *optr=buf;\n+    return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n+}\n \n-    int dec, mode=0, left=0;\n-    size_t index=0;\n-    for (int i=0; i<s.length(); i++)\n+vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n+{\n+    static const int decode64_table[256] =\n+    {\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n+        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n+        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n+        49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n+    };\n+\n+    if (pfInvalid)\n+        *pfInvalid = false;\n+\n+    vector<unsigned char> vchRet;\n+    vchRet.reserve(strlen(p)*3/4);\n+\n+    int mode = 0;\n+    int left = 0;\n+\n+    while (1)\n     {\n-         dec=decode64_table[s[i]];\n-         if(dec==-1) break;\n-         switch(mode)\n+         int dec = decode64_table[*p];\n+         if (dec == -1) break;\n+         p++;\n+         switch (mode)\n          {\n              case 0: // we have no bits and get 6\n                  left = dec;\n                  mode = 1;\n                  break;\n \n               case 1: // we have 6 bits and keep 4\n-                 *optr++ = (left<<2) | (dec>>4);\n+                  vchRet.push_back((left<<2) | (dec>>4));\n                   left = dec & 15;\n                   mode = 2;\n                   break;\n-                  \n-             case 2: // we have 4 bits and get 6, we keep 2            \n-                  *optr++ = (left<<4) | (dec>>2);\n+\n+             case 2: // we have 4 bits and get 6, we keep 2\n+                 vchRet.push_back((left<<4) | (dec>>2));\n                  left = dec & 3;\n                  mode = 3;\n                  break;\n-                 \n+\n              case 3: // we have 2 bits and get 6\n-                 *optr++ = (left<<6) | dec;\n-                 mode=0;\n+                 vchRet.push_back((left<<6) | dec);\n+                 mode = 0;\n                  break;\n          }\n     }\n \n-    *optr=0;   \n-    return buf;\n+    if (pfInvalid)\n+        switch (mode)\n+        {\n+            case 0: // 4n base64 characters processed: ok\n+                break;\n+\n+            case 1: // 4n+1 base64 character processed: impossible\n+                *pfInvalid = true;\n+                break;\n+\n+            case 2: // 4n+2 base64 characters processed: require '=='\n+                if (left || p[0] != '=' || p[1] != '=' || decode64_table[p[2]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 3: // 4n+3 base64 characters processed: require '='\n+                if (left || p[0] != '=' || decode64_table[p[1]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+        }\n+\n+    return vchRet;\n }\n \n+string DecodeBase64(const string& str)\n+{\n+    vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n+    return string((const char*)&vchRet[0], vchRet.size());\n+}\n \n \n bool WildcardMatch(const char* psz, const char* mask)"
      },
      {
        "sha": "1fdfdf11976db7dd1911b6cc3c7876af605be7ab",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b603f1cd6a0b8480c15555389077a4b401c2c7b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4b603f1cd6a0b8480c15555389077a4b401c2c7b",
        "patch": "@@ -178,6 +178,10 @@ bool ParseMoney(const std::string& str, int64& nRet);\n bool ParseMoney(const char* pszIn, int64& nRet);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = NULL);\n+std::string DecodeBase64(const std::string& str);\n+std::string EncodeBase64(const unsigned char* pch, size_t len);\n+std::string EncodeBase64(const std::string& str);\n void ParseParameters(int argc, char* argv[]);\n const char* wxGetTranslation(const char* psz);\n bool WildcardMatch(const char* psz, const char* mask);\n@@ -201,7 +205,6 @@ void SetMockTime(int64 nMockTimeIn);\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n std::string FormatFullVersion();\n-std::string DecodeBase64(const std::string &s);\n \n \n "
      }
    ]
  },
  {
    "sha": "e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTNiZjM3ZTg2NDg4ZTQ4MTEzNmNhNjZjZDBiNmIxN2IyYzJlMDVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:46:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:10Z"
      },
      "message": "Test case for base64 encode/decode",
      "tree": {
        "sha": "2aba5c9b5286f3ac47379d360e5a95edc8928619",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aba5c9b5286f3ac47379d360e5a95edc8928619"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93bf37e86488e481136ca66cd0b6b17b2c2e05e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b603f1cd6a0b8480c15555389077a4b401c2c7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b603f1cd6a0b8480c15555389077a4b401c2c7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b603f1cd6a0b8480c15555389077a4b401c2c7b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f30f7f8936d6b749b0af5c5ef76db508ec0221e9",
        "filename": "src/test/base64_tests.cpp",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93bf37e86488e481136ca66cd0b6b17b2c2e05e/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93bf37e86488e481136ca66cd0b6b17b2c2e05e/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
        "patch": "@@ -0,0 +1,20 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"../util.h\"\n+\n+BOOST_AUTO_TEST_SUITE(base64_tests)\n+\n+BOOST_AUTO_TEST_CASE(base64_testvectors)\n+{\n+    static const string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n+    static const string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n+    for (int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    {\n+        string strEnc = EncodeBase64(vstrIn[i]);\n+        BOOST_CHECK(strEnc == vstrOut[i]);\n+        string strDec = DecodeBase64(strEnc);\n+        BOOST_CHECK(strDec == vstrIn[i]);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a42ad7524f74ffbd59eb8752ce3c7eed8008565d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93bf37e86488e481136ca66cd0b6b17b2c2e05e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93bf37e86488e481136ca66cd0b6b17b2c2e05e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"script_tests.cpp\"\n #include \"transaction_tests.cpp\"\n #include \"DoS_tests.cpp\"\n+#include \"base64_tests.cpp\"\n \n CWallet* pwalletMain;\n "
      }
    ]
  },
  {
    "sha": "cc2567e32fb62df84f40d3f28f2ee48ab1009775",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzI1NjdlMzJmYjYyZGY4NGY0MGQzZjI4ZjJlZTQ4YWIxMDA5Nzc1",
    "commit": {
      "author": {
        "name": "Khalahan",
        "email": "khal@bitcoin-contact.org",
        "date": "2011-04-24T12:27:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:22Z"
      },
      "message": "Sign and verify message with bitcoin address and public key\n\nAdd padding to input (fixed string + address) before hashing",
      "tree": {
        "sha": "640b26f6bc6b9472f5a9a4f6edfd9f160d8676ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/640b26f6bc6b9472f5a9a4f6edfd9f160d8676ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc2567e32fb62df84f40d3f28f2ee48ab1009775",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2567e32fb62df84f40d3f28f2ee48ab1009775",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc2567e32fb62df84f40d3f28f2ee48ab1009775",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2567e32fb62df84f40d3f28f2ee48ab1009775/comments",
    "author": null,
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93bf37e86488e481136ca66cd0b6b17b2c2e05e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93bf37e86488e481136ca66cd0b6b17b2c2e05e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1b2a5b5f7e6e5b92a2fa528f5a80cec1a77d9a5d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc2567e32fb62df84f40d3f28f2ee48ab1009775/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc2567e32fb62df84f40d3f28f2ee48ab1009775/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=cc2567e32fb62df84f40d3f28f2ee48ab1009775",
        "patch": "@@ -526,6 +526,70 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value signmessage(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"signmessage <bitcoinaddress> <message>\\n\"\n+            \"Sign a message with the private key of an address\");\n+\n+    string strAddress = params[0].get_str();\n+    string strMessage = params[1].get_str();\n+    strMessage.insert(0, \"Padding text - \");\n+    \n+    uint160 hash160;\n+    if(!AddressToHash160(strAddress, hash160))\n+        throw JSONRPCError(-3, \"Invalid address\");\n+    \n+    vector<unsigned char>& vchPubKey = mapPubKeys[hash160];\n+    CKey key;\n+    if(!key.SetPubKey(vchPubKey))\n+        throw JSONRPCError(-3, \"Public key not found\");\n+    strMessage.insert(0, HexStr(vchPubKey.begin(), vchPubKey.end()).c_str());\n+\n+    vector<unsigned char> vchMsg(strMessage.begin(), strMessage.end());\n+    vector<unsigned char> vchSig;\n+    if (!CKey::Sign(mapKeys[vchPubKey], Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n+        throw JSONRPCError(-3, \"Sign failed\");\n+\n+    Object obj;\n+    obj.push_back(Pair(\"address\",       strAddress));\n+    obj.push_back(Pair(\"pubkey\",        HexStr(vchPubKey.begin(), vchPubKey.end()).c_str()));\n+    obj.push_back(Pair(\"sign\",          HexStr(vchSig.begin(), vchSig.end()).c_str()));\n+\n+    return obj;\n+}\n+\n+Value verifymessage(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 3)\n+        throw runtime_error(\n+            \"verifymessage <pubkey> <sign> <message>\\n\"\n+            \"Verify a signed message with the public key\");\n+\n+    string strPubKey  = params[0].get_str();\n+    string strSign    = params[1].get_str();\n+    string strMessage = params[2].get_str();\n+    strMessage.insert(0, \"Padding text - \");\n+    strMessage.insert(0, strPubKey.c_str());\n+\n+    vector<unsigned char> vchPubKey = ParseHex(strPubKey);\n+    vector<unsigned char> vchSig = ParseHex(strSign);\n+    vector<unsigned char> vchMsg(strMessage.begin(), strMessage.end());\n+\n+    CKey key;\n+    if(!key.SetPubKey(vchPubKey))\n+        throw JSONRPCError(-3, \"Invalid pubkey\");\n+    \n+    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n+        throw JSONRPCError(-3, \"Verify failed\");\n+    \n+    Object obj;\n+    obj.push_back(Pair(\"address\",       PubKeyToAddress(vchPubKey)));\n+    obj.push_back(Pair(\"pubkey\",        strPubKey.c_str()));\n+    return obj;\n+}\n+\n \n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n@@ -1636,6 +1700,8 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"sendmany\",               &sendmany),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n+    make_pair(\"signmessage\",           &signmessage),\n+    make_pair(\"verifymessage\",         &verifymessage),\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),"
      }
    ]
  },
  {
    "sha": "b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTNkNjI4NGViNWIyODMzZWQxYmRlNDZkYmNlNWI1YTQyODQ4MDRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-19T18:03:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:22Z"
      },
      "message": "Incorporate pubkey in signature, check based on address\n\nInclude the public key in the signature string, to allow verification\nbased on address.",
      "tree": {
        "sha": "cc58ca90b4601e7f29615d92dddf430e8dd712d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc58ca90b4601e7f29615d92dddf430e8dd712d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b53d6284eb5b2833ed1bde46dbce5b5a4284804a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc2567e32fb62df84f40d3f28f2ee48ab1009775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2567e32fb62df84f40d3f28f2ee48ab1009775",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc2567e32fb62df84f40d3f28f2ee48ab1009775"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 49,
      "deletions": 37
    },
    "files": [
      {
        "sha": "3638adac38751343fbc5cd30f949ce4e14edc57c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 37,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b53d6284eb5b2833ed1bde46dbce5b5a4284804a/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b53d6284eb5b2833ed1bde46dbce5b5a4284804a/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
        "patch": "@@ -526,68 +526,80 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+static const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"signmessage <bitcoinaddress> <message>\\n\"\n             \"Sign a message with the private key of an address\");\n \n+    if (pwalletMain->IsLocked())\n+        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+\n     string strAddress = params[0].get_str();\n     string strMessage = params[1].get_str();\n-    strMessage.insert(0, \"Padding text - \");\n-    \n-    uint160 hash160;\n-    if(!AddressToHash160(strAddress, hash160))\n+\n+    CBitcoinAddress addr(strAddress);\n+    if (!addr.IsValid())\n         throw JSONRPCError(-3, \"Invalid address\");\n-    \n-    vector<unsigned char>& vchPubKey = mapPubKeys[hash160];\n+\n     CKey key;\n-    if(!key.SetPubKey(vchPubKey))\n-        throw JSONRPCError(-3, \"Public key not found\");\n-    strMessage.insert(0, HexStr(vchPubKey.begin(), vchPubKey.end()).c_str());\n+    if (!pwalletMain->GetKey(addr, key))\n+        throw JSONRPCError(-4, \"Private key not available\");\n+\n+    CDataStream ss(SER_GETHASH);\n+    ss << strMessageMagic;\n+    ss << strMessage;\n \n-    vector<unsigned char> vchMsg(strMessage.begin(), strMessage.end());\n     vector<unsigned char> vchSig;\n-    if (!CKey::Sign(mapKeys[vchPubKey], Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        throw JSONRPCError(-3, \"Sign failed\");\n+    if (!key.Sign(Hash(ss.begin(), ss.end()), vchSig))\n+        throw JSONRPCError(-5, \"Sign failed\");\n \n-    Object obj;\n-    obj.push_back(Pair(\"address\",       strAddress));\n-    obj.push_back(Pair(\"pubkey\",        HexStr(vchPubKey.begin(), vchPubKey.end()).c_str()));\n-    obj.push_back(Pair(\"sign\",          HexStr(vchSig.begin(), vchSig.end()).c_str()));\n+    CDataStream sres(SER_NETWORK);\n+    sres << key.GetPubKey(); // public key\n+    sres << vchSig; // signature;\n \n-    return obj;\n+    return HexStr(sres.begin(), sres.end());\n }\n \n Value verifymessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n-            \"verifymessage <pubkey> <sign> <message>\\n\"\n-            \"Verify a signed message with the public key\");\n+            \"verifymessage <bitcoinaddress> <signature> <message>\\n\"\n+            \"Verify a signed message\");\n \n-    string strPubKey  = params[0].get_str();\n-    string strSign    = params[1].get_str();\n-    string strMessage = params[2].get_str();\n-    strMessage.insert(0, \"Padding text - \");\n-    strMessage.insert(0, strPubKey.c_str());\n+    string strAddress  = params[0].get_str();\n+    string strSign     = params[1].get_str();\n+    string strMessage  = params[2].get_str();\n \n-    vector<unsigned char> vchPubKey = ParseHex(strPubKey);\n-    vector<unsigned char> vchSig = ParseHex(strSign);\n-    vector<unsigned char> vchMsg(strMessage.begin(), strMessage.end());\n+    CBitcoinAddress addr(strAddress);\n+    if (!addr.IsValid())\n+        throw JSONRPCError(-3, \"Invalid address\");\n+\n+    vector<unsigned char> vchResult = ParseHex(strSign);\n+    CDataStream sres(vchResult);\n+\n+    std::vector<unsigned char> vchPubKey;\n+    sres >> vchPubKey;\n+    std::vector<unsigned char> vchSig;\n+    sres >> vchSig;\n \n     CKey key;\n-    if(!key.SetPubKey(vchPubKey))\n-        throw JSONRPCError(-3, \"Invalid pubkey\");\n-    \n-    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        throw JSONRPCError(-3, \"Verify failed\");\n-    \n-    Object obj;\n-    obj.push_back(Pair(\"address\",       PubKeyToAddress(vchPubKey)));\n-    obj.push_back(Pair(\"pubkey\",        strPubKey.c_str()));\n-    return obj;\n+    if (!key.SetPubKey(vchPubKey))\n+        throw JSONRPCError(-5, \"Invalid public key in signature\");\n+\n+    if (key.GetAddress() == addr)\n+    {\n+        CDataStream ss(SER_GETHASH);\n+        ss << strMessageMagic;\n+        ss << strMessage;\n+        return key.Verify(Hash(ss.begin(), ss.end()), vchSig);\n+    }\n+    else\n+        return false;\n }\n \n "
      }
    ]
  },
  {
    "sha": "d9867551fc58ebb62eddef3dfbdb1dc711110577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTg2NzU1MWZjNThlYmI2MmVkZGVmM2RmYmRiMWRjNzExMTEwNTc3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-20T13:42:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:22Z"
      },
      "message": "base64-based sign/verify",
      "tree": {
        "sha": "f2c7b7afaf78952ee51a9ae0e33a58f1f3ebefc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2c7b7afaf78952ee51a9ae0e33a58f1f3ebefc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9867551fc58ebb62eddef3dfbdb1dc711110577",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9867551fc58ebb62eddef3dfbdb1dc711110577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9867551fc58ebb62eddef3dfbdb1dc711110577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9867551fc58ebb62eddef3dfbdb1dc711110577/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b53d6284eb5b2833ed1bde46dbce5b5a4284804a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b53d6284eb5b2833ed1bde46dbce5b5a4284804a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c8a0076bfa4fc9628f1acb0408e82836aab7aec0",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9867551fc58ebb62eddef3dfbdb1dc711110577/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9867551fc58ebb62eddef3dfbdb1dc711110577/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=d9867551fc58ebb62eddef3dfbdb1dc711110577",
        "patch": "@@ -561,7 +561,8 @@ Value signmessage(const Array& params, bool fHelp)\n     sres << key.GetPubKey(); // public key\n     sres << vchSig; // signature;\n \n-    return HexStr(sres.begin(), sres.end());\n+    vector<unsigned char> vchRet(sres.begin(), sres.end());\n+    return EncodeBase64(&vchRet[0], vchRet.size());\n }\n \n Value verifymessage(const Array& params, bool fHelp)\n@@ -579,7 +580,12 @@ Value verifymessage(const Array& params, bool fHelp)\n     if (!addr.IsValid())\n         throw JSONRPCError(-3, \"Invalid address\");\n \n-    vector<unsigned char> vchResult = ParseHex(strSign);\n+    bool fInvalid = false;\n+    vector<unsigned char> vchResult = DecodeBase64(strSign.c_str(), &fInvalid);\n+\n+    if (fInvalid)\n+        throw JSONRPCError(-5, \"Malformed base64 encoding\");\n+\n     CDataStream sres(vchResult);\n \n     std::vector<unsigned char> vchPubKey;"
      }
    ]
  },
  {
    "sha": "01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWNjNTI2MzE4ZmY5ZjBlZTZmYjY3NWZmZTNiZTRjYTdmM2NkYTdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-04-25T11:23:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:22Z"
      },
      "message": "Compact signatures and key recovery\n\nIntroduce a new type of signatures that are only 65 bytes long, and allow\nreconstruction of the public key that was used to create the signature.",
      "tree": {
        "sha": "1b76eabfd7fe0fc424acaf8e213298e9e4f71181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b76eabfd7fe0fc424acaf8e213298e9e4f71181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9867551fc58ebb62eddef3dfbdb1dc711110577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9867551fc58ebb62eddef3dfbdb1dc711110577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9867551fc58ebb62eddef3dfbdb1dc711110577"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 140,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ffd7b9cccbeb4c7d3f52801f978d066ddd2979a",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
        "patch": "@@ -75,6 +75,76 @@ int static inline EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n     return(ok);\n }\n \n+int static inline ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n+{\n+    if (!eckey) return 0;\n+\n+    int ret = 0;\n+    BN_CTX *ctx = NULL;\n+\n+    BIGNUM *x = NULL;\n+    BIGNUM *e = NULL;\n+    BIGNUM *order = NULL;\n+    BIGNUM *sor = NULL;\n+    BIGNUM *eor = NULL;\n+    BIGNUM *field = NULL;\n+    EC_POINT *R = NULL;\n+    EC_POINT *O = NULL;\n+    EC_POINT *Q = NULL;\n+    BIGNUM *rr = NULL;\n+    BIGNUM *zero = NULL;\n+    int n = 0;\n+    int i = recid / 2;\n+\n+    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n+    if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }\n+    BN_CTX_start(ctx);\n+    order = BN_CTX_get(ctx);\n+    if (!EC_GROUP_get_order(group, order, ctx)) { ret = -2; goto err; }\n+    x = BN_CTX_get(ctx);\n+    if (!BN_copy(x, order)) { ret=-1; goto err; }\n+    if (!BN_mul_word(x, i)) { ret=-1; goto err; }\n+    if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }\n+    field = BN_CTX_get(ctx);\n+    if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }\n+    if (BN_cmp(x, field) >= 0) { ret=0; goto err; }\n+    if ((R = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+    if (!EC_POINT_set_compressed_coordinates_GFp(group, R, x, recid % 2, ctx)) { ret=0; goto err; }\n+    if (check)\n+    {\n+        if ((O = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+        if (!EC_POINT_mul(group, O, NULL, R, order, ctx)) { ret=-2; goto err; }\n+        if (!EC_POINT_is_at_infinity(group, O)) { ret = 0; goto err; }\n+    }\n+    if ((Q = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+    n = EC_GROUP_get_degree(group);\n+    e = BN_CTX_get(ctx);\n+    if (!BN_bin2bn(msg, msglen, e)) { ret=-1; goto err; }\n+    if (8*msglen > n) BN_rshift(e, e, 8-(n & 7));\n+    zero = BN_CTX_get(ctx);\n+    if (!BN_zero(zero)) { ret=-1; goto err; }\n+    if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }\n+    rr = BN_CTX_get(ctx);\n+    if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }\n+    sor = BN_CTX_get(ctx);\n+    if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }\n+    eor = BN_CTX_get(ctx);\n+    if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }\n+    if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }\n+    if (!EC_KEY_set_public_key(eckey, Q)) { ret=-2; goto err; }\n+\n+    ret = 1;\n+\n+err:\n+    if (ctx) {\n+        BN_CTX_end(ctx);\n+        BN_CTX_free(ctx);\n+    }\n+    if (R != NULL) EC_POINT_free(R);\n+    if (O != NULL) EC_POINT_free(O);\n+    if (Q != NULL) EC_POINT_free(Q);\n+    return ret;\n+}\n \n class key_error : public std::runtime_error\n {\n@@ -221,6 +291,66 @@ class CKey\n         return true;\n     }\n \n+    // create a compact signature (65 bytes), which allows reconstructing the used public key\n+    bool SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)\n+    {\n+        bool fOk = false;\n+        ECDSA_SIG *sig = ECDSA_do_sign((unsigned char*)&hash, sizeof(hash), pkey);\n+        if (sig==NULL)\n+            return false;\n+        vchSig.clear();\n+        vchSig.resize(65,0);\n+        int nBitsR = BN_num_bits(sig->r);\n+        int nBitsS = BN_num_bits(sig->s);\n+        if (nBitsR <= 256 && nBitsS <= 256)\n+        {\n+            int nRecId = -1;\n+            for (int i=0; i<4; i++)\n+            {\n+                CKey keyRec;\n+                keyRec.fSet = true;\n+                if (ECDSA_SIG_recover_key_GFp(keyRec.pkey, sig, (unsigned char*)&hash, sizeof(hash), i, 1) == 1)\n+                    if (keyRec.GetPubKey() == this->GetPubKey())\n+                    {\n+                        nRecId = i;\n+                        break;\n+                    }\n+            }\n+\n+            if (nRecId == -1)\n+                throw key_error(\"CKEy::SignCompact() : unable to construct recoverable key\");\n+\n+            vchSig[0] = nRecId+27;\n+            BN_bn2bin(sig->r,&vchSig[33-(nBitsR+7)/8]);\n+            BN_bn2bin(sig->s,&vchSig[65-(nBitsS+7)/8]);\n+            fOk = true;\n+        }\n+        ECDSA_SIG_free(sig);\n+        return fOk;\n+    }\n+\n+    // reconstruct public key from a compact signature\n+    bool SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)\n+    {\n+        if (vchSig.size() != 65)\n+            return false;\n+        if (vchSig[0]<27 || vchSig[0]>=31)\n+            return false;\n+        ECDSA_SIG *sig = ECDSA_SIG_new();\n+        BN_bin2bn(&vchSig[1],32,sig->r);\n+        BN_bin2bn(&vchSig[33],32,sig->s);\n+\n+        EC_KEY_free(pkey);\n+        pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n+        if (ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), vchSig[0] - 27, 0) == 1)\n+        {\n+            fSet = true;\n+            ECDSA_SIG_free(sig);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     bool Verify(uint256 hash, const std::vector<unsigned char>& vchSig)\n     {\n         // -1 = error, 0 = bad sig, 1 = good\n@@ -229,6 +359,16 @@ class CKey\n         return true;\n     }\n \n+    bool VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)\n+    {\n+        CKey key;\n+        if (!key.SetCompactSignature(hash, vchSig))\n+            return false;\n+        if (GetPubKey() != key.GetPubKey())\n+            return false;\n+        return true;\n+    }\n+\n     CBitcoinAddress GetAddress() const\n     {\n         return CBitcoinAddress(GetPubKey());"
      }
    ]
  },
  {
    "sha": "3a570dc80a7391b7f3943cb83849055318e0217a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTU3MGRjODBhNzM5MWI3ZjM5NDNjYjgzODQ5MDU1MzE4ZTAyMTdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-21T15:03:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-09-27T17:48:22Z"
      },
      "message": "Use key recovery for message signatures\n\nInstead of encoding the public key inside the signature string, use\nkey recovery to do verification. This allows 88-character base64-encoded\nsignature strings instead of 188-character ones.",
      "tree": {
        "sha": "eaeff0cbd1ca56a5c0be12eabb776a76379eea75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaeff0cbd1ca56a5c0be12eabb776a76379eea75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a570dc80a7391b7f3943cb83849055318e0217a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a570dc80a7391b7f3943cb83849055318e0217a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a570dc80a7391b7f3943cb83849055318e0217a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a570dc80a7391b7f3943cb83849055318e0217a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01cc526318ff9f0ee6fb675ffe3be4ca7f3cda7a"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 9,
      "deletions": 25
    },
    "files": [
      {
        "sha": "8468e56105ac0a70ee714b75a35216b91542217c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 25,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a570dc80a7391b7f3943cb83849055318e0217a/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a570dc80a7391b7f3943cb83849055318e0217a/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=3a570dc80a7391b7f3943cb83849055318e0217a",
        "patch": "@@ -554,15 +554,10 @@ Value signmessage(const Array& params, bool fHelp)\n     ss << strMessage;\n \n     vector<unsigned char> vchSig;\n-    if (!key.Sign(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n         throw JSONRPCError(-5, \"Sign failed\");\n \n-    CDataStream sres(SER_NETWORK);\n-    sres << key.GetPubKey(); // public key\n-    sres << vchSig; // signature;\n-\n-    vector<unsigned char> vchRet(sres.begin(), sres.end());\n-    return EncodeBase64(&vchRet[0], vchRet.size());\n+    return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n Value verifymessage(const Array& params, bool fHelp)\n@@ -581,31 +576,20 @@ Value verifymessage(const Array& params, bool fHelp)\n         throw JSONRPCError(-3, \"Invalid address\");\n \n     bool fInvalid = false;\n-    vector<unsigned char> vchResult = DecodeBase64(strSign.c_str(), &fInvalid);\n+    vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n \n     if (fInvalid)\n         throw JSONRPCError(-5, \"Malformed base64 encoding\");\n \n-    CDataStream sres(vchResult);\n-\n-    std::vector<unsigned char> vchPubKey;\n-    sres >> vchPubKey;\n-    std::vector<unsigned char> vchSig;\n-    sres >> vchSig;\n+    CDataStream ss(SER_GETHASH);\n+    ss << strMessageMagic;\n+    ss << strMessage;\n \n     CKey key;\n-    if (!key.SetPubKey(vchPubKey))\n-        throw JSONRPCError(-5, \"Invalid public key in signature\");\n-\n-    if (key.GetAddress() == addr)\n-    {\n-        CDataStream ss(SER_GETHASH);\n-        ss << strMessageMagic;\n-        ss << strMessage;\n-        return key.Verify(Hash(ss.begin(), ss.end()), vchSig);\n-    }\n-    else\n+    if (!key.SetCompactSignature(Hash(ss.begin(), ss.end()), vchSig))\n         return false;\n+\n+    return (key.GetAddress() == addr);\n }\n \n "
      }
    ]
  }
]