[
  {
    "sha": "3267946d8d18afb8f050cc2760b0732d5559b3d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjY3OTQ2ZDhkMThhZmI4ZjA1MGNjMjc2MGIwNzMyZDU1NTliM2Q0",
    "commit": {
      "author": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-06T11:43:57Z"
      },
      "committer": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-06T11:43:57Z"
      },
      "message": "Alter make to $MAKE, to use the correct make line.",
      "tree": {
        "sha": "3781cd1767782a2bc68a03a1c675a46c19fc62dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3781cd1767782a2bc68a03a1c675a46c19fc62dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3267946d8d18afb8f050cc2760b0732d5559b3d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3267946d8d18afb8f050cc2760b0732d5559b3d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3267946d8d18afb8f050cc2760b0732d5559b3d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3267946d8d18afb8f050cc2760b0732d5559b3d4/comments",
    "author": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86406daeca0390b13457cc4f8d5f24fa5bf54557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86406daeca0390b13457cc4f8d5f24fa5bf54557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86406daeca0390b13457cc4f8d5f24fa5bf54557"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9e17e8ace228f7080cbf49ae363335b7476bdb58",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3267946d8d18afb8f050cc2760b0732d5559b3d4/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3267946d8d18afb8f050cc2760b0732d5559b3d4/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=3267946d8d18afb8f050cc2760b0732d5559b3d4",
        "patch": "@@ -144,7 +144,7 @@ LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && make libleveldb.a libmemenv.a && cd ..\n+\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n obj/leveldb.o: leveldb/libleveldb.a\n \n # auto-generated dependencies:"
      }
    ]
  },
  {
    "sha": "2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmYxZDUwMTI3YmYxZTRlOGZhMzRjM2UwOWI3N2MxZjMxZGQwMmY2",
    "commit": {
      "author": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-09T08:19:58Z"
      },
      "committer": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-09T08:19:58Z"
      },
      "message": "Merge remote-tracking branch 'bitcoin/bitcoin'",
      "tree": {
        "sha": "5acb33b9aeefeac2276cb6d96ed87564fefa2766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5acb33b9aeefeac2276cb6d96ed87564fefa2766"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/comments",
    "author": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3267946d8d18afb8f050cc2760b0732d5559b3d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3267946d8d18afb8f050cc2760b0732d5559b3d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3267946d8d18afb8f050cc2760b0732d5559b3d4"
      },
      {
        "sha": "16d9d61f99c2e081585e6634d25da3523804eabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16d9d61f99c2e081585e6634d25da3523804eabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16d9d61f99c2e081585e6634d25da3523804eabf"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 27,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8151fb2a86b562f80da7f0ad8c5c21d6472f402a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -236,7 +236,6 @@ std::string HelpMessage()\n         \"  -gen=0                 \" + _(\"Don't generate coins\") + \"\\n\" +\n         \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +\n         \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n-        \"  -dblogsize=<n>         \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +\n         \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\" +\n         \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +\n         \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\" +\n@@ -651,11 +650,23 @@ bool AppInit2()\n         return InitError(msg);\n     }\n \n+    // cache size calculations\n+    size_t nTotalCache = GetArg(\"-dbcache\", 25) << 20;\n+    if (nTotalCache < (1 << 22))\n+        nTotalCache = (1 << 22); // total cache cannot be less than 4 MiB\n+    size_t nBlockTreeDBCache = nTotalCache / 8;\n+    if (nBlockTreeDBCache > (1 << 21))\n+        nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n+    nTotalCache -= nBlockTreeDBCache;\n+    size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n+    nTotalCache -= nCoinDBCache;\n+    nCoinCacheSize = nTotalCache / 300; // coins in memory require around 300 bytes\n+\n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n-    pblocktree = new CBlockTreeDB();\n-    pcoinsdbview = new CCoinsViewDB();\n+    pblocktree = new CBlockTreeDB(nBlockTreeDBCache);\n+    pcoinsdbview = new CCoinsViewDB(nCoinDBCache);\n     pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n \n     if (!LoadBlockIndex())"
      },
      {
        "sha": "58b75e5295db4a498eddd8dce653a8bb2446a3ed",
        "filename": "src/leveldb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/leveldb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/leveldb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.cpp?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -12,22 +12,22 @@\n \n #include <boost/filesystem.hpp>\n \n-static leveldb::Options GetOptions() {\n+static leveldb::Options GetOptions(size_t nCacheSize) {\n     leveldb::Options options;\n-    int nCacheSizeMB = GetArg(\"-dbcache\", 25);\n-    options.block_cache = leveldb::NewLRUCache(nCacheSizeMB * 1048576);\n+    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n+    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n     options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n     options.compression = leveldb::kNoCompression;\n     return options;\n }\n \n-CLevelDB::CLevelDB(const boost::filesystem::path &path, bool fMemory) {\n+CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory) {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n     iteroptions.fill_cache = false;\n     syncoptions.sync = true;\n-    options = GetOptions();\n+    options = GetOptions(nCacheSize);\n     options.create_if_missing = true;\n     if (fMemory) {\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());"
      },
      {
        "sha": "e5b2e1ef0b01f33711f7fad4d30931d596473e3c",
        "filename": "src/leveldb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/leveldb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/leveldb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.h?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -69,7 +69,7 @@ class CLevelDB\n     leveldb::DB *pdb;\n \n public:\n-    CLevelDB(const boost::filesystem::path &path, bool fMemory = false);\n+    CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false);\n     ~CLevelDB();\n \n     template<typename K, typename V> bool Read(const K& key, V& value) {"
      },
      {
        "sha": "a08e393caaa56138afeb7ecd204913b98d907bf7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -41,6 +41,7 @@ CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n int64 nTimeBestReceived = 0;\n bool fImporting = false;\n+unsigned int nCoinCacheSize = 5000;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n \n@@ -1735,7 +1736,7 @@ bool SetBestChain(CBlockIndex* pindexNew)\n \n     // Make sure it's successfully written to disk before changing memory structure\n     bool fIsInitialDownload = IsInitialBlockDownload();\n-    if (!fIsInitialDownload || view.GetCacheSize()>5000) {\n+    if (!fIsInitialDownload || view.GetCacheSize() > nCoinCacheSize) {\n         FlushBlockFile();\n         pblocktree->Sync();\n         if (!view.Flush())"
      },
      {
        "sha": "899cabd85a67d67a7afcdbaf7ccddda5a0288c77",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -88,6 +88,7 @@ extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n extern bool fImporting;\n+extern unsigned int nCoinCacheSize;\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "d9972d5b06f8a74e3cfb2dacccb2862067b360df",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -19,7 +19,7 @@ void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n     batch.Write('B', hash);\n }\n \n-CCoinsViewDB::CCoinsViewDB(bool fMemory) : db(GetDataDir() / \"coins\", fMemory) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory) : db(GetDataDir() / \"coins\", nCacheSize, fMemory) {\n }\n \n bool CCoinsViewDB::GetCoins(uint256 txid, CCoins &coins) { \n@@ -64,7 +64,7 @@ bool CCoinsViewDB::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockI\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(bool fMemory) : CLevelDB(GetDataDir() / \"blktree\", fMemory) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory) : CLevelDB(GetDataDir() / \"blktree\", nCacheSize, fMemory) {\n }\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)"
      },
      {
        "sha": "e13925c964da4dc07ecc546acad2fab4a99572e3",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "patch": "@@ -14,7 +14,7 @@ class CCoinsViewDB : public CCoinsView\n protected:\n     CLevelDB db;\n public:\n-    CCoinsViewDB(bool fMemory = false);\n+    CCoinsViewDB(size_t nCacheSize, bool fMemory = false);\n \n     bool GetCoins(uint256 txid, CCoins &coins);\n     bool SetCoins(uint256 txid, const CCoins &coins);\n@@ -29,7 +29,7 @@ class CCoinsViewDB : public CCoinsView\n class CBlockTreeDB : public CLevelDB\n {\n public:\n-    CBlockTreeDB(bool fMemory = false);\n+    CBlockTreeDB(size_t nCacheSize, bool fMemory = false);\n private:\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);"
      }
    ]
  },
  {
    "sha": "0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTdlZjlhYTA3N2U0ZTQ5ZTZkZGQyYzI3Y2UyNDljZTY0YTI2NWYw",
    "commit": {
      "author": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-10T02:36:36Z"
      },
      "committer": {
        "name": "Robert Backhaus",
        "email": "robbak@robbak.com",
        "date": "2012-11-10T02:36:36Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "45a8eb98fb91ce309c45b25d625c51ad0e97b398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45a8eb98fb91ce309c45b25d625c51ad0e97b398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/comments",
    "author": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robbak",
      "id": 1581858,
      "node_id": "MDQ6VXNlcjE1ODE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1581858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbak",
      "html_url": "https://github.com/robbak",
      "followers_url": "https://api.github.com/users/robbak/followers",
      "following_url": "https://api.github.com/users/robbak/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbak/subscriptions",
      "organizations_url": "https://api.github.com/users/robbak/orgs",
      "repos_url": "https://api.github.com/users/robbak/repos",
      "events_url": "https://api.github.com/users/robbak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf1d50127bf1e4e8fa34c3e09b77c1f31dd02f6"
      },
      {
        "sha": "20db1c099ecaa3793f5f3ad997326ffbdd7027cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20db1c099ecaa3793f5f3ad997326ffbdd7027cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20db1c099ecaa3793f5f3ad997326ffbdd7027cc"
      }
    ],
    "stats": {
      "total": 716,
      "additions": 487,
      "deletions": 229
    },
    "files": [
      {
        "sha": "37f785932473e1f4f106929c07184ce0fd97d965",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 17,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -179,14 +179,12 @@ Value help(const Array& params, bool fHelp)\n \n Value stop(const Array& params, bool fHelp)\n {\n+    // Accept the deprecated and ignored 'detach\u00b4 boolean argument\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"stop <detach>\\n\"\n-            \"<detach> is true or false to detach the database or not for this stop only\\n\"\n-            \"Stop Bitcoin server (and possibly override the detachdb config value).\");\n+            \"stop\\n\"\n+            \"Stop Bitcoin server.\");\n     // Shutdown will take long enough that the response should get back\n-    if (params.size() > 0)\n-        bitdb.SetDetach(params[0].get_bool());\n     StartShutdown();\n     return \"Bitcoin server stopping\";\n }\n@@ -362,6 +360,41 @@ static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n         strMsg.c_str());\n }\n \n+bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n+                         string& http_method, string& http_uri)\n+{\n+    string str;\n+    getline(stream, str);\n+\n+    // HTTP request line is space-delimited\n+    vector<string> vWords;\n+    boost::split(vWords, str, boost::is_any_of(\" \"));\n+    if (vWords.size() < 2)\n+        return false;\n+\n+    // HTTP methods permitted: GET, POST\n+    http_method = vWords[0];\n+    if (http_method != \"GET\" && http_method != \"POST\")\n+        return false;\n+\n+    // HTTP URI must be an absolute path, relative to current host\n+    http_uri = vWords[1];\n+    if (http_uri.size() == 0 || http_uri[0] != '/')\n+        return false;\n+\n+    // parse proto, if present\n+    string strProto = \"\";\n+    if (vWords.size() > 2)\n+        strProto = vWords[2];\n+\n+    proto = 0;\n+    const char *ver = strstr(strProto.c_str(), \"HTTP/1.\");\n+    if (ver != NULL)\n+        proto = atoi(ver+7);\n+\n+    return true;\n+}\n+\n int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n {\n     string str;\n@@ -377,7 +410,7 @@ int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n     return atoi(vWords[1].c_str());\n }\n \n-int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n+int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n {\n     int nLen = 0;\n     loop\n@@ -402,17 +435,15 @@ int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHea\n     return nLen;\n }\n \n-int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)\n+int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n+                    string>& mapHeadersRet, string& strMessageRet,\n+                    int nProto)\n {\n     mapHeadersRet.clear();\n     strMessageRet = \"\";\n \n-    // Read status\n-    int nProto = 0;\n-    int nStatus = ReadHTTPStatus(stream, nProto);\n-\n     // Read header\n-    int nLen = ReadHTTPHeader(stream, mapHeadersRet);\n+    int nLen = ReadHTTPHeaders(stream, mapHeadersRet);\n     if (nLen < 0 || nLen > (int)MAX_SIZE)\n         return HTTP_INTERNAL_SERVER_ERROR;\n \n@@ -434,7 +465,7 @@ int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRe\n             mapHeadersRet[\"connection\"] = \"close\";\n     }\n \n-    return nStatus;\n+    return HTTP_OK;\n }\n \n bool HTTPAuthorized(map<string, string>& mapHeaders)\n@@ -941,10 +972,17 @@ void ThreadRPCServer3(void* parg)\n             }\n             return;\n         }\n+\n+        int nProto = 0;\n         map<string, string> mapHeaders;\n-        string strRequest;\n+        string strRequest, strMethod, strURI;\n+\n+        // Read HTTP request line\n+        if (!ReadHTTPRequestLine(conn->stream(), nProto, strMethod, strURI))\n+            break;\n \n-        ReadHTTP(conn->stream(), mapHeaders, strRequest);\n+        // Read HTTP message headers and body\n+        ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto);\n \n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n@@ -1076,10 +1114,15 @@ Object CallRPC(const string& strMethod, const Array& params)\n     string strPost = HTTPPost(strRequest, mapRequestHeaders);\n     stream << strPost << std::flush;\n \n-    // Receive reply\n+    // Receive HTTP reply status\n+    int nProto = 0;\n+    int nStatus = ReadHTTPStatus(stream, nProto);\n+\n+    // Receive HTTP reply message headers and body\n     map<string, string> mapHeaders;\n     string strReply;\n-    int nStatus = ReadHTTP(stream, mapHeaders, strReply);\n+    ReadHTTPMessage(stream, mapHeaders, strReply, nProto);\n+\n     if (nStatus == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n     else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)"
      },
      {
        "sha": "fb405fc2772e4321cba44acf8b40b8dd5f6c321b",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -271,14 +271,6 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n     }\n }\n \n-static bool IsChainFile(std::string strFile)\n-{\n-    if (strFile == \"coins.dat\" || strFile == \"blktree.dat\")\n-        return true;\n-\n-    return false;\n-}\n-\n void CDB::Flush()\n {\n     if (activeTxn)\n@@ -288,10 +280,6 @@ void CDB::Flush()\n     unsigned int nMinutes = 0;\n     if (fReadOnly)\n         nMinutes = 1;\n-    if (IsChainFile(strFile))\n-        nMinutes = 2;\n-    if (IsChainFile(strFile) && IsInitialBlockDownload())\n-        nMinutes = 5;\n \n     bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100)*1024 : 0, nMinutes, 0);\n }\n@@ -453,11 +441,9 @@ void CDBEnv::Flush(bool fShutdown)\n                 CloseDb(strFile);\n                 printf(\"%s checkpoint\\n\", strFile.c_str());\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                if (!IsChainFile(strFile) || fDetachDB) {\n-                    printf(\"%s detach\\n\", strFile.c_str());\n-                    if (!fMockDb)\n-                        dbenv.lsn_reset(strFile.c_str(), 0);\n-                }\n+                printf(\"%s detach\\n\", strFile.c_str());\n+                if (!fMockDb)\n+                    dbenv.lsn_reset(strFile.c_str(), 0);\n                 printf(\"%s closed\\n\", strFile.c_str());\n                 mapFileUseCount.erase(mi++);\n             }"
      },
      {
        "sha": "9cfbf4fd6f9d21ba73be20e57144a1225cde7146",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -31,7 +31,6 @@ bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n class CDBEnv\n {\n private:\n-    bool fDetachDB;\n     bool fDbEnvInit;\n     bool fMockDb;\n     boost::filesystem::path pathEnv;\n@@ -71,8 +70,6 @@ class CDBEnv\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(std::string strFile);\n-    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }\n-    bool GetDetach() { return fDetachDB; }\n \n     void CloseDb(const std::string& strFile);\n     bool RemoveDb(const std::string& strFile);"
      },
      {
        "sha": "f6df4055fc3273331bced9b74f4ec05d8c02a7a2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 23,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -26,6 +26,13 @@ using namespace boost;\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n+// Used to pass flags to the Bind() function\n+enum BindFlags {\n+    BF_NONE = 0,\n+    BF_EXPLICIT = 1,\n+    BF_REPORT_ERROR = 2\n+};\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -213,12 +220,12 @@ bool static InitWarning(const std::string &str)\n }\n \n \n-bool static Bind(const CService &addr, bool fError = true) {\n-    if (IsLimited(addr))\n+bool static Bind(const CService &addr, int flags) {\n+    if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n     std::string strError;\n     if (!BindListenPort(addr, strError)) {\n-        if (fError)\n+        if (flags & BF_REPORT_ERROR)\n             return InitError(strError);\n         return false;\n     }\n@@ -251,7 +258,7 @@ std::string HelpMessage()\n         \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\" +\n         \"  -irc                   \" + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n         \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\" +\n-        \"  -bind=<addr>           \" + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +\n+        \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\" +\n         \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\" +\n         \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n         \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\" +\n@@ -264,7 +271,6 @@ std::string HelpMessage()\n         \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\" +\n #endif\n #endif\n-        \"  -detachdb              \" + _(\"Detach block and address databases. Increases shutdown time (default: 0)\") + \"\\n\" +\n         \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\" +\n #ifdef QT_GUI\n         \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\" +\n@@ -294,6 +300,7 @@ std::string HelpMessage()\n         \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n         \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000?.dat file\") + \"\\n\" +\n+        \"  -reindex               \" + _(\"Rebuild blockchain index from current blk000??.dat files\") + \"\\n\" +\n \n         \"\\n\" + _(\"Block creation options:\") + \"\\n\" +\n         \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\" +\n@@ -309,6 +316,81 @@ std::string HelpMessage()\n     return strUsage;\n }\n \n+struct CImportingNow\n+{\n+    CImportingNow() {\n+        assert(fImporting == false);\n+        fImporting = true;\n+    }\n+\n+    ~CImportingNow() {\n+        assert(fImporting == true);\n+        fImporting = false;\n+    }\n+};\n+\n+struct CImportData {\n+    std::vector<boost::filesystem::path> vFiles;\n+};\n+\n+void ThreadImport(void *data) {\n+    CImportData *import = reinterpret_cast<CImportData*>(data);\n+\n+    RenameThread(\"bitcoin-loadblk\");\n+\n+    vnThreadsRunning[THREAD_IMPORT]++;\n+\n+    // -reindex\n+    if (fReindex) {\n+        CImportingNow imp;\n+        int nFile = 0;\n+        while (!fShutdown) {\n+            CDiskBlockPos pos;\n+            pos.nFile = nFile;\n+            pos.nPos = 0;\n+            FILE *file = OpenBlockFile(pos, true);\n+            if (!file)\n+                break;\n+            printf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n+            LoadExternalBlockFile(file, &pos);\n+            nFile++;\n+        }\n+        if (!fShutdown) {\n+            pblocktree->WriteReindexing(false);\n+            fReindex = false;\n+            printf(\"Reindexing finished\\n\");\n+        }\n+    }\n+\n+    // hardcoded $DATADIR/bootstrap.dat\n+    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (filesystem::exists(pathBootstrap) && !fShutdown) {\n+        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n+        if (file) {\n+            CImportingNow imp;\n+            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            printf(\"Importing bootstrap.dat...\\n\");\n+            LoadExternalBlockFile(file);\n+            RenameOver(pathBootstrap, pathBootstrapOld);\n+        }\n+    }\n+\n+    // -loadblock=\n+    BOOST_FOREACH(boost::filesystem::path &path, import->vFiles) {\n+        if (fShutdown)\n+            break;\n+        FILE *file = fopen(path.string().c_str(), \"rb\");\n+        if (file) {\n+            CImportingNow imp;\n+            printf(\"Importing %s...\\n\", path.string().c_str());\n+            LoadExternalBlockFile(file);\n+        }\n+    }\n+\n+    delete import;\n+\n+    vnThreadsRunning[THREAD_IMPORT]--;\n+}\n \n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n@@ -407,8 +489,6 @@ bool AppInit2()\n     else\n         fDebugNet = GetBoolArg(\"-debugnet\");\n \n-    bitdb.SetDetach(GetBoolArg(\"-detachdb\", false));\n-\n #if !defined(WIN32) && !defined(QT_GUI)\n     fDaemon = GetBoolArg(\"-daemon\");\n #else\n@@ -603,32 +683,28 @@ bool AppInit2()\n #endif\n \n     bool fBound = false;\n-    if (!fNoListen)\n-    {\n-        std::string strError;\n+    if (!fNoListen) {\n         if (mapArgs.count(\"-bind\")) {\n             BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind.c_str()));\n-                fBound |= Bind(addrBind);\n+                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n-        } else {\n+        }\n+        else {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n #ifdef USE_IPV6\n-            if (!IsLimited(NET_IPV6))\n-                fBound |= Bind(CService(in6addr_any, GetListenPort()), false);\n+            fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n #endif\n-            if (!IsLimited(NET_IPV4))\n-                fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound);\n+            fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n         }\n         if (!fBound)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n     }\n \n-    if (mapArgs.count(\"-externalip\"))\n-    {\n+    if (mapArgs.count(\"-externalip\")) {\n         BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"]) {\n             CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n             if (!addrLocal.IsValid())\n@@ -642,6 +718,8 @@ bool AppInit2()\n \n     // ********************************************************* Step 7: load block chain\n \n+    fReindex = GetBoolArg(\"-reindex\");\n+\n     if (!bitdb.Open(GetDataDir()))\n     {\n         string msg = strprintf(_(\"Error initializing database environment %s!\"\n@@ -665,10 +743,13 @@ bool AppInit2()\n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n-    pblocktree = new CBlockTreeDB(nBlockTreeDBCache);\n-    pcoinsdbview = new CCoinsViewDB(nCoinDBCache);\n+    pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n+    pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n     pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n \n+    if (fReindex)\n+        pblocktree->WriteReindexing(true);\n+\n     if (!LoadBlockIndex())\n         return InitError(_(\"Error loading blkindex.dat\"));\n \n@@ -801,13 +882,13 @@ bool AppInit2()\n     if (!ConnectBestBlock())\n         strErrors << \"Failed to connect best block\";\n \n-    std::vector<boost::filesystem::path> *vPath = new std::vector<boost::filesystem::path>();\n+    CImportData *pimport = new CImportData();\n     if (mapArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n-            vPath->push_back(strFile);\n+            pimport->vFiles.push_back(strFile);\n     }\n-    NewThread(ThreadImport, vPath);\n+    NewThread(ThreadImport, pimport);\n \n     // ********************************************************* Step 10: load peers\n "
      },
      {
        "sha": "9e2f32a171c3b43d622475ea69844ad916b53a76",
        "filename": "src/leveldb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/leveldb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/leveldb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -21,7 +21,7 @@ static leveldb::Options GetOptions(size_t nCacheSize) {\n     return options;\n }\n \n-CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory) {\n+CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory, bool fWipe) {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n@@ -33,6 +33,10 @@ CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());\n         options.env = penv;\n     } else {\n+        if (fWipe) {\n+            printf(\"Wiping LevelDB in %s\\n\", path.string().c_str());\n+            leveldb::DestroyDB(path.string(), options);\n+        }\n         boost::filesystem::create_directory(path);\n         printf(\"Opening LevelDB in %s\\n\", path.string().c_str());\n     }"
      },
      {
        "sha": "0b834320720ab0f245b5498dfcca04ba628df43e",
        "filename": "src/leveldb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/leveldb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/leveldb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -69,7 +69,7 @@ class CLevelDB\n     leveldb::DB *pdb;\n \n public:\n-    CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false);\n+    CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n     ~CLevelDB();\n \n     template<typename K, typename V> bool Read(const K& key, V& value) {"
      },
      {
        "sha": "0940260f9e1611f11ce6f6274c7d4f811cee2b28",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 126,
        "changes": 239,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -41,6 +41,7 @@ CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n int64 nTimeBestReceived = 0;\n bool fImporting = false;\n+bool fReindex = false;\n unsigned int nCoinCacheSize = 5000;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n@@ -1145,7 +1146,7 @@ int GetNumBlocksOfPeers()\n \n bool IsInitialBlockDownload()\n {\n-    if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n+    if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate() || fReindex || fImporting)\n         return true;\n     static int64 nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n@@ -1862,35 +1863,45 @@ bool CBlock::AddToBlockIndex(const CDiskBlockPos &pos)\n }\n \n \n-bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64 nTime)\n+bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64 nTime, bool fKnown = false)\n {\n     bool fUpdatedLast = false;\n \n     LOCK(cs_LastBlockFile);\n \n-    while (infoLastBlockFile.nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n-        printf(\"Leaving block file %i: %s\\n\", nLastBlockFile, infoLastBlockFile.ToString().c_str());\n-        FlushBlockFile();\n-        nLastBlockFile++;\n-        infoLastBlockFile.SetNull();\n-        pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile); // check whether data for the new file somehow already exist; can fail just fine\n-        fUpdatedLast = true;\n+    if (fKnown) {\n+        if (nLastBlockFile != pos.nFile) {\n+            nLastBlockFile = pos.nFile;\n+            infoLastBlockFile.SetNull();\n+            pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile);\n+        }\n+    } else {\n+        while (infoLastBlockFile.nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            printf(\"Leaving block file %i: %s\\n\", nLastBlockFile, infoLastBlockFile.ToString().c_str());\n+            FlushBlockFile();\n+            nLastBlockFile++;\n+            infoLastBlockFile.SetNull();\n+            pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile); // check whether data for the new file somehow already exist; can fail just fine\n+            fUpdatedLast = true;\n+        }\n+        pos.nFile = nLastBlockFile;\n+        pos.nPos = infoLastBlockFile.nSize;\n     }\n \n-    pos.nFile = nLastBlockFile;\n-    pos.nPos = infoLastBlockFile.nSize;\n     infoLastBlockFile.nSize += nAddSize;\n     infoLastBlockFile.AddBlock(nHeight, nTime);\n \n-    unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-    unsigned int nNewChunks = (infoLastBlockFile.nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-    if (nNewChunks > nOldChunks) {\n-        FILE *file = OpenBlockFile(pos);\n-        if (file) {\n-            printf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n-            AllocateFileRange(file, pos.nPos, nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos);\n+    if (!fKnown) {\n+        unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n+        unsigned int nNewChunks = (infoLastBlockFile.nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n+        if (nNewChunks > nOldChunks) {\n+            FILE *file = OpenBlockFile(pos);\n+            if (file) {\n+                printf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n+                AllocateFileRange(file, pos.nPos, nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos);\n+            }\n+            fclose(file);\n         }\n-        fclose(file);\n     }\n \n     if (!pblocktree->WriteBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n@@ -1996,19 +2007,23 @@ bool CBlock::CheckBlock(bool fCheckPOW, bool fCheckMerkleRoot) const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlock::AcceptBlock(CDiskBlockPos *dbp)\n {\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n+    CBlockIndex* pindexPrev = NULL;\n+    int nHeight = 0;\n+    if (hash != hashGenesisBlock) {\n+\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n         return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n-    CBlockIndex* pindexPrev = (*mi).second;\n-    int nHeight = pindexPrev->nHeight+1;\n+    pindexPrev = (*mi).second;\n+    nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n     if (nBits != GetNextWorkRequired(pindexPrev, this))\n@@ -2048,16 +2063,22 @@ bool CBlock::AcceptBlock()\n                 return DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n         }\n     }\n+    }\n \n     // Write block to history file\n     unsigned int nBlockSize = ::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION);\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n-        return error(\"AcceptBlock() : out of disk space\");\n     CDiskBlockPos blockPos;\n-    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, nTime))\n+    if (dbp == NULL) {\n+        if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+            return error(\"AcceptBlock() : out of disk space\");\n+    } else {\n+        blockPos = *dbp;\n+    }\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, nTime, dbp != NULL))\n         return error(\"AcceptBlock() : FindBlockPos failed\");\n-    if (!WriteToDisk(blockPos))\n-        return error(\"AcceptBlock() : WriteToDisk failed\");\n+    if (dbp == NULL)\n+        if (!WriteToDisk(blockPos))\n+            return error(\"AcceptBlock() : WriteToDisk failed\");\n     if (!AddToBlockIndex(blockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n@@ -2086,7 +2107,7 @@ bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, uns\n     return (nFound >= nRequired);\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n@@ -2124,7 +2145,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n \n \n     // If we don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n         printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n \n@@ -2141,7 +2162,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n+    if (!pblock->AcceptBlock(dbp))\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n \n     // Recursively process any orphan blocks that depended on this one\n@@ -2304,6 +2325,11 @@ bool static LoadBlockIndexDB()\n     // Load bnBestInvalidWork, OK if it doesn't exist\n     pblocktree->ReadBestInvalidWork(bnBestInvalidWork);\n \n+    // Check whether we need to continue reindexing\n+    bool fReindexing = false;\n+    pblocktree->ReadReindexing(fReindexing);\n+    fReindex |= fReindexing;\n+\n     // Verify blocks in the best chain\n     int nCheckLevel = GetArg(\"-checklevel\", 1);\n     int nCheckDepth = GetArg( \"-checkblocks\", 2500);\n@@ -2337,7 +2363,7 @@ bool static LoadBlockIndexDB()\n     return true;\n }\n \n-bool LoadBlockIndex(bool fAllowNew)\n+bool LoadBlockIndex()\n {\n     if (fTestNet)\n     {\n@@ -2348,6 +2374,9 @@ bool LoadBlockIndex(bool fAllowNew)\n         hashGenesisBlock = uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\");\n     }\n \n+    if (fReindex)\n+        return true;\n+\n     //\n     // Load block index from databases\n     //\n@@ -2359,9 +2388,6 @@ bool LoadBlockIndex(bool fAllowNew)\n     //\n     if (mapBlockIndex.empty())\n     {\n-        if (!fAllowNew)\n-            return false;\n-\n         // Genesis Block:\n         // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n         //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n@@ -2487,110 +2513,71 @@ void PrintBlockTree()\n     }\n }\n \n-bool LoadExternalBlockFile(FILE* fileIn)\n+bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n {\n     int64 nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n     {\n-        try {\n-            CAutoFile blkdat(fileIn, SER_DISK, CLIENT_VERSION);\n-            unsigned int nPos = 0;\n-            while (nPos != (unsigned int)-1 && blkdat.good() && !fRequestShutdown)\n-            {\n-                unsigned char pchData[65536];\n-                do {\n-                    fseek(blkdat, nPos, SEEK_SET);\n-                    int nRead = fread(pchData, 1, sizeof(pchData), blkdat);\n-                    if (nRead <= 8)\n-                    {\n-                        nPos = (unsigned int)-1;\n-                        break;\n-                    }\n-                    void* nFind = memchr(pchData, pchMessageStart[0], nRead+1-sizeof(pchMessageStart));\n-                    if (nFind)\n-                    {\n-                        if (memcmp(nFind, pchMessageStart, sizeof(pchMessageStart))==0)\n-                        {\n-                            nPos += ((unsigned char*)nFind - pchData) + sizeof(pchMessageStart);\n-                            break;\n-                        }\n-                        nPos += ((unsigned char*)nFind - pchData) + 1;\n-                    }\n-                    else\n-                        nPos += sizeof(pchData) - sizeof(pchMessageStart) + 1;\n-                } while(!fRequestShutdown);\n-                if (nPos == (unsigned int)-1)\n-                    break;\n-                fseek(blkdat, nPos, SEEK_SET);\n-                unsigned int nSize;\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        uint64 nStartByte = 0;\n+        if (dbp) {\n+            // (try to) skip already indexed part\n+            CBlockFileInfo info;\n+            if (pblocktree->ReadBlockFileInfo(dbp->nFile, info)) {\n+                nStartByte = info.nSize;\n+                blkdat.Seek(info.nSize);\n+            }\n+        }\n+        uint64 nRewind = blkdat.GetPos();\n+        while (blkdat.good() && !blkdat.eof() && !fShutdown) {\n+            blkdat.SetPos(nRewind);\n+            nRewind++; // start one byte further next time, in case of failure\n+            blkdat.SetLimit(); // remove former limit\n+            unsigned int nSize = 0;\n+            try {\n+                // locate a header\n+                unsigned char buf[4];\n+                blkdat.FindByte(pchMessageStart[0]);\n+                nRewind = blkdat.GetPos()+1;\n+                blkdat >> FLATDATA(buf);\n+                if (memcmp(buf, pchMessageStart, 4))\n+                    continue;\n+                // read size\n                 blkdat >> nSize;\n-                if (nSize > 0 && nSize <= MAX_BLOCK_SIZE)\n-                {\n-                    CBlock block;\n-                    blkdat >> block;\n+                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                    continue;\n+            } catch (std::exception &e) {\n+                // no valid block header found; don't complain\n+                break;\n+            }\n+            try {\n+                // read block\n+                uint64 nBlockPos = blkdat.GetPos();\n+                blkdat.SetLimit(nBlockPos + nSize);\n+                CBlock block;\n+                blkdat >> block;\n+                nRewind = blkdat.GetPos();\n+\n+                // process block\n+                if (nBlockPos >= nStartByte) {\n                     LOCK(cs_main);\n-                    if (ProcessBlock(NULL,&block))\n-                    {\n+                    if (dbp)\n+                        dbp->nPos = nBlockPos;\n+                    if (ProcessBlock(NULL, &block, dbp))\n                         nLoaded++;\n-                        nPos += 4 + nSize;\n-                    }\n                 }\n+            } catch (std::exception &e) {\n+                printf(\"%s() : Deserialize or I/O error caught during load\\n\", __PRETTY_FUNCTION__);\n             }\n         }\n-        catch (std::exception &e) {\n-            printf(\"%s() : Deserialize or I/O error caught during load\\n\",\n-                   __PRETTY_FUNCTION__);\n-        }\n+        fclose(fileIn);\n     }\n-    printf(\"Loaded %i blocks from external file in %\"PRI64d\"ms\\n\", nLoaded, GetTimeMillis() - nStart);\n+    if (nLoaded > 0)\n+        printf(\"Loaded %i blocks from external file in %\"PRI64d\"ms\\n\", nLoaded, GetTimeMillis() - nStart);\n     return nLoaded > 0;\n }\n \n-struct CImportingNow\n-{\n-    CImportingNow() {\n-        assert(fImporting == false);\n-        fImporting = true;\n-    }\n-\n-    ~CImportingNow() {\n-        assert(fImporting == true);\n-        fImporting = false;\n-    }\n-};\n-\n-void ThreadImport(void *data) {\n-    std::vector<boost::filesystem::path> *vFiles = reinterpret_cast<std::vector<boost::filesystem::path>*>(data);\n-\n-    RenameThread(\"bitcoin-loadblk\");\n-\n-    CImportingNow imp;\n-    vnThreadsRunning[THREAD_IMPORT]++;\n-\n-    // -loadblock=\n-    BOOST_FOREACH(boost::filesystem::path &path, *vFiles) {\n-        FILE *file = fopen(path.string().c_str(), \"rb\");\n-        if (file)\n-            LoadExternalBlockFile(file);\n-    }\n-\n-    // hardcoded $DATADIR/bootstrap.dat\n-    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (filesystem::exists(pathBootstrap)) {\n-        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n-        if (file) {\n-            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n-            LoadExternalBlockFile(file);\n-            RenameOver(pathBootstrap, pathBootstrapOld);\n-        }\n-    }\n-\n-    delete vFiles;\n-\n-    vnThreadsRunning[THREAD_IMPORT]--;\n-}\n-\n \n \n \n@@ -2800,7 +2787,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Ask the first connected node for block updates\n         static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot && !fImporting &&\n+        if (!pfrom->fClient && !pfrom->fOneShot && !fImporting && !fReindex &&\n             (pfrom->nStartingHeight > (nBestHeight - 144)) &&\n             (pfrom->nVersion < NOBLKS_VERSION_START ||\n              pfrom->nVersion >= NOBLKS_VERSION_END) &&\n@@ -2937,7 +2924,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n             if (!fAlreadyHave) {\n-                if (!fImporting)\n+                if (!fImporting && !fReindex)\n                     pfrom->AskFor(inv);\n             } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n                 pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n@@ -3167,7 +3154,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n-    else if (strCommand == \"block\")\n+    else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n         vRecv >> block;"
      },
      {
        "sha": "25dddae0f8f7bd58cea42b38e0a341f982e8ee55",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -88,6 +88,7 @@ extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n extern bool fImporting;\n+extern bool fReindex;\n extern unsigned int nCoinCacheSize;\n \n // Settings\n@@ -109,11 +110,12 @@ class CCoinsViewCache;\n void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n-bool ProcessBlock(CNode* pfrom, CBlock* pblock);\n+bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n-bool LoadBlockIndex(bool fAllowNew=true);\n+bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+bool LoadBlockIndex();\n void PrintBlockTree();\n CBlockIndex* FindBlockByHeight(int nHeight);\n bool ProcessMessages(CNode* pfrom);\n@@ -1261,7 +1263,8 @@ class CBlock\n     bool CheckBlock(bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n \n     // Store block on disk\n-    bool AcceptBlock();\n+    // if dbp is provided, the file is known to already reside on disk\n+    bool AcceptBlock(CDiskBlockPos *dbp = NULL);\n };\n \n "
      },
      {
        "sha": "9c47daf85d8f680a2c6e02f87715edb27960b908",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -489,7 +489,8 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     statusBar()->clearMessage();\n \n     // don't show / hide progress bar and its label if we have no connection to the network\n-    if (!clientModel || (clientModel->getNumConnections() == 0 && !clientModel->isImporting()))\n+    enum BlockSource blockSource = clientModel ? clientModel->getBlockSource() : BLOCK_SOURCE_NONE;\n+    if (blockSource == BLOCK_SOURCE_NONE || (blockSource == BLOCK_SOURCE_NETWORK && clientModel->getNumConnections() == 0))\n     {\n         progressBarLabel->setVisible(false);\n         progressBar->setVisible(false);\n@@ -499,26 +500,37 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n \n     QString tooltip;\n \n+    QString importText;\n+    switch (blockSource) {\n+    case BLOCK_SOURCE_NONE:\n+    case BLOCK_SOURCE_NETWORK:\n+        importText = tr(\"Synchronizing with network...\");\n+    case BLOCK_SOURCE_DISK:\n+        importText = tr(\"Importing blocks from disk...\");\n+    case BLOCK_SOURCE_REINDEX:\n+        importText = tr(\"Reindexing blocks on disk...\");\n+    }\n+\n     if(count < nTotalBlocks)\n     {\n         int nRemainingBlocks = nTotalBlocks - count;\n         float nPercentageDone = count / (nTotalBlocks * 0.01f);\n \n-        progressBarLabel->setText(tr(clientModel->isImporting() ? \"Importing blocks...\" : \"Synchronizing with network...\"));\n+        progressBarLabel->setText(importText);\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"~%n block(s) remaining\", \"\", nRemainingBlocks));\n         progressBar->setMaximum(nTotalBlocks);\n         progressBar->setValue(count);\n         progressBar->setVisible(true);\n \n-        tooltip = tr(\"Downloaded %1 of %2 blocks of transaction history (%3% done).\").arg(count).arg(nTotalBlocks).arg(nPercentageDone, 0, 'f', 2);\n+        tooltip = tr(\"Processed %1 of %2 blocks of transaction history (%3% done).\").arg(count).arg(nTotalBlocks).arg(nPercentageDone, 0, 'f', 2);\n     }\n     else\n     {\n         progressBarLabel->setVisible(false);\n \n         progressBar->setVisible(false);\n-        tooltip = tr(\"Downloaded %1 blocks of transaction history.\").arg(count);\n+        tooltip = tr(\"Processed %1 blocks of transaction history.\").arg(count);\n     }\n \n     QDateTime lastBlockDate = clientModel->getLastBlockDate();"
      },
      {
        "sha": "7e8e102ee7c13d83ddd2e352134beab15ac95a1d",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -27,8 +27,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Cannot obtain a lock on data directory %s.  Bitcoin is probably already \"\n \"running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Detach block and address databases. Increases shutdown time (default: 0)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: The transaction was rejected.  This might happen if some of the coins \"\n \"in your wallet were already spent, such as if you used a copy of wallet.dat \"\n \"and coins were spent in the copy but not marked as spent here.\"),"
      },
      {
        "sha": "9b7362d7571cbc9c432f3e9f0085cfb0984d4194",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -101,9 +101,13 @@ bool ClientModel::inInitialBlockDownload() const\n     return IsInitialBlockDownload();\n }\n \n-bool ClientModel::isImporting() const\n+enum BlockSource ClientModel::getBlockSource() const\n {\n-    return fImporting;\n+    if (fReindex)\n+        return BLOCK_SOURCE_REINDEX;\n+    if (fImporting)\n+        return BLOCK_SOURCE_DISK;\n+    return BLOCK_SOURCE_NETWORK;\n }\n \n int ClientModel::getNumBlocksOfPeers() const"
      },
      {
        "sha": "7d6401ab25749b0081ee7e840c8583b2e27287c6",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -13,6 +13,13 @@ class QDateTime;\n class QTimer;\n QT_END_NAMESPACE\n \n+enum BlockSource {\n+    BLOCK_SOURCE_NONE,\n+    BLOCK_SOURCE_NETWORK,\n+    BLOCK_SOURCE_DISK,\n+    BLOCK_SOURCE_REINDEX\n+};\n+\n /** Model for Bitcoin network client. */\n class ClientModel : public QObject\n {\n@@ -34,7 +41,7 @@ class ClientModel : public QObject\n     //! Return true if core is doing initial block download\n     bool inInitialBlockDownload() const;\n     //! Return true if core is importing blocks\n-    bool isImporting() const;\n+    enum BlockSource getBlockSource() const;\n     //! Return conservative estimate of total number of blocks, or 0 if unknown\n     int getNumBlocksOfPeers() const;\n     //! Return warnings to be displayed in status bar"
      },
      {
        "sha": "6a1336197475b46223bbed94c8550ebe6452d64d",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -86,16 +86,6 @@\n          </property>\n         </widget>\n        </item>\n-       <item>\n-        <widget class=\"QCheckBox\" name=\"detachDatabases\">\n-         <property name=\"toolTip\">\n-          <string>Detach block and address databases at shutdown. This means they can be moved to another data directory, but it slows down shutdown. The wallet is always detached.</string>\n-         </property>\n-         <property name=\"text\">\n-          <string>&amp;Detach databases at shutdown</string>\n-         </property>\n-        </widget>\n-       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Main\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "03dcb0b538778679378de4e49c4c2bbfb9d0e764",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -128,7 +128,6 @@ void OptionsDialog::setMapper()\n     /* Main */\n     mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n-    mapper->addMapping(ui->detachDatabases, OptionsModel::DetachDatabases);\n \n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);"
      },
      {
        "sha": "e3c9413f1bb7d42bfbc1f4b9aa2ebef8c5f042a6",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -56,8 +56,6 @@ void OptionsModel::Init()\n         SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n     if (settings.contains(\"nSocksVersion\") && settings.value(\"fUseProxy\").toBool())\n         SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString());\n-    if (settings.contains(\"detachDB\"))\n-        SoftSetBoolArg(\"-detachdb\", settings.value(\"detachDB\").toBool());\n     if (!language.isEmpty())\n         SoftSetArg(\"-lang\", language.toStdString());\n }\n@@ -173,8 +171,6 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return QVariant(nDisplayUnit);\n         case DisplayAddresses:\n             return QVariant(bDisplayAddresses);\n-        case DetachDatabases:\n-            return QVariant(bitdb.GetDetach());\n         case Language:\n             return settings.value(\"language\", \"\");\n         default:\n@@ -256,12 +252,6 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             bDisplayAddresses = value.toBool();\n             settings.setValue(\"bDisplayAddresses\", bDisplayAddresses);\n             break;\n-        case DetachDatabases: {\n-            bool fDetachDB = value.toBool();\n-            bitdb.SetDetach(fDetachDB);\n-            settings.setValue(\"detachDB\", fDetachDB);\n-            }\n-            break;\n         case Language:\n             settings.setValue(\"language\", value);\n             break;"
      },
      {
        "sha": "4f893bb44e12a0fcb57d02d133254bc6ed1d034b",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -28,7 +28,6 @@ class OptionsModel : public QAbstractListModel\n         Fee,               // qint64\n         DisplayUnit,       // BitcoinUnits::Unit\n         DisplayAddresses,  // bool\n-        DetachDatabases,   // bool\n         Language,          // QString\n         OptionIDRowCount,\n     };"
      },
      {
        "sha": "9e14666faccf311968dc1681824befcde23dc28d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -1225,4 +1225,148 @@ class CAutoFile\n     }\n };\n \n+/** Wrapper around a FILE* that implements a ring buffer to\n+ *  deserialize from. It guarantees the ability to rewind\n+ *  a given number of bytes. */\n+class CBufferedFile\n+{\n+private:\n+    FILE *src;          // source file\n+    uint64 nSrcPos;     // how many bytes have been read from source\n+    uint64 nReadPos;    // how many bytes have been read from this\n+    uint64 nReadLimit;  // up to which position we're allowed to read\n+    uint64 nRewind;     // how many bytes we guarantee to rewind\n+    std::vector<char> vchBuf; // the buffer\n+\n+    short state;\n+    short exceptmask;\n+\n+protected:\n+    void setstate(short bits, const char *psz) {\n+        state |= bits;\n+        if (state & exceptmask)\n+            throw std::ios_base::failure(psz);\n+    }\n+\n+    // read data from the source to fill the buffer\n+    bool Fill() {\n+        unsigned int pos = nSrcPos % vchBuf.size();\n+        unsigned int readNow = vchBuf.size() - pos;\n+        unsigned int nAvail = vchBuf.size() - (nSrcPos - nReadPos) - nRewind;\n+        if (nAvail < readNow)\n+            readNow = nAvail;\n+        if (readNow == 0)\n+            return false;\n+        size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n+        if (read == 0) {\n+            setstate(std::ios_base::failbit, feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            return false;\n+        } else {\n+            nSrcPos += read;\n+            return true;\n+        }\n+    }\n+\n+public:\n+    int nType;\n+    int nVersion;\n+\n+    CBufferedFile(FILE *fileIn, uint64 nBufSize, uint64 nRewindIn, int nTypeIn, int nVersionIn) :\n+        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n+        state(0), exceptmask(std::ios_base::badbit | std::ios_base::failbit), nType(nTypeIn), nVersion(nVersionIn) {\n+    }\n+\n+    // check whether no error occurred\n+    bool good() const {\n+        return state == 0;\n+    }\n+\n+    // check whether we're at the end of the source file\n+    bool eof() const {\n+        return nReadPos == nSrcPos && feof(src);\n+    }\n+\n+    // read a number of bytes\n+    CBufferedFile& read(char *pch, size_t nSize) {\n+        if (nSize + nReadPos > nReadLimit)\n+            throw std::ios_base::failure(\"Read attempted past buffer limit\");\n+        if (nSize + nRewind > vchBuf.size())\n+            throw std::ios_base::failure(\"Read larger than buffer size\");\n+        while (nSize > 0) {\n+            if (nReadPos == nSrcPos)\n+                Fill();\n+            unsigned int pos = nReadPos % vchBuf.size();\n+            size_t nNow = nSize;\n+            if (nNow + pos > vchBuf.size())\n+                nNow = vchBuf.size() - pos;\n+            if (nNow + nReadPos > nSrcPos)\n+                nNow = nSrcPos - nReadPos;\n+            memcpy(pch, &vchBuf[pos], nNow);\n+            nReadPos += nNow;\n+            pch += nNow;\n+            nSize -= nNow;\n+        }\n+        return (*this);\n+    }\n+\n+    // return the current reading position\n+    uint64 GetPos() {\n+        return nReadPos;\n+    }\n+\n+    // rewind to a given reading position\n+    bool SetPos(uint64 nPos) {\n+        nReadPos = nPos;\n+        if (nReadPos + nRewind < nSrcPos) {\n+            nReadPos = nSrcPos - nRewind;\n+            return false;\n+        } else if (nReadPos > nSrcPos) {\n+            nReadPos = nSrcPos;\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    bool Seek(uint64 nPos) {\n+        long nLongPos = nPos;\n+        if (nPos != (uint64)nLongPos)\n+            return false;\n+        if (fseek(src, nLongPos, SEEK_SET))\n+            return false;\n+        nLongPos = ftell(src);\n+        nSrcPos = nLongPos;\n+        nReadPos = nLongPos;\n+        state = 0;\n+        return true;\n+    }\n+\n+    // prevent reading beyond a certain position\n+    // no argument removes the limit\n+    bool SetLimit(uint64 nPos = (uint64)(-1)) {\n+        if (nPos < nReadPos)\n+            return false;\n+        nReadLimit = nPos;\n+        return true;\n+    }\n+\n+    template<typename T>\n+    CBufferedFile& operator>>(T& obj) {\n+        // Unserialize from this stream\n+        ::Unserialize(*this, obj, nType, nVersion);\n+        return (*this);\n+    }\n+\n+    // search for a given byte in the stream, and remain positioned on it\n+    void FindByte(char ch) {\n+        while (true) {\n+            if (nReadPos == nSrcPos)\n+                Fill();\n+            if (vchBuf[nReadPos % vchBuf.size()] == ch)\n+                break;\n+            nReadPos++;\n+        }\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "e4ba0259bafc9508415019bac4a3bf9c4c4ba3fa",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -19,10 +19,10 @@ struct TestingSetup {\n         fPrintToDebugger = true; // don't want to write to debug.log file\n         noui_connect();\n         bitdb.MakeMock();\n-        pblocktree = new CBlockTreeDB(true);\n-        pcoinsdbview = new CCoinsViewDB(true);\n+        pblocktree = new CBlockTreeDB(1 << 20, true);\n+        pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n-        LoadBlockIndex(true);\n+        LoadBlockIndex();\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);"
      },
      {
        "sha": "93c5f23d8b3d8fe32a9944e678367f0b942c7b6e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -19,7 +19,7 @@ void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n     batch.Write('B', hash);\n }\n \n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory) : db(GetDataDir() / \"coins\", nCacheSize, fMemory) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coins\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(uint256 txid, CCoins &coins) { \n@@ -64,7 +64,7 @@ bool CCoinsViewDB::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockI\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory) : CLevelDB(GetDataDir() / \"blktree\", nCacheSize, fMemory) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDB(GetDataDir() / \"blktree\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n@@ -94,6 +94,18 @@ bool CBlockTreeDB::WriteLastBlockFile(int nFile) {\n     return Write('l', nFile);\n }\n \n+bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n+    if (fReindexing)\n+        return Write('R', '1');\n+    else\n+        return Erase('R');\n+}\n+\n+bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n+    fReindexing = Exists('R');\n+    return true;\n+}\n+\n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read('l', nFile);\n }"
      },
      {
        "sha": "d7d327069fc6fcb070640b4c83d2de5b75e12174",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0e7ef9aa077e4e49e6ddd2c27ce249ce64a265f0",
        "patch": "@@ -14,7 +14,7 @@ class CCoinsViewDB : public CCoinsView\n protected:\n     CLevelDB db;\n public:\n-    CCoinsViewDB(size_t nCacheSize, bool fMemory = false);\n+    CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(uint256 txid, CCoins &coins);\n     bool SetCoins(uint256 txid, const CCoins &coins);\n@@ -29,7 +29,7 @@ class CCoinsViewDB : public CCoinsView\n class CBlockTreeDB : public CLevelDB\n {\n public:\n-    CBlockTreeDB(size_t nCacheSize, bool fMemory = false);\n+    CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n private:\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n@@ -41,6 +41,8 @@ class CBlockTreeDB : public CLevelDB\n     bool WriteBlockFileInfo(int nFile, const CBlockFileInfo &fileinfo);\n     bool ReadLastBlockFile(int &nFile);\n     bool WriteLastBlockFile(int nFile);\n+    bool WriteReindexing(bool fReindex);\n+    bool ReadReindexing(bool &fReindex);\n     bool LoadBlockIndexGuts();\n };\n "
      }
    ]
  }
]