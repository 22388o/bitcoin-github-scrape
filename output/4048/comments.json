[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40293488",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40293488",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40293488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjkzNDg4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-12T22:30:33Z",
    "updated_at": "2014-04-12T22:30:33Z",
    "author_association": "NONE",
    "body": ":+1: \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40293488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40334461",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40334461",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40334461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM0NDYx",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T05:35:28Z",
    "updated_at": "2014-04-14T05:36:15Z",
    "author_association": "MEMBER",
    "body": "@gmaxwell we can be sure about that. DecodeBase58 is only called from two places in base58.h itself:\n- DecodeBase58(std::string) -> passed string.c_str() which is always zero-terminated\n- DecodeBase58Check(const char*) -> passes through its input which has always been a zero-terminated string\n\nIn general I too prefer APIs that explicitly pass the length of strings (or that use a string type with embedded length field like std::string), but it doesn't look like there is reason to change the API here.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40334461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40334510",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40334510",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40334510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM0NTEw",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T05:37:18Z",
    "updated_at": "2014-04-14T05:37:18Z",
    "author_association": "CONTRIBUTOR",
    "body": ":)  Yea the \"will\" was meant to include all future callers. Communication is hard.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40334510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335324",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335324",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40335324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM1MzI0",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T06:00:51Z",
    "updated_at": "2014-04-14T07:13:26Z",
    "author_association": "MEMBER",
    "body": "Right. It's especially useful to pass a length - or an begin\\* and end\\* pointer - if we want to be able to error out on NULs before the real end of the string (whose presence has triggered many browser bugs). It would also allow using std::string.data() and std::string.size() instead of c_str(), which is theoretically slighty more efficient.\n\nGood to keep in mind, but let's not change the API and implementation at the same time, it would interfere with testing :)\n\nThe code looks straightforward and correct to me. It passes the tests and we have a fairly good testing suite in place for the Base58 functions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335420",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335420",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40335420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM1NDIw",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T06:02:56Z",
    "updated_at": "2014-04-14T06:02:56Z",
    "author_association": "MEMBER",
    "body": "Why reimplement DecodeBase58 and contribute to the current de-modularisation? Seems like a better idea to move libblkmaker's base58.c to its own library and add an encoder...\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335682",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335682",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40335682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM1Njgy",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T06:09:21Z",
    "updated_at": "2014-04-14T06:09:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "A library for 74 lines of trivial code? It's kind of an odd duck, in that I don't know what else I'd put in a library with it except 'generic bitcoin stuff'.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335855",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335855",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40335855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM1ODU1",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T06:14:07Z",
    "updated_at": "2014-04-14T06:14:22Z",
    "author_association": "MEMBER",
    "body": "We definitely should move the Base58 stuff to a library when we library-ize Bitcoin Core. It's one of the useful functions for other projects. Removing the dependency on OpenSSL helps there, too.\n\nHowever I certainly don't want to add a dependency on an external library for this (trivial) functionality.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40335855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40336080",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40336080",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40336080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzM2MDgw",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T06:19:55Z",
    "updated_at": "2014-04-14T06:19:55Z",
    "author_association": "MEMBER",
    "body": "@gmaxwell Everything needed to create a raw transaction spending to an address? :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40336080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40349960",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40349960",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40349960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzQ5OTYw",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T09:59:44Z",
    "updated_at": "2014-04-14T10:05:23Z",
    "author_association": "MEMBER",
    "body": "@laanwj: I agree that the interface is dangerous (and inconsistent too... mixing c++ style and c style strings/iteration). I'd like to replace that, but let's do that separately.\n\nI've addresses your comments too.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40349960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40568896",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40568896",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40568896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY4ODk2",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T07:00:25Z",
    "updated_at": "2014-04-16T07:00:25Z",
    "author_association": "MEMBER",
    "body": "ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40568896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40862824",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40862824",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40862824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODYyODI0",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-19T07:07:04Z",
    "updated_at": "2014-04-19T07:07:04Z",
    "author_association": "MEMBER",
    "body": "Needs rebase after #4014 (should be easy as it only affected comments)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40862824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40864337",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40864337",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 40864337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODY0MzM3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-19T08:49:08Z",
    "updated_at": "2014-04-19T08:49:08Z",
    "author_association": "MEMBER",
    "body": "Rebased.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/40864337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41004494",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41004494",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 41004494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDA0NDk0",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T05:11:32Z",
    "updated_at": "2014-04-22T05:11:32Z",
    "author_association": "MEMBER",
    "body": "Sorry for the late review, I was pinged from one of my PRs so I figured I'd give it a quick look :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41004494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41011064",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41011064",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 41011064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDExMDY0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T07:27:54Z",
    "updated_at": "2014-04-22T07:27:54Z",
    "author_association": "MEMBER",
    "body": "Pushed an update to address @theuni's comments.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41011064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41013162",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41013162",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 41013162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDEzMTYy",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T07:57:40Z",
    "updated_at": "2014-04-22T07:57:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thought I ACKed this already.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41013162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41013892",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41013892",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4048",
    "id": 41013892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDEzODky",
    "user": {
      "login": "BitcoinPullTester",
      "id": 2110907,
      "node_id": "MDQ6VXNlcjIxMTA5MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinPullTester",
      "html_url": "https://github.com/BitcoinPullTester",
      "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
      "following_url": "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
      "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
      "events_url": "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T08:07:34Z",
    "updated_at": "2014-04-22T08:07:34Z",
    "author_association": "NONE",
    "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b58be132c994b6f9b25cb4a702186ef96104953f for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/41013892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573017",
    "pull_request_review_id": null,
    "id": 11573017,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTczMDE3",
    "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+static const char* base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip spaces at the start.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count '1's at the start.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(base58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - base58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        psz++;\n+    }\n+    // Skip spaces at the end.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip header zeroes in b256.",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "6f55ae18988d440b9c4bd4be859901c6a2a1c6fc",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd say 'leading zeroes'\n",
    "created_at": "2014-04-14T07:15:45Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573223",
    "pull_request_review_id": null,
    "id": 11573223,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTczMjIz",
    "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+static const char* base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip spaces at the start.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count '1's at the start.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(base58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - base58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        psz++;",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "6f55ae18988d440b9c4bd4be859901c6a2a1c6fc",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "maybe add `assert(carry == 0);` to catch a bug that causes an overflow\n(same in EncodeBase58)\n",
    "created_at": "2014-04-14T07:29:39Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11573223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 38,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577319",
    "pull_request_review_id": null,
    "id": 11577319,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTc3MzE5",
    "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+static const char* base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip spaces at the start.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count '1's at the start.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(base58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - base58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        psz++;\n+    }\n+    // Skip spaces at the end.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip header zeroes in b256.",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "6f55ae18988d440b9c4bd4be859901c6a2a1c6fc",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.\n",
    "created_at": "2014-04-14T09:58:39Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577319",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577319"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577319"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577323",
    "pull_request_review_id": null,
    "id": 11577323,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTc3MzIz",
    "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+static const char* base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip spaces at the start.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count '1's at the start.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(base58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - base58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        psz++;",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "6f55ae18988d440b9c4bd4be859901c6a2a1c6fc",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.\n",
    "created_at": "2014-04-14T09:58:47Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577323",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577323"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577323"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11577323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 38,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838458",
    "pull_request_review_id": null,
    "id": 11838458,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODM4NDU4",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\nstd::vector<unsigned char> b256(strlen(psz) * 733 / 1000 + 1)\n```\n\nWould avoid a realloc.\n",
    "created_at": "2014-04-22T04:59:59Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838458",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838458"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838458"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838477",
    "pull_request_review_id": null,
    "id": 11838477,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODM4NDc3",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "possible null pointer dereference?\n",
    "created_at": "2014-04-22T05:01:18Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838477",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838477"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838477"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838527",
    "pull_request_review_id": null,
    "id": 11838527,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODM4NTI3",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {",
    "path": "src/base58.cpp",
    "position": 62,
    "original_position": 62,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "possible null pointer dereference?\n",
    "created_at": "2014-04-22T05:06:06Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838527",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838527"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838527"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838565",
    "pull_request_review_id": null,
    "id": 11838565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODM4NTY1",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {\n+        pbegin++;\n+        zeroes++;\n+    }\n+    // Allocate enough space in big-endian base58 representation.\n+    std::vector<unsigned char> b58;",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See previous note. Is there an advantage to using resize() that I'm unaware of?\n",
    "created_at": "2014-04-22T05:09:08Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838586",
    "pull_request_review_id": null,
    "id": 11838586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODM4NTg2",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {\n+        pbegin++;\n+        zeroes++;\n+    }\n+    // Allocate enough space in big-endian base58 representation.\n+    std::vector<unsigned char> b58;\n+    b58.resize((pend - pbegin) * 138 / 100 + 1); // log(256) / log(58), rounded up.\n+    // Process the bytes.\n+    while (pbegin != pend) {\n+        int carry = *pbegin;\n+        // Apply \"b58 = b58 * 256 + ch\".\n+        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); it != b58.rend(); it++) {\n+            carry += 256 * (*it);\n+            *it = carry % 58;\n+            carry /= 58;\n+        }\n+        assert(carry == 0);\n+        pbegin++;\n+    }\n+    // Skip leading zeroes in base58 result.\n+    std::vector<unsigned char>::iterator it = b58.begin();\n+    while (it != b58.end() && *it == 0)\n+        it++;\n+    // Translate the result into a string.\n+    std::string str;",
    "path": "src/base58.cpp",
    "position": 85,
    "original_position": 86,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "std::string str(zeroes, '1');\n",
    "created_at": "2014-04-22T05:10:41Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11838586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 85,
    "original_line": 86,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840571",
    "pull_request_review_id": null,
    "id": 11840571,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQwNTcx",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think empty-constructed vector do any allocation. Still, it can be written in one line.\n",
    "created_at": "2014-04-22T07:03:43Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840571",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840571"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840571"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840633",
    "pull_request_review_id": null,
    "id": 11840633,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQwNjMz",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, psz can't be NULL.\n\nIf you mean possible read beyond the end of the string: no, while(isspace ()) will stop at the terminating 0.\n\nReasons like this is why methods like these should use proper C++ techniques (use std::string, or at least begin/end iterators). But I prefer doing that separately, and not changing their interface now.\n",
    "created_at": "2014-04-22T07:07:03Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840633",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840633"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840633"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840675",
    "pull_request_review_id": null,
    "id": 11840675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQwNjc1",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {",
    "path": "src/base58.cpp",
    "position": 62,
    "original_position": 62,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you're passing in NULL, sure. Adding a comment in the .h file.\n",
    "created_at": "2014-04-22T07:09:17Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11840675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841020",
    "pull_request_review_id": null,
    "id": 11841020,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQxMDIw",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {\n+        pbegin++;\n+        zeroes++;\n+    }\n+    // Allocate enough space in big-endian base58 representation.\n+    std::vector<unsigned char> b58;",
    "path": "src/base58.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In the current code, not really. I'm changing it to first issue a .reserve(), so that everything happens in one allocation.\n",
    "created_at": "2014-04-22T07:25:40Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841020",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841020"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841020"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841028",
    "pull_request_review_id": null,
    "id": 11841028,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQxMDI4",
    "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256;\n+    b256.resize(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {\n+        pbegin++;\n+        zeroes++;\n+    }\n+    // Allocate enough space in big-endian base58 representation.\n+    std::vector<unsigned char> b58;\n+    b58.resize((pend - pbegin) * 138 / 100 + 1); // log(256) / log(58), rounded up.\n+    // Process the bytes.\n+    while (pbegin != pend) {\n+        int carry = *pbegin;\n+        // Apply \"b58 = b58 * 256 + ch\".\n+        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); it != b58.rend(); it++) {\n+            carry += 256 * (*it);\n+            *it = carry % 58;\n+            carry /= 58;\n+        }\n+        assert(carry == 0);\n+        pbegin++;\n+    }\n+    // Skip leading zeroes in base58 result.\n+    std::vector<unsigned char>::iterator it = b58.begin();\n+    while (it != b58.end() && *it == 0)\n+        it++;\n+    // Translate the result into a string.\n+    std::string str;",
    "path": "src/base58.cpp",
    "position": 85,
    "original_position": 86,
    "commit_id": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "original_commit_id": "57e709a6e1f608dac527c55a1edfdea5208c3d94",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also doing a reserve here first.\n",
    "created_at": "2014-04-22T07:25:59Z",
    "updated_at": "2014-04-22T07:30:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841028",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841028"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841028"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4048"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11841028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 85,
    "original_line": 86,
    "side": "RIGHT"
  }
]