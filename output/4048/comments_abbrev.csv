ghost,2014-04-12T22:30:33Z,:+1: \n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40293488,40293488,
laanwj,2014-04-14T05:35:28Z,@gmaxwell we can be sure about that. DecodeBase58 is only called from two places in base58.h itself:\n- DecodeBase58(std::string) -> passed string.c_str() which is always zero-terminated\n- DecodeBase58Check(const char*) -> passes through its input which has always been a zero-terminated string\n\nIn general I too prefer APIs that explicitly pass the length of strings (or that use a string type wi,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40334461,40334461,
gmaxwell,2014-04-14T05:37:18Z,":)  Yea the ""will"" was meant to include all future callers. Communication is hard.\n",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40334510,40334510,
laanwj,2014-04-14T06:00:51Z,"Right. It's especially useful to pass a length - or an begin\* and end\* pointer - if we want to be able to error out on NULs before the real end of the string (whose presence has triggered many browser bugs). It would also allow using std::string.data() and std::string.size() instead of c_str(), which is theoretically slighty more efficient.\n\nGood to keep in mind, but let's not change the API a",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335324,40335324,
luke-jr,2014-04-14T06:02:56Z,Why reimplement DecodeBase58 and contribute to the current de-modularisation? Seems like a better idea to move libblkmaker's base58.c to its own library and add an encoder...\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335420,40335420,
gmaxwell,2014-04-14T06:09:21Z,"A library for 74 lines of trivial code? It's kind of an odd duck, in that I don't know what else I'd put in a library with it except 'generic bitcoin stuff'.\n",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335682,40335682,
laanwj,2014-04-14T06:14:07Z,"We definitely should move the Base58 stuff to a library when we library-ize Bitcoin Core. It's one of the useful functions for other projects. Removing the dependency on OpenSSL helps there, too.\n\nHowever I certainly don't want to add a dependency on an external library for this (trivial) functionality.\n",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40335855,40335855,
luke-jr,2014-04-14T06:19:55Z,@gmaxwell Everything needed to create a raw transaction spending to an address? :)\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40336080,40336080,
sipa,2014-04-14T09:59:44Z,"@laanwj: I agree that the interface is dangerous (and inconsistent too... mixing c++ style and c style strings/iteration). I'd like to replace that, but let's do that separately.\n\nI've addresses your comments too.\n",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40349960,40349960,
laanwj,2014-04-16T07:00:25Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40568896,40568896,
laanwj,2014-04-19T07:07:04Z,Needs rebase after #4014 (should be easy as it only affected comments)\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40862824,40862824,
sipa,2014-04-19T08:49:08Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-40864337,40864337,
theuni,2014-04-22T05:11:32Z,"Sorry for the late review, I was pinged from one of my PRs so I figured I'd give it a quick look :)\n",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41004494,41004494,
sipa,2014-04-22T07:27:54Z,Pushed an update to address @theuni's comments.\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41011064,41011064,
gmaxwell,2014-04-22T07:57:40Z,Thought I ACKed this already.\n,https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41013162,41013162,
BitcoinPullTester,2014-04-22T08:07:34Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b58be132c994b6f9b25cb4a702186ef96104953f for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4048#issuecomment-41013892,41013892,
laanwj,2014-04-14T07:15:45Z,I'd say 'leading zeroes'\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573017,11573017,src/base58.cpp
laanwj,2014-04-14T07:29:39Z,maybe add `assert(carry == 0);` to catch a bug that causes an overflow\n(same in EncodeBase58)\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11573223,11573223,src/base58.cpp
sipa,2014-04-14T09:58:39Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577319,11577319,src/base58.cpp
sipa,2014-04-14T09:58:47Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11577323,11577323,src/base58.cpp
theuni,2014-04-22T04:59:59Z,```\nstd::vector<unsigned char> b256(strlen(psz) * 733 / 1000 + 1)\n```\n\nWould avoid a realloc.\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838458,11838458,src/base58.cpp
theuni,2014-04-22T05:01:18Z,possible null pointer dereference?\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838477,11838477,src/base58.cpp
theuni,2014-04-22T05:06:06Z,possible null pointer dereference?\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838527,11838527,src/base58.cpp
theuni,2014-04-22T05:09:08Z,See previous note. Is there an advantage to using resize() that I'm unaware of?\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838565,11838565,src/base58.cpp
theuni,2014-04-22T05:10:41Z,"std::string str(zeroes, '1');\n",https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11838586,11838586,src/base58.cpp
sipa,2014-04-22T07:03:43Z,"I don't think empty-constructed vector do any allocation. Still, it can be written in one line.\n",https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840571,11840571,src/base58.cpp
sipa,2014-04-22T07:07:03Z,"No, psz can't be NULL.\n\nIf you mean possible read beyond the end of the string: no, while(isspace ()) will stop at the terminating 0.\n\nReasons like this is why methods like these should use proper C++ techniques (use std::string, or at least begin/end iterators). But I prefer doing that separately, and not changing their interface now.\n",https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840633,11840633,src/base58.cpp
sipa,2014-04-22T07:09:17Z,"If you're passing in NULL, sure. Adding a comment in the .h file.\n",https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11840675,11840675,src/base58.cpp
sipa,2014-04-22T07:25:40Z,"In the current code, not really. I'm changing it to first issue a .reserve(), so that everything happens in one allocation.\n",https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841020,11841020,src/base58.cpp
sipa,2014-04-22T07:25:59Z,Also doing a reserve here first.\n,https://github.com/bitcoin/bitcoin/pull/4048#discussion_r11841028,11841028,src/base58.cpp
