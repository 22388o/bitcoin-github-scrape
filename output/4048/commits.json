[
  {
    "sha": "b58be132c994b6f9b25cb4a702186ef96104953f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNThiZTEzMmM5OTRiNmY5YjI1Y2I0YTcwMjE4NmVmOTYxMDQ5NTNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-12T21:34:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-22T07:30:21Z"
      },
      "message": "Replace DecodeBase58/EncodeBase58 with direct implementation.\n\nThis removes the bignum/OpenSSL dependency.\n\nThe base58 transformation code is also moved to a separate .cpp file.",
      "tree": {
        "sha": "b3e64d56100eec405887f2a72f52ac7b8003d357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3e64d56100eec405887f2a72f52ac7b8003d357"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b58be132c994b6f9b25cb4a702186ef96104953f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b58be132c994b6f9b25cb4a702186ef96104953f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b58be132c994b6f9b25cb4a702186ef96104953f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b58be132c994b6f9b25cb4a702186ef96104953f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a102fa9d94309965e98a707cb0c653cfa31ca71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a102fa9d94309965e98a707cb0c653cfa31ca71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a102fa9d94309965e98a707cb0c653cfa31ca71"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 101,
      "deletions": 93
    },
    "files": [
      {
        "sha": "b037ac2c9825f0bfe5a3ed0c7500892258fc1899",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b58be132c994b6f9b25cb4a702186ef96104953f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b58be132c994b6f9b25cb4a702186ef96104953f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b58be132c994b6f9b25cb4a702186ef96104953f",
        "patch": "@@ -121,6 +121,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   $(BITCOIN_CORE_H)\n \n libbitcoin_common_a_SOURCES = \\\n+  base58.cpp \\\n   allocators.cpp \\\n   chainparams.cpp \\\n   core.cpp \\"
      },
      {
        "sha": "0b08ee3d064a3527ac21eaade11f2838622e94c2",
        "filename": "src/base58.cpp",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b58be132c994b6f9b25cb4a702186ef96104953f/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b58be132c994b6f9b25cb4a702186ef96104953f/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=b58be132c994b6f9b25cb4a702186ef96104953f",
        "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n+#include <string>\n+\n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    // Skip leading spaces.\n+    while (*psz && isspace(*psz))\n+        psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    // Allocate enough space in big-endian base256 representation.\n+    std::vector<unsigned char> b256(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n+    // Process the characters.\n+    while (*psz && !isspace(*psz)) {\n+        // Decode base58 character\n+        const char *ch = strchr(pszBase58, *psz);\n+        if (ch == NULL)\n+            return false;\n+        // Apply \"b256 = b256 * 58 + ch\".\n+        int carry = ch - pszBase58;\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+            carry += 58 * (*it);\n+            *it = carry % 256;\n+            carry /= 256;\n+        }\n+        assert(carry == 0);\n+        psz++;\n+    }\n+    // Skip trailing spaces.\n+    while (isspace(*psz))\n+        psz++;\n+    if (*psz != 0)\n+        return false;\n+    // Skip leading zeroes in b256.\n+    std::vector<unsigned char>::iterator it = b256.begin();\n+    while (it != b256.end() && *it == 0)\n+        it++;\n+    // Copy result into output vector.\n+    vch.reserve(zeroes + (b256.end() - it));\n+    vch.assign(zeroes, 0x00);\n+    while (it != b256.end())\n+      vch.push_back(*(it++));\n+    return true;\n+}\n+\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+    // Skip & count leading zeroes.\n+    int zeroes = 0;\n+    while (pbegin != pend && *pbegin == 0) {\n+        pbegin++;\n+        zeroes++;\n+    }\n+    // Allocate enough space in big-endian base58 representation.\n+    std::vector<unsigned char> b58((pend - pbegin) * 138 / 100 + 1); // log(256) / log(58), rounded up.\n+    // Process the bytes.\n+    while (pbegin != pend) {\n+        int carry = *pbegin;\n+        // Apply \"b58 = b58 * 256 + ch\".\n+        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); it != b58.rend(); it++) {\n+            carry += 256 * (*it);\n+            *it = carry % 58;\n+            carry /= 58;\n+        }\n+        assert(carry == 0);\n+        pbegin++;\n+    }\n+    // Skip leading zeroes in base58 result.\n+    std::vector<unsigned char>::iterator it = b58.begin();\n+    while (it != b58.end() && *it == 0)\n+        it++;\n+    // Translate the result into a string.\n+    std::string str;\n+    str.reserve(zeroes + (b58.end() - it));\n+    str.assign(zeroes, '1');\n+    while (it != b58.end())\n+        str += pszBase58[*(it++)];\n+    return str;\n+}"
      },
      {
        "sha": "4fb436c5ed5ec82bc2dc2fd3b3be751a1720859c",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 9,
        "deletions": 93,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b58be132c994b6f9b25cb4a702186ef96104953f/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b58be132c994b6f9b25cb4a702186ef96104953f/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=b58be132c994b6f9b25cb4a702186ef96104953f",
        "patch": "@@ -14,7 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include \"bignum.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n #include \"key.h\"\n@@ -27,51 +26,11 @@\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n-/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n-static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n-\n /**\n- * Encode a byte sequence as a base58-encoded string\n+ * Encode a byte sequence as a base58-encoded string.\n+ * pbegin and pend cannot be NULL, unless both are.\n  */\n-inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n-{\n-    CAutoBN_CTX pctx;\n-    CBigNum bn58 = 58;\n-    CBigNum bn0 = 0;\n-\n-    // Convert big endian data to little endian - the extra zero at the end will\n-    // ensure bignum interprets it as a positive number */\n-    std::vector<unsigned char> vchTmp(pend-pbegin+1, 0);\n-    reverse_copy(pbegin, pend, vchTmp.begin());\n-\n-    // Convert little endian data to bignum\n-    CBigNum bn;\n-    bn.setvch(vchTmp);\n-\n-    // Convert bignum to std::string\n-    std::string str;\n-    // The expected size increase from base58 conversion is approximately 137%,\n-    // but use 138% to be safe\n-    str.reserve((pend - pbegin) * 138 / 100 + 1);\n-    CBigNum dv;\n-    CBigNum rem;\n-    while (bn > bn0)\n-    {\n-        if (!BN_div(&dv, &rem, &bn, &bn58, pctx))\n-            throw bignum_error(\"EncodeBase58 : BN_div failed\");\n-        bn = dv;\n-        unsigned int c = rem.getulong();\n-        str += pszBase58[c];\n-    }\n-\n-    // Leading zeroes encoded as base58 zeros\n-    for (const unsigned char* p = pbegin; p < pend && *p == 0; p++)\n-        str += pszBase58[0];\n-\n-    // Convert little endian std::string to big endian\n-    reverse(str.begin(), str.end());\n-    return str;\n-}\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend);\n \n /**\n  * Encode a byte vector as a base58-encoded string\n@@ -82,58 +41,15 @@ inline std::string EncodeBase58(const std::vector<unsigned char>& vch)\n }\n \n /**\n- * Decode a base58-encoded string (psz) into a byte vector (vchRet)\n- * return true if decoding is successful\n+ * Decode a base58-encoded string (psz) into a byte vector (vchRet).\n+ * return true if decoding is successful.\n+ * psz cannot be NULL.\n  */\n-inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)\n-{\n-    CAutoBN_CTX pctx;\n-    vchRet.clear();\n-    CBigNum bn58 = 58;\n-    CBigNum bn = 0;\n-    CBigNum bnChar;\n-    while (isspace(*psz))\n-        psz++;\n-\n-    // Convert big endian string to bignum\n-    for (const char* p = psz; *p; p++)\n-    {\n-        const char* p1 = strchr(pszBase58, *p);\n-        if (p1 == NULL)\n-        {\n-            while (isspace(*p))\n-                p++;\n-            if (*p != '\\0')\n-                return false;\n-            break;\n-        }\n-        bnChar.setulong(p1 - pszBase58);\n-        if (!BN_mul(&bn, &bn, &bn58, pctx))\n-            throw bignum_error(\"DecodeBase58 : BN_mul failed\");\n-        bn += bnChar;\n-    }\n-\n-    // Get bignum as little endian data\n-    std::vector<unsigned char> vchTmp = bn.getvch();\n-\n-    // Trim off the sign byte if present\n-    if (vchTmp.size() >= 2 && vchTmp.end()[-1] == 0 && vchTmp.end()[-2] >= 0x80)\n-        vchTmp.erase(vchTmp.end()-1);\n-\n-    // Restore leading zeros\n-    int nLeadingZeros = 0;\n-    for (const char* p = psz; *p == pszBase58[0]; p++)\n-        nLeadingZeros++;\n-    vchRet.assign(nLeadingZeros + vchTmp.size(), 0);\n-\n-    // Convert little endian data to big endian\n-    reverse_copy(vchTmp.begin(), vchTmp.end(), vchRet.end() - vchTmp.size());\n-    return true;\n-}\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n- * Decode a base58-encoded string (str) into a byte vector (vchRet)\n- * return true if decoding is successful\n+ * Decode a base58-encoded string (str) into a byte vector (vchRet).\n+ * return true if decoding is successful.\n  */\n inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n {"
      }
    ]
  }
]