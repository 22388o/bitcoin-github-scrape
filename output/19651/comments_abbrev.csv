elichai,2020-08-03 12:09:26,"Could we change `BerkeleyBatch::WriteKey` to return an enum describing the error? that will be inconsistent with the current API though.\nbut it will allow us to print a good error for the user, as he should probably know he already have that descriptor ",https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-667987452,667987452,
achow101,2020-08-03 16:07:31,I think we should go with option 2: To update the existing spkman. The keys should either already exist or are being imported at that time. I don't think it's good to add keys in memory and not write them to disk as this could potentially result in lost keys.,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-668107138,668107138,
S3RK,2020-08-06 08:45:22,"> Could we change `BerkeleyBatch::WriteKey` to return an enum describing the error? that will be inconsistent with the current API though.\n> but it will allow us to print a good error for the user, as he should probably know he already have that descriptor\n\n@elichai I believe it's better to process the command rather than just show better error message, because it allows to modify some meta ",https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-669798234,669798234,
DrahtBot,2020-08-06 13:36:22,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-669930910,669930910,
S3RK,2020-08-17 11:19:33,"> The commit adding the test should be after or be the same commit as the one adding the fix. This way all commits pass tests.\n> \n> It would be nice if the tests checked the update behavior (e.g. new ranges, changed active-ness, etc.) but we can do that in a followup.\n\n@achow101 I squashed the test and the fix commits into one and extracted new function `CanUpdateToWalletDescriptor` to avo",https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-674822483,674822483,
S3RK,2020-08-19 10:52:27,Rebased and removed 51ea4c6ad808f881d26ff99da620e09d9549163e as it was already added to master,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-676137952,676137952,
S3RK,2020-08-27 11:17:26,Added `wallet: deactivate descriptor` commit from #19774,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-681885443,681885443,
S3RK,2020-08-30 10:27:31,"@achow101 thanks for your time and review. I pushed changes as fixup commits for easier incremental review, when you believe the code is ready to be merged I'll squash them into original commits.",https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-683403173,683403173,
achow101,2020-09-03 16:54:23,"ACK, please squash.",https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-686622471,686622471,
achow101,2020-09-09 21:12:26,ACK 908e18e79847155144111bafa2e6e5dbd5c6511c,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-689824848,689824848,
S3RK,2021-05-10 19:10:54,This should also fix #21716 ,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-837171679,837171679,
achow101,2021-06-03 20:52:19,re-ACK 5d9670462219b8c753516bfbdc5c7fa23046cd07,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-854171032,854171032,
jonatack,2021-06-24 09:30:40,I'll try to review this later today.,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-867488611,867488611,
achow101,2021-06-28 22:41:46,re-ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d,https://github.com/bitcoin/bitcoin/pull/19651#issuecomment-870093984,870093984,
achow101,2020-08-06 17:03:17,We also need to check that new range_end >= old range_end.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r466555962,466555962,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-21 15:58:55,Why? Usually being unable to `ExpandFromCache` is a bad thing as it means the cache is not the size we are expecting.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r474787294,474787294,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-21 16:01:52,What if a descriptor adds private keys that weren't there before?,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r474788781,474788781,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-21 16:04:59,"Why? I don't think it is necessarily wrong for a `ScriptPubKeyMan` to serve both internal and external addresses. We do this in the legacy wallet. Also, it seems like this should break the legacy wallet.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r474790348,474790348,src/wallet/wallet.cpp
S3RK,2020-08-22 07:32:35,"I thought about it and concluded that shouldn't be possible. Here is how I reasoned about it.\n1) If private keys are disabled in the wallet we don't have to worry at all, afaik it's not possible to change the flag on existing wallet. \n2) Now, if keys are enabled and we add new keys I believe the descriptor would be a new one and won't match any existing descriptor. We find a matching descripto",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475058943,475058943,src/wallet/scriptpubkeyman.cpp
S3RK,2020-08-22 07:42:42,"Otherwise we are not able to reuse cache when we extend the range for a descriptor. The test will fail at test/functional/wallet_importdescriptors.py:240. We will try to reuse existing cache and apply it to the new range of a bigger size.\n\nI can't see any downsides to just skipping over missing parts in provided cache. The blanks will be filled with `TopUp()` ad hoc.\n\nIf you have a strong ",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475059774,475059774,src/wallet/scriptpubkeyman.cpp
S3RK,2020-08-22 08:54:08,"Two reasons:\n1) If we don't do that, than semantics of `importdescriptors` changes. What I'm trying to achieve with this pull request is to make the command idempotent and allow for updates. In case when we don't remove specified SPK from previous map in the wallet (`m_internal_spk_managers`/`m_external_spk_managers`) than it's not really possible for a user to change `internal` flag. When she w",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475065518,475065518,src/wallet/wallet.cpp
achow101,2020-08-22 16:44:34,"I believe this is unsafe when the wallet is encrypted and the descriptor uses hardened derivation. Such `DescriptorScriptPubKeyMan`s are entirely reliant on the cache when the wallet is locked and I think there should be an expectation that updating a such a descriptor should make the specified range available, i.e. the cache is filled.\n\nI think it's fine to regenerate the cache from scratch w",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475108102,475108102,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-22 16:45:41,"The only current possibility for new private keys is a multisig descriptor. It should be possible to import a multisig descriptor that has only some of the private keys, then update the descriptor with more of the private keys in the multisig.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475108211,475108211,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-22 16:57:42,"While legacy wallets do use `SetupLegacyScriptPubKeyMan`, they also have `externalspk` and `internalspk` entries which are handled by `LoadActiveScriptPubKeyMan`. So it should break legacy wallets, and I'm not sure why it doesn't. \n\nI would prefer that the changing of the activeness and internalness is handled by another function which should also have a comment about why it should remain sepa",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r475109376,475109376,src/wallet/wallet.cpp
S3RK,2020-08-27 11:07:11,Done. The cache is now regenerated on import.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478335849,478335849,src/wallet/scriptpubkeyman.cpp
S3RK,2020-08-27 11:07:50,Thanks. Changed the code to properly handle this case and added a test for it as well.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478336183,478336183,src/wallet/scriptpubkeyman.cpp
S3RK,2020-08-27 11:15:55,"I analyzed the code and couldn't find any uses of `LoadActiveScriptPubKeyMan` for legacy wallets. The function is only called when 1) we create new wallet, 2) call `importdescriptors` command or 3) when loading a wallet from disk. But if I'm not mistaken there is no active SPKs on disk for legacy wallets. That makes me believe this function is only relevant for descriptor wallets. So I put a guard",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478339994,478339994,src/wallet/wallet.cpp
achow101,2020-08-27 15:47:02,"Hmm, `SetupLegacyScriptPubKeyMan` adds the `LegacySPKM` to the maps that track internal/external, but doesn't write them to disk. I thought it wrote them to disk and now I'm wondering whether not doing so is a bug. But since it doesn't, that's why this works.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478519589,478519589,src/wallet/wallet.cpp
achow101,2020-08-27 16:50:51,"I think it would be better to have this inside of `AddDescriptorKeyWithDB`. Additionally, it needs to check `m_map_crypted_keys` otherwise this won't work when the wallet is encrypted.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478559557,478559557,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-27 16:54:44,"I think using `[]` for access here could be problematic if the `type` isn't already in the map (I think that can happen). I would prefer using `find` here and then if it works, checking that the returned object is not `nullptr`.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r478561752,478561752,src/wallet/wallet.cpp
S3RK,2020-08-28 09:43:41,"I'm not a cpp expert, but the docs say in case when there is no such key a default value will be inserted. \n> std::map<Key,T,Compare,Allocator>::operator[]\n> Returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist.\n\nSo I believe it's safe in this particular case.\n\nI still prefer `spk_mans[type]` over `spk_ma",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r479037965,479037965,src/wallet/wallet.cpp
S3RK,2020-08-28 09:48:33,Done,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r479043727,479043727,src/wallet/scriptpubkeyman.cpp
achow101,2020-08-28 15:56:31,"Right, but the point is that we don't want a default value inserted.\n\nIt might be easier to just use `GetScriptPubKeyMan` here.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r479393567,479393567,src/wallet/wallet.cpp
S3RK,2020-08-30 10:23:50,Done,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r479751284,479751284,src/wallet/wallet.cpp
meshcollider,2021-06-10 05:05:33,I feel like the name of this function is confusing and could be improved.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r648852307,648852307,src/wallet/scriptpubkeyman.cpp
jonatack,2021-06-24 12:30:49,"nit, clang format\n```suggestion\n    auto range = strprintf(""current range = [%d,%d]"", m_wallet_descriptor.range_start, m_wallet_descriptor.range_end - 1);\n```",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657902265,657902265,src/wallet/scriptpubkeyman.cpp
jonatack,2021-06-24 12:56:14,cead7ed This doesn't seem to be covered by any tests?,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657921395,657921395,src/wallet/wallet.cpp
jonatack,2021-06-24 12:57:58,c90f0279 can you extend the test coverage to show the descriptive errors and spec the change?,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657922805,657922805,src/wallet/rpcdump.cpp
jonatack,2021-06-24 13:02:48,"cead7ed ISTM this change should have test coverage (more so given the discussion) to spec the behavior and provide regression coverage. Edit: Ah, if I understand correctly some test coverage is added in the next commit b66b26a. ",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657926759,657926759,src/wallet/wallet.cpp
jonatack,2021-06-24 13:14:16,"5d96704 style nit\n```suggestion\n    const std::string key{internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK};\n```",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657936021,657936021,src/wallet/walletdb.cpp
jonatack,2021-06-24 13:18:50,5d96704 test coverage?,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657939779,657939779,src/wallet/wallet.cpp
jonatack,2021-06-24 13:21:10,5d9670462219b8c753516bfbdc5c7fa23046cd07 does this have test coverage? ,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r657941768,657941768,src/wallet/rpcdump.cpp
fjahr,2021-06-26 11:24:37,This could just be fixed in the previous commit where this line is added,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r659156208,659156208,src/wallet/rpcdump.cpp
fjahr,2021-06-26 11:27:07,Is the newline needed here? Doesn't seem to be the standard.,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r659156447,659156447,src/wallet/wallet.cpp
fjahr,2021-06-26 11:47:27,"nit: I prefer to not create helper variables outside of error handling that are only used inside of error handling so I would inline this. I also think this code be reorganized slightly to make the error cumulative message, i.e. if both errors are hit the error message can include both messages about `range_start` and `range_end`.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r659158411,659158411,src/wallet/scriptpubkeyman.cpp
S3RK,2021-06-28 19:38:48,"I've spent some time, but couldn't come up with anything better. Any suggestions?",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660065213,660065213,src/wallet/scriptpubkeyman.cpp
S3RK,2021-06-28 19:39:09,Restructured the code,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660065396,660065396,src/wallet/scriptpubkeyman.cpp
S3RK,2021-06-28 19:40:09,"This is just a guard and should be never hit unless there is a logical error in the code.\nReplaced with Assert and added a comment",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660065977,660065977,src/wallet/wallet.cpp
S3RK,2021-06-28 19:40:43,"Hm... thanks for pointing to that. Now looked back at that piece, I decided it's better to just drop it.",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660066294,660066294,src/wallet/rpcdump.cpp
S3RK,2021-06-28 19:41:33,"This is covered in the test section under ""Check we can change descriptor internal flag""",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660066750,660066750,src/wallet/wallet.cpp
S3RK,2021-06-28 19:41:46,done,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660066894,660066894,src/wallet/walletdb.cpp
S3RK,2021-06-28 19:42:23,"This is covered in the section ""Check can deactivate active descriptor"". You can try deleting this lines and the test will fail",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660067321,660067321,src/wallet/rpcdump.cpp
S3RK,2021-06-28 19:42:59,Idk how to cover this. One need to introduce a low-level database error to hit this line. I'm not sure it's worth it,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660067648,660067648,src/wallet/wallet.cpp
S3RK,2021-06-28 19:43:14,Done,https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660067782,660067782,src/wallet/rpcdump.cpp
meshcollider,2021-06-28 23:59:32,"I think a start could be to drop `To` from the name, so that it matches `UpdateWalletDescriptor` <-> `CanUpdateWalletDescriptor`",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660188858,660188858,src/wallet/scriptpubkeyman.cpp
jonatack,2021-06-29 14:35:02,"6737d965 suggestion, separate the salient from the redundant\n```diff\n-        self.test_importdesc({**range_request, ""range"": [5, 10]}, wallet=wpriv, success=False,\n-                             error_code=-8, error_message='new range must include current range = [0,20]')\n-        self.test_importdesc({**range_request, ""range"": [0, 10]}, wallet=wpriv, success=False,\n-                    ",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660681405,660681405,test/functional/wallet_importdescriptors.py
jonatack,2021-06-29 14:39:42,"bf68ebc formatting nit\n\n```diff\n         import_request = {""desc"": descsum_create(""pkh("" + key.pubkey + "")""),\n-                 ""timestamp"": ""now"",\n-                 ""label"": ""Descriptor import test""}\n+                          ""timestamp"": ""now"",\n+                          ""label"": ""Descriptor import test""}\n```\n\nor\n\n```diff\n-        import_request = {""desc"": descsum_crea",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660686059,660686059,test/functional/wallet_importdescriptors.py
jonatack,2021-06-29 14:40:54,"6737d96 readability nit\n```diff\n         self.log.info(""Verify we can only extend descriptor's range"")\n         range_request = {""desc"": descsum_create(desc), ""timestamp"": ""now"", ""range"": [5, 10], 'active': True}\n+\n         self.test_importdesc(range_request, wallet=wpriv, success=True)\n         assert_equal(wpriv.getwalletinfo()['keypoolsize'], 6)\n+\n         self.test_importdesc({",https://github.com/bitcoin/bitcoin/pull/19651#discussion_r660687203,660687203,test/functional/wallet_importdescriptors.py
