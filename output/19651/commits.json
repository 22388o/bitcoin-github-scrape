[
  {
    "sha": "bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY4ZWJjMWNkNTU1Zjc5MTEwM2Y4MWFkYzkxMTFlMGU1NWM4MDAz",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:37Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:37Z"
      },
      "message": "wallet: allow to import same descriptor twice",
      "tree": {
        "sha": "afbc1236be46e64d0cbaf91df75e14d5445f5397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afbc1236be46e64d0cbaf91df75e14d5445f5397"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 122,
      "deletions": 51
    },
    "files": [
      {
        "sha": "3ae36131cc16619aa730090bbd44f0fe86d1ab68",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -1566,9 +1566,8 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n         // Check if the wallet already contains the descriptor\n         auto existing_spk_manager = wallet.GetDescriptorScriptPubKeyMan(w_desc);\n         if (existing_spk_manager) {\n-            LOCK(existing_spk_manager->cs_desc_man);\n-            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n-                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            if (!existing_spk_manager->CanUpdateToWalletDescriptor(w_desc, error)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, error);\n             }\n         }\n "
      },
      {
        "sha": "8b397fa1f34454614c6938f4832d2742d066e019",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -1875,6 +1875,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     AssertLockHeld(cs_desc_man);\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n \n+    // Check if provided key already exists\n+    if (m_map_keys.find(pubkey.GetID()) != m_map_keys.end() ||\n+        m_map_crypted_keys.find(pubkey.GetID()) != m_map_crypted_keys.end()) {\n+        return true;\n+    }\n+\n     if (m_storage.HasEncryptionKeys()) {\n         if (m_storage.IsLocked()) {\n             return false;\n@@ -2302,3 +2308,37 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n \n     return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n }\n+\n+void DescriptorScriptPubKeyMan::UpdateWalletDescriptor(WalletDescriptor& descriptor)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    if (!CanUpdateToWalletDescriptor(descriptor, error)) {\n+        throw std::runtime_error(std::string(__func__) + \": \" + error);\n+    }\n+\n+    m_map_pubkeys.clear();\n+    m_map_script_pub_keys.clear();\n+    m_max_cached_index = -1;\n+    m_wallet_descriptor = descriptor;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error)\n+{\n+    LOCK(cs_desc_man);\n+    if (!HasWalletDescriptor(descriptor)) {\n+        error = \"can only update matching descriptor\";\n+        return false;\n+    }\n+\n+    if (descriptor.range_start > m_wallet_descriptor.range_start ||\n+        descriptor.range_end < m_wallet_descriptor.range_end) {\n+        // Use inclusive range for error\n+        error = strprintf(\"new range must include current range = [%d,%d]\",\n+                          m_wallet_descriptor.range_start,\n+                          m_wallet_descriptor.range_end - 1);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "f2d1d87d5569c2932745e1c3905dcdbc041a965e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -624,6 +624,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n \n     bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n+    void UpdateWalletDescriptor(WalletDescriptor& descriptor);\n+    bool CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error);\n     void AddDescriptorKey(const CKey& key, const CPubKey &pubkey);\n     void WriteDescriptor();\n "
      },
      {
        "sha": "8750f508a7a9ff43d136117f5bc7a5e468ff928c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 35,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -3192,52 +3192,34 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n     }\n \n     LOCK(cs_wallet);\n-    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n-\n-    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n-    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n-    if (old_spk_man) {\n+    auto spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (spk_man) {\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+        spk_man->UpdateWalletDescriptor(desc);\n+    } else {\n+        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        spk_man = new_spk_man.get();\n \n-        {\n-            LOCK(old_spk_man->cs_desc_man);\n-            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n-        }\n-\n-        // Remove from maps of active spkMans\n-        auto old_spk_man_id = old_spk_man->GetID();\n-        for (bool internal : {false, true}) {\n-            for (OutputType t : OUTPUT_TYPES) {\n-                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n-                if (active_spk_man && active_spk_man->GetID() == old_spk_man_id) {\n-                    if (internal) {\n-                        m_internal_spk_managers.erase(t);\n-                    } else {\n-                        m_external_spk_managers.erase(t);\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        m_spk_managers.erase(old_spk_man_id);\n+        // Save the descriptor to memory\n+        m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n     }\n \n     // Add the private keys to the descriptor\n     for (const auto& entry : signing_provider.keys) {\n         const CKey& key = entry.second;\n-        new_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        spk_man->AddDescriptorKey(key, key.GetPubKey());\n     }\n \n     // Top up key pool, the manager will generate new scriptPubKeys internally\n-    if (!new_spk_man->TopUp()) {\n+    if (!spk_man->TopUp()) {\n         WalletLogPrintf(\"Could not top up scriptPubKeys\\n\");\n         return nullptr;\n     }\n \n     // Apply the label if necessary\n     // Note: we disable labels for ranged descriptors\n     if (!desc.descriptor->IsRange()) {\n-        auto script_pub_keys = new_spk_man->GetScriptPubKeys();\n+        auto script_pub_keys = spk_man->GetScriptPubKeys();\n         if (script_pub_keys.empty()) {\n             WalletLogPrintf(\"Could not generate scriptPubKeys (cache is empty)\\n\");\n             return nullptr;\n@@ -3249,12 +3231,8 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n     }\n \n-    // Save the descriptor to memory\n-    auto ret = new_spk_man.get();\n-    m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n-\n     // Save the descriptor to DB\n-    ret->WriteDescriptor();\n+    spk_man->WriteDescriptor();\n \n-    return ret;\n+    return spk_man;\n }"
      },
      {
        "sha": "bf1c8fb2e4494026100c80676a76132fedcd527f",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 65,
        "deletions": 13,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -89,17 +89,20 @@ def run_test(self):\n         # # Test importing of a P2PKH descriptor\n         key = get_generate_key()\n         self.log.info(\"Should import a p2pkh descriptor\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"label\": \"Descriptor import test\"},\n-                             success=True)\n+        import_request = {\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                 \"timestamp\": \"now\",\n+                 \"label\": \"Descriptor import test\"}\n+        self.test_importdesc(import_request, success=True)\n         test_address(w1,\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=True,\n                      labels=[\"Descriptor import test\"])\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n \n+        self.log.info(\"Test can import same descriptor with public key twice\")\n+        self.test_importdesc(import_request, success=True)\n+\n         self.log.info(\"Internal addresses cannot have labels\")\n         self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                               \"timestamp\": \"now\",\n@@ -305,7 +308,7 @@ def run_test(self):\n \n         # Check active=False default\n         self.log.info('Check imported descriptors are not active by default')\n-        self.test_importdesc({'desc': descsum_create('pkh([12345678/0h/0h]' + xpub + '/*)'),\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678/1h]' + xpub + '/*)'),\n                               'range' : [0, 2],\n                               'timestamp': 'now',\n                               'internal': True\n@@ -322,6 +325,10 @@ def run_test(self):\n                                \"timestamp\": \"now\"},\n                               success=True,\n                               wallet=wpriv)\n+\n+        self.log.info('Test can import same descriptor with private key twice')\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\"}, success=True, wallet=wpriv)\n+\n         test_address(wpriv,\n                      address,\n                      solvable=True,\n@@ -339,14 +346,25 @@ def run_test(self):\n         wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n         assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+        xprv1 = 'tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52'\n+        acc_xpub1 = 'tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8'  # /84'/0'/0'\n+        chg_xpub1 = 'tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf'  # /84'/1'/0'\n+        xprv2 = 'tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq'\n+        acc_xprv2 = 'tprv8gVCsmRAxVSxyUpsL13Y7ZEWBFPWbgS5E2MmFVNGuANrknvmmn2vWnmHvU8AwEFYzR2ji6EeZLSCLVacsYkvor3Pcb5JY5FGcevqTwYvdYx'\n+        acc_xpub2 = 'tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH'\n+        chg_xpub2 = 'tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh'\n+        xprv3 = 'tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1'\n+        acc_xpub3 = 'tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E'\n+        chg_xpub3 = 'tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb'\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,\" + xprv2 + \"/84h/0h/0h/*,\" + xprv3 + \"/84h/0h/0h/*))#m2sr93jn\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_priv)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,\" + xprv2 + \"/84h/1h/0h/*,\" + xprv3 + \"/84h/1h/0h/*))#q3sztvx5\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -374,14 +392,14 @@ def run_test(self):\n         wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 +\"/*))#tsry0s5e\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_pub)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))#c08a2rzv\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -396,8 +414,15 @@ def run_test(self):\n         change_addr = wmulti_pub.getrawchangeaddress('bech32')\n         assert_equal(change_addr, 'bcrt1qt9uhe3a9hnq7vajl7a094z4s3crm9ttf8zw3f5v9gr2nyd7e3lnsy44n8e')\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 999)\n+\n+        # generate some utxos for next tests\n         txid = w0.sendtoaddress(addr, 10)\n         vout = find_vout_for_address(self.nodes[0], txid, addr)\n+\n+        addr2 = wmulti_pub.getnewaddress('', 'bech32')\n+        txid2 = w0.sendtoaddress(addr2, 10)\n+        vout2 = find_vout_for_address(self.nodes[0], txid2, addr2)\n+\n         self.nodes[0].generate(6)\n         self.sync_all()\n         assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n@@ -411,14 +436,14 @@ def run_test(self):\n         wmulti_priv1 = self.nodes[1].get_wallet_rpc(\"wmulti_priv1\")\n         res = wmulti_priv1.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -434,14 +459,14 @@ def run_test(self):\n         wmulti_priv2 = self.nodes[1].get_wallet_rpc('wmulti_priv2')\n         res = wmulti_priv2.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,\" + xprv2 + \"/84h/0h/0h/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,\" + xprv2 + \"/84h/1h/0h/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -531,6 +556,33 @@ def run_test(self):\n         )\n \n \n+        self.log.info(\"Amending multisig with new private keys\")\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv3\", descriptors=True)\n+        wmulti_priv3 = self.nodes[1].get_wallet_rpc(\"wmulti_priv3\")\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xprv2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+\n+        rawtx = self.nodes[1].createrawtransaction([{'txid': txid2, 'vout': vout2}], {w0.getnewaddress(): 9.999})\n+        tx = wmulti_priv3.signrawtransactionwithwallet(rawtx)\n+        assert_equal(tx['complete'], True)\n+        self.nodes[1].sendrawtransaction(tx['hex'])\n+\n         self.log.info(\"Combo descriptors cannot be active\")\n         self.test_importdesc({\"desc\": descsum_create(\"combo(tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*)\"),\n                               \"active\": True,"
      }
    ]
  },
  {
    "sha": "f1b7db14748d9ee04735b4968366d33bc89aea23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWI3ZGIxNDc0OGQ5ZWUwNDczNWI0OTY4MzY2ZDMzYmM4OWFlYTIz",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:44Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:44Z"
      },
      "message": "wallet: don't mute exceptions in importdescriptors",
      "tree": {
        "sha": "287fea729cdd667a49f8933193e99e314c5ea61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287fea729cdd667a49f8933193e99e314c5ea61f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b7db14748d9ee04735b4968366d33bc89aea23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf68ebc1cd555f791103f81adc9111e0e55c8003"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5f0d88288f01f4b449f93c76f0ebb2d9f837578a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1b7db14748d9ee04735b4968366d33bc89aea23/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1b7db14748d9ee04735b4968366d33bc89aea23/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f1b7db14748d9ee04735b4968366d33bc89aea23",
        "patch": "@@ -1590,10 +1590,6 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n     } catch (const UniValue& e) {\n         result.pushKV(\"success\", UniValue(false));\n         result.pushKV(\"error\", e);\n-    } catch (...) {\n-        result.pushKV(\"success\", UniValue(false));\n-\n-        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n     }\n     if (warnings.size()) result.pushKV(\"warnings\", warnings);\n     return result;"
      }
    ]
  },
  {
    "sha": "586f1d53d60880ea2873d860f95e3390016620d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODZmMWQ1M2Q2MDg4MGVhMjg3M2Q4NjBmOTVlMzM5MDAxNjYyMGQx",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:47Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "wallet: maintain SPK consistency on internal flag change",
      "tree": {
        "sha": "c866e742a241e117498c5986e3247d46e293a4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c866e742a241e117498c5986e3247d46e293a4df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586f1d53d60880ea2873d860f95e3390016620d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/586f1d53d60880ea2873d860f95e3390016620d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1b7db14748d9ee04735b4968366d33bc89aea23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b7db14748d9ee04735b4968366d33bc89aea23"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ae490d5cc793d2b59a9793b17ee7953e5fe2e33",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586f1d53d60880ea2873d860f95e3390016620d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586f1d53d60880ea2873d860f95e3390016620d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=586f1d53d60880ea2873d860f95e3390016620d1",
        "patch": "@@ -3153,12 +3153,21 @@ void CWallet::AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n \n void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n {\n+    // Activating ScriptPubKeyManager for a given output and change type is incompatible with legacy wallets.\n+    // Legacy wallets have only one ScriptPubKeyManager and it's active for all output and change types.\n+    Assert(IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto& spk_mans_other = internal ? m_external_spk_managers : m_internal_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n+    if (spk_mans_other[type] == spk_man) {\n+        spk_mans_other[type] = nullptr;\n+    }\n+\n     NotifyCanGetAddressesChanged();\n }\n "
      }
    ]
  },
  {
    "sha": "6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzM3ZDk2NTViY2Y1MjdhZmJkODVkNjEwZDgwNWEyZDBmZDI4YzRm",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:50Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "test: wallet importdescriptors update existing",
      "tree": {
        "sha": "5bc781830b98d9a9478196753dfd1306affd2863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bc781830b98d9a9478196753dfd1306affd2863"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "586f1d53d60880ea2873d860f95e3390016620d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/586f1d53d60880ea2873d860f95e3390016620d1"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 61,
      "deletions": 5
    },
    "files": [
      {
        "sha": "adde375e545687bd756d0f134a27f7e594b0f22c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 61,
        "deletions": 5,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6737d9655bcf527afbd85d610d805a2d0fd28c4f/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6737d9655bcf527afbd85d610d805a2d0fd28c4f/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "patch": "@@ -79,7 +79,6 @@ def run_test(self):\n         # RPC importdescriptors -----------------------------------------------\n \n         # # Test import fails if no descriptor present\n-        key = get_generate_key()\n         self.log.info(\"Import should fail if a descriptor is not provided\")\n         self.test_importdesc({\"timestamp\": \"now\"},\n                              success=False,\n@@ -103,11 +102,12 @@ def run_test(self):\n         self.log.info(\"Test can import same descriptor with public key twice\")\n         self.test_importdesc(import_request, success=True)\n \n+        self.log.info(\"Test can update descriptor label\")\n+        self.test_importdesc({**import_request, \"label\": \"Updated label\"}, success=True)\n+        test_address(w1, key.p2pkh_addr, solvable=True, ismine=True, labels=[\"Updated label\"])\n+\n         self.log.info(\"Internal addresses cannot have labels\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"internal\": True,\n-                              \"label\": \"Descriptor import test\"},\n+        self.test_importdesc({**import_request, \"internal\": True},\n                              success=False,\n                              error_code=-8,\n                              error_message=\"Internal addresses should not have a label\")\n@@ -255,6 +255,39 @@ def run_test(self):\n         self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n                               success=False, error_code=-8, error_message='Range is too large')\n \n+        self.log.info(\"Verify we can only extend descriptor's range\")\n+        range_request = {\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [5, 10], 'active': True}\n+        self.test_importdesc(range_request, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 6)\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 11)\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        # Can keep range the same\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.test_importdesc({**range_request, \"range\": [5, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [5, 20]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.log.info(\"Check we can change descriptor internal flag\")\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": True}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getnewaddress, '', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 21)\n+        wpriv.getrawchangeaddress('p2sh-segwit')\n+\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": False}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        wpriv.getnewaddress('', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getrawchangeaddress, 'p2sh-segwit')\n+\n         # Make sure ranged imports import keys in order\n         w1 = self.nodes[1].get_wallet_rpc('w1')\n         self.log.info('Key ranges should be imported in order')\n@@ -306,6 +339,18 @@ def run_test(self):\n         w1.keypoolrefill()\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 5 * 3)\n \n+        self.log.info(\"Check we can change next_index\")\n+        # go back and forth with next_index\n+        for i in [4, 0, 2, 1, 3]:\n+            self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                                  'active': True,\n+                                  'range': [0, 9],\n+                                  'next_index': i,\n+                                  'timestamp': 'now'\n+                                  },\n+                                 success=True)\n+            assert_equal(w1.getnewaddress('', 'bech32'), addresses[i])\n+\n         # Check active=False default\n         self.log.info('Check imported descriptors are not active by default')\n         self.test_importdesc({'desc': descsum_create('pkh([12345678/1h]' + xpub + '/*)'),\n@@ -316,6 +361,17 @@ def run_test(self):\n                              success=True)\n         assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n \n+        self.log.info('Check can activate inactive descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': True,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        address = w1.getrawchangeaddress('legacy')\n+        assert_equal(address, \"mpA2Wh9dvZT7yfELq1UnrUmAoc5qCkMetg\")\n+\n         # # Test importing a descriptor containing a WIF private key\n         wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n         address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\""
      }
    ]
  },
  {
    "sha": "3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWZhZjgzYzc1Y2Q4ZGMyZmEwODQ1MzdiOGVkNjcxNWZiNThjMDRk",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:53Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "wallet: deactivate descriptor",
      "tree": {
        "sha": "5cfbf5602d4d1379935bee09713a555bc4970b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfbf5602d4d1379935bee09713a555bc4970b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6737d9655bcf527afbd85d610d805a2d0fd28c4f"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7de12c3a9488a75df6b416804004318a4bf74883",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -1584,6 +1584,10 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 wallet.AddActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n             }\n+        } else {\n+            if (w_desc.descriptor->GetOutputType()) {\n+                wallet.DeactivateScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n         }\n \n         result.pushKV(\"success\", UniValue(true));"
      },
      {
        "sha": "521708e69c7ad10ad9d387976845afbf8b77c8ab",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -3171,6 +3171,23 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     NotifyCanGetAddressesChanged();\n }\n \n+void CWallet::DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n+{\n+    auto spk_man = GetScriptPubKeyMan(type, internal);\n+    if (spk_man != nullptr && spk_man->GetID() == id) {\n+        WalletLogPrintf(\"Deactivate spkMan: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+        WalletBatch batch(GetDatabase());\n+        if (!batch.EraseActiveScriptPubKeyMan(static_cast<uint8_t>(type), internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": erasing active ScriptPubKeyMan id failed\");\n+        }\n+\n+        auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+        spk_mans[type] = nullptr;\n+    }\n+\n+    NotifyCanGetAddressesChanged();\n+}\n+\n bool CWallet::IsLegacy() const\n {\n     if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {"
      },
      {
        "sha": "001b94047ab9a36647e7fd909efed66f2218f4b5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -895,6 +895,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Remove specified ScriptPubKeyMan from set of active SPK managers. Writes the change to the wallet file.\n+    //! @param[in] id The unique id for the ScriptPubKeyMan\n+    //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n+    //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n+    void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n+\n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "203fca8dd6e90e8a87f2c94b56edc652d41dc0da",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -209,6 +209,12 @@ bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bo\n     return WriteIC(make_pair(key, type), id);\n }\n \n+bool WalletBatch::EraseActiveScriptPubKeyMan(uint8_t type, bool internal)\n+{\n+    const std::string key{internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK};\n+    return EraseIC(make_pair(key, type));\n+}\n+\n bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey)\n {\n     // hash pubkey/privkey to accelerate wallet load"
      },
      {
        "sha": "d740aaadb3e7bc27d2782ad9068dff382c85de87",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -253,6 +253,7 @@ class WalletBatch\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n+    bool EraseActiveScriptPubKeyMan(uint8_t type, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);"
      },
      {
        "sha": "262175c7895fecacaf9c2ed65a1633528ea3699c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -372,6 +372,21 @@ def run_test(self):\n         address = w1.getrawchangeaddress('legacy')\n         assert_equal(address, \"mpA2Wh9dvZT7yfELq1UnrUmAoc5qCkMetg\")\n \n+        self.log.info('Check can deactivate active descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': False,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n+        self.log.info('Verify activation state is persistent')\n+        w1.unloadwallet()\n+        self.nodes[1].loadwallet('w1')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n         # # Test importing a descriptor containing a WIF private key\n         wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n         address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\""
      }
    ]
  }
]