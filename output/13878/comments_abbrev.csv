DrahtBot,2018-08-04T20:12:42Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14372 (msvc: build secp256k1 and leveldb locally by ken2812221)\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14151 (windows: Fix remaining compiler warnings (MSVC) by practicalswift)\n\nIf you consider this pull request important, please also help to rev",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-410474732,410474732,
alexeyneu,2018-08-15T17:12:00Z,"but there's override:  \n```c++\n#include <fstream>\nint main(int argc, char* argv[])\n{	\n	std::fstream tr(L""hk"");\n	return 0;\n}\n```\ncompiles fine.  \n( msys2 )\n```\nc++ json_c.cpp -lws2_32 -static-libgcc -static-libstdc++ -static-libgcc -static-libstdc++ -Wl,-Bstatic -lstdc++ -lpthread\n```\n ",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413267200,413267200,
ken2812221,2018-08-15T17:26:20Z,This is for mingw,https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413271640,413271640,
alexeyneu,2018-08-15T19:10:41Z,"![untitled 1](https://user-images.githubusercontent.com/31589671/44167850-f85c2000-a0d7-11e8-9e9b-6a1f509fedac.jpg)  \n@ken2812221 unexpected statement\n",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413303458,413303458,
ken2812221,2018-08-16T02:55:27Z,"@alexeyneu To be clear, this is for the mingw on Ubuntu 18.04 which is what we use for gitian to build release binaries. If you can test this on Ubuntu, that would be great.",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413408212,413408212,
alexeyneu,2018-08-16T10:32:25Z,"msys2 `.h` files are nothing more then  msvc  copy-paste. it may not work but linux edition  has same headers .\ni've used it in msvc with np. this applies to constructor only.  this stuff isn't avaible for\n`.open()` and others. last time i've seen there smth own-written was windows edition of watcom c .",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413499968,413499968,
alexeyneu,2018-08-16T23:39:39Z,"Which is to say, i dont see much sense in testing it coz it will work .   \nit's not my PR anyway.  \n",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-413715859,413715859,
ryanofsky,2018-09-05T21:27:48Z,"I don't think I understand how this PR works (does it depend on #13866?), or why reimplementing fstream classes is a good solution compared to alternatives. If this is a bug in boost, wouldn't it be better to fix the bug upstream and maybe patch it locally? Or could we drop the use of boost here and instead use `std::ifstream` `and std::ofstream`?\n\nIt would be helpful to have a clear descripti",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-418887343,418887343,
ken2812221,2018-09-05T23:18:32Z,"`boost::filesystem::i/ofstream` calls `std::filebuf` internally. So if `std::filebuf(wchar_t*)` exist, boost will call that function (MSVC). Otherwise it will call `std::filebuf(char*)` which can lead to encoding issue. After c++17, we can use `std::i/ofstream(std::filesystem::path)`. But before then, we can't.\n\nIf building with libstdc++, we can use its extension stdio_filebuf by passing `FIL",https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-418911903,418911903,
ken2812221,2018-09-07T22:58:31Z,@ryanofsky requested change included and unit tests added.,https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-419587880,419587880,
ken2812221,2018-09-26T00:49:29Z,Rebased and fix all nits from the comment,https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-424548339,424548339,
laanwj,2018-10-18T08:35:52Z,utACK 86eb3b3f1ab594142b6baa9576717ff121f3b745,https://github.com/bitcoin/bitcoin/pull/13878#issuecomment-430923859,430923859,
ryanofsky,2018-09-05T21:36:57Z,"Should this be checking for `__GLIBCXX__` instead of `__GNUC__`? It looks like `__gnu_cxx::stdio_filebuf` might be present in libstdc++ but not libc++ (https://stackoverflow.com/questions/22624503/how-to-get-a-file-descriptor-from-a-stdbasic-ios-for-clang-on-os-x).\n\nWill different workarounds be needed for MSVC and clang?",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215433595,215433595,src/fs.h
ryanofsky,2018-09-06T20:59:13Z,"I think it would be good to add a static assert here to detect if this problem happens with other libraries or versions of libraries:\n\n```c++\n#if defined WIN32 && defined __GLIBCXX__\n...\n#elif WIN32\nstatic_assert(sizeof(*fs::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n    ""Warning: This build is using boost::filesystem ofstream and ifstream ""\n    ""implementations which will ",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215776506,215776506,src/fs.cpp
ryanofsky,2018-09-06T21:59:07Z,"Can we add a comment to describe the bug and workaround? Suggestion:\n\n```c++\n// GNU libstdc++ specific workaround for opening UTF-8 paths on Windows.\n//\n// On Windows, it is only possible to reliably access multibyte file paths through\n// `wchar_t` APIs, not `char` APIs. But because the C++ standard doesn't require\n// ifstream/ofstream `wchar_t` constructors, and the GNU library does",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215791815,215791815,src/fs.h
ryanofsky,2018-09-06T22:09:57Z,"I think I would drop this table but keep the URL link, since the table just duplicates information provided by the code below, and seems actually less readable than the code.\n\nFor reference, https://en.cppreference.com/w/cpp/io/basic_filebuf/open also has a similar table.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215794094,215794094,src/fs.cpp
ryanofsky,2018-09-06T22:15:20Z,"I don't think it's obvious that this is intended to call the `fsbridge::fopen` function above rather than `::fopen`. Would suggesting adding a comment here or writing the namespace.\n\nCould also do the same in `ofstream::open` below.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215795114,215795114,src/fs.cpp
ryanofsky,2018-09-06T22:16:50Z,"`std::move` can be dropped here. Argument is already an rvalue so it has no effect.\n\nSame applies in `ofstream::open` below.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215795466,215795466,src/fs.cpp
ryanofsky,2018-09-06T22:19:47Z,Could you prefix these members with `m_` to match recommended style?,https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215796062,215796062,src/fs.h
ryanofsky,2018-09-06T22:21:49Z,Would be nice to have a unit test to make sure this logic works. I believe this code will actually run on travis through wine.,https://github.com/bitcoin/bitcoin/pull/13878#discussion_r215796524,215796524,src/fs.cpp
ryanofsky,2018-09-14T18:32:17Z,"In commit ""utils: Add fsbridge fstream function wrapper"" (0548f48f19d33cb57b8279d7a647e91d375a916e)\n\nI know this is my own comment, maybe replace ""APIs"" with ""constructors"" on this to make clearer this is referring to the same constructors previously mentioned above.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r217804441,217804441,src/fs.h
ryanofsky,2018-09-14T18:34:03Z,"In commit ""tests: Add test case for std::ios_base::ate"" (6b6c598ab55c60ed5050c0ba0a817dba899384c0)\n\nWould it be possible to add a test accessing a utf8 filesystem path now that #13866 is merged?",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r217804938,217804938,src/test/fs_tests.cpp
ken2812221,2018-09-14T21:02:17Z,"Sure. But this seems only work if #13877 merged, so change this PR to based on it.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r217841611,217841611,src/test/fs_tests.cpp
ryanofsky,2018-09-21T18:40:17Z,"Word ""constructors"" on this line should be changed back to ""APIs"", because this is just referring in general to how multibyte paths need to be accessed on windows, not to stream object constructors in particular.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r219592401,219592401,src/fs.h
practicalswift,2018-09-23T08:10:15Z,"```\n2018-09-22 21:43:16 cpplint(pr=13878): src/fs.h:65:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r219691462,219691462,src/fs.h
practicalswift,2018-09-23T08:10:27Z,"```\n2018-09-22 21:43:16 cpplint(pr=13878): src/fs.h:79:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r219691468,219691468,src/fs.h
practicalswift,2018-10-02T05:18:49Z,Add missing newline at end of file :-),https://github.com/bitcoin/bitcoin/pull/13878#discussion_r221827593,221827593,build_msvc/common.vcxproj
ken2812221,2018-10-03T04:31:51Z,"That seems unnecessary for MSVC project file, they can work without the extra newline. But you can add it in your PR. I don't have strong opinion.",https://github.com/bitcoin/bitcoin/pull/13878#discussion_r222178335,222178335,build_msvc/common.vcxproj
