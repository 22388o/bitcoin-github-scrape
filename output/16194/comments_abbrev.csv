ryanofsky,2019-06-12 15:10:55,"Concept ACK\n\n> that was difficult because of git's inability to split hunks past a certain point\n\nFirst commit seems reasonable to me, and I wouldn't see a need to split it up further. But just for reference I'd recommend trying git add --patch's split and edit commands if you haven't used them before. The split command is good enough for splitting up changes most of the time, and when it ",https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-501318333,501318333,
DrahtBot,2019-06-12 15:19:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16362](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16362.html) (gui: Bilingual translation by hebasto)\n* [",https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-501322057,501322057,
jamesob,2019-06-14 17:44:44,"Thanks for the look, guys. I've made @promag's suggested changes and squashed the second commit into the first.",https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-502202121,502202121,
jamesob,2019-06-19 15:56:35,Rebased and incorporated @MarcoFalke's feedback,https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-503621615,503621615,
jamesob,2019-06-25 14:58:37,"Thanks for the good feedback, @MarcoFalke @ryanofsky. I've incorporated your changes.",https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-505483772,505483772,
MarcoFalke,2019-07-12 15:45:00,"ACK 682a1d0f2004d808b87b3106d0dfae547005e638\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 682a1d0f2004d808b87b3106d0dfae547005e638\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhwngwAq5VhfgfOv6FJFWvZc8NpFrYVMPW/S6u8qLBlZs3q2KZMT7j12l0MQR",https://github.com/bitcoin/bitcoin/pull/16194#issuecomment-510935423,510935423,
promag,2019-06-12 15:48:27,"7064f3045f41731dd8044cb6ef4277daedb06a2c\n\nstatic or in a anonymous namespace?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r292988952,292988952,src/validation.cpp
promag,2019-06-12 16:03:36,"Can be const?\n```cpp\nBlockMap& BlockIndex() const;\n```",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r292996309,292996309,src/validation.h
MarcoFalke,2019-06-17 21:42:31,Should be static,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294530483,294530483,src/validation.cpp
MarcoFalke,2019-06-17 21:46:08,Why is this changed?,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294531631,294531631,src/validation.cpp
MarcoFalke,2019-06-17 21:49:36,Could use `const auto` instead of splitting this into three lines.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294532762,294532762,src/validation.cpp
MarcoFalke,2019-06-17 21:50:14,Same,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294532959,294532959,src/validation.cpp
MarcoFalke,2019-06-17 21:51:18,"Implementation should probably stay in the cpp file, no?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294533313,294533313,src/validation.h
MarcoFalke,2019-06-17 21:52:32,Could explain why this is useful to use instead of the g_blockman.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294533731,294533731,src/validation.h
MarcoFalke,2019-06-17 21:54:40,Why is this moved? Looks like this is `public` before and after.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294534332,294534332,src/validation.h
jamesob,2019-06-18 16:25:57,"Happy to do that, but thought that the explicit type declaration might be helpful since the value is so complicated. If you think `const auto` is better I'll change it.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r294913716,294913716,src/validation.cpp
ryanofsky,2019-06-18 21:00:08,"In commit ""refactoring: move block metadata structures into BlockManager"" (04fa434aabcc9d02bf1f0ceaa3ee4f099642a27a)\n\nShouldn't indent within a namespace (could use clang-format-diff) https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295026012,295026012,src/validation.cpp
ryanofsky,2019-06-18 21:01:47,"In commit ""refactoring: move block metadata structures into BlockManager"" (04fa434aabcc9d02bf1f0ceaa3ee4f099642a27a)\n\n> Should be static\n\nOr equivalently, just move it into the anonymous namespace above.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295026717,295026717,src/validation.cpp
ryanofsky,2019-06-18 21:03:16,"In commit ""refactoring: move block metadata structures into BlockManager"" (04fa434aabcc9d02bf1f0ceaa3ee4f099642a27a)\n\nNote to help review: this is temporary, removed in the next commit",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295027268,295027268,src/validation.cpp
ryanofsky,2019-06-18 21:20:13,"In commit ""refactoring: move block metadata structures into BlockManager"" (3a8f92e51f60287492d1a1bce5e5e58ae029bb67)\n\nI think ideally BlockManager wouldn't depend on CChainState, and especially not on a particular hardcoded instance of it. Since nothing except this one line seems to do this, and this is at the end of a function, I think it'd be good to delete this line and just call CheckBlock",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295033684,295033684,src/validation.cpp
jamesob,2019-06-19 15:14:04,"Good catch, not sure how that got moved.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295354811,295354811,src/validation.h
jamesob,2019-06-19 15:27:24,"Ah sorry, this was a little confusing. Because `pindexBestInvalid` is only used in validation.cpp, I removed it as a member of `CChainState` (though in this revision I forgot to actually remove the declaration - willfix) since it doesn't need to be a part of that interface. There is a change in name only, because `::ChainstateActive().pindexBestInvalid` is nullptr at the time of this declaration.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295361806,295361806,src/validation.cpp
jamesob,2019-06-19 15:28:08,Also worth pointing out that we need to touch this piece of data because it is used by both `CChainState` methods *and* `BlockManager` methods.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295362188,295362188,src/validation.cpp
MarcoFalke,2019-06-19 17:37:25,"Ok, I see that you now removed the CChainstate::pindexBestInvalid, but it could make sense to split this change into a separate commit the next time you have to touch this pull?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295421546,295421546,src/validation.cpp
MarcoFalke,2019-06-19 17:51:38,"Call it ""block tree index map"" or something to not leak implementation details?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295427450,295427450,src/init.cpp
MarcoFalke,2019-06-19 17:53:05,Same,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295428103,295428103,src/init.cpp
ryanofsky,2019-06-19 21:44:04,"In commit ""refactoring: move block metadata structures into BlockManager"" (3a8f92e51f60287492d1a1bce5e5e58ae029bb67)\n\npindexBestInvalid just seems like it should be a BlockManager member. Or am I missing something?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295536946,295536946,src/validation.cpp
ryanofsky,2019-06-19 22:04:39,"In commit ""refactoring: move block metadata structures into BlockManager"" (3a8f92e51f60287492d1a1bce5e5e58ae029bb67)\n\nThis BlockManager -> ChainstateActive() dependency seems like it will make BlockManager harder to test independently and have confusing side effects. Would suggest reverting this line and adding an explicit `std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandid",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295543272,295543272,src/validation.cpp
ryanofsky,2019-06-19 22:17:04,"In commit ""refactoring: remove mapBlockIndex global"" (1e33f16dd47c42a9f6099f6172ebd5f8fbb32ec8)\n\nI'm probably just bikeshedding, but I think having this method is counterproductive and only obfuscates what's going on. In places where this is called in `CChainState` methods it seems clearer to replace `BlockIndex()` calls with direct `m_blockman.m_block_index` references. In places where this i",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r295546719,295546719,src/validation.cpp
jamesob,2019-06-24 15:07:12,"Yep, agree. Willfix.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r296771388,296771388,src/validation.cpp
jamesob,2019-06-24 15:07:43,"Yep, I agree with this. Willfix.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r296771643,296771643,src/validation.cpp
jamesob,2019-06-24 17:49:24,"> pindexBestInvalid just seems like it should be a BlockManager member. Or am I missing something?\n\nIn theory we could, the only problem here is that (i) [`g_blockman` is retired in later commits](https://github.com/bitcoin/bitcoin/pull/15606/commits/df81dc462e72047ed6857d927946cb18e0e9492b#diff-24efdb00bfbe56b140fb006b562cc70bL81) and (ii) pindexBestInvalid is used in non-method functions lik",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r296840549,296840549,src/validation.cpp
jamesob,2019-06-25 15:02:06,Note to reviewers: this is moved to the two callsites below to avoid making reference to a specific CChainState in BlockManager.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r297236706,297236706,src/validation.cpp
ryanofsky,2019-06-26 20:16:23,"re: https://github.com/bitcoin/bitcoin/pull/16194#discussion_r296840549\n\nThanks for explaining. It would be nice to clean up and document these free floating global variables (pindexBestInvalid, pindexBestForkTip, pindexBestForkBase), giving them `g_` prefixes or moving them to appropriate classes so they don't look like local variables. It's beyond the scope of this PR, though.\n\nFWIW, I d",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r297847918,297847918,src/validation.cpp
MarcoFalke,2019-07-12 15:17:38,"style-nit in commit 613c46fe9e refactoring: move block metadata structures into BlockManager:\n\nFor consistency should make both static or put both into a namespace.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303029375,303029375,src/validation.cpp
MarcoFalke,2019-07-12 15:20:30,"style-nit: in commit 613c46fe9e refactoring: move block metadata structures into BlockManager:\n\n`const auto& entry` does the same, less verbose",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303030610,303030610,src/validation.cpp
MarcoFalke,2019-07-12 16:19:16,nit: `mapBlocksUnlinked` does no longer exist,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303054162,303054162,src/init.cpp
ariard,2019-07-15 17:47:21,"nit: comment has just been moved but maybe you could take opportunity to explain better what m_blocks_unlinked is useful for, something like ""a child block B may receive its transactions before ancestor A which means B nChainTx is going to be inaccurate until we received txn for every one of its ancestors. When we accept A, update B nChainTx to accurate number of transactions""",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303557195,303557195,src/validation.h
ariard,2019-07-15 18:47:02,"You may use `auto` there, compiler can do type inference?",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303582007,303582007,src/validation.cpp
ariard,2019-07-15 18:59:57,"nit: now than `AddToBlockIndex` is a public method, it could be commented like ""Create an index entry for given header with minimal metadatas. If header shows most-work it becomes best-tracked-header""",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303587180,303587180,src/validation.h
ariard,2019-07-15 19:13:26,hmmm maybe setDirtyBlockIndex could be part of BlockManager in future commits given this set of block index  is also shared between chainstates? And would let implement batching managed by BlockManager,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303592392,303592392,src/validation.h
ariard,2019-07-15 19:41:16,It's unclear reading commits messages what's the long term destination of `g_blockman` is. Do other parts of the code calling `LookupBlockIndex` will always rely on a global `BlockManager` or should they access to it through their instance of `CChainstate`  after future refactoring ?,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303602629,303602629,src/validation.cpp
jamesob,2019-07-15 20:06:33,"Agree, but don't want to invalidate the move-only nature for this change. Would be a great follow-up if you're on the hunt for PR ideas :).",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303612389,303612389,src/validation.h
jamesob,2019-07-15 20:20:49,Good idea - if I have to rebase this PR for some other reason I'll add it.,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303617999,303617999,src/validation.h
jamesob,2019-07-15 20:24:54,"Eventually, a single `BlockManager` object will be managed and shared to all created `CChainState` objects by something called `ChainstateManager`, to be introduced later (https://github.com/bitcoin/bitcoin/pull/15606/commits/df81dc462e72047ed6857d927946cb18e0e9492b). The single global block index will be accessed through the chainstate manager.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r303619666,303619666,src/validation.cpp
Sjors,2019-09-30 12:55:03,"As @sdaftuar pointed out in https://github.com/bitcoin/bitcoin/issues/16444#issuecomment-514801708 `AcceptBlockHeader` can return early, so we're now calling `CheckBlockIndex(()` more often than before.",https://github.com/bitcoin/bitcoin/pull/16194#discussion_r329560209,329560209,src/validation.cpp
rebroad,2021-04-27 14:11:21,is this necessary when accepted is false?,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r621248222,621248222,src/validation.cpp
rebroad,2021-04-27 14:11:44,is this necessary when accepted_header is false?,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r621248578,621248578,src/validation.cpp
MarcoFalke,2021-04-27 16:56:20,#16453,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r621413302,621413302,src/validation.cpp
MarcoFalke,2021-04-27 16:56:25,#16453,https://github.com/bitcoin/bitcoin/pull/16194#discussion_r621413363,621413363,src/validation.cpp
