jonasschnelli,2017-01-24T08:01:45Z,"I'm not 100% sure if we want this. If we, we would need at least to updated the `listsinceblock`'s RPC help message to mention that if one requests tx's from a block outside the main-chain, that the result will also contain transactions not in the main chain.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274734514,274734514,
kallewoof,2017-01-24T08:11:39Z,"@jonasschnelli Updated the help output. I am not sure what the reasons for not wanting this are, unless you're referring to resource consumption. I think it's a rare (but important) enough case to warrant it.\n\nIt would definitely make it easier for RPC applications checking the validity of existing transactions to explicitly provide these when a reorg affects them. The only other alternative r",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274736218,274736218,
jonasschnelli,2017-01-24T12:59:35Z,"@kallewoof: I missed the point that if you pass in an orphan block to list since, you also get the transactions upwards the chain-fork on the main chain. At first sight, I though you get only tx from the re-orged-off chain in that case.\n\nConcept ACK (and I think it would be clever to list them in an extra array element `reorged:[]`.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274796547,274796547,
kallewoof,2017-01-24T13:24:39Z,@jonasschnelli Gotcha. I updated the OP to clarify that it's also including transactions from the fork point to the active chain tip. I also moved the off chain transactions into a new 'reorged' array. (f501acc & 461d5a3),https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274801494,274801494,
kallewoof,2017-01-25T22:47:45Z,@ryanofsky Thanks for all the feedback! Updated.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275257452,275257452,
gmaxwell,2017-01-26T07:19:46Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275322827,275322827,
kallewoof,2017-01-30T01:59:14Z,"@TheBlueMatt I guess it comes down to what the user expects. I personally expected listsinceblock to show me anything I needed to keep an updated score of what's going on since the given block. In that sense, not showing a transaction vanishing would probably be considered a bug.\n\nRegarding showing an existing transaction in both reorged and transactions, I patched this by ensuring that any tx",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275965701,275965701,
JeremyRubin,2017-01-30T08:45:28Z,"I agree with Matt, this isn't a bugfix, it's feature :) \n\nI think I'm in favor of adding this. I would be more supportive of naming them `replaced` rather than reorged if I understand the semantics properly. Strictly speaking, I'd say a reorged txn is any transaction that was between the old tip and the fork point?\n\nI would also think maybe making this information available with a default ",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276006681,276006681,
kallewoof,2017-01-30T09:05:11Z,"@JeremyRubin Changed as you said, except setting default of `include_replaced` to `true` as I think that will be the most useful case.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276010275,276010275,
laanwj,2017-01-30T11:32:30Z,Moving milestone to 0.15 as this was re-classified as a feature and the feature freeze is long past.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276040284,276040284,
luke-jr,2017-02-10T07:45:16Z,"It occurs to me that the key `""replaced""` may not be ideal, since there is no guarantee these transactions are now conflicted and won't get re-mined. Perhaps `""removed""`?",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278878727,278878727,
kallewoof,2017-02-10T08:22:12Z,"I tried to find actual cases where this happened, but had a hard time finding a case that wasn't the cause of a double spend. It would require that the transaction is NOT in the mempool of the node, or it would appear as normal in `transactions`. There may be a case I haven't thought of though, so you may be right, `removed` is a safer bet for sure.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278884664,278884664,
kallewoof,2017-02-10T14:21:33Z,"@luke-jr Sorry about sloppiness, I thought I got all of them in the initial two squashme's.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278952897,278952897,
ryanofsky,2017-02-23T21:57:50Z,"utACK ad57cefb6583ab669d8da21d0bf808e2d38ef04a.\n\nComparing against previously ACKed 461d5a37a3d83edbeedb701ed207bc14412dee0d, the both-sides dedup code and the new API tweaks and comments looked good.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282134568,282134568,
kallewoof,2017-02-25T02:55:39Z,"@TheBlueMatt I didn't think about that. \n\nBut would the wallet actually do that to its own transaction? Throw out of mempool I mean. ",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454740,282454740,
kallewoof,2017-02-25T02:56:56Z,s/wallet/node/,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454782,282454782,
sipa,2017-02-25T02:58:36Z,"The wallet doesn't control the mempool, and the mempool behaves\nindependently. Anything else would be a privacy leak, as the mempool is\nobservable through the P2P network.\n",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454883,282454883,
luke-jr,2017-02-25T03:40:01Z,"IMO if the stale block is pruned, throwing an exception is the right thing to do. The caller should be able to figure out its own rewinding back to the last common block.\n\n(P.S. Perhaps the tests here should cover the case where there are three potential-chains involved?)",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282457011,282457011,
kallewoof,2017-02-25T17:13:00Z,Good point about testing 3 chains. Will add a test like that.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282497572,282497572,
kallewoof,2017-02-25T18:06:50Z,I just realized the split network feature in the QA framework only supports one split (2 chains) right now. I think I'll make a separate PR to extend that functionality and add more tests for 3+ chains after this is merged.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282501295,282501295,
kallewoof,2017-02-26T01:10:11Z,Squashed commits. Unsquashed branch preserved at https://github.com/kallewoof/bitcoin/tree/listsinceblock-include-lost-txs-unsquashed for comparison.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282524695,282524695,
MarcoFalke,2017-02-26T12:09:13Z,"> I just realized the split network feature in the QA framework only\nsupports one split (2 chains) right now. I think I'll make a separate PR to\nextend that functionality and add more tests for 3+ chains after this is\nmerged.\n\nYes, please. Also make sure the extended functionality does not depend on\nthe number of nodes in regtest being exactly 4.\n\nOn Sun, Feb 26, 2017 at 2:10 AM, kallewoof",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282551531,282551531,
kallewoof,2017-02-27T05:24:57Z,@MarcoFalke See #9872.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282631102,282631102,
jtimon,2017-02-27T20:43:00Z,Concept ACK. Agree with @luke-jr in throwing the exception.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282846791,282846791,
kallewoof,2017-03-22T19:37:55Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-288514848,288514848,
jnewbery,2017-04-12T17:28:24Z,"I've only reviewed the test code. It's a shame that this makes the listsinceblock test runtime increase (from 32s to 72s on recent travis runs), although #10198 and  #10082 will help with that.\n\nOne design comment: I'm not convinced it's a good idea to *not* including duplicate transactions in the `removed` array. I think that could be a trap for users. My expectation would be that I could per",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-293650568,293650568,
kallewoof,2017-04-13T02:49:22Z,"@jnewbery Thanks a lot for the review! I've addressed most of your concerns, except for the nit about testing allow_partial flag.\n\nRegarding duplicates in `removed`, I'm neutral personally. Allowing duplicates decreases the code size, so I'm all for the switch personally. (Clarification: I changed the code to allow duplicates.)\n\nUnsquashed (https://github.com/kallewoof/bitcoin/commit/88713",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-293763145,293763145,
luke-jr,2017-04-17T13:41:29Z,Do you plan to remove the `allow_partial` so it always throws an exception?,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294487572,294487572,
kallewoof,2017-04-17T13:59:04Z,"@luke-jr I would love to, personally. I wasn't sure if it was the agreed approach, in the end, but more people have agreed about throwing than not, so I'm going to remove it for now.\n\nEdit: I removed the allow_partial functionality. (The unsquashed results are in the same spot (https://github.com/kallewoof/bitcoin/tree/listsinceblock-include-lost-txs-unsquashed) but since the end result was dr",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294490501,294490501,
jnewbery,2017-04-17T14:24:54Z,"Thanks @kallewoof - I don't really mind too much either way. If I were coding this from scratch, I would prefer to show duplicates in removed, but I'm happy to go along with the consensus and since you've already put in the code to hide duplicates, that's also fine.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294495122,294495122,
kallewoof,2017-04-17T14:40:10Z,"@jnewbery Duplicates **are** shown in `removed` now. What I removed was a different feature, where a user could pass in an 'allow partial' flag which would prevent the node from throwing an exception if a block couldn't be read (useful for pruned nodes), but several people preferred always throwing.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294498691,294498691,
kallewoof,2017-04-20T03:35:28Z,"Realized I had missed one `assert_equal(x, false) -> assert not x`.\n\n[Unsquashed history](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\n* Mar 23: [1](https://github.com/kallewoof/bitcoin/commit/1a1398a11d9c4ddb1c1dfcff3251e6ecaa161f41) → [2](https://github.com/kallewoof/bitcoin/commit/f7405744c45cb7ea614b1896c2ac437374130803) → [3⊱1](https://github",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-295567028,295567028,
kallewoof,2017-04-21T01:27:17Z,"@jnewbery Thanks for feedback! I think I addressed all of the stuff you mentioned. Compare [14⊱1](https://github.com/kallewoof/bitcoin/commit/fc23dfaa37845327f383d890b83ff63b6ac9bb73) & [15⊱2](https://github.com/kallewoof/bitcoin/commit/b7dd458485fdbceddbd5776a0fbeeee825aa70c1).\n\n[[...]](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\n* Apr 20: → [13",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-296003302,296003302,
jnewbery,2017-04-28T19:00:50Z,Looks good. ReACK https://github.com/bitcoin/bitcoin/pull/9622/commits/4578a21bc29768e11f56be600b141d81447db7a6,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-298080559,298080559,
kallewoof,2017-05-08T04:45:20Z,"Rebased due to conflicts.\n\nEdit: removed some irrelevant asserts that started causing errors in tests. (Not sure why a clean chain with generate(101) would yield 5100 BTC instead of 50, but no matter.)",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-299771851,299771851,
jnewbery,2017-05-15T18:18:48Z,"> Edit: removed some irrelevant asserts that started causing errors in tests. (Not sure why a clean chain with generate(101) would yield 5100 BTC instead of 50, but no matter.)\n\nLooks like you've reintroduced the lines:\n```python\n        self.nodes[2].generate(101)\n        self.sync_all()\n```\ninto the `test_reorg()` function, which means you're now generating 202 blocks (so node 2 no",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-301559797,301559797,
kallewoof,2017-05-16T00:42:19Z,"@jnewbery Ahh, thanks. Yeah, that is obviously it. I am just going to remove the double generate in test_reorg.\n\n[[...]](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\n* May 16: → [16⊱2](https://github.com/kallewoof/bitcoin/commit/954d3572269bbb273b3f1e01089b464d79337af6)\n",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-301643087,301643087,
sipa,2017-07-12T23:05:11Z,utACK 5d352044ca7f29f992b4de46d461bccc86326ba1 with a few nits. I did not review the tests.,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-314922672,314922672,
kallewoof,2017-07-13T01:34:22Z,@sipa Thanks for the review. I've addressed your nits in https://github.com/kallewoof/bitcoin/commit/3a10e7c49108dde97d999f46bbb36ce905887a0e,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-314944327,314944327,
kallewoof,2017-07-18T04:33:19Z,"@TheBlueMatt Thanks for the review! I've addressed all of your nits, I believe. The unsquashed changes are in https://github.com/kallewoof/bitcoin/commit/5166d0e4f819ab4b430103fa350f8f882f1b1e2f and https://github.com/kallewoof/bitcoin/commit/299c00c56b4361c46a2dd9cc2fa4d4beb8bc2250.\n",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-315955470,315955470,
TheBlueMatt,2017-07-18T21:36:20Z,"I think this maybe missed 15, sadly. Its a nice change, but not a bugfix.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316205231,316205231,
kallewoof,2017-07-19T02:12:55Z,"That's disheartening, but ah well.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316252215,316252215,
TheBlueMatt,2017-07-19T20:42:46Z,"utACK d6115c21a790e139bb45ec6dee421a976bc21eaf. Yea, Core has been in a near-constant state of growing pains for some time it seems. Recently its grown active enough to be just beyond the ability of any individual to keep up with everything, and so things occasionally move slower than they should :(. Anyway, up to @laanwj, this isnt a bugfix, but its pretty clean so maybe he's still willing to pul",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316510975,316510975,
kallewoof,2017-07-19T23:12:00Z,I'd say let's just push it to 16 milestone. I'll be noisy about it this time. :),https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316546764,316546764,
TheBlueMatt,2017-07-19T23:18:39Z,"Heh, yes, if things have been sitting for a while definitely be noisy!\n\nOn July 19, 2017 7:12:08 PM EDT, kallewoof <notifications@github.com> wrote:\n>I'd say let's just push it to 16 milestone. I'll be noisy about it this\n>time. :)\n",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316548081,316548081,
laanwj,2017-07-20T15:06:20Z,"Needs rebase.\n\n> I'd say let's just push it to 16 milestone. I'll be noisy about it this time. :)\n\nUp to you, though given how long this has been open and how much interest and review this has I don't have a particular problem with merging this into 0.15 still.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316732680,316732680,
kallewoof,2017-07-21T02:01:58Z,"@laanwj Rebased. And I'd *love* to have this in 15, personally. I just don't wanna rush anything for the sake of the PR being old.",https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316880837,316880837,
sipa,2017-07-21T17:11:22Z,utACK,https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-317058639,317058639,
ryanofsky,2017-01-24T21:03:46Z,"I think it would be helpful to add a comment about -depth here. I was staring at this a long time to figure out how it worked. Comment could say: ""Pass -depth as minDepth to prevent any filtering in ListTransactions. (Works because tx can only conflict with transactions after pindex, so GetDepthInMainChain will always return at least (1-depth)).""",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97649800,97649800,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-24T21:14:15Z,"Would s/back to the fork point/from blockhash back to the fork point/ to clarify, because it sounds to me like this is referring to transactions between the active tip and the fork point (making the rest of the sentence confusing).",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652282,97652282,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-24T21:16:20Z,Need documentation update to accompany this.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652701,97652701,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-24T21:26:03Z,Really sending from node 1  here (even if key originally comes from node 2),https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97654691,97654691,qa/rpc-tests/listsinceblock.py
ryanofsky,2017-01-24T21:27:38Z,unused variable,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97655014,97655014,qa/rpc-tests/listsinceblock.py
ryanofsky,2017-01-24T21:34:54Z,"Maybe condense this block to a single line, and add a check for txid2 (untested)\n\n```\nassert_equal(any(tx['txid'] == txid1 for tx in lsbres['reorged']), True)\nassert_equal(any(tx['txid'] == txid2 for tx in lsbres['transactions']), True)\n```",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97656509,97656509,qa/rpc-tests/listsinceblock.py
kallewoof,2017-01-25T04:56:54Z,"@ryanofsky Ahh, nice! I didn't know about `any()`.\n\nSince txid2 is not related to nodes[0], it will not list it anywhere so that second assert_equal will not be true.\n\nThanks for all the feedback! I believe everything you suggested is in 9caa0ec & 131df5a.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97709529,97709529,qa/rpc-tests/listsinceblock.py
ryanofsky,2017-01-25T15:18:07Z,"Maybe change tx0 and tx1 to tx1 and tx2 to match code. Also code is generating 6 and 7 blocks instead of 3 and 4, so maybe that could be changed to match the example.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97799838,97799838,qa/rpc-tests/listsinceblock.py
ryanofsky,2017-01-25T15:28:02Z,"Would remove parentheses since (at minimum -depth) is the important part. Also, technically I believe the minimum is 1-depth. Maybe:\n\n```\n// Use -depth as minDepth parameter to ListTransactions to prevent incoming\n// transactions from being filtered. These transactions have negative\n// confirmations, but always greater than -depth.\n```\n",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97802387,97802387,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-28T20:09:46Z,"I dont believe this prevents listing transactions which were on both sides of the fork? I'm pretty sure we dont want to list such transactions in a ""reorged"" list.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r98338381,98338381,src/wallet/rpcwallet.cpp
luke-jr,2017-02-02T20:53:33Z,Not sure this needs to be optional...?,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99217146,99217146,src/wallet/rpcwallet.cpp
luke-jr,2017-02-02T21:00:08Z,"Why do we need `ListTransactions`'s return value? If it doesn't get inserted here, it won't later-on either, right?",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218487,99218487,src/wallet/rpcwallet.cpp
luke-jr,2017-02-02T21:01:06Z,"IMO this PR doesn't need to modify `ListTransactions`, and this ought to be move to a separate PR.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218671,99218671,src/wallet/rpcwallet.cpp
kallewoof,2017-02-02T21:13:14Z,"For the case where tx0 is in reorged and main chain both (see `test_double_send`), both versions of the transaction will appear in the results (once in 'transactions' and once in 'replaced'). To prevent that, I check if `ListTransactions` appended to the transactions array -- if it did, I need to not include in replaced.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221063,99221063,src/wallet/rpcwallet.cpp
kallewoof,2017-02-02T21:14:38Z,"Me neither. It was mostly suggested as a way for legacy code to cope better, but only really crappy legacy code (that would break when a new key was added to an existing dictionary) would be affected I guess.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221347,99221347,src/wallet/rpcwallet.cpp
kallewoof,2017-02-02T21:15:07Z,See above case with a tx being sent on both chains.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221465,99221465,src/wallet/rpcwallet.cpp
luke-jr,2017-02-10T09:18:18Z,"""replaced""",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496476,100496476,src/wallet/rpcwallet.cpp
luke-jr,2017-02-10T09:18:25Z,"""replaced""",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496490,100496490,src/wallet/rpcwallet.cpp
kallewoof,2017-02-10T14:20:49Z,Done,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543111,100543111,src/wallet/rpcwallet.cpp
kallewoof,2017-02-10T14:20:53Z,Done,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543125,100543125,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T16:05:06Z,"Maybe instead of this and the next line,\n""If \""blockhash\"" is no longer a part of the main chain, transactions from the fork point onward are included.\n""\n""Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \""removed\"" array.\n""",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102971565,102971565,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T16:20:47Z,"Hmm, not sure how I feel about this. For pruning nodes, it may be more useful to return a partial list and a message indicating the results are incomplete rather than throw wholesale.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102975099,102975099,src/wallet/rpcwallet.cpp
kallewoof,2017-02-24T17:36:09Z,Makes sense. Changed.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102991590,102991590,src/wallet/rpcwallet.cpp
kallewoof,2017-02-24T17:49:59Z,"Isn't that slightly dangerous? I mean, if people don't realize the node only has a subset of all blocks in some cases, they might miss the ""partial"" flag and never realize they potentially missed something. Even if it's their own node. Someone could even time an attack based on that.\n\nTo take a step back, the situation here is that some software which uses listsinceblock believes the chain is ",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102994237,102994237,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T17:56:39Z,"True. I'm not sure what the right answer here is...clearly we dont want it to be so easy to miss transactions, but on the other hand, it sucks to not have the option here. A different approach might be to iterate over mapWallet and find all transactions which have a hash of a disconnected block, which I believe is correct as long as the block was, at some point, on the active chain, though might n",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102995601,102995601,src/wallet/rpcwallet.cpp
kallewoof,2017-02-24T18:14:51Z,"Hm.. It almost feels like I can just get the block headers by iterating `altchainindex` up to the fork point and put those in a set and find the removed transactions in the initial mapWallet iteration. That way there's no need to read in the blocks at all and can get rid of `listed` as well. Will try that, thanks for the nudge!",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102999126,102999126,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T19:17:45Z,"Yea, I was heasitant to recommend doing it alone because I'm not confident about how safe it is to make sure the wallet's data is always right, will have to think more and review once you have it coded :).",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103012427,103012427,src/wallet/rpcwallet.cpp
kallewoof,2017-02-24T19:32:21Z,"It seems reasonable, but I'm a bit stuck on how to get the block hash for a tx that is not in the main chain. It seems like CMerkleTx's blockHash uint256 is only set if in the main chain...",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103015587,103015587,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T21:43:15Z,"Oh, sorry, you're right...hashBlock is always something in the main chain (so you would only be able to print conflicted transactions and not transactions which went back to 0conf).",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103039369,103039369,src/wallet/rpcwallet.cpp
kallewoof,2017-02-24T23:12:05Z,"Options:\n①. Try to respect the path taken which requires the blocks as removed transactions do not track the block they were in, meaning if a node prunes out the block, the operation fails.\n②. Ignore the path and simply show all removed transactions between the fork point and the chain tip, which requires NO loading of blocks (faster), but means the caller will get irrelevant removed transacti",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103052921,103052921,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-24T23:21:42Z,"There is a second con to ② - it cannot list transactions which went from confirmed to 0-conf, as they now have a hashBlock of null, which I think is somewhat of a blocker to using that approach. Another option is to have an optional parameter (default to off) which allows you to get partial-removed-data.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103053978,103053978,src/wallet/rpcwallet.cpp
kallewoof,2017-02-25T01:56:06Z,"A 0-conf tx will be in the mempool right? Presuming it is, it will in fact be in the transactions array (I think).\n\nThe allow partial parameter makes sense to me. I think I'll do that for starters until we make a decision (which may be another PR).",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103066570,103066570,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-02-25T02:16:06Z,"That isnt a guarantee, because mempool may be limited.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103067420,103067420,src/wallet/rpcwallet.cpp
luke-jr,2017-02-25T03:43:57Z,"No `else for` please.\n\n```C++\n} else {\n    for (const CTransactionRef& tx : block.vtx) {\n```",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103069994,103069994,src/wallet/rpcwallet.cpp
jnewbery,2017-04-12T16:24:35Z,"Is it possible to use the sendtoaddress RPC here instead of {create,sign,send}rawtransaction? The rawtransaction RPCs force you to explicitly do things like set change addresses and make assumptions about fee rates, that could break this test in future.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197184,111197184,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:26:49Z,"Please don't use `print()` calls in test cases. Either remove the line entirely, or add a `self.log.debug()` call if you think this information will be useful for debugging in future.\n\nThere are several other instances of this below. I won't add additional review comments.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197723,111197723,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:29:17Z,"nit: no need for an assert_equal(True, True) here. Instead:\n```python\nassert any(tx['txid'] == txid1 for tx in lsbres['removed']), ""txid1 not found in listsinceblock removed list""\n```",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198285,111198285,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:31:49Z,"again, no need to assert_equal(False, False). Instead:\n```python\nassert 'removed' not in lsbres2\n```\nIn general, we use assert_equal when comparing two variables because it prints the values of those variables, ie assert_equal(x, y) will print the values of x and y if they're not equal, but assert x == y will not print the values of x and y. If you're asserting the truthiness of one variab",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198874,111198874,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:32:17Z,Great docstrings :+1: ,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198985,111198985,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:33:09Z,"as above for assert_equal(False, False). There are more instances of this below. I won't add additional comments.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199231,111199231,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:36:32Z,"If you're expecting this to work, can you assert on the returned value?",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199997,111199997,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:38:08Z,"nit: I'd prefer `run_test()` to appear at the top of the test case, with the sub-tests below. When I come to read a test-case, it flows better for me if run test (which is called first) appears at the top.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111200323,111200323,test/functional/listsinceblock.py
jnewbery,2017-04-12T16:42:19Z,"nit: it'd be nice to test this branch in the functional test, both with and without the partial flag.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111201429,111201429,src/wallet/rpcwallet.cpp
jnewbery,2017-04-12T16:44:20Z,:+1: comments!,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111202013,111202013,src/wallet/rpcwallet.cpp
kallewoof,2017-04-13T02:10:14Z,Unfortunately `sendtoaddress` doesn't let me choose the UTXO so I don't think I can use it here.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298627,111298627,test/functional/listsinceblock.py
kallewoof,2017-04-13T02:11:09Z,Removed all `print()`s. They seemed vaguely useful but not enough to warrant keeping them around long term.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298694,111298694,test/functional/listsinceblock.py
kallewoof,2017-04-13T02:23:36Z,"If the transaction cannot be gotten, an exception is raised (I swapped the txid out for a random hex below):\n```\n2017-04-13 02:22:05.191000 TestFramework (ERROR): JSONRPC error\nTraceback (most recent call last):\n  File ""/Users/karljohan-alm/workspace/bitcoin-kw/test/functional/test_framework/test_framework.py"", line 148, in main\n    self.run_test()\n  File ""./listsinceblock.py"", line 25",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111299791,111299791,test/functional/listsinceblock.py
kallewoof,2017-04-13T02:27:02Z,Good idea. Changing.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111300106,111300106,test/functional/listsinceblock.py
kallewoof,2017-04-17T14:15:20Z,"@TheBlueMatt I took the liberty to remove he allow_partial flag as I've seen more support for always throwing than for having the flag and only throwing sometimes. The unsquashed tree has everything in it still so it'd be no effort to resurrect this, if you or someone felt strongly enough about it.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111747206,111747206,src/wallet/rpcwallet.cpp
kallewoof,2017-04-17T14:24:51Z,"I somehow skipped over this one. Fixed in squashed, unsquashed commit is https://github.com/kallewoof/bitcoin/commit/72ec1eaeda81c63a3e22fe0985ec02537082c9eb",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111748657,111748657,test/functional/listsinceblock.py
jnewbery,2017-04-20T14:07:13Z,"When adding RPCs or arguments, good advice is to treat null arguments the same as missing arguments: https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112140887\n\nI think that means this line would become:\n\n`bool include_removed = (request.params.size() < 4 || request.params[3].isNull() || request.params[3].get_bool());`",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112462030,112462030,src/wallet/rpcwallet.cpp
jnewbery,2017-04-20T14:26:13Z,"This comment is fine. Alternatively you could assert something like:\n\n```python\nassert self.nodes[0].gettransaction(txid1)['txid'] == txid1, ""gettransaction failed to find txid1 not found""\n```",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112467036,112467036,test/functional/listsinceblock.py
jnewbery,2017-04-20T14:37:37Z,"Now that you've split this into sub-tests, can you move the lines:\n\n```python\nself.nodes[2].generate(101)\nself.sync_all()\n```\n\ninto the `run_test()` function before calling `test_reorg()`. It's best if sub-tests have no shared state between them. You should be able to re-order or skip tests without breaking them, and generating the chain in `test_reorg()` breaks that assumption.\n\",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112469961,112469961,test/functional/listsinceblock.py
jnewbery,2017-04-20T14:39:14Z,`txid2` is unused so you don't need to assign it here.,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112470339,112470339,test/functional/listsinceblock.py
jnewbery,2017-04-20T14:41:53Z,consider using named arguments here so it's clear to the reader what the arguments are for (you can also omit the optional `target_confirmations` and `include_watchonly` arguments),https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112471059,112471059,test/functional/listsinceblock.py
jnewbery,2017-04-20T14:48:50Z,"These variables might warrant their own comments now, since it's not immediately obvious what they're doing:\n\npindex - transactions from this block onwards should be included in the result. If the specified block was not in the main chain, pindex is the block where the chain forked\npaltindex - used to count back from the specified block to the fork point to collect transactions for the remov",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112473044,112473044,src/wallet/rpcwallet.cpp
kallewoof,2017-04-21T00:54:16Z,"Done - but some tweaking is necessary to make them truly independent of order (e.g. instead of asserting on getbalance()s, should just grab balance and compare). Will not do that work in this PR, but will try to address it asap unless someone else gets to it before me.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590340,112590340,test/functional/listsinceblock.py
kallewoof,2017-04-21T00:57:02Z,"Ohh, I didn't realize assert also captured exceptions. Thanks, changed.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590637,112590637,test/functional/listsinceblock.py
sipa,2017-07-12T22:57:22Z,"Nit: the `request.params.size() > 0` check is superfluous with this, as the `operator[]` will always return a null UniValue if out of range. (and several other places)",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093329,127093329,src/wallet/rpcwallet.cpp
sipa,2017-07-12T22:57:40Z,Nit: braces on the same line (and many other places).,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093370,127093370,src/wallet/rpcwallet.cpp
sipa,2017-07-12T23:03:03Z,"I agree with (1), and not having `allow_partial`. We may want to document that this feature stops working with pruning.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127094098,127094098,src/wallet/rpcwallet.cpp
kallewoof,2017-07-13T01:25:03Z,"Oh, I didn't know that. That makes things cleaner, thanks.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127110195,127110195,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-07-14T18:31:41Z,"Hmm, technically -depth isnt sufficient here. In the rare case of a reorg-to-lower-block-height this would be insufficient. You already got the block from the chain, just call it - 1000000000 or so.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521359,127521359,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-07-14T18:32:12Z,"Can we add something to note that transactions which were re-added are included here anyway, and may have, at that point, positive confirmations value in this array?",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521439,127521439,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-07-14T18:34:08Z,This is wrong (and the check and later comment contradict this).,https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521824,127521824,test/functional/listsinceblock.py
TheBlueMatt,2017-07-14T18:34:31Z,"Can you duplicate this loop for ""removed"", noting that the tx listed in ""removed"" should *also* have a confirmations of 2.",https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521882,127521882,test/functional/listsinceblock.py
