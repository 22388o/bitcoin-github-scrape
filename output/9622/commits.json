[
  {
    "sha": "f999c46caebca32fea16362f6d070b9466f3da83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTk5YzQ2Y2FlYmNhMzJmZWExNjM2MmY2ZDA3MGI5NDY2ZjNkYTgz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-24T05:27:22Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-21T00:50:59Z"
      },
      "message": "listsinceblock: optionally find and list any transactions that were undone due to reorg when requesting a non-main chain block in a new 'removed' array.",
      "tree": {
        "sha": "aa7464d819fb75dbb7c52599dc580d49257e2fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa7464d819fb75dbb7c52599dc580d49257e2fba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f999c46caebca32fea16362f6d070b9466f3da83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllxT/MACgkQV692LbM1\nMyKFog//cFsPBQP6TyJC4cEdqaX3/Wt5OGoURWsVGIzo4a49ar6l2aG5vaua6HUw\nobgA+cCHje+2Zrg/gvYqHEnoIp3cV8iDESwj+xTjEF/ZvKWpeijJP8xgeABReLMj\na1YAMYL83o4xMPepLEfjvjw6W0Q75HBZZFc0dmuPjAjessuhrWZxKlC/S+M9eeH4\nHnHR+GqjQFSMZAAzpPJyrGAQ9wqoFt2zjvZM9i63bPz5GPbT4DiupNgLwVcuPhhz\n2LCQgdD2gJmEo8oXgeOwpsbKOLfYHGhM/II7zmIF2IGz/LFTfJRo3mca0s8HI//a\ndaKsK1PIJBkNHE/MmGrqqjGiPHuRFFnKg9ljkveOZypjkxfbN51rzR4QbC9DBdZt\nYxVeWCikahQZ+P7wZwoVCBc6ap3q3m+ApsC5FNIW0yVcS8hvSsuQi0aJJkPPiTnd\nAohrksWkhlNtdd267FOsaZ0P8gPsRzUPb8ugRWGGqEr2Kd8rgFlsXWJETtcm+snU\ntIdhFRXQosgodwa/09pgigQNQ41+GKC+si49LAXaTI0EjIL2FoJGyJZazd9sjlW0\nFR0V9UNujeBG2QjihWi8CrukdPjP4dgy5GQlrg7OIKQzfbnNGZehUPQyVsLkhd7H\nU1WWYhAk/DgvKAmdghThPHtOacYpmGJ/bdYx9HEWT65N1tsDTas=\n=QtWN\n-----END PGP SIGNATURE-----",
        "payload": "tree aa7464d819fb75dbb7c52599dc580d49257e2fba\nparent 6adc3a37324caa07015368bfe8529e1964366eef\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1485235642 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1500598259 +0900\n\nlistsinceblock: optionally find and list any transactions that were undone due to reorg when requesting a non-main chain block in a new 'removed' array.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f999c46caebca32fea16362f6d070b9466f3da83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f999c46caebca32fea16362f6d070b9466f3da83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f999c46caebca32fea16362f6d070b9466f3da83/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6adc3a37324caa07015368bfe8529e1964366eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6adc3a37324caa07015368bfe8529e1964366eef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6adc3a37324caa07015368bfe8529e1964366eef"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 60,
      "deletions": 21
    },
    "files": [
      {
        "sha": "417945378242ffd9abac3f82c4966a44b867b9db",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f999c46caebca32fea16362f6d070b9466f3da83/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f999c46caebca32fea16362f6d070b9466f3da83/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f999c46caebca32fea16362f6d070b9466f3da83",
        "patch": "@@ -68,6 +68,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getblocktemplate\", 0, \"template_request\" },\n     { \"listsinceblock\", 1, \"target_confirmations\" },\n     { \"listsinceblock\", 2, \"include_watchonly\" },\n+    { \"listsinceblock\", 3, \"include_removed\" },\n     { \"sendmany\", 1, \"amounts\" },\n     { \"sendmany\", 2, \"minconf\" },\n     { \"sendmany\", 4, \"subtractfeefrom\" },"
      },
      {
        "sha": "e0d32f9bcb57cf16570d452504150ff34bc5edd4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 21,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f999c46caebca32fea16362f6d070b9466f3da83/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f999c46caebca32fea16362f6d070b9466f3da83/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f999c46caebca32fea16362f6d070b9466f3da83",
        "patch": "@@ -1426,6 +1426,17 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n+/**\n+ * List transactions based on the given criteria.\n+ *\n+ * @param  pwallet    The wallet.\n+ * @param  wtx        The wallet transaction.\n+ * @param  strAccount The account, if any, or \"*\" for all.\n+ * @param  nMinDepth  The minimum confirmation depth.\n+ * @param  fLong      Whether to include the JSON version of the transaction.\n+ * @param  ret        The UniValue into which the result is stored.\n+ * @param  filter     The \"is mine\" filter bool.\n+ */\n void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n {\n     CAmount nFee;\n@@ -1742,14 +1753,18 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_removed )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n+            \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n-            \"2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n-            \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\"\n+            \"2. target_confirmations:    (numeric, optional, default=1) The confirmations required, must be 1 or more\\n\"\n+            \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+            \"                                                           (not guaranteed to work on pruned nodes)\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n@@ -1774,7 +1789,11 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n             \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n             \"    \\\"to\\\": \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n-             \"  ],\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"removed\\\": [\\n\"\n+            \"    <structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n+            \"    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\\n\"\n+            \"  ],\\n\"\n             \"  \\\"lastblock\\\": \\\"lastblockhash\\\"     (string) The hash of the last block\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -1785,21 +1804,19 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const CBlockIndex *pindex = NULL;\n+    const CBlockIndex* pindex = NULL;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    const CBlockIndex* paltindex = NULL; // Block index of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (!request.params[0].isNull())\n-    {\n+    if (!request.params[0].isNull()) {\n         uint256 blockId;\n \n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n-        if (it != mapBlockIndex.end())\n-        {\n-            pindex = it->second;\n-            if (chainActive[pindex->nHeight] != pindex)\n-            {\n+        if (it != mapBlockIndex.end()) {\n+            paltindex = pindex = it->second;\n+            if (chainActive[pindex->nHeight] != pindex) {\n                 // the block being asked for is a part of a deactivated chain;\n                 // we don't want to depend on its perceived height in the block\n                 // chain, we want to instead use the last common ancestor\n@@ -1808,35 +1825,56 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (!request.params[1].isNull())\n-    {\n+    if (!request.params[1].isNull()) {\n         target_confirms = request.params[1].get_int();\n \n-        if (target_confirms < 1)\n+        if (target_confirms < 1) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n+        }\n     }\n \n-    if (request.params.size() > 2 && request.params[2].get_bool())\n-    {\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n \n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n-        if (depth == -1 || tx.GetDepthInMainChain() < depth)\n+        if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n             ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex) {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus())) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx) {\n+            if (pwallet->mapWallet.count(tx->GetHash()) > 0) {\n+                // We want all transactions regardless of confirmation count to appear here,\n+                // even negative confirmation ones, hence the big negative.\n+                ListTransactions(pwallet, pwallet->mapWallet[tx->GetHash()], \"*\", -100000000, true, removed, filter);\n+            }\n+        }\n+        paltindex = paltindex->pprev;\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"transactions\", transactions));\n+    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n     ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n \n     return ret;\n@@ -3082,7 +3120,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false,  {} },\n     { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },"
      }
    ]
  },
  {
    "sha": "876e92bf54f7c416c1f4f38932b95301dfb4e3bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzZlOTJiZjU0ZjdjNDE2YzFmNGYzODkzMmI5NTMwMWRmYjRlM2Jm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-24T05:28:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-21T00:51:00Z"
      },
      "message": "Testing: listsinceblock should display all transactions that were affected since the given block, including transactions that were removed due to a reorg.",
      "tree": {
        "sha": "9ce324bdaf9ce9a2cf50fdf3dfce916f993b8112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ce324bdaf9ce9a2cf50fdf3dfce916f993b8112"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/876e92bf54f7c416c1f4f38932b95301dfb4e3bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllxT/QACgkQV692LbM1\nMyLL9g/+IMpL3t+1Xmedm+Pl94I5lN7HLg8PQGxeYS4bZIng4B4NkBkGPmKOPqh+\nr5wW7I3FeCExoqvZJfjDn6G1AoLzY3kpc4Hi5/jWhmVKSWa57gYuG+DnTgl3BfJF\noNC5T22WfPNyQ1vfR76asvKwLcfH0N2BmWdLvsUCaY86HJRD84nhIaFdvYoHX5GX\nxZC8wZifFO1S1HSx50UPptzibZAz6v7SAdRMY+QK0W7VG0YaJL7CIcpL9tb+jsUa\nrdSM8zUFvt93dzTQXDx95hOYkAryRakNWsxCSQhRgXeli6c1rePEhtEgm4a0Zyf0\nlURlFEMn8R+CEq3O75DpHICrPM3NxXngIaqVgqp3xSQNWzPRaVGWVrpYlVsCj930\nD2go5ioy5ZyCq6ixRt4k7fZ5+HlKqv4jnxRvWziaaSwQajpM2bGd0qDmmzvXk6k+\nscptlHno05OD1HD0XT6IHPX+Zbu5cfHF6wzAJG02SjD5l+/yXCl/k6RdIj4WfiRC\nS47CuARHEPLz7n5zGbBeCbS3lYNqI45WK4Kts+WVEQtU3kDLi/yhMZpQukwfrNP1\nuhEJxwWKcT6ag+tYp93+mEWUsWJz+PmmeeIjA15zyAidTi1E6z0DfZhaJaSxtmqZ\n+MESFx0UvqR7ZZ2tgb8BybYgmQT7bi9+KDiTG38l39mxJJWFouc=\n=oQQl\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ce324bdaf9ce9a2cf50fdf3dfce916f993b8112\nparent f999c46caebca32fea16362f6d070b9466f3da83\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1485235714 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1500598260 +0900\n\nTesting: listsinceblock should display all transactions that were affected since the given block, including transactions that were removed due to a reorg.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/876e92bf54f7c416c1f4f38932b95301dfb4e3bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/876e92bf54f7c416c1f4f38932b95301dfb4e3bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/876e92bf54f7c416c1f4f38932b95301dfb4e3bf/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f999c46caebca32fea16362f6d070b9466f3da83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f999c46caebca32fea16362f6d070b9466f3da83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f999c46caebca32fea16362f6d070b9466f3da83"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 180,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ce2d556ef022b0fb29b853248eea566ac7b3ad18",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 180,
        "deletions": 10,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/876e92bf54f7c416c1f4f38932b95301dfb4e3bf/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/876e92bf54f7c416c1f4f38932b95301dfb4e3bf/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=876e92bf54f7c416c1f4f38932b95301dfb4e3bf",
        "patch": "@@ -14,7 +14,15 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n \n-    def run_test (self):\n+    def run_test(self):\n+        self.nodes[2].generate(101)\n+        self.sync_all()\n+\n+        self.test_reorg()\n+        self.test_double_spend()\n+        self.test_double_send()\n+\n+    def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was\n         no longer in the main chain:\n@@ -43,14 +51,6 @@ def run_test (self):\n         This test only checks that [tx0] is present.\n         '''\n \n-        self.nodes[2].generate(101)\n-        self.sync_all()\n-\n-        assert_equal(self.nodes[0].getbalance(), 0)\n-        assert_equal(self.nodes[1].getbalance(), 0)\n-        assert_equal(self.nodes[2].getbalance(), 50)\n-        assert_equal(self.nodes[3].getbalance(), 0)\n-\n         # Split network into two\n         self.split_network()\n \n@@ -73,7 +73,177 @@ def run_test (self):\n             if tx['txid'] == senttx:\n                 found = True\n                 break\n-        assert_equal(found, True)\n+        assert found\n+\n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+\n+        self.join_network()\n+\n+        self.sync_all()\n+\n+        # gettransaction should work for txid1\n+        assert self.nodes[0].gettransaction(txid1)['txid'] == txid1, \"gettransaction failed to find txid1\"\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(blockhash=lastblockhash, include_removed=False)\n+        assert 'removed' not in lsbres2\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is included in 'removed' as it was removed, even though it is now\n+           present in a different block.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''\n+\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+\n+        # create and sign a transaction\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        signedtxres = self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n+        assert signedtxres['complete']\n+\n+        signedtx = signedtxres['hex']\n+\n+        # send from nodes[1]; this will end up in aa1\n+        txid1 = self.nodes[1].sendrawtransaction(signedtx)\n+\n+        # generate bb1-bb2 on right side\n+        self.nodes[2].generate(2)\n+\n+        # send from nodes[2]; this will end up in bb3\n+        txid2 = self.nodes[2].sendrawtransaction(signedtx)\n+\n+        assert_equal(txid1, txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(2)\n+\n+        self.join_network()\n+\n+        self.sync_all()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1 in transactions\n+        # as well as in removed\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['transactions'])\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # find transaction and ensure confirmations is valid\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == txid1:\n+                assert_equal(tx['confirmations'], 2)\n+\n+        # the same check for the removed array; confirmations should STILL be 2\n+        for tx in lsbres['removed']:\n+            if tx['txid'] == txid1:\n+                assert_equal(tx['confirmations'], 2)\n \n if __name__ == '__main__':\n     ListSinceBlockTest().main()"
      }
    ]
  }
]