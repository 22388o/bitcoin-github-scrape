[
  {
    "sha": "1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmRjN2M0MWJiMWVlYTNhMjVjMzM4N2YxNDdmZjg4MzlhNzhkNGFk",
    "commit": {
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-22T11:55:22Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-25T08:32:41Z"
      },
      "message": "Make CTxMemPool::isSpent() const",
      "tree": {
        "sha": "c48df00da7ff4d96ae71e26eb023861eb237e0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c48df00da7ff4d96ae71e26eb023861eb237e0e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlq3XqoPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7YB4A/213\nqRSZMuKI3vQ9aAzqhSlkCpaUILkm6ml0yBOLUeN/AP9wLTSJOldCuIk9++uacaJh\nLACDYvkdFCffV/XuVueUAw==\n=YFjC\n-----END PGP SIGNATURE-----",
        "payload": "tree c48df00da7ff4d96ae71e26eb023861eb237e0e2\nparent 7466a26cab5d66665991433947964a638f5b957e\nauthor Roman Zeyde <me@romanzey.de> 1521719722 +0200\ncommitter Roman Zeyde <me@romanzey.de> 1521966761 +0300\n\nMake CTxMemPool::isSpent() const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad/comments",
    "author": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7466a26cab5d66665991433947964a638f5b957e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7466a26cab5d66665991433947964a638f5b957e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7466a26cab5d66665991433947964a638f5b957e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cc639288d37e5d1a082199cf85eb6c1e78ae96df",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
        "patch": "@@ -339,7 +339,7 @@ CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n     nCheckFrequency = 0;\n }\n \n-bool CTxMemPool::isSpent(const COutPoint& outpoint)\n+bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n {\n     LOCK(cs);\n     return mapNextTx.count(outpoint);"
      },
      {
        "sha": "699f6b554bd9344f7f1df32e7ba853d3bdbadc59",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
        "patch": "@@ -550,7 +550,7 @@ class CTxMemPool\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n     void queryHashes(std::vector<uint256>& vtxid);\n-    bool isSpent(const COutPoint& outpoint);\n+    bool isSpent(const COutPoint& outpoint) const;\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n     /**"
      }
    ]
  },
  {
    "sha": "9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2I5YWY4YzQxZTRhN2FiZDZiM2UwMTExMjdjNDI3NDU1N2NhN2U0",
    "commit": {
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-18T14:25:30Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-25T08:32:44Z"
      },
      "message": "[REST] Handle UTXO retrieval when ignoring the mempool\n\nCurrent REST API always returns empty UTXO when invoked without `/checkmempool/` URL part.\n\nAfter the fix:\n```\n$ curl -s http://localhost:8332/rest/getutxos/0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098-0.json | jq\n{\n  \"chainHeight\": 514109,\n  \"chaintipHash\": \"0000000000000000001fe76d1445e8a6432fd2de04261dc9c5915311dc7ad6de\",\n  \"bitmap\": \"1\",\n  \"utxos\": [\n    {\n      \"height\": 1,\n      \"value\": 50,\n      \"scriptPubKey\": {\n        \"asm\": \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee OP_CHECKSIG\",\n        \"hex\": \"410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkey\",\n        \"addresses\": [\n          \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nBefore the fix:\n```\n$ curl -s http://localhost:8332/rest/getutxos/0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098-0.json | jq\n{\n  \"chainHeight\": 514109,\n  \"chaintipHash\": \"0000000000000000001fe76d1445e8a6432fd2de04261dc9c5915311dc7ad6de\",\n  \"bitmap\": \"0\",\n  \"utxos\": []\n}\n```",
      "tree": {
        "sha": "b99861eec1d5a468cfc9db655f9bb97228cb0698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99861eec1d5a468cfc9db655f9bb97228cb0698"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlq3Xq4PHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7oJcA/2Md\nlhg5DoVrFi6MbhT4YjBfpjITtKCwGSNB7NM1OcALAP9mDeXp5riI1pBqyX3rrlGv\ns3LIMSlkiQhDfyM8tMmaGw==\n=CASn\n-----END PGP SIGNATURE-----",
        "payload": "tree b99861eec1d5a468cfc9db655f9bb97228cb0698\nparent 1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad\nauthor Roman Zeyde <me@romanzey.de> 1521383130 +0200\ncommitter Roman Zeyde <me@romanzey.de> 1521966764 +0300\n\n[REST] Handle UTXO retrieval when ignoring the mempool\n\nCurrent REST API always returns empty UTXO when invoked without `/checkmempool/` URL part.\n\nAfter the fix:\n```\n$ curl -s http://localhost:8332/rest/getutxos/0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098-0.json | jq\n{\n  \"chainHeight\": 514109,\n  \"chaintipHash\": \"0000000000000000001fe76d1445e8a6432fd2de04261dc9c5915311dc7ad6de\",\n  \"bitmap\": \"1\",\n  \"utxos\": [\n    {\n      \"height\": 1,\n      \"value\": 50,\n      \"scriptPubKey\": {\n        \"asm\": \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee OP_CHECKSIG\",\n        \"hex\": \"410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkey\",\n        \"addresses\": [\n          \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nBefore the fix:\n```\n$ curl -s http://localhost:8332/rest/getutxos/0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098-0.json | jq\n{\n  \"chainHeight\": 514109,\n  \"chaintipHash\": \"0000000000000000001fe76d1445e8a6432fd2de04261dc9c5915311dc7ad6de\",\n  \"bitmap\": \"0\",\n  \"utxos\": []\n}\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4/comments",
    "author": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdc7c41bb1eea3a25c3387f147ff8839a78d4ad"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 52,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6501dab6bf1178dd4102f25339a7aa5184c236e2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
        "patch": "@@ -487,26 +487,28 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n     {\n-        LOCK2(cs_main, mempool.cs);\n-\n-        CCoinsView viewDummy;\n-        CCoinsViewCache view(&viewDummy);\n-\n-        CCoinsViewCache& viewChain = *pcoinsTip;\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-\n-        if (fCheckMemPool)\n-            view.SetBackend(viewMempool); // switch cache backend to db+mempool in case user likes to query mempool\n-\n-        for (size_t i = 0; i < vOutPoints.size(); i++) {\n-            bool hit = false;\n-            Coin coin;\n-            if (view.GetCoin(vOutPoints[i], coin) && !mempool.isSpent(vOutPoints[i])) {\n-                hit = true;\n-                outs.emplace_back(std::move(coin));\n+        auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n+            for (const COutPoint& vOutPoint : vOutPoints) {\n+                Coin coin;\n+                bool hit = !mempool.isSpent(vOutPoint) && view.GetCoin(vOutPoint, coin);\n+                hits.push_back(hit);\n+                if (hit) outs.emplace_back(std::move(coin));\n             }\n+        };\n+\n+        if (fCheckMemPool) {\n+            // use db+mempool as cache backend in case user likes to query mempool\n+            LOCK2(cs_main, mempool.cs);\n+            CCoinsViewCache& viewChain = *pcoinsTip;\n+            CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+            process_utxos(viewMempool, mempool);\n+        } else {\n+            LOCK(cs_main);  // no need to lock mempool!\n+            process_utxos(*pcoinsTip, CTxMemPool());\n+        }\n \n-            hits.push_back(hit);\n+        for (size_t i = 0; i < hits.size(); ++i) {\n+            const bool hit = hits[i];\n             bitmapStringRepresentation.append(hit ? \"1\" : \"0\"); // form a binary string representation (human-readable for json output)\n             bitmap[i / 8] |= ((uint8_t)hit) << (i % 8);\n         }"
      },
      {
        "sha": "6f585f6825a8342cfc85a5d32bc182dc22dc2dce",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb9af8c41e4a7abd6b3e011127c4274557ca7e4/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=9cb9af8c41e4a7abd6b3e011127c4274557ca7e4",
        "patch": "@@ -85,7 +85,7 @@ def run_test(self):\n         #######################################\n         # GETUTXOS: query an unspent outpoint #\n         #######################################\n-        json_request = '/checkmempool/'+txid+'-'+str(n)\n+        json_request = '/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n \n@@ -100,7 +100,7 @@ def run_test(self):\n         #################################################\n         # GETUTXOS: now query an already spent outpoint #\n         #################################################\n-        json_request = '/checkmempool/'+vintx+'-0'\n+        json_request = '/'+vintx+'-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n \n@@ -117,7 +117,7 @@ def run_test(self):\n         ##################################################\n         # GETUTXOS: now check both with the same request #\n         ##################################################\n-        json_request = '/checkmempool/'+txid+'-'+str(n)+'/'+vintx+'-0'\n+        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n@@ -151,23 +151,48 @@ def run_test(self):\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        # get the spent output to later check for utxo (should be spent by then)\n+        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n         n = 0\n         for vout in json_obj['vout']:\n             if vout['value'] == 0.1:\n                 n = vout['n']\n+        spending = '{}-{}'.format(txid, n)\n \n-        json_request = '/'+txid+'-'+str(n)\n+        json_request = '/'+spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be an outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n \n-        json_request = '/checkmempool/'+txid+'-'+str(n)\n+        json_request = '/checkmempool/'+spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n \n+        json_request = '/'+spent\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n+\n+        json_request = '/checkmempool/'+spent\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        json_request = '/'+spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n+\n+        json_request = '/checkmempool/'+spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n+\n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)"
      }
    ]
  }
]