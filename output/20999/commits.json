[
  {
    "sha": "349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDlmMTdlZGMyZDlhNzNkYmJlOWFhNjlkZjQ2Njk1MTViYzRhZDFk",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T09:31:13Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T16:28:34Z"
      },
      "message": "Fix BlockToJsonVerbose benchmark\n\nCurrently it was not possible to run just the BlockToJsonVerboes benchmarsk because it did not set up everything it needed, running `bench_bitcoin -filter=BlockToJsonVerbose` caused this assert to fail:\n\n```\nbench_bitcoin: chainparams.cpp:506: const CChainParams& Params(): Assertion `globalChainParams' failed.\n```\n\nInitializing TestingSetup fixes this.",
      "tree": {
        "sha": "2c3c8778159e9611823b00f8661510b7c7f4c5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c3c8778159e9611823b00f8661510b7c7f4c5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32b191fb66e644c690c94cbfdae6ddbc754769d7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45ed9f60dc018c7e4a78181d32ab2ed4bb7457d0",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
        "patch": "@@ -7,12 +7,15 @@\n \n #include <rpc/blockchain.h>\n #include <streams.h>\n+#include <test/util/setup_common.h>\n #include <validation.h>\n \n #include <univalue.h>\n \n static void BlockToJsonVerbose(benchmark::Bench& bench)\n {\n+    TestingSetup test_setup{};\n+\n     CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction"
      }
    ]
  },
  {
    "sha": "26fd10a9310c66264ebfb3c49a1f2377656cb781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmZkMTBhOTMxMGM2NjI2NGViZmIzYzQ5YTFmMjM3NzY1NmNiNzgx",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T17:36:16Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T18:37:32Z"
      },
      "message": "univalue optimizations: move semantics, reduce temporary strings\n\n* Introducing move semantics vor pushKV and push_back. In many use cases\n  the const& calls unnecessarily create a copy of the argument, when\n  objects can be moved this does not happen.\n\n* Reduce creation of temporary strings. `json_escape` now appends to\n  an existing string instead of creating a temporary, and UniValue::write\n  now uses an UniValue::append where possible.\n\n* Use `std::to_string` instead of `std::ostringstream` for `setNumStr`\n\nIn a benchmark with Bitcoin's BlockToJsonVerbose, using the move methods\nwhere possible speeds up JSON generation by about a factor of 2.",
      "tree": {
        "sha": "bb5ba4ba860bfc3ea3ce3513fec78fa28df7ad72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb5ba4ba860bfc3ea3ce3513fec78fa28df7ad72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26fd10a9310c66264ebfb3c49a1f2377656cb781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fd10a9310c66264ebfb3c49a1f2377656cb781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26fd10a9310c66264ebfb3c49a1f2377656cb781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fd10a9310c66264ebfb3c49a1f2377656cb781/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/349f17edc2d9a73dbbe9aa69df4669515bc4ad1d"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 160,
      "deletions": 40
    },
    "files": [
      {
        "sha": "84f72bce9ecca4c7ed64e17e95cf747842d36aa3",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 70,
        "deletions": 13,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=26fd10a9310c66264ebfb3c49a1f2377656cb781",
        "patch": "@@ -25,6 +25,9 @@ class UniValue {\n         typ = initialType;\n         val = initialStr;\n     }\n+    UniValue(UniValue::VType initialType, std::string&& initialStr)\n+        : typ(initialType), val(std::move(initialStr)) {\n+    }\n     UniValue(uint64_t val_) {\n         setInt(val_);\n     }\n@@ -84,71 +87,125 @@ class UniValue {\n     bool isObject() const { return (typ == VOBJ); }\n \n     bool push_back(const UniValue& val);\n+    bool push_back(UniValue&& val);\n+    \n     bool push_back(const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n+    }\n+    bool push_back(std::string&& val_) {\n+        UniValue tmpVal(VSTR, std::move(val_));\n+        return push_back(std::move(tmpVal));\n     }\n+\n     bool push_back(const char *val_) {\n         std::string s(val_);\n-        return push_back(s);\n+        return push_back(std::move(s));\n     }\n     bool push_back(uint64_t val_) {\n         UniValue tmpVal(val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n     }\n     bool push_back(int64_t val_) {\n         UniValue tmpVal(val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n     }\n     bool push_back(bool val_) {\n         UniValue tmpVal(val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n     }\n     bool push_back(int val_) {\n         UniValue tmpVal(val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n     }\n     bool push_back(double val_) {\n         UniValue tmpVal(val_);\n-        return push_back(tmpVal);\n+        return push_back(std::move(tmpVal));\n     }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, UniValue&& val);\n     void __pushKV(const std::string& key, const UniValue& val);\n+    void __pushKV(std::string&& key, UniValue&& val);\n+    void __pushKV(std::string&& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n+    bool pushKV(const std::string& key, UniValue&& val);\n+    bool pushKV(std::string&& key, const UniValue& val);\n+    bool pushKV(std::string&& key, UniValue&& val);\n+\n+    bool pushKV(const std::string& key, std::string&& val_) {\n+        UniValue tmpVal(VSTR, std::move(val_));\n+        return pushKV(key, std::move(tmpVal));\n+    }\n+    bool pushKV(std::string&& key, std::string&& val_) {\n+        UniValue tmpVal(VSTR, std::move(val_));\n+        return pushKV(std::move(key), std::move(tmpVal));\n+    }\n+\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n+    }\n+    bool pushKV(std::string&& key, const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n     }\n     bool pushKV(const std::string& key, const char *val_) {\n         std::string _val(val_);\n         return pushKV(key, _val);\n     }\n+    bool pushKV(std::string&& key, const char *val_) {\n+        std::string _val(val_);\n+        return pushKV(std::move(key), std::move(_val));\n+    }\n     bool pushKV(const std::string& key, int64_t val_) {\n         UniValue tmpVal(val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n     }\n+    bool pushKV(std::string&& key, int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n+    }    \n     bool pushKV(const std::string& key, uint64_t val_) {\n         UniValue tmpVal(val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n+    }\n+    bool pushKV(std::string&& key, uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n     }\n     bool pushKV(const std::string& key, bool val_) {\n         UniValue tmpVal(val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n     }\n+    bool pushKV(std::string&& key, bool val_) {\n+        UniValue tmpVal(val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n+    }    \n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n+    }\n+    bool pushKV(std::string&& key, int val_) {\n+        UniValue tmpVal((int64_t)val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n     }\n     bool pushKV(const std::string& key, double val_) {\n         UniValue tmpVal(val_);\n-        return pushKV(key, tmpVal);\n+        return pushKV(key, std::move(tmpVal));\n+    }\n+    bool pushKV(std::string&& key, double val_) {\n+        UniValue tmpVal(val_);\n+        return pushKV(std::move(key), std::move(tmpVal));\n     }\n     bool pushKVs(const UniValue& obj);\n+    bool pushKVs(UniValue&& obj);\n \n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n+    void append(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n     bool read(const char *raw, size_t len);\n     bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {"
      },
      {
        "sha": "619a6f167656758094263bc76846c9119947f002",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 12,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=26fd10a9310c66264ebfb3c49a1f2377656cb781",
        "patch": "@@ -56,20 +56,12 @@ bool UniValue::setNumStr(const std::string& val_)\n \n bool UniValue::setInt(uint64_t val_)\n {\n-    std::ostringstream oss;\n-\n-    oss << val_;\n-\n-    return setNumStr(oss.str());\n+    return setNumStr(std::to_string(val_));\n }\n \n bool UniValue::setInt(int64_t val_)\n {\n-    std::ostringstream oss;\n-\n-    oss << val_;\n-\n-    return setNumStr(oss.str());\n+    return setNumStr(std::to_string(val_));\n }\n \n bool UniValue::setFloat(double val_)\n@@ -114,6 +106,16 @@ bool UniValue::push_back(const UniValue& val_)\n     return true;\n }\n \n+bool UniValue::push_back(UniValue&& val_)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(std::move(val_));\n+    return true;\n+}\n+\n+\n bool UniValue::push_backV(const std::vector<UniValue>& vec)\n {\n     if (typ != VARR)\n@@ -124,14 +126,28 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, UniValue&& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(std::move(val_));\n+}\n+void UniValue::__pushKV(std::string&& key, UniValue&& val_)\n+{\n+    keys.push_back(std::move(key));\n+    values.push_back(std::move(val_));\n+}\n void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n {\n     keys.push_back(key);\n     values.push_back(val_);\n }\n-\n-bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n+void UniValue::__pushKV(std::string&& key, const UniValue& val_)\n {\n+    keys.push_back(std::move(key));\n+    values.push_back(val_);\n+}\n+\n+bool UniValue::pushKV(const std::string& key, const UniValue& val_) {\n     if (typ != VOBJ)\n         return false;\n \n@@ -142,7 +158,41 @@ bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n         __pushKV(key, val_);\n     return true;\n }\n+bool UniValue::pushKV(std::string&& key, const UniValue& val_) {\n+    if (typ != VOBJ)\n+        return false;\n+\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(std::move(key), val_);\n+    return true;\n+}\n+bool UniValue::pushKV(const std::string& key, UniValue&& val_)\n+{\n+    if (typ != VOBJ)\n+        return false;\n+\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = std::move(val_);\n+    else\n+        __pushKV(key, std::move(val_));\n+    return true;\n+}\n+bool UniValue::pushKV(std::string&& key, UniValue&& val_)\n+{\n+    if (typ != VOBJ)\n+        return false;\n \n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = std::move(val_);\n+    else\n+        __pushKV(std::move(key), std::move(val_));\n+    return true;\n+}\n bool UniValue::pushKVs(const UniValue& obj)\n {\n     if (typ != VOBJ || obj.typ != VOBJ)\n@@ -154,6 +204,17 @@ bool UniValue::pushKVs(const UniValue& obj)\n     return true;\n }\n \n+bool UniValue::pushKVs(UniValue&& obj)\n+{\n+    if (typ != VOBJ || obj.typ != VOBJ)\n+        return false;\n+\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(std::move(obj.keys[i]), std::move(obj.values.at(i)));\n+\n+    return true;\n+}\n+\n void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n {\n     if (typ != VOBJ)"
      },
      {
        "sha": "1696951f8b0288ecc91c910a74b4690cfaa9ea43",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fd10a9310c66264ebfb3c49a1f2377656cb781/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=26fd10a9310c66264ebfb3c49a1f2377656cb781",
        "patch": "@@ -8,11 +8,8 @@\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n \n-static std::string json_escape(const std::string& inS)\n+static void json_escape(const std::string& inS, std::string& outS)\n {\n-    std::string outS;\n-    outS.reserve(inS.size() * 2);\n-\n     for (unsigned int i = 0; i < inS.size(); i++) {\n         unsigned char ch = inS[i];\n         const char *escStr = escapes[ch];\n@@ -22,16 +19,10 @@ static std::string json_escape(const std::string& inS)\n         else\n             outS += ch;\n     }\n-\n-    return outS;\n }\n \n-std::string UniValue::write(unsigned int prettyIndent,\n-                            unsigned int indentLevel) const\n+void UniValue::append(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\n {\n-    std::string s;\n-    s.reserve(1024);\n-\n     unsigned int modIndent = indentLevel;\n     if (modIndent == 0)\n         modIndent = 1;\n@@ -47,7 +38,9 @@ std::string UniValue::write(unsigned int prettyIndent,\n         writeArray(prettyIndent, modIndent, s);\n         break;\n     case VSTR:\n-        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n+        s += \"\\\"\";\n+        json_escape(val, s);\n+        s += \"\\\"\";\n         break;\n     case VNUM:\n         s += val;\n@@ -56,10 +49,17 @@ std::string UniValue::write(unsigned int prettyIndent,\n         s += (val == \"1\" ? \"true\" : \"false\");\n         break;\n     }\n+}\n \n+std::string UniValue::write(unsigned int prettyIndent,\n+                            unsigned int indentLevel) const\n+{\n+    std::string s;\n+    append(prettyIndent, indentLevel, s);\n     return s;\n }\n \n+\n static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)\n {\n     s.append(prettyIndent * indentLevel, ' ');\n@@ -74,7 +74,7 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n     for (unsigned int i = 0; i < values.size(); i++) {\n         if (prettyIndent)\n             indentStr(prettyIndent, indentLevel, s);\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n+        values[i].append(prettyIndent, indentLevel + 1, s);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n         }\n@@ -96,10 +96,12 @@ void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel,\n     for (unsigned int i = 0; i < keys.size(); i++) {\n         if (prettyIndent)\n             indentStr(prettyIndent, indentLevel, s);\n-        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        s += \"\\\"\";\n+        json_escape(keys[i], s);\n+        s += \"\\\":\";\n         if (prettyIndent)\n             s += \" \";\n-        s += values.at(i).write(prettyIndent, indentLevel + 1);\n+        values.at(i).append(prettyIndent, indentLevel + 1, s);\n         if (i != (values.size() - 1))\n             s += \",\";\n         if (prettyIndent)"
      }
    ]
  },
  {
    "sha": "93f82407f9e0b66cf51af1ed8cde60b9446fc806",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2Y4MjQwN2Y5ZTBiNjZjZjUxYWYxZWQ4Y2RlNjBiOTQ0NmZjODA2",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T18:06:25Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T18:39:20Z"
      },
      "message": "make use of univalue's new move semantic\n\nPrevent unnecessary copies of UniValue objects by using `std::move`\nwhere possible.\n\nThis speeds up the `BlockToJsonVerbose` benchmark from 66.9 ms/op to\n36.6 ms/op on an intel i7 locked to 3.2GHz.\n\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | `BlockToJsonVerbose`\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\n|       66,877,763.00 |               14.95 |    0.1% |  549,960,313.00 |  211,619,093.00 |  2.599 | 101,638,376.00 |    0.4% |      0.75 | `master`\n|       57,915,056.00 |               17.27 |    1.2% |  464,866,030.00 |  183,491,588.00 |  2.533 |  85,882,830.00 |    0.5% |      0.65 | `univalue: move semantics, reduce temporary strings`\n|       36,585,334.00 |               27.33 |    1.6% |  310,260,492.00 |  116,584,209.00 |  2.661 |  50,966,277.00 |    0.4% |      0.41 | `make use of univalue's new move semantic`\n\nNote that there are still places where `std::move` could be introduced.",
      "tree": {
        "sha": "ce83b87ef055b6284c58dc3813d642b001e0a078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce83b87ef055b6284c58dc3813d642b001e0a078"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93f82407f9e0b66cf51af1ed8cde60b9446fc806",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f82407f9e0b66cf51af1ed8cde60b9446fc806",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93f82407f9e0b66cf51af1ed8cde60b9446fc806",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f82407f9e0b66cf51af1ed8cde60b9446fc806/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26fd10a9310c66264ebfb3c49a1f2377656cb781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fd10a9310c66264ebfb3c49a1f2377656cb781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26fd10a9310c66264ebfb3c49a1f2377656cb781"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 53,
      "deletions": 56
    },
    "files": [
      {
        "sha": "674fba12fb40dcb0db2f1a5a5c89f1365743a8de",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -176,7 +176,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     for (const CTxDestination& addr : addresses) {\n         a.push_back(EncodeDestination(addr));\n     }\n-    out.pushKV(\"addresses\", a);\n+    out.pushKV(\"addresses\", std::move(a));\n }\n \n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n@@ -210,23 +210,23 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n             UniValue o(UniValue::VOBJ);\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig));\n-            in.pushKV(\"scriptSig\", o);\n+            in.pushKV(\"scriptSig\", std::move(o));\n         }\n         if (!tx.vin[i].scriptWitness.IsNull()) {\n             UniValue txinwitness(UniValue::VARR);\n             for (const auto& item : tx.vin[i].scriptWitness.stack) {\n                 txinwitness.push_back(HexStr(item));\n             }\n-            in.pushKV(\"txinwitness\", txinwitness);\n+            in.pushKV(\"txinwitness\", std::move(txinwitness));\n         }\n         if (calculate_fee) {\n             const CTxOut& prev_txout = txundo->vprevout[i].out;\n             amt_total_in += prev_txout.nValue;\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n-        vin.push_back(in);\n+        vin.push_back(std::move(in));\n     }\n-    entry.pushKV(\"vin\", vin);\n+    entry.pushKV(\"vin\", std::move(vin));\n \n     UniValue vout(UniValue::VARR);\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -239,14 +239,14 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n \n         UniValue o(UniValue::VOBJ);\n         ScriptPubKeyToUniv(txout.scriptPubKey, o, true);\n-        out.pushKV(\"scriptPubKey\", o);\n-        vout.push_back(out);\n+        out.pushKV(\"scriptPubKey\", std::move(o));\n+        vout.push_back(std::move(out));\n \n         if (calculate_fee) {\n             amt_total_out += txout.nValue;\n         }\n     }\n-    entry.pushKV(\"vout\", vout);\n+    entry.pushKV(\"vout\", std::move(vout));\n \n     if (calculate_fee) {\n         const CAmount fee = amt_total_in - amt_total_out;"
      },
      {
        "sha": "bb6765e6f23466d69de57107301d08f6a08ba560",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -604,9 +604,9 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n             utxo.pushKV(\"scriptPubKey\", o);\n-            utxos.push_back(utxo);\n+            utxos.push_back(std::move(utxo));\n         }\n-        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n+        objGetUTXOResponse.pushKV(\"utxos\", std::move(utxos));\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "9fbd8e5d4a554b4cf8f912cc6189b33fd1285e60",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -181,14 +181,14 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n             const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n             UniValue objTx(UniValue::VOBJ);\n             TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n-            txs.push_back(objTx);\n+            txs.push_back(std::move(objTx));\n         }\n     } else {\n         for (const CTransactionRef& tx : block.vtx) {\n             txs.push_back(tx->GetHash().GetHex());\n         }\n     }\n-    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"tx\", std::move(txs));\n     result.pushKV(\"time\", block.GetBlockTime());\n     result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n     result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n@@ -462,7 +462,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     fees.pushKV(\"modified\", ValueFromAmount(e.GetModifiedFee()));\n     fees.pushKV(\"ancestor\", ValueFromAmount(e.GetModFeesWithAncestors()));\n     fees.pushKV(\"descendant\", ValueFromAmount(e.GetModFeesWithDescendants()));\n-    info.pushKV(\"fees\", fees);\n+    info.pushKV(\"fees\", std::move(fees));\n \n     info.pushKV(\"vsize\", (int)e.GetTxSize());\n     info.pushKV(\"weight\", (int)e.GetTxWeight());\n@@ -491,7 +491,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n         depends.push_back(dep);\n     }\n \n-    info.pushKV(\"depends\", depends);\n+    info.pushKV(\"depends\", std::move(depends));\n \n     UniValue spent(UniValue::VARR);\n     const CTxMemPool::txiter& it = pool.mapTx.find(tx.GetHash());\n@@ -500,7 +500,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n         spent.push_back(child.GetTx().GetHash().ToString());\n     }\n \n-    info.pushKV(\"spentby\", spent);\n+    info.pushKV(\"spentby\", std::move(spent));\n \n     // Add opt-in RBF status\n     bool rbfStatus = false;\n@@ -530,7 +530,7 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose, bool include_mempoo\n             // Mempool has unique entries so there is no advantage in using\n             // UniValue::pushKV, which checks if the key already exists in O(N).\n             // UniValue::__pushKV is used instead which currently is O(1).\n-            o.__pushKV(hash.ToString(), info);\n+            o.__pushKV(hash.ToString(), std::move(info));\n         }\n         return o;\n     } else {\n@@ -662,7 +662,7 @@ static RPCHelpMan getmempoolancestors()\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(mempool, info, e);\n-            o.pushKV(_hash.ToString(), info);\n+            o.pushKV(_hash.ToString(), std::move(info));\n         }\n         return o;\n     }\n@@ -1174,7 +1174,7 @@ static RPCHelpMan gettxout()\n     ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"scriptPubKey\", std::move(o));\n     ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n@@ -1224,7 +1224,7 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     // one below the activation height\n     rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n     rv.pushKV(\"height\", height);\n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(name, std::move(rv));\n }\n \n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -1261,18 +1261,18 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        bip9.pushKV(\"statistics\", statsUV);\n+        bip9.pushKV(\"statistics\", std::move(statsUV));\n     }\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"bip9\", std::move(bip9));\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(name, std::move(rv));\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1371,7 +1371,7 @@ RPCHelpMan getblockchaininfo()\n     BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"softforks\",             std::move(softforks));\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;\n@@ -1481,9 +1481,9 @@ static RPCHelpMan getchaintips()\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.pushKV(\"status\", status);\n+        obj.pushKV(\"status\", std::move(status));\n \n-        res.push_back(obj);\n+        res.push_back(std::move(obj));\n     }\n \n     return res;\n@@ -2278,9 +2278,9 @@ static RPCHelpMan scantxoutset()\n             unspent.pushKV(\"amount\", ValueFromAmount(txo.nValue));\n             unspent.pushKV(\"height\", (int32_t)coin.nHeight);\n \n-            unspents.push_back(unspent);\n+            unspents.push_back(std::move(unspent));\n         }\n-        result.pushKV(\"unspents\", unspents);\n+        result.pushKV(\"unspents\", std::move(unspents));\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");"
      },
      {
        "sha": "2203ab8d4bb338fcaaa0197967b4846af422d158",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -269,10 +269,10 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n \n         if (!rpcCvtTable.convert(strMethod, name)) {\n             // insert string value directly\n-            params.pushKV(name, value);\n+            params.pushKV(std::move(name), std::move(value));\n         } else {\n             // parse string as JSON, insert bool/number/object/etc. value\n-            params.pushKV(name, ParseNonRFCJSONValue(value));\n+            params.pushKV(std::move(name), ParseNonRFCJSONValue(value));\n         }\n     }\n "
      },
      {
        "sha": "4cad74a842727f8e8a81af385316392984712d29",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -789,7 +789,7 @@ static RPCHelpMan getblocktemplate()\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.pushKV(\"depends\", deps);\n+        entry.pushKV(\"depends\", std::move(deps));\n \n         int index_in_template = i - 1;\n         entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);"
      },
      {
        "sha": "cf753c893d5ba75192b20d85b3aa6cd364e44f92",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -969,7 +969,7 @@ static RPCHelpMan testmempoolaccept()\n         result_0.pushKV(\"vsize\", virtual_size);\n         UniValue fees(UniValue::VOBJ);\n         fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+        result_0.pushKV(\"fees\", std::move(fees));\n     } else {\n         if (state.IsInvalid()) {\n             if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n@@ -1118,14 +1118,14 @@ static RPCHelpMan decodepsbt()\n     // Add the decoded tx\n     UniValue tx_univ(UniValue::VOBJ);\n     TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n-    result.pushKV(\"tx\", tx_univ);\n+    result.pushKV(\"tx\", std::move(tx_univ));\n \n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n     for (auto entry : psbtx.unknown) {\n         unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n     }\n-    result.pushKV(\"unknown\", unknowns);\n+    result.pushKV(\"unknown\", std::move(unknowns));\n \n     // inputs\n     CAmount total_in = 0;\n@@ -1156,7 +1156,7 @@ static RPCHelpMan decodepsbt()\n \n             UniValue non_wit(UniValue::VOBJ);\n             TxToUniv(*input.non_witness_utxo, uint256(), non_wit, false);\n-            in.pushKV(\"non_witness_utxo\", non_wit);\n+            in.pushKV(\"non_witness_utxo\", std::move(non_wit));\n \n             have_a_utxo = true;\n         }\n@@ -1177,7 +1177,7 @@ static RPCHelpMan decodepsbt()\n             for (const auto& sig : input.partial_sigs) {\n                 partial_sigs.pushKV(HexStr(sig.second.first), HexStr(sig.second.second));\n             }\n-            in.pushKV(\"partial_signatures\", partial_sigs);\n+            in.pushKV(\"partial_signatures\", std::move(partial_sigs));\n         }\n \n         // Sighash\n@@ -1189,12 +1189,12 @@ static RPCHelpMan decodepsbt()\n         if (!input.redeem_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n             ScriptToUniv(input.redeem_script, r, false);\n-            in.pushKV(\"redeem_script\", r);\n+            in.pushKV(\"redeem_script\", std::move(r));\n         }\n         if (!input.witness_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n             ScriptToUniv(input.witness_script, r, false);\n-            in.pushKV(\"witness_script\", r);\n+            in.pushKV(\"witness_script\", std::move(r));\n         }\n \n         // keypaths\n@@ -1206,24 +1206,24 @@ static RPCHelpMan decodepsbt()\n \n                 keypath.pushKV(\"master_fingerprint\", strprintf(\"%08x\", ReadBE32(entry.second.fingerprint)));\n                 keypath.pushKV(\"path\", WriteHDKeypath(entry.second.path));\n-                keypaths.push_back(keypath);\n+                keypaths.push_back(std::move(keypath));\n             }\n-            in.pushKV(\"bip32_derivs\", keypaths);\n+            in.pushKV(\"bip32_derivs\", std::move(keypaths));\n         }\n \n         // Final scriptSig and scriptwitness\n         if (!input.final_script_sig.empty()) {\n             UniValue scriptsig(UniValue::VOBJ);\n             scriptsig.pushKV(\"asm\", ScriptToAsmStr(input.final_script_sig, true));\n             scriptsig.pushKV(\"hex\", HexStr(input.final_script_sig));\n-            in.pushKV(\"final_scriptSig\", scriptsig);\n+            in.pushKV(\"final_scriptSig\", std::move(scriptsig));\n         }\n         if (!input.final_script_witness.IsNull()) {\n             UniValue txinwitness(UniValue::VARR);\n             for (const auto& item : input.final_script_witness.stack) {\n                 txinwitness.push_back(HexStr(item));\n             }\n-            in.pushKV(\"final_scriptwitness\", txinwitness);\n+            in.pushKV(\"final_scriptwitness\", std::move(txinwitness));\n         }\n \n         // Unknown data\n@@ -1232,12 +1232,12 @@ static RPCHelpMan decodepsbt()\n             for (auto entry : input.unknown) {\n                 unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n             }\n-            in.pushKV(\"unknown\", unknowns);\n+            in.pushKV(\"unknown\", std::move(unknowns));\n         }\n \n-        inputs.push_back(in);\n+        inputs.push_back(std::move(in));\n     }\n-    result.pushKV(\"inputs\", inputs);\n+    result.pushKV(\"inputs\", std::move(inputs));\n \n     // outputs\n     CAmount output_value = 0;\n@@ -1249,12 +1249,12 @@ static RPCHelpMan decodepsbt()\n         if (!output.redeem_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n             ScriptToUniv(output.redeem_script, r, false);\n-            out.pushKV(\"redeem_script\", r);\n+            out.pushKV(\"redeem_script\", std::move(r));\n         }\n         if (!output.witness_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n             ScriptToUniv(output.witness_script, r, false);\n-            out.pushKV(\"witness_script\", r);\n+            out.pushKV(\"witness_script\", std::move(r));\n         }\n \n         // keypaths\n@@ -1265,9 +1265,9 @@ static RPCHelpMan decodepsbt()\n                 keypath.pushKV(\"pubkey\", HexStr(entry.first));\n                 keypath.pushKV(\"master_fingerprint\", strprintf(\"%08x\", ReadBE32(entry.second.fingerprint)));\n                 keypath.pushKV(\"path\", WriteHDKeypath(entry.second.path));\n-                keypaths.push_back(keypath);\n+                keypaths.push_back(std::move(keypath));\n             }\n-            out.pushKV(\"bip32_derivs\", keypaths);\n+            out.pushKV(\"bip32_derivs\", std::move(keypaths));\n         }\n \n         // Unknown data\n@@ -1276,7 +1276,7 @@ static RPCHelpMan decodepsbt()\n             for (auto entry : output.unknown) {\n                 unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n             }\n-            out.pushKV(\"unknown\", unknowns);\n+            out.pushKV(\"unknown\", std::move(unknowns));\n         }\n \n         outputs.push_back(out);\n@@ -1390,16 +1390,13 @@ static RPCHelpMan finalizepsbt()\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    std::string result_str;\n \n     if (complete && extract) {\n         ssTx << mtx;\n-        result_str = HexStr(ssTx);\n-        result.pushKV(\"hex\", result_str);\n+        result.pushKV(\"hex\", HexStr(ssTx));\n     } else {\n         ssTx << psbtx;\n-        result_str = EncodeBase64(ssTx.str());\n-        result.pushKV(\"psbt\", result_str);\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     }\n     result.pushKV(\"complete\", complete);\n "
      },
      {
        "sha": "f82a90d6f562b7ebbd13c6b87236fe984091f524",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f82407f9e0b66cf51af1ed8cde60b9446fc806/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "patch": "@@ -151,7 +151,7 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig));\n     entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n     entry.pushKV(\"error\", strMessage);\n-    vErrorsRet.push_back(entry);\n+    vErrorsRet.push_back(std::move(entry));\n }\n \n void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)\n@@ -304,6 +304,6 @@ void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const\n         if (result.exists(\"errors\")) {\n             vErrors.push_backV(result[\"errors\"].getValues());\n         }\n-        result.pushKV(\"errors\", vErrors);\n+        result.pushKV(\"errors\", std::move(vErrors));\n     }\n }"
      }
    ]
  },
  {
    "sha": "9b59b15c1285f44a9f186d26a9ca6a0e970e6664",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjU5YjE1YzEyODVmNDRhOWYxODZkMjZhOWNhNmEwZTk3MGU2NjY0",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T13:07:27Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-01-24T18:39:20Z"
      },
      "message": "optimize HexStr: do not use std::string push_back\n\nstd::string's push_back can be very time consuming, even with\nreserve(). If possible, this should be avoided. In the case of `HexStr`\nthis is easily possible, and since it is heavily used, the advantage for\n`BlockToJsonVerbose` are significant:\n\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | `BlockToJsonVerbose`\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\n|       36,585,334.00 |               27.33 |    1.6% |  310,260,492.00 |  116,584,209.00 |  2.661 |  50,966,277.00 |    0.4% |      0.41 | `make use of univalue's move semantic`\n|       28,508,105.00 |               35.08 |    0.2% |  244,933,429.00 |   90,874,112.00 |  2.695 |  40,138,962.00 |    0.4% |      0.32 | `optimize HexStr`",
      "tree": {
        "sha": "1964683b700cc35f65fd31eb0c1bd9379991c642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1964683b700cc35f65fd31eb0c1bd9379991c642"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b59b15c1285f44a9f186d26a9ca6a0e970e6664",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b59b15c1285f44a9f186d26a9ca6a0e970e6664",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b59b15c1285f44a9f186d26a9ca6a0e970e6664",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b59b15c1285f44a9f186d26a9ca6a0e970e6664/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f82407f9e0b66cf51af1ed8cde60b9446fc806",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93f82407f9e0b66cf51af1ed8cde60b9446fc806"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1e573a40dfca37e9edacfea432802d03d7105eb5",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b59b15c1285f44a9f186d26a9ca6a0e970e6664/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b59b15c1285f44a9f186d26a9ca6a0e970e6664/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=9b59b15c1285f44a9f186d26a9ca6a0e970e6664",
        "patch": "@@ -579,13 +579,13 @@ std::string Capitalize(std::string str)\n \n std::string HexStr(const Span<const uint8_t> s)\n {\n-    std::string rv;\n+    std::string rv(s.size() * 2, '-');\n     static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n                                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(s.size() * 2);\n+    auto* out = rv.data();\n     for (uint8_t v: s) {\n-        rv.push_back(hexmap[v >> 4]);\n-        rv.push_back(hexmap[v & 15]);\n+        *out++ = hexmap[v >> 4];\n+        *out++ = hexmap[v & 15];\n     }\n     return rv;\n }"
      }
    ]
  }
]