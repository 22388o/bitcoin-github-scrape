[
  {
    "sha": "faab4aaf2fa1153c6d76efc8113fa01b06943ece",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFiNGFhZjJmYTExNTNjNmQ3NmVmYzgxMTNmYTAxYjA2OTQzZWNl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-24T12:19:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-19T11:25:35Z"
      },
      "message": "util: Add count_microseconds helper",
      "tree": {
        "sha": "001b0d0f9948037b9fa4ebac3ccb8269d21a4a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/001b0d0f9948037b9fa4ebac3ccb8269d21a4a04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faab4aaf2fa1153c6d76efc8113fa01b06943ece",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUigGQwAkGgZ979+hx+IGdKgAKPhec978IwhcgqWkcBNMftlNNTRxGyOeeyuVIY0\nX3/iQqMOBf1S7MZBqGGAhwhVxnp4vYNfkp2N1vsfuo/4/LXfz22vOAvkl1VGb9PM\nJpjgLy3sq+vS4S5OzPS7IfYICKwtgbKBeWPVajldafRUwdfqNTpNcoyqirFTKaA3\nXTB6lmieojZmMp9T3D0Pw8bYdYkG49mZhQJQZgSuEWbL37cYt5rknXIrLpEe/oSg\n5hBKfCBhJ3bHhXnX8WgUACfavGtIO4Y8TnBjSjLatcpLKFDl89MAGXSB8QNh1qAB\nMPvB/O70CiIkcRkL6ItHspFOkiLiGtgvEiLnJYBYbYLMjOGFPnSvdO7c7EjVKK2h\nkVGLd3N09leAGALmMIVhDGGKPMgKzWlGblVUGkurgvtunlFBkW8gu4TYhuVlDIai\n/BwL6bEM0YZXd8Y0D0Ns2wyiOOvIj9XrVvpIyvYY0S8EI4Qt6/vFvNGz/xB/nsy0\nu7QAiVhH\n=tAMC\n-----END PGP SIGNATURE-----",
        "payload": "tree 001b0d0f9948037b9fa4ebac3ccb8269d21a4a04\nparent 62948caf4446246ec2b525e95705bb07b6a8f2bd\nauthor MarcoFalke <falke.marco@gmail.com> 1590322784 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592565935 -0400\n\nutil: Add count_microseconds helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faab4aaf2fa1153c6d76efc8113fa01b06943ece",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faab4aaf2fa1153c6d76efc8113fa01b06943ece",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faab4aaf2fa1153c6d76efc8113fa01b06943ece/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62948caf4446246ec2b525e95705bb07b6a8f2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62948caf4446246ec2b525e95705bb07b6a8f2bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62948caf4446246ec2b525e95705bb07b6a8f2bd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "af934e423b135e41a937b728ee7964c976c96c81",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faab4aaf2fa1153c6d76efc8113fa01b06943ece/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faab4aaf2fa1153c6d76efc8113fa01b06943ece/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=faab4aaf2fa1153c6d76efc8113fa01b06943ece",
        "patch": "@@ -15,10 +15,15 @@ void UninterruptibleSleep(const std::chrono::microseconds& n);\n /**\n  * Helper to count the seconds of a duration.\n  *\n- * All durations should be using std::chrono and calling this should generally be avoided in code. Though, it is still\n- * preferred to an inline t.count() to protect against a reliance on the exact type of t.\n+ * All durations should be using std::chrono and calling this should generally\n+ * be avoided in code. Though, it is still preferred to an inline t.count() to\n+ * protect against a reliance on the exact type of t.\n+ *\n+ * This helper is used to convert durations before passing them over an\n+ * interface that doesn't support std::chrono (e.g. RPC, debug log, or the GUI)\n  */\n inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n+inline int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n \n /**\n  * DEPRECATED"
      }
    ]
  },
  {
    "sha": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMzNjU0MzBjNWZiNTdkN2MwYjVmMmJjZTlmYmJlMjkwYmU5M2Mz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-14T17:24:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-19T11:25:36Z"
      },
      "message": "net: Use mockable time for ping/pong, add tests",
      "tree": {
        "sha": "4395ac07b8f72de675cf1675a392e10abe068175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4395ac07b8f72de675cf1675a392e10abe068175"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjXSgwAgCldA+SLWstSdQ5uvrcEU42RYlVtNHmUxOEJOa3E6cW2A97XnixgJ5nt\nqtNCahRLxLgreyOp7N9Rb74bdaggNNPwf4ytAUtzov+oy1TF0D4U6F2alHiNPgvN\nEFD1CbFj3zTAQ+YlsYP/+ac30HFLJrgStAk6whezcVIlIEZd+znbEZ3PnIvcaVbL\nmUtGgxQZzli5iN6lWT37dDgCQANu4mxfXmwjsU8Ku+iG+mj3j9EbNcvAIe6GDd1+\nRx0WqMD2okLpWTS6Rbq985XTCLKeX/dk+jfvuaO/iad99PFyH48K7JI5g1Dpq0hB\nXo9NTcvOyeWvLkPYQRqWJgGNK/Z1R4Do5NujSrC4vGgsMvwZ7HCXxhDSzhZPGflw\nmVCqdBPuV+8Jwa2PPqOYQXwuVdaP3hHgslxcZ6HCJDC2lPHllZs0mjQMMjOke3mc\nskIa+8yoG5pmOd1PKUYnpYoz39doXqrzCyVSetX6yAxvqzs2XtB+yoaPSxLo0J29\n5tpEr6wg\n=p7d3\n-----END PGP SIGNATURE-----",
        "payload": "tree 4395ac07b8f72de675cf1675a392e10abe068175\nparent faab4aaf2fa1153c6d76efc8113fa01b06943ece\nauthor MarcoFalke <falke.marco@gmail.com> 1586885058 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592565936 -0400\n\nnet: Use mockable time for ping/pong, add tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faab4aaf2fa1153c6d76efc8113fa01b06943ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faab4aaf2fa1153c6d76efc8113fa01b06943ece",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faab4aaf2fa1153c6d76efc8113fa01b06943ece"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 166,
      "deletions": 34
    },
    "files": [
      {
        "sha": "d66570e6a058c4630a63c4cf3896815e2b4e0d38",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -563,15 +563,15 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64_t nPingUsecWait = 0;\n-    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n-        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    std::chrono::microseconds ping_wait{0};\n+    if ((0 != nPingNonceSent) && (0 != m_ping_start.load().count())) {\n+        ping_wait = GetTime<std::chrono::microseconds>() - m_ping_start.load();\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.m_ping_usec = nPingUsecTime;\n     stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = nPingUsecWait;\n+    stats.m_ping_wait_usec = count_microseconds(ping_wait);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n     CService addrLocalUnlocked = GetAddrLocal();\n@@ -582,9 +582,9 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;\n-    int64_t nTimeMicros = GetTimeMicros();\n+    const auto time = GetTime<std::chrono::microseconds>();\n     LOCK(cs_vRecv);\n-    nLastRecv = nTimeMicros / 1000000;\n+    nLastRecv = std::chrono::duration_cast<std::chrono::seconds>(time).count();\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {\n         // absorb network data\n@@ -596,7 +596,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n \n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n-            CNetMessage msg = m_deserializer->GetMessage(Params().MessageStart(), nTimeMicros);\n+            CNetMessage msg = m_deserializer->GetMessage(Params().MessageStart(), time);\n \n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n@@ -699,7 +699,8 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) {\n+CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds time)\n+{\n     // decompose a single CNetMessage from the TransportDeserializer\n     CNetMessage msg(std::move(vRecv));\n \n@@ -1154,9 +1155,9 @@ void CConnman::InactivityCheck(CNode *pnode)\n             LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n             pnode->fDisconnect = true;\n         }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        else if (pnode->nPingNonceSent && pnode->m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())\n         {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - pnode->m_ping_start.load()));\n             pnode->fDisconnect = true;\n         }\n         else if (!pnode->fSuccessfullyConnected)"
      },
      {
        "sha": "63603d881f32d5eb90dd39d91c351d80c01c6d05",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -612,13 +612,13 @@ class CNodeStats\n  */\n class CNetMessage {\n public:\n-    CDataStream m_recv;                  // received message data\n-    int64_t m_time = 0;                  // time (in microseconds) of message receipt.\n+    CDataStream m_recv;                  //!< received message data\n+    std::chrono::microseconds m_time{0}; //!< time of message receipt\n     bool m_valid_netmagic = false;\n     bool m_valid_header = false;\n     bool m_valid_checksum = false;\n-    uint32_t m_message_size = 0;         // size of the payload\n-    uint32_t m_raw_message_size = 0;     // used wire size of the message (including header/checksum)\n+    uint32_t m_message_size{0};     //!< size of the payload\n+    uint32_t m_raw_message_size{0}; //!< used wire size of the message (including header/checksum)\n     std::string m_command;\n \n     CNetMessage(CDataStream&& recv_in) : m_recv(std::move(recv_in)) {}\n@@ -642,7 +642,7 @@ class TransportDeserializer {\n     // read and deserialize data\n     virtual int Read(const char *data, unsigned int bytes) = 0;\n     // decomposes a message from the context\n-    virtual CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) = 0;\n+    virtual CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -695,7 +695,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         if (ret < 0) Reset();\n         return ret;\n     }\n-    CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n+    CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport\n@@ -845,8 +845,8 @@ class CNode\n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n     std::atomic<uint64_t> nPingNonceSent{0};\n-    // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    std::atomic<int64_t> nPingUsecStart{0};\n+    /** When the last ping was sent, or 0 if no ping was ever sent */\n+    std::atomic<std::chrono::microseconds> m_ping_start{std::chrono::microseconds{0}};\n     // Last measured round-trip time.\n     std::atomic<int64_t> nPingUsecTime{0};\n     // Best measured round-trip time."
      },
      {
        "sha": "f7e2ed3f9680032e8d5714c2641f679ab56d1df9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -66,8 +66,8 @@ static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n-/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n-static const int PING_INTERVAL = 2 * 60;\n+/** Time between pings automatically sent out for latency probing and keepalive */\n+static constexpr std::chrono::minutes PING_INTERVAL{2};\n /** The maximum number of entries in a locator */\n static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of entries in an 'inv' protocol message */\n@@ -2208,7 +2208,7 @@ void ProcessMessage(\n     CNode& pfrom,\n     const std::string& msg_type,\n     CDataStream& vRecv,\n-    int64_t nTimeReceived,\n+    const std::chrono::microseconds time_received,\n     const CChainParams& chainparams,\n     ChainstateManager& chainman,\n     CTxMemPool& mempool,\n@@ -3111,7 +3111,7 @@ void ProcessMessage(\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, chainman, mempool, connman, banman, interruptMsgProc);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, time_received, chainparams, chainman, mempool, connman, banman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -3386,7 +3386,7 @@ void ProcessMessage(\n     }\n \n     if (msg_type == NetMsgType::PONG) {\n-        int64_t pingUsecEnd = nTimeReceived;\n+        const auto ping_end = time_received;\n         uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n         bool bPingFinished = false;\n@@ -3400,11 +3400,11 @@ void ProcessMessage(\n                 if (nonce == pfrom.nPingNonceSent) {\n                     // Matching pong received, this ping is no longer outstanding\n                     bPingFinished = true;\n-                    int64_t pingUsecTime = pingUsecEnd - pfrom.nPingUsecStart;\n-                    if (pingUsecTime > 0) {\n+                    const auto ping_time = ping_end - pfrom.m_ping_start.load();\n+                    if (ping_time.count() > 0) {\n                         // Successful ping time measurement, replace previous\n-                        pfrom.nPingUsecTime = pingUsecTime;\n-                        pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), pingUsecTime);\n+                        pfrom.nPingUsecTime = count_microseconds(ping_time);\n+                        pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), count_microseconds(ping_time));\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";\n@@ -3860,7 +3860,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             // RPC ping request by user\n             pingSend = true;\n         }\n-        if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n+        if (pto->nPingNonceSent == 0 && pto->m_ping_start.load() + PING_INTERVAL < GetTime<std::chrono::microseconds>()) {\n             // Ping automatically sent as a latency probe & keepalive.\n             pingSend = true;\n         }\n@@ -3870,7 +3870,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                 GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n             }\n             pto->fPingQueued = false;\n-            pto->nPingUsecStart = GetTimeMicros();\n+            pto->m_ping_start = GetTime<std::chrono::microseconds>();\n             if (pto->nVersion > BIP0031_VERSION) {\n                 pto->nPingNonceSent = nonce;\n                 connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));"
      },
      {
        "sha": "6fba2bfabaa85a7d6afc6c1d2c685b13d6e8d61f",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -30,7 +30,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         pch += handled;\n         n_bytes -= handled;\n         if (deserializer.Complete()) {\n-            const int64_t m_time = std::numeric_limits<int64_t>::max();\n+            const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             const CNetMessage msg = deserializer.GetMessage(Params().MessageStart(), m_time);\n             assert(msg.m_command.size() <= CMessageHeader::COMMAND_SIZE);\n             assert(msg.m_raw_message_size <= buffer.size());"
      },
      {
        "sha": "fa8d67059ca1e09e846c3d5c46dc5053d268b492",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -34,7 +34,7 @@ void ProcessMessage(\n     CNode& pfrom,\n     const std::string& msg_type,\n     CDataStream& vRecv,\n-    int64_t nTimeReceived,\n+    const std::chrono::microseconds time_received,\n     const CChainParams& chainparams,\n     ChainstateManager& chainman,\n     CTxMemPool& mempool,\n@@ -87,7 +87,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     connman.AddTestNode(p2p_node);\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n-        ProcessMessage(p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(),\n+        ProcessMessage(p2p_node, random_message_type, random_bytes_data_stream, GetTime<std::chrono::microseconds>(),\n             Params(), *g_setup->m_node.chainman, *g_setup->m_node.mempool,\n             g_setup->m_node.connman.get(), g_setup->m_node.banman.get(),\n             std::atomic<bool>{false});"
      },
      {
        "sha": "19cdc109352da29a5ce1f1ce6181f6d3c2e85d3f",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -30,7 +30,10 @@ class BIP68Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [\n-            [\"-acceptnonstdtxn=1\"],\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-peertimeout=9999\",  # bump because mocktime might cause a disconnect otherwise\n+            ],\n             [\"-acceptnonstdtxn=0\"],\n         ]\n "
      },
      {
        "sha": "ffcc65d5bbc36171bbb89c51d3b39a3ddd5b7ef4",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -35,7 +35,11 @@ class MaxUploadTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-maxuploadtarget=800\", \"-acceptnonstdtxn=1\"]]\n+        self.extra_args = [[\n+            \"-maxuploadtarget=800\",\n+            \"-acceptnonstdtxn=1\",\n+            \"-peertimeout=9999\",  # bump because mocktime might cause a disconnect otherwise\n+        ]]\n         self.supports_cli = False\n \n         # Cache for utxos, as the listunspent may take a long time later in the test"
      },
      {
        "sha": "e00af88cc45ece1fe7f65d9f277aa9aed9bb9718",
        "filename": "test/functional/p2p_ping.py",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/p2p_ping.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/p2p_ping.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_ping.py?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply with wrong nonce does not cancel ping')\n+        assert 'ping' not in no_pong_node.last_message\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce mismatch']):\n+            # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+            self.mock_forward(PING_INTERVAL + 1)\n+            wait_until(lambda: 'ping' in no_pong_node.last_message)\n+            self.mock_forward(9)\n+            # Send the wrong pong\n+            no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce - 1))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=9)\n+\n+        self.log.info('Reply with zero nonce does cancel ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce zero']):\n+            no_pong_node.send_and_ping(msg_pong(0))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Check that ping is properly reported on RPC')\n+        assert 'ping' not in no_pong_node.last_message\n+        # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+        self.mock_forward(PING_INTERVAL + 1)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        ping_delay = 29\n+        self.mock_forward(ping_delay)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce))\n+        self.check_peer_info(pingtime=ping_delay, minping=ping_delay, pingwait=None)\n+\n+        self.log.info('Check that minping is decreased after a fast roundtrip')\n+        # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+        self.mock_forward(PING_INTERVAL + 1)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        ping_delay = 9\n+        self.mock_forward(ping_delay)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce))\n+        self.check_peer_info(pingtime=ping_delay, minping=ping_delay, pingwait=None)\n+\n+        self.log.info('Check that peer is disconnected after ping timeout')\n+        assert 'ping' not in no_pong_node.last_message\n+        self.nodes[0].ping()\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        with self.nodes[0].assert_debug_log(['ping timeout: 1201.000000s']):\n+            self.mock_forward(20 * 60 + 1)\n+            time.sleep(4)  # peertimeout + 1\n+\n+\n+if __name__ == '__main__':\n+    PingPongTest().main()"
      },
      {
        "sha": "f94c7e35a422d2cbcf5a9120bfab62a8806752f6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
        "patch": "@@ -236,6 +236,7 @@\n     'mempool_compatibility.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n+    'p2p_ping.py',\n     'rpc_scantxoutset.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',"
      }
    ]
  }
]