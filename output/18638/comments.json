[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613662430",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-613662430",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 613662430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzY2MjQzMA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-14T20:24:14Z",
    "updated_at": "2020-07-10T07:47:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19472 ([net processing] Reduce cs_main scope in MaybeDiscourageAndDisconnect() by jnewbery)\n* #19107 (p2p: Move all header verification into the network layer, extend logging by troygiorshev)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 18638](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18638/total.coverage/index.html), 0f96c4b9c8eed32c3fdf1203a2f9a2be59a5f4a2) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), 75fcfdaf8b4b68ef1d1fcd606fb36c9265e15918)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0020 %            | 90.3582 %        |\n| Functions | +0.1431 %            | 85.0787 %        |\n| Branches  | +0.0089 %            | 51.8202 %        |\n\n<sup>Updated at: 2020-04-15T00:09:25.322904.</sup>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613662430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613753413",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-613753413",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 613753413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzc1MzQxMw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T00:50:36Z",
    "updated_at": "2020-04-15T00:50:36Z",
    "author_association": "MEMBER",
    "body": "Coverage changes:\r\n\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/net.cpp.gcov.html#1123\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18638/total.coverage/src/net.cpp.gcov.html#1123\r\n\r\nand\r\n\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/net_processing.cpp.gcov.html#3095\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18638/total.coverage/src/net_processing.cpp.gcov.html#3095",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613753413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623460571",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623460571",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 623460571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQ2MDU3MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T13:22:12Z",
    "updated_at": "2020-05-04T13:22:12Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\nWon't this potentially cause issues (e.g. ping timeouts) in P2P tests that already use mockable time for other things, but are not expecting it to have an effect on pings?\r\n\r\n(seems not, given that all the tests still pass)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623460571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623471752",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623471752",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 623471752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQ3MTc1Mg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T13:42:29Z",
    "updated_at": "2020-05-04T13:43:19Z",
    "author_association": "MEMBER",
    "body": "The `-peertimeout` is still measured in wall clock time, and because most of the test run through faster than what the `-peertimeout` is, this should not lead to issues in general. There are two tests `test/functional/feature_maxuploadtarget.py` and `test/functional/feature_bip68_sequence.py` which mine a lot of blocks (more than 100) under mocktime. This can take time when the tests are run under valgrind, so I had to bump the `-peertimeout` for those tests.\r\n\r\nOther tests should not be affected. If they are, it should be trivial to fix them up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623471752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623483202",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623483202",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 623483202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQ4MzIwMg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T14:03:04Z",
    "updated_at": "2020-05-04T14:03:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK: mockable is better than non-mockable :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623483202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627627968",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-627627968",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 627627968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYyNzk2OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T22:16:31Z",
    "updated_at": "2020-05-12T22:16:31Z",
    "author_association": "MEMBER",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627627968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631140601",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-631140601",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 631140601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTE0MDYwMQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T23:28:37Z",
    "updated_at": "2020-05-19T23:28:37Z",
    "author_association": "MEMBER",
    "body": "Addressed feedback by @gzhao408 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631140601/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632857115",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-632857115",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 632857115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg1NzExNQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T18:49:56Z",
    "updated_at": "2020-05-22T18:49:56Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Reviewing/testing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632857115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633223791",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-633223791",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 633223791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzIyMzc5MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-24T12:28:03Z",
    "updated_at": "2020-05-24T12:28:03Z",
    "author_association": "MEMBER",
    "body": "Added documentation to address @jonatack's feedback",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633223791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633243961",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-633243961",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 633243961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzI0Mzk2MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-24T15:01:13Z",
    "updated_at": "2020-05-24T15:01:13Z",
    "author_association": "MEMBER",
    "body": "Code review re-ACK fabb382 changes since last review per `git diff fa70471 fabb382` are passing time by value to `GetMessage` and `ProcessMessage` and improved documentation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633243961/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646593845",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-646593845",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 646593845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjU5Mzg0NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-19T11:51:38Z",
    "updated_at": "2020-06-19T11:51:38Z",
    "author_association": "MEMBER",
    "body": "Rebased. Should be easy to re-ACK with `git range-diff bitcoin-core/master A B`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646593845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647466665",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-647466665",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 647466665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzQ2NjY2NQ==",
    "user": {
      "login": "fridokus",
      "id": 16291842,
      "node_id": "MDQ6VXNlcjE2MjkxODQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16291842?u=db147c77f369374d1d81079ad8b4afe8ad4469c3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fridokus",
      "html_url": "https://github.com/fridokus",
      "followers_url": "https://api.github.com/users/fridokus/followers",
      "following_url": "https://api.github.com/users/fridokus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fridokus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fridokus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fridokus/subscriptions",
      "organizations_url": "https://api.github.com/users/fridokus/orgs",
      "repos_url": "https://api.github.com/users/fridokus/repos",
      "events_url": "https://api.github.com/users/fridokus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fridokus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T11:48:28Z",
    "updated_at": "2020-06-22T11:48:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK faab4aaf2fa1153c6d76efc8113fa01b06943ece, ran functional tests and read the python scripts.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647466665/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656694715",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-656694715",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18638",
    "id": 656694715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjY5NDcxNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-10T14:05:59Z",
    "updated_at": "2020-07-10T14:05:59Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review everyone. If there are ways to improve the test, I am happy to review them in a follow-up",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656694715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426916085",
    "pull_request_review_id": 413967888,
    "id": 426916085,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjA4NQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply with wrong nonce does not cancel ping')\n+        assert 'ping' not in no_pong_node.last_message\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce mismatch']):\n+            # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+            self.mock_forward(PING_INTERVAL + 1)\n+            wait_until(lambda: 'ping' in no_pong_node.last_message)\n+            self.mock_forward(9)\n+            # Send the wrong pong\n+            no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce - 1))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=9)\n+\n+        self.log.info('Reply with zero nonce does cancel ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce zero']):\n+            no_pong_node.send_and_ping(msg_pong(0))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Check that ping is properly reported on RPC')\n+        assert 'ping' not in no_pong_node.last_message\n+        # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+        self.mock_forward(PING_INTERVAL + 1)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        ping_delay = 29\n+        self.mock_forward(ping_delay)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce))\n+        self.check_peer_info(pingtime=ping_delay, minping=ping_delay, pingwait=None)\n+",
    "path": "test/functional/p2p_ping.py",
    "position": 102,
    "original_position": 102,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "From what I understand, `minping` is the best/shortest round trip time measured so far. Thus, would it be a good idea to repeat this chunk with a shorter `ping_delay` in order to check that `minping` gets updated correctly? I tried with `ping_delay` = 25 locally and it was updated from 29 to 25 as expected.",
    "created_at": "2020-05-18T22:00:18Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426916085",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426916085"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426916085"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426916085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 102,
    "original_line": 102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426917683",
    "pull_request_review_id": 413967888,
    "id": 426917683,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNzY4Mw==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply with wrong nonce does not cancel ping')\n+        assert 'ping' not in no_pong_node.last_message\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce mismatch']):\n+            # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+            self.mock_forward(PING_INTERVAL + 1)\n+            wait_until(lambda: 'ping' in no_pong_node.last_message)\n+            self.mock_forward(9)\n+            # Send the wrong pong\n+            no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce - 1))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=9)\n+\n+        self.log.info('Reply with zero nonce does cancel ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce zero']):\n+            no_pong_node.send_and_ping(msg_pong(0))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Check that ping is properly reported on RPC')\n+        assert 'ping' not in no_pong_node.last_message\n+        # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+        self.mock_forward(PING_INTERVAL + 1)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        ping_delay = 29\n+        self.mock_forward(ping_delay)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce))\n+        self.check_peer_info(pingtime=ping_delay, minping=ping_delay, pingwait=None)\n+",
    "path": "test/functional/p2p_ping.py",
    "position": 102,
    "original_position": 102,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also I'm just wondering, why is `ping_delay` 29? I'm not sure if it's arbitrary or a chosen magic number.",
    "created_at": "2020-05-18T22:04:44Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426917683",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426917683"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426917683"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426917683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 102,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 426916085
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426923791",
    "pull_request_review_id": 413967888,
    "id": 426923791,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMzc5MQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):",
    "path": "test/functional/p2p_ping.py",
    "position": 65,
    "original_position": 65,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, I'm surprised it isn't `Nonce zero`? I thought no nonce is equivalent to nonce=0 for [msg_pong](https://github.com/bitcoin/bitcoin/blob/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b/test/functional/test_framework/messages.py#L1210). The test failed when I changed the error message, though.",
    "created_at": "2020-05-18T22:20:56Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426923791",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426923791"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426923791"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426923791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 65,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426929454",
    "pull_request_review_id": 413967888,
    "id": 426929454,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyOTQ1NA==",
    "diff_hunk": "@@ -74,7 +74,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});",
    "path": "src/test/fuzz/process_message.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think microseconds is correct (I think millis would be a bug if this wasn't in a unit test), but since it looks like you're switching from millis to micros, could this be an issue at all? The test passes for me.",
    "created_at": "2020-05-18T22:37:32Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426929454",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426929454"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426929454"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426929454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 77,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427638935",
    "pull_request_review_id": 414870779,
    "id": 427638935,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzODkzNQ==",
    "diff_hunk": "@@ -74,7 +74,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});",
    "path": "src/test/fuzz/process_message.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, this looks like a bug in the test to me as well. Luckily by making the time type safe, this is less likely to happen in the future.\r\n\r\nRegardless, instead of depending on the current time, which is not deterministic and might cause issues while fuzzing, the fuzz test should ask the fuzz engine for a time value.\r\n\r\nHowever, this seems out of scope for the changes in this pull request.",
    "created_at": "2020-05-19T22:35:16Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427638935",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427638935"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427638935"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427638935/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 77,
    "side": "LEFT",
    "in_reply_to_id": 426929454
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639581",
    "pull_request_review_id": 414871622,
    "id": 427639581,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTU4MQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):",
    "path": "test/functional/p2p_ping.py",
    "position": 65,
    "original_position": 65,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Be aware that a `msg_pong_corrupt` is sent (not a `msg_pong`)",
    "created_at": "2020-05-19T22:37:14Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639581",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639581"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639581"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 65,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 426923791
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639815",
    "pull_request_review_id": 414871909,
    "id": 427639815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTgxNQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply with wrong nonce does not cancel ping')\n+        assert 'ping' not in no_pong_node.last_message\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce mismatch']):\n+            # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+            self.mock_forward(PING_INTERVAL + 1)\n+            wait_until(lambda: 'ping' in no_pong_node.last_message)\n+            self.mock_forward(9)\n+            # Send the wrong pong\n+            no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce - 1))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=9)\n+\n+        self.log.info('Reply with zero nonce does cancel ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Nonce zero']):\n+            no_pong_node.send_and_ping(msg_pong(0))\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Check that ping is properly reported on RPC')\n+        assert 'ping' not in no_pong_node.last_message\n+        # mock time PING_INTERVAL ahead to trigger node into sending a ping\n+        self.mock_forward(PING_INTERVAL + 1)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        ping_delay = 29\n+        self.mock_forward(ping_delay)\n+        wait_until(lambda: 'ping' in no_pong_node.last_message)\n+        no_pong_node.send_and_ping(msg_pong(no_pong_node.last_message.pop('ping').nonce))\n+        self.check_peer_info(pingtime=ping_delay, minping=ping_delay, pingwait=None)\n+",
    "path": "test/functional/p2p_ping.py",
    "position": 102,
    "original_position": 102,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point! Will extend the test as suggested by you.",
    "created_at": "2020-05-19T22:37:54Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427639815/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 102,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 426916085
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427667427",
    "pull_request_review_id": 414904669,
    "id": 427667427,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2NzQyNw==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):",
    "path": "test/functional/p2p_ping.py",
    "position": 65,
    "original_position": 65,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fac63aba8db1d0198391414a3867894f837e9df3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, that's it \ud83d\udc4d ",
    "created_at": "2020-05-20T00:01:59Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427667427",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427667427"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427667427"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427667427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 65,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 426923791
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429614142",
    "pull_request_review_id": 417339295,
    "id": 429614142,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNDE0Mg==",
    "diff_hunk": "@@ -686,7 +686,8 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) {\n+CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds& time)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`std::chrono` times are cheaply copied ints; would it be simpler/safer/faster to pass by value rather than reference to const?\r\n\r\nIf yes, idem in `net.h::L645+698`, `net_processing.cpp::L2085`, and `fuzz/process_message.cpp::L32`\r\n\r\nReference: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in",
    "created_at": "2020-05-24T08:52:13Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429614142",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429614142"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429614142"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429614142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 689,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616393",
    "pull_request_review_id": 417339295,
    "id": 429616393,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjM5Mw==",
    "diff_hunk": "@@ -1141,9 +1142,9 @@ void CConnman::InactivityCheck(CNode *pnode)\n             LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n             pnode->fDisconnect = true;\n         }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        else if (pnode->nPingNonceSent && pnode->m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())",
    "path": "src/net.cpp",
    "position": 56,
    "original_position": 56,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not changed by this PR, but noting that this seems to be the only place in the codebase where `nPingNonceSent` is tested for truthiness with implicit conversion instead of against an integer value.",
    "created_at": "2020-05-24T09:21:18Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616393",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616393"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616393"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1158,
    "original_line": 1158,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616840",
    "pull_request_review_id": 417339295,
    "id": 429616840,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjg0MA==",
    "diff_hunk": "@@ -550,15 +550,15 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64_t nPingUsecWait = 0;\n-    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n-        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    std::chrono::microseconds ping_wait{0};\n+    if ((0 != nPingNonceSent) && (0 != m_ping_start.load().count())) {\n+        ping_wait = GetTime<std::chrono::microseconds>() - m_ping_start.load();\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.m_ping_usec = nPingUsecTime;\n     stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = nPingUsecWait;\n+    stats.m_ping_wait_usec = count_microseconds(ping_wait);",
    "path": "src/net.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do you think it would be better to eventually convert these primitives to `duration` to no longer need helpers like `count_microseconds`? (or am I confused)",
    "created_at": "2020-05-24T09:26:29Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616840",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616840"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616840"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429616840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 574,
    "original_line": 574,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429623460",
    "pull_request_review_id": 417346950,
    "id": 429623460,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyMzQ2MA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is a clean chain needed for p2p testing here? The tests seem to be fine with this set to the default of false. ",
    "created_at": "2020-05-24T10:49:54Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429623460",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429623460"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429623460"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429623460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429625966",
    "pull_request_review_id": 417349116,
    "id": 429625966,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNTk2Ng==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sending a ping/pong shouldn't require any blocks, so I set this to false for now. This can be removed when the test is extended and needs blocks.",
    "created_at": "2020-05-24T11:21:39Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429625966",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429625966"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429625966"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429625966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429626189",
    "pull_request_review_id": 417349309,
    "id": 429626189,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjE4OQ==",
    "diff_hunk": "@@ -550,15 +550,15 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64_t nPingUsecWait = 0;\n-    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n-        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    std::chrono::microseconds ping_wait{0};\n+    if ((0 != nPingNonceSent) && (0 != m_ping_start.load().count())) {\n+        ping_wait = GetTime<std::chrono::microseconds>() - m_ping_start.load();\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.m_ping_usec = nPingUsecTime;\n     stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = nPingUsecWait;\n+    stats.m_ping_wait_usec = count_microseconds(ping_wait);",
    "path": "src/net.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I admit that the documentation isn't the best https://doxygen.bitcoincore.org/time_8h.html#a50aae909d5edf426afb66cd4d30c8d00\r\n\r\nHowever, those helpers will be needed to convert durations to raw integers for:\r\n\r\n* The RPC interface\r\n* The GUI\r\n* The logs\r\n* ... so pretty much anywhere the value \"leaves\" Bitcoin Core",
    "created_at": "2020-05-24T11:24:10Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429626189",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429626189"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429626189"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429626189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 574,
    "original_line": 574,
    "side": "RIGHT",
    "in_reply_to_id": 429616840
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631222",
    "pull_request_review_id": 417353777,
    "id": 429631222,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzMTIyMg==",
    "diff_hunk": "@@ -686,7 +686,8 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) {\n+CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds& time)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I always follow rule 1 (const&), because it is always cheap and prevents the overhead of having to think how many words a type has.\r\n\r\n```\r\nvoid f1(const string& s);  // OK: pass by reference to const; always cheap",
    "created_at": "2020-05-24T12:25:46Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 689,
    "side": "RIGHT",
    "in_reply_to_id": 429614142
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631246",
    "pull_request_review_id": 417353789,
    "id": 429631246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzMTI0Ng==",
    "diff_hunk": "@@ -686,7 +686,8 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) {\n+CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds& time)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed, though.",
    "created_at": "2020-05-24T12:25:55Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 689,
    "side": "RIGHT",
    "in_reply_to_id": 429614142
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631324",
    "pull_request_review_id": 417353886,
    "id": 429631324,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzMTMyNA==",
    "diff_hunk": "@@ -1141,9 +1142,9 @@ void CConnman::InactivityCheck(CNode *pnode)\n             LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n             pnode->fDisconnect = true;\n         }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        else if (pnode->nPingNonceSent && pnode->m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())",
    "path": "src/net.cpp",
    "position": 56,
    "original_position": 56,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed unrelated.",
    "created_at": "2020-05-24T12:27:09Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631324",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631324"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631324"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1158,
    "original_line": 1158,
    "side": "RIGHT",
    "in_reply_to_id": 429616393
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631352",
    "pull_request_review_id": 417353910,
    "id": 429631352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzMTM1Mg==",
    "diff_hunk": "@@ -550,15 +550,15 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64_t nPingUsecWait = 0;\n-    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n-        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    std::chrono::microseconds ping_wait{0};\n+    if ((0 != nPingNonceSent) && (0 != m_ping_start.load().count())) {\n+        ping_wait = GetTime<std::chrono::microseconds>() - m_ping_start.load();\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.m_ping_usec = nPingUsecTime;\n     stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = nPingUsecWait;\n+    stats.m_ping_wait_usec = count_microseconds(ping_wait);",
    "path": "src/net.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Extended documentation",
    "created_at": "2020-05-24T12:27:27Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429631352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 574,
    "original_line": 574,
    "side": "RIGHT",
    "in_reply_to_id": 429616840
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645464",
    "pull_request_review_id": 417366341,
    "id": 429645464,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTQ2NA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Did you still want to set this to false? :angel: ",
    "created_at": "2020-05-24T15:00:33Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645464",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645464"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645464"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645503",
    "pull_request_review_id": 417366372,
    "id": 429645503,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTUwMw==",
    "diff_hunk": "@@ -550,15 +550,15 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64_t nPingUsecWait = 0;\n-    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n-        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    std::chrono::microseconds ping_wait{0};\n+    if ((0 != nPingNonceSent) && (0 != m_ping_start.load().count())) {\n+        ping_wait = GetTime<std::chrono::microseconds>() - m_ping_start.load();\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.m_ping_usec = nPingUsecTime;\n     stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = nPingUsecWait;\n+    stats.m_ping_wait_usec = count_microseconds(ping_wait);",
    "path": "src/net.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks!",
    "created_at": "2020-05-24T15:00:56Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645503",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645503"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645503"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 574,
    "original_line": 574,
    "side": "RIGHT",
    "in_reply_to_id": 429616840
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649084",
    "pull_request_review_id": 417369456,
    "id": 429649084,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0OTA4NA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems overly expensive to copy the blockchain when it is not needed, no?",
    "created_at": "2020-05-24T15:41:44Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429649084",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649084"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429649084"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429650644",
    "pull_request_review_id": 417370761,
    "id": 429650644,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MDY0NA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This might be a wrong conception I've had for a long time. I thought it was cheaper to use the cached data directories rather than set up a clean chain, and that the test framework defaults to `self.setup_clean_chain = False` for this reason. I reckoned the default was the cheaper option and the more expensive one was opt-in, so I always used `False` where possible.",
    "created_at": "2020-05-24T15:58:34Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429650644",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429650644"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429650644"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429650644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429651218",
    "pull_request_review_id": 417371251,
    "id": 429651218,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MTIxOA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It might be a good idea to add a sentence on performance in the \"General test-writing advice\" section in `functional/README.md` where it states \"Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether or not to use the cached data directories.\"",
    "created_at": "2020-05-24T16:05:52Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429651218",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429651218"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429651218"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429651218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429652879",
    "pull_request_review_id": 417372667,
    "id": 429652879,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Mjg3OQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
    "path": "test/functional/p2p_ping.py",
    "position": 40,
    "original_position": 40,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa704719529cb928b242ecfe055e8a7b25df3a5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The reason this default to a chain is that most tests require a chain, so so the least verbose option is the default.\r\n\r\nAlso, defaulting to a chain prevents test writers from accidentally mining a chain when it is not needed. Mining is orders of magnitude slower than copying.",
    "created_at": "2020-05-24T16:25:23Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429652879",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429652879"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429652879"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429652879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 429623460
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436736726",
    "pull_request_review_id": 426279785,
    "id": 436736726,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczNjcyNg==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60",
    "path": "test/functional/p2p_ping.py",
    "position": 20,
    "original_position": 20,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa94d6fef799a900c15dce9638eace5cc10087ae",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: if you retouch, could add a comment expressing the time units or along the lines of:\r\n```python3\r\nPING_INTERVAL = 2 * 60  # 2 minutes (corresponds to net_processing::PING_INTERVAL)\r\n```",
    "created_at": "2020-06-08T14:08:22Z",
    "updated_at": "2020-06-19T11:26:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r436736726",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436736726"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r436736726"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436736726/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 20,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443501995",
    "pull_request_review_id": 434847045,
    "id": 443501995,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMTk5NQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)",
    "path": "test/functional/p2p_ping.py",
    "position": 60,
    "original_position": 60,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "fridokus",
      "id": 16291842,
      "node_id": "MDQ6VXNlcjE2MjkxODQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16291842?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fridokus",
      "html_url": "https://github.com/fridokus",
      "followers_url": "https://api.github.com/users/fridokus/followers",
      "following_url": "https://api.github.com/users/fridokus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fridokus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fridokus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fridokus/subscriptions",
      "organizations_url": "https://api.github.com/users/fridokus/orgs",
      "repos_url": "https://api.github.com/users/fridokus/repos",
      "events_url": "https://api.github.com/users/fridokus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fridokus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is `peertimeout` right? If yes, we use `peertimeout` at 3 places any maybe it's more clear to define it at the outermost scope as well like `PING_INTERVAL`? Or maybe there's no need :)",
    "created_at": "2020-06-22T11:48:14Z",
    "updated_at": "2020-06-22T11:48:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r443501995",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443501995"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r443501995"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443501995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 60,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444582868",
    "pull_request_review_id": 436250936,
    "id": 444582868,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4Mjg2OA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0",
    "path": "test/functional/p2p_ping.py",
    "position": 61,
    "original_position": 61,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why pop here, as opposed to just accessing the value?  Seems like having `(message_count['ping'] == 1 and 'ping' not in last_message) == True` could be confusing.\r\n\r\nMaybe decrementing `message_count['ping']` every pop is an easier solution, being that this idea is used throughout the test.\r\n\r\n```suggestion\r\n        assert no_pong_node.last_message['ping'].nonce != 0\r\n```\r\nOr maybe\r\n```suggestion\r\n        assert no_pong_node.last_message.get('ping').nonce != 0\r\n```\r\nor\r\n```suggestion\r\n        assert no_pong_node.last_message.pop('ping').nonce != 0\r\n        no_pong_node.message_count['ping'] -= 1\r\n```",
    "created_at": "2020-06-24T00:43:41Z",
    "updated_at": "2020-06-24T01:30:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444582868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444582868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444582868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444582868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 61,
    "original_line": 61,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444583585",
    "pull_request_review_id": 436250936,
    "id": 444583585,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MzU4NQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())",
    "path": "test/functional/p2p_ping.py",
    "position": 73,
    "original_position": 73,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why `send_and_ping` and not `send_message`, here and throughout?  Doesn't seem like it would make a difference, and maybe it's best that we don't have extraneous pings and pongs.",
    "created_at": "2020-06-24T00:46:35Z",
    "updated_at": "2020-06-24T01:30:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444583585",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444583585"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444583585"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444583585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444585462",
    "pull_request_review_id": 436250936,
    "id": 444585462,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4NTQ2Mg==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)",
    "path": "test/functional/p2p_ping.py",
    "position": 12,
    "original_position": 12,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: single line for a single import?",
    "created_at": "2020-06-24T00:53:44Z",
    "updated_at": "2020-06-24T01:30:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444585462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444585462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444585462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444585462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 10,
    "original_start_line": 10,
    "start_side": "RIGHT",
    "line": 12,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452859253",
    "pull_request_review_id": 446421613,
    "id": 452859253,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1OTI1Mw==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())",
    "path": "test/functional/p2p_ping.py",
    "position": 73,
    "original_position": 73,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't like to use `assert_debug_log` as a way to synchronize/poll for a change\r\n\r\n`send_and_ping` is a way to flush all messages in the buffer (on both sides, send and receive) and ensure they are processed (and any errors have been logged).",
    "created_at": "2020-07-10T13:55:34Z",
    "updated_at": "2020-07-10T13:55:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452859253",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452859253"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452859253"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452859253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 444583585
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452860611",
    "pull_request_review_id": 446423325,
    "id": 452860611,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MDYxMQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0",
    "path": "test/functional/p2p_ping.py",
    "position": 61,
    "original_position": 61,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wasn't aware that `message_count` exists, nor am I using it in this test. Given that it is almost unused right now and causes (potential) confusion, I'd say to remove it",
    "created_at": "2020-07-10T13:57:44Z",
    "updated_at": "2020-07-10T13:57:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452860611",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452860611"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452860611"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452860611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 61,
    "original_line": 61,
    "side": "RIGHT",
    "in_reply_to_id": 444582868
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452861030",
    "pull_request_review_id": 446423905,
    "id": 452861030,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MTAzMA==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)",
    "path": "test/functional/p2p_ping.py",
    "position": 12,
    "original_position": 12,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Can be fixed in a follow-up",
    "created_at": "2020-07-10T13:58:26Z",
    "updated_at": "2020-07-10T13:58:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452861030",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452861030"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452861030"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452861030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 10,
    "original_start_line": 10,
    "start_side": "RIGHT",
    "line": 12,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 444585462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452863651",
    "pull_request_review_id": 446427537,
    "id": 452863651,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MzY1MQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0",
    "path": "test/functional/p2p_ping.py",
    "position": 61,
    "original_position": 61,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "the reason I use pop is to ensure the value is discarded after a read and has no way to poison follow-up test cases",
    "created_at": "2020-07-10T14:03:00Z",
    "updated_at": "2020-07-10T14:03:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452863651",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452863651"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452863651"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452863651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 61,
    "original_line": 61,
    "side": "RIGHT",
    "in_reply_to_id": 444582868
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864246",
    "pull_request_review_id": 446428329,
    "id": 452864246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NDI0Ng==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)",
    "path": "test/functional/p2p_ping.py",
    "position": 60,
    "original_position": 60,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`peertimeout` is wall clock time, not mock time, I think. So this can be any value, as long as it matches pingwait=3 below, I'd say",
    "created_at": "2020-07-10T14:04:03Z",
    "updated_at": "2020-07-10T14:04:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 60,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 443501995
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864695",
    "pull_request_review_id": 446428908,
    "id": 452864695,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NDY5NQ==",
    "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test ping message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_pong,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PING_INTERVAL = 2 * 60\n+\n+\n+class msg_pong_corrupt(msg_pong):\n+    def serialize(self):\n+        return b\"\"\n+\n+\n+class NodePongAdd1(P2PInterface):\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce + 1))\n+\n+\n+class NodeNoPong(P2PInterface):\n+    def on_ping(self, message):\n+        pass\n+\n+\n+class PingPongTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=3']]\n+\n+    def check_peer_info(self, *, pingtime, minping, pingwait):\n+        stats = self.nodes[0].getpeerinfo()[0]\n+        assert_equal(stats.pop('pingtime', None), pingtime)\n+        assert_equal(stats.pop('minping', None), minping)\n+        assert_equal(stats.pop('pingwait', None), pingwait)\n+\n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n+    def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n+        self.log.info('Check that ping is sent after connection is established')\n+        no_pong_node = self.nodes[0].add_p2p_connection(NodeNoPong())\n+        self.mock_forward(3)\n+        assert no_pong_node.last_message.pop('ping').nonce != 0\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=3)\n+\n+        self.log.info('Reply without nonce cancels ping')\n+        with self.nodes[0].assert_debug_log(['pong peer=0: Short payload']):\n+            no_pong_node.send_and_ping(msg_pong_corrupt())\n+        self.check_peer_info(pingtime=None, minping=None, pingwait=None)\n+\n+        self.log.info('Reply without ping')\n+        with self.nodes[0].assert_debug_log([\n+                'pong peer=0: Unsolicited pong without ping, 0 expected, 0 received, 8 bytes',\n+        ]):\n+            no_pong_node.send_and_ping(msg_pong())",
    "path": "test/functional/p2p_ping.py",
    "position": 73,
    "original_position": 73,
    "commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "original_commit_id": "fa3365430c5fb57d7c0b5f2bce9fbbe290be93c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, sending a ping and receiving a ping should never interfere, unless I am missing something obvious",
    "created_at": "2020-07-10T14:04:46Z",
    "updated_at": "2020-07-10T14:04:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864695",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864695"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864695"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18638"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452864695/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 444583585
  }
]