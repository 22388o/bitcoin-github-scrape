DrahtBot,2020-04-14 20:24:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19472 ([net processing] Reduce cs_main scope in MaybeDiscourageAndDisconnect() by jnewbery)\n* #19107 (p2p: Move all head",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-613662430,613662430,
MarcoFalke,2020-04-15 00:50:36,"Coverage changes:\n\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/net.cpp.gcov.html#1123\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18638/total.coverage/src/net.cpp.gcov.html#1123\n\nand\n\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/net_processing.cpp.gcov.html#3095\n* https://drahtb",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-613753413,613753413,
laanwj,2020-05-04 13:22:12,"Concept ACK.\n\nWon't this potentially cause issues (e.g. ping timeouts) in P2P tests that already use mockable time for other things, but are not expecting it to have an effect on pings?\n\n(seems not, given that all the tests still pass)\n",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623460571,623460571,
MarcoFalke,2020-05-04 13:42:29,"The `-peertimeout` is still measured in wall clock time, and because most of the test run through faster than what the `-peertimeout` is, this should not lead to issues in general. There are two tests `test/functional/feature_maxuploadtarget.py` and `test/functional/feature_bip68_sequence.py` which mine a lot of blocks (more than 100) under mocktime. This can take time when the tests are run under",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623471752,623471752,
practicalswift,2020-05-04 14:03:04,Concept ACK: mockable is better than non-mockable :),https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-623483202,623483202,
MarcoFalke,2020-05-12 22:16:31,Rebased,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-627627968,627627968,
MarcoFalke,2020-05-19 23:28:37,Addressed feedback by @gzhao408 ,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-631140601,631140601,
jonatack,2020-05-22 18:49:56,Concept ACK. Reviewing/testing.,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-632857115,632857115,
MarcoFalke,2020-05-24 12:28:03,Added documentation to address @jonatack's feedback,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-633223791,633223791,
jonatack,2020-05-24 15:01:13,Code review re-ACK fabb382 changes since last review per `git diff fa70471 fabb382` are passing time by value to `GetMessage` and `ProcessMessage` and improved documentation.,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-633243961,633243961,
MarcoFalke,2020-06-19 11:51:38,Rebased. Should be easy to re-ACK with `git range-diff bitcoin-core/master A B`,https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-646593845,646593845,
fridokus,2020-06-22 11:48:28,"ACK faab4aaf2fa1153c6d76efc8113fa01b06943ece, ran functional tests and read the python scripts.\n\n",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-647466665,647466665,
MarcoFalke,2020-07-10 14:05:59,"Thanks for the review everyone. If there are ways to improve the test, I am happy to review them in a follow-up",https://github.com/bitcoin/bitcoin/pull/18638#issuecomment-656694715,656694715,
glozow,2020-05-18 22:00:18,"From what I understand, `minping` is the best/shortest round trip time measured so far. Thus, would it be a good idea to repeat this chunk with a shorter `ping_delay` in order to check that `minping` gets updated correctly? I tried with `ping_delay` = 25 locally and it was updated from 29 to 25 as expected.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426916085,426916085,test/functional/p2p_ping.py
glozow,2020-05-18 22:04:44,"Also I'm just wondering, why is `ping_delay` 29? I'm not sure if it's arbitrary or a chosen magic number.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426917683,426917683,test/functional/p2p_ping.py
glozow,2020-05-18 22:20:56,"Hm, I'm surprised it isn't `Nonce zero`? I thought no nonce is equivalent to nonce=0 for [msg_pong](https://github.com/bitcoin/bitcoin/blob/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b/test/functional/test_framework/messages.py#L1210). The test failed when I changed the error message, though.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426923791,426923791,test/functional/p2p_ping.py
glozow,2020-05-18 22:37:32,"I think microseconds is correct (I think millis would be a bug if this wasn't in a unit test), but since it looks like you're switching from millis to micros, could this be an issue at all? The test passes for me.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r426929454,426929454,src/test/fuzz/process_message.cpp
MarcoFalke,2020-05-19 22:35:16,"Yes, this looks like a bug in the test to me as well. Luckily by making the time type safe, this is less likely to happen in the future.\n\nRegardless, instead of depending on the current time, which is not deterministic and might cause issues while fuzzing, the fuzz test should ask the fuzz engine for a time value.\n\nHowever, this seems out of scope for the changes in this pull request.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427638935,427638935,src/test/fuzz/process_message.cpp
MarcoFalke,2020-05-19 22:37:14,Be aware that a `msg_pong_corrupt` is sent (not a `msg_pong`),https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639581,427639581,test/functional/p2p_ping.py
MarcoFalke,2020-05-19 22:37:54,Good point! Will extend the test as suggested by you.,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427639815,427639815,test/functional/p2p_ping.py
glozow,2020-05-20 00:01:59,"Ah, that's it üëç ",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r427667427,427667427,test/functional/p2p_ping.py
jonatack,2020-05-24 08:52:13,"`std::chrono` times are cheaply copied ints; would it be simpler/safer/faster to pass by value rather than reference to const?\n\nIf yes, idem in `net.h::L645+698`, `net_processing.cpp::L2085`, and `fuzz/process_message.cpp::L32`\n\nReference: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429614142,429614142,src/net.cpp
jonatack,2020-05-24 09:21:18,"Not changed by this PR, but noting that this seems to be the only place in the codebase where `nPingNonceSent` is tested for truthiness with implicit conversion instead of against an integer value.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616393,429616393,src/net.cpp
jonatack,2020-05-24 09:26:29,Do you think it would be better to eventually convert these primitives to `duration` to no longer need helpers like `count_microseconds`? (or am I confused),https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429616840,429616840,src/net.cpp
jonatack,2020-05-24 10:49:54,Is a clean chain needed for p2p testing here? The tests seem to be fine with this set to the default of false. ,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429623460,429623460,test/functional/p2p_ping.py
MarcoFalke,2020-05-24 11:21:39,"Sending a ping/pong shouldn't require any blocks, so I set this to false for now. This can be removed when the test is extended and needs blocks.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429625966,429625966,test/functional/p2p_ping.py
MarcoFalke,2020-05-24 11:24:10,"I admit that the documentation isn't the best https://doxygen.bitcoincore.org/time_8h.html#a50aae909d5edf426afb66cd4d30c8d00\n\nHowever, those helpers will be needed to convert durations to raw integers for:\n\n* The RPC interface\n* The GUI\n* The logs\n* ... so pretty much anywhere the value ""leaves"" Bitcoin Core",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429626189,429626189,src/net.cpp
MarcoFalke,2020-05-24 12:25:46,"I always follow rule 1 (const&), because it is always cheap and prevents the overhead of having to think how many words a type has.\n\n```\nvoid f1(const string& s);  // OK: pass by reference to const; always cheap",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631222,429631222,src/net.cpp
MarcoFalke,2020-05-24 12:25:55,"Changed, though.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631246,429631246,src/net.cpp
MarcoFalke,2020-05-24 12:27:09,Indeed unrelated.,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631324,429631324,src/net.cpp
MarcoFalke,2020-05-24 12:27:27,Extended documentation,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429631352,429631352,src/net.cpp
jonatack,2020-05-24 15:00:33,Did you still want to set this to false? :angel: ,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645464,429645464,test/functional/p2p_ping.py
jonatack,2020-05-24 15:00:56,Thanks!,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429645503,429645503,src/net.cpp
MarcoFalke,2020-05-24 15:41:44,"Seems overly expensive to copy the blockchain when it is not needed, no?",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429649084,429649084,test/functional/p2p_ping.py
jonatack,2020-05-24 15:58:34,"This might be a wrong conception I've had for a long time. I thought it was cheaper to use the cached data directories rather than set up a clean chain, and that the test framework defaults to `self.setup_clean_chain = False` for this reason. I reckoned the default was the cheaper option and the more expensive one was opt-in, so I always used `False` where possible.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429650644,429650644,test/functional/p2p_ping.py
jonatack,2020-05-24 16:05:52,"It might be a good idea to add a sentence on performance in the ""General test-writing advice"" section in `functional/README.md` where it states ""Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether or not to use the cached data directories.""",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429651218,429651218,test/functional/p2p_ping.py
MarcoFalke,2020-05-24 16:25:23,"The reason this default to a chain is that most tests require a chain, so so the least verbose option is the default.\n\nAlso, defaulting to a chain prevents test writers from accidentally mining a chain when it is not needed. Mining is orders of magnitude slower than copying.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r429652879,429652879,test/functional/p2p_ping.py
jonatack,2020-06-08 14:08:22,"nit: if you retouch, could add a comment expressing the time units or along the lines of:\n```python3\nPING_INTERVAL = 2 * 60  # 2 minutes (corresponds to net_processing::PING_INTERVAL)\n```",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r436736726,436736726,test/functional/p2p_ping.py
fridokus,2020-06-22 11:48:14,"This is `peertimeout` right? If yes, we use `peertimeout` at 3 places any maybe it's more clear to define it at the outermost scope as well like `PING_INTERVAL`? Or maybe there's no need :)",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r443501995,443501995,test/functional/p2p_ping.py
troygiorshev,2020-06-24 00:43:41,"Why pop here, as opposed to just accessing the value?  Seems like having `(message_count['ping'] == 1 and 'ping' not in last_message) == True` could be confusing.\n\nMaybe decrementing `message_count['ping']` every pop is an easier solution, being that this idea is used throughout the test.\n\n```suggestion\n        assert no_pong_node.last_message['ping'].nonce != 0\n```\nOr maybe\n```sug",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444582868,444582868,test/functional/p2p_ping.py
troygiorshev,2020-06-24 00:46:35,"Why `send_and_ping` and not `send_message`, here and throughout?  Doesn't seem like it would make a difference, and maybe it's best that we don't have extraneous pings and pongs.",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444583585,444583585,test/functional/p2p_ping.py
troygiorshev,2020-06-24 00:53:44,nit: single line for a single import?,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r444585462,444585462,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 13:55:34,"I don't like to use `assert_debug_log` as a way to synchronize/poll for a change\n\n`send_and_ping` is a way to flush all messages in the buffer (on both sides, send and receive) and ensure they are processed (and any errors have been logged).",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452859253,452859253,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 13:57:44,"I wasn't aware that `message_count` exists, nor am I using it in this test. Given that it is almost unused right now and causes (potential) confusion, I'd say to remove it",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452860611,452860611,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 13:58:26,Good point. Can be fixed in a follow-up,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452861030,452861030,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 14:03:00,the reason I use pop is to ensure the value is discarded after a read and has no way to poison follow-up test cases,https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452863651,452863651,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 14:04:03,"`peertimeout` is wall clock time, not mock time, I think. So this can be any value, as long as it matches pingwait=3 below, I'd say",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864246,452864246,test/functional/p2p_ping.py
MarcoFalke,2020-07-10 14:04:46,"Also, sending a ping and receiving a ping should never interfere, unless I am missing something obvious",https://github.com/bitcoin/bitcoin/pull/18638#discussion_r452864695,452864695,test/functional/p2p_ping.py
