[
  {
    "sha": "4949004d68dc08382df2c34ae519c1b1cfd60f1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTQ5MDA0ZDY4ZGMwODM4MmRmMmMzNGFlNTE5YzFiMWNmZDYwZjFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-07T11:53:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T20:59:03Z"
      },
      "message": "Add CMutableTransaction and make CTransaction immutable.\n\nIn addition, introduce a cached hash inside CTransaction, to prevent\nrecalculating it over and over again.",
      "tree": {
        "sha": "e3c4b2d6fa162af1cfbe44f6deb39278c12c5672",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3c4b2d6fa162af1cfbe44f6deb39278c12c5672"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4949004d68dc08382df2c34ae519c1b1cfd60f1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4949004d68dc08382df2c34ae519c1b1cfd60f1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4949004d68dc08382df2c34ae519c1b1cfd60f1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4949004d68dc08382df2c34ae519c1b1cfd60f1a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f59251b83cd9c862aee53dd50ce32bcab12ed6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f59251b83cd9c862aee53dd50ce32bcab12ed6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f59251b83cd9c862aee53dd50ce32bcab12ed6d"
      }
    ],
    "stats": {
      "total": 287,
      "additions": 181,
      "deletions": 106
    },
    "files": [
      {
        "sha": "afbae6fc57275514ab7d932025adc9545cf36a19",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -127,7 +127,7 @@ class CMainParams : public CChainParams {\n         //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n         //   vMerkleTree: 4a5e1e\n         const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CTransaction txNew;\n+        CMutableTransaction txNew;\n         txNew.vin.resize(1);\n         txNew.vout.resize(1);\n         txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));"
      },
      {
        "sha": "6c5ee1c0f87386d94a88b395917a3f1746009395",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -91,11 +91,34 @@ std::string CFeeRate::ToString() const\n     return result;\n }\n \n-uint256 CTransaction::GetHash() const\n+CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+\n+uint256 CMutableTransaction::GetHash() const\n {\n     return SerializeHash(*this);\n }\n \n+void CTransaction::UpdateHash() const\n+{\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+}\n+\n+CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+    UpdateHash();\n+}\n+\n+CTransaction& CTransaction::operator=(const CTransaction &tx) {\n+    *const_cast<int*>(&nVersion) = tx.nVersion;\n+    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n+    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n+    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n+    *const_cast<uint256*>(&hash) = tx.hash;\n+    return *this;\n+}\n+\n int64_t CTransaction::GetValueOut() const\n {\n     int64_t nValueOut = 0;"
      },
      {
        "sha": "1a20145ccf721a95a4dadea71c39a96cf8ec8324",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 62,
        "deletions": 31,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -203,49 +203,59 @@ class CTxOut\n };\n \n \n+struct CMutableTransaction;\n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n class CTransaction\n {\n+private:\n+    /** Memory only. */\n+    const uint256 hash;\n+    void UpdateHash() const;\n+\n public:\n     static CFeeRate minTxFee;\n     static CFeeRate minRelayTxFee;\n     static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    std::vector<CTxIn> vin;\n-    std::vector<CTxOut> vout;\n-    unsigned int nLockTime;\n \n-    CTransaction()\n-    {\n-        SetNull();\n-    }\n+    // The local variables are made const to prevent unintended modification\n+    // without updating the cached hash value. However, CTransaction is not\n+    // actually immutable; deserialization and assignment are implemented,\n+    // and bypass the constness. This is safe, as they update the entire\n+    // structure, including the hash.\n+    const int nVersion;\n+    const std::vector<CTxIn> vin;\n+    const std::vector<CTxOut> vout;\n+    const unsigned int nLockTime;\n \n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n+    /** Construct a CTransaction that qualifies as IsNull() */\n+    CTransaction();\n+\n+    /** Convert a CMutableTransaction into a CTransaction. */\n+    CTransaction(const CMutableTransaction &tx);\n+\n+    CTransaction& operator=(const CTransaction& tx);\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(*const_cast<int*>(&this->nVersion));\n         nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n+        READWRITE(*const_cast<unsigned int*>(&nLockTime));\n+        if (fRead)\n+            UpdateHash();\n     )\n \n-    void SetNull()\n-    {\n-        nVersion = CTransaction::CURRENT_VERSION;\n-        vin.clear();\n-        vout.clear();\n-        nLockTime = 0;\n+    bool IsNull() const {\n+        return vin.empty() && vout.empty();\n     }\n \n-    bool IsNull() const\n-    {\n-        return (vin.empty() && vout.empty());\n+    const uint256& GetHash() const {\n+        return hash;\n     }\n \n-    uint256 GetHash() const;\n-\n     // Return sum of txouts.\n     int64_t GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n@@ -261,22 +271,43 @@ class CTransaction\n \n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n-        return (a.nVersion  == b.nVersion &&\n-                a.vin       == b.vin &&\n-                a.vout      == b.vout &&\n-                a.nLockTime == b.nLockTime);\n+        return a.hash == b.hash;\n     }\n \n     friend bool operator!=(const CTransaction& a, const CTransaction& b)\n     {\n-        return !(a == b);\n+        return a.hash != b.hash;\n     }\n \n-\n     std::string ToString() const;\n     void print() const;\n };\n \n+/** A mutable version of CTransaction. */\n+struct CMutableTransaction\n+{\n+    int nVersion;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n+    unsigned int nLockTime;\n+\n+    CMutableTransaction();\n+    CMutableTransaction(const CTransaction& tx);\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(vin);\n+        READWRITE(vout);\n+        READWRITE(nLockTime);\n+    )\n+\n+    /** Compute the hash of this CMutableTransaction. This is computed on the\n+     * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n+     */\n+    uint256 GetHash() const;\n+};\n+\n /** wrapper for CTxOut that provides a more compact serialization */\n class CTxOutCompressor\n {"
      },
      {
        "sha": "37cdc7d840db83785a10e8d2c5006fdb9de46606",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -86,14 +86,14 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Create coinbase tx\n-    CTransaction txNew;\n+    CMutableTransaction txNew;\n     txNew.vin.resize(1);\n     txNew.vin[0].prevout.SetNull();\n     txNew.vout.resize(1);\n     txNew.vout[0].scriptPubKey = scriptPubKeyIn;\n \n-    // Add our coinbase tx as first transaction\n-    pblock->vtx.push_back(txNew);\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.push_back(CTransaction());\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n \n@@ -294,15 +294,17 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         nLastBlockSize = nBlockSize;\n         LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n \n-        pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+        // Compute final coinbase transaction.\n+        txNew.vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+        txNew.vin[0].scriptSig = CScript() << OP_0 << OP_0;\n+        pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         UpdateTime(*pblock, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n-        pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CBlockIndex indexDummy(*pblock);\n@@ -328,9 +330,11 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     }\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n+    pblock->vtx[0] = txCoinbase;\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "52bdf967311668d5f4e2bb340c946960a7d75ed8",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -440,7 +440,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     // nPayAmount\n     qint64 nPayAmount = 0;\n     bool fDust = false;\n-    CTransaction txDummy;\n+    CMutableTransaction txDummy;\n     foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;"
      },
      {
        "sha": "1b5d494beb55a5198d226973fa4879b84241d32a",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -349,7 +349,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n \n-    CTransaction rawTx;\n+    CMutableTransaction rawTx;\n \n     BOOST_FOREACH(const Value& input, inputs)\n     {\n@@ -554,11 +554,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n-    vector<CTransaction> txVariants;\n+    vector<CMutableTransaction> txVariants;\n     while (!ssData.empty())\n     {\n         try {\n-            CTransaction tx;\n+            CMutableTransaction tx;\n             ssData >> tx;\n             txVariants.push_back(tx);\n         }\n@@ -572,7 +572,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     // mergedTx will end up with all the signatures; it\n     // starts as a clone of the rawtx:\n-    CTransaction mergedTx(txVariants[0]);\n+    CMutableTransaction mergedTx(txVariants[0]);\n     bool fComplete = true;\n \n     // Fetch previous transactions (inputs):\n@@ -713,7 +713,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+        BOOST_FOREACH(const CMutableTransaction& txv, txVariants)\n         {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }"
      },
      {
        "sha": "c83d26885a6a808f8c9022f580d28c389847b31f",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -1636,7 +1636,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n }\n \n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n@@ -1671,7 +1671,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransa\n     return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n@@ -1689,7 +1689,7 @@ static CScript PushAll(const vector<valtype>& values)\n     return result;\n }\n \n-static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction& txTo, unsigned int nIn,\n                                const vector<valtype>& vSolutions,\n                                vector<valtype>& sigs1, vector<valtype>& sigs2)\n {"
      },
      {
        "sha": "bd6574627aaa98e95a892777075e23e7fc3844dc",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -20,6 +20,7 @@\n class CCoins;\n class CKeyStore;\n class CTransaction;\n+class CMutableTransaction;\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n@@ -805,8 +806,8 @@ bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n \n // Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,"
      },
      {
        "sha": "3a45844411f260e07807d26896b98a0b45c7a5fe",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -167,7 +167,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     // 50 orphan transactions:\n     for (int i = 0; i < 50; i++)\n     {\n-        CTransaction tx;\n+        CMutableTransaction tx;\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n         tx.vin[0].prevout.hash = GetRandHash();\n@@ -184,7 +184,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     {\n         CTransaction txPrev = RandomOrphan();\n \n-        CTransaction tx;\n+        CMutableTransaction tx;\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n         tx.vin[0].prevout.hash = txPrev.GetHash();\n@@ -201,7 +201,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     {\n         CTransaction txPrev = RandomOrphan();\n \n-        CTransaction tx;\n+        CMutableTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n@@ -242,10 +242,10 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n \n     // 100 orphan transactions:\n     static const int NPREV=100;\n-    CTransaction orphans[NPREV];\n+    CMutableTransaction orphans[NPREV];\n     for (int i = 0; i < NPREV; i++)\n     {\n-        CTransaction& tx = orphans[i];\n+        CMutableTransaction& tx = orphans[i];\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n         tx.vin[0].prevout.hash = GetRandHash();\n@@ -258,7 +258,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     }\n \n     // Create a transaction that depends on orphans:\n-    CTransaction tx;\n+    CMutableTransaction tx;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 1*CENT;\n     tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());"
      },
      {
        "sha": "4bee0f6b6e2611936dd5224e6ed71d2fea64ad97",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -83,13 +83,21 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n \n     wtx.mapValue[\"comment\"] = \"y\";\n-    --wtx.nLockTime;  // Just to change the hash :)\n+    {\n+        CMutableTransaction tx(wtx);\n+        --tx.nLockTime;  // Just to change the hash :)\n+        *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+    }\n     pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n-    --wtx.nLockTime;  // Just to change the hash :)\n+    {\n+        CMutableTransaction tx(wtx);\n+        --tx.nLockTime;  // Just to change the hash :)\n+        *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+    }\n     pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;"
      },
      {
        "sha": "47977cf29540d0998637d960b03969db32665b33",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -51,7 +51,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n-    CTransaction tx,tx2;\n+    CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n \n@@ -68,10 +68,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n         pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-        pblock->vtx[0].vin[0].scriptSig = CScript();\n-        pblock->vtx[0].vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n-        pblock->vtx[0].vin[0].scriptSig.push_back(chainActive.Height());\n-        pblock->vtx[0].vout[0].scriptPubKey = CScript();\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        txCoinbase.vin[0].scriptSig = CScript();\n+        txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n+        txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();"
      },
      {
        "sha": "452cf084a74425e503b02a24f996708aa9c75b77",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -55,13 +55,13 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CScript escrow;\n     escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n-    CTransaction txFrom;  // Funding transaction\n+    CMutableTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);\n     txFrom.vout[0].scriptPubKey = a_and_b;\n     txFrom.vout[1].scriptPubKey = a_or_b;\n     txFrom.vout[2].scriptPubKey = escrow;\n \n-    CTransaction txTo[3]; // Spending transaction\n+    CMutableTransaction txTo[3]; // Spending transaction\n     for (int i = 0; i < 3; i++)\n     {\n         txTo[i].vin.resize(1);\n@@ -270,13 +270,13 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     CScript escrow;\n     escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n-    CTransaction txFrom;  // Funding transaction\n+    CMutableTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);\n     txFrom.vout[0].scriptPubKey = a_and_b;\n     txFrom.vout[1].scriptPubKey = a_or_b;\n     txFrom.vout[2].scriptPubKey = escrow;\n \n-    CTransaction txTo[3]; // Spending transaction\n+    CMutableTransaction txTo[3]; // Spending transaction\n     for (int i = 0; i < 3; i++)\n     {\n         txTo[i].vin.resize(1);"
      },
      {
        "sha": "9dce4daac6c905ddca3b22c5ec829f1d23c092c2",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -36,9 +36,9 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         // build a block with some dummy transactions\n         CBlock block;\n         for (unsigned int j=0; j<nTx; j++) {\n-            CTransaction tx;\n+            CMutableTransaction tx;\n             tx.nLockTime = rand(); // actual transaction data doesn't matter; just make the nLockTime's unique\n-            block.vtx.push_back(tx);\n+            block.vtx.push_back(CTransaction(tx));\n         }\n \n         // calculate actual merkle root and height"
      },
      {
        "sha": "a75593a8b2906560ac37e4e0effd2dfbff6f1d96",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -30,11 +30,11 @@ static bool\n Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n {\n     // Create dummy to/from transactions:\n-    CTransaction txFrom;\n+    CMutableTransaction txFrom;\n     txFrom.vout.resize(1);\n     txFrom.vout[0].scriptPubKey = scriptPubKey;\n \n-    CTransaction txTo;\n+    CMutableTransaction txTo;\n     txTo.vin.resize(1);\n     txTo.vout.resize(1);\n     txTo.vin[0].prevout.n = 0;\n@@ -78,7 +78,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         evalScripts[i].SetDestination(standardScripts[i].GetID());\n     }\n \n-    CTransaction txFrom;  // Funding transaction:\n+    CMutableTransaction txFrom;  // Funding transaction:\n     string reason;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n     BOOST_CHECK(IsStandardTx(txFrom, reason));\n \n-    CTransaction txTo[8]; // Spending transactions\n+    CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n     {\n         txTo[i].vin.resize(1);\n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(set)\n         keystore.AddCScript(inner[i]);\n     }\n \n-    CTransaction txFrom;  // Funding transaction:\n+    CMutableTransaction txFrom;  // Funding transaction:\n     string reason;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n@@ -183,7 +183,7 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n     BOOST_CHECK(IsStandardTx(txFrom, reason));\n \n-    CTransaction txTo[4]; // Spending transactions\n+    CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n     {\n         txTo[i].vin.resize(1);\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         keys.push_back(key[i].GetPubKey());\n     }\n \n-    CTransaction txFrom;\n+    CMutableTransaction txFrom;\n     txFrom.vout.resize(6);\n \n     // First three are standard:\n@@ -299,7 +299,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n \n-    CTransaction txTo;\n+    CMutableTransaction txTo;\n     txTo.vout.resize(1);\n     txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n \n@@ -326,7 +326,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         txTo.vin[i].scriptSig = t;\n     }\n \n-    CTransaction txToNonStd;\n+    CMutableTransaction txToNonStd;\n     txToNonStd.vout.resize(1);\n     txToNonStd.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n     txToNonStd.vout[0].nValue = 1000;"
      },
      {
        "sha": "cba582e941a73ccc366e21bbf90a3ea07f794269",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -240,11 +240,11 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CScript scriptPubKey12;\n     scriptPubKey12 << OP_1 << key1.GetPubKey() << key2.GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n-    CTransaction txFrom12;\n+    CMutableTransaction txFrom12;\n     txFrom12.vout.resize(1);\n     txFrom12.vout[0].scriptPubKey = scriptPubKey12;\n \n-    CTransaction txTo12;\n+    CMutableTransaction txTo12;\n     txTo12.vin.resize(1);\n     txTo12.vout.resize(1);\n     txTo12.vin[0].prevout.n = 0;\n@@ -274,11 +274,11 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CScript scriptPubKey23;\n     scriptPubKey23 << OP_2 << key1.GetPubKey() << key2.GetPubKey() << key3.GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n-    CTransaction txFrom23;\n+    CMutableTransaction txFrom23;\n     txFrom23.vout.resize(1);\n     txFrom23.vout[0].scriptPubKey = scriptPubKey23;\n \n-    CTransaction txTo23;\n+    CMutableTransaction txTo23;\n     txTo23.vin.resize(1);\n     txTo23.vout.resize(1);\n     txTo23.vin[0].prevout.n = 0;\n@@ -345,11 +345,11 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         keystore.AddKey(key);\n     }\n \n-    CTransaction txFrom;\n+    CMutableTransaction txFrom;\n     txFrom.vout.resize(1);\n     txFrom.vout[0].scriptPubKey.SetDestination(keys[0].GetPubKey().GetID());\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n-    CTransaction txTo;\n+    CMutableTransaction txTo;\n     txTo.vin.resize(1);\n     txTo.vout.resize(1);\n     txTo.vin[0].prevout.n = 0;"
      },
      {
        "sha": "423ae4a789fd63f13f8558f231ef5339bef4354f",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -28,7 +28,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n         return 1;\n     }\n-    CTransaction txTmp(txTo);\n+    CMutableTransaction txTmp(txTo);\n \n     // In case concatenating two scripts ends up with two codeseparators,\n     // or an extra one at the end, this prevents all those possible incompatibilities.\n@@ -90,7 +90,7 @@ void static RandomScript(CScript &script) {\n         script << oplist[insecure_rand() % (sizeof(oplist)/sizeof(oplist[0]))];\n }\n \n-void static RandomTransaction(CTransaction &tx, bool fSingle) {\n+void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     tx.nVersion = insecure_rand();\n     tx.vin.clear();\n     tx.vout.clear();\n@@ -130,7 +130,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n     #endif\n     for (int i=0; i<nRandomTests; i++) {\n         int nHashType = insecure_rand();\n-        CTransaction txTo;\n+        CMutableTransaction txTo;\n         RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE);\n         CScript scriptCode;\n         RandomScript(scriptCode);"
      },
      {
        "sha": "238033f407b05bc8704d281109f70b1e3abe63bf",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -208,7 +208,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n     CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n-    CTransaction tx;\n+    CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n     BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n@@ -224,10 +224,10 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n // paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n // paid to a TX_PUBKEYHASH.\n //\n-static std::vector<CTransaction>\n+static std::vector<CMutableTransaction>\n SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n {\n-    std::vector<CTransaction> dummyTransactions;\n+    std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n \n     // Add some keys to the keystore:\n@@ -261,9 +261,9 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(coinsDummy);\n-    std::vector<CTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n-    CTransaction t1;\n+    CMutableTransaction t1;\n     t1.vin.resize(3);\n     t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n     t1.vin[0].prevout.n = 1;\n@@ -296,9 +296,9 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(coinsDummy);\n-    std::vector<CTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n-    CTransaction t;\n+    CMutableTransaction t;\n     t.vin.resize(1);\n     t.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n     t.vin[0].prevout.n = 1;"
      },
      {
        "sha": "86a83f5163966af9ea877ed2e3b3cdb1a0c85333",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -31,16 +31,18 @@ static vector<COutput> vCoins;\n static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n-    CTransaction tx;\n+    CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     tx.vout.resize(nInput+1);\n     tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n     CWalletTx* wtx = new CWalletTx(&wallet, tx);\n     if (fIsFromMe)\n     {\n-        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n-        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n-        wtx->vin.resize(1);\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }"
      },
      {
        "sha": "0e0a0e87d381892346d02ec87e12bfa3414207fc",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4949004d68dc08382df2c34ae519c1b1cfd60f1a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "patch": "@@ -1245,15 +1245,16 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n     }\n \n     wtxNew.BindWallet(this);\n+    CMutableTransaction txNew;\n \n     {\n         LOCK2(cs_main, cs_wallet);\n         {\n             nFeeRet = payTxFee.GetFeePerK();\n             while (true)\n             {\n-                wtxNew.vin.clear();\n-                wtxNew.vout.clear();\n+                txNew.vin.clear();\n+                txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n                 int64_t nTotalValue = nValue + nFeeRet;\n@@ -1267,7 +1268,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                         strFailReason = _(\"Transaction amount too small\");\n                         return false;\n                     }\n-                    wtxNew.vout.push_back(txout);\n+                    txNew.vout.push_back(txout);\n                 }\n \n                 // Choose coins to use\n@@ -1331,26 +1332,29 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     else\n                     {\n                         // Insert change txn at random position:\n-                        vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size()+1);\n-                        wtxNew.vout.insert(position, newTxOut);\n+                        vector<CTxOut>::iterator position = txNew.vout.begin()+GetRandInt(txNew.vout.size()+1);\n+                        txNew.vout.insert(position, newTxOut);\n                     }\n                 }\n                 else\n                     reservekey.ReturnKey();\n \n                 // Fill vin\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                    wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n+                    txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n \n                 // Sign\n                 int nIn = 0;\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                    if (!SignSignature(*this, *coin.first, wtxNew, nIn++))\n+                    if (!SignSignature(*this, *coin.first, txNew, nIn++))\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n                     }\n \n+                // Embed the constructed transaction data in wtxNew.\n+                *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n+\n                 // Limit size\n                 unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK, PROTOCOL_VERSION);\n                 if (nBytes >= MAX_STANDARD_TX_SIZE)"
      }
    ]
  },
  {
    "sha": "d38da59bf68fbb37535e2579bfb7355a16baed0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzhkYTU5YmY2OGZiYjM3NTM1ZTI1NzliZmI3MzU1YTE2YmFlZDBl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T08:02:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T22:06:17Z"
      },
      "message": "Code simplifications after CTransaction::GetHash() caching",
      "tree": {
        "sha": "fb9821f60f32fa8ea0564d1149fa37ab396ead97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb9821f60f32fa8ea0564d1149fa37ab396ead97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d38da59bf68fbb37535e2579bfb7355a16baed0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d38da59bf68fbb37535e2579bfb7355a16baed0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d38da59bf68fbb37535e2579bfb7355a16baed0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d38da59bf68fbb37535e2579bfb7355a16baed0e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4949004d68dc08382df2c34ae519c1b1cfd60f1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4949004d68dc08382df2c34ae519c1b1cfd60f1a"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 67,
      "deletions": 78
    },
    "files": [
      {
        "sha": "26e366179cad0b8ff2d2023289a6f4aac1af9242",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -99,7 +99,7 @@ bool CBloomFilter::IsWithinSizeConstraints() const\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n }\n \n-bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash)\n+bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n {\n     bool fFound = false;\n     // Match if the filter contains the hash of tx\n@@ -108,6 +108,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& ha\n         return true;\n     if (isEmpty)\n         return false;\n+    const uint256& hash = tx.GetHash();\n     if (contains(hash))\n         fFound = true;\n "
      },
      {
        "sha": "956bead87f872e0d155fd785d37e22d91261f2ea",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -83,7 +83,7 @@ class CBloomFilter\n     bool IsWithinSizeConstraints() const;\n \n     // Also adds any outputs which match the filter to the filter (to match their spending txes)\n-    bool IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash);\n+    bool IsRelevantAndUpdate(const CTransaction& tx);\n \n     // Checks for empty and full filters to avoid wasting cpu\n     void UpdateEmptyFull();"
      },
      {
        "sha": "27fda95552fdaea7b3361c58283b154573fe8f0b",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -496,12 +496,6 @@ class CBlock : public CBlockHeader\n \n     uint256 BuildMerkleTree() const;\n \n-    const uint256 &GetTxHash(unsigned int nIndex) const {\n-        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n-        assert(nIndex < vtx.size());\n-        return vMerkleTree[nIndex];\n-    }\n-\n     std::vector<uint256> GetMerkleBranch(int nIndex) const;\n     static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);\n     void print() const;"
      },
      {
        "sha": "d3f04b95fa790cf487114dbecce5ed05aa86bf91",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 32,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -130,8 +130,8 @@ namespace {\n \n namespace {\n struct CMainSignals {\n-    // Notifies listeners of updated transaction data (passing hash, transaction, and optionally the block it is found in.\n-    boost::signals2::signal<void (const uint256 &, const CTransaction &, const CBlock *)> SyncTransaction;\n+    // Notifies listeners of updated transaction data (transaction, and optionally the block it is found in.\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n     // Notifies listeners of an erased transaction (currently disabled, requires transaction replacement).\n     boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n     // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n@@ -146,7 +146,7 @@ struct CMainSignals {\n }\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n@@ -160,7 +160,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.EraseTransaction.disconnect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n }\n \n void UnregisterAllWallets() {\n@@ -172,8 +172,8 @@ void UnregisterAllWallets() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const uint256 &hash, const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(hash, tx, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pblock);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -952,7 +952,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         pool.addUnchecked(hash, entry);\n     }\n \n-    g_signals.SyncTransaction(hash, tx, NULL);\n+    g_signals.SyncTransaction(tx, NULL);\n \n     return true;\n }\n@@ -1479,7 +1479,7 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n \n \n \n-void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash)\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)\n {\n     bool ret;\n     // mark inputs spent\n@@ -1494,7 +1494,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     }\n \n     // add outputs\n-    ret = inputs.SetCoins(txhash, CCoins(tx, nHeight));\n+    ret = inputs.SetCoins(tx.GetHash(), CCoins(tx, nHeight));\n     assert(ret);\n }\n \n@@ -1767,8 +1767,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n-        for (unsigned int i = 0; i < block.vtx.size(); i++) {\n-            uint256 hash = block.GetTxHash(i);\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+            const uint256& hash = tx.GetHash();\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n@@ -1829,11 +1829,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         }\n \n         CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight, block.GetTxHash(i));\n+        UpdateCoins(tx, state, view, txundo, pindex->nHeight);\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n-        vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n+        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime = GetTimeMicros() - nStart;\n@@ -1892,13 +1892,13 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     assert(ret);\n \n     // Watch for transactions paying to me\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        g_signals.SyncTransaction(block.GetTxHash(i), block.vtx[i], &block);\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        g_signals.SyncTransaction(tx, &block);\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n     g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n-    hashPrevBestCoinBase = block.GetTxHash(0);\n+    hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n     return true;\n }\n@@ -1996,7 +1996,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+        SyncWithWallets(tx, NULL);\n     }\n     return true;\n }\n@@ -2036,11 +2036,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+        SyncWithWallets(tx, NULL);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, &block);\n+        SyncWithWallets(tx, &block);\n     }\n     return true;\n }\n@@ -2381,16 +2381,11 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n-    // Build the merkle tree already. We need it anyway later, and it makes the\n-    // block cache the transaction hashes, which means they don't need to be\n-    // recalculated many times during this block's validation.\n-    block.BuildMerkleTree();\n-\n     // Check for duplicate txids. This is caught by ConnectInputs(),\n     // but catching it earlier avoids a potential DoS attack:\n     set<uint256> uniqueTx;\n-    for (unsigned int i = 0; i < block.vtx.size(); i++) {\n-        uniqueTx.insert(block.GetTxHash(i));\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        uniqueTx.insert(tx.GetHash());\n     }\n     if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n@@ -2406,7 +2401,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && block.hashMerkleRoot != block.vMerkleTree.back())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n                          REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n@@ -2682,8 +2677,8 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n \n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n-        uint256 hash = block.vtx[i].GetHash();\n-        if (filter.IsRelevantAndUpdate(block.vtx[i], hash))\n+        const uint256& hash = block.vtx[i].GetHash();\n+        if (filter.IsRelevantAndUpdate(block.vtx[i]))\n         {\n             vMatch.push_back(true);\n             vMatchedTxn.push_back(make_pair(i, hash));\n@@ -3832,7 +3827,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n-            RelayTransaction(tx, inv.hash);\n+            RelayTransaction(tx);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n@@ -3862,7 +3857,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx, orphanHash);\n+                        RelayTransaction(orphanTx);\n                         mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n                         vWorkQueue.push_back(orphanHash);\n                         vEraseQueue.push_back(orphanHash);\n@@ -3947,7 +3942,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             CTransaction tx;\n             bool fInMemPool = mempool.lookup(hash, tx);\n             if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx, hash)) ||\n+            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n                (!pfrom->pfilter))\n                 vInv.push_back(inv);\n             if (vInv.size() == MAX_INV_SZ) {"
      },
      {
        "sha": "7071f0094ffa72dd261b67f0536be26203246261",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -113,7 +113,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -294,7 +294,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                  std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n-void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash);\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight);\n \n // Context-independent validity checks\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n@@ -1129,7 +1129,7 @@ class CMerkleBlock\n \n class CWalletInterface {\n protected:\n-    virtual void SyncTransaction(const uint256 &hash, const CTransaction &tx, const CBlock *pblock) =0;\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) =0;\n     virtual void EraseFromWallet(const uint256 &hash) =0;\n     virtual void SetBestChain(const CBlockLocator &locator) =0;\n     virtual void UpdatedTransaction(const uint256 &hash) =0;"
      },
      {
        "sha": "63ce1250678b8f66a9f3754e5b1a1b6da523254b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -254,8 +254,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 continue;\n \n             CTxUndo txundo;\n-            uint256 hash = tx.GetHash();\n-            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1, hash);\n+            const uint256& hash = tx.GetHash();\n+            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1);\n \n             // Added\n             pblock->vtx.push_back(tx);"
      },
      {
        "sha": "fe6b07aa942cc512ef23ae7704c8e11b067e01ad",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -1808,17 +1808,17 @@ instance_of_cnetcleanup;\n \n \n \n-void RelayTransaction(const CTransaction& tx, const uint256& hash)\n+void RelayTransaction(const CTransaction& tx)\n {\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss.reserve(10000);\n     ss << tx;\n-    RelayTransaction(tx, hash, ss);\n+    RelayTransaction(tx, ss);\n }\n \n-void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataStream& ss)\n+void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n {\n-    CInv inv(MSG_TX, hash);\n+    CInv inv(MSG_TX, tx.GetHash());\n     {\n         LOCK(cs_mapRelay);\n         // Expire old relay messages\n@@ -1840,7 +1840,7 @@ void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataSt\n         LOCK(pnode->cs_filter);\n         if (pnode->pfilter)\n         {\n-            if (pnode->pfilter->IsRelevantAndUpdate(tx, hash))\n+            if (pnode->pfilter->IsRelevantAndUpdate(tx))\n                 pnode->PushInventory(inv);\n         } else\n             pnode->PushInventory(inv);"
      },
      {
        "sha": "eec92f340c517243f60766a00f5ff958b6a69a0e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -726,8 +726,8 @@ class CNode\n \n \n class CTransaction;\n-void RelayTransaction(const CTransaction& tx, const uint256& hash);\n-void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataStream& ss);\n+void RelayTransaction(const CTransaction& tx);\n+void RelayTransaction(const CTransaction& tx, const CDataStream& ss);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      },
      {
        "sha": "9771f8e685019e41401c3ef4d45d41651030ae87",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -770,7 +770,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     catch (std::exception &e) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n-    uint256 hashTx = tx.GetHash();\n+    const uint256 &hashTx = tx.GetHash();\n \n     CCoinsViewCache &view = *pcoinsTip;\n     CCoins existingCoins;\n@@ -780,7 +780,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         if (AcceptToMemoryPool(mempool, state, tx, false, NULL, !fOverrideFees))\n-            SyncWithWallets(hashTx, tx, NULL);\n+            SyncWithWallets(tx, NULL);\n         else {\n             if(state.IsInvalid())\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n@@ -790,7 +790,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n-    RelayTransaction(tx, hashTx);\n+    RelayTransaction(tx);\n \n     return hashTx.GetHex();\n }"
      },
      {
        "sha": "b56d998be29c70925e5ccc7da6d692eebbb8195b",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -118,33 +118,33 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match tx hash\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // byte-reversed tx hash\n     filter.insert(ParseHex(\"6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized tx hash\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match manually serialized tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input signature\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match input signature\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input pub key\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match input pub key\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"04943fdd508053c75000106d3bc6e2754dbcff19\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx, spendingTx.GetHash()), \"Simple Bloom filter didn't add output\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match output address\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx), \"Simple Bloom filter didn't add output\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"a266436d2965547608b9e15d9032a7b9d64fa431\"));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match output address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match COutPoint\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n@@ -154,23 +154,23 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n         memcpy(&data[32], &prevOutPoint.n, sizeof(unsigned int));\n         filter.insert(data);\n     }\n-    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n-    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random tx hash\");\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n-    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random address\");\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n-    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n-    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n }\n \n BOOST_AUTO_TEST_CASE(merkle_block_1)"
      },
      {
        "sha": "7664d6c25c943e8fde809bac4240e017a76a4cf9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -603,11 +603,11 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n // Add a transaction to the wallet, or update it.\n // pblock is optional, but should be provided if the transaction is known to be in a block.\n // If fUpdate is true, existing transactions will be updated.\n-bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n     {\n         AssertLockHeld(cs_wallet);\n-        bool fExisted = mapWallet.count(hash);\n+        bool fExisted = mapWallet.count(tx.GetHash());\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n@@ -621,10 +621,10 @@ bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction&\n     return false;\n }\n \n-void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n-    if (!AddToWalletIfInvolvingMe(hash, tx, pblock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -870,7 +870,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);\n@@ -909,9 +909,8 @@ void CWalletTx::RelayWalletTransaction()\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n-            uint256 hash = GetHash();\n-            LogPrintf(\"Relaying wtx %s\\n\", hash.ToString());\n-            RelayTransaction((CTransaction)*this, hash);\n+            LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n+            RelayTransaction((CTransaction)*this);\n         }\n     }\n }"
      },
      {
        "sha": "424799b14e42f8849aba1a7bed3c0131c13cbe43",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d38da59bf68fbb37535e2579bfb7355a16baed0e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d38da59bf68fbb37535e2579bfb7355a16baed0e",
        "patch": "@@ -244,8 +244,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n-    void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      }
    ]
  }
]