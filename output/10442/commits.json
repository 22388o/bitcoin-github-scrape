[
  {
    "sha": "0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjE3NjY1YWMzN2ZiYmY0MDVkODY4MWVjOWY0YmRkNjNjNzcyNTVl",
    "commit": {
      "author": {
        "name": "root",
        "email": "erik@q32.com",
        "date": "2017-05-19T04:00:39Z"
      },
      "committer": {
        "name": "root",
        "email": "erik@q32.com",
        "date": "2017-05-26T00:28:56Z"
      },
      "message": "add a -bip148 option",
      "tree": {
        "sha": "764780113b4ba7d18576a5ee8ae1c74539cf0bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/764780113b4ba7d18576a5ee8ae1c74539cf0bdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/comments",
    "author": {
      "login": "earonesty",
      "id": 50769,
      "node_id": "MDQ6VXNlcjUwNzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/50769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earonesty",
      "html_url": "https://github.com/earonesty",
      "followers_url": "https://api.github.com/users/earonesty/followers",
      "following_url": "https://api.github.com/users/earonesty/following{/other_user}",
      "gists_url": "https://api.github.com/users/earonesty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earonesty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earonesty/subscriptions",
      "organizations_url": "https://api.github.com/users/earonesty/orgs",
      "repos_url": "https://api.github.com/users/earonesty/repos",
      "events_url": "https://api.github.com/users/earonesty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earonesty/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "earonesty",
      "id": 50769,
      "node_id": "MDQ6VXNlcjUwNzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/50769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earonesty",
      "html_url": "https://github.com/earonesty",
      "followers_url": "https://api.github.com/users/earonesty/followers",
      "following_url": "https://api.github.com/users/earonesty/following{/other_user}",
      "gists_url": "https://api.github.com/users/earonesty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earonesty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earonesty/subscriptions",
      "organizations_url": "https://api.github.com/users/earonesty/orgs",
      "repos_url": "https://api.github.com/users/earonesty/repos",
      "events_url": "https://api.github.com/users/earonesty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earonesty/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4314544d46e8e46c3c9da60f1d18297f52f58418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4314544d46e8e46c3c9da60f1d18297f52f58418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4314544d46e8e46c3c9da60f1d18297f52f58418"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 43,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ea61949e23b5abdd58fb63ae092562257d7a38f8",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -451,6 +451,9 @@ Set maximum size of high\\-priority/low\\-fee transactions in bytes\n .IP\n Set lowest fee rate (in BTC/kB) for transactions to be included in block\n creation. (default: 0.00001)\n+\\fB\\-bip148\\fR\n+.IP\n+Enable BIP148 enforcement\n .PP\n RPC server options:\n .HP"
      },
      {
        "sha": "b369ffda76a3f2c2fee13e06b1dc04195b1e8e8e",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -456,6 +456,9 @@ Set maximum size of high\\-priority/low\\-fee transactions in bytes\n .IP\n Set lowest fee rate (in BTC/kB) for transactions to be included in block\n creation. (default: 0.00001)\n+\\fB\\-bip148\\fR\n+.IP\n+Enable BIP148 enforcement\n .PP\n RPC server options:\n .HP"
      },
      {
        "sha": "b91c4fc3cbefe6e8206bab3fe3859983c656e33a",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -5,6 +5,8 @@\n #include \"clientversion.h\"\n \n #include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n \n #include <string>\n \n@@ -85,7 +87,7 @@ std::string FormatFullVersion()\n /** \n  * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) \n  */\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments, bool fBaseNameOnly)\n {\n     std::ostringstream ss;\n     ss << \"/\";\n@@ -99,5 +101,9 @@ std::string FormatSubVersion(const std::string& name, int nClientVersion, const\n         ss << \")\";\n     }\n     ss << \"/\";\n+\n+    if (!fBaseNameOnly && gArgs.GetBoolArg(\"-bip148\", DEFAULT_BIP148))\n+        ss << \"UASF-Segwit:0.3(BIP148)/\";\n+\n     return ss.str();\n }"
      },
      {
        "sha": "0064930c2f4ad11d45d13bde3f392320d0da0781",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -46,7 +46,7 @@ extern const std::string CLIENT_BUILD;\n \n \n std::string FormatFullVersion();\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments, bool fBaseNameOnly=false);\n \n #endif // WINDRES_PREPROC\n "
      },
      {
        "sha": "fb6451b9a6208d40a379b6d2b1ea5457f589a2b9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -494,6 +494,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-bip148\", strprintf(_(\"Enable BIP148/UASF (default: %d)\"), DEFAULT_BIP148));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n "
      },
      {
        "sha": "df7ee535ae67c51639817fd62e5ce17c000e0a7b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -509,9 +509,9 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     std::vector<std::string> comments2;\n     comments2.push_back(std::string(\"comment1\"));\n     comments2.push_back(SanitizeString(std::string(\"Comment2; .,_?@-; !\\\"#$%&'()*+/<=>[]\\\\^`{|}~\"), SAFE_CHARS_UA_COMMENT)); // Semicolon is discouraged but not forbidden by BIP-0014\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; Comment2; .,_?@-; )/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>(),true),std::string(\"/Test:0.9.99/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments,true),std::string(\"/Test:0.9.99(comment1)/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2,true),std::string(\"/Test:0.9.99(comment1; Comment2; .,_?@-; )/\"));\n }\n \n BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)"
      },
      {
        "sha": "f1cfc7e8a069cd2087bea72b72b4d282230bafda",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -86,6 +86,7 @@ CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n+static bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n@@ -1565,6 +1566,22 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n+    if (gArgs.GetBoolArg(\"-bip148\", DEFAULT_BIP148)) {\n+        // BIP148 mandatory segwit signalling.\n+        int64_t nMedianTimePast = pindex->GetMedianTimePast();\n+        if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n+                (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n+                (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&  // Segwit is not locked in\n+                 !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )   // and is not active.\n+        {\n+            bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS;\n+            bool fSegbit = (pindex->nVersion & VersionBitsMask(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) != 0;\n+            if (!(fVersionBits && fSegbit)) {\n+                return state.DoS(0, error(\"ConnectBlock(): relayed block must signal for segwit\"), REJECT_INVALID, \"bad-no-segwit\");\n+            }\n+        }\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n \n@@ -2672,6 +2689,12 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n }\n \n+static bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_LOCKED_IN);\n+}\n+\n // Compute at which vout of the block's coinbase transaction the witness\n // commitment occurs, or -1 if not found.\n static int GetWitnessCommitmentIndex(const CBlock& block)"
      },
      {
        "sha": "78749346e49f2381242928e19f77a6db45cff11f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f17665ac37fbbf405d8681ec9f4bdd63c77255e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "patch": "@@ -76,6 +76,8 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+/** Default for -bip148 enforcement */\n+static const unsigned int DEFAULT_BIP148 = false;\n \n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;"
      }
    ]
  },
  {
    "sha": "c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTU4MGZmZmY3YWIwNjQxNGY4NTI3ZmNjZTAwYmFjNGIwNWQyZmJi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-26T16:22:54Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-26T20:37:10Z"
      },
      "message": "bip148: relax DoS detection during UASF\n\nWhen enforcing an optional user-activated soft-fork, peers that forward\nblocks that are valid except for the soft-fork rules are not making a\ndenial of service attack. This change relaxes the rules so that blocks\nbuilt on invalid blocks do not trigger DoS banning.",
      "tree": {
        "sha": "f1b9bb19c69974b2c53e43996a2647c6650c80f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1b9bb19c69974b2c53e43996a2647c6650c80f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9580ffff7ab06414f8527fcce00bac4b05d2fbb/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f17665ac37fbbf405d8681ec9f4bdd63c77255e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a3e70709431083e866130569b9dc7a469eee2d8e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9580ffff7ab06414f8527fcce00bac4b05d2fbb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9580ffff7ab06414f8527fcce00bac4b05d2fbb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
        "patch": "@@ -87,6 +87,7 @@ CTxMemPool mempool(&feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n static bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+static int DoS_UASF(int level);\n \n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n@@ -2859,6 +2860,18 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     return true;\n }\n \n+// If enabling a UASF flag, peers passing on blocks that don't\n+// enforce the soft-fork are probably not trying to DoS us. To avoid\n+// disconnecting them, change the DoS level to 0.\n+static int DoS_UASF(int level)\n+{\n+    if (gArgs.GetBoolArg(\"-bip148\", DEFAULT_BIP148)) {\n+        return 0;\n+    } else {\n+        return level;\n+    }\n+}\n+\n static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n@@ -2888,7 +2901,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(DoS_UASF(100), error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n \n         assert(pindexPrev);\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))"
      }
    ]
  },
  {
    "sha": "a020b85d213079a36b5f2ae94820b44e08dbbe07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDIwYjg1ZDIxMzA3OWEzNmI1ZjJhZTk0ODIwYjQ0ZTA4ZGJiZTA3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-27T06:50:16Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-27T06:50:16Z"
      },
      "message": "bip148: functional test\n\nBasic functional test for behaviour with -bip148 flag.",
      "tree": {
        "sha": "e6115437fa489542a80704a872b53f4046f528aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6115437fa489542a80704a872b53f4046f528aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a020b85d213079a36b5f2ae94820b44e08dbbe07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a020b85d213079a36b5f2ae94820b44e08dbbe07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a020b85d213079a36b5f2ae94820b44e08dbbe07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a020b85d213079a36b5f2ae94820b44e08dbbe07/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9580ffff7ab06414f8527fcce00bac4b05d2fbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9580ffff7ab06414f8527fcce00bac4b05d2fbb"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 169,
      "deletions": 0
    },
    "files": [
      {
        "sha": "719f827478b6d8573feb8f5bfad017d96dfc7caf",
        "filename": "test/functional/bip148-segwit-uasf.py",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a020b85d213079a36b5f2ae94820b44e08dbbe07/test/functional/bip148-segwit-uasf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a020b85d213079a36b5f2ae94820b44e08dbbe07/test/functional/bip148-segwit-uasf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip148-segwit-uasf.py?ref=a020b85d213079a36b5f2ae94820b44e08dbbe07",
        "patch": "@@ -0,0 +1,169 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the Mandatory Activation of Segregated Witness (BIP148) soft-fork logic.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+## Scenario:\n+#\n+# Four miners, whose hashrate and strategies are:\n+#\n+#     A ( 9%): mine longest chain, signalling segwit\n+#     B (27%): mine longest chain, not signalling segwit\n+#     C (37%): bip 148 enforcing, signalling segwit\n+#     D (27%): switches from (A) to (C) during August\n+#\n+# (1, 3, 4 and 3 elevenths of total hashrate respectively; mining\n+#  11 blocks a day, gives 143 blocks in 13 days, just one block\n+#  short of a retarget cycle)\n+#\n+# B, with 27% of hashrate is sufficient to block activation (which\n+#    requires 25% on regtest)\n+# A+B+D has 65% of hashrate prior to D switching\n+# C+D has 55% of hashrate post D's switch, and since C's hashrate is larger\n+#   than D's the original BIP-148 chain will eventually have more work\n+#   than D's chain, forcing a reorg and eventual consensus\n+\n+def bip9_blockver(*bits):\n+    return \"-blockversion=%d\" % (0x20000000 + sum(1<<b for b in bits))\n+\n+class BIP148Test(BitcoinTestFramework):\n+    AUG_1 = 1501545600\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 8\n+        self.setup_clean_chain = False\n+        self.extra_args = [\n+             [bip9_blockver(0)],   # for initial CSV activation only\n+             [bip9_blockver(1)],\n+             [bip9_blockver()],\n+             [bip9_blockver(1), \"-bip148\"],\n+             [bip9_blockver(1)],\n+             [],           # non-mining user, restarts with -bip148 on Aug 5th\n+             [],           # well connected, non BIP148 peer\n+             [\"-bip148\"]]  # well connected, BIP148 peer\n+\n+        self.day = -30 # 30 days before BIP168 activation\n+        self.blockrate = [0,1,3,4,3,0,0]\n+        self.sync_groups = [set((0,1,2,4,5,6)), set((3,7))]\n+\n+    def connect_all(self):\n+        connect_nodes(self.nodes[6],7)\n+        for i in range(6):\n+            connect_nodes(self.nodes[i], 6)\n+            connect_nodes(self.nodes[i], 7)\n+            self.log.info(\"connecting %d and 6, 7\" % (i))\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_all()\n+        self.sync_all()\n+\n+    def mining(self):\n+        time = self.AUG_1 + (self.day*24*60*60)\n+        to_mine = self.blockrate[:]\n+        groups = [ [self.nodes[i] for i in g] for g in self.sync_groups ]\n+\n+        while sum(to_mine) > 0:\n+            for peer,blks in enumerate(to_mine):\n+                if blks == 0: continue\n+                set_node_times(self.nodes, time)\n+                to_mine[peer] -= 1\n+                self.nodes[peer].generate(1)\n+                for g in groups:\n+                    if peer in g:\n+                        self.sync_all( [g] )\n+                time += 10*60\n+\n+        self.day += 1\n+\n+    def bip148_restart(self, peer):\n+        self.log.info(\"Restarting node %d with -bip148\" % (peer,))\n+        stop_node(self.nodes[peer], peer)\n+        time = self.AUG_1 + (self.day*24*60*60)\n+        self.nodes[peer] = start_node(peer, self.options.tmpdir, self.extra_args[4] + [\"-bip148\", \"-mocktime=%d\" % (time)])\n+\n+        n = self.nodes[peer]\n+        blk = n.getblock(n.getbestblockhash())\n+        worstblock = None\n+        while blk[\"mediantime\"] >= self.AUG_1:\n+            if blk[\"version\"] | 0x20000002 != blk[\"version\"]:\n+                worstblock = blk\n+            blk = n.getblock(blk[\"previousblockhash\"])\n+        if worstblock is not None:\n+            self.log.info(\"Invalidating block %d:%x:%s\" % (worstblock[\"height\"], worstblock[\"version\"], worstblock[\"hash\"]))\n+            n.invalidateblock(worstblock[\"hash\"])\n+\n+        self.log.info(\"Reconnecting nodes\")\n+        self.connect_all()\n+        self.log.info(\"Removing %d from non-BIP148 sync group\" % (peer,))\n+        self.sync_groups[0].remove(peer)\n+        self.log.info(\"Adding %d to BIP148 sync group\" % (peer,))\n+        self.sync_groups[1].add(peer)\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Lock in CSV\n+        self.nodes[0].generate(500)\n+        if (self.nodes[0].getblockcount() != cnt + 500):\n+            raise AssertionError(\"Failed to mine 500 bip9 bit 0 blocks\")\n+        cnt += 500\n+\n+        if get_bip9_status(self.nodes[0], 'csv')[\"status\"] != \"active\":\n+            raise AssertionError(\"Failed to activate OP_CSV\")\n+\n+        self.sync_all()\n+\n+        for d in range(120):\n+            if self.day == 0:\n+                swstatus = get_bip9_status(self.nodes[0], 'segwit')[\"status\"]\n+                if swstatus != \"started\":\n+                    raise AssertionError(\"segwit soft-fork in state %s rather than started\" % (swstatus))\n+\n+            self.mining()\n+            tips = set(n.getbestblockhash() for n in self.nodes)\n+            heights = [n.getblockcount() for n in self.nodes]\n+            segwit = [get_bip9_status(n, 'segwit')[\"status\"] for n in self.nodes]\n+            connect = [len(n.getpeerinfo()) for n in self.nodes]\n+            maxh = max(heights)\n+            out = [\"%d:\" % (maxh)]\n+            for c,h,s in zip(connect,heights,segwit):\n+                a = \"S\" if s == \"active\" else \"n\"\n+                a = \"%d/%s\" % (c,a)\n+                if h < maxh:\n+                    out.append(\"%s%d\" % (a, h-maxh))\n+                else:\n+                    out.append(a)\n+\n+            self.log.info(\"Day %d: status: %s\" % (self.day, out))\n+\n+            if self.day == 7:\n+                self.bip148_restart(5)\n+\n+            if self.day == 20:\n+                self.bip148_restart(4)\n+\n+            for i in range(6):\n+                if connect[i] == 0:\n+                    raise AssertionError(\"Peer %d has no connected peers after %d blocks\" % (i,maxh))\n+\n+            if self.day > 5 and len(tips) == 1:\n+                synccount += 1\n+            else:\n+                synccount = 0\n+            if synccount > 5:\n+                self.log.info(\"In sync for five days, consensus achieved\")\n+                break\n+\n+        if len(tips) > 1:\n+            raise AssertionError(\"Chain split still exists at day %d\" % (self.day))\n+\n+        return\n+\n+if __name__ == '__main__':\n+    BIP148Test().main()"
      }
    ]
  },
  {
    "sha": "22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmJmOWMxNGUxZTUxMDNkM2Y4NTA2NGRkODBhZDE5MGE2NGY0YzI4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-27T07:46:25Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-05-27T07:46:25Z"
      },
      "message": "bip148: ensure nodes are synced prior to bip148 date",
      "tree": {
        "sha": "8b0ccdf2ecbe35c476584f58f0c5feacbaae8ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b0ccdf2ecbe35c476584f58f0c5feacbaae8ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22bf9c14e1e5103d3f85064dd80ad190a64f4c28/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a020b85d213079a36b5f2ae94820b44e08dbbe07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a020b85d213079a36b5f2ae94820b44e08dbbe07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a020b85d213079a36b5f2ae94820b44e08dbbe07"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e82dcc6982c77949dea74fd12e2fb7d6dec51976",
        "filename": "test/functional/bip148-segwit-uasf.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22bf9c14e1e5103d3f85064dd80ad190a64f4c28/test/functional/bip148-segwit-uasf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22bf9c14e1e5103d3f85064dd80ad190a64f4c28/test/functional/bip148-segwit-uasf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip148-segwit-uasf.py?ref=22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
        "patch": "@@ -49,7 +49,6 @@ def __init__(self):\n \n         self.day = -30 # 30 days before BIP168 activation\n         self.blockrate = [0,1,3,4,3,0,0]\n-        self.sync_groups = [set((0,1,2,4,5,6)), set((3,7))]\n \n     def connect_all(self):\n         connect_nodes(self.nodes[6],7)\n@@ -107,6 +106,9 @@ def bip148_restart(self, peer):\n \n     def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n+        self.sync_groups = [set(range(self.num_nodes))]\n+        # (if nodes aren't synced initially, the non-segwit blocks may get accidentally orphaned\n+        #  activating/locking in segwit...)\n \n         # Lock in CSV\n         self.nodes[0].generate(500)\n@@ -120,10 +122,12 @@ def run_test(self):\n         self.sync_all()\n \n         for d in range(120):\n+            swstatus = get_bip9_status(self.nodes[0], 'segwit')[\"status\"]\n             if self.day == 0:\n-                swstatus = get_bip9_status(self.nodes[0], 'segwit')[\"status\"]\n                 if swstatus != \"started\":\n-                    raise AssertionError(\"segwit soft-fork in state %s rather than started\" % (swstatus))\n+                    raise AssertionError(\"segwit soft-fork in state %s rather than started at day 0\" % (swstatus))\n+                self.log.info(\"Splitting sync groups\")\n+                self.sync_groups = [set((0,1,2,4,5,6)), set((3,7))]\n \n             self.mining()\n             tips = set(n.getbestblockhash() for n in self.nodes)\n@@ -140,7 +144,7 @@ def run_test(self):\n                 else:\n                     out.append(a)\n \n-            self.log.info(\"Day %d: status: %s\" % (self.day, out))\n+            self.log.info(\"Day %d:%s: status: %s:\" % (self.day, swstatus, out))\n \n             if self.day == 7:\n                 self.bip148_restart(5)"
      }
    ]
  },
  {
    "sha": "7f92d07958ee5c5449842b31d1a5843c432fe79d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjkyZDA3OTU4ZWU1YzU0NDk4NDJiMzFkMWE1ODQzYzQzMmZlNzlk",
    "commit": {
      "author": {
        "name": "earonesty",
        "email": "erik@q32.com",
        "date": "2017-05-30T17:50:44Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-05-30T17:50:44Z"
      },
      "message": "Merge pull request #2 from ajtowns/bip148\n\nFunctional test draft",
      "tree": {
        "sha": "8b0ccdf2ecbe35c476584f58f0c5feacbaae8ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b0ccdf2ecbe35c476584f58f0c5feacbaae8ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f92d07958ee5c5449842b31d1a5843c432fe79d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f92d07958ee5c5449842b31d1a5843c432fe79d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f92d07958ee5c5449842b31d1a5843c432fe79d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f92d07958ee5c5449842b31d1a5843c432fe79d/comments",
    "author": {
      "login": "earonesty",
      "id": 50769,
      "node_id": "MDQ6VXNlcjUwNzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/50769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earonesty",
      "html_url": "https://github.com/earonesty",
      "followers_url": "https://api.github.com/users/earonesty/followers",
      "following_url": "https://api.github.com/users/earonesty/following{/other_user}",
      "gists_url": "https://api.github.com/users/earonesty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earonesty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earonesty/subscriptions",
      "organizations_url": "https://api.github.com/users/earonesty/orgs",
      "repos_url": "https://api.github.com/users/earonesty/repos",
      "events_url": "https://api.github.com/users/earonesty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earonesty/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f17665ac37fbbf405d8681ec9f4bdd63c77255e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f17665ac37fbbf405d8681ec9f4bdd63c77255e"
      },
      {
        "sha": "22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22bf9c14e1e5103d3f85064dd80ad190a64f4c28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22bf9c14e1e5103d3f85064dd80ad190a64f4c28"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 187,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a3e70709431083e866130569b9dc7a469eee2d8e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f92d07958ee5c5449842b31d1a5843c432fe79d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f92d07958ee5c5449842b31d1a5843c432fe79d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7f92d07958ee5c5449842b31d1a5843c432fe79d",
        "patch": "@@ -87,6 +87,7 @@ CTxMemPool mempool(&feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n static bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+static int DoS_UASF(int level);\n \n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n@@ -2859,6 +2860,18 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     return true;\n }\n \n+// If enabling a UASF flag, peers passing on blocks that don't\n+// enforce the soft-fork are probably not trying to DoS us. To avoid\n+// disconnecting them, change the DoS level to 0.\n+static int DoS_UASF(int level)\n+{\n+    if (gArgs.GetBoolArg(\"-bip148\", DEFAULT_BIP148)) {\n+        return 0;\n+    } else {\n+        return level;\n+    }\n+}\n+\n static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n@@ -2888,7 +2901,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(DoS_UASF(100), error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n \n         assert(pindexPrev);\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))"
      },
      {
        "sha": "e82dcc6982c77949dea74fd12e2fb7d6dec51976",
        "filename": "test/functional/bip148-segwit-uasf.py",
        "status": "added",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f92d07958ee5c5449842b31d1a5843c432fe79d/test/functional/bip148-segwit-uasf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f92d07958ee5c5449842b31d1a5843c432fe79d/test/functional/bip148-segwit-uasf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip148-segwit-uasf.py?ref=7f92d07958ee5c5449842b31d1a5843c432fe79d",
        "patch": "@@ -0,0 +1,173 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the Mandatory Activation of Segregated Witness (BIP148) soft-fork logic.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+## Scenario:\n+#\n+# Four miners, whose hashrate and strategies are:\n+#\n+#     A ( 9%): mine longest chain, signalling segwit\n+#     B (27%): mine longest chain, not signalling segwit\n+#     C (37%): bip 148 enforcing, signalling segwit\n+#     D (27%): switches from (A) to (C) during August\n+#\n+# (1, 3, 4 and 3 elevenths of total hashrate respectively; mining\n+#  11 blocks a day, gives 143 blocks in 13 days, just one block\n+#  short of a retarget cycle)\n+#\n+# B, with 27% of hashrate is sufficient to block activation (which\n+#    requires 25% on regtest)\n+# A+B+D has 65% of hashrate prior to D switching\n+# C+D has 55% of hashrate post D's switch, and since C's hashrate is larger\n+#   than D's the original BIP-148 chain will eventually have more work\n+#   than D's chain, forcing a reorg and eventual consensus\n+\n+def bip9_blockver(*bits):\n+    return \"-blockversion=%d\" % (0x20000000 + sum(1<<b for b in bits))\n+\n+class BIP148Test(BitcoinTestFramework):\n+    AUG_1 = 1501545600\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 8\n+        self.setup_clean_chain = False\n+        self.extra_args = [\n+             [bip9_blockver(0)],   # for initial CSV activation only\n+             [bip9_blockver(1)],\n+             [bip9_blockver()],\n+             [bip9_blockver(1), \"-bip148\"],\n+             [bip9_blockver(1)],\n+             [],           # non-mining user, restarts with -bip148 on Aug 5th\n+             [],           # well connected, non BIP148 peer\n+             [\"-bip148\"]]  # well connected, BIP148 peer\n+\n+        self.day = -30 # 30 days before BIP168 activation\n+        self.blockrate = [0,1,3,4,3,0,0]\n+\n+    def connect_all(self):\n+        connect_nodes(self.nodes[6],7)\n+        for i in range(6):\n+            connect_nodes(self.nodes[i], 6)\n+            connect_nodes(self.nodes[i], 7)\n+            self.log.info(\"connecting %d and 6, 7\" % (i))\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_all()\n+        self.sync_all()\n+\n+    def mining(self):\n+        time = self.AUG_1 + (self.day*24*60*60)\n+        to_mine = self.blockrate[:]\n+        groups = [ [self.nodes[i] for i in g] for g in self.sync_groups ]\n+\n+        while sum(to_mine) > 0:\n+            for peer,blks in enumerate(to_mine):\n+                if blks == 0: continue\n+                set_node_times(self.nodes, time)\n+                to_mine[peer] -= 1\n+                self.nodes[peer].generate(1)\n+                for g in groups:\n+                    if peer in g:\n+                        self.sync_all( [g] )\n+                time += 10*60\n+\n+        self.day += 1\n+\n+    def bip148_restart(self, peer):\n+        self.log.info(\"Restarting node %d with -bip148\" % (peer,))\n+        stop_node(self.nodes[peer], peer)\n+        time = self.AUG_1 + (self.day*24*60*60)\n+        self.nodes[peer] = start_node(peer, self.options.tmpdir, self.extra_args[4] + [\"-bip148\", \"-mocktime=%d\" % (time)])\n+\n+        n = self.nodes[peer]\n+        blk = n.getblock(n.getbestblockhash())\n+        worstblock = None\n+        while blk[\"mediantime\"] >= self.AUG_1:\n+            if blk[\"version\"] | 0x20000002 != blk[\"version\"]:\n+                worstblock = blk\n+            blk = n.getblock(blk[\"previousblockhash\"])\n+        if worstblock is not None:\n+            self.log.info(\"Invalidating block %d:%x:%s\" % (worstblock[\"height\"], worstblock[\"version\"], worstblock[\"hash\"]))\n+            n.invalidateblock(worstblock[\"hash\"])\n+\n+        self.log.info(\"Reconnecting nodes\")\n+        self.connect_all()\n+        self.log.info(\"Removing %d from non-BIP148 sync group\" % (peer,))\n+        self.sync_groups[0].remove(peer)\n+        self.log.info(\"Adding %d to BIP148 sync group\" % (peer,))\n+        self.sync_groups[1].add(peer)\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+        self.sync_groups = [set(range(self.num_nodes))]\n+        # (if nodes aren't synced initially, the non-segwit blocks may get accidentally orphaned\n+        #  activating/locking in segwit...)\n+\n+        # Lock in CSV\n+        self.nodes[0].generate(500)\n+        if (self.nodes[0].getblockcount() != cnt + 500):\n+            raise AssertionError(\"Failed to mine 500 bip9 bit 0 blocks\")\n+        cnt += 500\n+\n+        if get_bip9_status(self.nodes[0], 'csv')[\"status\"] != \"active\":\n+            raise AssertionError(\"Failed to activate OP_CSV\")\n+\n+        self.sync_all()\n+\n+        for d in range(120):\n+            swstatus = get_bip9_status(self.nodes[0], 'segwit')[\"status\"]\n+            if self.day == 0:\n+                if swstatus != \"started\":\n+                    raise AssertionError(\"segwit soft-fork in state %s rather than started at day 0\" % (swstatus))\n+                self.log.info(\"Splitting sync groups\")\n+                self.sync_groups = [set((0,1,2,4,5,6)), set((3,7))]\n+\n+            self.mining()\n+            tips = set(n.getbestblockhash() for n in self.nodes)\n+            heights = [n.getblockcount() for n in self.nodes]\n+            segwit = [get_bip9_status(n, 'segwit')[\"status\"] for n in self.nodes]\n+            connect = [len(n.getpeerinfo()) for n in self.nodes]\n+            maxh = max(heights)\n+            out = [\"%d:\" % (maxh)]\n+            for c,h,s in zip(connect,heights,segwit):\n+                a = \"S\" if s == \"active\" else \"n\"\n+                a = \"%d/%s\" % (c,a)\n+                if h < maxh:\n+                    out.append(\"%s%d\" % (a, h-maxh))\n+                else:\n+                    out.append(a)\n+\n+            self.log.info(\"Day %d:%s: status: %s:\" % (self.day, swstatus, out))\n+\n+            if self.day == 7:\n+                self.bip148_restart(5)\n+\n+            if self.day == 20:\n+                self.bip148_restart(4)\n+\n+            for i in range(6):\n+                if connect[i] == 0:\n+                    raise AssertionError(\"Peer %d has no connected peers after %d blocks\" % (i,maxh))\n+\n+            if self.day > 5 and len(tips) == 1:\n+                synccount += 1\n+            else:\n+                synccount = 0\n+            if synccount > 5:\n+                self.log.info(\"In sync for five days, consensus achieved\")\n+                break\n+\n+        if len(tips) > 1:\n+            raise AssertionError(\"Chain split still exists at day %d\" % (self.day))\n+\n+        return\n+\n+if __name__ == '__main__':\n+    BIP148Test().main()"
      }
    ]
  }
]