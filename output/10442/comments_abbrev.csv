jmcorgan,2017-05-22T20:11:32Z,utACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303207030,303207030,
nopara73,2017-05-22T20:42:39Z,"For the record, previous discussions: https://github.com/bitcoin/bitcoin/pull/10417, https://github.com/bitcoin/bitcoin/pull/10428",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303214425,303214425,
ABISprotocol,2017-05-22T21:14:54Z,utACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303222061,303222061,
AllanDoensen,2017-05-22T21:53:34Z,NACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303230307,303230307,
mkwia,2017-05-22T22:07:08Z,utACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303233193,303233193,
hsjoberg,2017-05-23T12:10:33Z,utACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303378323,303378323,
forkwar,2017-05-23T12:55:09Z,utACK,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303388738,303388738,
hsjoberg,2017-05-24T09:48:45Z,"Perhaps the PR should see a rebase to 1 commit.\nThe commit titles for newest two give no value and only works in context with the first commit.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-303674284,303674284,
earonesty,2017-05-25T23:07:28Z,Maybe i did something stupid.  I'll reopen when I get to a laptop,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304148103,304148103,
gmaxwell,2017-05-25T23:21:53Z,"@earonesty  You overwrote your PR branch with master.  Since the changes being PR were removed github won't let the PR stay open (as there is nothing to merge).  I'm not sure if restoring the commits will fix it, you might have to open a new PR.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304150335,304150335,
earonesty,2017-05-26T00:30:08Z,"Yeah, I tried to pull/rebase, and did something wrong.   Thx.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304159575,304159575,
ajtowns,2017-05-26T05:55:10Z,"utACK\n\nI was concerned by the issue luke-jr pointed out in #10428: ""There are circumstances where this won't upgrade cleanly from a non-BIP148 client: specifically, after July in the case where miners have produced invalid blocks, this will fail to reconsider them."" But I think what will actually happen in the case of a chain split with only minority hashpower on BIP148, is if you restart bitc",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304198555,304198555,
ajtowns,2017-05-26T14:30:36Z,"Okay, I've had a go at writing some functional tests, and I think the ""restart with -bip148 sometime after August 1st"" case is worse than I'd hoped -- a peer that mines on top of the chain they were following will get banned by BIP148 peers for passing on invalid blocks, and thus won't realise when the real BIP148 chain has overtaken their broken chain (at least until the BIP148 chain has somehow ",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304298046,304298046,
ajtowns,2017-05-27T07:14:56Z,"I've made a pull request with a draft of a functional test and the ""prev block invalid"" DoS level changed to 0 when -bip148 is active: https://github.com/earonesty/bitcoin/pull/2\n\nI'm still getting less peer connectivity than I expect and I'm not really seeing why. For me, just enough peers remain connected for the entire network to achieve consensus, but that seems like it's due to luck...",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304434172,304434172,
ghost,2017-05-27T16:04:52Z,"utACK\n\nLooking upon the concerns of other reviewers, I'd prefer if there is a modification to the Title of the client or an identifying message that informs that the user is indeed signalling towards BIP148, I can see scripts that could intentionally add this flag without the user knowing (although really-highly-unlikely)",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304460866,304460866,
nomnombtc,2017-05-29T23:21:40Z,"NACK for now. This seems dangerous if the whole ecosystem is not behind it - and it is very hard to measure, social media can be easily manipulated. Some people will enable it and potentially lose money. \n\nBut I would actually support it if other controversial BIP's also would be available via optional commandline switch, like BIP10{0,1,2,9}. Either give the user all available options or none.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304743181,304743181,
ajtowns,2017-05-30T11:53:33Z,"Okay, I'm a NACK on this PR for the following reasons:\n\n1. No functional tests demonstrating the code behaves as expected.\n2. Liklihood of partitioning the p2p network -- if there a chain split, BIP148 nodes will disconnect non-BIP148 nodes due to the non-BIP148 chain being invalid, and even if the BIP148 chain eventually becomes longer, that the non-BIP148 nodes still have an invalid chain ",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304855290,304855290,
keis,2017-05-30T16:15:33Z,"Would it make sense to add the inverse option as well considering this is a risky change. The inverse here would mean something like ""reject all blocks after aug 1 that ARE signalling"". This means the potential gigantic reorg is not a (as) big worry as you can optionally stay on the old chain.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-304929984,304929984,
sdaftuar,2017-05-30T20:50:22Z,"Concept NACK: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014377.html\n\nAfter the IRC discussion from Thursday (https://botbot.me/freenode/bitcoin-core-dev/msg/86145297/), I think this PR should be closed.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305004154,305004154,
ajtowns,2017-05-31T13:10:19Z,"@keis The inverse is actually ""reject the chain where ALL blocks after aug 1 are signalling"" -- otherwise you'd get three chains: one where some signal and some don't (current), one where all signal (bip148), and one where none signal (your proposal). The easiest way to actually do that is to wait until Aug 1, take the first block on the bip148 chain and run ""invalidateblock"" on its hash, but you ",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305181584,305181584,
maaku,2017-05-31T15:03:37Z,"A UASF, no matter the specific proposal, is built entirely upon user choice: it forces activation because an economic majority of users choose to use it over the other chain, even if the other chain has more work behind it.\n \nI believe it is the consensus of developers here that user choice is a critically important check on the ecosystem, and a vital part of maintaining the balance of power b",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305215368,305215368,
Kixunil,2017-05-31T15:47:19Z,"@ajtowns You'd have to wait until a fork occurs, not just until 1 August.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305229922,305229922,
ABISprotocol,2017-05-31T17:05:30Z,"At this point, I fully concur with the reasoning of @maaku as described [here](https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305215368).  The idea as described is simply to ""fix edge cases identified, and merge a BIP-148 flag (off by default).""\n\nSome notes:  \n\n1) Function test has been proposed as described at https://github.com/bitcoin/bitcoin/pull/10442/commits/a020b85d21307",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305252815,305252815,
maaku,2017-05-31T19:16:09Z,"If it is easy to do (I don't really know that part of the code) I would suggest a NODE_BIP148 service bit and try to maintain two peers with that bit set. If implementing this is non-trivial, I would not demand it however, since partitioned networks can be manually merged with a single bridge.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305288897,305288897,
luke-jr,2017-05-31T22:46:11Z,"Concept ACK.\n\nI've also prepared a rewritten branch (`bip148`) on my repo https://github.com/bitcoin/bitcoin/compare/master...luke-jr:bip148\n\nThis branch does a few things:\n\n* Replaces the extra ""UASF-Segwit:0.3(BIP148)/"" version component with a simple ""+BIP148"" (or ""!BIP148"" if disabled) UA comment. This uses ""+"" or ""!"" characters which are forbidden by Core (but not BIP 14) in `-uac",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305339598,305339598,
maaku,2017-06-01T00:03:22Z,"Concept ACK using a temporary-experimental service bit. That is the correct approach here, I believe, as it is basically only needed from Aug 1st until resolution.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305351674,305351674,
ajtowns,2017-06-01T04:21:33Z,"At first blush, luke-jr's proposed changes look like they should address all my concerns; haven't compiled and tested yet though.",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305385163,305385163,
ajtowns,2017-06-01T09:57:59Z,"In src/net_processing.cpp:ProcessMessage the ""missing prev block"" check has an additional DoS test that eventually gets triggered if the invalid chain reaches 50 blocks:\n\n```c++\n            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n                Misbehaving(pfrom->GetId(), 20);\n            }\n```\n\nThe ""if"" triggers every 10 blocks, and the Misbehaving(",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305447398,305447398,
earonesty,2017-06-03T01:00:26Z,"Why do you ""return state.DoS(0,"" for all blocks, not just segwit invalid?\n\nOn Wed, May 31, 2017 at 6:47 PM, Luke Dashjr <notifications@github.com>\nwrote:\n\n> Concept ACK.\n>\n> I've also prepared a rewritten branch (bip148) on my repo\n> master...luke-jr:bip148\n> <https://github.com/bitcoin/bitcoin/compare/master...luke-jr:bip148>\n>\n> This branch does a few things:\n>\n>    - Replaces the e",https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-305939600,305939600,
gmaxwell,2017-08-10T04:32:29Z,BIP 148 was a big success.  Thanks to all involved.  I think this PR can be closed now.,https://github.com/bitcoin/bitcoin/pull/10442#issuecomment-321448218,321448218,
paveljanik,2017-05-22T20:16:07Z,No https://? Do we want link to an external site? What if the contents of the site changes? What if the domain owner changes?,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117835429,117835429,doc/man/bitcoin-qt.1
paveljanik,2017-05-22T20:16:51Z,SPC before `DEFAULT_BIP148` please.,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117835558,117835558,src/init.cpp
paveljanik,2017-05-22T20:17:37Z,SPC before `DEFAULT_BIP148 ` please.,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117835687,117835687,src/validation.cpp
earonesty,2017-05-22T20:28:02Z,"yes, since the primary reason for including the flag would be for people who already know about it and were going to install it anyway, and at least think they know what they are doing, an external link is probably not needed.   ",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117837749,117837749,doc/man/bitcoin-qt.1
jtimon,2017-05-22T22:12:45Z,small details: you could use gArgs::GetBoolArg directly instead of the wrapper. You could also create a global that is set only in init.cpp,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117857547,117857547,src/validation.cpp
jtimon,2017-05-22T22:15:12Z,"I don't think ""please upgrade"" is a very appropriate comment here. Upgrade to what?",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117857924,117857924,src/validation.cpp
jtimon,2017-05-22T22:16:31Z,"Can't this be static?\n\nEDIT: or preferably inlined",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117858119,117858119,src/validation.h
earonesty,2017-05-22T23:46:04Z,"yes, static is more consistent with other uses in the file, so i'll use that",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117869889,117869889,src/validation.h
earonesty,2017-05-22T23:47:17Z,"right?  maybe, please upgrade to Bitcoin version 0.13.2 or greater?",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117870059,117870059,src/validation.cpp
earonesty,2017-05-22T23:50:04Z,i think the wrapper from util.h is more consistent with other uses in the code,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117870419,117870419,src/validation.cpp
luke-jr,2017-05-23T01:42:14Z,"That's because the code was *just* refactored to create `gArgs`. New code should probably use it, rather than the wrappers which exist to avoid touching the old code.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117881523,117881523,src/validation.cpp
earonesty,2017-05-23T02:10:43Z,Cool ok,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117883972,117883972,src/validation.cpp
PRabahy,2017-05-23T03:21:05Z,Why version 0.13.1?,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117890157,117890157,src/validation.cpp
webcaetano,2017-05-23T03:28:40Z,@PRabahy Maybe `please upgrade to Bitcoin version >=0.13.1` ?,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117890772,117890772,src/validation.cpp
earonesty,2017-05-23T12:37:34Z,Yeah,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117978300,117978300,src/validation.cpp
mkwia,2017-05-23T12:39:07Z,"Perhaps ""Bitcoin **Core** version ...""",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117978578,117978578,src/validation.cpp
earonesty,2017-05-23T12:42:38Z,"I don’t like ""core"".   Bitcoin has no RFC to refer to, so Bitcoin literally is defined by this reference implementation.  I think it would be great to use the RFC process, once Bitcoin is more mature.   ",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117979319,117979319,src/validation.cpp
jtimon,2017-05-23T13:21:23Z,"No, the person reading the error already has ""Bitcoin version >=0.13.1"", no?",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117988427,117988427,src/validation.cpp
earonesty,2017-05-23T13:42:51Z,"No, they cannot have that.   0.13.1 signals segwit.   (if (!(fVersionBits && fSegbit)) ... ",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117994192,117994192,src/validation.cpp
luke-jr,2017-05-23T13:54:52Z,"@earonesty Node software does not control the block version header. Just remove the ""please upgrade"" bit.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r117997603,117997603,src/validation.cpp
paveljanik,2017-05-23T15:17:45Z,"This is not enough. The user has to add `-bip148` in addition. But you do not know if he is running Bitcoin Core at all. So this is wrong by design.\n\nWho do you think should be/is the reader of this message?\n",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118022050,118022050,src/validation.cpp
achow101,2017-05-23T15:20:40Z,"This message will only end up in the debug.log, so there shouldn't be anything asking someone to upgrade.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118022885,118022885,src/validation.cpp
webcaetano,2017-05-23T15:28:24Z,"Just remove the `please upgrade to Bitcoin version >= 0.13.1` part.\nMake it short like `ConnectBlock(): relayed block must signal for segwit`",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118025142,118025142,src/validation.cpp
ajtowns,2017-05-26T15:58:52Z,"state.DoS(0, ...) here isn't entirely sufficient -- a non-BIP148 node will also forward any block building on the non-segwit block which will give a ""prev block not found"" or ""prev block invalid"" error which have DoS levels of 10 and 100 respectively.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118734389,118734389,src/validation.cpp
luke-jr,2017-05-26T16:48:20Z,"We shouldn't encounter prev block not found, because we should never fetch a block until all the headers are in the db.\n\nprev block invalid probably needs to be changed to 0 for softfork safety... this isn't BIP148-specific.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118744036,118744036,src/validation.cpp
ajtowns,2017-05-26T19:27:57Z,"My mistake, I'm seeing ""missing prev block"" messages despite having seen the previous block, not ""prev block not found"" errors. I changed the DoS level for ""prev block invalid"" to 0, but I'm still seeing some disconnections between my test peers though.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118774078,118774078,src/validation.cpp
Xekyo,2017-05-27T15:14:45Z,Wouldn't the expected behavior of someone starting with `-bip148` be that it rejected all non-segwit signaling blocks since the startdate? So a node that joins on Aug 7th with that flag should reorganize to the current `-bip148` branch?,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118822551,118822551,src/validation.cpp
paveljanik,2017-05-29T14:01:37Z,"Hmm, what if majority of nodes is forced to restart at some day in August (e.g. there can be major security issue)?",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r118942174,118942174,src/validation.cpp
dooglus,2017-05-30T07:35:00Z,Restarting is OK; the chainstate persists between restarts. The issue Xekyo is referring to is about what happens if someone enables the -bip148 switch after the start date (1st August). This pull request could see them frozen on their very own 0-length fork forever (or at least until the BIP148 fork becomes the longest chain).,https://github.com/bitcoin/bitcoin/pull/10442#discussion_r119028733,119028733,src/validation.cpp
ajtowns,2017-05-30T11:45:48Z,"Only until the BIP148 fork becomes longer than your frozen chain, though -- the non-BIP148 chain could still be extending faster than the BIP148 chain in the meantime.",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r119076537,119076537,src/validation.cpp
ABISprotocol,2017-05-31T18:21:51Z,"The issue that @dooglus mentioned regarding where someone enables -bip148 switch after start date, presumably August 1, and (assuming) the user experiences a 0-length fork, basically they'd have to delay usage of that wallet until BIP148 becomes the longest chain, or more generally, until there is a winner (if it's not BIP148 they'd have to sweep into another wallet that is supporting winner code)",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r119435071,119435071,src/validation.cpp
dispardon,2017-06-01T07:54:48Z,"Should be ""-reorgdefencebip148""\nCore has the responsibility of providing users with the safest software. If BIP148 has a risk of wiping out blocks accepted by core, then it is also possible for miners to maliciously steer core nodes away from BIP148 for 1 or 2 blocks (in the case where the legacy chain has been reorged onto BIP148). At this point it is irresponsible for core to not have a soluti",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r119549025,119549025,doc/man/bitcoind.1
eordano,2017-06-06T11:34:19Z,"* 1 orphaned block happens about once a week\n* You are suggesting a completely different functionality\n* More info: [BIP148](https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki)",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r120330001,120330001,doc/man/bitcoind.1
dispardon,2017-06-08T20:03:07Z,"I'm not suggesting different functionality. Sorry if I wasn't clear. What I am suggesting is that the best way to protect users from a reorg is by switching to a segwit signaling chain (This PR).\n\nIt's best to be in a situation where users only need to switch a simple flag rather than download a brand new (maybe rushed) release.\n\nBut some are fighting the idea of bip148 on bitcoind. So wha",https://github.com/bitcoin/bitcoin/pull/10442#discussion_r120984937,120984937,doc/man/bitcoind.1
