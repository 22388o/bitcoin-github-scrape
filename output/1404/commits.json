[
  {
    "sha": "c21f73571b0ffdf6733023ba3ab0f8d175418dab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjFmNzM1NzFiMGZmZGY2NzMzMDIzYmEzYWIwZjhkMTc1NDE4ZGFi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-21T14:31:44Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:13Z"
      },
      "message": "Add command line option -quietinitial.\n\nThis makes debugg.log quieter during block chain catch up, so that it is easier to see the block download process.",
      "tree": {
        "sha": "856ea639da96f849c31bdfc9c04ed2b924b1e00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/856ea639da96f849c31bdfc9c04ed2b924b1e00d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c21f73571b0ffdf6733023ba3ab0f8d175418dab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21f73571b0ffdf6733023ba3ab0f8d175418dab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c21f73571b0ffdf6733023ba3ab0f8d175418dab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21f73571b0ffdf6733023ba3ab0f8d175418dab/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 137,
      "deletions": 35
    },
    "files": [
      {
        "sha": "9cc8b15cbb5dc2a6a7566c03110c722006256d33",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -303,7 +303,8 @@ void CAddrMan::Good_(const CService &addr, int64 nTime)\n     // TODO: maybe re-add the node, but for now, just bail out\n     if (nUBucket == -1) return;\n \n-    printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n \n     // move nId to the tried tables\n     MakeTried(info, nId, nUBucket);"
      },
      {
        "sha": "b92aed2821d678896aa74cb1c24fb77806e47d0a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -418,7 +418,7 @@ class CAddrMan\n             fRet |= Add_(addr, source, nTimePenalty);\n             Check();\n         }\n-        if (fRet)\n+        if (fRet && (!fQuietInitial || CaughtUp()))\n             printf(\"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort().c_str(), source.ToString().c_str(), nTried, nNew);\n         return fRet;\n     }\n@@ -434,7 +434,7 @@ class CAddrMan\n                 nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n             Check();\n         }\n-        if (nAdd)\n+        if (nAdd && (!fQuietInitial || CaughtUp()))\n             printf(\"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString().c_str(), nTried, nNew);\n         return nAdd > 0;\n     }"
      },
      {
        "sha": "c06d977625c41245ff8bf93b26c81cdbe8edf599",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -260,6 +260,7 @@ std::string HelpMessage()\n         \"  -debug                 \" + _(\"Output extra debugging information. Implies all other -debug* options\") + \"\\n\" +\n         \"  -debugnet              \" + _(\"Output extra network debugging information\") + \"\\n\" +\n         \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n+        \"  -quietinitial          \" + _(\"Reduce debug output on initial block download\") + \"\\n\" +\n         \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n #ifdef WIN32\n         \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n@@ -388,6 +389,7 @@ bool AppInit2()\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n+    fQuietInitial = GetBoolArg(\"-quietinitial\");\n \n     if (mapArgs.count(\"-timeout\"))\n     {"
      },
      {
        "sha": "bce3fdcc2bc340e7d0ccf3406bf353c5c77876e5",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -319,7 +319,8 @@ void ThreadIRCSeed2(void* parg)\n                 // index 7 is limited to 16 characters\n                 // could get full length name at index 10, but would be different from join messages\n                 strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));\n-                printf(\"IRC got who\\n\");\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"IRC got who\\n\");\n             }\n \n             if (vWords[1] == \"JOIN\" && vWords[0].size() > 1)"
      },
      {
        "sha": "5c467d7400f235a7644f4fdc1fb54c2acc2999d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 25,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -189,8 +189,9 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n \n-    printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n-        mapOrphanTransactions.size());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n+            mapOrphanTransactions.size());\n     return true;\n }\n \n@@ -947,6 +948,11 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n+bool CaughtUp()\n+{\n+    return (nBestHeight >= GetNumBlocksOfPeers());\n+}\n+\n bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n@@ -1072,8 +1078,11 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Get prev tx from single transactions in memory\n             {\n                 LOCK(mempool.cs);\n-                if (!mempool.exists(prevout.hash))\n-                    return error(\"FetchInputs() : %s mempool Tx prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                if (!mempool.exists(prevout.hash)) {\n+                    if (!fQuietInitial || CaughtUp())\n+                        printf(\"mempool.exists() : %s prev (%s) not found\\n\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n                 txPrev = mempool.lookup(prevout.hash);\n             }\n             if (!fFound)\n@@ -2257,7 +2266,8 @@ bool CAlert::ProcessAlert()\n             uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n     }\n \n-    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n+    if (!fQuietInitial || CaughtUp())\n+        printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n     return true;\n }\n \n@@ -2522,6 +2532,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message inv size() = %d\", vInv.size());\n         }\n+        int invblocks = 0;\n+        int askblocks = 0;\n+        int orphanget = 0;\n+        int lastblockget = 0;\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n@@ -2538,30 +2552,60 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             if (fShutdown)\n                 return true;\n+\n+            if (inv.type == MSG_BLOCK) invblocks++;\n+\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(txdb, inv);\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n-            if (!fAlreadyHave)\n-                pfrom->AskFor(inv);\n-            else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n-            } else if (nInv == nLastBlock) {\n-                // In case we are on a very long side-chain, it is possible that we already have\n-                // the last block in an inv bundle sent in response to getblocks. Try to detect\n-                // this situation and push another getblocks to continue.\n-                std::vector<CInv> vGetData(1,inv);\n-                pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n-                if (fDebug)\n-                    printf(\"force request: %s\\n\", inv.ToString().c_str());\n+            if (!fAlreadyHave) {\n+                if (inv.type == MSG_BLOCK) {\n+                    int64 nRequestTime = pfrom->AskForBlock(inv);\n+                    if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                        printf(\"askfor %s   %s (%\"PRI64d\")   %s\\n\", inv.ToString().c_str(),\n+                          DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), nRequestTime,\n+                          pfrom->addr.ToString().c_str());\n+                    askblocks++;\n+                } else\n+                    pfrom->AskFor(inv);\n+            } else {\n+                if (inv.type == MSG_BLOCK && vInv.size() == 1)\n+                    printf(\"inv %s at %s\\n\", inv.ToString().c_str(), pfrom->addr.ToString().c_str());\n+                if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+                    pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n+                    orphanget++;\n+                    if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                        printf(\"orphan getblocks %s to %s\\n\", inv.ToString().c_str(),\n+                          pfrom->addr.ToString().c_str());\n+                } else if (nInv == nLastBlock) {\n+                    // In case we are on a very long side-chain, it is possible that we already have\n+                    // the last block in an inv bundle sent in response to getblocks. Try to detect\n+                    // this situation and push another getblocks to continue.\n+                    std::vector<CInv> vGetData(1,inv);\n+                    pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n+                    lastblockget++;\n+                    if (fDebug)\n+                        printf(\"force request: %s\\n\", inv.ToString().c_str());\n+                }\n             }\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n+        } // for each item in inv bundle\n+\n+        if (fQuietInitial && vInv.size() > 1 && !CaughtUp()) {\n+            if (invblocks)\n+                printf(\"inv containing %d (askfor %d) blocks at %s\\n\", invblocks, askblocks,\n+                  pfrom->addr.ToString().c_str());\n+            if (orphanget)\n+                printf(\"orphan getblocks (%d) to %s\\n\", orphanget, pfrom->addr.ToString().c_str());\n+            if (lastblockget)\n+                printf(\"lastblock getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n         }\n-    }\n+    } // strCommand == \"inv\"\n \n \n     else if (strCommand == \"getdata\")\n@@ -2573,6 +2617,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message getdata size() = %d\", vInv.size());\n         }\n+        int nBlocks = 0;\n+        int nTxs = 0;\n \n         if (fDebugNet || (vInv.size() != 1))\n             printf(\"received getdata (%d invsz)\\n\", vInv.size());\n@@ -2581,12 +2627,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             if (fShutdown)\n                 return true;\n-            if (fDebugNet || (vInv.size() == 1))\n+            if (!fQuietInitial || vInv.size() < 5 || CaughtUp())\n                 printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n \n             if (inv.type == MSG_BLOCK)\n             {\n                 // Send block from disk\n+                nBlocks++;\n                 map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n@@ -2606,10 +2653,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         pfrom->hashContinue = 0;\n                     }\n                 }\n-            }\n+            } // if a block\n             else if (inv.IsKnownType())\n             {\n                 // Send stream from relay memory\n+                nTxs++;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n@@ -2620,8 +2668,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n+        } // for each getdata request\n+\n+        if (vInv.size() > 4 && fQuietInitial && !CaughtUp()) {\n+            printf(\"got getdata for \");\n+            if (nBlocks) {\n+                printf(\"%d blocks \", nBlocks);\n+                if (nTxs) printf(\"and \");\n+            }\n+            if (nTxs) printf(\"%d txs \", nTxs);\n+            printf(\"from %s. Sending.\\n\", pfrom->addr.ToString().c_str());\n         }\n-    }\n+\n+    } // strCommand = \"getdata\"\n \n \n     else if (strCommand == \"getblocks\")\n@@ -2637,12 +2696,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pindex)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+        if (!fQuietInitial || CaughtUp())\n+            printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n@@ -3149,13 +3210,23 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n+        int gettxs = 0;\n+        int getblocks = 0;\n+        CInv blockinv;\n+\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(txdb, inv))\n             {\n-                if (fDebugNet)\n+                if (!fQuietInitial || CaughtUp())\n                     printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n+\n+                if (inv.type == MSG_BLOCK) {\n+                    getblocks++;\n+                    blockinv = inv;\n+                }\n+                if (inv.type == MSG_TX) gettxs++;\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n@@ -3169,7 +3240,17 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n \n-    }\n+        if (getblocks && fQuietInitial && !CaughtUp()) {\n+            if (getblocks == 1)\n+                printf(\"sending getdata %s\\n\", blockinv.ToString().c_str());\n+            else {\n+                printf(\"getdata %d blocks\", getblocks);\n+                if (gettxs) printf(\" and %d txs\\n\", gettxs);\n+                else printf(\"\\n\");\n+            }\n+        }\n+\n+    } // if LockMain\n     return true;\n }\n "
      },
      {
        "sha": "edb6f5a988ab91b094b1babeac550db7d4eb36b4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -173,7 +173,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n             if (nBytes == 0)\n             {\n                 // socket closed\n-                printf(\"socket closed\\n\");\n+                if (fDebug) printf(\"socket closed\\n\");\n                 return false;\n             }\n             else\n@@ -492,7 +492,8 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n         addrman.Attempt(addrConnect);\n \n         /// debug print\n-        printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n+        if (CaughtUp() || !fQuietInitial)\n+            printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n \n         // Set to nonblocking\n #ifdef WIN32"
      },
      {
        "sha": "f220824a27ce344647214a4a8d477dcda3459147",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -297,7 +297,7 @@ class CNode\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n         int64& nRequestTime = mapAlreadyAskedFor[inv];\n-        if (fDebugNet)\n+        if (!fQuietInitial || CaughtUp())\n             printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order\n@@ -312,6 +312,19 @@ class CNode\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n \n+    int64 AskForBlock(const CInv& inv) {\n+        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64 nNow = (GetTime() - 1) * 1000000;\n+        static int64 nLastTime;\n+        nLastTime++;\n+        nNow = std::max(nNow, nLastTime);\n+        nLastTime = nNow;\n+        nRequestTime = std::max(nRequestTime + 120 * 1000000, nNow);\n+        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+\n+        return nRequestTime;\n+    }\n+\n \n \n     void BeginMessage(const char* pszCommand)"
      },
      {
        "sha": "931ee252a6aca2da9ba7abb25351f7649ca618d9",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -367,7 +367,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n             if (nRet == 0)\n             {\n-                printf(\"connection timeout\\n\");\n+                if (fDebug) printf(\"connection timeout\\n\");\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -390,7 +390,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             }\n             if (nRet != 0)\n             {\n-                printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n+                if (fDebug) printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -401,7 +401,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         else\n #endif\n         {\n-            printf(\"connect() failed: %i\\n\",WSAGetLastError());\n+            if (fDebug) printf(\"connect() failed: %i\\n\", WSAGetLastError());\n             closesocket(hSocket);\n             return false;\n         }"
      },
      {
        "sha": "271f0257a6c106eddab27c23bd85e5240afef2c2",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -70,6 +70,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n+bool fQuietInitial = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n bool fReopenDebugLog = false;\n "
      },
      {
        "sha": "38981b98ceba42e5c48487256bc8319868874ac7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21f73571b0ffdf6733023ba3ab0f8d175418dab/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "patch": "@@ -118,6 +118,7 @@ extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern bool fReopenDebugLog;\n+extern bool fQuietInitial;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();\n@@ -177,6 +178,7 @@ std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n void AddTimeData(const CNetAddr& ip, int64 nTime);\n void runCommand(std::string strCommand);\n+bool CaughtUp();\n \n \n "
      }
    ]
  },
  {
    "sha": "251dc9472d3a1d84e3fbdb2144b69318c0449205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTFkYzk0NzJkM2ExZDg0ZTNmYmRiMjE0NGI2OTMxOGMwNDQ5MjA1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-30T16:28:54Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "Bug fix (to sipa's code)\n\nConflicts:\n\n\tsrc/main.cpp",
      "tree": {
        "sha": "6ff2e46142a9d698f84e2ddddc1aab62611eaf08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ff2e46142a9d698f84e2ddddc1aab62611eaf08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/251dc9472d3a1d84e3fbdb2144b69318c0449205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251dc9472d3a1d84e3fbdb2144b69318c0449205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/251dc9472d3a1d84e3fbdb2144b69318c0449205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251dc9472d3a1d84e3fbdb2144b69318c0449205/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21f73571b0ffdf6733023ba3ab0f8d175418dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c21f73571b0ffdf6733023ba3ab0f8d175418dab"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5bdccd86baece6a4201beb61a3af0b1919ece3e1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/251dc9472d3a1d84e3fbdb2144b69318c0449205/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/251dc9472d3a1d84e3fbdb2144b69318c0449205/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=251dc9472d3a1d84e3fbdb2144b69318c0449205",
        "patch": "@@ -2584,7 +2584,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     // In case we are on a very long side-chain, it is possible that we already have\n                     // the last block in an inv bundle sent in response to getblocks. Try to detect\n                     // this situation and push another getblocks to continue.\n-                    std::vector<CInv> vGetData(1,inv);\n                     pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n                     lastblockget++;\n                     if (fDebug)"
      }
    ]
  },
  {
    "sha": "a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmJkOWYzNTg4YjZhMDAwZjhhMzliOWUzYTFhODM0ZjcxMTlkZTFl",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T23:00:41Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "Improve block download reporting, and separate AskFor.\n\nConflicts:\n\n\tsrc/main.cpp\n\tsrc/net.h",
      "tree": {
        "sha": "8e16777edd643fab1a3bdfcbead00bc232a2dd6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e16777edd643fab1a3bdfcbead00bc232a2dd6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "251dc9472d3a1d84e3fbdb2144b69318c0449205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251dc9472d3a1d84e3fbdb2144b69318c0449205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/251dc9472d3a1d84e3fbdb2144b69318c0449205"
      }
    ],
    "stats": {
      "total": 391,
      "additions": 331,
      "deletions": 60
    },
    "files": [
      {
        "sha": "853e0c5d0bdc63a0b481a9f047bc9a9227d89c16",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 223,
        "deletions": 50,
        "changes": 273,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "patch": "@@ -32,6 +32,16 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n+int nAskedForBlocks = 0;\n+int nWaitingForBlocks = 0;\n+int nReceivingBlocks = 0;\n+int nInvShyNodes = 0;\n+int nWasInvShyNodes = 0;\n+int nBlockShyNodes = 0;\n+int nWasBlockShyNodes = 0;\n+int nBlockStuckNodes = 0;\n+int nWasBlockStuckNodes = 0;\n+int nUnreliableNodes = 0;\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -1798,10 +1808,25 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    if (mapBlockIndex.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block %d %s\\n\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block %d %s\\n\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return false;\n+    }\n+    if (mapOrphanBlocks.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block (orphan) %s\\n\", pfrom->nDupBlocks, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block (orphan) %s\\n\", hash.ToString().substr(0,20).c_str());\n+        return false;\n+    }\n+    if (pfrom) pfrom->nDupBlocks = 0;\n \n     // Preliminary checks\n     if (!pblock->CheckBlock())\n@@ -2416,17 +2441,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        // Ask the first connected node for block updates\n-        static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot &&\n-            (pfrom->nVersion < NOBLKS_VERSION_START ||\n-             pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-             (nAskedForBlocks < 1 || vNodes.size() <= 1))\n-        {\n-            nAskedForBlocks++;\n-            pfrom->PushGetBlocks(pindexBest, uint256(0));\n-        }\n-\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n@@ -2450,6 +2464,22 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    // Ask a connected node for block updates\n+    if (!pfrom->fClient && !pfrom->fOneShot &&\n+        // below commented out as 32200 seems friendly enough. Not so sure about 32400 though!\n+        //(pfrom->nVersion < NOBLKS_VERSION_START ||\n+        // pfrom->nVersion >= NOBLKS_VERSION_END) &&\n+         nAskedForBlocks < 3 && !pfrom->fAskedForBlocks && !CaughtUp()) // TODO - tune\n+    {\n+        nAskedForBlocks++;\n+        pfrom->fAskedForBlocks = true;\n+        printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n+        pfrom->PushGetBlocks(pindexBest, uint256(0));\n+        NodeSummary();\n+    }\n+\n+\n+    if (strCommand == \"version\") ;\n     else if (strCommand == \"verack\")\n     {\n         pfrom->vRecv.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n@@ -2539,12 +2569,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n-            if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n-                nLastBlock = vInv.size() - 1 - nInv;\n-                break;\n+        if (!CaughtUp()) // No need to do this once caught up...\n+            for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n+                if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n+                    nLastBlock = vInv.size() - 1 - nInv;\n+                    break;\n+                }\n             }\n-        }\n         CTxDB txdb(\"r\");\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n@@ -2561,11 +2592,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n+            if (inv.type == MSG_BLOCK)\n+                pfrom->tBlockInvs = GetTime();\n+\n             if (!fAlreadyHave) {\n                 if (inv.type == MSG_BLOCK) {\n-                    int64 nRequestTime = pfrom->AskForBlock(inv);\n+                    int64 OldReqTime = mapWaitingFor[inv]; // REBTEST\n+                    int64 nRequestTime = pfrom->AskForBlock(inv, 60);\n                     if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n-                        printf(\"askfor %s   %s (%\"PRI64d\")   %s\\n\", inv.ToString().c_str(),\n+                        //printf(\"askforb %s   %s (%\"PRI64d\")   %s\\n\", inv.ToString().c_str(),\n+                        //  DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), nRequestTime,\n+                        //  pfrom->addr.ToString().c_str());\n+                        printf(\"askforb %s %s (%\"PRI64d\") %s (%\"PRI64d\") %s\\n\", inv.ToString().c_str(),\n+                          DateTimeStrFormat(\"%H:%M:%S\", OldReqTime/1000000).c_str(), OldReqTime,\n                           DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), nRequestTime,\n                           pfrom->addr.ToString().c_str());\n                     askblocks++;\n@@ -2684,6 +2723,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"getblocks\")\n     {\n+        // This is a request from a node to tell them about the blocks I have.\n+\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2826,16 +2867,28 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     else if (strCommand == \"block\")\n     {\n         CBlock block;\n+        int size = vRecv.size();\n         vRecv >> block;\n-\n-        printf(\"received block %s\\n\", block.GetHash().ToString().substr(0,20).c_str());\n-        // block.print();\n+        int timetodownload = GetTime() - pfrom->tBlockRecvStart;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n+\n+        if (timetodownload)\n+            printf(\"block recved(%d) %s (%u bytes, %us, %uB/s) from %s\\n\", nReceivingBlocks,\n+              inv.hash.ToString().substr(0,20).c_str(), size, timetodownload,\n+              size / timetodownload, pfrom->addr.ToString().c_str());\n+        else\n+            printf(\"block recved(%d) %s (%u bytes) from %s\\n\", nReceivingBlocks,\n+              inv.hash.ToString().substr(0,20).c_str(), size, pfrom->addr.ToString().c_str());\n+        if (pfrom->fWaitingForBlock) {\n+            pfrom->fWaitingForBlock = false;\n+            nWaitingForBlocks--;\n+        }\n+\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n+        ProcessBlock(pfrom, &block);\n+        mapWaitingFor.erase(inv);\n         if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n     }\n \n@@ -3008,6 +3061,79 @@ bool ProcessMessages(CNode* pfrom)\n             printf(\"ProcessMessages(%s, %u bytes) : nMessageSize > MAX_SIZE\\n\", strCommand.c_str(), nMessageSize);\n             continue;\n         }\n+\n+        /* Discover stuck block downloads and show progress */\n+        if (strCommand == \"block\") {\n+            bool fPrintBlock;\n+            fPrintBlock = false;\n+            bool fNodeSummary = false;\n+            if (!pfrom->fReceivingBlock) {\n+                pfrom->fReceivingBlock = true;\n+                nReceivingBlocks++;\n+                pfrom->tBlockRecvStart = GetTime();\n+                if (pfrom->tBlockRecving <= pfrom->tGetdataBlock && pfrom->tBlockRecvStart > pfrom->tGetdataBlock) {\n+                    printf(\"%ds later, \", pfrom->tBlockRecvStart - pfrom->tGetdataBlock);\n+                    fPrintBlock = true;\n+                }\n+            }\n+\n+            if ((GetTime() > pfrom->tBlockRecving + (15 * (pfrom->nStuckDB+1))) ||\n+              vRecv.size() >= nMessageSize) {\n+                // Update as 15 secs elapsed or download complete\n+                if ((int)vRecv.size() == pfrom->nBlockBytes) {\n+                    // Download not completed and no progress\n+                    pfrom->nStuckDB++;\n+                    if (pfrom->nStuckDB < 3) {\n+                        printf(\"stuck(%d) \", pfrom->nStuckDB);\n+                        fPrintBlock = true;\n+                    } else if (pfrom->nStuckDB == 3) {\n+                        //pfrom->fWaitingForBlock = false;\n+                        //nWaitingForBlocks--;\n+                        mapWaitingFor.erase(pfrom->WaitingForBlock);\n+                        nBlockStuckNodes++;\n+                        fNodeSummary = true;\n+                        printf(\"given up %s (size %d) from %s\\n\", pfrom->WaitingForBlock.ToString().c_str(),\n+                          nMessageSize, pfrom->addr.ToString().c_str());\n+                    }\n+                } else {\n+                    // download progressing\n+                    if (pfrom->nStuckDB >= 3) {\n+                        pfrom->nWasStuckDB = pfrom->nStuckDB;\n+                        pfrom->nStuckDB = 0;\n+                        nBlockStuckNodes--;\n+                        nWasBlockStuckNodes++;\n+                        fNodeSummary = true;\n+                        printf(\"%d later, unstuck \", GetTime() - pfrom->tBlockRecving);\n+                    }\n+                    if (pfrom->fBlockShy) {\n+                        pfrom->fBlockShy = false;\n+                        pfrom->fWasBlockShy = true;\n+                        nBlockShyNodes--;\n+                        nWasBlockShyNodes++;\n+                        fNodeSummary = true;\n+                        printf(\"shy \");\n+                    }\n+                    pfrom->tBlockRecving = GetTime();\n+                    pfrom->nBlockBytes = vRecv.size();\n+                    if (vRecv.size() >= nMessageSize) {\n+                        // Download completed\n+                        pfrom->fReceivingBlock = false;\n+                        nReceivingBlocks--;\n+                        fPrintBlock = false;\n+                    } else {\n+                        printf(\"recving(%d) \", nReceivingBlocks);\n+                        fPrintBlock = true;\n+                    }\n+                }\n+            } // 15s elapsed since last report or completed\n+\n+            if (fPrintBlock) {\n+                printf(\"block %u / %u bytes from %s\\n\", vRecv.size(), nMessageSize,\n+                  pfrom->addr.ToString().c_str());\n+                if (fNodeSummary) NodeSummary();\n+            }\n+        } // strCommand == \"block\"\n+\n         if (nMessageSize > vRecv.size())\n         {\n             // Rewind and wait for rest of message\n@@ -3209,10 +3335,39 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n-        int gettxs = 0;\n         int getblocks = 0;\n         CInv blockinv;\n \n+        // First, the blocks\n+        while (!pto->mapAskForBlock.empty() && (*pto->mapAskForBlock.begin()).first <= nNow) {\n+            const CInv& inv = (*pto->mapAskForBlock.begin()).second;\n+            if (!AlreadyHave(txdb, inv)) {\n+                if (!fQuietInitial || CaughtUp())\n+                    printf(\"getdata %s to %s\\n\", inv.ToString().c_str(), pto->addr.ToString().c_str());\n+                getblocks++;\n+                blockinv = inv;\n+                pto->fWaitingForBlock = true;\n+                nWaitingForBlocks++;\n+                pto->tGetdataBlock = GetTime();\n+                vGetData.push_back(inv);\n+                if (vGetData.size() >= 1000)\n+                {\n+                    pto->PushMessage(\"getdata\", vGetData);\n+                    vGetData.clear();\n+                }\n+                mapWaitingFor[inv] = nNow;\n+            } // if !AlreadyHave\n+            pto->mapAskForBlock.erase(pto->mapAskForBlock.begin());\n+        } // while\n+\n+        if (getblocks && fQuietInitial && !CaughtUp()) {\n+            if (getblocks == 1)\n+                printf(\"getdata %s to %s\\n\", blockinv.ToString().c_str(), pto->addr.ToString().c_str());\n+            else\n+                printf(\"getdata %d blocks to %s\\n\", getblocks, pto->addr.ToString().c_str());\n+        }\n+\n+        // Finally, the transactions\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n@@ -3221,11 +3376,6 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 if (!fQuietInitial || CaughtUp())\n                     printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n \n-                if (inv.type == MSG_BLOCK) {\n-                    getblocks++;\n-                    blockinv = inv;\n-                }\n-                if (inv.type == MSG_TX) gettxs++;\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n@@ -3239,26 +3389,49 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n \n-        if (getblocks && fQuietInitial && !CaughtUp()) {\n-            if (getblocks == 1)\n-                printf(\"sending getdata %s\\n\", blockinv.ToString().c_str());\n-            else {\n-                printf(\"getdata %d blocks\", getblocks);\n-                if (gettxs) printf(\" and %d txs\\n\", gettxs);\n-                else printf(\"\\n\");\n-            }\n-        }\n+        //\n+        // Check for timed-out requests\n+        //\n+\n+        // Check for timed-out getdata block requests\n+        if (pto->fWaitingForBlock && (pto->tGetdataBlock > pto->tBlockRecvStart) &&\n+          (GetTime() > pto->tGetdataBlock + (pto->nStuckWB+1)*15) ) {\n+            // Node not sent block within 15 seconds of sending getdata.\n+            pto->nStuckWB++;\n+            if (pto->nStuckWB == 3) {\n+                if (!pto->fBlockShy) {\n+                    nBlockShyNodes++;\n+                    pto->fBlockShy = true;\n+                }\n+                //pto->fWaitingForBlock = false;\n+                //nWaitingForBlocks--;\n+                mapWaitingFor.erase(pto->WaitingForBlock);\n+                printf(\"Given up waiting for block from %s\\n\", pto->addr.ToString().c_str());\n+                NodeSummary();\n+            } else\n+                if (pto->nStuckWB < 3) printf(\"Waited %ds for block from %s\\n\", (pto->nStuckWB)*15, pto->addr.ToString().c_str());\n+        }\n+\n+        // Check for timed-out getblocks requests\n+        if (!pto->fInvShy && (pto->tGetblocks > pto->tBlockInvs) &&\n+          (GetTime() > pto->tGetblocks + (pto->nStuckWI+1)*15)) {\n+            // Node not sent invs within 15 seconds of sending getblocks.\n+            pto->nStuckWI++;\n+            if (pto->nStuckWI == 3) {\n+                nInvShyNodes++;\n+                pto->fInvShy = true;\n+                printf(\"Given up waiting for invs from %s\\n\", pto->addr.ToString().c_str());\n+                NodeSummary();\n+            } else\n+                if (pto->nStuckWI < 3) printf(\"Waited %ds for invs from %s\\n\", (pto->nStuckWI)*15, pto->addr.ToString().c_str());\n+        }\n+\n+        // TODO - If we're short on providers, kick the stuck ones, so we can reconnect and use them.\n+        //if (nBlockProviders < 3 && pto->fStuck) pto->fDisconnect = true;\n \n     } // if LockMain\n     return true;\n-}\n-\n-\n-\n-\n-\n-\n-\n+} // SendMessages()\n \n \n "
      },
      {
        "sha": "bdd71e5b7c236ea04c8e8971b7db50e0fc072910",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "patch": "@@ -67,6 +67,16 @@ extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n+extern int nAskedForBlocks;    // Nodes sent a getblocks 0\n+extern int nWaitingForBlocks;  // Nodes sent a getdata block\n+extern int nReceivingBlocks;   // Nodes that have started sending a block\n+extern int nInvShyNodes;       // Nodes that take too long to respond to getblocks\n+extern int nBlockShyNodes;     // Nodes that take too long to respond to getdata block\n+extern int nBlockStuckNodes;   // Nodes that have paused while sending a block\n+extern int nUnreliableNodes;   // Total count of shy and stuck nodes\n+extern int nWasInvShyNodes;    // Node that responded to getblocks after the timeout\n+extern int nWasBlockShyNodes;  // Node that responded to getdata block after the timeout\n+extern int nWasBlockStuckNodes;// Node that paused during block download and later resumed\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "998531dfa687dd8fc42affeb8c8ff42df36a4f8f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "patch": "@@ -66,6 +66,7 @@ map<CInv, CDataStream> mapRelay;\n deque<pair<int64, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n map<CInv, int64> mapAlreadyAskedFor;\n+map<CInv, int64> mapWaitingFor;\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;\n@@ -426,8 +427,19 @@ void AddressCurrentlyConnected(const CService& addr)\n \n \n \n-\n-\n+void NodeSummary()\n+{\n+    printf(\"Nodes=%d: AskedFor=%d\", vNodes.size(), nAskedForBlocks);\n+    if (nWaitingForBlocks) printf(\", WaitingFor=%d\", nWaitingForBlocks);\n+    if (nReceivingBlocks) printf(\", Receiving=%d\", nReceivingBlocks);\n+    if (nInvShyNodes) printf(\", InvShy=%d\", nInvShyNodes);\n+    if (nBlockShyNodes) printf(\", BlockShy=%d\", nBlockShyNodes);\n+    if (nBlockStuckNodes) printf(\", BlockStuck=%d\", nBlockStuckNodes);\n+    if (nWasInvShyNodes) printf(\", WasInvShy=%d\", nWasInvShyNodes);\n+    if (nWasBlockShyNodes) printf(\", WasBlockShy=%d\", nWasBlockShyNodes);\n+    if (nWasBlockStuckNodes) printf(\", WasBlockStuck=%d\", nWasBlockStuckNodes);\n+    printf(\"\\n\");\n+}\n \n \n CNode* FindNode(const CNetAddr& ip)\n@@ -531,7 +543,46 @@ void CNode::CloseSocketDisconnect()\n     fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        printf(\"disconnecting node %s\\n\", addrName.c_str());\n+        printf(\"disconnecting node %s [\", addrName.c_str());\n+        if (fAskedForBlocks) {\n+            nAskedForBlocks--;\n+            printf(\"ASK.\");\n+        }\n+        if (fWaitingForBlock) {\n+            nWaitingForBlocks--;\n+            mapWaitingFor.erase(WaitingForBlock);\n+            printf(\"GETDATA(%ds)\", GetTime() - tGetdataBlock);\n+        }\n+        if (fReceivingBlock) {\n+            nReceivingBlocks--;\n+            printf(\"BLOCK(%ds)\", GetTime() - tBlockRecving);\n+        }\n+        if (fInvShy) {\n+            nInvShyNodes--;\n+            printf(\"IS.\");\n+        }\n+        if (fBlockShy) {\n+            nBlockShyNodes--;\n+            printf(\"BS.\");\n+        }\n+        if (nStuckDB >= 3) {\n+            nBlockStuckNodes--;\n+            printf(\"ST.\");\n+        }\n+        if (fWasInvShy) {\n+            nWasInvShyNodes--;\n+            printf(\"WIS.\");\n+        }\n+        if (fWasBlockShy) {\n+            nWasBlockShyNodes--;\n+            printf(\"WBS.\");\n+        }\n+        if (nWasStuckDB) {\n+            nWasBlockStuckNodes--;\n+            printf(\"WST.\");\n+        }\n+        printf(\"]\\n\");\n+        NodeSummary();\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n         vRecv.clear();"
      },
      {
        "sha": "96b64f7c9dafd336861b38ee7013d2f694eee8c2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 44,
        "deletions": 7,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "patch": "@@ -33,6 +33,7 @@ void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n+void NodeSummary();\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTimeout=0);\n@@ -124,6 +125,7 @@ extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n extern std::map<CInv, int64> mapAlreadyAskedFor;\n+extern std::map<CInv, int64> mapWaitingFor;\n \n \n \n@@ -145,6 +147,25 @@ class CNode\n     int64 nLastRecv;\n     int64 nLastSendEmpty;\n     int64 nTimeConnected;\n+    bool fWaitingForBlock; // true when getdata block sent and not timed out\n+    CInv WaitingForBlock;  // the block waiting to be downloaded\n+    bool fAskedForBlocks;  // true when getblocks 0 sent\n+    bool fReceivingBlock;  // true when block being received\n+    int64 tGetblocks;      // Time of last getblocks sent\n+    int64 tBlockInvs;      // Time of last block invs received\n+    int64 tGetdataBlock;   // Time getdata block request sent\n+    int64 tBlockRecvStart; // Time block reception first noticed\n+    int64 tBlockRecving;   // Time block reception last progressed\n+    int nStuckDB;          // Count of stuck block download\n+    int nWasStuckDB;       // Count of stuck block download before unsticking\n+    int nStuckWB;          // Count of waiting for block to start downloading\n+    int nStuckWI;          // Count of waiting for invs following getblocks\n+    int nBlockBytes;       // To track progress of block download\n+    bool fBlockShy;        // true when getdata block timeouts\n+    bool fInvShy;          // true when getblocks timeouts\n+    bool fWasInvShy;       // true when invs arrive after inv timeout\n+    bool fWasBlockShy;     // true when block starts to arrive after timeout\n+    int nDupBlocks;        // count of concurrent duplicate blocks received\n     int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n@@ -188,6 +209,7 @@ class CNode\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n+    std::multimap<int64, CInv> mapAskForBlock;\n \n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)\n     {\n@@ -197,6 +219,24 @@ class CNode\n         nLastRecv = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n+        fWaitingForBlock = false;\n+        fAskedForBlocks = false;\n+        fReceivingBlock = false;\n+        tGetblocks = 0;\n+        tBlockInvs = 0;\n+        tGetdataBlock = 0;\n+        tBlockRecvStart = 0;\n+        tBlockRecving = 0;\n+        nStuckDB = 0;\n+        nWasStuckDB = 0;\n+        nStuckWB = 0;\n+        nStuckWI = 0;\n+        nBlockBytes = 0;\n+        fBlockShy = false;\n+        fInvShy = false;\n+        fWasInvShy = false;\n+        fWasBlockShy = false;\n+        nDupBlocks = 0;\n         nHeaderStart = -1;\n         nMessageStart = -1;\n         addr = addrIn;\n@@ -312,21 +352,18 @@ class CNode\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n \n-    int64 AskForBlock(const CInv& inv) {\n-        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+    int64 AskForBlock(const CInv& inv, int nWait) {\n+        int64& nRequestTime = mapWaitingFor[inv];\n         int64 nNow = (GetTime() - 1) * 1000000;\n         static int64 nLastTime;\n         nLastTime++;\n         nNow = std::max(nNow, nLastTime);\n         nLastTime = nNow;\n-        nRequestTime = std::max(nRequestTime + 120 * 1000000, nNow);\n-        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n-\n+        nRequestTime = std::max(nRequestTime + nWait * 1000000, nNow);\n+        mapAskForBlock.insert(std::make_pair(nRequestTime, inv));\n         return nRequestTime;\n     }\n \n-\n-\n     void BeginMessage(const char* pszCommand)\n     {\n         ENTER_CRITICAL_SECTION(cs_vSend);"
      }
    ]
  },
  {
    "sha": "47bd682e90a185aeab3c946f6def27547849af54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JkNjgyZTkwYTE4NWFlYWIzYzk0NmY2ZGVmMjc1NDc4NDlhZjU0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-06T08:03:39Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "better reporting of getdata (AH), plus break after ProcessMessages()",
      "tree": {
        "sha": "3d5a3d8763281c1aacbca0b2c7f891afedd9bae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d5a3d8763281c1aacbca0b2c7f891afedd9bae5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47bd682e90a185aeab3c946f6def27547849af54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47bd682e90a185aeab3c946f6def27547849af54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47bd682e90a185aeab3c946f6def27547849af54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47bd682e90a185aeab3c946f6def27547849af54/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6bd9f3588b6a000f8a39b9e3a1a834f7119de1e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e562928436a96e6d1f10e3e9ffb66bacdb2bf603",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47bd682e90a185aeab3c946f6def27547849af54/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47bd682e90a185aeab3c946f6def27547849af54/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=47bd682e90a185aeab3c946f6def27547849af54",
        "patch": "@@ -3192,7 +3192,9 @@ bool ProcessMessages(CNode* pfrom)\n \n         if (!fRet)\n             printf(\"ProcessMessage(%s, %u bytes) FAILED\\n\", strCommand.c_str(), nMessageSize);\n-    }\n+        else\n+            break; // give other peers a chance\n+    } // loop\n \n     vRecv.Compact();\n     return true;\n@@ -3336,6 +3338,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n         int getblocks = 0;\n+        int haveblocks = 0;\n         CInv blockinv;\n \n         // First, the blocks\n@@ -3356,15 +3359,19 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n                 mapWaitingFor[inv] = nNow;\n-            } // if !AlreadyHave\n+            } else // if !AlreadyHave\n+                haveblocks++;\n             pto->mapAskForBlock.erase(pto->mapAskForBlock.begin());\n         } // while\n \n         if (getblocks && fQuietInitial && !CaughtUp()) {\n-            if (getblocks == 1)\n-                printf(\"getdata %s to %s\\n\", blockinv.ToString().c_str(), pto->addr.ToString().c_str());\n+            if (haveblocks == 0)\n+                if (getblocks == 1)\n+                    printf(\"getdata %s to %s\\n\", blockinv.ToString().c_str(), pto->addr.ToString().c_str());\n+                else\n+                    printf(\"getdata %d blocks to %s\\n\", getblocks, pto->addr.ToString().c_str());\n             else\n-                printf(\"getdata %d blocks to %s\\n\", getblocks, pto->addr.ToString().c_str());\n+                printf(\"getdata %d (AH %d) blocks to %s\\n\", getblocks, haveblocks, pto->addr.ToString().c_str());\n         }\n \n         // Finally, the transactions"
      }
    ]
  },
  {
    "sha": "9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDlhZjQ2MmYwZDNlYjBjZDE5YTFkYzI2OTY2MmFjYzdmNDExNmYw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-31T11:40:03Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "PushGetBlocks returns false if not run.",
      "tree": {
        "sha": "542e3e9c69f6c378b0c1b2da12346f7f11b415ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/542e3e9c69f6c378b0c1b2da12346f7f11b415ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47bd682e90a185aeab3c946f6def27547849af54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47bd682e90a185aeab3c946f6def27547849af54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47bd682e90a185aeab3c946f6def27547849af54"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a1d606ac0c3c1f02284de944e60c9e64160ce645",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
        "patch": "@@ -1866,7 +1866,8 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n \n         // Ask this guy to fill in what we're missing\n         if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+            if (pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2)))\n+                printf(\"fill-in getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n         return true;\n     }\n \n@@ -2473,8 +2474,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         nAskedForBlocks++;\n         pfrom->fAskedForBlocks = true;\n-        printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n-        pfrom->PushGetBlocks(pindexBest, uint256(0));\n+        if (pfrom->PushGetBlocks(pindexBest, uint256(0)))\n+            printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n+        else\n+            printf(\"no initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n         NodeSummary();\n     }\n \n@@ -2614,19 +2617,22 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 if (inv.type == MSG_BLOCK && vInv.size() == 1)\n                     printf(\"inv %s at %s\\n\", inv.ToString().c_str(), pfrom->addr.ToString().c_str());\n                 if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                    pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n-                    orphanget++;\n-                    if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n-                        printf(\"orphan getblocks %s to %s\\n\", inv.ToString().c_str(),\n-                          pfrom->addr.ToString().c_str());\n+                    if (pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]))) {\n+                        orphanget++;\n+                        if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                            printf(\"orphan getblocks %s to %s\\n\", inv.ToString().c_str(),\n+                              pfrom->addr.ToString().c_str());\n+                    }\n                 } else if (nInv == nLastBlock) {\n                     // In case we are on a very long side-chain, it is possible that we already have\n                     // the last block in an inv bundle sent in response to getblocks. Try to detect\n                     // this situation and push another getblocks to continue.\n-                    pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n-                    lastblockget++;\n-                    if (fDebug)\n-                        printf(\"force request: %s\\n\", inv.ToString().c_str());\n+                    if (pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0))) {\n+                        lastblockget++;\n+                        if (!fQuietInitial || vInv.size() == 1 || CaughtUp())\n+                            printf(\"last %s getblocks to %s\\n\", inv.ToString().c_str(),\n+                              pfrom->addr.ToString().c_str());\n+                    }\n                 }\n             }\n "
      },
      {
        "sha": "1edbe359646a509441a8e8d7176604486a699a40",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
        "patch": "@@ -87,15 +87,16 @@ unsigned short GetListenPort()\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n }\n \n-void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n+bool CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n {\n     // Filter out duplicate requests\n     if (pindexBegin == pindexLastGetBlocksBegin && hashEnd == hashLastGetBlocksEnd)\n-        return;\n+        return false;\n     pindexLastGetBlocksBegin = pindexBegin;\n     hashLastGetBlocksEnd = hashEnd;\n \n     PushMessage(\"getblocks\", CBlockLocator(pindexBegin), hashEnd);\n+    return true;\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "9781b0bce1d9ef4f8ffe6720395516fc15971348",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
        "patch": "@@ -642,7 +642,7 @@ class CNode\n \n \n \n-    void PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd);\n+    bool PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd);\n     bool IsSubscribed(unsigned int nChannel);\n     void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n     void CancelSubscribe(unsigned int nChannel);"
      }
    ]
  },
  {
    "sha": "fae38f0706ceeff861f1ba453391db445684def2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWUzOGYwNzA2Y2VlZmY4NjFmMWJhNDUzMzkxZGI0NDU2ODRkZWYy",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-29T16:13:15Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "Make truncating the debug.log file an option.\n\nUseful for developers who need to refer to futher back in debug.log history, but who don't want to\nenable the -debug option and all the verbosity that comes with that.\n\nConflicts:\n\n\tsrc/init.cpp",
      "tree": {
        "sha": "5f4bba65504a4f309ccdbe79bb16b3a9f59385c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f4bba65504a4f309ccdbe79bb16b3a9f59385c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae38f0706ceeff861f1ba453391db445684def2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae38f0706ceeff861f1ba453391db445684def2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae38f0706ceeff861f1ba453391db445684def2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae38f0706ceeff861f1ba453391db445684def2/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9af462f0d3eb0cd19a1dc269662acc7f4116f0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8206e553e4119f4f2c8e068bab0d7ecdb34aa69",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae38f0706ceeff861f1ba453391db445684def2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae38f0706ceeff861f1ba453391db445684def2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fae38f0706ceeff861f1ba453391db445684def2",
        "patch": "@@ -261,6 +261,7 @@ std::string HelpMessage()\n         \"  -debugnet              \" + _(\"Output extra network debugging information\") + \"\\n\" +\n         \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n         \"  -quietinitial          \" + _(\"Reduce debug output on initial block download\") + \"\\n\" +\n+        \"  -shrinkdebugfile       \" + _(\"Keep debug.log file small (default: 1)\") + \"\\n\" +\n         \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n #ifdef WIN32\n         \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n@@ -445,7 +446,7 @@ bool AppInit2()\n     }\n #endif\n \n-    if (!fDebug)\n+    if (GetBoolArg(\"-shrinkdebugfile\", true))\n         ShrinkDebugFile();\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     printf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion().c_str(), CLIENT_DATE.c_str());"
      }
    ]
  },
  {
    "sha": "844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDRmNWFlZTU1Y2E0ZDJhOTQ2OWIzZmMzMTVmYTFmZDc0YThlZWQ3",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-28T23:34:18Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "Add -proxytoo option, which allows proxy use non-exclusively, unlike the -proxy option.",
      "tree": {
        "sha": "ad598bd6ebe2e12b0681443a59e2386c93d55132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad598bd6ebe2e12b0681443a59e2386c93d55132"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae38f0706ceeff861f1ba453391db445684def2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae38f0706ceeff861f1ba453391db445684def2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae38f0706ceeff861f1ba453391db445684def2"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 22,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0fe19376a2c488f1c58aa2bb2694e7e57a69ace5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "patch": "@@ -221,7 +221,8 @@ std::string HelpMessage()\n         \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n         \"  -dblogsize=<n>         \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +\n         \"  -timeout=<n>           \" + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n-        \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +\n+        \"  -proxy=<ip:port>       \" + _(\"Exclusively connect through socks proxy\") + \"\\n\" +\n+        \"  -proxytoo=<ip:port>    \" + _(\"Also connect through socks proxy\") + \"\\n\" +\n         \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\" +\n         \"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\"\n         \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n@@ -514,6 +515,23 @@ bool AppInit2()\n         SetReachable(NET_TOR);\n     }\n \n+    if (mapArgs.count(\"-proxytoo\")) {\n+        fProxyToo = true;\n+        CService addrProxy = CService(mapArgs[\"-proxytoo\"], 9050);\n+        if (!addrProxy.IsValid())\n+            return InitError(strprintf(_(\"Invalid -proxytoo address: '%s'\"), mapArgs[\"-proxytoo\"].c_str()));\n+\n+        if (!IsLimited(NET_IPV4))\n+            SetProxy(NET_IPV4, addrProxy, nSocksVersion);\n+        if (nSocksVersion > 4) {\n+#ifdef USE_IPV6\n+            if (!IsLimited(NET_IPV6))\n+                SetProxy(NET_IPV6, addrProxy, nSocksVersion);\n+#endif\n+            SetNameProxy(addrProxy, nSocksVersion);\n+        }\n+    }\n+\n     // see Step 2: parameter interactions for more information about these\n     fNoListen = !GetBoolArg(\"-listen\", true);\n     fDiscover = GetBoolArg(\"-discover\", true);"
      },
      {
        "sha": "9f09e2066e8dbddad58e04145ecdcd0aff650f8a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "patch": "@@ -49,6 +49,7 @@ struct LocalServiceInfo {\n bool fClient = false;\n bool fDiscover = true;\n bool fUseUPnP = false;\n+bool fProxyToo = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;"
      },
      {
        "sha": "1c7c3982fcf4dcd905f0bc12669febd9807816df",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "patch": "@@ -470,7 +470,7 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n     const proxyType &proxy = proxyInfo[addrDest.GetNetwork()];\n \n     // no proxy needed\n-    if (!proxy.second)\n+    if (!proxy.second || (fProxyToo && rand() %2 == 0))\n         return ConnectSocketDirectly(addrDest, hSocketRet, nTimeout);\n \n     SOCKET hSocket = INVALID_SOCKET;"
      },
      {
        "sha": "25479c5717d1a4c2d3a85fcd280e2c84cbd4ad27",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "patch": "@@ -119,6 +119,7 @@ extern bool fNoListen;\n extern bool fLogTimestamps;\n extern bool fReopenDebugLog;\n extern bool fQuietInitial;\n+extern bool fProxyToo;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  },
  {
    "sha": "90deb304a7e65580e5e5ce3057698c4930c6a688",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGRlYjMwNGE3ZTY1NTgwZTVlNWNlMzA1NzY5OGM0OTMwYzZhNjg4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-14T18:39:50Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:15Z"
      },
      "message": "Show the timestamp for the block.\n\n(and wrap lines)",
      "tree": {
        "sha": "471ace5e345dcb60ca0776afe427430e279f217d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/471ace5e345dcb60ca0776afe427430e279f217d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90deb304a7e65580e5e5ce3057698c4930c6a688",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90deb304a7e65580e5e5ce3057698c4930c6a688",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90deb304a7e65580e5e5ce3057698c4930c6a688",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90deb304a7e65580e5e5ce3057698c4930c6a688/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844f5aee55ca4d2a9469b3fc315fa1fd74a8eed7"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e494d28e3c5128aefe11bbc04f056c606dac3092",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90deb304a7e65580e5e5ce3057698c4930c6a688/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90deb304a7e65580e5e5ce3057698c4930c6a688/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=90deb304a7e65580e5e5ce3057698c4930c6a688",
        "patch": "@@ -510,7 +510,9 @@ bool CTxDB::LoadBlockIndex()\n     pindexBest = mapBlockIndex[hashBestChain];\n     nBestHeight = pindexBest->nHeight;\n     bnBestChainWork = pindexBest->bnChainWork;\n-    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight);\n+    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight,\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     // Load bnBestInvalidWork, OK if it doesn't exist\n     ReadBestInvalidWork(bnBestInvalidWork);"
      },
      {
        "sha": "03c98315685d61f06cda0b385cd5382ef0d70b7d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90deb304a7e65580e5e5ce3057698c4930c6a688/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90deb304a7e65580e5e5ce3057698c4930c6a688/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=90deb304a7e65580e5e5ce3057698c4930c6a688",
        "patch": "@@ -986,8 +986,13 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n         uiInterface.NotifyBlocksChanged();\n     }\n-    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n-    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n+      pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight,\n+      pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%x %H:%M:%S\",\n+      pindexNew->GetBlockTime()).c_str());\n+    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: WARNING: Displayed transactions may not be correct!  You may need to upgrade, or other nodes may need to upgrade.\\n\");\n }\n@@ -1632,7 +1637,9 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"SetBestChain: new best=%s  height=%d  work=%s  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n "
      }
    ]
  },
  {
    "sha": "ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTFkZDUzMzljZWRmODhjY2M0MzQ2ZWNhZTJiNjVlZDEzYTQzNDhk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-30T00:27:32Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-06-27T21:09:40Z"
      },
      "message": "Show more significant bytes of block hashes.\n\nConflicts:\n\n\tsrc/main.cpp",
      "tree": {
        "sha": "fb94e6cd84c2232714817ab06e6e5c710519373d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb94e6cd84c2232714817ab06e6e5c710519373d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90deb304a7e65580e5e5ce3057698c4930c6a688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90deb304a7e65580e5e5ce3057698c4930c6a688",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90deb304a7e65580e5e5ce3057698c4930c6a688"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 37,
      "deletions": 32
    },
    "files": [
      {
        "sha": "a7bdc07e48e86acbcd00b71fa8f21ccde4a9807c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -511,7 +511,7 @@ bool CTxDB::LoadBlockIndex()\n     nBestHeight = pindexBest->nHeight;\n     bnBestChainWork = pindexBest->bnChainWork;\n     printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d  date=%s\\n\",\n-      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight,\n+      hashBestChain.ToString().substr(10,15).c_str(), nBestHeight,\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     // Load bnBestInvalidWork, OK if it doesn't exist"
      },
      {
        "sha": "9ba016310e57a6987d63d268623a3532a3bc9e9e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -987,11 +987,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n-      pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight,\n+      pindexNew->GetBlockHash().ToString().substr(10,15).c_str(), pindexNew->nHeight,\n       pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%x %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      hashBestChain.ToString().substr(10,15).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: WARNING: Displayed transactions may not be correct!  You may need to upgrade, or other nodes may need to upgrade.\\n\");\n@@ -1464,8 +1464,8 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         vConnect.push_back(pindex);\n     reverse(vConnect.begin(), vConnect.end());\n \n-    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n-    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(10,15).c_str(), pindexBest->GetBlockHash().ToString().substr(10,15).c_str());\n+    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(10,15).c_str(), pindexNew->GetBlockHash().ToString().substr(10,15).c_str());\n \n     // Disconnect shorter branch\n     vector<CTransaction> vResurrect;\n@@ -1475,7 +1475,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         if (!block.ReadFromDisk(pindex))\n             return error(\"Reorganize() : ReadFromDisk for disconnect failed\");\n         if (!block.DisconnectBlock(txdb, pindex))\n-            return error(\"Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(10,15).c_str());\n \n         // Queue memory transactions to resurrect\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -1494,7 +1494,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         if (!block.ConnectBlock(txdb, pindex))\n         {\n             // Invalid block\n-            return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(10,15).c_str());\n         }\n \n         // Queue memory transactions to delete\n@@ -1638,7 +1638,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  date=%s\\n\",\n-      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      hashBestChain.ToString().substr(10,15).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n@@ -1658,7 +1658,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n-        return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(0,20).c_str());\n+        return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(10,15).c_str());\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(nFile, nBlockPos, *this);\n@@ -1819,18 +1819,18 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n         if (pfrom) {\n             pfrom->nDupBlocks++;\n             if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n-            printf(\"ProcessBlock() : already(%d) have block %d %s\\n\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+            printf(\"ProcessBlock() : already(%d) have block %d %s\\n\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString().substr(10,15).c_str());\n         } else\n-            printf(\"ProcessBlock() : already have block %d %s\\n\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+            printf(\"ProcessBlock() : already have block %d %s\\n\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(10,15).c_str());\n         return false;\n     }\n     if (mapOrphanBlocks.count(hash)) {\n         if (pfrom) {\n             pfrom->nDupBlocks++;\n             if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n-            printf(\"ProcessBlock() : already(%d) have block (orphan) %s\\n\", pfrom->nDupBlocks, hash.ToString().substr(0,20).c_str());\n+            printf(\"ProcessBlock() : already(%d) have block (orphan) %s\\n\", pfrom->nDupBlocks, hash.ToString().substr(10,15).c_str());\n         } else\n-            printf(\"ProcessBlock() : already have block (orphan) %s\\n\", hash.ToString().substr(0,20).c_str());\n+            printf(\"ProcessBlock() : already have block (orphan) %s\\n\", hash.ToString().substr(10,15).c_str());\n         return false;\n     }\n     if (pfrom) pfrom->nDupBlocks = 0;\n@@ -1866,7 +1866,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n+        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(10,15).c_str());\n         CBlock* pblock2 = new CBlock(*pblock);\n         mapOrphanBlocks.insert(make_pair(hash, pblock2));\n         mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n@@ -2099,7 +2099,7 @@ void PrintBlockTree()\n             pindex->nHeight,\n             pindex->nFile,\n             pindex->nBlockPos,\n-            block.GetHash().ToString().substr(0,20).c_str(),\n+            block.GetHash().ToString().substr(10,15).c_str(),\n             DateTimeStrFormat(\"%x %H:%M:%S\", block.GetBlockTime()).c_str(),\n             block.vtx.size());\n \n@@ -2750,13 +2750,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n         if (!fQuietInitial || CaughtUp())\n-            printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+            printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(10,15).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n                 if (!fQuietInitial || CaughtUp())\n-                    printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                    printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(10,15).c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n@@ -2797,7 +2797,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n-        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str());\n+        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(10,15).c_str());\n         for (; pindex; pindex = pindex->pnext)\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -2888,11 +2888,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         if (timetodownload)\n             printf(\"block recved(%d) %s (%u bytes, %us, %uB/s) from %s\\n\", nReceivingBlocks,\n-              inv.hash.ToString().substr(0,20).c_str(), size, timetodownload,\n+              inv.hash.ToString().substr(10,15).c_str(), size, timetodownload,\n               size / timetodownload, pfrom->addr.ToString().c_str());\n         else\n             printf(\"block recved(%d) %s (%u bytes) from %s\\n\", nReceivingBlocks,\n-              inv.hash.ToString().substr(0,20).c_str(), size, pfrom->addr.ToString().c_str());\n+              inv.hash.ToString().substr(10,15).c_str(), size, pfrom->addr.ToString().c_str());\n         if (pfrom->fWaitingForBlock) {\n             pfrom->fWaitingForBlock = false;\n             nWaitingForBlocks--;"
      },
      {
        "sha": "9321de2611f7848ff89c27e4a9433360f2811a47",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -1005,9 +1005,9 @@ class CBlock\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%d)\\n\",\n-            GetHash().ToString().substr(0,20).c_str(),\n+            GetHash().ToString().substr(10,15).c_str(),\n             nVersion,\n-            hashPrevBlock.ToString().substr(0,20).c_str(),\n+            hashPrevBlock.ToString().substr(10,15).c_str(),\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n@@ -1177,7 +1177,7 @@ class CBlockIndex\n         return strprintf(\"CBlockIndex(nprev=%08x, pnext=%08x, nFile=%d, nBlockPos=%-6d nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nFile, nBlockPos, nHeight,\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n-            GetBlockHash().ToString().substr(0,20).c_str());\n+            GetBlockHash().ToString().substr(10,15).c_str());\n     }\n \n     void print() const\n@@ -1245,8 +1245,8 @@ class CDiskBlockIndex : public CBlockIndex\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s, hashNext=%s)\",\n             GetBlockHash().ToString().c_str(),\n-            hashPrev.ToString().substr(0,20).c_str(),\n-            hashNext.ToString().substr(0,20).c_str());\n+            hashPrev.ToString().substr(10,15).c_str(),\n+            hashNext.ToString().substr(10,15).c_str());\n         return str;\n     }\n "
      },
      {
        "sha": "202591a2017eda6ac4a6fbcc15817e0cfab4964f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -69,12 +69,6 @@ void SetReachable(enum Network net, bool fFlag = true);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n \n-enum\n-{\n-    MSG_TX = 1,\n-    MSG_BLOCK,\n-};\n-\n class CRequestTracker\n {\n public:"
      },
      {
        "sha": "931fcdd1a287abdf24747b6c7629ace0839f3a83",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -140,6 +140,11 @@ const char* CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n+    if (type == MSG_BLOCK)\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(10,15).c_str());\n+    if (type == MSG_TX)\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,10).c_str());\n+\n     return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n }\n "
      },
      {
        "sha": "dab4e694421f6fb1c258591ba90a1f665b6b35b2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -126,4 +126,10 @@ class CInv\n         uint256 hash;\n };\n \n+enum\n+{\n+    MSG_TX = 1,\n+    MSG_BLOCK,\n+};\n+\n #endif // __INCLUDED_PROTOCOL_H__"
      },
      {
        "sha": "a6085b849f827bdf96896d523d41e9c9c11ef9f7",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1dd5339cedf88ccc4346ecae2b65ed13a4348d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ca1dd5339cedf88ccc4346ecae2b65ed13a4348d",
        "patch": "@@ -188,7 +188,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n                 //    wtx.vout[0].nValue,\n                 //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+                //    wtx.hashBlock.ToString().substr(10,15).c_str(),\n                 //    wtx.mapValue[\"message\"].c_str());\n             }\n             else if (strType == \"acentry\")"
      }
    ]
  }
]