dhruv,2020-09-16 06:16:17,"## Review methodology\n`std::mutex` locks across a thread and _within_ a thread. i.e. if a `mutex` is locked in a call stack on a given thread, it can no longer be acquired on _any_ thread.\n\n`std::recursive_mutex` locks across a thread but not _within_ a thread. i.e. if a `recursive_mutex` is locked in a call stack on a given thread, it can still be re-acquired on the _same_ thread further in",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-693197596,693197596,
hebasto,2020-09-19 10:56:28,"@dhruv \n> `std::mutex` locks...\n> `std::recursive_mutex` locks...\n\nTBH, I don't think that ""customizing"" technical terms could be helpful. A mutex does not lock anything, but it could be locked by a thread.\n\n> So when we change a `recursive_mutex` to a `mutex`, this reviewer sees the risk of a deadlock _within_ a given call stack as `mutex` is more restrictive.\n\nI think that the tr",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-695198819,695198819,
dhruv,2020-09-19 17:17:52,"Thank you for the response and corrections, @hebasto - we are on the same page now. In the coming days, I'll tinker with doxygen or CastXML and try to write a script that can find the potential UB. In the meantime, if you have better ideas for the review, or think it's best left for manual review, I would love to hear about it.",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-695334115,695334115,
hebasto,2020-10-14 12:11:39,@troygiorshev @jnewbery @MarcoFalke Mind looking into this PR?,https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-708359908,708359908,
MarcoFalke,2020-10-14 12:27:05,"It would be good to have the debug-lockorder change merged first, which checks that a mutex is not already held by the thread that tries to take it",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-708367480,708367480,
hebasto,2020-10-14 12:30:46,"> It would be good to have the debug-lockorder change merged first, which checks that a mutex is not already held by the thread that tries to take it\n\nAgree. Let #19337 go first.",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-708369453,708369453,
jnewbery,2020-12-31 13:00:21,"utACK 0e51a35512\n\n~The data guarded by `cs_hSocket` is one bit of information (has the `hSocket` been changed to `INVALID_SOCKET` by `CloseSocket()`). I think we could do better by:~\n- ~Making the `hSocket` member const and setting it in the `CNode`'s initializer list~\n- ~Make `CloseSocket()` take a `const SOCKET&` or by-value `SOCKET` (i.e. it doesn't update the value of the passed in soc",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-752953285,752953285,
hebasto,2021-01-01 12:35:41,"@MarcoFalke \n> It would be good to have the debug-lockorder change merged first, which checks that a mutex is not already held by the thread that tries to take it\n\n#19337 has been merged :)",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-753311430,753311430,
MarcoFalke,2021-01-05 11:18:50,"review ACK 0e51a355128a825d428fe2b9017c25085731fc04 ðŸ”Š\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 0e51a355128a825d428fe2b9017c25085731fc04 ðŸ”Š\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUhe9AwAsp8/vU4EpiwanorQlFjYBvJTOuT1tJpPr9aI",https://github.com/bitcoin/bitcoin/pull/19915#issuecomment-754574654,754574654,
