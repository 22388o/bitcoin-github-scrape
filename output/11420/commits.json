[
  {
    "sha": "619bb05037a55c4b73973965989d199d8cb62f74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTliYjA1MDM3YTU1YzRiNzM5NzM5NjU5ODlkMTk5ZDhjYjYyZjc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:27:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:27:20Z"
      },
      "message": "Squashed 'src/univalue/' changes from 16a1f7f6e..fe805ea74\n\nfe805ea74 Declare single-argument (non-converting) constructors \"explicit\"\n8a2d6f1e3 Merge pull request #41 from jgarzik/get-obj-map\nba341a20d Add getObjMap() helper method.  Also, constify checkObject().\nceb119413 Handle .pushKV() and .checkObject() edge cases.\n107db9829 Add ::push_back(double) method for feature parity.\nd41530031 Move one-line implementation of UniValue::read() to header.\n52e85b35b Move exception-throwing get_* methods into separate implementation module.\ndac529675 README.md: update code quotes\n3e31dcffb README.md: close code quote\nd09b8429d Update README.md\nf1b86edb4 Convert README to markdown style.\n1dfe464ef Import UniValue class unit tests from bitcoin project.\n0d3e74dd1 operator[] takes size_t index parameter (versus unsigned int)\n640158fa2 Private findKey() method becomes size_t clean, and returns bool on failure.\n709913585 Merge pull request #36 from ryanofsky/pr/end-str\na31231b51 Version 1.0.3\n4fd5444d1 Reject unterminated strings\n81eba332b Merge pull request #26 from isle2983/pushBackHelpers\n36405413e Merge PR #32 from branch 'nul-not-special' of git://github.com/ryanofsky/univalue into merge\n89bb07322 Merge pull request #31 from ryanofsky/raw-literals\n511008c36 Merge pull request #30 from ryanofsky/test-driver\n77974f3a9 Merge pull request #34 from paveljanik/20161116_Wshadow_codepoint\na38fcd355 Do not shadow member variable codepoint.\nfd32d1ab8 Don't require nul-terminated string inputs\n0bb1439d0 Support parsing raw literals in UniValue\n28876d045 Merge pull request #29 from btcdrak/exportspace\n839ccd71f Add test driver for JSONTestSuite\n26ef3fff1 Remove trailing whitespace from JSON export\ncfa0384d6 Convenience wrappers for push_back-ing integer types\nREVERT: 16a1f7f6e Merge #3: Pull upstream\nREVERT: daf1285af Merge pull request #2 from jgarzik/master\nREVERT: f32df99e9 Merge branch '2016_04_unicode' into bitcoin\nREVERT: 280b191cb Merge remote-tracking branch 'jgarzik/master' into bitcoin\nREVERT: 2740c4f71 Merge branch '2015_11_escape_plan' into bitcoin\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: fe805ea74f8919382720b09a905a14e81311b3ad",
      "tree": {
        "sha": "5d48005ff778ddf521705b5d08d19189966fc36b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d48005ff778ddf521705b5d08d19189966fc36b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/619bb05037a55c4b73973965989d199d8cb62f74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/619bb05037a55c4b73973965989d199d8cb62f74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0"
      }
    ],
    "stats": {
      "total": 1012,
      "additions": 783,
      "deletions": 229
    },
    "files": [
      {
        "sha": "e283fc890e232dc5ce447678a294912ee222a93b",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -12,6 +12,7 @@ pkgconfig_DATA = pc/libunivalue.pc\n \n libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n+\tlib/univalue_get.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n@@ -20,7 +21,7 @@ libunivalue_la_LDFLAGS = \\\n \t-no-undefined\n libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n-TESTS = test/unitester\n+TESTS = test/object test/unitester test/no_nul\n \n GENBIN = gen/gen$(BUILD_EXEEXT)\n GEN_SRCS = gen/gen.cpp\n@@ -33,7 +34,7 @@ gen: lib/univalue_escapes.h $(GENBIN)\n \t@echo Updating $<\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n-noinst_PROGRAMS = $(TESTS)\n+noinst_PROGRAMS = $(TESTS) test/test_json\n \n TEST_DATA_DIR=test\n \n@@ -42,6 +43,21 @@ test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n+test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_LDADD = libunivalue.la\n+test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n+test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_LDADD = libunivalue.la\n+test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n+test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_object_SOURCES = test/object.cpp\n+test_object_LDADD = libunivalue.la\n+test_object_CXXFLAGS = -I$(top_srcdir)/include\n+test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail10.json \\\n \t$(TEST_DATA_DIR)/fail11.json \\\n@@ -77,6 +93,8 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail39.json \\\n \t$(TEST_DATA_DIR)/fail40.json \\\n \t$(TEST_DATA_DIR)/fail41.json \\\n+\t$(TEST_DATA_DIR)/fail42.json \\\n+\t$(TEST_DATA_DIR)/fail44.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -88,6 +106,11 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n \t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json\n+\t$(TEST_DATA_DIR)/round2.json \\\n+\t$(TEST_DATA_DIR)/round3.json \\\n+\t$(TEST_DATA_DIR)/round4.json \\\n+\t$(TEST_DATA_DIR)/round5.json \\\n+\t$(TEST_DATA_DIR)/round6.json \\\n+\t$(TEST_DATA_DIR)/round7.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "README",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "patch": "@@ -1,7 +0,0 @@\n-\n-\t\tUniValue\n-\n-A universal value object, with JSON encoding (output) and decoding (input).\n-\n-Built as a single dynamic RAII C++ object class, and no templates.\n-"
      },
      {
        "sha": "36aa786a4c5de14bb0295d0dc3d82a5f09679db7",
        "filename": "README.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,32 @@\n+\n+# UniValue\n+\n+## Summary\n+\n+A universal value class, with JSON encoding and decoding.\n+\n+UniValue is an abstract data type that may be a null, boolean, string,\n+number, array container, or a key/value dictionary container, nested to\n+an arbitrary depth.\n+\n+This class is aligned with the JSON standard, [RFC\n+7159](https://tools.ietf.org/html/rfc7159.html).\n+\n+## Installation\n+\n+This project is a standard GNU\n+[autotools](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)\n+project.  Build and install instructions are available in the `INSTALL`\n+file provided with GNU autotools.\n+\n+```\n+$ ./autogen.sh\n+$ ./configure\n+$ make\n+```\n+\n+## Design\n+\n+UniValue provides a single dynamic RAII C++ object class,\n+and minimizes template use (contra json_spirit).\n+"
      },
      {
        "sha": "8298332ac132cba1fdc61a1a48f2d666cfb5dbba",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [2])\n-m4_define([libunivalue_interface_age], [2])\n+m4_define([libunivalue_micro_version], [3])\n+m4_define([libunivalue_interface_age], [3])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.2],\n+AC_INIT([univalue], [1.0.3],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "4fd2223b302e7a2b1979654b5e900f3a4123ec3c",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -7,6 +7,7 @@\n #define __UNIVALUE_H__\n \n #include <stdint.h>\n+#include <string.h>\n \n #include <string>\n #include <vector>\n@@ -69,10 +70,11 @@ class UniValue {\n     size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    void getObjMap(std::map<std::string,UniValue>& kv) const;\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\n     const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+    const UniValue& operator[](size_t index) const;\n+    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n@@ -92,8 +94,25 @@ class UniValue {\n         std::string s(val_);\n         return push_back(s);\n     }\n+    bool push_back(uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(double val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n@@ -124,9 +143,10 @@ class UniValue {\n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n-    bool read(const char *raw);\n+    bool read(const char *raw, size_t len);\n+    bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n+        return read(rawStr.data(), rawStr.size());\n     }\n \n private:\n@@ -135,7 +155,7 @@ class UniValue {\n     std::vector<std::string> keys;\n     std::vector<UniValue> values;\n \n-    int findKey(const std::string& key) const;\n+    bool findKey(const std::string& key, size_t& retIdx) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n@@ -240,7 +260,7 @@ enum jtokentype {\n };\n \n extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n+                                    unsigned int& consumed, const char *raw, const char *end);\n extern const char *uvTypeName(UniValue::VType t);\n \n static inline bool jsonTokenIsValue(enum jtokentype jtt)"
      },
      {
        "sha": "d8ad7c4b90c6b1564d378c1e93b30f58ef37c889",
        "filename": "lib/univalue.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 153,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -4,75 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <errno.h>\n #include <iomanip>\n-#include <limits>\n #include <sstream>\n-#include <stdexcept>\n #include <stdlib.h>\n-#include <string.h>\n \n #include \"univalue.h\"\n \n-namespace \n-{\n-static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n-}\n-\n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-}\n-\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -104,7 +41,7 @@ static bool validNumStr(const string& s)\n {\n     string tokenVal;\n     unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n@@ -189,13 +126,22 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(val_);\n+}\n+\n bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n-    keys.push_back(key);\n-    values.push_back(val_);\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(key, val_);\n     return true;\n }\n \n@@ -204,30 +150,43 @@ bool UniValue::pushKVs(const UniValue& obj)\n     if (typ != VOBJ || obj.typ != VOBJ)\n         return false;\n \n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values.at(i));\n-    }\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(obj.keys[i], obj.values.at(i));\n \n     return true;\n }\n \n-int UniValue::findKey(const std::string& key) const\n+void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n+{\n+    if (typ != VOBJ)\n+        return;\n+\n+    kv.clear();\n+    for (size_t i = 0; i < keys.size(); i++)\n+        kv[keys[i]] = values[i];\n+}\n+\n+bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n {\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n+    for (size_t i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key) {\n+            retIdx = i;\n+            return true;\n+        }\n     }\n \n-    return -1;\n+    return false;\n }\n \n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n+    if (typ != VOBJ)\n+        return false;\n+\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n          it != t.end(); ++it) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n+        size_t idx = 0;\n+        if (!findKey(it->first, idx))\n             return false;\n \n         if (values.at(idx).getType() != it->second)\n@@ -242,14 +201,14 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (typ != VOBJ)\n         return NullUniValue;\n \n-    int index = findKey(key);\n-    if (index < 0)\n+    size_t index = 0;\n+    if (!findKey(key, index))\n         return NullUniValue;\n \n     return values.at(index);\n }\n \n-const UniValue& UniValue::operator[](unsigned int index) const\n+const UniValue& UniValue::operator[](size_t index) const\n {\n     if (typ != VOBJ && typ != VARR)\n         return NullUniValue;\n@@ -283,75 +242,3 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-const std::vector<std::string>& UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-const std::vector<UniValue>& UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-const std::string& UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "eabcf2dad1acc67451fb9fec9d01ef55ef6fe255",
        "filename": "lib/univalue_get.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_get.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdexcept>\n+#include <vector>\n+#include <limits>\n+#include <string>\n+\n+#include \"univalue.h\"\n+\n+namespace\n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+const std::vector<std::string>& UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+const std::vector<UniValue>& UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+const std::string& UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "ae75cb462a0188c48181af5e225bca883a1a241d",
        "filename": "lib/univalue_read.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -43,21 +43,21 @@ static const char *hatoui(const char *first, const char *last,\n }\n \n enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n+                            const char *raw, const char *end)\n {\n     tokenVal.clear();\n     consumed = 0;\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n+    while (raw < end && (json_isspace(*raw)))          // skip whitespace\n         raw++;\n \n-    switch (*raw) {\n-\n-    case 0:\n+    if (raw >= end)\n         return JTOK_NONE;\n \n+    switch (*raw) {\n+\n     case '{':\n         raw++;\n         consumed = (raw - rawStart);\n@@ -127,40 +127,40 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!json_isdigit(*raw)))\n+        if ((*first == '-') && (raw < end) && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n+        while (raw < end && json_isdigit(*raw)) {  // copy digits\n             numStr += *raw;\n             raw++;\n         }\n \n         // part 2: frac\n-        if (*raw == '.') {\n+        if (raw < end && *raw == '.') {\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n         }\n \n         // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n+        if (raw < end && (*raw == 'e' || *raw == 'E')) {\n             numStr += *raw;                   // copy E\n             raw++;\n \n-            if (*raw == '-' || *raw == '+') { // copy +/-\n+            if (raw < end && (*raw == '-' || *raw == '+')) { // copy +/-\n                 numStr += *raw;\n                 raw++;\n             }\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -177,13 +177,16 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n-        while (*raw) {\n-            if ((unsigned char)*raw < 0x20)\n+        while (true) {\n+            if (raw >= end || (unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n+                if (raw >= end)\n+                    return JTOK_ERR;\n+\n                 switch (*raw) {\n                 case '\"':  writer.push_back('\\\"'); break;\n                 case '\\\\': writer.push_back('\\\\'); break;\n@@ -196,7 +199,8 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n                 case 'u': {\n                     unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                    if (raw + 1 + 4 >= end ||\n+                        hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n                     writer.push_back_u(codepoint);\n@@ -246,7 +250,7 @@ enum expect_bits {\n #define setExpect(bit) (expectMask |= EXP_##bit)\n #define clearExpect(bit) (expectMask &= ~EXP_##bit)\n \n-bool UniValue::read(const char *raw)\n+bool UniValue::read(const char *raw, size_t size)\n {\n     clear();\n \n@@ -257,10 +261,11 @@ bool UniValue::read(const char *raw)\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n+    const char* end = raw + size;\n     do {\n         last_tok = tok;\n \n-        tok = getJsonToken(tokenVal, consumed, raw);\n+        tok = getJsonToken(tokenVal, consumed, raw, end);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n             return false;\n         raw += consumed;\n@@ -371,9 +376,6 @@ bool UniValue::read(const char *raw)\n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal;\n             switch (tok) {\n             case JTOK_KW_NULL:\n@@ -388,6 +390,11 @@ bool UniValue::read(const char *raw)\n             default: /* impossible */ break;\n             }\n \n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -396,10 +403,12 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal(VNUM, tokenVal);\n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -408,17 +417,18 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n             if (expect(OBJ_NAME)) {\n+                UniValue *top = stack.back();\n                 top->keys.push_back(tokenVal);\n                 clearExpect(OBJ_NAME);\n                 setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n+                if (!stack.size()) {\n+                    *this = tmpVal;\n+                    break;\n+                }\n+                UniValue *top = stack.back();\n                 top->values.push_back(tmpVal);\n             }\n \n@@ -432,7 +442,7 @@ bool UniValue::read(const char *raw)\n     } while (!stack.empty ());\n \n     /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n+    tok = getJsonToken(tokenVal, consumed, raw, end);\n     if (tok != JTOK_NONE)\n         return false;\n "
      },
      {
        "sha": "20d40430095841a460adef8d3c60a56746785b24",
        "filename": "lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_utffilter.h?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -13,7 +13,7 @@\n class JSONUTF8StringFilter\n {\n public:\n-    JSONUTF8StringFilter(std::string &s):\n+    explicit JSONUTF8StringFilter(std::string &s):\n         str(s), is_valid(true), codepoint(0), state(0), surpair(0)\n     {\n     }\n@@ -46,27 +46,27 @@ class JSONUTF8StringFilter\n         }\n     }\n     // Write codepoint directly, possibly collating surrogate pairs\n-    void push_back_u(unsigned int codepoint)\n+    void push_back_u(unsigned int codepoint_)\n     {\n         if (state) // Only accept full codepoints in open state\n             is_valid = false;\n-        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+        if (codepoint_ >= 0xD800 && codepoint_ < 0xDC00) { // First half of surrogate pair\n             if (surpair) // Two subsequent surrogate pair openers - fail\n                 is_valid = false;\n             else\n-                surpair = codepoint;\n-        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+                surpair = codepoint_;\n+        } else if (codepoint_ >= 0xDC00 && codepoint_ < 0xE000) { // Second half of surrogate pair\n             if (surpair) { // Open surrogate pair, expect second half\n                 // Compute code point from UTF-16 surrogate pair\n-                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint_ - 0xDC00));\n                 surpair = 0;\n             } else // Second half doesn't follow a first half - fail\n                 is_valid = false;\n         } else {\n             if (surpair) // First half of surrogate pair not followed by second - fail\n                 is_valid = false;\n             else\n-                append_codepoint(codepoint);\n+                append_codepoint(codepoint_);\n         }\n     }\n     // Check that we're in a state where the string can be ended\n@@ -96,22 +96,22 @@ class JSONUTF8StringFilter\n     //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n     unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n \n-    void append_codepoint(unsigned int codepoint)\n+    void append_codepoint(unsigned int codepoint_)\n     {\n-        if (codepoint <= 0x7f)\n-            str.push_back((char)codepoint);\n-        else if (codepoint <= 0x7FF) {\n-            str.push_back((char)(0xC0 | (codepoint >> 6)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0xFFFF) {\n-            str.push_back((char)(0xE0 | (codepoint >> 12)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0x1FFFFF) {\n-            str.push_back((char)(0xF0 | (codepoint >> 18)));\n-            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        if (codepoint_ <= 0x7f)\n+            str.push_back((char)codepoint_);\n+        else if (codepoint_ <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint_ >> 6)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint_ >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint_ >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n         }\n     }\n };"
      },
      {
        "sha": "cf27835991162b2a1e7c0053223f36ea26eaa589",
        "filename": "lib/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -79,8 +79,6 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n         }\n         if (prettyIndent)\n             s += \"\\n\";"
      },
      {
        "sha": "7b27cf0da2901bf1438b00efc277d19d7bd6643f",
        "filename": "test/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/.gitignore?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1,4 +1,8 @@\n+\n+object\n unitester\n+test_json\n+no_nul\n \n *.trs\n *.log"
      },
      {
        "sha": "8feb01a6d0db2a3db29889a623b00ba51d51490b",
        "filename": "test/fail1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail1.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1 +1 @@\n-\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file\n+\"This is a string that never ends, yes it goes on and on, my friends."
      },
      {
        "sha": "9c7565adbddf645df5edfbdcd630c7a0f94aa2eb",
        "filename": "test/fail42.json",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail42.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail42.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail42.json?ref=619bb05037a55c4b73973965989d199d8cb62f74"
      },
      {
        "sha": "80edceddf1ef6c90cee1e9f979a0d31b1630bca4",
        "filename": "test/fail44.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail44.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail44.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail44.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+\"This file ends without a newline or close-quote.\n\\ No newline at end of file"
      },
      {
        "sha": "83d292200bf875126f7a25f1c5b032beec9ed6dd",
        "filename": "test/no_nul.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/no_nul.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/no_nul.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/no_nul.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,8 @@\n+#include \"univalue.h\"\n+\n+int main (int argc, char *argv[])\n+{\n+    char buf[] = \"___[1,2,3]___\";\n+    UniValue val;\n+    return val.read(buf + 3, 7) ? 0 : 1;\n+}"
      },
      {
        "sha": "02446292a1aa4a3a76a2f7a1ed7f1a22cc138a56",
        "filename": "test/object.cpp",
        "status": "added",
        "additions": 395,
        "deletions": 0,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/object.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,395 @@\n+// Copyright (c) 2014 BitPay Inc.\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <cassert>\n+#include <stdexcept>\n+#include <univalue.h>\n+\n+#define BOOST_FIXTURE_TEST_SUITE(a, b)\n+#define BOOST_AUTO_TEST_CASE(funcName) void funcName()\n+#define BOOST_AUTO_TEST_SUITE_END()\n+#define BOOST_CHECK(expr) assert(expr)\n+#define BOOST_CHECK_EQUAL(v1, v2) assert((v1) == (v2))\n+#define BOOST_CHECK_THROW(stmt, excMatch) { \\\n+        try { \\\n+            (stmt); \\\n+        } catch (excMatch & e) { \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+#define BOOST_CHECK_NO_THROW(stmt) { \\\n+        try { \\\n+            (stmt); \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    std::string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    std::string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    std::vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK(arr.push_back((uint64_t) 400ULL));\n+    BOOST_CHECK(arr.push_back((int64_t) -400LL));\n+    BOOST_CHECK(arr.push_back((int) -401));\n+    BOOST_CHECK(arr.push_back(-40.1));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+    BOOST_CHECK_EQUAL(arr[5].getValStr(), \"400\");\n+    BOOST_CHECK_EQUAL(arr[6].getValStr(), \"-400\");\n+    BOOST_CHECK_EQUAL(arr[7].getValStr(), \"-401\");\n+    BOOST_CHECK_EQUAL(arr[8].getValStr(), \"-40.1\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK(arr.empty());\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    std::string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    std::map<std::string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK(obj.empty());\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n+    BOOST_CHECK_EQUAL(obj.getType(), UniValue::VNULL);\n+\n+    BOOST_CHECK_EQUAL(obj.setObject(), true);\n+    UniValue uv;\n+    uv.setInt(42);\n+    obj.__pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"42\");\n+\n+    uv.setInt(43);\n+    obj.pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"43\");\n+\n+    obj.pushKV(\"name\", \"foo bar\");\n+\n+    std::map<std::string,UniValue> kv;\n+    obj.getObjMap(kv);\n+    BOOST_CHECK_EQUAL(kv[\"age\"].getValStr(), \"43\");\n+    BOOST_CHECK_EQUAL(kv[\"name\"].getValStr(), \"foo bar\");\n+\n+}\n+\n+static const char *json1 =\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    std::string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    std::string correctValue(\"str\");\n+    correctValue.push_back('\\0');\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+int main (int argc, char *argv[])\n+{\n+    univalue_constructor();\n+    univalue_typecheck();\n+    univalue_set();\n+    univalue_array();\n+    univalue_object();\n+    univalue_readwrite();\n+    return 0;\n+}\n+"
      },
      {
        "sha": "7182dc2f9b8e47dbcbbaa2e18a47a44f424d491f",
        "filename": "test/round3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round3.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+\"abcdefghijklmnopqrstuvwxyz\""
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "test/round4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round4.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "27ba77ddaf61532f217964734769a42cdabc17dc",
        "filename": "test/round5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round5.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+true"
      },
      {
        "sha": "c508d5366f70bba37fcc09d128b6537c4adb2c79",
        "filename": "test/round6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round6.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+false"
      },
      {
        "sha": "19765bd501b636fce433540d9e6735f51d66151d",
        "filename": "test/round7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round7.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+null"
      },
      {
        "sha": "2943bae2b15e928e345af49b5802e7241058a1b5",
        "filename": "test/test_json.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/test_json.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/test_json.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/test_json.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,24 @@\n+// Test program that can be called by the JSON test suite at\n+// https://github.com/nst/JSONTestSuite.\n+//\n+// It reads JSON input from stdin and exits with code 0 if it can be parsed\n+// successfully. It also pretty prints the parsed JSON value to stdout.\n+\n+#include <iostream>\n+#include <string>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+int main (int argc, char *argv[])\n+{\n+    UniValue val;\n+    if (val.read(string(istreambuf_iterator<char>(cin),\n+                        istreambuf_iterator<char>()))) {\n+        cout << val.write(1 /* prettyIndent */, 4 /* indentLevel */) << endl;\n+        return 0;\n+    } else {\n+        cerr << \"JSON Parse Error.\" << endl;\n+        return 1;\n+    }\n+}"
      },
      {
        "sha": "2c37794a4bdb8fb77fa02d5cbb90291033ef2af4",
        "filename": "test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -113,6 +113,8 @@ static const char *filenames[] = {\n         \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n         \"fail40.json\",               // invalid unicode: broken UTF-8\n         \"fail41.json\",               // invalid unicode: unfinished UTF-8\n+        \"fail42.json\",               // valid json with garbage following a nul byte\n+        \"fail44.json\",               // unterminated string\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -125,6 +127,11 @@ static const char *filenames[] = {\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n         \"round2.json\",              // unicode\n+        \"round3.json\",              // bare string\n+        \"round4.json\",              // bare number\n+        \"round5.json\",              // bare true\n+        \"round6.json\",              // bare false\n+        \"round7.json\",              // bare null\n };\n \n // Test \\u handling"
      }
    ]
  },
  {
    "sha": "faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFlZWIwZDNlNzc3ZDk5MWM3Y2ZlZTk4M2JlYTM2OWMxMDlmNWNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:31:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:35:46Z"
      },
      "message": "Bump univalue and fix json formatting in tests\n\nThis merge commit bumps the univalue subtree and also updates the whitespace\nfor some failing tests.",
      "tree": {
        "sha": "c55d3d58f96acbbe9a4fc4ccd5b6f3a7e638a179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c55d3d58f96acbbe9a4fc4ccd5b6f3a7e638a179"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433"
      },
      {
        "sha": "619bb05037a55c4b73973965989d199d8cb62f74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/619bb05037a55c4b73973965989d199d8cb62f74"
      }
    ],
    "stats": {
      "total": 1148,
      "additions": 851,
      "deletions": 297
    },
    "files": [
      {
        "sha": "e283fc890e232dc5ce447678a294912ee222a93b",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -12,6 +12,7 @@ pkgconfig_DATA = pc/libunivalue.pc\n \n libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n+\tlib/univalue_get.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n@@ -20,7 +21,7 @@ libunivalue_la_LDFLAGS = \\\n \t-no-undefined\n libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n-TESTS = test/unitester\n+TESTS = test/object test/unitester test/no_nul\n \n GENBIN = gen/gen$(BUILD_EXEEXT)\n GEN_SRCS = gen/gen.cpp\n@@ -33,7 +34,7 @@ gen: lib/univalue_escapes.h $(GENBIN)\n \t@echo Updating $<\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n-noinst_PROGRAMS = $(TESTS)\n+noinst_PROGRAMS = $(TESTS) test/test_json\n \n TEST_DATA_DIR=test\n \n@@ -42,6 +43,21 @@ test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n+test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_LDADD = libunivalue.la\n+test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n+test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_LDADD = libunivalue.la\n+test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n+test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_object_SOURCES = test/object.cpp\n+test_object_LDADD = libunivalue.la\n+test_object_CXXFLAGS = -I$(top_srcdir)/include\n+test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail10.json \\\n \t$(TEST_DATA_DIR)/fail11.json \\\n@@ -77,6 +93,8 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail39.json \\\n \t$(TEST_DATA_DIR)/fail40.json \\\n \t$(TEST_DATA_DIR)/fail41.json \\\n+\t$(TEST_DATA_DIR)/fail42.json \\\n+\t$(TEST_DATA_DIR)/fail44.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -88,6 +106,11 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n \t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json\n+\t$(TEST_DATA_DIR)/round2.json \\\n+\t$(TEST_DATA_DIR)/round3.json \\\n+\t$(TEST_DATA_DIR)/round4.json \\\n+\t$(TEST_DATA_DIR)/round5.json \\\n+\t$(TEST_DATA_DIR)/round6.json \\\n+\t$(TEST_DATA_DIR)/round7.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc901d3a683c92438a6b28dca50b956decc4433/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc901d3a683c92438a6b28dca50b956decc4433/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=bbc901d3a683c92438a6b28dca50b956decc4433",
        "patch": "@@ -1,7 +0,0 @@\n-\n-\t\tUniValue\n-\n-A universal value object, with JSON encoding (output) and decoding (input).\n-\n-Built as a single dynamic RAII C++ object class, and no templates.\n-"
      },
      {
        "sha": "36aa786a4c5de14bb0295d0dc3d82a5f09679db7",
        "filename": "src/univalue/README.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README.md?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,32 @@\n+\n+# UniValue\n+\n+## Summary\n+\n+A universal value class, with JSON encoding and decoding.\n+\n+UniValue is an abstract data type that may be a null, boolean, string,\n+number, array container, or a key/value dictionary container, nested to\n+an arbitrary depth.\n+\n+This class is aligned with the JSON standard, [RFC\n+7159](https://tools.ietf.org/html/rfc7159.html).\n+\n+## Installation\n+\n+This project is a standard GNU\n+[autotools](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)\n+project.  Build and install instructions are available in the `INSTALL`\n+file provided with GNU autotools.\n+\n+```\n+$ ./autogen.sh\n+$ ./configure\n+$ make\n+```\n+\n+## Design\n+\n+UniValue provides a single dynamic RAII C++ object class,\n+and minimizes template use (contra json_spirit).\n+"
      },
      {
        "sha": "8298332ac132cba1fdc61a1a48f2d666cfb5dbba",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [2])\n-m4_define([libunivalue_interface_age], [2])\n+m4_define([libunivalue_micro_version], [3])\n+m4_define([libunivalue_interface_age], [3])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.2],\n+AC_INIT([univalue], [1.0.3],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "4fd2223b302e7a2b1979654b5e900f3a4123ec3c",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -7,6 +7,7 @@\n #define __UNIVALUE_H__\n \n #include <stdint.h>\n+#include <string.h>\n \n #include <string>\n #include <vector>\n@@ -69,10 +70,11 @@ class UniValue {\n     size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    void getObjMap(std::map<std::string,UniValue>& kv) const;\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\n     const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+    const UniValue& operator[](size_t index) const;\n+    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n@@ -92,8 +94,25 @@ class UniValue {\n         std::string s(val_);\n         return push_back(s);\n     }\n+    bool push_back(uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(double val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n@@ -124,9 +143,10 @@ class UniValue {\n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n-    bool read(const char *raw);\n+    bool read(const char *raw, size_t len);\n+    bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n+        return read(rawStr.data(), rawStr.size());\n     }\n \n private:\n@@ -135,7 +155,7 @@ class UniValue {\n     std::vector<std::string> keys;\n     std::vector<UniValue> values;\n \n-    int findKey(const std::string& key) const;\n+    bool findKey(const std::string& key, size_t& retIdx) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n@@ -240,7 +260,7 @@ enum jtokentype {\n };\n \n extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n+                                    unsigned int& consumed, const char *raw, const char *end);\n extern const char *uvTypeName(UniValue::VType t);\n \n static inline bool jsonTokenIsValue(enum jtokentype jtt)"
      },
      {
        "sha": "d8ad7c4b90c6b1564d378c1e93b30f58ef37c889",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 153,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -4,75 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <errno.h>\n #include <iomanip>\n-#include <limits>\n #include <sstream>\n-#include <stdexcept>\n #include <stdlib.h>\n-#include <string.h>\n \n #include \"univalue.h\"\n \n-namespace \n-{\n-static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n-}\n-\n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-}\n-\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -104,7 +41,7 @@ static bool validNumStr(const string& s)\n {\n     string tokenVal;\n     unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n@@ -189,13 +126,22 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(val_);\n+}\n+\n bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n-    keys.push_back(key);\n-    values.push_back(val_);\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(key, val_);\n     return true;\n }\n \n@@ -204,30 +150,43 @@ bool UniValue::pushKVs(const UniValue& obj)\n     if (typ != VOBJ || obj.typ != VOBJ)\n         return false;\n \n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values.at(i));\n-    }\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(obj.keys[i], obj.values.at(i));\n \n     return true;\n }\n \n-int UniValue::findKey(const std::string& key) const\n+void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n+{\n+    if (typ != VOBJ)\n+        return;\n+\n+    kv.clear();\n+    for (size_t i = 0; i < keys.size(); i++)\n+        kv[keys[i]] = values[i];\n+}\n+\n+bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n {\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n+    for (size_t i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key) {\n+            retIdx = i;\n+            return true;\n+        }\n     }\n \n-    return -1;\n+    return false;\n }\n \n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n+    if (typ != VOBJ)\n+        return false;\n+\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n          it != t.end(); ++it) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n+        size_t idx = 0;\n+        if (!findKey(it->first, idx))\n             return false;\n \n         if (values.at(idx).getType() != it->second)\n@@ -242,14 +201,14 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (typ != VOBJ)\n         return NullUniValue;\n \n-    int index = findKey(key);\n-    if (index < 0)\n+    size_t index = 0;\n+    if (!findKey(key, index))\n         return NullUniValue;\n \n     return values.at(index);\n }\n \n-const UniValue& UniValue::operator[](unsigned int index) const\n+const UniValue& UniValue::operator[](size_t index) const\n {\n     if (typ != VOBJ && typ != VARR)\n         return NullUniValue;\n@@ -283,75 +242,3 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-const std::vector<std::string>& UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-const std::vector<UniValue>& UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-const std::string& UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "eabcf2dad1acc67451fb9fec9d01ef55ef6fe255",
        "filename": "src/univalue/lib/univalue_get.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_get.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdexcept>\n+#include <vector>\n+#include <limits>\n+#include <string>\n+\n+#include \"univalue.h\"\n+\n+namespace\n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+const std::vector<std::string>& UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+const std::vector<UniValue>& UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+const std::string& UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "ae75cb462a0188c48181af5e225bca883a1a241d",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -43,21 +43,21 @@ static const char *hatoui(const char *first, const char *last,\n }\n \n enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n+                            const char *raw, const char *end)\n {\n     tokenVal.clear();\n     consumed = 0;\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n+    while (raw < end && (json_isspace(*raw)))          // skip whitespace\n         raw++;\n \n-    switch (*raw) {\n-\n-    case 0:\n+    if (raw >= end)\n         return JTOK_NONE;\n \n+    switch (*raw) {\n+\n     case '{':\n         raw++;\n         consumed = (raw - rawStart);\n@@ -127,40 +127,40 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!json_isdigit(*raw)))\n+        if ((*first == '-') && (raw < end) && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n+        while (raw < end && json_isdigit(*raw)) {  // copy digits\n             numStr += *raw;\n             raw++;\n         }\n \n         // part 2: frac\n-        if (*raw == '.') {\n+        if (raw < end && *raw == '.') {\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n         }\n \n         // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n+        if (raw < end && (*raw == 'e' || *raw == 'E')) {\n             numStr += *raw;                   // copy E\n             raw++;\n \n-            if (*raw == '-' || *raw == '+') { // copy +/-\n+            if (raw < end && (*raw == '-' || *raw == '+')) { // copy +/-\n                 numStr += *raw;\n                 raw++;\n             }\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -177,13 +177,16 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n-        while (*raw) {\n-            if ((unsigned char)*raw < 0x20)\n+        while (true) {\n+            if (raw >= end || (unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n+                if (raw >= end)\n+                    return JTOK_ERR;\n+\n                 switch (*raw) {\n                 case '\"':  writer.push_back('\\\"'); break;\n                 case '\\\\': writer.push_back('\\\\'); break;\n@@ -196,7 +199,8 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n                 case 'u': {\n                     unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                    if (raw + 1 + 4 >= end ||\n+                        hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n                     writer.push_back_u(codepoint);\n@@ -246,7 +250,7 @@ enum expect_bits {\n #define setExpect(bit) (expectMask |= EXP_##bit)\n #define clearExpect(bit) (expectMask &= ~EXP_##bit)\n \n-bool UniValue::read(const char *raw)\n+bool UniValue::read(const char *raw, size_t size)\n {\n     clear();\n \n@@ -257,10 +261,11 @@ bool UniValue::read(const char *raw)\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n+    const char* end = raw + size;\n     do {\n         last_tok = tok;\n \n-        tok = getJsonToken(tokenVal, consumed, raw);\n+        tok = getJsonToken(tokenVal, consumed, raw, end);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n             return false;\n         raw += consumed;\n@@ -371,9 +376,6 @@ bool UniValue::read(const char *raw)\n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal;\n             switch (tok) {\n             case JTOK_KW_NULL:\n@@ -388,6 +390,11 @@ bool UniValue::read(const char *raw)\n             default: /* impossible */ break;\n             }\n \n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -396,10 +403,12 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal(VNUM, tokenVal);\n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -408,17 +417,18 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n             if (expect(OBJ_NAME)) {\n+                UniValue *top = stack.back();\n                 top->keys.push_back(tokenVal);\n                 clearExpect(OBJ_NAME);\n                 setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n+                if (!stack.size()) {\n+                    *this = tmpVal;\n+                    break;\n+                }\n+                UniValue *top = stack.back();\n                 top->values.push_back(tmpVal);\n             }\n \n@@ -432,7 +442,7 @@ bool UniValue::read(const char *raw)\n     } while (!stack.empty ());\n \n     /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n+    tok = getJsonToken(tokenVal, consumed, raw, end);\n     if (tok != JTOK_NONE)\n         return false;\n "
      },
      {
        "sha": "20d40430095841a460adef8d3c60a56746785b24",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -46,27 +46,27 @@ class JSONUTF8StringFilter\n         }\n     }\n     // Write codepoint directly, possibly collating surrogate pairs\n-    void push_back_u(unsigned int codepoint)\n+    void push_back_u(unsigned int codepoint_)\n     {\n         if (state) // Only accept full codepoints in open state\n             is_valid = false;\n-        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+        if (codepoint_ >= 0xD800 && codepoint_ < 0xDC00) { // First half of surrogate pair\n             if (surpair) // Two subsequent surrogate pair openers - fail\n                 is_valid = false;\n             else\n-                surpair = codepoint;\n-        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+                surpair = codepoint_;\n+        } else if (codepoint_ >= 0xDC00 && codepoint_ < 0xE000) { // Second half of surrogate pair\n             if (surpair) { // Open surrogate pair, expect second half\n                 // Compute code point from UTF-16 surrogate pair\n-                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint_ - 0xDC00));\n                 surpair = 0;\n             } else // Second half doesn't follow a first half - fail\n                 is_valid = false;\n         } else {\n             if (surpair) // First half of surrogate pair not followed by second - fail\n                 is_valid = false;\n             else\n-                append_codepoint(codepoint);\n+                append_codepoint(codepoint_);\n         }\n     }\n     // Check that we're in a state where the string can be ended\n@@ -96,22 +96,22 @@ class JSONUTF8StringFilter\n     //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n     unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n \n-    void append_codepoint(unsigned int codepoint)\n+    void append_codepoint(unsigned int codepoint_)\n     {\n-        if (codepoint <= 0x7f)\n-            str.push_back((char)codepoint);\n-        else if (codepoint <= 0x7FF) {\n-            str.push_back((char)(0xC0 | (codepoint >> 6)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0xFFFF) {\n-            str.push_back((char)(0xE0 | (codepoint >> 12)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0x1FFFFF) {\n-            str.push_back((char)(0xF0 | (codepoint >> 18)));\n-            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        if (codepoint_ <= 0x7f)\n+            str.push_back((char)codepoint_);\n+        else if (codepoint_ <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint_ >> 6)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint_ >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint_ >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n         }\n     }\n };"
      },
      {
        "sha": "cf27835991162b2a1e7c0053223f36ea26eaa589",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -79,8 +79,6 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n         }\n         if (prettyIndent)\n             s += \"\\n\";"
      },
      {
        "sha": "7b27cf0da2901bf1438b00efc277d19d7bd6643f",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1,4 +1,8 @@\n+\n+object\n unitester\n+test_json\n+no_nul\n \n *.trs\n *.log"
      },
      {
        "sha": "8feb01a6d0db2a3db29889a623b00ba51d51490b",
        "filename": "src/univalue/test/fail1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1 +1 @@\n-\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file\n+\"This is a string that never ends, yes it goes on and on, my friends."
      },
      {
        "sha": "9c7565adbddf645df5edfbdcd630c7a0f94aa2eb",
        "filename": "src/univalue/test/fail42.json",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail42.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail42.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail42.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc"
      },
      {
        "sha": "80edceddf1ef6c90cee1e9f979a0d31b1630bca4",
        "filename": "src/univalue/test/fail44.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail44.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail44.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail44.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+\"This file ends without a newline or close-quote.\n\\ No newline at end of file"
      },
      {
        "sha": "83d292200bf875126f7a25f1c5b032beec9ed6dd",
        "filename": "src/univalue/test/no_nul.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/no_nul.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/no_nul.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/no_nul.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,8 @@\n+#include \"univalue.h\"\n+\n+int main (int argc, char *argv[])\n+{\n+    char buf[] = \"___[1,2,3]___\";\n+    UniValue val;\n+    return val.read(buf + 3, 7) ? 0 : 1;\n+}"
      },
      {
        "sha": "02446292a1aa4a3a76a2f7a1ed7f1a22cc138a56",
        "filename": "src/univalue/test/object.cpp",
        "status": "added",
        "additions": 395,
        "deletions": 0,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,395 @@\n+// Copyright (c) 2014 BitPay Inc.\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <cassert>\n+#include <stdexcept>\n+#include <univalue.h>\n+\n+#define BOOST_FIXTURE_TEST_SUITE(a, b)\n+#define BOOST_AUTO_TEST_CASE(funcName) void funcName()\n+#define BOOST_AUTO_TEST_SUITE_END()\n+#define BOOST_CHECK(expr) assert(expr)\n+#define BOOST_CHECK_EQUAL(v1, v2) assert((v1) == (v2))\n+#define BOOST_CHECK_THROW(stmt, excMatch) { \\\n+        try { \\\n+            (stmt); \\\n+        } catch (excMatch & e) { \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+#define BOOST_CHECK_NO_THROW(stmt) { \\\n+        try { \\\n+            (stmt); \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    std::string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    std::string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    std::vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK(arr.push_back((uint64_t) 400ULL));\n+    BOOST_CHECK(arr.push_back((int64_t) -400LL));\n+    BOOST_CHECK(arr.push_back((int) -401));\n+    BOOST_CHECK(arr.push_back(-40.1));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+    BOOST_CHECK_EQUAL(arr[5].getValStr(), \"400\");\n+    BOOST_CHECK_EQUAL(arr[6].getValStr(), \"-400\");\n+    BOOST_CHECK_EQUAL(arr[7].getValStr(), \"-401\");\n+    BOOST_CHECK_EQUAL(arr[8].getValStr(), \"-40.1\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK(arr.empty());\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    std::string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    std::map<std::string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK(obj.empty());\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n+    BOOST_CHECK_EQUAL(obj.getType(), UniValue::VNULL);\n+\n+    BOOST_CHECK_EQUAL(obj.setObject(), true);\n+    UniValue uv;\n+    uv.setInt(42);\n+    obj.__pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"42\");\n+\n+    uv.setInt(43);\n+    obj.pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"43\");\n+\n+    obj.pushKV(\"name\", \"foo bar\");\n+\n+    std::map<std::string,UniValue> kv;\n+    obj.getObjMap(kv);\n+    BOOST_CHECK_EQUAL(kv[\"age\"].getValStr(), \"43\");\n+    BOOST_CHECK_EQUAL(kv[\"name\"].getValStr(), \"foo bar\");\n+\n+}\n+\n+static const char *json1 =\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    std::string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    std::string correctValue(\"str\");\n+    correctValue.push_back('\\0');\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+int main (int argc, char *argv[])\n+{\n+    univalue_constructor();\n+    univalue_typecheck();\n+    univalue_set();\n+    univalue_array();\n+    univalue_object();\n+    univalue_readwrite();\n+    return 0;\n+}\n+"
      },
      {
        "sha": "7182dc2f9b8e47dbcbbaa2e18a47a44f424d491f",
        "filename": "src/univalue/test/round3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round3.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+\"abcdefghijklmnopqrstuvwxyz\""
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "src/univalue/test/round4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round4.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "27ba77ddaf61532f217964734769a42cdabc17dc",
        "filename": "src/univalue/test/round5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round5.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+true"
      },
      {
        "sha": "c508d5366f70bba37fcc09d128b6537c4adb2c79",
        "filename": "src/univalue/test/round6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round6.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+false"
      },
      {
        "sha": "19765bd501b636fce433540d9e6735f51d66151d",
        "filename": "src/univalue/test/round7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round7.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+null"
      },
      {
        "sha": "2943bae2b15e928e345af49b5802e7241058a1b5",
        "filename": "src/univalue/test/test_json.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/test_json.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/test_json.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/test_json.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,24 @@\n+// Test program that can be called by the JSON test suite at\n+// https://github.com/nst/JSONTestSuite.\n+//\n+// It reads JSON input from stdin and exits with code 0 if it can be parsed\n+// successfully. It also pretty prints the parsed JSON value to stdout.\n+\n+#include <iostream>\n+#include <string>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+int main (int argc, char *argv[])\n+{\n+    UniValue val;\n+    if (val.read(string(istreambuf_iterator<char>(cin),\n+                        istreambuf_iterator<char>()))) {\n+        cout << val.write(1 /* prettyIndent */, 4 /* indentLevel */) << endl;\n+        return 0;\n+    } else {\n+        cerr << \"JSON Parse Error.\" << endl;\n+        return 1;\n+    }\n+}"
      },
      {
        "sha": "2c37794a4bdb8fb77fa02d5cbb90291033ef2af4",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -113,6 +113,8 @@ static const char *filenames[] = {\n         \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n         \"fail40.json\",               // invalid unicode: broken UTF-8\n         \"fail41.json\",               // invalid unicode: unfinished UTF-8\n+        \"fail42.json\",               // valid json with garbage following a nul byte\n+        \"fail44.json\",               // unterminated string\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -125,6 +127,11 @@ static const char *filenames[] = {\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n         \"round2.json\",              // unicode\n+        \"round3.json\",              // bare string\n+        \"round4.json\",              // bare number\n+        \"round5.json\",              // bare true\n+        \"round6.json\",              // bare false\n+        \"round7.json\",              // bare null\n };\n \n // Test \\u handling"
      },
      {
        "sha": "de647f98b6cf0727111c11609d2dce25a40905ef",
        "filename": "test/util/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delin1-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -200,7 +200,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "067ffe74e791d2d58fd43eeed88cb94cefb4b1d3",
        "filename": "test/util/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delout1-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,"
      },
      {
        "sha": "af7903d1dd915fb05b5a17aeac25a98ffc708d7a",
        "filename": "test/util/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-locktime317000-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -209,7 +209,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "83a86649e0dd43814b46bf03cf86ed1ddc50732f",
        "filename": "test/util/data/txcreate1.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreate1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"bf829c6bcf84579331337659d31f89dfd138f7f7785802d5501c92333145ca7c\",\n             \"vout\": 18,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc\",\n             \"vout\": 1,\n@@ -47,7 +47,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "15a4246ae5717e117c12c8c3c220ab842a517562",
        "filename": "test/util/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "cb93c27971fd74cb06dc2d220b34835fdf9c31cf",
        "filename": "test/util/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata2.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "dea48ba3731df983da0690cf8b5e5d0d893fae0b",
        "filename": "test/util/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata_seq1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967293\n-        }, \n+        },\n         {\n             \"txid\": \"5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f\",\n             \"vout\": 0,"
      },
      {
        "sha": "72e20c869123be493927817e27d492c8f75cf5b5",
        "filename": "test/util/data/txcreatemultisig1.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatemultisig1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatemultisig1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -17,8 +17,8 @@\n                 \"reqSigs\": 2,\n                 \"type\": \"multisig\",\n                 \"addresses\": [\n-                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\", \n-                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\", \n+                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\",\n+                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\",\n                     \"14LuavcBbXZYJ6Tsz3cAUQj9SuQoL2xCQX\"\n                 ]\n             }"
      }
    ]
  }
]