[
  {
    "sha": "f947d91c3df2f9c1b6c3b5375d261f15f243b97c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTQ3ZDkxYzNkZjJmOWMxYjZjM2I1Mzc1ZDI2MWYxNWYyNDNiOTdj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-03-12T05:58:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-12-03T03:24:00Z"
      },
      "message": "RPC/Net: Allow changing the connection_type for addnode onetry",
      "tree": {
        "sha": "2faf6120dc4f8d2914d5caf462e5f706c14dc235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2faf6120dc4f8d2914d5caf462e5f706c14dc235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f947d91c3df2f9c1b6c3b5375d261f15f243b97c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f947d91c3df2f9c1b6c3b5375d261f15f243b97c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f947d91c3df2f9c1b6c3b5375d261f15f243b97c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f947d91c3df2f9c1b6c3b5375d261f15f243b97c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "831675c8dccfa6525ffe751da3cc60709c380953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/831675c8dccfa6525ffe751da3cc60709c380953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/831675c8dccfa6525ffe751da3cc60709c380953"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 37,
      "deletions": 7
    },
    "files": [
      {
        "sha": "58000914fba7b4af5209ecf1132d79ca9cd9c48b",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f947d91c3df2f9c1b6c3b5375d261f15f243b97c/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f947d91c3df2f9c1b6c3b5375d261f15f243b97c/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f947d91c3df2f9c1b6c3b5375d261f15f243b97c",
        "patch": "@@ -33,11 +33,31 @@ const std::vector<std::string> CONNECTION_TYPE_DOC{\n         \"outbound-full-relay (default automatic connections)\",\n         \"block-relay-only (does not relay transactions or addresses)\",\n         \"inbound (initiated by the peer)\",\n-        \"manual (added via addnode RPC or -addnode/-connect configuration options)\",\n+        \"manual (added via addnode RPC or -addnode/-connect configuration options; protected from DoS disconnection and not required to be full nodes as other outbound peers are)\",\n         \"addr-fetch (short-lived automatic connection for soliciting addresses)\",\n         \"feeler (short-lived automatic connection for testing addresses)\"\n };\n \n+ConnectionType ConnectionTypeFromValue(const UniValue& uv)\n+{\n+    std::string s = uv.get_str();\n+    if (s == \"inbound\") {\n+        return ConnectionType::INBOUND;\n+    } else if (s == \"manual\") {\n+        return ConnectionType::MANUAL;\n+    } else if (s == \"feeler\") {\n+        return ConnectionType::FEELER;\n+    } else if (s == \"outbound-full-relay\") {\n+        return ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (s == \"block-relay-only\") {\n+        return ConnectionType::BLOCK_RELAY;\n+    } else if (s == \"addr-fetch\") {\n+        return ConnectionType::ADDR_FETCH;\n+    }\n+\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown connection type \" + s);\n+}\n+\n static RPCHelpMan getconnectioncount()\n {\n     return RPCHelpMan{\"getconnectioncount\",\n@@ -271,12 +291,11 @@ static RPCHelpMan addnode()\n {\n     return RPCHelpMan{\"addnode\",\n                 \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n-                \"Or try a connection to a node once.\\n\"\n-                \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n-                \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n+                \"Or try a connection to a node once.\\n\",\n                 {\n                     {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                    {\"connection_type\", RPCArg::Type::BOOL, /* default */ \"manual\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \"\\nOnly supported for command \\\"onetry\\\" for now.\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -288,7 +307,7 @@ static RPCHelpMan addnode()\n     std::string strCommand;\n     if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() != 2 ||\n+    if (\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n             self.ToString());\n@@ -298,16 +317,27 @@ static RPCHelpMan addnode()\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::string strNode = request.params[0].get_str();\n+    ConnectionType connection_type = ConnectionType::MANUAL;\n+    if (!request.params[2].isNull()) {\n+        if (strCommand == \"remove\") {\n+            throw std::runtime_error(self.ToString());\n+        }\n+        connection_type = ConnectionTypeFromValue(request.params[2]);\n+    }\n \n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), ConnectionType::MANUAL);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), connection_type);\n         return NullUniValue;\n     }\n \n     if (strCommand == \"add\")\n     {\n+        if (connection_type != ConnectionType::MANUAL) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"connection_type != manual is only supported for the \\\"onetry\\\" command for now\");\n+        }\n+\n         if(!node.connman->AddNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Node already added\");\n     }\n@@ -896,7 +926,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"getconnectioncount\",     &getconnectioncount,     {} },\n     { \"network\",            \"ping\",                   &ping,                   {} },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            {} },\n-    { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\"} },\n+    { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\",\"connection_type\"} },\n     { \"network\",            \"disconnectnode\",         &disconnectnode,         {\"address\", \"nodeid\"} },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       {\"node\"} },\n     { \"network\",            \"getnettotals\",           &getnettotals,           {} },"
      }
    ]
  }
]