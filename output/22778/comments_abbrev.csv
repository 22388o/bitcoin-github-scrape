DrahtBot,2021-08-23 13:25:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23604](https://github.com/bitcoin/bitcoin/pull/23604) (Use Sock in CNode by vasild)\n* [#23575](https://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-903765978,903765978,
jnewbery,2021-08-27 08:37:56,"I've pushed a new branch that simplifies the implementation a bit. I'd previously wanted to amalgamate the various mutexes and atomics in `Peer::TxRelay` as part of this PR, but it's easier to wait until #21527 to do that, otherwise there are all kinds of lock ordering/inversion issues to work around.",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-907031918,907031918,
jnewbery,2021-08-27 10:00:21,rebased,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-907082695,907082695,
naumenkogs,2021-09-01 16:04:03,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-910429435,910429435,
jnewbery,2021-09-24 11:13:26,Rebased on the latest #21160,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-926544378,926544378,
vasild,2021-09-30 07:49:24,"Some rough estimates on how much this will save:\n\n```\n(gdb) p sizeof(CNode::TxRelay)\n$1 = 152\n```\n\nAssuming 50 incoming connections and 20% of them being block-only, that makes 10 peers will benefit from this. 152 bytes each, so 1520 bytes will be saved.",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-930958812,930958812,
jnewbery,2021-09-30 08:11:50,"> Some rough estimates on how much this will save...\n\n@vasild This seems completely wrong. `TxRelay` contains a CRollingBloomFilter parametrized by `{50000, 0.000001}`. According to this code comment:\n\nhttps://github.com/bitcoin/bitcoin/blob/419afa93419e6840f78cb94b4a39d826eb10e139/src/bloom.h#L94-L98\n\nthe storage requirement for just that rolling bloom filter is ~1.8 * 50,000 * 6 = 54",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-930996031,930996031,
vasild,2021-09-30 09:56:48,"Well, I said ""rough"", but did not mean _that_ rough. Somehow I wrongly assumed that none of the constructors allocate extra memory from the heap :disappointed:. Now I checked that `CRollingBloomFilter{50000, 0.000001}` creates and fills a vector of 67'396 `uint64_t` elements, or 539'168 bytes. For 10 peers that would save ~5MB.\n\nI wonder if it would make sense to delay the creation of `CRollin",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-931172782,931172782,
MarcoFalke,2021-10-01 10:24:19,"> @vasild  e.g. create it in the first insert, rather than in the constructor\n\nSee discussion at https://github.com/bitcoin/bitcoin/pull/22778#discussion_r693960652",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-932108560,932108560,
jnewbery,2021-10-07 16:25:09,Thanks for the reviews @naumenkogs and @vasild. I believe I've addressed all of your review comments.,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-937954634,937954634,
naumenkogs,2021-10-08 08:30:15,ACK 7ef58ab5ca3e0652442eaf56c5c91ce192df324a,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-938450206,938450206,
vasild,2021-10-22 13:27:17,"This PR includes #21160. The extra commits that this PR includes, on top of #21160, look good to me. I have some [reservations for #21160](https://github.com/bitcoin/bitcoin/pull/21160#pullrequestreview-733743042), so I skip ACKing this one too.",https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-949631654,949631654,
jnewbery,2021-10-22 13:29:17,Rebased on master,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-949633314,949633314,
jnewbery,2021-10-22 16:51:34,rebased,https://github.com/bitcoin/bitcoin/pull/22778#issuecomment-949802803,949802803,
MarcoFalke,2021-08-23 13:15:15,"in 238ce0b02b1f7ac78c8c0466cef33628c6d49359:\n\nIf it is turned on later, we could keep it a nullptr until then and only initialize if and when we receive a `filter*` message?",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r693960652,693960652,src/net_processing.cpp
jnewbery,2021-08-23 14:02:54,"Perhaps, but I think it's better to allocate resources for the worst-case scenario up front, rather than try to reduce resource usage and later find out that you need to allocate a new structure.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r694001534,694001534,src/net_processing.cpp
naumenkogs,2021-09-30 09:53:26,"At first I was thinking we could leave a TODO here for switching to unordered_set, but when I'm looking how it's used, it seems we can just leave it like this, right?",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r719247282,719247282,src/net_processing.cpp
naumenkogs,2021-09-30 09:57:08,"This also could mention BIP133, or perhaps be flipped with the next variable referencing it :)",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r719250125,719250125,src/net_processing.cpp
naumenkogs,2021-09-30 09:58:41,"I think this comment is not very useful currently w.r.t. why we would update feefilter at all, and why it has to be scheduled.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r719251357,719251357,src/net_processing.cpp
naumenkogs,2021-09-30 10:09:56,">rather than try to reduce resource usage and later find out that you need to allocate a new structure\n\nWhat exactly is difficult about this?",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r719259735,719259735,src/net_processing.cpp
naumenkogs,2021-09-30 10:13:45,"Inverted this could be:\n`const bool enable_tx_relay = !pfrom.IsBlockOnlyConn() && (fRelay || (pfrom.GetLocalServices() & NODE_BLOOM))`.\n\nDon't you think it's better?\n\n",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r719262565,719262565,src/net_processing.cpp
MarcoFalke,2021-10-01 10:27:55,"> What exactly is difficult about this?\n\nI think I agree with John that there is little benefit (or even a risk) when giving remote peers the option to force you to allocate MBs of memory by sending a single msg, instead of allocating the memory on startup/creation of the connection.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r720133129,720133129,src/net_processing.cpp
vasild,2021-10-01 11:29:34,"Hmm, allocating upfront is like giving a remote peer the option and he always exercises it immediately after connecting, no?\n\nIf there is a chance that the peer would not exercise the option (not send `filter*` message) and we never allocate the MBs, that is to be preferred?",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r720168415,720168415,src/net_processing.cpp
MarcoFalke,2021-10-01 11:35:31,"Yes, and I think this is preferable because there are less (late) surprises. Neither on the live network, nor when developing. For example, `massif` will display the real usage from the start. Or, imagine someone under-estimating the resource usage and thus increasing the maxconnections count, then running into OOM later on.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r720171634,720171634,src/net_processing.cpp
vasild,2021-10-01 11:58:48,The counter scenario is somebody running into OOM because MBs of memory were allocated needlessly (allocated but never used because the peer(s) never sent `filter*`).,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r720184968,720184968,src/net_processing.cpp
MarcoFalke,2021-10-01 12:24:03,"I think if you want to reduce memory usage, you should disable bip37, not enable it with the hope that no one (or only a small fraction of your incoming peers) will use it.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r720200693,720200693,src/net_processing.cpp
vasild,2021-10-07 10:13:50,"If this can be executed concurrently by two threads, then the allocation may happen twice - thread1:lock,alloc,unlock, thread2:lock,alloc,unlock.\n\nIf this cannot be executed concurrently then the mutex is not needed. I think this is the case because message processing is single threaded and we would have quit earlier if we received a second VERSION message.\n\nIf, for some reason, the mutex ",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724043654,724043654,src/net_processing.cpp
jnewbery,2021-10-07 13:38:09,I think that the size of this set is typically small enough that the complexity of insertion (lg(n) -vs- constant for an unordered_set) is not important.,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724189368,724189368,src/net_processing.cpp
jnewbery,2021-10-07 13:39:38,Done!,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724190716,724190716,src/net_processing.cpp
jnewbery,2021-10-07 13:40:47,I think that kind of comment would be more at home on or in the `MaybeSendFeefilter()` function.,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724191876,724191876,src/net_processing.cpp
jnewbery,2021-10-07 13:44:25,"I actually think it's clearer this way, since it matches the english language comment above, and enabling tx relay is the default. I tried inverting the boolean, but it didn't seem any better to me.\n\nThat said, if other contributors also think it'd be clearer to invert the boolean logic here, I'm happy to switch it.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724195101,724195101,src/net_processing.cpp
vasild,2021-10-07 13:58:03,I think `if (enabled)` is clearer than `if (!disabled)`. @naumenkogs's variant has less `!`. Can the English comment can be reworded: we only initialize this if not block-only and ...?,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724208016,724208016,src/net_processing.cpp
jnewbery,2021-10-07 14:03:00,"It's impossible for the `if (msg_type == NetMsgType::VERSION) {` block of code to be executed  more than once, so it would be logically impossible for the `m_tx_relay` member to be allocated twice. However, I've updated the code to check for nullness first so it's immediately obvious from looking at this code that it can't be allocated twice.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724212963,724212963,src/net_processing.cpp
jnewbery,2021-10-07 16:22:26,Done!,https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724339822,724339822,src/net_processing.cpp
jnewbery,2021-10-07 16:24:26,"I agree with @MarcoFalke that if memory consumption is a concern, then you shouldn't enable BIP37 bloom filters for public peers.",https://github.com/bitcoin/bitcoin/pull/22778#discussion_r724341411,724341411,src/net_processing.cpp
