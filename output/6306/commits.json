[
  {
    "sha": "66a7146ac231aabbbdd4c9c8f717786501971dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmE3MTQ2YWMyMzFhYWJiYmRkNGM5YzhmNzE3Nzg2NTAxOTcxZGFl",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-06-19T06:06:34Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-07-29T01:04:25Z"
      },
      "message": "Prevent peer flooding inv request queue (redux)\n\nThis is a lighter implementation of dcd7ef782bd8105c3427f932206e33fa07ddeded\nfrom @kazcw.  The effect is the same.  Here is the original description:\n\nmapAlreadyAskedFor does not keep track of which peer has a request queued for a\nparticular tx. As a result, a peer can blind a node to a tx indefinitely by\nsending many invs for the same tx, and then never replying to getdatas for it.\nEach inv received will be placed 2 minutes farther back in mapAlreadyAskedFor,\nso a short message containing 10 invs would render that tx unavailable for 20\nminutes.\n\nThis is fixed by disallowing a peer from having more than one entry for a\nparticular inv in mapAlreadyAskedFor at a time.",
      "tree": {
        "sha": "91d69f213ce635ade899788fb046b5258305ac0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91d69f213ce635ade899788fb046b5258305ac0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66a7146ac231aabbbdd4c9c8f717786501971dae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66a7146ac231aabbbdd4c9c8f717786501971dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66a7146ac231aabbbdd4c9c8f717786501971dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66a7146ac231aabbbdd4c9c8f717786501971dae/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddaba7b5692288087a926da5733e86b47274e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddaba7b5692288087a926da5733e86b47274e4e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b4be8fdc99033032cf92a2b44bfb4e9145908edf",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66a7146ac231aabbbdd4c9c8f717786501971dae/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66a7146ac231aabbbdd4c9c8f717786501971dae/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=66a7146ac231aabbbdd4c9c8f717786501971dae",
        "patch": "@@ -105,18 +105,22 @@ def setup_network(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         test_node = TestNode()   # connects to node0 (not whitelisted)\n+        test_node_aux = TestNode()   # connects to node0 (clean remote inventory for test 6)\n         white_node = TestNode()  # connects to node1 (whitelisted)\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node_aux))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n+        test_node_aux.add_connection(connections[1])\n+        white_node.add_connection(connections[2])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n+        test_node_aux.wait_for_verack()\n         white_node.wait_for_verack()\n \n         # 1. Have both nodes mine a block (leave IBD)\n@@ -201,12 +205,12 @@ def run_test(self):\n         # triggers a getdata on block 2 (it should if block 2 is missing).\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n-            test_node.last_getdata = None\n-            test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n+            test_node_aux.last_getdata = None\n+            test_node_aux.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n \n         time.sleep(1)\n         with mininode_lock:\n-            getdata = test_node.last_getdata\n+            getdata = test_node_aux.last_getdata\n \n         # Check that the getdata is for the right block\n         assert_equal(len(getdata.inv), 1)"
      },
      {
        "sha": "dce560f97643521662a0be89f1854fa6553d30c6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66a7146ac231aabbbdd4c9c8f717786501971dae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66a7146ac231aabbbdd4c9c8f717786501971dae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=66a7146ac231aabbbdd4c9c8f717786501971dae",
        "patch": "@@ -4049,7 +4049,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             const CInv &inv = vInv[nInv];\n \n             boost::this_thread::interruption_point();\n-            pfrom->AddInventoryKnown(inv);\n+            if (!pfrom->AddInventoryKnown(inv))\n+                continue;\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);"
      },
      {
        "sha": "042d78d2df6f73c40f1983975d6384b3441eee92",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66a7146ac231aabbbdd4c9c8f717786501971dae/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66a7146ac231aabbbdd4c9c8f717786501971dae/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=66a7146ac231aabbbdd4c9c8f717786501971dae",
        "patch": "@@ -469,11 +469,11 @@ class CNode\n     }\n \n \n-    void AddInventoryKnown(const CInv& inv)\n+    bool AddInventoryKnown(const CInv& inv)\n     {\n         {\n             LOCK(cs_inventory);\n-            setInventoryKnown.insert(inv);\n+            return setInventoryKnown.insert(inv).second;\n         }\n     }\n "
      }
    ]
  }
]