[
  {
    "sha": "506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDZiNzAwZGNiNWRkNWE3YzFkOGZmYTdjNzcwNDNhOTNlNGUxMGRl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-29T15:51:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T00:54:19Z"
      },
      "message": "Util: Remove redundant calls to gArgs.IsArgSet()\n\nReturn empty std::vector<std::string> with ArgsManager::GetArgs if\nnothing is set for that string",
      "tree": {
        "sha": "7f46aa37dccf2c77cb897c00afbede86e40a7f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f46aa37dccf2c77cb897c00afbede86e40a7f42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZUazEAAoJEKT10UHAGgOHFU0QAIacv3M7ddQMKd+EfTXpkfbU\nyTeg04tbh/5UlDlG/QSf5wRIi9P990AEAj89xOEVOShbT/x+018srUzCg8v9X6Wk\nWI5/8dGKggigFbmOkwWZJqCZSxck2vBNR6GkP9q13knRnIMqx056/P2bRSzvGQg6\nsZ4J9063/pAoCfwJ7eehaBWkWVKhGArf0O5ZVtmhJ8tOnprSbmTLpBVgTBpjtoDO\nmt4+55AmaQTiGRDHlTe2d9N7Rad/HNO7hDkNj9OHibd1Bq9hDhq5JhTXUrPELV8X\nPph0ogGvx7VmOvivNM8MS5sLwqwTKGqGK2eHXkUlYyt5IMdX9ZMJpoxC78+LWyeg\nQlDGwVo0vPSyXj1I4x5Ml1VVP+eYAtqPbG/SSBNrZjjv7YAQ+NFAj5PXMKkq/2S2\nur5truLRbKpx4wdjeo3qE7zkQ34Aa4fQ8D0oOYhRgdVdLkPBfhUIVezAQ2fH7kF4\n0FEu1JIu6Yktp3txsmQUhb+Q5a0whbW3CMRfcENwKrGzKLNncsOIbT7mBJyeKOzw\nuv1h9AKqndZrVkA2jrZp1kAoV+BrunIxZtLJ5r6WoUHlvvgBLkHo+UHbEdnPsxyT\n0dDy6KX5JM6IFcQKUMSC8CmeV/ZwYN3oTV5jeKQErcTicxig4OhLuU01gDpTkhyp\nsWnx1pVQh6ZizN8nvjcO\n=1CAJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f46aa37dccf2c77cb897c00afbede86e40a7f42\nparent 234ffc677ee58591b139695bf92bbd6f504ee91a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490802701 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498524859 +0200\n\nUtil: Remove redundant calls to gArgs.IsArgSet()\n\nReturn empty std::vector<std::string> with ArgsManager::GetArgs if\nnothing is set for that string\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 16,
      "deletions": 37
    },
    "files": [
      {
        "sha": "3f030fce56fb737300fca8ee300c8e80f6e26e38",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -92,10 +92,8 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (gArgs.IsArgSet(\"-rpcauth\")) {\n+    for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        for (std::string strRPCAuth : gArgs.GetArgs(\"-rpcauth\"))\n-        {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n             if (vFields.size() != 3) {\n@@ -121,7 +119,6 @@ static bool multiUserAuthorized(std::string strUserPass)\n             if (TimingResistantEqual(strHashFromPass, strHash)) {\n                 return true;\n             }\n-        }\n     }\n     return false;\n }"
      },
      {
        "sha": "e7ece42b0d624378f998b9d50ac2ed7f7cd62fab",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -196,8 +196,7 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (gArgs.IsArgSet(\"-rpcallowip\")) {\n-        for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n+    for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n             if (!subnet.IsValid()) {\n@@ -207,7 +206,6 @@ static bool InitHTTPAllowList()\n                 return false;\n             }\n             rpc_allow_subnets.push_back(subnet);\n-        }\n     }\n     std::string strAllowed;\n     for (const CSubNet& subnet : rpc_allow_subnets)"
      },
      {
        "sha": "dfa07eaf49b0a7ab072a5c10bbc68157f821f23a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 26,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -880,9 +880,7 @@ bool AppInitParameterInteraction()\n     }\n \n     // -bind and -whitebind can't be set when not listening\n-    size_t nUserBind =\n-        (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n-        (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0);\n+    size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n     }\n@@ -920,15 +918,13 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (gArgs.IsArgSet(\"-debugexclude\")) {\n-        for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n+    for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n             uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n                 continue;\n             }\n             logCategories &= ~flag;\n-        }\n     }\n \n     // Check for -debugnet\n@@ -1238,13 +1234,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    if (gArgs.IsArgSet(\"-uacomment\")) {\n-        for (std::string cmt : gArgs.GetArgs(\"-uacomment\"))\n-        {\n+    for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n             uacomments.push_back(cmt);\n-        }\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n@@ -1317,14 +1310,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-    if (gArgs.IsArgSet(\"-externalip\")) {\n-        for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n+    for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n             else\n                 return InitError(ResolveErrMsg(\"externalip\", strAddr));\n-        }\n     }\n \n #if ENABLE_ZMQ\n@@ -1553,10 +1544,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n-    if (gArgs.IsArgSet(\"-loadblock\"))\n-    {\n-        for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\"))\n-            vImportFiles.push_back(strFile);\n+    for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n+        vImportFiles.push_back(strFile);\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n@@ -1598,17 +1587,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n-    if (gArgs.IsArgSet(\"-bind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n+    for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n             CService addrBind;\n             if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n                 return InitError(ResolveErrMsg(\"bind\", strBind));\n             }\n             connOptions.vBinds.push_back(addrBind);\n-        }\n     }\n-    if (gArgs.IsArgSet(\"-whitebind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n+    for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n             CService addrBind;\n             if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n                 return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1617,17 +1603,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n             }\n             connOptions.vWhiteBinds.push_back(addrBind);\n-        }\n     }\n \n-    if (gArgs.IsArgSet(\"-whitelist\")) {\n-        for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n+    for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n                 return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n             connOptions.vWhitelistedRange.push_back(subnet);\n-        }\n     }\n \n     if (gArgs.IsArgSet(\"-seednode\")) {"
      },
      {
        "sha": "301cf58b8705e4bda0de4f965be097cd7cfeb0d2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -1677,7 +1677,7 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0)\n+    if (gArgs.IsArgSet(\"-connect\"))\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n@@ -1903,8 +1903,7 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (gArgs.IsArgSet(\"-addnode\"))\n-            vAddedNodes = gArgs.GetArgs(\"-addnode\");\n+        vAddedNodes = gArgs.GetArgs(\"-addnode\");\n     }\n \n     while (true)"
      },
      {
        "sha": "27ccd40b7b36dd4e3a11b679abe4201179adfac5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -420,7 +420,9 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)\n {\n     LOCK(cs_args);\n-    return mapMultiArgs.at(strArg);\n+    if (IsArgSet(strArg))\n+        return mapMultiArgs.at(strArg);\n+    return {};\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg)"
      }
    ]
  },
  {
    "sha": "ed866ab923c01d9da2ddd067144e74978383e304",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDg2NmFiOTIzYzAxZDlkYTJkZGQwNjcxNDRlNzQ5NzgzODNlMzA0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T01:10:39Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T05:39:52Z"
      },
      "message": "Indentation after 'Remove redundant calls to gArgs.IsArgSet()'",
      "tree": {
        "sha": "880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed866ab923c01d9da2ddd067144e74978383e304",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZUe+oAAoJEKT10UHAGgOH0eIP/iZu+bQgj0trxvGmkQvp/82C\nGHyDf/Daa83m5R0f06X2g8LTyK+E090KEoP68cWCM53mM77OWhVuwBHL4AjnR0o0\nShj85jL3YbTq62C0gP6ii920E8aF6WEVO8Jbhb6DPV/HLj0B/E6rJ9nRnRphC/LN\nPqEu58MtFDdk/0mnbH1quMGTMzR6cdtE5cCO2f7DbcE+LNq82vKnPoq9H1Q89wOt\nTifT8aQsJndcnJViLfTi6Id93Z4YlKCd7XgnyhqOHHkjhxNe76ShR1sMwSFG5IZi\n7kP8j489MWhS0fle1Hv64N9/2k6qPV6i82YY1BIAKSmNVxU1P5HsQUkYJJccxkSD\nbbYIpwW5bxGvktYUHfQLT9M3jaNfp1DLhs09VNz9Lk85I1gloroAcXz+DA4+wxEb\nh09lNuXr79J5DQtjw6+GXR+eXRe0BzbGetFvAS6LP6O4qDJFlSjvzMwL1dX0OBvI\nIGqBfVMq98uSZ1pSFpSFh0qDPpsEf/d3Sdgm6tUI7n2HGrRlO5+GgicEznDRUZmM\n3Y2Xvg1Mbj9wMXiuZlW3hQf6MrnjF6lz+VSz/RkmCl2W4FoCt4qEr3/5KJR2UQp9\nvwCO87MyeK5q9ICcyspis0fgXbCyVyujW108aPw4OljndImnGeRFv9EaIVqiiz0u\njAhIRiuIzrIdTXMeD10N\n=9xBs\n-----END PGP SIGNATURE-----",
        "payload": "tree 880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577\nparent 506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498525839 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498541992 +0200\n\nIndentation after 'Remove redundant calls to gArgs.IsArgSet()'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed866ab923c01d9da2ddd067144e74978383e304",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed866ab923c01d9da2ddd067144e74978383e304",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed866ab923c01d9da2ddd067144e74978383e304/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 66,
      "deletions": 66
    },
    "files": [
      {
        "sha": "497e565b1efa32b433364a43d3683a384eb8896f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -94,31 +94,31 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-            std::vector<std::string> vFields;\n-            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n-            if (vFields.size() != 3) {\n-                //Incorrect formatting in config file\n-                continue;\n-            }\n-\n-            std::string strName = vFields[0];\n-            if (!TimingResistantEqual(strName, strUser)) {\n-                continue;\n-            }\n-\n-            std::string strSalt = vFields[1];\n-            std::string strHash = vFields[2];\n-\n-            static const unsigned int KEY_SIZE = 32;\n-            unsigned char out[KEY_SIZE];\n-\n-            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n-            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n-            std::string strHashFromPass = HexStr(hexvec);\n-\n-            if (TimingResistantEqual(strHashFromPass, strHash)) {\n-                return true;\n-            }\n+        std::vector<std::string> vFields;\n+        boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+        if (vFields.size() != 3) {\n+            //Incorrect formatting in config file\n+            continue;\n+        }\n+\n+        std::string strName = vFields[0];\n+        if (!TimingResistantEqual(strName, strUser)) {\n+            continue;\n+        }\n+\n+        std::string strSalt = vFields[1];\n+        std::string strHash = vFields[2];\n+\n+        static const unsigned int KEY_SIZE = 32;\n+        unsigned char out[KEY_SIZE];\n+\n+        CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+        std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+        std::string strHashFromPass = HexStr(hexvec);\n+\n+        if (TimingResistantEqual(strHashFromPass, strHash)) {\n+            return true;\n+        }\n     }\n     return false;\n }"
      },
      {
        "sha": "8841a4e9e72422599dcf84b90513912b9f31f070",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -197,15 +197,15 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n-            CSubNet subnet;\n-            LookupSubNet(strAllow.c_str(), subnet);\n-            if (!subnet.IsValid()) {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                return false;\n-            }\n-            rpc_allow_subnets.push_back(subnet);\n+        CSubNet subnet;\n+        LookupSubNet(strAllow.c_str(), subnet);\n+        if (!subnet.IsValid()) {\n+            uiInterface.ThreadSafeMessageBox(\n+                strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+        rpc_allow_subnets.push_back(subnet);\n     }\n     std::string strAllowed;\n     for (const CSubNet& subnet : rpc_allow_subnets)"
      },
      {
        "sha": "57232c7df328ca5496ca2cb861dc4b3238855122",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -919,12 +919,12 @@ bool AppInitParameterInteraction()\n \n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-            uint32_t flag = 0;\n-            if (!GetLogCategory(&flag, &cat)) {\n-                InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-                continue;\n-            }\n-            logCategories &= ~flag;\n+        uint32_t flag = 0;\n+        if (!GetLogCategory(&flag, &cat)) {\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+            continue;\n+        }\n+        logCategories &= ~flag;\n     }\n \n     // Check for -debugnet\n@@ -1235,9 +1235,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n-            if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-                return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n-            uacomments.push_back(cmt);\n+        if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+        uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n@@ -1311,11 +1311,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n-            CService addrLocal;\n-            if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n-                AddLocal(addrLocal, LOCAL_MANUAL);\n-            else\n-                return InitError(ResolveErrMsg(\"externalip\", strAddr));\n+        CService addrLocal;\n+        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+            AddLocal(addrLocal, LOCAL_MANUAL);\n+        else\n+            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n #if ENABLE_ZMQ\n@@ -1588,29 +1588,29 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n-                return InitError(ResolveErrMsg(\"bind\", strBind));\n-            }\n-            connOptions.vBinds.push_back(addrBind);\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+            return InitError(ResolveErrMsg(\"bind\", strBind));\n+        }\n+        connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n-                return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-            }\n-            if (addrBind.GetPort() == 0) {\n-                return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-            }\n-            connOptions.vWhiteBinds.push_back(addrBind);\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+            return InitError(ResolveErrMsg(\"whitebind\", strBind));\n+        }\n+        if (addrBind.GetPort() == 0) {\n+            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+        }\n+        connOptions.vWhiteBinds.push_back(addrBind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n-            CSubNet subnet;\n-            LookupSubNet(net.c_str(), subnet);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            connOptions.vWhitelistedRange.push_back(subnet);\n+        CSubNet subnet;\n+        LookupSubNet(net.c_str(), subnet);\n+        if (!subnet.IsValid())\n+            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+        connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n     if (gArgs.IsArgSet(\"-seednode\")) {"
      }
    ]
  }
]