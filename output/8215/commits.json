[
  {
    "sha": "faa91b12f774d7f459e47f440b7e9fe173d72bb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE5MWIxMmY3NzRkN2Y0NTllNDdmNDQwYjdlOWZlMTczZDcyYmIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-07T09:22:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-17T11:07:38Z"
      },
      "message": "[wallet] tests: Don't use floating point",
      "tree": {
        "sha": "d3a7283bf73fc69caa4055cd10b03bbcffe5cb8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3a7283bf73fc69caa4055cd10b03bbcffe5cb8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa91b12f774d7f459e47f440b7e9fe173d72bb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa91b12f774d7f459e47f440b7e9fe173d72bb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa91b12f774d7f459e47f440b7e9fe173d72bb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa91b12f774d7f459e47f440b7e9fe173d72bb0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66db2d62d59817320c9182fc18e75a93b76828ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66db2d62d59817320c9182fc18e75a93b76828ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66db2d62d59817320c9182fc18e75a93b76828ea"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 25,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0a4f06ba881758e293642f9fcb5228ed5b6cbab7",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 21,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa91b12f774d7f459e47f440b7e9fe173d72bb0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa91b12f774d7f459e47f440b7e9fe173d72bb0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=faa91b12f774d7f459e47f440b7e9fe173d72bb0",
        "patch": "@@ -27,7 +27,7 @@ typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static CWallet wallet;\n+static const CWallet wallet;\n static vector<COutput> vCoins;\n \n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n@@ -188,11 +188,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n \n         empty_wallet();\n-        add_coin(0.1*MIN_CHANGE);\n-        add_coin(0.2*MIN_CHANGE);\n-        add_coin(0.3*MIN_CHANGE);\n-        add_coin(0.4*MIN_CHANGE);\n-        add_coin(0.5*MIN_CHANGE);\n+        add_coin(MIN_CHANGE * 1 / 10);\n+        add_coin(MIN_CHANGE * 2 / 10);\n+        add_coin(MIN_CHANGE * 3 / 10);\n+        add_coin(MIN_CHANGE * 4 / 10);\n+        add_coin(MIN_CHANGE * 5 / 10);\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n@@ -207,8 +207,8 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n-        add_coin(0.6*MIN_CHANGE);\n-        add_coin(0.7*MIN_CHANGE);\n+        add_coin(MIN_CHANGE * 6 / 10);\n+        add_coin(MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n@@ -229,37 +229,37 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // sometimes it will fail, and so we use the next biggest coin:\n         empty_wallet();\n-        add_coin(0.5 * MIN_CHANGE);\n-        add_coin(0.6 * MIN_CHANGE);\n-        add_coin(0.7 * MIN_CHANGE);\n+        add_coin(MIN_CHANGE * 5 / 10);\n+        add_coin(MIN_CHANGE * 6 / 10);\n+        add_coin(MIN_CHANGE * 7 / 10);\n         add_coin(1111 * MIN_CHANGE);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n-        add_coin(0.4 * MIN_CHANGE);\n-        add_coin(0.6 * MIN_CHANGE);\n-        add_coin(0.8 * MIN_CHANGE);\n+        add_coin(MIN_CHANGE * 4 / 10);\n+        add_coin(MIN_CHANGE * 6 / 10);\n+        add_coin(MIN_CHANGE * 8 / 10);\n         add_coin(1111 * MIN_CHANGE);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding small change\n         empty_wallet();\n-        add_coin(0.05 * MIN_CHANGE);\n-        add_coin(1    * MIN_CHANGE);\n-        add_coin(100  * MIN_CHANGE);\n+        add_coin(MIN_CHANGE * 5 / 100);\n+        add_coin(MIN_CHANGE * 1);\n+        add_coin(MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(100.01 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 101.05 * MIN_CHANGE);   // we should get all coins\n+        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(99.9 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -310,7 +310,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n             // add 75 cents in small change.  not enough to make 90 cents,\n             // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n             // one of which should be picked at random\n-            add_coin( 5*CENT); add_coin(10*CENT); add_coin(15*CENT); add_coin(20*CENT); add_coin(25*CENT);\n+            add_coin(5 * CENT);\n+            add_coin(10 * CENT);\n+            add_coin(15 * CENT);\n+            add_coin(20 * CENT);\n+            add_coin(25 * CENT);\n \n             fails = 0;\n             for (int i = 0; i < RANDOM_REPEATS; i++)"
      }
    ]
  }
]