MarcoFalke,2020-10-01 16:02:30,"Also, the doxygen comment is moved from the cpp file to the header, which can be reviewed with `--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space`",https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-702235839,702235839,
laanwj,2020-10-01 16:10:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-702240767,702240767,
jonatack,2020-10-01 17:39:07,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-702291221,702291221,
practicalswift,2020-10-01 19:13:18,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-702342320,702342320,
DrahtBot,2020-11-03 12:09:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18242 (Add BIP324 encrypted p2p transport de-/serializer (only used in tests) by jonasschnelli)\n\nIf you consider this p",https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-721078173,721078173,
laanwj,2020-11-19 11:21:58,"> In the future, I think it would be nice to have a MakeSpan-like helper that creates a (signed) char Span out of an unsigned char container (like MakeUCharSpan, but in the other direction)\n\nMind that `char` is not, necessarily, signed, this depends on the architecture's C ABI. And no matter, what, it is always seen as a separate type from both `signed char` and `unsigned char`. This differenc",https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-730306915,730306915,
MarcoFalke,2020-11-19 13:03:02,(appveyor ci failure can be ignored),https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-730361034,730361034,
practicalswift,2020-11-19 14:02:19,"> Mind that `char` is not, necessarily, signed, this depends on the architecture's C ABI. And no matter, what, it is always seen as a separate type from both `signed char` and `unsigned char`. This difference between platforms tends to give a lot of subtle issues (including a security in the SOCKS5 code, historically) so I think it's best to use `uint8_t` as a byte type where remotely possible.\n",https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-730395815,730395815,
laanwj,2020-11-20 05:10:31,re-ACK fa5ed3b4ca609426b2622cad235e107d33db7b30,https://github.com/bitcoin/bitcoin/pull/20056#issuecomment-730854351,730854351,
laanwj,2020-10-02 13:52:20,"+1, this comment for a method  belongs in the header not in the implementation file.",https://github.com/bitcoin/bitcoin/pull/20056#discussion_r498835223,498835223,src/net.cpp
laanwj,2020-10-02 13:58:03,Might want to add a doc comment here that this function reads bytes from the span and advances the pointer. At least I first missed where the `msg_bytes` was advanced in the `CNode::ReceiveMsgBytes` loop.,https://github.com/bitcoin/bitcoin/pull/20056#discussion_r498838624,498838624,src/net.h
MarcoFalke,2020-10-02 14:27:05,"thx, done",https://github.com/bitcoin/bitcoin/pull/20056#discussion_r498855909,498855909,src/net.h
