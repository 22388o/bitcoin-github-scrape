[
  {
    "sha": "fa5ed3b4ca609426b2622cad235e107d33db7b30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVlZDNiNGNhNjA5NDI2YjI2MjJjYWQyMzVlMTA3ZDMzZGI3YjMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-30T15:08:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-10-02T14:26:33Z"
      },
      "message": "net: Use Span in ReceiveMsgBytes",
      "tree": {
        "sha": "c5fccc954fccb4b2eb028a2dc656493e03c4066c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5fccc954fccb4b2eb028a2dc656493e03c4066c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5ed3b4ca609426b2622cad235e107d33db7b30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi1Bwv/bmek8QGfwIIT9aHnPEqJ9q3MaZ9Xkcc0lwW6vQJ9xkjBWQ+vZDGXUmMk\n+7a6ZQ1xtRp18dfk3qXBv7Aqt6D5Muh9EpNoYWTtYM9jCljnKg18Kcs1nZNwezAb\nMGK6tToXRkjmhIdm0vRqci1Bw1I+lE2LvH8vXFJtkYshmXpepoW/Tif2I0ONzsT1\nCAizTYYflaj/EImrHN5aautbnEoJ4N670lK/CYe68wUHo4KGb0JJKoLD8U173lIY\nW07Z5ePxaoTUrd//K5QO52kf6lgOOJgEqG5DuMwRB66Dw+wvi9bH3Fv2Ano1VOhb\nuEZFPVeNxEAYYbRF7OZeMRvMfOap3Y5PtvVeuhWXeUi+1mBuA62G2CTvc4F4Aa3v\n8Oa/F9NGHqpjffpV3S/9K5EsP2vOPfYs+t6llVV240wsDfNWK/9k6YB6d2obfHc4\nu5/WH2sr1wT+fbQFBbMYQ1+WiDJVWz44onnH6zENZ97UHIqvDBGtV9+eQqQAPQmF\nB73ODPAk\n=1yuD\n-----END PGP SIGNATURE-----",
        "payload": "tree c5fccc954fccb4b2eb028a2dc656493e03c4066c\nparent 69a73803dfb2f65919660902d126487906a31770\nauthor MarcoFalke <falke.marco@gmail.com> 1601478506 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601648793 +0200\n\nnet: Use Span in ReceiveMsgBytes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ed3b4ca609426b2622cad235e107d33db7b30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5ed3b4ca609426b2622cad235e107d33db7b30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ed3b4ca609426b2622cad235e107d33db7b30/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69a73803dfb2f65919660902d126487906a31770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a73803dfb2f65919660902d126487906a31770",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a73803dfb2f65919660902d126487906a31770"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 43,
      "deletions": 45
    },
    "files": [
      {
        "sha": "a45039f393cdde6fcd16535b367c357c588ac294",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 25,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -606,34 +606,21 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n }\n #undef X\n \n-/**\n- * Receive bytes from the buffer and deserialize them into messages.\n- *\n- * @param[in]   pch         A pointer to the raw data\n- * @param[in]   nBytes      Size of the data\n- * @param[out]  complete    Set True if at least one message has been\n- *                          deserialized and is ready to be processed\n- * @return  True if the peer should stay connected,\n- *          False if the peer should be disconnected from.\n- */\n-bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n+bool CNode::ReceiveMsgBytes(Span<const char> msg_bytes, bool& complete)\n {\n     complete = false;\n     const auto time = GetTime<std::chrono::microseconds>();\n     LOCK(cs_vRecv);\n     nLastRecv = std::chrono::duration_cast<std::chrono::seconds>(time).count();\n-    nRecvBytes += nBytes;\n-    while (nBytes > 0) {\n+    nRecvBytes += msg_bytes.size();\n+    while (msg_bytes.size() > 0) {\n         // absorb network data\n-        int handled = m_deserializer->Read(pch, nBytes);\n+        int handled = m_deserializer->Read(msg_bytes);\n         if (handled < 0) {\n             // Serious header problem, disconnect from the peer.\n             return false;\n         }\n \n-        pch += handled;\n-        nBytes -= handled;\n-\n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n             uint32_t out_err_raw_size{0};\n@@ -663,13 +650,13 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n-int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n+int V1TransportDeserializer::readHeader(Span<const char> msg_bytes)\n {\n     // copy data to temporary parsing buffer\n     unsigned int nRemaining = CMessageHeader::HEADER_SIZE - nHdrPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n+    unsigned int nCopy = std::min<unsigned int>(nRemaining, msg_bytes.size());\n \n-    memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n+    memcpy(&hdrbuf[nHdrPos], msg_bytes.data(), nCopy);\n     nHdrPos += nCopy;\n \n     // if header incomplete, exit\n@@ -703,18 +690,18 @@ int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n     return nCopy;\n }\n \n-int V1TransportDeserializer::readData(const char *pch, unsigned int nBytes)\n+int V1TransportDeserializer::readData(Span<const char> msg_bytes)\n {\n     unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n+    unsigned int nCopy = std::min<unsigned int>(nRemaining, msg_bytes.size());\n \n     if (vRecv.size() < nDataPos + nCopy) {\n         // Allocate up to 256 KiB ahead, but never more than the total message size.\n         vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n     }\n \n-    hasher.Write({(const unsigned char*)pch, nCopy});\n-    memcpy(&vRecv[nDataPos], pch, nCopy);\n+    hasher.Write(MakeUCharSpan(msg_bytes.first(nCopy)));\n+    memcpy(&vRecv[nDataPos], msg_bytes.data(), nCopy);\n     nDataPos += nCopy;\n \n     return nCopy;\n@@ -1463,7 +1450,7 @@ void CConnman::SocketHandler()\n             if (nBytes > 0)\n             {\n                 bool notify = false;\n-                if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n+                if (!pnode->ReceiveMsgBytes(Span<const char>(pchBuf, nBytes), notify))\n                     pnode->CloseSocketDisconnect();\n                 RecordBytesRecv(nBytes);\n                 if (notify) {"
      },
      {
        "sha": "93aaab12cfd41fdfb13b34da6dc003bb1652ec52",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -745,8 +745,8 @@ class TransportDeserializer {\n     virtual bool Complete() const = 0;\n     // set the serialization context version\n     virtual void SetVersion(int version) = 0;\n-    // read and deserialize data\n-    virtual int Read(const char *data, unsigned int bytes) = 0;\n+    /** read and deserialize data, advances msg_bytes data pointer */\n+    virtual int Read(Span<const char>& msg_bytes) = 0;\n     // decomposes a message from the context\n     virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n@@ -767,8 +767,8 @@ class V1TransportDeserializer final : public TransportDeserializer\n     unsigned int nDataPos;\n \n     const uint256& GetMessageHash() const;\n-    int readHeader(const char *pch, unsigned int nBytes);\n-    int readData(const char *pch, unsigned int nBytes);\n+    int readHeader(Span<const char> msg_bytes);\n+    int readData(Span<const char> msg_bytes);\n \n     void Reset() {\n         vRecv.clear();\n@@ -802,9 +802,14 @@ class V1TransportDeserializer final : public TransportDeserializer\n         hdrbuf.SetVersion(nVersionIn);\n         vRecv.SetVersion(nVersionIn);\n     }\n-    int Read(const char *pch, unsigned int nBytes) override {\n-        int ret = in_data ? readData(pch, nBytes) : readHeader(pch, nBytes);\n-        if (ret < 0) Reset();\n+    int Read(Span<const char>& msg_bytes) override\n+    {\n+        int ret = in_data ? readData(msg_bytes) : readHeader(msg_bytes);\n+        if (ret < 0) {\n+            Reset();\n+        } else {\n+            msg_bytes = msg_bytes.subspan(ret);\n+        }\n         return ret;\n     }\n     Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n@@ -1088,7 +1093,16 @@ class CNode\n         return nRefCount;\n     }\n \n-    bool ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete);\n+    /**\n+     * Receive bytes from the buffer and deserialize them into messages.\n+     *\n+     * @param[in]   msg_bytes   The raw data\n+     * @param[out]  complete    Set True if at least one message has been\n+     *                          deserialized and is ready to be processed\n+     * @return  True if the peer should stay connected,\n+     *          False if the peer should be disconnected from.\n+     */\n+    bool ReceiveMsgBytes(Span<const char> msg_bytes, bool& complete);\n \n     void SetCommonVersion(int greatest_common_version)\n     {"
      },
      {
        "sha": "242fc85d775949b81b99855ef92bb0c8f3a1d5a2",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -127,7 +127,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 11: {\n             const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             bool complete;\n-            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            node.ReceiveMsgBytes({(const char*)b.data(), b.size()}, complete);\n             break;\n         }\n         }"
      },
      {
        "sha": "3feabcc99ae943be205b50f208a48c20322c8493",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -21,15 +21,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     // Construct deserializer, with a dummy NodeId\n     V1TransportDeserializer deserializer{Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n-    const char* pch = (const char*)buffer.data();\n-    size_t n_bytes = buffer.size();\n-    while (n_bytes > 0) {\n-        const int handled = deserializer.Read(pch, n_bytes);\n+    Span<const char> msg_bytes{(const char*)buffer.data(), buffer.size()};\n+    while (msg_bytes.size() > 0) {\n+        const int handled = deserializer.Read(msg_bytes);\n         if (handled < 0) {\n             break;\n         }\n-        pch += handled;\n-        n_bytes -= handled;\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             uint32_t out_err_raw_size{0};"
      },
      {
        "sha": "3b31ec4031933606c2700cc98e3194a6b517b26b",
        "filename": "src/test/util/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -7,9 +7,9 @@\n #include <chainparams.h>\n #include <net.h>\n \n-void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, const char* pch, unsigned int nBytes, bool& complete) const\n+void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const char> msg_bytes, bool& complete) const\n {\n-    assert(node.ReceiveMsgBytes(pch, nBytes, complete));\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n     if (complete) {\n         size_t nSizeAdded = 0;\n         auto it(node.vRecvMsg.begin());\n@@ -33,7 +33,7 @@ bool ConnmanTestMsg::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) con\n     node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n \n     bool complete;\n-    NodeReceiveMsgBytes(node, (const char*)ser_msg_header.data(), ser_msg_header.size(), complete);\n-    NodeReceiveMsgBytes(node, (const char*)ser_msg.data.data(), ser_msg.data.size(), complete);\n+    NodeReceiveMsgBytes(node, {(const char*)ser_msg_header.data(), ser_msg_header.size()}, complete);\n+    NodeReceiveMsgBytes(node, {(const char*)ser_msg.data.data(), ser_msg.data.size()}, complete);\n     return complete;\n }"
      },
      {
        "sha": "fe423e7e89fe60654227fc2e463a50f71e1dbefa",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed3b4ca609426b2622cad235e107d33db7b30/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=fa5ed3b4ca609426b2622cad235e107d33db7b30",
        "patch": "@@ -25,7 +25,7 @@ struct ConnmanTestMsg : public CConnman {\n \n     void ProcessMessagesOnce(CNode& node) { m_msgproc->ProcessMessages(&node, flagInterruptMsgProc); }\n \n-    void NodeReceiveMsgBytes(CNode& node, const char* pch, unsigned int nBytes, bool& complete) const;\n+    void NodeReceiveMsgBytes(CNode& node, Span<const char> msg_bytes, bool& complete) const;\n \n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };"
      }
    ]
  }
]