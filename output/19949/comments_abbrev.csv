fjahr,2020-09-12 23:38:13,Removed usage of `isxdigit` because the linter complained about locale dependency.,https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-691573248,691573248,
n-thumann,2020-09-13 21:49:17,"tACK https://github.com/bitcoin/bitcoin/commit/5076f8363eb658d24044dab4f618c414566f4b5f: ran functional & unit tests, works as expected. Only nit are the slightly degraded error messages when entering malformed hex strings ‚úåÔ∏è ",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-691730360,691730360,
promag,2020-09-21 08:55:22,"Does't feel right to place the workaround in `ParseNonRFCJSONValue`.\n\nI prefer #15448.  ",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-695988085,695988085,
fjahr,2020-09-21 23:07:00,"> Does't feel right to place the workaround in `ParseNonRFCJSONValue`.\n> \n> I prefer #15448.\n\nNot sure if that changes your mind but I pulled the check out of `ParseNonRFCJSONValue` which seems like a simpler change anyway.\n\n@laanwj would you mind taking a quick look? This is mainly based on your feedback to #15448.",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-696425921,696425921,
DrahtBot,2020-09-22 01:11:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16439](https://github.com/bitcoin/bitcoin/pull/16439) (cli/gui: support ""@height"" in place of blockhash for getblock on ",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-696461230,696461230,
laanwj,2020-11-23 10:21:32,"I still don't like this kind of special casing based on ""how a value looks"". It adds a degree of ambiguity that can lead to nasty issues, especially if the value recognition becomes more complex. This is similar to what I said here: https://github.com/bitcoin/bitcoin/pull/15448#issuecomment-505495068\n\nStill, I prefer this specialization to #15448, so if we really have to do something like this",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-732066162,732066162,
ajtowns,2021-02-04 01:07:29,"Could also change getblockstats to always expect a hash rather than hash_or_height, and use #16439 to convert ""@height"" into the hash on the client side.",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-772946040,772946040,
laanwj,2021-02-09 21:15:20,"I like the idea of doing it on the client side. That alleviates my concerns which are mostly about programmatic use.\n\nAlthough #20273 would be the most general solution, I guess this is shorter to type.\n",https://github.com/bitcoin/bitcoin/pull/19949#issuecomment-776248810,776248810,
n-thumann,2020-09-13 13:41:27,"Maybe add that this method also accepts tx and blockhashes?\n```suggestion\n/** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null or tx and blockhashes)\n```",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487531050,487531050,src/rpc/client.cpp
n-thumann,2020-09-13 13:51:57,"```suggestion\n    if ((!jVal.read(std::string(""["")+strVal+std::string(""]"")) &&\n        !jVal.read(std::string(""[\"""")+strVal+std::string(""\""]""))) ||\n```\nJust as an idea, feel free to ignore :)\nThis would be shorter, requires no additional methods and also does the job (except for `getblockstats ""'<blockhash>'""`). But - and that could be more important - it keeps the error message if the b",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487532263,487532263,src/rpc/client.cpp
fjahr,2020-09-13 17:31:01,If I see that correctly what this change will do is it will end up passing everything as a string to the server and never throw that error client-side. So basically the same as #15448 which removes `ParseNonRFCJSONValue` and only does validation server-side (the arguably better error message is coming from the server). The feedback to that was that the validation shouldn't be removed completely fr,https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487555526,487555526,src/rpc/client.cpp
fjahr,2020-09-13 17:39:24,"makes sense, I amended the comment.",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487556372,487556372,src/rpc/client.cpp
n-thumann,2020-09-13 21:31:07,"Oh, I forgot: You probably want to change this in `src/rpc/client.h` as well for consistency :)",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487579794,487579794,src/rpc/client.cpp
n-thumann,2020-09-13 21:44:17,Sounds reasonable üëç ,https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487581051,487581051,src/rpc/client.cpp
promag,2020-09-14 09:30:47,Could use `bool IsHex(const std::string&)` from src/util/strencodings.h.,https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487776652,487776652,src/rpc/client.cpp
fjahr,2020-09-14 10:04:38,"Hm, my impression was that client.h/cpp should be stand-alone and not depend on other parts of the project? Maybe I am wrong about that but I thought I heard that somewhere and looking at the includes seemed to confirm it. Otherwise, I guess I could also just use `ParseHashV` from rpc/util.cpp?",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487796684,487796684,src/rpc/client.cpp
promag,2020-09-14 10:23:16,AFAIK it can't include server side components.,https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487807399,487807399,src/rpc/client.cpp
fjahr,2020-09-14 12:05:35,"Makes sense, changed to use `IsHex`.",https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487859463,487859463,src/rpc/client.cpp
fjahr,2020-09-14 12:06:56,Done,https://github.com/bitcoin/bitcoin/pull/19949#discussion_r487860178,487860178,src/rpc/client.cpp
