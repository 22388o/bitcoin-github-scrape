MarcoFalke,2020-04-20 15:13:48,Concept ACK on getting rid of boost in consensus code. This pull looks similar to #14464?,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616618525,616618525,
MarcoFalke,2020-04-20 15:14:21,"> Also, with this PR (I hope) it could be easier to resurrect a bunch of brilliant ideas from #9938.\n\ncc @JeremyRubin ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616618857,616618857,
hebasto,2020-04-20 15:16:08,"@MarcoFalke \n> Concept ACK on getting rid of boost in consensus code. This pull looks similar to #14464?\n\nThanks for pointing to #14464. I'll look into it.\n",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616619953,616619953,
DrahtBot,2020-04-20 16:06:54,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616651627,616651627,
hebasto,2020-04-20 17:48:42,"Updated 9764d81e1f000d1bd3c03ac6f6f4361c4aa84ee9  -> f4cd37e93a522d5ab2bc872d129a0142be773a7d ([pr18710.01](https://github.com/hebasto/bitcoin/commits/pr18710.01) -> [pr18710.02](https://github.com/hebasto/bitcoin/commits/pr18710.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.01..pr18710.02)):\n\n- fixed linter issue with boost headers",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616711942,616711942,
JeremyRubin,2020-04-21 06:27:07,"Nice! From a simple code review PoV it looks good.\n\nI remember there being a bunch of subtle nasties in the specifics of using std::threads v.s. boost threads around interrupt system and the details of how condition variables work. I can't remember what they all were though now. I think #14464 closed because of that...\n\n\nBut generally huge concept ack on anything that makes #9938 more li",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616979595,616979595,
hebasto,2020-04-21 17:08:41,"@MarcoFalke \n> Concept ACK on getting rid of boost in consensus code. This pull looks similar to #14464?\n\nThe differences from #14464 are:\n- absence of `Interrupt()` function\n- an additional atomic `m_destruction_in_progress` that replaces the boost ""interrupt"" feature: https://github.com/bitcoin/bitcoin/blob/f4cd37e93a522d5ab2bc872d129a0142be773a7d/src/checkqueue.h#L96-L97 and https://g",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-617291612,617291612,
hebasto,2020-04-21 21:14:25,"Updated f4cd37e93a522d5ab2bc872d129a0142be773a7d  -> b02bc2583e421dbca35a5652c650ae861230f480 ([pr18710.02](https://github.com/hebasto/bitcoin/commits/pr18710.02) -> [pr18710.03](https://github.com/hebasto/bitcoin/commits/pr18710.03), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.02..pr18710.03)):\n\n- picked some ideas from #14464\n- reduced scope of the PR (some commits has been m",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-617417653,617417653,
hebasto,2020-04-21 22:28:04,"Benchmark results on my machine:\n- master (a998c5185bc7fc2c7e22312fac60175cb2869bdd)\n```\n# Benchmark, evals, iterations, total, min, max, median\nCCheckQueueSpeedPrevectorJob, 100, 1400, 96.3747, 0.000677139, 0.000695471, 0.000688339\n```\n\n- this PR (b02bc2583e421dbca35a5652c650ae861230f480)\n\n```\n# Benchmark, evals, iterations, total, min, max, median\nCCheckQueueSpeedPrevectorJ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-617446268,617446268,
hebasto,2020-04-22 22:52:12,Rebased b02bc2583e421dbca35a5652c650ae861230f480 -> https://github.com/bitcoin/bitcoin/commit/f16f7f79dcd5d6c1b55966317b8762abeb5561c3 ([pr18710.03](https://github.com/hebasto/bitcoin/commits/pr18710.03) -> [pr18710.04](https://github.com/hebasto/bitcoin/commits/pr18710.04)) due to the conflict with #18575.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-618080438,618080438,
hebasto,2020-04-24 13:25:44,"Updated f16f7f79dcd5d6c1b55966317b8762abeb5561c3 -> 7a7e346a1d153fc7367bca5a1926881af65279ec ([pr18710.04](https://github.com/hebasto/bitcoin/commits/pr18710.04) -> [pr18710.05](https://github.com/hebasto/bitcoin/commits/pr18710.05), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.04..pr18710.05)):\n\n- addressed all of @MarcoFalke's comments",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172,619008172,
MarcoFalke,2020-04-24 13:51:21,In the last commit: Could replace the last occurrence of `thread.hpp` with `#include <boost/thread/shared_mutex.hpp>` and kill boost thread from the linter?,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619023235,619023235,
hebasto,2020-04-24 14:36:20,"Updated 7a7e346a1d153fc7367bca5a1926881af65279ec -> 61739174c67a773d124734ab6ec3385657fe3ef8 ([pr18710.05](https://github.com/hebasto/bitcoin/commits/pr18710.05) -> [pr18710.06](https://github.com/hebasto/bitcoin/commits/pr18710.06), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.05..pr18710.06)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18710#iss",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619049521,619049521,
hebasto,2020-04-24 16:50:44,@MarcoFalke ~It seems there is a thread issue on windows: https://travis-ci.org/github/bitcoin/bitcoin/jobs/679063276 and https://bitcoinbuilds.org/?job=90df9b0f-d918-45a1-b27d-0ae6d4cec303 ...~,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619126820,619126820,
hebasto,2020-04-24 18:36:46,"Updated 61739174c67a773d124734ab6ec3385657fe3ef8 -> b3ac0c3d15a729cdce5f15b918947037905b59dc ([pr18710.06](https://github.com/hebasto/bitcoin/commits/pr18710.06) -> [pr18710.07](https://github.com/hebasto/bitcoin/commits/pr18710.07), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.06..pr18710.07)):\n\n- [FIXUP](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619126820):\n> ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619178882,619178882,
hebasto,2020-04-26 03:00:24,"Reworked dac216cee9e2e8fece089f67cf84f80f6890541f:\n\n- fixed data race conditions\n- dropped ""refactor: Change return type of CCheckQueue::Loop()"" commit",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619472659,619472659,
hebasto,2020-04-26 22:38:56,"> Is [f9c3bf4](https://github.com/bitcoin/bitcoin/commit/f9c3bf45c13c147cb8d66d156519af021d66218e) really a refactor due to changes between boost and std threads?\n\nI think it is, as the code in the pre- f9c3bf45c13c147cb8d66d156519af021d66218e state does not rely on `boost::thread`-specific features, no?",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619635785,619635785,
hebasto,2020-04-28 18:03:43,"Updated dac216cee9e2e8fece089f67cf84f80f6890541f -> 0b5e2a5528fae627e7be98ac231bfb9ae24cd504 ([pr18710.08](https://github.com/hebasto/bitcoin/commits/pr18710.08) -> [pr18710.09](https://github.com/hebasto/bitcoin/commits/pr18710.09), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.08..pr18710.09)):\n\n- added missed `GUARDED_BY` thread-safety annotation",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-620766304,620766304,
hebasto,2020-05-26 17:45:52,Rebased 0b5e2a5528fae627e7be98ac231bfb9ae24cd504 -> 82d5e650ee2b72d1447cbfc7bf1bb107dfd390b6 ([pr18710.09](https://github.com/hebasto/bitcoin/commits/pr18710.09) -> [pr18710.10](https://github.com/hebasto/bitcoin/commits/pr18710.10)) on top of the #18881.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-634175007,634175007,
hebasto,2020-05-28 08:22:53,Rebased 82d5e650ee2b72d1447cbfc7bf1bb107dfd390b6 -> 46838e94da7c54389bce1fb7c0951ab338dcc304 ([pr18710.10](https://github.com/hebasto/bitcoin/commits/pr18710.10) -> [pr18710.11](https://github.com/hebasto/bitcoin/commits/pr18710.11)) on top of the #16127.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-635195033,635195033,
hebasto,2020-06-04 09:34:53,Rebased 46838e94da7c54389bce1fb7c0951ab338dcc304 -> 8457827f784e0e2586b19e78785d143b8eeb9513 ([pr18710.11](https://github.com/hebasto/bitcoin/commits/pr18710.11) -> [pr18710.12](https://github.com/hebasto/bitcoin/commits/pr18710.12)) on top of the #18792.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-638737307,638737307,
hebasto,2020-06-04 14:37:50,Rebased 8457827f784e0e2586b19e78785d143b8eeb9513 -> b392ef178725795d9e38a4dd000b20ee47c0d60a ([pr18710.12](https://github.com/hebasto/bitcoin/commits/pr18710.12) -> [pr18710.13](https://github.com/hebasto/bitcoin/commits/pr18710.13)) due to the conflict with #19142.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-638890530,638890530,
hebasto,2020-06-05 05:12:58,Rebased b392ef178725795d9e38a4dd000b20ee47c0d60a -> eee80a1c36d886583e387934abce6dac9b3117b5 ([pr18710.13](https://github.com/hebasto/bitcoin/commits/pr18710.13) -> [pr18710.14](https://github.com/hebasto/bitcoin/commits/pr18710.14)) due to the conflict with #18758.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-639262797,639262797,
JeremyRubin,2020-06-05 23:58:58,"utack eee80a1\n\nFailure is a build pause, job needs restart. I'm still not sure why the test needed to be removed, maybe you can explain that more clearly.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-639905207,639905207,
hebasto,2020-06-06 06:24:04,"Updated eee80a1c36d886583e387934abce6dac9b3117b5 -> ec4401480246f60c6b22d98d205a509a181010d7 ([pr18710.14](https://github.com/hebasto/bitcoin/commits/pr18710.14) -> [pr18710.15](https://github.com/hebasto/bitcoin/commits/pr18710.15), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.14..pr18710.15)):\n\n- restored the `test_CheckQueueControl_Locks` unit test that was removed by mistake",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-639992778,639992778,
hebasto,2020-06-06 07:21:25,"@JeremyRubin \n> Failure is a build pause, job needs restart.\n\nNo chance, unfortunately. See: #19171.\nThe #18731 has been built on top of this PR successfully.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-640002188,640002188,
JeremyRubin,2020-06-06 17:47:19,"utACK ec44014\n\n\nAnnoying note:\n\nAs noted in https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616979595, Would be good if someone with access to some of the different platforms/arches we support can do benching/real network profiling to just to confirm there's no perf regression on the condition variable and mutex behavior. Otherwise seems ready to merge.\n\nsee https://codese",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-640095382,640095382,
laanwj,2020-07-01 14:50:15,"Concept ACK, will review",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-652465167,652465167,
adamjonas,2020-07-27 13:29:44,"To summarize the state of review for this PR:\n\nConcept ACK (laanwj), Approach ACK (MarcoFalke), Code review ACK (Promag), utACK (JeremyRubin) with no NACKs or blocking concerns raised.\n\n@JeremyRubin [asked](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-640095382) if someone ""with access to some of the different platforms/arches we support can do benching/real network profiling",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-664397234,664397234,
hebasto,2020-07-29 08:39:06,Rebased ec4401480246f60c6b22d98d205a509a181010d7 -> e7893d2e522477374ef9bf01997e9776c86b9813 ([pr18710.15](https://github.com/hebasto/bitcoin/commits/pr18710.15) -> [pr18710.16](https://github.com/hebasto/bitcoin/commits/pr18710.16)) due to the conflicts with #18637 and #19589.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-665524067,665524067,
hebasto,2020-07-29 09:01:08,"Updated benchmarks (Linux Mint 20, x86_64):\n- master (2f71a1ea35667b3873197201531e7ae198ec5bf4)\n```\n# Benchmark, evals, iterations, total, min, max, median\nCCheckQueueSpeedPrevectorJob, 5, 1400, 4.31038, 0.000612868, 0.000620909, 0.000614335\n```\n\n- this PR (e7893d2e522477374ef9bf01997e9776c86b9813)\n```\n# Benchmark, evals, iterations, total, min, max, median\nCCheckQueueSpeedPrev",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-665536096,665536096,
hebasto,2020-07-31 11:21:13,"Rebased e7893d2e522477374ef9bf01997e9776c86b9813 -> a57a0e526c94b35b1b018fde5a8a2ea46fca8899 ([pr18710.16](https://github.com/hebasto/bitcoin/commits/pr18710.16) -> [pr18710.17](https://github.com/hebasto/bitcoin/commits/pr18710.17)) due to the conflicts with #18011 and #19604.\n\nUpdated benchmarks (Linux Mint 20, x86_64):\n- master (a63a26f042134fa80356860c109edb25ac567552)\n```\n|         ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667071468,667071468,
martinus,2020-08-01 11:11:17,"Hi! I only have access to two different computers, an Intel i7-8700, and an Intel Celeron N3050. Compiled with g++ 10.1.0.\n\n# i7-8700 (12 threads)\nmaster f7c73b03d975a72f609ded2bbe250c1c8a76a944, i7-8700:\n\n|              ns/job |               job/s |    err% |         ins/job |         cyc/job |    IPC |        bra/job |   miss% |     total | benchmark\n|--------------------:|---------",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667514891,667514891,
martinus,2020-08-01 16:36:09,"I ran the benchmark again on the Intel Celeron N3050, but with `BATCHES=5001` instead of 101. The benchmark takes a long time, and is a bit more stable. It still fluctuates by a factor of 4. On average the PR is slower than master on this machine.\n\n![newplot(4)](https://user-images.githubusercontent.com/14386/89105933-b7c15280-d425-11ea-89f0-791dd2e57fd8.png)\n",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667556803,667556803,
hebasto,2020-08-02 09:53:24,"Updated a57a0e526c94b35b1b018fde5a8a2ea46fca8899 -> e084c3b6051fc596d0b9a38ae7a5da58e3637a31 ([pr18710.17](https://github.com/hebasto/bitcoin/commits/pr18710.17) -> [pr18710.18](https://github.com/hebasto/bitcoin/commits/pr18710.18), [diff](https://github.com/hebasto/bitcoin/compare/pr18710.17..pr18710.18)):\n\n- addressed @promag's nits\n\n- added commit b8e267134431db97e853cddd32fdc41716d341",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667653036,667653036,
hebasto,2020-08-02 09:58:14,"@martinus\n\nThere are some concerns about thread oversubscription impact on benchmarking.\n\nMind repeating your benchmarks on 2-thread system with updated branch?",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667653480,667653480,
martinus,2020-08-02 10:36:54,"Sure, I ran it again. i7-8700 is faster too. I also tested it with `queue.StartWorkerThreads(1);`, which is by far the fastest for that benchmark. It seems that the work units are far too small to be able to reasonably distribute the work. So I am not sure if this benchmark is much useful.\n\n|              ns/job |               job/s |    err% |         ins/job |         cyc/job |    IPC |    ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667657139,667657139,
hebasto,2020-08-02 10:48:50,"@martinus Great! Thanks very much!\n\nMind including benchmark for b8e267134431db97e853cddd32fdc41716d3414e on the Celeron N3050 as well, as this commit changes the benchmark itself?",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667658192,667658192,
martinus,2020-08-02 11:11:27,"If I understand it correcly, the benchmark queues `PrevectorJob` as as the job to simulate. But the jobs itself do nothing, they simply return true:\n\n```cpp\nbool operator()()  {\n    return true;\n}\n```\nI'd say the job should do some reasonable amount of work so using multiple threads actually make any sense.\n\nAnyways, here is an update with b8e2671 included:\n\ni7-8700:\n\n|  ",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667660333,667660333,
hebasto,2020-08-02 11:29:16,"This PR consist of two distinct changes now:\n- master -> b8e267134431db97e853cddd32fdc41716d3414e\n  - prevented thread oversubscription during benchmarking\n  - benchmark change only\n  - benchmarking results variance becomes lower\n- b8e267134431db97e853cddd32fdc41716d3414e -> e084c3b6051fc596d0b9a38ae7a5da58e3637a31\n  - dropped `boost::thread_group`\n  - benchmarking results mean impro",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667662161,667662161,
hebasto,2020-08-13 14:30:41,"To make reviewing easier, the first commit is split out to #19710.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-673513295,673513295,
hebasto,2020-08-21 06:33:29,Rebased e084c3b6051fc596d0b9a38ae7a5da58e3637a31 -> fa815a305108bc8b25ac468abaec7fa60c261f41 ([pr18710.18](https://github.com/hebasto/bitcoin/commits/pr18710.18) -> [pr18710.19](https://github.com/hebasto/bitcoin/commits/pr18710.19)) on top of #19710 to prevent a merge conflict.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-678068722,678068722,
hebasto,2020-08-31 09:00:09,Rebased fa815a305108bc8b25ac468abaec7fa60c261f41 -> 89c4f7591e02df4fd36071995740113c1c06db3d ([pr18710.19](https://github.com/hebasto/bitcoin/commits/pr18710.19) -> [pr18710.20](https://github.com/hebasto/bitcoin/commits/pr18710.20)) due to the conflict with #19710.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-683657626,683657626,
hebasto,2020-09-24 04:04:12,Rebased 89c4f7591e02df4fd36071995740113c1c06db3d -> bb6fcc75d1ec94b733d1477c816351c50be5faf9 ([pr18710.20](https://github.com/hebasto/bitcoin/commits/pr18710.20) -> [pr18710.21](https://github.com/hebasto/bitcoin/commits/pr18710.21)) due to the conflict with #19927.,https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-698098191,698098191,
jamesob,2020-12-11 05:12:46,"Concept ACK, will plan to review.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-742973457,742973457,
hebasto,2020-12-16 01:21:08,"@LarryRuane \n> nit: remove the `#include <boost/thread/thread.hpp>` from checkqueue_tests.cpp.\n\n`boost::thread_group` is still used in the `test_CheckQueueControl_Locks`.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-745701392,745701392,
LarryRuane,2020-12-16 02:08:13,"> `boost::thread_group` is still used in the `test_CheckQueueControl_Locks`\n\nIt builds for me without that include. Oh, I see, it's included indirectly via `test/util/setup_common.h`, thanks.",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-745716167,745716167,
laanwj,2021-01-07 17:51:38,"Thanks for getting rid of the one-to-last use of `boost::thread_group`.\n\nCode review ACK bb6fcc75d1ec94b733d1477c816351c50be5faf9",https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-756275056,756275056,
MarcoFalke,2020-04-23 23:33:57,"```suggestion\n        for (int n = 0; n < threads_num; ++n) {\n```\n\nis shorter and more precise",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414192321,414192321,src/checkqueue.h
MarcoFalke,2020-04-23 23:34:13,is this useful in any way?,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414192412,414192412,src/checkqueue.h
MarcoFalke,2020-04-23 23:35:07,Is this needed? the for loop will never run anyway when this is true.,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414192766,414192766,src/checkqueue.h
MarcoFalke,2020-04-23 23:37:47,"Also, shouldn't the `if (m_stopped)` be *after* the condition variable `wait`? Otherwise notifying it will first empty the queue.\nFinally, `m_stopped` could be renamed to `m_request_stop` and only briefly set in `StopWorkerThreads` to true and then immediately after to false. No other member functions (like StartWorkerThreads) touch it",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414193766,414193766,src/checkqueue.h
MarcoFalke,2020-04-23 23:47:24,"1c7fdb71b32bd91f6ae10313169d9eec63d46e3e: This commit should probably go last, because some of the changes are removed earlier anyway",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414197590,414197590,src/test/checkqueue_tests.cpp
MarcoFalke,2020-04-23 23:48:34,d64dd5ffee064b0b943b7e00b16b0ad28ac65474: Why remove this test?,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414198030,414198030,src/test/checkqueue_tests.cpp
MarcoFalke,2020-04-23 23:50:44,629dae24827121412fb24d31ac19a918ade1db3f: why remove the documentation? ,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414198755,414198755,src/checkqueue.h
hebasto,2020-04-24 11:21:26,"In that case in the commit _""bench: Use CCheckQueue local thread pool""_ the `lint-includes.sh` linter will produce:\n```\nGood job! The Boost dependency ""boost/thread/thread.hpp"" is no longer used.\nPlease remove it from EXPECTED_BOOST_INCLUDES in ./test/lint/lint-includes.sh\nto make sure this dependency is not accidentally reintroduced.\n```\nwhich seems a bit falsely.",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414498924,414498924,src/test/checkqueue_tests.cpp
MarcoFalke,2020-04-24 11:23:53,I hope that no one is running the linters on every commit. They are meant to warn authors and reviewers as well as maintainers of code smell in a pull request as a whole. They are not meant as unit tests that absolutely must pass on every commit.,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414500268,414500268,src/test/checkqueue_tests.cpp
hebasto,2020-04-24 11:26:07,~I have no idea how to pass a customized callback into the `CCheckQueue::StartWorkerThreads(int)`.~,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414501529,414501529,src/test/checkqueue_tests.cpp
hebasto,2020-04-24 11:36:12,Agree.,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414507074,414507074,src/checkqueue.h
hebasto,2020-04-24 11:40:23,The idea was to prevent `m_stopped = false;`,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414509470,414509470,src/checkqueue.h
hebasto,2020-04-24 11:58:17,"> Otherwise notifying it will first empty the queue.\n\nCorrect. This is done intentionally as I think that worker threads should exit with a clean check queue, no?",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414519480,414519480,src/checkqueue.h
hebasto,2020-04-24 12:08:47,"> Also, shouldn't the `if (m_stopped)` be _after_ the condition variable `wait`?\n\nThis wouldn't work for the master thread that could never return.",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414525463,414525463,src/checkqueue.h
hebasto,2020-04-24 12:20:20,"> Finally, `m_stopped` could be renamed to `m_request_stop` and only briefly set in `StopWorkerThreads` to true and then immediately after to false.\n\nHow this approach could work when `StopWorkerThreads()` is called during check queue being processed? I think `m_stopped` should keep its state in that case.",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414532313,414532313,src/checkqueue.h
hebasto,2020-04-24 13:28:57,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414576225,414576225,src/checkqueue.h
hebasto,2020-04-24 13:29:24,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414576513,414576513,src/checkqueue.h
hebasto,2020-04-24 13:29:35,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414576627,414576627,src/checkqueue.h
hebasto,2020-04-24 13:29:46,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414576746,414576746,src/checkqueue.h
hebasto,2020-04-24 13:29:56,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414576837,414576837,src/test/checkqueue_tests.cpp
hebasto,2020-04-24 13:30:11,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-619008172).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414577010,414577010,src/checkqueue.h
JeremyRubin,2020-04-24 20:02:58,"Usually you want to use a callable template parameter...\n```c++\ntemplate<typename Callable>\nfunction(int x, Callable&& function) {\n    function(x);\n}\nfunction(1, [](int x) { return x});\nfunction(1, [](int x) { });\n```\n",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r414830550,414830550,src/test/checkqueue_tests.cpp
hebasto,2020-04-26 03:06:09,"@JeremyRubin Thank you for your suggestion :)\n\n~Sorry for my broken English, but I meant do we really need a unit test if the `CCheckQueue` class has no interface to test?~",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r415199483,415199483,src/test/checkqueue_tests.cpp
JeremyRubin,2020-06-02 17:38:36,"Sorry to just be responding on this:\n\nI think if there isn't an interface for something, but you can expose one to make testing more robust, it's worthwhile.\n\nE.g., the CheckQueue does not need to be templated as we know a concrete single type for it, but templating it allows us to mock out the job type and probe the internal execution, which is a good thing.\n\nWhat's the missing interf",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r434055301,434055301,src/test/checkqueue_tests.cpp
hebasto,2020-06-06 06:26:13,"@MarcoFalke @JeremyRubin \nI was confused about this test (I don't know the exact reason of that confusion now).\nThe test has been [restored](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-639992778).",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r436243524,436243524,src/test/checkqueue_tests.cpp
promag,2020-07-31 21:10:30,"e6eb62464cbfcc9f27a9e4d1e7377df30af77a86\n\nnit, drop `()`.",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r463844731,463844731,src/checkqueue.h
promag,2020-07-31 21:15:57,"e6eb62464cbfcc9f27a9e4d1e7377df30af77a86\n\nThese could be guarded by `mutex` too? At least `m_request_stop` already is.",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r463848516,463848516,src/checkqueue.h
promag,2020-07-31 21:16:49,"e6eb62464cbfcc9f27a9e4d1e7377df30af77a86\n\nnit, `&& ! m_request_stop`",https://github.com/bitcoin/bitcoin/pull/18710#discussion_r463849119,463849119,src/checkqueue.h
hebasto,2020-08-02 08:25:47,Why? `m_worker_threads` is accessed from one thread only.,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r464049044,464049044,src/checkqueue.h
hebasto,2020-08-02 09:53:52,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667653036).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r464057341,464057341,src/checkqueue.h
hebasto,2020-08-02 09:54:03,[Updated](https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-667653036).,https://github.com/bitcoin/bitcoin/pull/18710#discussion_r464057363,464057363,src/checkqueue.h
