[
  {
    "sha": "0ef938685b5c079a6f5a98daf0e3865d718d817b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWY5Mzg2ODViNWMwNzlhNmY1YTk4ZGFmMGUzODY1ZDcxOGQ4MTdi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-21T06:23:42Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-24T03:53:39Z"
      },
      "message": "refactor: Use member initializers in CCheckQueue",
      "tree": {
        "sha": "b4583e9933a57d781e8d7730c7f750ae0ef5e4c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4583e9933a57d781e8d7730c7f750ae0ef5e4c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ef938685b5c079a6f5a98daf0e3865d718d817b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9sGEMACgkQQQEIES5+\nqB87ZhAAou+Lx8TLwPaLgpiEzkFzXh/WWHAvy4M82qdFN6MWnt9olKNFycDmWkcS\n9zscLyOrEEWW2uA/jLJ4oeYkVJpiJFCg+RAd26v8Q99fze38xiQNJL2yO008Rv5s\n96sCJ5gh3POEvn7vXQBpMlbgTUMWoN6WPpVpbtIcJkiHoAdst31hluk8NxaM3Lxs\niwqOhiG1xp3aqzk2PTh+yw4Em8TmNJgYSCRyymGnmaztWelLo2GnCsXQUlwuZVNi\nvSjO2g2qawe6EIvedvGNhKYsPKEuvuwprg8EymTR6DtN7BgyF7gFtDuNyNtU89J+\nXGeikvaMZb/zAHFj+ZgLU9XoMW2rs5OD2474jGoOTbZ1YXAvxmIy5jNGQ6Dxnsod\nh9XZJP9d8BJ/rNxcbE3PhrJ5ML1LhPuYyswTOTyVn6+U8imTyDmFCwT+ui5wUWcf\nKJJcPrA9ty3Uf4QaA6m/1n1g/eeGDha3rawIYSWKZrSBk6o/f2oTerg17zIDkaPR\nolAi4fFEwIfE2QGfTSR85kLTqIoSmbWlW3n9GwMgxp9NNjzSiCz5s4XGR25lG4iy\nXl3qu48qfO9Xny433C7YhWPADwNURkMzNFH7NA+joWp4UFNcGVmSmsOwGoJ0qzoo\nnIlk99ZzKtxoCgDHr7ELv+zHS/dSn6+H/HMPlG7ab0B5V7KFsxA=\n=M/dG\n-----END PGP SIGNATURE-----",
        "payload": "tree b4583e9933a57d781e8d7730c7f750ae0ef5e4c4\nparent 1b313cacc99a1b372238f9036abed5491f9d28f7\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597991022 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1600919619 +0300\n\nrefactor: Use member initializers in CCheckQueue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef938685b5c079a6f5a98daf0e3865d718d817b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef938685b5c079a6f5a98daf0e3865d718d817b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef938685b5c079a6f5a98daf0e3865d718d817b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b313cacc99a1b372238f9036abed5491f9d28f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b313cacc99a1b372238f9036abed5491f9d28f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b313cacc99a1b372238f9036abed5491f9d28f7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3e22cd8c60024bb16a5e34d1993c7ebce646e4fb",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef938685b5c079a6f5a98daf0e3865d718d817b/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef938685b5c079a6f5a98daf0e3865d718d817b/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=0ef938685b5c079a6f5a98daf0e3865d718d817b",
        "patch": "@@ -44,23 +44,23 @@ class CCheckQueue\n     std::vector<T> queue;\n \n     //! The number of workers (including the master) that are idle.\n-    int nIdle;\n+    int nIdle{0};\n \n     //! The total number of workers (including the master).\n-    int nTotal;\n+    int nTotal{0};\n \n     //! The temporary evaluation result.\n-    bool fAllOk;\n+    bool fAllOk{true};\n \n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n      * worker's own batches.\n      */\n-    unsigned int nTodo;\n+    unsigned int nTodo{0};\n \n     //! The maximum number of elements to be processed in one batch\n-    unsigned int nBatchSize;\n+    const unsigned int nBatchSize;\n \n     /** Internal function that does bulk of the verification work. */\n     bool Loop(bool fMaster = false)\n@@ -127,7 +127,10 @@ class CCheckQueue\n     boost::mutex ControlMutex;\n \n     //! Create a new check queue\n-    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), nBatchSize(nBatchSizeIn) {}\n+    explicit CCheckQueue(unsigned int nBatchSizeIn)\n+        : nBatchSize(nBatchSizeIn)\n+    {\n+    }\n \n     //! Worker thread\n     void Thread()"
      }
    ]
  },
  {
    "sha": "01511776acb0c7ec216dc9c8112531067763f1cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTUxMTc3NmFjYjBjN2VjMjE2ZGM5YzgxMTI1MzEwNjc3NjNmMWNi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-21T06:24:05Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-24T03:55:33Z"
      },
      "message": "Add local thread pool to CCheckQueue",
      "tree": {
        "sha": "4affd73ec2317bc425f8731600b98bb57dd232e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4affd73ec2317bc425f8731600b98bb57dd232e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01511776acb0c7ec216dc9c8112531067763f1cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9sGLUACgkQQQEIES5+\nqB8ZGBAAlvazLlzMwGuhPuFSncAOBx6nEUXUSoeLeHCcATPZxyk9U39QBMlwQtS6\nO2YJbhYw5/cA5s5a7evvv66SVj/P6GexNzpzTpdGDYg0a2q3RmyZcEPOVUzVKr5b\nnWK2n/EAn8ok3DdIQJcU9AZO0Tonrrvy2iz0IAm8z7NpAMnpMgn+EhcuOeKqBEGT\nxtWxIE0DFu9TB1+5QRMGXPyzUy6rRBgkgGD8mIRP5a3NV0ghvd8SMWlekeyXY8UY\nSKosx/9KyrdGUdnKbcFfzejWmJwvD268CPQ+uePA4GhpWP8HpO47z9MtEzHaAJ+o\n40ojO6nhz7lLg25+SCncvRCzi1q2gOqTB+ojdpDhLpOpbB6zuO+zOz1gB3+C3TB9\ns48jFHluTUIybrsXEmLRwsVA9XgKhofixljYc1bF8qAvE5Zqr86APDMVLA88/Vb8\nI/S5JghcXOQkmoBUgP1xJ90AOds1CddiXiStqZjnQcHqYr4rnrtDEOz87mmSaub3\nTDCCbzPqLYEkdOld8IdSqWMvB3zG0m7mkMyRcO+99n/v8oBnOvCBunHGWH0W3Gdf\nnvJHFJmT1TYTPtK55FQ4fA8R/UPTqpRrdH49+uywOxLrrRkxmnMtqTJEo6ZthzoL\nH9kItD3oskk5D0GMi2qS9orzqhmk/zWw8V9ObgQGd3J+SI5sfA4=\n=KUWE\n-----END PGP SIGNATURE-----",
        "payload": "tree 4affd73ec2317bc425f8731600b98bb57dd232e8\nparent 0ef938685b5c079a6f5a98daf0e3865d718d817b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597991045 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1600919733 +0300\n\nAdd local thread pool to CCheckQueue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01511776acb0c7ec216dc9c8112531067763f1cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01511776acb0c7ec216dc9c8112531067763f1cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01511776acb0c7ec216dc9c8112531067763f1cb/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ef938685b5c079a6f5a98daf0e3865d718d817b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef938685b5c079a6f5a98daf0e3865d718d817b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef938685b5c079a6f5a98daf0e3865d718d817b"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 64,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fcd6e87af3cf1ab0ee691a92eec842604773ad6a",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 48,
        "deletions": 4,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01511776acb0c7ec216dc9c8112531067763f1cb/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01511776acb0c7ec216dc9c8112531067763f1cb/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=01511776acb0c7ec216dc9c8112531067763f1cb",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_CHECKQUEUE_H\n \n #include <sync.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n \n #include <algorithm>\n #include <vector>\n@@ -62,8 +64,11 @@ class CCheckQueue\n     //! The maximum number of elements to be processed in one batch\n     const unsigned int nBatchSize;\n \n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop{false};\n+\n     /** Internal function that does bulk of the verification work. */\n-    bool Loop(bool fMaster = false)\n+    bool Loop(bool fMaster)\n     {\n         boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n@@ -85,7 +90,7 @@ class CCheckQueue\n                     nTotal++;\n                 }\n                 // logically, the do loop starts here\n-                while (queue.empty()) {\n+                while (queue.empty() && !m_request_stop) {\n                     if (fMaster && nTodo == 0) {\n                         nTotal--;\n                         bool fRet = fAllOk;\n@@ -98,6 +103,10 @@ class CCheckQueue\n                     cond.wait(lock); // wait\n                     nIdle--;\n                 }\n+                if (m_request_stop) {\n+                    return false;\n+                }\n+\n                 // Decide how many work units to process now.\n                 // * Do not try to do everything at once, but aim for increasingly smaller batches so\n                 //   all workers finish approximately simultaneously.\n@@ -132,16 +141,34 @@ class CCheckQueue\n     {\n     }\n \n+    //! Create a pool of new worker threads.\n+    void StartWorkerThreads(const int threads_num)\n+    {\n+        {\n+            boost::unique_lock<boost::mutex> lock(mutex);\n+            nIdle = 0;\n+            nTotal = 0;\n+            fAllOk = true;\n+        }\n+        assert(m_worker_threads.empty());\n+        for (int n = 0; n < threads_num; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"scriptch.%i\", n));\n+                Loop(false /* worker thread */);\n+            });\n+        }\n+    }\n+\n     //! Worker thread\n     void Thread()\n     {\n-        Loop();\n+        Loop(false /* worker thread */);\n     }\n \n     //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {\n-        return Loop(true);\n+        return Loop(true /* master thread */);\n     }\n \n     //! Add a batch of checks to the queue\n@@ -159,8 +186,25 @@ class CCheckQueue\n             condWorker.notify_all();\n     }\n \n+    //! Stop all of the worker threads.\n+    void StopWorkerThreads()\n+    {\n+        {\n+            boost::unique_lock<boost::mutex> lock(mutex);\n+            m_request_stop = true;\n+        }\n+        condWorker.notify_all();\n+        for (std::thread& t : m_worker_threads) {\n+            t.join();\n+        }\n+        m_worker_threads.clear();\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        m_request_stop = false;\n+    }\n+\n     ~CCheckQueue()\n     {\n+        assert(m_worker_threads.empty());\n     }\n \n };"
      },
      {
        "sha": "bc99994a4dde257a45bc54f6a6dbd67f28c04e3f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01511776acb0c7ec216dc9c8112531067763f1cb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01511776acb0c7ec216dc9c8112531067763f1cb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=01511776acb0c7ec216dc9c8112531067763f1cb",
        "patch": "@@ -224,6 +224,7 @@ void Shutdown(NodeContext& node)\n     if (g_load_block.joinable()) g_load_block.join();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n+    StopScriptCheckWorkerThreads();\n \n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n@@ -1307,9 +1308,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     LogPrintf(\"Script verification uses %d additional threads\\n\", script_threads);\n     if (script_threads >= 1) {\n         g_parallel_script_checks = true;\n-        for (int i = 0; i < script_threads; ++i) {\n-            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n-        }\n+        StartScriptCheckWorkerThreads(script_threads);\n     }\n \n     assert(!node.scheduler);"
      },
      {
        "sha": "74498c6c7936f1e4170ce44bbd8109ae4b1bf27b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01511776acb0c7ec216dc9c8112531067763f1cb/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01511776acb0c7ec216dc9c8112531067763f1cb/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=01511776acb0c7ec216dc9c8112531067763f1cb",
        "patch": "@@ -162,9 +162,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n-    for (int i = 0; i < script_check_threads; ++i) {\n-        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n-    }\n+    StartScriptCheckWorkerThreads(script_check_threads);\n     g_parallel_script_checks = true;\n \n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n@@ -182,6 +180,7 @@ TestingSetup::~TestingSetup()\n     if (m_node.scheduler) m_node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n+    StopScriptCheckWorkerThreads();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     m_node.connman.reset();"
      },
      {
        "sha": "046583fa5eac7e0c5164c61dcd43d7148b722185",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01511776acb0c7ec216dc9c8112531067763f1cb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01511776acb0c7ec216dc9c8112531067763f1cb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=01511776acb0c7ec216dc9c8112531067763f1cb",
        "patch": "@@ -1817,9 +1817,14 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-void ThreadScriptCheck(int worker_num) {\n-    util::ThreadRename(strprintf(\"scriptch.%i\", worker_num));\n-    scriptcheckqueue.Thread();\n+void StartScriptCheckWorkerThreads(int threads_num)\n+{\n+    scriptcheckqueue.StartWorkerThreads(threads_num);\n+}\n+\n+void StopScriptCheckWorkerThreads()\n+{\n+    scriptcheckqueue.StopWorkerThreads();\n }\n \n VersionBitsCache versionbitscache GUARDED_BY(cs_main);"
      },
      {
        "sha": "df3b16dc15b931697047b4ca1032bc697ed11bfc",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01511776acb0c7ec216dc9c8112531067763f1cb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01511776acb0c7ec216dc9c8112531067763f1cb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=01511776acb0c7ec216dc9c8112531067763f1cb",
        "patch": "@@ -158,8 +158,10 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman);\n-/** Run an instance of the script checking thread */\n-void ThreadScriptCheck(int worker_num);\n+/** Run instances of script checking worker threads */\n+void StartScriptCheckWorkerThreads(int threads_num);\n+/** Stop all of the script checking worker threads */\n+void StopScriptCheckWorkerThreads();\n /**\n  * Return transaction from the block at block_index.\n  * If block_index is not provided, fall back to mempool."
      }
    ]
  },
  {
    "sha": "dba30695fc42f45828db008e7e5b81cb2b5d8551",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmEzMDY5NWZjNDJmNDU4MjhkYjAwOGU3ZTViODFjYjJiNWQ4NTUx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-21T06:24:32Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-24T03:55:33Z"
      },
      "message": "test: Use CCheckQueue local thread pool",
      "tree": {
        "sha": "edd9ef7f29dc86ccf52404cf870681ecde3bc5f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edd9ef7f29dc86ccf52404cf870681ecde3bc5f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba30695fc42f45828db008e7e5b81cb2b5d8551",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9sGLUACgkQQQEIES5+\nqB+9vxAAsDxZl2OSc4dDX2rvZm92n/dSXPfGv6C8sAxB8sOyd5eJRAw/3jZ1G+v5\nlK/REDgzbd45h8NEfpQWRoNIKsO5DTZFy/26olASnuZX+VfauKmXRgAmwzvh44Ie\nXaks3yCHL6kk0Hbzsq4neHnmEnMymWOB6iP0bM+ftaWPvg1u+/CsjdE4XUXqwhvx\nyZH8bytiilb7ej78Ll/VqhpyiqzXJnNHuiHBWChVNWK2vr2aACa/SJ3Fj3EklsbW\nr+dxiYEEFvjD5IkQKj/8iKNV6KmdNCEa8ZchIRAcsa5LILI1k5MjCHtHOeJZH4FZ\nhduUnkVSkmT2CUfhg6dWWZEaomLPLIkcqWciZhG6EawsEPyeL3uskUxxLk4O4A0/\nO+z4gl4p9T87ZeFkw0uWewE7KK+Cq0/7pXMPIc8P7UY/nWM3WkD+4AexUtZabKo4\nrIut63nM9uH+s9bI9JGGzbbgI3UYX/Pq3TnK+wBngjZmGo32fWDkN9fXrBVPfopa\n9iDswg2JMHOxi3kZtFlEo0w+4qNDnAqRTgREs2Vd12f0ljo96eE+1iMWI47lNxc5\ngMGF24RLujUVmeGjNOghf1WTl2G19sdEy/DdiY7HmFunPYz36BUoi3sHSjA/jeW4\nfNwldWDo+TTShuAX+TmOww0d7RCtDdOnr/Gsm6NaaLu8PbbNQhs=\n=xH34\n-----END PGP SIGNATURE-----",
        "payload": "tree edd9ef7f29dc86ccf52404cf870681ecde3bc5f6\nparent 01511776acb0c7ec216dc9c8112531067763f1cb\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597991072 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1600919733 +0300\n\ntest: Use CCheckQueue local thread pool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba30695fc42f45828db008e7e5b81cb2b5d8551",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba30695fc42f45828db008e7e5b81cb2b5d8551",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba30695fc42f45828db008e7e5b81cb2b5d8551/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01511776acb0c7ec216dc9c8112531067763f1cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01511776acb0c7ec216dc9c8112531067763f1cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01511776acb0c7ec216dc9c8112531067763f1cb"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 14,
      "deletions": 45
    },
    "files": [
      {
        "sha": "4ce5b30d06dfe0f828c6535783d323ee8a2247d2",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 39,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba30695fc42f45828db008e7e5b81cb2b5d8551/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba30695fc42f45828db008e7e5b81cb2b5d8551/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=dba30695fc42f45828db008e7e5b81cb2b5d8551",
        "patch": "@@ -148,10 +148,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{small_queue->Thread();});\n-    }\n+    small_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n     for (const size_t i : range) {\n@@ -168,8 +165,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n             BOOST_REQUIRE_EQUAL(FakeCheckCheckCompletion::n_calls, i);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    small_queue->StopWorkerThreads();\n }\n \n /** Test that 0 checks is correct\n@@ -212,11 +208,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n-\n-    boost::thread_group tg;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     for (size_t i = 0; i < 1001; ++i) {\n         CCheckQueueControl<FailingCheck> control(fail_queue.get());\n@@ -237,18 +229,14 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n             BOOST_REQUIRE(success);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    fail_queue->StopWorkerThreads();\n }\n // Test that a block validation which fails does not interfere with\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     for (auto times = 0; times < 10; ++times) {\n         for (const bool end_fails : {true, false}) {\n@@ -263,8 +251,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n             BOOST_REQUIRE(r != end_fails);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    fail_queue->StopWorkerThreads();\n }\n \n // Test that unique checks are actually all called individually, rather than\n@@ -273,11 +260,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n     auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-\n-    }\n+    queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     size_t COUNT = 100000;\n     size_t total = COUNT;\n@@ -300,8 +283,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n         }\n         BOOST_REQUIRE(r);\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    queue->StopWorkerThreads();\n }\n \n \n@@ -313,10 +295,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n     auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-    }\n+    queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     for (size_t i = 0; i < 1000; ++i) {\n         size_t total = i;\n         {\n@@ -335,20 +314,16 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         }\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    queue->StopWorkerThreads();\n }\n \n // Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n     auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n     bool fails = false;\n-    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-        tg.create_thread([&]{queue->Thread();});\n-    }\n+    queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     std::thread t0([&]() {\n         CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n         std::vector<FrozenCleanupCheck> vChecks(1);\n@@ -378,9 +353,8 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     FrozenCleanupCheck::cv.notify_one();\n     // Wait for control to finish\n     t0.join();\n-    tg.interrupt_all();\n-    tg.join_all();\n     BOOST_REQUIRE(!fails);\n+    queue->StopWorkerThreads();\n }\n \n \n@@ -445,4 +419,3 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n     }\n }\n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "7afc8ccc319c911c09e98e9c13d00bdc814556f6",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba30695fc42f45828db008e7e5b81cb2b5d8551/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba30695fc42f45828db008e7e5b81cb2b5d8551/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=dba30695fc42f45828db008e7e5b81cb2b5d8551",
        "patch": "@@ -427,12 +427,10 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n-    boost::thread_group threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n     CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n \n-    for (int i=0; i<20; i++)\n-        threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n+    scriptcheckqueue.StartWorkerThreads(20);\n \n     std::vector<Coin> coins;\n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n@@ -454,9 +452,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     bool controlCheck = control.Wait();\n     assert(controlCheck);\n-\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    scriptcheckqueue.StopWorkerThreads();\n }\n \n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)"
      }
    ]
  },
  {
    "sha": "6784ac471bb32b6bb8e2de60986f123eb4990706",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzg0YWM0NzFiYjMyYjZiYjhlMmRlNjA5ODZmMTIzZWI0OTkwNzA2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-21T06:24:48Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-24T03:55:34Z"
      },
      "message": "bench: Use CCheckQueue local thread pool",
      "tree": {
        "sha": "e7562ee6a686db825ecc79b9a210f9dee6fdd120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7562ee6a686db825ecc79b9a210f9dee6fdd120"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6784ac471bb32b6bb8e2de60986f123eb4990706",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9sGLYACgkQQQEIES5+\nqB8MsBAAru9MRMUM7l9JbmgW8ULo2SQ9lWFBTMQz8Qut9ms8ru1HFBNmhRtIQT3w\noAJFm29w54MTo9ZcryAWtOMgWrQR8kiuMfgw0e+NGCC+AxJCvQQ126xQ8kApkeWS\nInJAOov2bM8RLj6W62KN8awhf8jqrSerUUYUuoe9hOcnHIsY+CtDESwiBCuwOLpU\n7DkT6f6PL8GYEnDYkJbp1fovPSC3bk5NEM/91t4SLMiad1A7kmAVrCRSzf+qEpxx\ntBi7uEa9CCBbqUSQdNfPwlrRUhNLVHw9H9z7oOx9q0J0iN1YaaAE9418H7KaWnb0\nu0/VjTMClD0mOSUCJXX+PFPThFiwzKKigjnWW00rj1Afaql1NzWTIF5bpUwafTbf\n4K3+P5rkc8xWbicLFKohE0eOXy4izEQdgkDr3aii0Ls7YzkQwp29RTZFjzyS8kJL\nvYKdjPMmN+B44dLD2EP97JIArRoTMnTF/XHbRL+sbKqbK1V/ec5KCYsqgJi0ICSi\nwPoDJdwaNTMYitjLspvqc6p4/fjhHq6Ve7KM1NaVoWNcnfwsQf4T0o0dWaw9yS6Q\nUy15zkKD1j4vdeqysbMhvdcHIgPP3N2reiqggL9R3zuL4uWRnjBr+iXA78w1Vgoj\nqX3ua3Kdyp7TB++Tnz4IfTaquwR4SiQwxpj6Sce0QPyaYTcS0cE=\n=Navu\n-----END PGP SIGNATURE-----",
        "payload": "tree e7562ee6a686db825ecc79b9a210f9dee6fdd120\nparent dba30695fc42f45828db008e7e5b81cb2b5d8551\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597991088 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1600919734 +0300\n\nbench: Use CCheckQueue local thread pool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6784ac471bb32b6bb8e2de60986f123eb4990706",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6784ac471bb32b6bb8e2de60986f123eb4990706",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6784ac471bb32b6bb8e2de60986f123eb4990706/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dba30695fc42f45828db008e7e5b81cb2b5d8551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba30695fc42f45828db008e7e5b81cb2b5d8551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dba30695fc42f45828db008e7e5b81cb2b5d8551"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 2,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d7b8c1badc66ee8b8d2a1c837a778d01b2c977c3",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6784ac471bb32b6bb8e2de60986f123eb4990706/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6784ac471bb32b6bb8e2de60986f123eb4990706/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=6784ac471bb32b6bb8e2de60986f123eb4990706",
        "patch": "@@ -10,8 +10,6 @@\n #include <random.h>\n #include <util/system.h>\n \n-#include <boost/thread/thread.hpp>\n-\n #include <vector>\n \n static const size_t BATCHES = 101;\n@@ -44,12 +42,9 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::Bench& bench)\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n     CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n-    boost::thread_group tg;\n     // The main thread should be counted to prevent thread oversubscription, and\n     // to decrease the variance of benchmark results.\n-    for (auto x = 0; x < GetNumCores() - 1; ++x) {\n-       tg.create_thread([&]{queue.Thread();});\n-    }\n+    queue.StartWorkerThreads(GetNumCores() - 1);\n \n     // create all the data once, then submit copies in the benchmark.\n     FastRandomContext insecure_rand(true);\n@@ -70,8 +65,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::Bench& bench)\n         // it is done explicitly here for clarity\n         control.Wait();\n     });\n-    tg.interrupt_all();\n-    tg.join_all();\n+    queue.StopWorkerThreads();\n     ECC_Stop();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob);"
      },
      {
        "sha": "83b371fd4299f4ea17f4c1812d135a1d5db1163a",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6784ac471bb32b6bb8e2de60986f123eb4990706/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6784ac471bb32b6bb8e2de60986f123eb4990706/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=6784ac471bb32b6bb8e2de60986f123eb4990706",
        "patch": "@@ -159,12 +159,6 @@ class CCheckQueue\n         }\n     }\n \n-    //! Worker thread\n-    void Thread()\n-    {\n-        Loop(false /* worker thread */);\n-    }\n-\n     //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {"
      }
    ]
  },
  {
    "sha": "bb6fcc75d1ec94b733d1477c816351c50be5faf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjZmY2M3NWQxZWM5NGI3MzNkMTQ3N2M4MTYzNTFjNTBiZTVmYWY5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-21T06:25:07Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-24T03:55:34Z"
      },
      "message": "refactor: Drop boost::thread stuff in CCheckQueue",
      "tree": {
        "sha": "a9a00f07504cb9f41f521ce2f46662c6404b5e53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a00f07504cb9f41f521ce2f46662c6404b5e53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb6fcc75d1ec94b733d1477c816351c50be5faf9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9sGLYACgkQQQEIES5+\nqB/oiw//fa8FQI6MPJUUQVNttSRPuC+DHoYbPUxfGxWr2zlLBuDWS3ZQO3REdAR1\nm0vLJD37S5DF95m9MGyS+ZGFlidU89v51cc0PeyzQ8rTZD/945imt8h0Abw9IUzd\nRNUecWR+6O+EDe9RoVg3URN1rzcBcyj2UZ7EFIkAmeA2IHXsiPt5e3RP0HDBck3H\nL3fUDE9HkdyRMFog31jdG0SdHOymQ2kdYFurUn42axnn1pKXRR66ZcwBYxlA+jNi\nhUKMjiOgnv67ee9Gs/9KKCj5X2MSjllKxUyxtcj51gP+diaz4nuPfiXkJisVy5/j\naNY+/KX5rmfZLADeJYxFqENFh1cxmybIwW/wla06F79iZhJHc2JVPAKgGYfC/Xse\nR/iauQdpkLdeAT1Zxrb0MSuH5QXwu730UPym83eVGy/N4/5ng2xg3V+cdLRjlNC5\nqbPoT68dB17W47R7mtgbWoJLvrrMm3KXwRnJ1EnljkGfvprpCI3BmXONHfHe3HzW\nI1PnYJKM2V+Z33eOn5zfmbXPF6gLjnQtjPoCyqiYuerbWpkjE34pozT89ILchOSV\nkpImPWzKaZGrEskQmfNdK5a1SJPXPYgDu7IojoNAFcd4SsMnh6QxXkHVNvfO/RIn\nYu0iFhIWG3wlt6bXamxmO9+ybl03zrDQJRjwVbcdH53K6jeFv6c=\n=mQ/+\n-----END PGP SIGNATURE-----",
        "payload": "tree a9a00f07504cb9f41f521ce2f46662c6404b5e53\nparent 6784ac471bb32b6bb8e2de60986f123eb4990706\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597991107 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1600919734 +0300\n\nrefactor: Drop boost::thread stuff in CCheckQueue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6fcc75d1ec94b733d1477c816351c50be5faf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6fcc75d1ec94b733d1477c816351c50be5faf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6fcc75d1ec94b733d1477c816351c50be5faf9/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6784ac471bb32b6bb8e2de60986f123eb4990706",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6784ac471bb32b6bb8e2de60986f123eb4990706",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6784ac471bb32b6bb8e2de60986f123eb4990706"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 25,
      "deletions": 33
    },
    "files": [
      {
        "sha": "4ceeb3600a364803f735e815f6b8ad0637094d3e",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 23,
        "deletions": 30,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6fcc75d1ec94b733d1477c816351c50be5faf9/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6fcc75d1ec94b733d1477c816351c50be5faf9/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=bb6fcc75d1ec94b733d1477c816351c50be5faf9",
        "patch": "@@ -12,9 +12,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n-\n template <typename T>\n class CCheckQueueControl;\n \n@@ -33,58 +30,58 @@ class CCheckQueue\n {\n private:\n     //! Mutex to protect the inner state\n-    boost::mutex mutex;\n+    Mutex m_mutex;\n \n     //! Worker threads block on this when out of work\n-    boost::condition_variable condWorker;\n+    std::condition_variable m_worker_cv;\n \n     //! Master thread blocks on this when out of work\n-    boost::condition_variable condMaster;\n+    std::condition_variable m_master_cv;\n \n     //! The queue of elements to be processed.\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n-    std::vector<T> queue;\n+    std::vector<T> queue GUARDED_BY(m_mutex);\n \n     //! The number of workers (including the master) that are idle.\n-    int nIdle{0};\n+    int nIdle GUARDED_BY(m_mutex){0};\n \n     //! The total number of workers (including the master).\n-    int nTotal{0};\n+    int nTotal GUARDED_BY(m_mutex){0};\n \n     //! The temporary evaluation result.\n-    bool fAllOk{true};\n+    bool fAllOk GUARDED_BY(m_mutex){true};\n \n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n      * worker's own batches.\n      */\n-    unsigned int nTodo{0};\n+    unsigned int nTodo GUARDED_BY(m_mutex){0};\n \n     //! The maximum number of elements to be processed in one batch\n     const unsigned int nBatchSize;\n \n     std::vector<std::thread> m_worker_threads;\n-    bool m_request_stop{false};\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n \n     /** Internal function that does bulk of the verification work. */\n     bool Loop(bool fMaster)\n     {\n-        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n+        std::condition_variable& cond = fMaster ? m_master_cv : m_worker_cv;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n         bool fOk = true;\n         do {\n             {\n-                boost::unique_lock<boost::mutex> lock(mutex);\n+                WAIT_LOCK(m_mutex, lock);\n                 // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n                 if (nNow) {\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n                         // We processed the last element; inform the master it can exit and return the result\n-                        condMaster.notify_one();\n+                        m_master_cv.notify_one();\n                 } else {\n                     // first iteration\n                     nTotal++;\n@@ -115,7 +112,7 @@ class CCheckQueue\n                 nNow = std::max(1U, std::min(nBatchSize, (unsigned int)queue.size() / (nTotal + nIdle + 1)));\n                 vChecks.resize(nNow);\n                 for (unsigned int i = 0; i < nNow; i++) {\n-                    // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n+                    // We want the lock on the m_mutex to be as short as possible, so swap jobs from the global\n                     // queue to the local batch vector instead of copying.\n                     vChecks[i].swap(queue.back());\n                     queue.pop_back();\n@@ -133,7 +130,7 @@ class CCheckQueue\n \n public:\n     //! Mutex to ensure only one concurrent CCheckQueueControl\n-    boost::mutex ControlMutex;\n+    Mutex m_control_mutex;\n \n     //! Create a new check queue\n     explicit CCheckQueue(unsigned int nBatchSizeIn)\n@@ -145,7 +142,7 @@ class CCheckQueue\n     void StartWorkerThreads(const int threads_num)\n     {\n         {\n-            boost::unique_lock<boost::mutex> lock(mutex);\n+            LOCK(m_mutex);\n             nIdle = 0;\n             nTotal = 0;\n             fAllOk = true;\n@@ -168,32 +165,28 @@ class CCheckQueue\n     //! Add a batch of checks to the queue\n     void Add(std::vector<T>& vChecks)\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        LOCK(m_mutex);\n         for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }\n         nTodo += vChecks.size();\n         if (vChecks.size() == 1)\n-            condWorker.notify_one();\n+            m_worker_cv.notify_one();\n         else if (vChecks.size() > 1)\n-            condWorker.notify_all();\n+            m_worker_cv.notify_all();\n     }\n \n     //! Stop all of the worker threads.\n     void StopWorkerThreads()\n     {\n-        {\n-            boost::unique_lock<boost::mutex> lock(mutex);\n-            m_request_stop = true;\n-        }\n-        condWorker.notify_all();\n+        WITH_LOCK(m_mutex, m_request_stop = true);\n+        m_worker_cv.notify_all();\n         for (std::thread& t : m_worker_threads) {\n             t.join();\n         }\n         m_worker_threads.clear();\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        m_request_stop = false;\n+        WITH_LOCK(m_mutex, m_request_stop = false);\n     }\n \n     ~CCheckQueue()\n@@ -222,7 +215,7 @@ class CCheckQueueControl\n     {\n         // passed queue is supposed to be unused, or nullptr\n         if (pqueue != nullptr) {\n-            ENTER_CRITICAL_SECTION(pqueue->ControlMutex);\n+            ENTER_CRITICAL_SECTION(pqueue->m_control_mutex);\n         }\n     }\n \n@@ -246,7 +239,7 @@ class CCheckQueueControl\n         if (!fDone)\n             Wait();\n         if (pqueue != nullptr) {\n-            LEAVE_CRITICAL_SECTION(pqueue->ControlMutex);\n+            LEAVE_CRITICAL_SECTION(pqueue->m_control_mutex);\n         }\n     }\n };"
      },
      {
        "sha": "996bf4de5d42acc81683d97b85afa2f29fb6c837",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6fcc75d1ec94b733d1477c816351c50be5faf9/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6fcc75d1ec94b733d1477c816351c50be5faf9/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=bb6fcc75d1ec94b733d1477c816351c50be5faf9",
        "patch": "@@ -342,7 +342,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     }\n     // Try to get control of the queue a bunch of times\n     for (auto x = 0; x < 100 && !fails; ++x) {\n-        fails = queue->ControlMutex.try_lock();\n+        fails = queue->m_control_mutex.try_lock();\n     }\n     {\n         // Unfreeze (we need lock n case of spurious wakeup)\n@@ -405,7 +405,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n             cv.wait(l, [&](){return has_lock;});\n             bool fails = false;\n             for (auto x = 0; x < 100 && !fails; ++x) {\n-                fails = queue->ControlMutex.try_lock();\n+                fails = queue->m_control_mutex.try_lock();\n             }\n             has_tried = true;\n             cv.notify_one();"
      },
      {
        "sha": "e6885904459e845d819fdaa6d49204a04bd7edab",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6fcc75d1ec94b733d1477c816351c50be5faf9/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6fcc75d1ec94b733d1477c816351c50be5faf9/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=bb6fcc75d1ec94b733d1477c816351c50be5faf9",
        "patch": "@@ -69,7 +69,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/signals2/signal.hpp\n     boost/test/unit_test.hpp\n     boost/thread/condition_variable.hpp\n-    boost/thread/mutex.hpp\n     boost/thread/shared_mutex.hpp\n     boost/thread/thread.hpp\n     boost/variant.hpp"
      }
    ]
  }
]