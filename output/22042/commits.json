[
  {
    "sha": "881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODFhM2UyZTE3YzVhNmZkZmZiMTZhNDdhMmVhZmY5MDI5ZjI2MWU1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2021-05-24T10:58:49Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2021-05-25T23:33:09Z"
      },
      "message": "Replace size/weight estimate tuple with struct for named fields",
      "tree": {
        "sha": "82294829f03ca21d696be6585cf7a77adc577263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82294829f03ca21d696be6585cf7a77adc577263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ad1b8899bfbf87ca4f06c20e8285bc8be31bbe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ad1b8899bfbf87ca4f06c20e8285bc8be31bbe8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ad1b8899bfbf87ca4f06c20e8285bc8be31bbe8"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "30fef50c3b162478b2efd4cd007c9cfb0c9f92fc",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
        "patch": "@@ -190,7 +190,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument.\n         // We calculate this here to avoid compiler warning on the cs_wallet lock\n-        const int64_t maxTxSize = CalculateMaximumSignedTxSize(*wtx.tx, &wallet).first;\n+        const int64_t maxTxSize{CalculateMaximumSignedTxSize(*wtx.tx, &wallet).vsize};\n         Result res = CheckFeeRate(wallet, wtx, *new_coin_control.m_feerate, maxTxSize, errors);\n         if (res != Result::OK) {\n             return res;"
      },
      {
        "sha": "6c97a485612b5f2bbc32631e79c6ecc3d415adc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
        "patch": "@@ -1627,15 +1627,14 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n     return true;\n }\n \n-// Returns pair of vsize and weight\n-std::pair<int64_t, int64_t> CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n+TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;\n     for (const CTxIn& input : tx.vin) {\n         const auto mi = wallet->mapWallet.find(input.prevout.hash);\n         // Can not estimate size without knowing the input details\n         if (mi == wallet->mapWallet.end()) {\n-            return std::make_pair(-1, -1);\n+            return TxSize{-1, -1};\n         }\n         assert(input.prevout.n < mi->second.tx->vout.size());\n         txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n@@ -1644,16 +1643,16 @@ std::pair<int64_t, int64_t> CalculateMaximumSignedTxSize(const CTransaction &tx,\n }\n \n // txouts needs to be in the order of tx.vin\n-std::pair<int64_t, int64_t> CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)\n+TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)\n {\n     CMutableTransaction txNew(tx);\n     if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n-        return std::make_pair(-1, -1);\n+        return TxSize{-1, -1};\n     }\n     CTransaction ctx(txNew);\n     int64_t vsize = GetVirtualTransactionSize(ctx);\n     int64_t weight = GetTransactionWeight(ctx);\n-    return std::make_pair(vsize, weight);\n+    return TxSize{vsize, weight};\n }\n \n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n@@ -2820,7 +2819,7 @@ bool CWallet::CreateTransactionInternal(\n \n     CMutableTransaction txNew;\n     FeeCalculation feeCalc;\n-    std::pair<int64_t, int64_t> tx_sizes;\n+    TxSize tx_sizes;\n     int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n@@ -2967,7 +2966,7 @@ bool CWallet::CreateTransactionInternal(\n \n             // Calculate the transaction fee\n             tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-            nBytes = tx_sizes.first;\n+            nBytes = tx_sizes.vsize;\n             if (nBytes < 0) {\n                 error = _(\"Signing transaction failed\");\n                 return false;\n@@ -2992,7 +2991,7 @@ bool CWallet::CreateTransactionInternal(\n \n                 // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n                 tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n+                nBytes = tx_sizes.vsize;\n                 fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n             }\n \n@@ -3072,7 +3071,7 @@ bool CWallet::CreateTransactionInternal(\n \n         // Limit size\n         if ((sign && GetTransactionWeight(*tx) > MAX_STANDARD_TX_WEIGHT) ||\n-            (!sign && tx_sizes.second > MAX_STANDARD_TX_WEIGHT))\n+            (!sign && tx_sizes.weight > MAX_STANDARD_TX_WEIGHT))\n         {\n             error = _(\"Transaction too large\");\n             return false;"
      },
      {
        "sha": "9a572bc6105c0341e520d246616b4168c628ac23",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/881a3e2e17c5a6fdffb16a47a2eaff9029f261e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=881a3e2e17c5a6fdffb16a47a2eaff9029f261e5",
        "patch": "@@ -1346,12 +1346,17 @@ class WalletRescanReserver\n     }\n };\n \n+struct TxSize {\n+    int64_t vsize{-1};\n+    int64_t weight{-1};\n+};\n+\n /** Calculate the size of the transaction assuming all signatures are max size\n * Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n * NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n * be IsAllFromMe). */\n-std::pair<int64_t, int64_t> CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n-std::pair<int64_t, int64_t> CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n+TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, bool use_max_sig = false) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n+TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n \n //! Add wallet name to persistent configuration so it will be loaded on startup.\n bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);"
      }
    ]
  }
]