[
  {
    "sha": "3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjBlZTNlNTAxMTQzMDQ2MWM3YzYxZjRmMmQ0MDZiZjNjZDhiNTRi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T02:16:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-07T00:44:38Z"
      },
      "message": "Proper indentation for CheckTxInputs and other minor fixes",
      "tree": {
        "sha": "1d0bed138d531c6badc5bd9a3b610974842f6ddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d0bed138d531c6badc5bd9a3b610974842f6ddc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZsJZ5AAoJEIhmwY6hyUSinQ0P/0SSEC3NEHJ3zPzN64y1LYiv\nBeyRi0aVB3Qc0xjrBMt5kpHVacVWhEv6rCT9PY0dwKekldOFfYHYHxNUJC8tiUD4\nwOPagg+A0Vwr9V7kb4UIL3HeZQUjLR8Ze6SQ7bl8r68t6cFGrH7h8CsY7/BW2z8d\n/Te+nUc6Qx2fSYf7LGcd+2FNDzhs9fUYZn2SlQI7HIt6oGQc9mHugux5rHPI4CV6\nI3RPGwU1RQQROGHdt1qe/tcOAPmzUrotLpVZW1YYHdbAds5kjzHeMWRFSUdNNWrX\nq8LljYNMzZtZxl9UovfdrAfhPzjp3i1ciyoGrzU1zvKwcxa4ypMBrKi+h6N45bVE\nVx6ziObVeGHTAKv29wQ/VyrsrfAVF+PJP8OWbEUt0T8Ym6avEivUtN6x1j/C4qDr\nN25IlGNk8iZONGre3zUE+sX3DU8Q4o71+/QKXdXRcMV9IbD49cJ0JP+ytQmowTNH\nanQCxSeBE3fuCWYeosV8/ekDmImlet97XF8zuTdb51fLkUxrfR1TGK0ISEcgoIZT\n+Hfav7nQ/ydW/noa0pGWwTw+qeSTmry8TzoiGmLJ7ve4QawUHd31rpjNLT24om+S\n4udCQcBxhG1ETFP6WlPSMMOZpC/zBN6zNB+PyaF2vT2ZhYQ+UyzOm4WHP+XVmANe\nAAskAVK0rnvTe+lfwfgJ\n=+RNP\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d0bed138d531c6badc5bd9a3b610974842f6ddc\nparent 234ffc677ee58591b139695bf92bbd6f504ee91a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498356981 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1504745078 +0200\n\nProper indentation for CheckTxInputs and other minor fixes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 39,
      "deletions": 37
    },
    "files": [
      {
        "sha": "25647ba6af29f2a315302511070334f0522175d5",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 37,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
        "patch": "@@ -13,7 +13,7 @@\n #include \"chain.h\"\n #include \"coins.h\"\n #include \"utilmoneystr.h\"\n- \n+\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -207,44 +207,46 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n \n bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const Coin& coin = inputs.AccessCoin(prevout);\n-            assert(!coin.IsSpent());\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coin.IsCoinBase()) {\n-                if (nSpendHeight - coin.nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false,\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n-                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coin.out.nValue;\n-            if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+    // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+    // for an attacker to attempt to split the network.\n+    if (!inputs.HaveInputs(tx)) {\n+        return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n+    }\n+\n+    CAmount nValueIn = 0;\n+    CAmount nFees = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n+        const COutPoint &prevout = tx.vin[i].prevout;\n+        const Coin& coin = inputs.AccessCoin(prevout);\n+        assert(!coin.IsSpent());\n+\n+        // If prev is coinbase, check that it's matured\n+        if (coin.IsCoinBase() && nSpendHeight - coin.nHeight < COINBASE_MATURITY) {\n+            return state.Invalid(false,\n+                REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n+        }\n \n+        // Check for negative or overflow input values\n+        nValueIn += coin.out.nValue;\n+        if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn)) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n+    }\n+\n+    if (nValueIn < tx.GetValueOut()) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+    }\n \n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    // Tally transaction fees\n+    CAmount nTxFee = nValueIn - tx.GetValueOut();\n+    if (nTxFee < 0) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+    }\n+    nFees += nTxFee;\n+    if (!MoneyRange(nFees)) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "832e0744cb8b1e1625cdb19b257f97316ac16a90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzJlMDc0NGNiOGIxZTE2MjVjZGIxOWIyNTdmOTczMTZhYzE2YTkw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-08-11T02:42:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-20T21:25:52Z"
      },
      "message": "Optimization: Minimize the number of times it is checked that no money is created\n\nby individual transactions to 2 places (but call only once in each):\n\n- ConnectBlock ( before calculated fees per txs twice )\n- AcceptToMemoryPoolWorker ( before called CheckTxInputs 4 times and calculated\n   fees per tx one extra time )\n\nAlso call tx.GetValueOut() only once per call of CheckTxInputs (instead of 2)",
      "tree": {
        "sha": "401102620abe59c6ab82e9a9008ecece577d81a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/401102620abe59c6ab82e9a9008ecece577d81a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/832e0744cb8b1e1625cdb19b257f97316ac16a90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZwtzjAAoJEIhmwY6hyUSi+doP/12zObZd5SuvPu+vL1JmMNgB\nwnROY3+IRc855l07vwwclB3ZEBZCfAexwB4NEco3YmLGpqgdClWDk2/eQ7YC+N+h\nElIhZJAr7K+M7clMzaEJUDYb5B8v2fl7HdsHPNNy+4yJO72t5mCpDE4q8DDTPPyH\nXQIsUhdyJ5X+lX4EYJxcbGIG+kALMuF7IXPfFVY4MYMLwktx5aRc/VHrPvJ/rp29\ncXWfKSWn08N9hLkjv1ksKmF4Ixk4n3+L9Sru4kaM0pJQfjE+hUWRxsoWIeuDD0ux\nAcLbyuE7X7Hl0jiBwUrij15msx0mn1ivjDnlWhqCBTwI99gWMg7ORn05cJjA3YKb\n4efdY/2suTTQMzh8PEFyYG3UXQ/wj0X1vfTL+EwLQMHsuE9nWZQyrBZulqIOi2IJ\n4YWt450WlYHcZaxTgSuExV/jEStuN7pXA5uFfH2nkRHebxUqS86yQ3foqgMZHa/6\n4HiAiTgA0/iWiVO843xkUwtPq7cIm2tJcp+4FomDryEvlUun/0jUBsqSLA4RiWKV\n9rkjd7ylklj7JWTNF0zic2RSWV5Uk8kQjoJTMIetow6GX4W5mLhaY9w/L9RUH42E\nWgxljYZcd4X+aX6WSBZuLx/OMzOPEIWpsy+/WSGJo2JNKjJPYjdreffZOJq3oJi1\nLkVVWuHz9y8yeecRNcXv\n=9K5D\n-----END PGP SIGNATURE-----",
        "payload": "tree 401102620abe59c6ab82e9a9008ecece577d81a3\nparent 3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1470883356 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1505942752 +0200\n\nOptimization: Minimize the number of times it is checked that no money is created\n\nby individual transactions to 2 places (but call only once in each):\n\n- ConnectBlock ( before calculated fees per txs twice )\n- AcceptToMemoryPoolWorker ( before called CheckTxInputs 4 times and calculated\n   fees per tx one extra time )\n\nAlso call tx.GetValueOut() only once per call of CheckTxInputs (instead of 2)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832e0744cb8b1e1625cdb19b257f97316ac16a90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/832e0744cb8b1e1625cdb19b257f97316ac16a90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832e0744cb8b1e1625cdb19b257f97316ac16a90/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0ee3e5011430461c7c61f4f2d406bf3cd8b54b"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 31,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f2f85edad9185d91043e2ead1dac349b6232e4f7",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "patch": "@@ -205,16 +205,15 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     return true;\n }\n \n-bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)\n {\n-    // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-    // for an attacker to attempt to split the network.\n+    // are the actual inputs available?\n     if (!inputs.HaveInputs(tx)) {\n-        return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\", false,\n+                         strprintf(\"%s: inputs missing/spent\", __func__));\n     }\n \n     CAmount nValueIn = 0;\n-    CAmount nFees = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n         const COutPoint &prevout = tx.vin[i].prevout;\n         const Coin& coin = inputs.AccessCoin(prevout);\n@@ -234,19 +233,18 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n         }\n     }\n \n-    if (nValueIn < tx.GetValueOut()) {\n+    const CAmount value_out = tx.GetValueOut();\n+    if (nValueIn < value_out) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(value_out)));\n     }\n \n     // Tally transaction fees\n-    CAmount nTxFee = nValueIn - tx.GetValueOut();\n-    if (nTxFee < 0) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-    }\n-    nFees += nTxFee;\n-    if (!MoneyRange(nFees)) {\n+    const CAmount txfee_aux = nValueIn - value_out;\n+    if (!MoneyRange(txfee_aux)) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     }\n+\n+    txfee = txfee_aux;\n     return true;\n }"
      },
      {
        "sha": "288892462d006aa9a4c42db387f0a4ec4a8c191c",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n+#include \"amount.h\"\n+\n #include <stdint.h>\n #include <vector>\n \n@@ -22,9 +24,10 @@ namespace Consensus {\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)\n  * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * @param[out] txfee Set to the transaction fee if successful.\n  * Preconditions: tx.IsCoinBase() is false.\n  */\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n } // namespace Consensus\n \n /** Auxiliary functions for transaction validation (ideally should not be exposed) */"
      },
      {
        "sha": "ef955a17eaa13f27572710b1f61d937fb99a4bfd",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "patch": "@@ -625,7 +625,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n+    const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n@@ -705,8 +705,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n+            CAmount txfee = 0;\n             bool fCheckResult = tx.IsCoinBase() ||\n-                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight);\n+                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, spendheight, txfee);\n             assert(fCheckResult);\n             UpdateCoins(tx, mempoolDuplicate, 1000000);\n         }\n@@ -721,8 +722,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n+            CAmount txfee = 0;\n             bool fCheckResult = entry->GetTx().IsCoinBase() ||\n-                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, nSpendHeight);\n+                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, spendheight, txfee);\n             assert(fCheckResult);\n             UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;"
      },
      {
        "sha": "8899bd2cdc5d18893b1b76b0b7e2ec53a683451e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832e0744cb8b1e1625cdb19b257f97316ac16a90/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "patch": "@@ -484,7 +484,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n-        CAmount nValueIn = 0;\n         LockPoints lp;\n         {\n         LOCK(pool.cs);\n@@ -519,8 +518,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n \n@@ -531,6 +528,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // CoinsViewCache instead of create its own\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+\n+        } // end LOCK(pool.cs)\n+\n+        CAmount nFees = 0;\n+        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n+            return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -543,8 +546,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n         // nModifiedFees includes any fee deltas from PrioritiseTransaction\n         CAmount nModifiedFees = nFees;\n         pool.ApplyDelta(hash, nModifiedFees);\n@@ -1161,9 +1162,6 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n {\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n-            return false;\n-\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n@@ -1635,9 +1633,11 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n         if (!tx.IsCoinBase())\n         {\n-            if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n-                                 REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+            CAmount txfee = 0;\n+            if (!Consensus::CheckTxInputs(tx, state, view, pindex->nHeight, txfee)) {\n+                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+            }\n+            nFees += txfee;\n \n             // Check that transaction is BIP68 final\n             // BIP68 lock checks (as opposed to nLockTime checks) must\n@@ -1665,8 +1665,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n         {\n-            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n-\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))"
      }
    ]
  },
  {
    "sha": "3e8c91629e646f1ace700fe394f5bbef88b9cd31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZThjOTE2MjllNjQ2ZjFhY2U3MDBmZTM5NGY1YmJlZjg4YjljZDMx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T20:49:47Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-20T21:25:56Z"
      },
      "message": "Introduce CheckInputsAndUpdateCoins static wrapper in txmempool.cpp",
      "tree": {
        "sha": "53a051608c170569d221cadf6734fb369a2dce7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a051608c170569d221cadf6734fb369a2dce7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e8c91629e646f1ace700fe394f5bbef88b9cd31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZwtzkAAoJEIhmwY6hyUSinaUP/Aon5dD1Gbf38bWbVcXEqNoE\n5Uppt4zBIbg7h3/qgwwU17LSxjrsy8v4qskj2I+N/KR9xmvj5NKSn/ur9GsxF5ht\nQ0Rk38V0TspLidOE/A9vO5/CPjjxCrizpY0kfAaDU+isBIbkUtFSdhBa49fsoTB5\nuS00H8rs+fxz4MIDHOEOZ3eGu89u9Ke9gfqto9Mg4PCA9y7urzxlsLXunISJRCfe\nDeht8+nO/YtmvlvjRJBzgiNYry9u3b//Ja6/mZNqKARhWktkzwv+kV4Xo2WNONoe\nuW23BqMyZNfq9737uAs+APus4cD/jRz9YlRQsNtJt4bmqiXAN4qdjMQyujm4gGb/\nV6owPrCd71Jeua5zVLz+37vcztDbK3/ZlS6FZOkTFlXMnbdK+4xGtf6qels4KbFA\nQx8KZbgPFQh6mKMX0e9HI5AoietiwSmbxqyEsOj59gMCdbC36DZbDwhBSHa5vOnb\nlKHYXp4qqoPfJoFisagVKmwXNCq0f5zN6E5enGb9MXeBXNbqZAdN61rcViMOc94b\n37zWdxnKp9twi+NDO4cmgKvB0CTAcX4vafbrdzozduHa9iibKitPx2kAdPbjq406\n7YZl1KahvgmFxPs8EBHA4NSRMSNpLJFm6l68Xqi/pIgPED9IhjBnDYxt69oscA+S\nG1jPZ7lq0m1Py55M6v2Q\n=wF/R\n-----END PGP SIGNATURE-----",
        "payload": "tree 53a051608c170569d221cadf6734fb369a2dce7d\nparent 832e0744cb8b1e1625cdb19b257f97316ac16a90\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492548587 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1505942756 +0200\n\nIntroduce CheckInputsAndUpdateCoins static wrapper in txmempool.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c91629e646f1ace700fe394f5bbef88b9cd31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8c91629e646f1ace700fe394f5bbef88b9cd31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c91629e646f1ace700fe394f5bbef88b9cd31/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832e0744cb8b1e1625cdb19b257f97316ac16a90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/832e0744cb8b1e1625cdb19b257f97316ac16a90"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "508658e5d0d14fbade2d875a630ff5634812cfb5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c91629e646f1ace700fe394f5bbef88b9cd31/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c91629e646f1ace700fe394f5bbef88b9cd31/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3e8c91629e646f1ace700fe394f5bbef88b9cd31",
        "patch": "@@ -611,6 +611,15 @@ void CTxMemPool::clear()\n     _clear();\n }\n \n+static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)\n+{\n+    CValidationState state;\n+    CAmount txfee = 0;\n+    bool fCheckResult = tx.IsCoinBase() || Consensus::CheckTxInputs(tx, state, mempoolDuplicate, spendheight, txfee);\n+    assert(fCheckResult);\n+    UpdateCoins(tx, mempoolDuplicate, 1000000);\n+}\n+\n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     if (nCheckFrequency == 0)\n@@ -704,12 +713,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         if (fDependsWait)\n             waitingOnDependants.push_back(&(*it));\n         else {\n-            CValidationState state;\n-            CAmount txfee = 0;\n-            bool fCheckResult = tx.IsCoinBase() ||\n-                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, spendheight, txfee);\n-            assert(fCheckResult);\n-            UpdateCoins(tx, mempoolDuplicate, 1000000);\n+            CheckInputsAndUpdateCoins(tx, mempoolDuplicate, spendheight);\n         }\n     }\n     unsigned int stepsSinceLastRemove = 0;\n@@ -722,11 +726,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            CAmount txfee = 0;\n-            bool fCheckResult = entry->GetTx().IsCoinBase() ||\n-                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, spendheight, txfee);\n-            assert(fCheckResult);\n-            UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n+            CheckInputsAndUpdateCoins(entry->GetTx(), mempoolDuplicate, spendheight);\n             stepsSinceLastRemove = 0;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "4e955c58e13cfe089208f6b23b195d395ad99baa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTk1NWM1OGUxM2NmZTA4OTIwOGY2YjIzYjE5NWQzOTVhZDk5YmFh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-07-04T15:45:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-20T21:26:02Z"
      },
      "message": "Near-Bugfix: Reestablish consensus check removed in 8d7849b\n\nin 8d7849b6db5f54dc32fe4f8c6c7283068473cd21\n\nThis can potentially prevent an overflow that could at least in theory\nallow the creation of money.",
      "tree": {
        "sha": "4cb82c297e52ca1b2b91ff92a338651a72c62291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cb82c297e52ca1b2b91ff92a338651a72c62291"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e955c58e13cfe089208f6b23b195d395ad99baa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZwtzqAAoJEIhmwY6hyUSiUOMP/1x7QVExH8oJG064DLGigP0k\nesad/Ryu10COmkeflQes+pPY3cdynRGW6ZIgGzTRHyZIkOhZF8ROV6swOWxlO3Vz\n+wQJeSIXDvgcrbpTc22XD/1Ue2ksJQ5jPpL5llH69I3xmqlRCMu8mOq0M7PS4F4w\nDa21q+eWQ5AAVKBO8al7zJKspjFDIkaUWKOE0k+NicR/F6rZ8OthJgPpyI+J3/6t\nWAaLhAflAWQwYetxAjFfA40Kg2gBn6n7QT8/G0UkDzzslL4vVVGQNgPvGmMJimgP\n7iFCikTNxXTZ4h5EOZErdLNl7DJGlSZXLLxW8UsA+cKokCFmjODiGw76vhh3s5IY\nlDIxcXpRnXQjNEb7r7BoIKoKrRHc08xm3oEhIdAxjiM7BQlTMSCUaE6fieBcmWf8\nvUYLziNxSupRhnafB5hqQfiZtPxYQTrWTKysjxZLZzw1LTEMFFMTHz8oggKnSE5h\nSfpG/mMq+erKOkUgzlD3vxb9CvP0wLHMdq4XsTogQH6/gnogJnNoGs1JADbBh0Zk\nPEqiGZrKOkKGgMe2/LAGFcNPrMQck3saHZRmabqAKiRHq/w8cIhegPIYTIF2Vw9a\nw7HI5jYejlPq6hsg0hYAM8uwabQN5qg1o7rR+73g/NtO8/sRXitZ3Rqt4jJUaLhj\njrlTNrydQleS4qYcPJQf\n=TVC9\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cb82c297e52ca1b2b91ff92a338651a72c62291\nparent 3e8c91629e646f1ace700fe394f5bbef88b9cd31\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1499183146 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1505942762 +0200\n\nNear-Bugfix: Reestablish consensus check removed in 8d7849b\n\nin 8d7849b6db5f54dc32fe4f8c6c7283068473cd21\n\nThis can potentially prevent an overflow that could at least in theory\nallow the creation of money.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e955c58e13cfe089208f6b23b195d395ad99baa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e955c58e13cfe089208f6b23b195d395ad99baa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e955c58e13cfe089208f6b23b195d395ad99baa/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e8c91629e646f1ace700fe394f5bbef88b9cd31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c91629e646f1ace700fe394f5bbef88b9cd31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8c91629e646f1ace700fe394f5bbef88b9cd31"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e2a89bcf4211da0cf75c5ec4796b9f87cd4fb41",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e955c58e13cfe089208f6b23b195d395ad99baa/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e955c58e13cfe089208f6b23b195d395ad99baa/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4e955c58e13cfe089208f6b23b195d395ad99baa",
        "patch": "@@ -1638,6 +1638,10 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n                 return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n             }\n             nFees += txfee;\n+            if (!MoneyRange(nFees)) {\n+                return state.DoS(100, error(\"%s: accumulated fee in the block out of range.\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n+            }\n \n             // Check that transaction is BIP68 final\n             // BIP68 lock checks (as opposed to nLockTime checks) must"
      }
    ]
  }
]