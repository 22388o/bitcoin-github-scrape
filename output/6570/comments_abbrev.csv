casey,2015-08-18T15:34:24Z,"I think this should check if the passed in height is too high, and throw an error if it is.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132252059,132252059,
jonasschnelli,2015-08-18T15:43:35Z,I like the idea of not rescanning from genesis in case of a imported key. But i think it should take the creation-timestamp instead of a height as parameter. The height should be calculated out of the given creation time minus a buffer of maybe 288 blocks (or less).\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132254457,132254457,
promag,2015-08-18T15:53:32Z,"@casey right, done.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132257253,132257253,
promag,2015-08-18T15:57:56Z,"@jonasschnelli what about a mixed solution, if the param is greater than, for instance, 1231006505 (genesis timestamp) then use the param as a timestamp?\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132258382,132258382,
jonasschnelli,2015-08-18T16:05:19Z,@promag I would guess most users prefer keeping the date when they have created the key instead of the height. Mixes solution sounds to clever at user input level (might be useful on script level to avoid soft-forks).\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132261388,132261388,
sipa,2015-08-18T16:32:01Z,Just use importwallet RPC instead of importprivkey...\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132267642,132267642,
ruimarinho,2015-08-18T17:36:03Z,@sipa I think one good use case is to import watch-only addresses and only rescan from a certain point in time.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132290480,132290480,
sipa,2015-08-18T18:09:26Z,Then we should add support for watch-only addresses to importwallet.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132302304,132302304,
dcousens,2015-08-19T00:42:46Z,"@sipa maybe I'm not following,  but how does `importwallet` allow you to set the rescan from blockheight?\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132404285,132404285,
sipa,2015-08-19T05:12:27Z,"It supports a birth time for each key, and automatically determines from\nwhere to rescan.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132449297,132449297,
dcousens,2015-08-19T05:52:10Z,"@sipa TIL, but `importwallet` also requires a file on disk right? (ref: https://bitcoin.org/en/developer-reference#importwallet)\nDoesn't seem like an ideal solution if your wanting to do this as part of an API.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132454187,132454187,
jonasschnelli,2015-08-19T06:20:30Z,"I also don't think `importwallet` is the right way to go. You can forge a dumped wallet and use it like sipa has explained. But that's not a user friendly input, but might be a solution if you want to avoid a full rescan in case you like to import keys in the current version.\n\nSupporting a creation date in `importXXX` would be nice. \n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132459955,132459955,
MarcoFalke,2015-08-19T06:31:02Z,"@jonasschnelli Can you explain what you mean by ""might be useful on script level to avoid _soft-forks_"" in regard to the ""mixed solution""?\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132461838,132461838,
sipa,2015-08-19T06:31:33Z,"The reason I'm advocating importwallet is because I think it's unreasonable\nto ask the user to need to decide when to rescan in case of multiple\naddresses/keys(/hdchains?) being imported simultaneously. The efficiency is\nridiculous when you rescan for all, and otherwise you at least have\ntemporarily an inconsistent state where you have wallet keys which are not\nscanned for, and need to rememb",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132461895,132461895,
jonasschnelli,2015-08-19T06:38:21Z,@MarcoFalke: we have such threshold checks on script level (https://github.com/bitcoin/bitcoin/blob/master/src/script/interpreter.cpp#L1133) to allow reusing existing containers.\nBut i think threshold detection on height/timestamp makes not much sense on the RPC user input level.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132462612,132462612,
dcousens,2015-08-19T07:53:33Z,"@sipa I think that depends on your user.\nI think a primary use case for this might be the generation of private keys in an external environment, coupled with the desire to watch them [using bitcoind] from a certain block height onwards. \nThe user would be very aware of 'from when' they want to watch,  because they just created them?\n\nIn any case,  I think if the `importwallet` API supported a ",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132481459,132481459,
ruimarinho,2015-08-19T09:44:28Z,Precisely what @dcousens said. Importing a single or even multiple addresses from another environment where we know the timestamp to start rescanning is an ideal use case for this change.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132516923,132516923,
promag,2015-08-19T12:24:04Z,"Agree with @dcousens and @ruimarinho.\n@jonasschnelli changed to timestamp.\n@sipa created `CChain::FindLatestBefore(int64_t nTime)` because it is used more than once. I suppose it could do a binary search on `CChain::vChain`, but for now keeping the same implementation from `importwallet`.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132572087,132572087,
laanwj,2015-08-19T14:22:36Z,"Agree @sipa regarding ridiculous inefficiency of doing a rescan for each key, and temporary inconsistent state.\n\nI also don't like adding more positional arguments to import*. Getting positional arguments right is a scourge to users.\n\nWhat about an RPC call that acceps an array of {privkey, birthdate, ...} objects? By using an object it could be extendible in case more key metadata is desired.",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132616474,132616474,
dcousens,2015-08-20T00:55:36Z,"> In any case, I think if the importwallet API supported a JSON input, then that solution would be fine, provided it doesn't feel out-of-place.\n\n@laanwj,  I think `importwallet`,  with an optional string filename or json object, could work well.   It'd also be nice if you could optionally disable any RPC API's that look can look anywhere on the file system, but that may be another issue.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132839886,132839886,
promag,2015-08-20T01:40:32Z,So everyone agree on a generic import call with an array of multiple objects?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132846312,132846312,
dcousens,2015-08-20T01:48:47Z,@promag are you suggesting merging the two commands?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132848560,132848560,
promag,2015-08-20T02:06:47Z,"I'm suggesting a new call, that can do the same as the others, and deprecate for a while the existing ones.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132851226,132851226,
jonasschnelli,2015-08-20T07:00:33Z,"Agree with @laanwj. Multiple imports with a provided timestamp ends up in inefficient rescans (multiple rescans). The idea of allowing a json objects for importing keys/addresses like `{""key/address"" : <timestamp>, ""key/address"" : <timestamp>, ...}` would be great. The code than should retrieve the ""oldest"" key timestamp and use that date for calculating the rescan height.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132912744,132912744,
promag,2015-08-24T10:39:38Z,"The current `importwallet` call doesn't accept JSON and changing that is a breaking change. Therefore I propose a new RPC call `importmulti` with one JSON argument.\n\nHere is a proposal of the JSON argument:\n\n```\n[{\n  ""type"": ""privkey | pubkey | ..."",\n  ""value"": ""..."",\n  ""timestamp"": ""..."",         // optional\n  ""label"": ""...""              // optional\n}]\n```\n\nThe implementation will fo",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134142302,134142302,
dcousens,2015-08-24T11:03:47Z,@promag timestamp is optionally a blockheight right?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134152183,134152183,
promag,2015-08-24T11:08:09Z,"@dcousens well, timestamp is something like `2015-04-24T10:33:24Z`. If there is a need for block height then IMO the JSON should have an explicit key for that.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134154421,134154421,
dcousens,2015-08-24T11:09:23Z,"IMHO a block height (as height OR hash) is more valuable than a time stamp,  especially if this is coming from an externally managed service.  \n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134154799,134154799,
promag,2015-08-24T11:11:27Z,@dcousens If an external service wants to creates an address then it has to make a call to know the current block count. It is easier to save the creation timestamp along with the address.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134155094,134155094,
ruimarinho,2015-08-24T11:15:41Z,"I'd say they are equivalent, as ISO 8601 is interchangeable with unix timestamp. Both could be supported.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134156125,134156125,
promag,2015-08-24T11:29:44Z,"@ruimarinho sure, however I don't think `timestamp` should allow block height.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134160173,134160173,
dcousens,2015-08-24T11:30:12Z,"> @dcousens If an external service wants to creates an address then it has to make a call to know the current block count.\n\nLets say I receive a transaction: `X`,  I already know it was confirmed at block height `Y`.\n\nBased on this,  externally,  I generate an address/key pair `P` based on some information in `X`.\nTo then import `P`, you're suggesting I then have to find out what the timestam",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134160306,134160306,
promag,2015-08-24T11:40:18Z,"Just to be clear, I'm fine with `blockheight`. However in your use case, if you know the block height of `X` then you can also know the block timestamp, right? \n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134162940,134162940,
dcousens,2015-08-24T12:55:12Z,"> However in your use case, if you know the block height of X then you can also know the block timestamp, right?\n\nHow do you figure that?  Maybe I should,  but,  from the data I currently have,  that isn't the case.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134186743,134186743,
promag,2015-08-24T13:31:56Z,"Off topic, but I was assuming you use blocknotify script, then get the block and txs.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134201471,134201471,
laanwj,2015-08-25T09:22:19Z,"@promag\n\n```\n{\n  ""type"": ""privkey | pubkey | ..."",\n  ""value"": ""..."",\n  ""timestamp"": ""..."",         // optional\n  ""label"": ""...""              // optional\n}]\n```\n\nLooks good to me!\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134537554,134537554,
promag,2015-08-25T09:35:32Z,@laanwj and `importmulti` or just `import`?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134539636,134539636,
laanwj,2015-08-25T10:39:10Z,"I'm very bad at bikeshedding names, but I'd say `importmulti`\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134551177,134551177,
ruimarinho,2015-08-25T10:43:51Z,I'd call it `import` for simplicity and flexibility. We should also discuss whether this new RPC call accepts a single object or only collections.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134552711,134552711,
laanwj,2015-08-25T11:40:36Z,"Simple: if you want to pass it one, just pass an array of one. You could even pass it an empty array.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134561126,134561126,
ruimarinho,2015-08-25T15:14:02Z,"Are you open to a polymorphic method where a JSON object is converted internally to JSON collection of a single item? Not that important, but at least it'd be a little bit more flexible for devs.\n\n```\nimport { ""type"": ""privkey"", ""value"": ""..."" }\nimport [{ ""type"": ""privkey"", ""value"": ""..."" }]\n```\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-134618740,134618740,
MarcoFalke,2015-09-23T15:03:54Z,@promag  Any updates on this?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-142631000,142631000,
gmaxwell,2015-11-17T01:38:32Z,"Hm. Concept wise, I am really unhappy that right now pruning completely disables rescan. This means you can't use pruning with many common use cases.\n\nFor example, pruning more than a month old + merchant wallet that watchadds right around the time it gives out a key-- without the ability to do a limited rescan you have to get everything exactly right or risk missing a payment.\n\nOne thought I ",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-157233593,157233593,
promag,2015-11-17T10:03:13Z,"@MarcoFalke been busy, but I'll resume soon.\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-157325309,157325309,
nunofgs,2015-11-18T10:34:29Z,@promag: will you be adding tests for this feature?\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-157673588,157673588,
promag,2015-11-18T11:47:34Z,@nunofgs sure thing mate :smile: \n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-157687859,157687859,
luke-jr,2016-01-03T14:28:16Z,"A lot of redundant code in the import\* RPCs - maybe it can be abstracted better? Also, it would be ideal (but not necessary in this PR I suppose) to support rescanning in pruned mode when possible...\n",https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-168501470,168501470,
luke-jr,2016-01-03T14:29:25Z,(and Concept ACK for importmulti)\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-168501512,168501512,
dcousens,2016-01-03T22:44:34Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-168549023,168549023,
promag,2016-02-25T01:09:24Z,Deprecated by #7551.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-188544043,188544043,
promag,2016-02-25T01:10:32Z,@gmaxwell in #7551 rescan is done even if prunning is enabled.\n,https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-188544248,188544248,
MarcoFalke,2015-08-19T14:14:50Z,With the current implementation of `FindLatestBefore()` this is dead code and can never be thrown?\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37418749,37418749,src/wallet/rpcdump.cpp
jonasschnelli,2015-08-20T06:57:32Z,"As already commented, i think we should go down serval blocks (~144) because of possible inaccurate timestamps.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37500018,37500018,src/chain.cpp
dcousens,2015-08-20T07:07:17Z,@jonasschnelli what is the variance on timestamps?  Is ~144 enough (or to much)?\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37500500,37500500,src/chain.cpp
jonasschnelli,2015-08-20T07:15:22Z,"The cost of rescaning 144 blocks deeper (~1day) is pretty low (+some seconds/minutes). Given that the source of the timestamp is unknown (user could enter it manually because he know when he approx. created the key, or other wallet software did mess around with timezones, etc.) this cost of +144 blocks is probably worth taking.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37500964,37500964,src/chain.cpp
promag,2015-08-20T09:33:16Z,"@jonasschnelli However if you know the exact timestamp then that extra time is unnecessary. For a person the offset may be useful, but for a system I think not.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37511134,37511134,src/chain.cpp
ruimarinho,2015-08-21T00:15:04Z,"Agreed with @promag, a system can add the safety net of ~144 blocks to the timestamp if necessary and a person likely knows what they are doing if they opt in for this.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37595515,37595515,src/chain.cpp
ruimarinho,2015-08-21T00:20:55Z,"I think the default should be `1231006505` (genesis block), as this is epoch time and therefor not a relative value.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37595822,37595822,src/wallet/rpcdump.cpp
dcousens,2015-08-21T00:34:57Z,"@jonasschnelli have to agree with @ruimarinho,  this safety net could _easily_ be added by the API user, if desired.\nOverall, the only danger for this lies in people using the `timestamp` aspect of the API instead of a block height.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37596485,37596485,src/chain.cpp
dexX7,2015-08-24T15:39:04Z,"@ruimarinho: note that `1231006505` is only the timestamp of the [mainnet](https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.cpp#L92) genesis block, whereby it's `1296688602` for [testnet](https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.cpp#L165) and [regtest](https://github.com/bitcoin/bitcoin/blob/e3f",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r37765168,37765168,src/wallet/rpcdump.cpp
promag,2015-11-17T10:10:54Z,"I would leave the default value as `0` meaning `Thu, 01 Jan 1970 00:00:00 GMT` and mention in the description it is epoch time. I see no point to use the first main block timestamp.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r45041524,45041524,src/wallet/rpcdump.cpp
luke-jr,2016-01-03T14:24:08Z,Maybe just using the median time past is sufficient?\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48693618,48693618,src/chain.cpp
luke-jr,2016-01-03T14:25:48Z,"Why not just repurpose the rescan parameter? That is, if it's a boolean, you get the current behaviour, but if it's a Number, you interpret it as a timestamp.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48693643,48693643,src/wallet/rpcdump.cpp
luke-jr,2016-01-03T14:26:39Z,It's also a useless error - the user doesn't care if there was a block before their timestamp... just rescan the entire chain in that case.\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48693654,48693654,src/wallet/rpcdump.cpp
jtimon,2016-01-03T18:57:20Z,Using the median time past seems to solve the concern without introducing much extra complexity.\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48695821,48695821,src/chain.cpp
jtimon,2016-01-03T18:58:55Z,"@luke-jr that seems less clear and more confusing for no good reason (unless I'm missing the good reason, of course).\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48695835,48695835,src/wallet/rpcdump.cpp
luke-jr,2016-01-03T21:22:11Z,It's less ugly than two fields IMO.\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48697410,48697410,src/wallet/rpcdump.cpp
MarcoFalke,2016-01-03T21:36:49Z,"What about getting rid of the boolean in the help message and only mention the numeric? (The code could still accept boolean for some grace period, though)\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48697548,48697548,src/wallet/rpcdump.cpp
luke-jr,2016-01-03T21:43:05Z,"Without the boolean, there is no way to skip rescan altogether.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48697611,48697611,src/wallet/rpcdump.cpp
MarcoFalke,2016-01-03T21:47:59Z,"Set the timestamp to block+1 or today+1, which will rescan only the block of the tip, iirc.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48697671,48697671,src/wallet/rpcdump.cpp
luke-jr,2016-01-03T21:55:42Z,Surely that is not a serious suggestion...\n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48697745,48697745,src/wallet/rpcdump.cpp
jtimon,2016-01-03T22:47:55Z,"I prefer luke-jr's solution provided it's not ""bool and time at the same time"". It could be always timestamp but 0 can mean no rescan or something like that. rescan=1 meaning ""rescan true but with the dwfault timestamp which is not 1"" is what seems too unintuitive to me (not having one parameter instead of two) and is what I understood luke was proposing (but please clarify if you were suggesting ",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48698322,48698322,src/wallet/rpcdump.cpp
MarcoFalke,2016-01-03T23:02:08Z,"@luke-jr So your suggestion is something like `""3. rescan               (boolean or numeric, optional, default=true) Rescan for wallet transactions starting at the genesis block. A numeric argument is interpreted as the timestamp of the block where to begin to rescan.\n""`?\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48698499,48698499,src/wallet/rpcdump.cpp
jtimon,2016-01-03T23:09:41Z,"What about something like...`""3. rescan (numeric, optional, default=1231006505) Rescan for wallet transactions starting at the timestamp provided (main chain genesis block by default). 0 indicates no rescan.\n""` ?\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48698591,48698591,src/wallet/rpcdump.cpp
MarcoFalke,2016-01-03T23:13:10Z,Would work for me. And then throw the `JSON value is not an integer as expected (code -1)` or accept it during a grace period?\n\nEdit: fixed typo per @jtimon \n,https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48698643,48698643,src/wallet/rpcdump.cpp
jtimon,2016-01-03T23:18:58Z,"you mean ""is not numeric as expected""?\nI would prefer to do that than to have the argument be ""bool or numeric"" for some time. If we really want to do the grace period, better create a new one and remove the old one after the grace period.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48698696,48698696,src/wallet/rpcdump.cpp
luke-jr,2016-01-04T02:14:22Z,"> So your suggestion is something like ""3. rescan (boolean or numeric, optional, default=true) Rescan for wallet transactions starting at the genesis block. A numeric argument is interpreted as the timestamp of the block where to begin to rescan.\n""?\n\n@MarcoFalke Exactly. This is clean.\n",https://github.com/bitcoin/bitcoin/pull/6570#discussion_r48701037,48701037,src/wallet/rpcdump.cpp
