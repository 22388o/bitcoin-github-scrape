[
  {
    "sha": "a80b832038db6768fbf406da15697d801f199ca2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODBiODMyMDM4ZGI2NzY4ZmJmNDA2ZGExNTY5N2Q4MDFmMTk5Y2Ey",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-08-18T14:47:29Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-08-19T13:31:00Z"
      },
      "message": "Add option to specify rescan starting timestamp to RPC import calls",
      "tree": {
        "sha": "61f8cf81e7bc8d9ea4b7c22a178f2913e134b754",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61f8cf81e7bc8d9ea4b7c22a178f2913e134b754"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80b832038db6768fbf406da15697d801f199ca2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80b832038db6768fbf406da15697d801f199ca2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a80b832038db6768fbf406da15697d801f199ca2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80b832038db6768fbf406da15697d801f199ca2/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 55,
      "deletions": 17
    },
    "files": [
      {
        "sha": "1d84e2736de272fbd3ee0f8c33d30d466c1abfc1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80b832038db6768fbf406da15697d801f199ca2/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80b832038db6768fbf406da15697d801f199ca2/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=a80b832038db6768fbf406da15697d801f199ca2",
        "patch": "@@ -58,6 +58,13 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n+CBlockIndex *CChain::FindLatestBefore(int64_t nTime) const {\n+    CBlockIndex *pindex = Tip();\n+    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTime)\n+        pindex = pindex->pprev;\n+    return pindex;\n+}\n+\n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }\n "
      },
      {
        "sha": "b6b272238a22271a5927b1a919f5c863f7501d41",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80b832038db6768fbf406da15697d801f199ca2/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80b832038db6768fbf406da15697d801f199ca2/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=a80b832038db6768fbf406da15697d801f199ca2",
        "patch": "@@ -401,6 +401,9 @@ class CChain {\n \n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n+\n+    /** Find the most recent block with timestamp lower than the given. */\n+    CBlockIndex *FindLatestBefore(int64_t nTime) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "365822cadc05fa1f217d4c55cd1fc29133ed74f5",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80b832038db6768fbf406da15697d801f199ca2/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80b832038db6768fbf406da15697d801f199ca2/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a80b832038db6768fbf406da15697d801f199ca2",
        "patch": "@@ -86,9 +86,12 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 0 },\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n+    { \"importprivkey\", 3 },\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n+    { \"importaddress\", 4 },\n     { \"importpubkey\", 2 },\n+    { \"importpubkey\", 3 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "2aa7ece8b0b2af1596877da22532df933323c295",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 17,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80b832038db6768fbf406da15697d801f199ca2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80b832038db6768fbf406da15697d801f199ca2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a80b832038db6768fbf406da15697d801f199ca2",
        "patch": "@@ -63,7 +63,7 @@ std::string DecodeDumpString(const std::string &str) {\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {\n-            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) |\n                 ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n             pos += 2;\n         }\n@@ -76,15 +76,16 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan timestamp)\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. timestamp            (numeric, optional, default=0) Rescan starts at timestamp\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n@@ -114,6 +115,14 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n+    CBlockIndex *pindex = chainActive.Genesis();\n+    if (params.size() > 3) {\n+        int nTime = params[3].get_int();\n+        pindex = chainActive.FindLatestBefore(nTime);\n+        if (!pindex)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No block before timestamp\");\n+    }\n+\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strSecret);\n \n@@ -142,7 +151,7 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n         pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n         if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwalletMain->ScanForWalletTransactions(pindex, true);\n         }\n     }\n \n@@ -180,16 +189,17 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh timestamp)\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n+            \"5. timestamp            (numeric, optional, default=0) Rescan starts at timestamp\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"If you have the full public key, you should call importpublickey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n@@ -213,6 +223,14 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n+    CBlockIndex *pindex = chainActive.Genesis();\n+    if (params.size() > 4) {\n+        int nTime = params[4].get_int();\n+        pindex = chainActive.FindLatestBefore(nTime);\n+        if (!pindex)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No block before timestamp\");\n+    }\n+\n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n     if (params.size() > 3)\n@@ -234,7 +252,7 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ScanForWalletTransactions(pindex, true);\n         pwalletMain->ReacceptWalletTransactions();\n     }\n \n@@ -248,12 +266,13 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan timestamp)\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. timestamp            (numeric, optional, default=0) Rescan starts at timestamp\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a public key with rescan\\n\"\n@@ -276,6 +295,14 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n+    CBlockIndex *pindex = chainActive.Genesis();\n+    if (params.size() > 3) {\n+        int nTime = params[3].get_int();\n+        pindex = chainActive.FindLatestBefore(nTime);\n+        if (!pindex)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No block before timestamp\");\n+    }\n+\n     if (!IsHex(params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n     std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n@@ -290,7 +317,7 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ScanForWalletTransactions(pindex, true);\n         pwalletMain->ReacceptWalletTransactions();\n     }\n \n@@ -302,7 +329,7 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n+\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n@@ -388,9 +415,7 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     file.close();\n     pwalletMain->ShowProgress(\"\", 100); // hide progress dialog in GUI\n \n-    CBlockIndex *pindex = chainActive.Tip();\n-    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n-        pindex = pindex->pprev;\n+    CBlockIndex *pindex = chainActive.FindLatestBefore(nTimeBegin - 7200);\n \n     if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n         pwalletMain->nTimeFirstKey = nTimeBegin;\n@@ -409,7 +434,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n+\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n@@ -447,7 +472,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n+\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\""
      }
    ]
  }
]