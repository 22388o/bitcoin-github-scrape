[
  {
    "sha": "307fc147604096faaad2a8c803844255a8b085eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDdmYzE0NzYwNDA5NmZhYWFkMmE4YzgwMzg0NDI1NWE4YjA4NWVi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-09-04T03:06:52Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-08T07:24:25Z"
      },
      "message": "Add nLastDataPos variable for partial message tracking.",
      "tree": {
        "sha": "ccdb2d93687a955b9712b91255644b15d4d1df6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccdb2d93687a955b9712b91255644b15d4d1df6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/307fc147604096faaad2a8c803844255a8b085eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/307fc147604096faaad2a8c803844255a8b085eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/307fc147604096faaad2a8c803844255a8b085eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/307fc147604096faaad2a8c803844255a8b085eb/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ea87f9e187da41964c3cafdadf54b2f767c3450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea87f9e187da41964c3cafdadf54b2f767c3450",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea87f9e187da41964c3cafdadf54b2f767c3450"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "39708781460d2745aa327ef522ed8996a23b7810",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/307fc147604096faaad2a8c803844255a8b085eb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/307fc147604096faaad2a8c803844255a8b085eb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=307fc147604096faaad2a8c803844255a8b085eb",
        "patch": "@@ -178,6 +178,7 @@ class CNetMessage {\n \n     CDataStream vRecv;              // received message data\n     unsigned int nDataPos;\n+    unsigned int nLastDataPos;\n \n     int64_t nTime;                  // time (in microseconds) of message receipt.\n \n@@ -186,6 +187,7 @@ class CNetMessage {\n         in_data = false;\n         nHdrPos = 0;\n         nDataPos = 0;\n+        nLastDataPos = 0;\n         nTime = 0;\n     }\n "
      }
    ]
  },
  {
    "sha": "47224d1525a39e035cfbc51882cb4a5c233960f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzIyNGQxNTI1YTM5ZTAzNWNmYmM1MTg4MmNiNGE1YzIzMzk2MGY0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-25T06:07:08Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-08T07:24:25Z"
      },
      "message": "Add NodeId to CNodeState (for logging/debugging purposes)",
      "tree": {
        "sha": "7a0e91741a252110c1b830a3c1abc7bf675252bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a0e91741a252110c1b830a3c1abc7bf675252bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47224d1525a39e035cfbc51882cb4a5c233960f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47224d1525a39e035cfbc51882cb4a5c233960f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47224d1525a39e035cfbc51882cb4a5c233960f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47224d1525a39e035cfbc51882cb4a5c233960f4/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "307fc147604096faaad2a8c803844255a8b085eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/307fc147604096faaad2a8c803844255a8b085eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/307fc147604096faaad2a8c803844255a8b085eb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78ce3c977a731a257795cc88ddf239dd8e1e2062",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47224d1525a39e035cfbc51882cb4a5c233960f4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47224d1525a39e035cfbc51882cb4a5c233960f4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=47224d1525a39e035cfbc51882cb4a5c233960f4",
        "patch": "@@ -216,6 +216,8 @@ struct CNodeState {\n     int nMisbehavior;\n     // Whether this peer should be disconnected and banned (unless whitelisted).\n     bool fShouldBan;\n+    // NodeId of this peer (debugging/logging purposes).\n+    NodeId id;\n     // String name of this peer (debugging/logging purposes).\n     std::string name;\n     // List of asynchronously-determined block rejections to notify this peer about.\n@@ -279,6 +281,7 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     LOCK(cs_main);\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n     state.name = pnode->addrName;\n+    state.id = pnode->id;\n }\n \n void FinalizeNode(NodeId nodeid) {"
      }
    ]
  },
  {
    "sha": "653be33b953b242366311f04bcae95252b92c603",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTNiZTMzYjk1M2IyNDIzNjYzMTFmMDRiY2FlOTUyNTJiOTJjNjAz",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-07-04T06:37:15Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-08T07:24:25Z"
      },
      "message": "Rearrange ProcessMessages",
      "tree": {
        "sha": "045269c5f0a048f245921f48a6f5483272633add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/045269c5f0a048f245921f48a6f5483272633add"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/653be33b953b242366311f04bcae95252b92c603",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/653be33b953b242366311f04bcae95252b92c603",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/653be33b953b242366311f04bcae95252b92c603",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/653be33b953b242366311f04bcae95252b92c603/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47224d1525a39e035cfbc51882cb4a5c233960f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47224d1525a39e035cfbc51882cb4a5c233960f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47224d1525a39e035cfbc51882cb4a5c233960f4"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "44ddd161a918c120cd4a274a0090424337f5dfd4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/653be33b953b242366311f04bcae95252b92c603/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/653be33b953b242366311f04bcae95252b92c603/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=653be33b953b242366311f04bcae95252b92c603",
        "patch": "@@ -4242,10 +4242,13 @@ bool ProcessMessages(CNode* pfrom)\n \n         // get next message\n         CNetMessage& msg = *it;\n+        CMessageHeader& hdr = msg.hdr;\n+        unsigned int nMessageSize = hdr.nMessageSize;\n+        string strCommand = hdr.GetCommand();\n \n         //if (fDebug)\n         //    LogPrintf(\"ProcessMessages(message %u msgsz, %u bytes, complete:%s)\\n\",\n-        //            msg.hdr.nMessageSize, msg.vRecv.size(),\n+        //            nMessageSize, msg.vRecv.size(),\n         //            msg.complete() ? \"Y\" : \"N\");\n \n         // end, if an incomplete message is found\n@@ -4256,23 +4259,17 @@ bool ProcessMessages(CNode* pfrom)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+        if (memcmp(hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", strCommand, pfrom->id);\n             fOk = false;\n             break;\n         }\n \n-        // Read header\n-        CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", strCommand, pfrom->id);\n             continue;\n         }\n-        string strCommand = hdr.GetCommand();\n-\n-        // Message size\n-        unsigned int nMessageSize = hdr.nMessageSize;\n \n         // Checksum\n         CDataStream& vRecv = msg.vRecv;"
      }
    ]
  },
  {
    "sha": "3f11d459aef4a3b46c61de3ca3616a437853ebc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjExZDQ1OWFlZjRhM2I0NmM2MWRlM2NhMzYxNmE0Mzc4NTNlYmMx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-02T05:26:36Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-10T03:33:32Z"
      },
      "message": "Track partial block download progress, timings and bandwidth, and add disconnect logic for stalls.",
      "tree": {
        "sha": "28638f67644a280506dce06c0dbaca305060ef2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28638f67644a280506dce06c0dbaca305060ef2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f11d459aef4a3b46c61de3ca3616a437853ebc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f11d459aef4a3b46c61de3ca3616a437853ebc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f11d459aef4a3b46c61de3ca3616a437853ebc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f11d459aef4a3b46c61de3ca3616a437853ebc1/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "653be33b953b242366311f04bcae95252b92c603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/653be33b953b242366311f04bcae95252b92c603",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/653be33b953b242366311f04bcae95252b92c603"
      }
    ],
    "stats": {
      "total": 207,
      "additions": 197,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9d6c3050407835b441c733c7eba4a5437405c340",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 8,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f11d459aef4a3b46c61de3ca3616a437853ebc1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f11d459aef4a3b46c61de3ca3616a437853ebc1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3f11d459aef4a3b46c61de3ca3616a437853ebc1",
        "patch": "@@ -43,6 +43,26 @@ BlockMap mapBlockIndex;\n CChain chainActive;\n CBlockIndex *pindexBestHeader = NULL;\n int64_t nTimeBestReceived = 0;\n+int64_t tMinuteStart = 0;\n+int nStallSamples = 0;\n+int nStallBiggest = 0;\n+int nStallBiggestNext = 0;\n+int nClickSamples = 0; // Clicks not affected by UpdateTip or abnormal time jumps.\n+int nAvgStallMinute = 0;\n+int nStallTotMinute = 0;\n+int nBytesTotMinute = 0;\n+int nBytesPerMinute = 0;\n+long nAvgClick = 0;\n+int64_t tLastClick = 0;\n+int nClickTotMinute = 0;\n+int nClickBiggest = 0;\n+int nClickBiggestNext = 0;\n+int nAvgBlockSize = 0;\n+int nBlockTotMinute = 0;\n+int nBlocksMinute = 0;\n+int nConcurrentDownloads = 0;\n+int nBlocksInFlight = 0;\n+int nByteTotMinute = 0;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n@@ -230,10 +250,30 @@ struct CNodeState {\n     CBlockIndex *pindexLastCommonBlock;\n     // Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n+    // Whether we've received headers from this peer.\n+    bool fHeadersReceived;\n+    int64_t tBlockRecving;     // Time of last block reception.\n+    int nStallSamples;         // Number of stall samples collected per minute.\n+    int nStallBiggest;         // Biggest stall recorded in the last minute.\n+    int nStallBiggestNext;     // Biggest stall recorded in the current minute.\n+    int nLastBestHeight;       // Last best recorded height of our node.\n+    int nClicks;               // Number of clicks since last minute start.\n+    int nStallClicks;          // Number of clicks since last block download progression.\n+    int nAvgStallMinute;       // Average stall size per minute.\n+    int nStallTotMinute;       // Sum of stall samples in a minute.\n+    int nBytesTotMinute;       // Sum of bytes received so far this minute.\n+    int nBytesPerMinute;       // Bytes received in the last recorded minute.\n+    int64_t tLastStall;        // Time of last stall.\n+    int64_t nMaxInFlight;      // Maximum blocks allowed in flight.\n+    int64_t tLastClick;        // Time of last click unaffected by UpdateTip.\n     // Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n+    int64_t tGetdataBlock;     // Time first getdata block sent.\n+    int nBlockSize;            // Size of current block being downloaded.\n+    int nBlockDLed;            // Bytes of current block downloaded.\n     list<QueuedBlock> vBlocksInFlight;\n-    int nBlocksInFlight;\n+    int nBlocksInFlight;       // How many getdata block requests still waiting for.\n+    bool fHeadersInFlight;     // Headers are being received still.\n     // Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n \n@@ -244,8 +284,26 @@ struct CNodeState {\n         hashLastUnknownBlock = uint256(0);\n         pindexLastCommonBlock = NULL;\n         fSyncStarted = false;\n+        fHeadersReceived = false;\n+        tBlockRecving = 0;\n+        nStallSamples = 0;\n+        nStallBiggest = 0;\n+        nStallBiggestNext = 0;\n+        nClicks = 0;\n+        nStallClicks = 0;\n+        nLastBestHeight = 0;\n+        nAvgStallMinute = 0;\n+        nStallTotMinute = 0;\n+        nBytesTotMinute = 0;\n+        nBytesPerMinute = 0;\n+        nMaxInFlight = 3;\n+        tLastClick = 0;\n         nStallingSince = 0;\n+        tGetdataBlock = 0;\n+        nBlockSize = 0;\n+        nBlockDLed = 0;\n         nBlocksInFlight = 0;\n+        fHeadersInFlight = false;\n         fPreferredDownload = false;\n     }\n };\n@@ -282,6 +340,8 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n     state.name = pnode->addrName;\n     state.id = pnode->id;\n+    if (nAvgBlockSize)\n+        state.nMaxInFlight = 2;\n }\n \n void FinalizeNode(NodeId nodeid) {\n@@ -291,11 +351,16 @@ void FinalizeNode(NodeId nodeid) {\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n+    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n+        nBlocksInFlight--;\n+    }\n     EraseOrphansFor(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n \n+    if (state->nBlocksInFlight)\n+        nConcurrentDownloads--;\n+\n     mapNodeState.erase(nodeid);\n }\n \n@@ -306,6 +371,9 @@ void MarkBlockAsReceived(const uint256& hash) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n+        nBlocksInFlight--;\n+        if (state->nBlocksInFlight == 0)\n+            nConcurrentDownloads--;\n         state->nStallingSince = 0;\n         mapBlocksInFlight.erase(itInFlight);\n     }\n@@ -321,7 +389,10 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n \n     QueuedBlock newentry = {hash, pindex, GetTimeMicros()};\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n+    if (state->nBlocksInFlight == 0)\n+        nConcurrentDownloads++;\n     state->nBlocksInFlight++;\n+    nBlocksInFlight++;\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n@@ -2545,9 +2616,8 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool ret = AcceptBlock(*pblock, state, &pindex, dbp);\n-        if (pindex && pfrom) {\n+        if (pindex && pfrom)\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n-        }\n         if (!ret)\n             return error(\"%s : AcceptBlock FAILED\", __func__);\n     }\n@@ -3663,6 +3733,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK)\n                 pfrom->AskFor(inv);\n \n+            CNodeState *state = State(pfrom->id);\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -3675,11 +3746,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // doing this will result in the received block being rejected as an orphan in case it is\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n+                    state->fHeadersInFlight = true;\n                     if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - Params().TargetSpacing() * 20) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash);\n+                        if (!state->tGetdataBlock && !state->nBlocksInFlight) {\n+                            state->tGetdataBlock = GetTimeMicros();\n+                            state->nStallClicks = 0;\n+                        }\n                     }\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n@@ -3921,11 +3997,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n \n+        State(pfrom->id)->fHeadersInFlight = false;\n+\n         if (nCount == 0) {\n             // Nothing interesting. Stop asking this peers for more headers.\n             return true;\n         }\n \n+        State(pfrom->id)->fHeadersReceived = true;\n+\n         CBlockIndex *pindexLast = NULL;\n         BOOST_FOREACH(const CBlockHeader& header, headers) {\n             CValidationState state;\n@@ -3952,6 +4032,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256(0));\n+            State(pfrom->id)->fHeadersInFlight = true;\n         }\n     }\n \n@@ -4234,6 +4315,69 @@ bool ProcessMessages(CNode* pfrom)\n     // this maintains the order of responses\n     if (!pfrom->vRecvGetData.empty()) return fOk;\n \n+    CNodeState &state = *State(pfrom->id);\n+    int64_t nNow = GetTimeMicros();\n+    state.nStallClicks++;\n+    if (!tMinuteStart)\n+        tMinuteStart = nNow;\n+    if (state.tLastClick && state.nLastBestHeight == chainActive.Height()) {\n+        int64_t nThisClick = nNow - state.tLastClick;\n+        if (nThisClick > nClickBiggestNext && nThisClick - nClickBiggestNext < 5000000)\n+            nClickBiggestNext = nThisClick;\n+        if (nThisClick < std::max(nClickBiggest, nClickBiggestNext) * 10) {\n+            nClickTotMinute += nThisClick;\n+            nClickSamples++;\n+        }\n+    }\n+    if (state.nBlocksInFlight || state.fHeadersInFlight)\n+        state.nClicks++;\n+    tLastClick = nNow;\n+    state.tLastClick = nNow;\n+    state.nLastBestHeight = chainActive.Height();\n+\n+    if ((nAvgClick && nAvgClick * state.nClicks >= 60*1000*1000) || (!nAvgClick && nNow - tMinuteStart >= 60*1000*1000)) {\n+        state.nClicks = 0;\n+        if (nNow - tMinuteStart >= 60*1000*1000) {\n+            tMinuteStart = nNow;\n+            if (nStallSamples > 5) {\n+                nAvgStallMinute = nStallTotMinute / nStallSamples;\n+                nStallTotMinute = 0;\n+                nStallSamples = 0;\n+            }\n+            if (nBlocksMinute > 5) {\n+                nAvgBlockSize = nBlockTotMinute / nBlocksMinute;\n+                nBlockTotMinute = 0;\n+                nBlocksMinute = 0;\n+            }\n+            if (nClickSamples > 5) {\n+                nAvgClick = nClickTotMinute / nClickSamples;\n+                nClickTotMinute = 0;\n+                nClickSamples = 0;\n+            }\n+            if (nBytesPerMinute)\n+                nBytesPerMinute = (nBytesPerMinute + nBytesTotMinute) / 2;\n+            else\n+                nBytesPerMinute = nBytesTotMinute;\n+            nBytesTotMinute = 0;\n+            nClickBiggest = nClickBiggestNext;\n+            nClickBiggestNext = 0;\n+            nStallBiggest = nStallBiggestNext;\n+            nStallBiggestNext = 0;\n+        }\n+        if (state.nStallSamples > 5) {\n+            state.nAvgStallMinute = state.nStallTotMinute / state.nStallSamples;\n+            state.nStallTotMinute = 0;\n+            state.nStallSamples = 0;\n+        }\n+        if (state.nBytesPerMinute)\n+            state.nBytesPerMinute = (state.nBytesPerMinute + state.nBytesTotMinute) / 2;\n+        else\n+            state.nBytesPerMinute = state.nBytesTotMinute;\n+        state.nBytesTotMinute = 0;\n+        state.nStallBiggest = state.nStallBiggestNext;\n+        state.nStallBiggestNext = 0;\n+    } // If we've reached a minute (based on average click).\n+\n     std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n     while (!pfrom->fDisconnect && it != pfrom->vRecvMsg.end()) {\n         // Don't bother if send buffer is too full to respond anyway\n@@ -4251,6 +4395,35 @@ bool ProcessMessages(CNode* pfrom)\n         //            nMessageSize, msg.vRecv.size(),\n         //            msg.complete() ? \"Y\" : \"N\");\n \n+        if (msg.nDataPos != msg.nLastDataPos) {\n+            if (state.nBlocksInFlight || state.fHeadersInFlight) {\n+                state.nBytesTotMinute += (msg.nDataPos - msg.nLastDataPos);\n+                nBytesTotMinute += (msg.nDataPos - msg.nLastDataPos);\n+            }\n+            state.nStallTotMinute += state.nStallClicks - 1;\n+            nStallTotMinute += state.nStallClicks - 1;\n+            state.nStallSamples++;\n+            nStallSamples++;\n+            if (state.nStallClicks-1 > state.nStallBiggestNext)\n+                state.nStallBiggestNext = state.nStallClicks-1;\n+            if (state.nStallClicks-1 > nStallBiggestNext)\n+                nStallBiggestNext = state.nStallClicks-1;\n+            if (strCommand == \"block\") {\n+                state.nBlockDLed = msg.nDataPos;\n+                if (msg.nLastDataPos == 0) {\n+                    state.nBlockSize = nMessageSize;\n+                    nBlockTotMinute += nMessageSize;\n+                    nBlocksMinute++;\n+                    if (!state.tBlockRecving && !msg.complete())\n+                        LogPrint(\"net\", \"%d clicks later, first incoming block (%u of %u bytes) from peer=%d\\n\", state.nStallClicks, msg.nDataPos, nMessageSize, pfrom->id);\n+                }\n+                state.tGetdataBlock = 0;\n+                state.tBlockRecving = nNow;\n+            }\n+            state.nStallClicks = 0;\n+            msg.nLastDataPos = msg.nDataPos;\n+        }\n+\n         // end, if an incomplete message is found\n         if (!msg.complete())\n             break;\n@@ -4323,6 +4496,16 @@ bool ProcessMessages(CNode* pfrom)\n         break;\n     }\n \n+    // Detect whether we're stalling\n+    if (state.tGetdataBlock && !state.tBlockRecving && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n+        LogPrintf(\"No response from peer=%d for getdata block for %d seconds (%d clicks).\\n\", pfrom->id, (nNow - state.tGetdataBlock) / 1000000, state.nStallClicks);\n+        pfrom->fDisconnect = true;\n+    }\n+    if (state.tBlockRecving && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n+        LogPrintf(\"Block download (%u of %u bytes) from peer=%d stalled for %d seconds (%d clicks).\\n\", state.nBlockDLed, state.nBlockSize, pfrom->id, (nNow - state.tBlockRecving) / 1000000, state.nStallClicks);\n+        pfrom->fDisconnect = true;\n+    }\n+\n     // In case the connection got shut down, its receive buffer was wiped\n     if (!pfrom->fDisconnect)\n         pfrom->vRecvMsg.erase(pfrom->vRecvMsg.begin(), it);\n@@ -4453,6 +4636,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256(0));\n+                state.fHeadersInFlight = true;\n             }\n         }\n \n@@ -4526,15 +4710,20 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        if (!pto->fDisconnect && !pto->fClient && fFetch && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (state.nBytesPerMinute && nBytesPerMinute && nAvgBlockSize && nAvgClick)\n+            state.nMaxInFlight = std::min<int64_t>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2) * state.nBytesPerMinute / nBytesPerMinute;\n+        if (!pto->fDisconnect && !pto->fClient && fFetch && state.fHeadersReceived && state.nBlocksInFlight < state.nMaxInFlight) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n+            FindNextBlocksToDownload(pto->GetId(), state.nMaxInFlight - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                LogPrint(\"net\", \"Requesting(%d,%d) block %s (%d) peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, pindex->GetBlockHash().ToString(), pindex->nHeight, pto->id, state.nBlocksInFlight);\n+                if (!state.tGetdataBlock && !state.nBlocksInFlight) {\n+                    state.tGetdataBlock = nNow;\n+                    state.nStallClicks = 0;\n+                }\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                    pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {"
      },
      {
        "sha": "8312156d63c8df3c999ad7b27c576ccf9b20c8fb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f11d459aef4a3b46c61de3ca3616a437853ebc1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f11d459aef4a3b46c61de3ca3616a437853ebc1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3f11d459aef4a3b46c61de3ca3616a437853ebc1",
        "patch": "@@ -82,8 +82,6 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n-/** Number of blocks that can be requested at any given time from a single peer. */\n-static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n /** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends"
      }
    ]
  },
  {
    "sha": "061b287bc1db014b36a76553e2cdb27382a3ad5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjFiMjg3YmMxZGIwMTRiMzZhNzY1NTNlMmNkYjI3MzgyYTNhZDVk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-06-27T01:41:52Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-10T03:33:33Z"
      },
      "message": "Add CaughtUp() function (needed by later commits)",
      "tree": {
        "sha": "a837c1095e7e136123b3948a979bc3c0a715c141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a837c1095e7e136123b3948a979bc3c0a715c141"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/061b287bc1db014b36a76553e2cdb27382a3ad5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061b287bc1db014b36a76553e2cdb27382a3ad5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/061b287bc1db014b36a76553e2cdb27382a3ad5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061b287bc1db014b36a76553e2cdb27382a3ad5d/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f11d459aef4a3b46c61de3ca3616a437853ebc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f11d459aef4a3b46c61de3ca3616a437853ebc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f11d459aef4a3b46c61de3ca3616a437853ebc1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dbe7920edda88fd26415952fd836ae930adc481a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/061b287bc1db014b36a76553e2cdb27382a3ad5d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/061b287bc1db014b36a76553e2cdb27382a3ad5d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=061b287bc1db014b36a76553e2cdb27382a3ad5d",
        "patch": "@@ -1267,6 +1267,11 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n     return nSubsidy + nFees;\n }\n \n+bool CaughtUp()\n+{\n+    return ((chainActive.Height() >= Checkpoints::GetTotalBlocksEstimate()) && chainActive.Tip()->GetBlockTime() > GetTime() - 90 * 60);\n+}\n+\n bool IsInitialBlockDownload()\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDM5M2I5OTQ4Zjc1YjdkZWI2MjU5M2U3ZGE4MmFhNmE5ZGQwMmFk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-02T05:26:36Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:00Z"
      },
      "message": "Add extra debugging messages for download and stall logic.",
      "tree": {
        "sha": "9818e50092dbd08467d46048db4b4556417043a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9818e50092dbd08467d46048db4b4556417043a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed393b9948f75b7deb62593e7da82aa6a9dd02ad/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "061b287bc1db014b36a76553e2cdb27382a3ad5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061b287bc1db014b36a76553e2cdb27382a3ad5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/061b287bc1db014b36a76553e2cdb27382a3ad5d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6d9edba88b1054d09e2a31ee19600e1f02609af2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed393b9948f75b7deb62593e7da82aa6a9dd02ad/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed393b9948f75b7deb62593e7da82aa6a9dd02ad/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
        "patch": "@@ -358,8 +358,10 @@ void FinalizeNode(NodeId nodeid) {\n     EraseOrphansFor(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n \n-    if (state->nBlocksInFlight)\n+    if (state->nBlocksInFlight) {\n         nConcurrentDownloads--;\n+        LogPrint(\"concurrent\", \"Concurrent=%d Syncing=%d peer=%d removed\\n\", nConcurrentDownloads, nSyncStarted, state->id);\n+    }\n \n     mapNodeState.erase(nodeid);\n }\n@@ -2621,8 +2623,10 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool ret = AcceptBlock(*pblock, state, &pindex, dbp);\n-        if (pindex && pfrom)\n+        if (pindex && pfrom) {\n+            LogPrint(\"net\", \"received(%d,%d) block %s (height:%d) peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, pindex->GetBlockHash().ToString(), pindex->nHeight, pfrom->id, State(pfrom->id)->nBlocksInFlight);\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n+        }\n         if (!ret)\n             return error(\"%s : AcceptBlock FAILED\", __func__);\n     }\n@@ -3733,7 +3737,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK)\n                 pfrom->AskFor(inv);\n@@ -3752,17 +3755,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     state->fHeadersInFlight = true;\n+                    LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                     if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - Params().TargetSpacing() * 20) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash);\n+                        LogPrint(\"net\", \"Requesting(%d,%d) %s peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, inv.ToString(), pfrom->id, state->nBlocksInFlight);\n                         if (!state->tGetdataBlock && !state->nBlocksInFlight) {\n                             state->tGetdataBlock = GetTimeMicros();\n                             state->nStallClicks = 0;\n                         }\n                     }\n-                    LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n \n@@ -4047,7 +4051,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vRecv >> block;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n \n         pfrom->AddInventoryKnown(inv);\n \n@@ -4332,7 +4335,8 @@ bool ProcessMessages(CNode* pfrom)\n         if (nThisClick < std::max(nClickBiggest, nClickBiggestNext) * 10) {\n             nClickTotMinute += nThisClick;\n             nClickSamples++;\n-        }\n+        } else\n+            LogPrintf(\"Abnormal time jump detected (%d > %d * 10).\\n\", nThisClick, std::max(nClickBiggest, nClickBiggestNext));\n     }\n     if (state.nBlocksInFlight || state.fHeadersInFlight)\n         state.nClicks++;\n@@ -4368,6 +4372,7 @@ bool ProcessMessages(CNode* pfrom)\n             nClickBiggestNext = 0;\n             nStallBiggest = nStallBiggestNext;\n             nStallBiggestNext = 0;\n+            LogPrint(\"stall\", \"System: AvgStall=%d BigStall=%d B/s=%d AvgBlkSize=%d Click: Avg=%dms Big=%dms\\n\", nAvgStallMinute, nStallBiggest, nBytesPerMinute / 60, nAvgBlockSize, nAvgClick * .001, nClickBiggest * .001);\n         }\n         if (state.nStallSamples > 5) {\n             state.nAvgStallMinute = state.nStallTotMinute / state.nStallSamples;\n@@ -4381,6 +4386,7 @@ bool ProcessMessages(CNode* pfrom)\n         state.nBytesTotMinute = 0;\n         state.nStallBiggest = state.nStallBiggestNext;\n         state.nStallBiggestNext = 0;\n+        LogPrint(\"stall\", \"peer=%d Stall:Avg=%d Big=%d SysAvg=%d SysBig=%d AvgB/s=%d (%d%% of System=%d)\\n\", pfrom->id, state.nAvgStallMinute, state.nStallBiggest, nAvgStallMinute, nStallBiggest, state.nBytesPerMinute / 60, nBytesPerMinute ? state.nBytesPerMinute * 100 / nBytesPerMinute : 0, nBytesPerMinute / 60);\n     } // If we've reached a minute (based on average click).\n \n     std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n@@ -4715,8 +4721,13 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        if (state.nBytesPerMinute && nBytesPerMinute && nAvgBlockSize && nAvgClick)\n+        int64_t nOldMaxInFlight = state.nMaxInFlight;\n+        if (state.nBytesPerMinute && nBytesPerMinute && nAvgBlockSize && nAvgClick) {\n             state.nMaxInFlight = std::min<int64_t>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2) * state.nBytesPerMinute / nBytesPerMinute;\n+            if (state.nMaxInFlight != nOldMaxInFlight)\n+                LogPrint(\"stall2\", \"peer=%d Changing MaxInFlight from %d to %d (%d * %d / %d).\\n\", pto->id, nOldMaxInFlight, state.nMaxInFlight,\n+                    std::min<int>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2), state.nBytesPerMinute / 60, nBytesPerMinute / 60);\n+        }\n         if (!pto->fDisconnect && !pto->fClient && fFetch && state.fHeadersReceived && state.nBlocksInFlight < state.nMaxInFlight) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;"
      }
    ]
  },
  {
    "sha": "7edb20d836472445a06c8b05bdf50da760d208ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWRiMjBkODM2NDcyNDQ1YTA2YzhiMDViZGY1MGRhNzYwZDIwOGZm",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-24T03:08:13Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:32Z"
      },
      "message": "Stripe downloads (so not a contiguous chunk is requested from one node).",
      "tree": {
        "sha": "9aa57437cf3718d12e27fc7cfedc6189555a2ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9aa57437cf3718d12e27fc7cfedc6189555a2ad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7edb20d836472445a06c8b05bdf50da760d208ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edb20d836472445a06c8b05bdf50da760d208ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7edb20d836472445a06c8b05bdf50da760d208ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edb20d836472445a06c8b05bdf50da760d208ff/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed393b9948f75b7deb62593e7da82aa6a9dd02ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed393b9948f75b7deb62593e7da82aa6a9dd02ad"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7cb74522b01abc534f2959508d6f8131049cb086",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7edb20d836472445a06c8b05bdf50da760d208ff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7edb20d836472445a06c8b05bdf50da760d208ff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7edb20d836472445a06c8b05bdf50da760d208ff",
        "patch": "@@ -271,6 +271,7 @@ struct CNodeState {\n     int64_t tGetdataBlock;     // Time first getdata block sent.\n     int nBlockSize;            // Size of current block being downloaded.\n     int nBlockDLed;            // Bytes of current block downloaded.\n+    int nBlockBunch;           // Size of last bunch of blocks received.\n     list<QueuedBlock> vBlocksInFlight;\n     int nBlocksInFlight;       // How many getdata block requests still waiting for.\n     bool fHeadersInFlight;     // Headers are being received still.\n@@ -302,6 +303,7 @@ struct CNodeState {\n         tGetdataBlock = 0;\n         nBlockSize = 0;\n         nBlockDLed = 0;\n+        nBlockBunch = 0;\n         nBlocksInFlight = 0;\n         fHeadersInFlight = false;\n         fPreferredDownload = false;\n@@ -4390,6 +4392,7 @@ bool ProcessMessages(CNode* pfrom)\n     } // If we've reached a minute (based on average click).\n \n     std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n+    state.nBlockBunch = 0;\n     while (!pfrom->fDisconnect && it != pfrom->vRecvMsg.end()) {\n         // Don't bother if send buffer is too full to respond anyway\n         if (pfrom->nSendSize >= SendBufferSize())\n@@ -4425,6 +4428,7 @@ bool ProcessMessages(CNode* pfrom)\n                     state.nBlockSize = nMessageSize;\n                     nBlockTotMinute += nMessageSize;\n                     nBlocksMinute++;\n+                    state.nBlockBunch++;\n                     if (!state.tBlockRecving && !msg.complete())\n                         LogPrint(\"net\", \"%d clicks later, first incoming block (%u of %u bytes) from peer=%d\\n\", state.nStallClicks, msg.nDataPos, nMessageSize, pfrom->id);\n                 }\n@@ -4731,7 +4735,19 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!pto->fDisconnect && !pto->fClient && fFetch && state.fHeadersReceived && state.nBlocksInFlight < state.nMaxInFlight) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), state.nMaxInFlight - state.nBlocksInFlight, vToDownload, staller);\n+            int nToDownload = state.nMaxInFlight - state.nBlocksInFlight;\n+            int nBatch = 1;\n+            if (state.nBytesPerMinute && nAvgBlockSize && nAvgClick) {\n+                nBatch = std::max<int>(1, (state.nBytesPerMinute / (60*1000*1000 / nAvgClick) / nAvgBlockSize));\n+                if (state.nMaxInFlight > nBatch * 2 && nToDownload < nBatch)\n+                    nBatch = 0;\n+                else\n+                    if (state.nBlockBunch > nBatch)\n+                        nBatch = state.nBlockBunch;\n+                if (GetArg(\"-stripe\", false) && nBatch < nToDownload)\n+                    nToDownload = nBatch;\n+            }\n+            FindNextBlocksToDownload(pto->GetId(), nToDownload, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n                 LogPrint(\"net\", \"Requesting(%d,%d) block %s (%d) peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, pindex->GetBlockHash().ToString(), pindex->nHeight, pto->id, state.nBlocksInFlight);"
      }
    ]
  },
  {
    "sha": "3bebc1e4a47d7175213f65f6ccaeae929197e81a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmViYzFlNGE0N2Q3MTc1MjEzZjY1ZjZjY2FlYWU5MjkxOTdlODFh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-16T04:35:31Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:34Z"
      },
      "message": "Disable sipa stall disconnect logic, but still log when it would have been triggered.",
      "tree": {
        "sha": "5eefd9638df59cf13b474f88bf9d388923569807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eefd9638df59cf13b474f88bf9d388923569807"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bebc1e4a47d7175213f65f6ccaeae929197e81a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bebc1e4a47d7175213f65f6ccaeae929197e81a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bebc1e4a47d7175213f65f6ccaeae929197e81a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bebc1e4a47d7175213f65f6ccaeae929197e81a/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7edb20d836472445a06c8b05bdf50da760d208ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edb20d836472445a06c8b05bdf50da760d208ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7edb20d836472445a06c8b05bdf50da760d208ff"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a8a961ed5b393719d1a819c1b56d5b60af8ff993",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bebc1e4a47d7175213f65f6ccaeae929197e81a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bebc1e4a47d7175213f65f6ccaeae929197e81a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3bebc1e4a47d7175213f65f6ccaeae929197e81a",
        "patch": "@@ -4717,8 +4717,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n-            LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n-            pto->fDisconnect = true;\n+            LogPrintf(\"Peer=%d is stalling block download (%u / %u bytes) clicks=%d\\n\", pto->id, state.nBlockDLed, state.nBlockSize, state.nStallClicks);\n+            state.nStallingSince = nNow + 60000000; // Delay showing next warning until another minute.\n         }\n \n         //\n@@ -4757,10 +4757,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 }\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n             }\n-            if (state.nBlocksInFlight == 0 && staller != -1) {\n+            if (staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n                     State(staller)->nStallingSince = nNow;\n-                    LogPrint(\"net\", \"Stall started peer=%d\\n\", staller);\n+                    LogPrint(\"net\", \"Key sync peer=%d\\n\", staller);\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "49bb701140f356f59716397a8123435be1846873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWJiNzAxMTQwZjM1NmY1OTcxNjM5N2E4MTIzNDM1YmUxODQ2ODcz",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-27T09:16:38Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:34Z"
      },
      "message": "Disconnect no longer useful peers.",
      "tree": {
        "sha": "4bf685d0fa1e8466ed948c7b01fd0fc3ef75e4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf685d0fa1e8466ed948c7b01fd0fc3ef75e4a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49bb701140f356f59716397a8123435be1846873",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bb701140f356f59716397a8123435be1846873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49bb701140f356f59716397a8123435be1846873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bb701140f356f59716397a8123435be1846873/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bebc1e4a47d7175213f65f6ccaeae929197e81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bebc1e4a47d7175213f65f6ccaeae929197e81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bebc1e4a47d7175213f65f6ccaeae929197e81a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e85770d547b40ed4980842d58e28dcad25bcdd85",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bb701140f356f59716397a8123435be1846873/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bb701140f356f59716397a8123435be1846873/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=49bb701140f356f59716397a8123435be1846873",
        "patch": "@@ -4731,6 +4731,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             if (state.nMaxInFlight != nOldMaxInFlight)\n                 LogPrint(\"stall2\", \"peer=%d Changing MaxInFlight from %d to %d (%d * %d / %d).\\n\", pto->id, nOldMaxInFlight, state.nMaxInFlight,\n                     std::min<int>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2), state.nBytesPerMinute / 60, nBytesPerMinute / 60);\n+            if (!state.nBlocksInFlight && !state.nMaxInFlight) {\n+                LogPrint(\"stall\", \"peer=%d No further use. Disconnecting.\\n\", pto->id);\n+                pto->fDisconnect = true;\n+            }\n         }\n         if (!pto->fDisconnect && !pto->fClient && fFetch && state.fHeadersReceived && state.nBlocksInFlight < state.nMaxInFlight) {\n             vector<CBlockIndex*> vToDownload;"
      }
    ]
  },
  {
    "sha": "a837fe483731a68c68f1d873ac81930320303059",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODM3ZmU0ODM3MzFhNjhjNjhmMWQ4NzNhYzgxOTMwMzIwMzAzMDU5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-27T13:07:17Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:52Z"
      },
      "message": "Find the runt of the litter (and disconnect it).",
      "tree": {
        "sha": "db0b960aeb4f5143c2d3d22a34bbf52a07ca2fa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db0b960aeb4f5143c2d3d22a34bbf52a07ca2fa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a837fe483731a68c68f1d873ac81930320303059",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a837fe483731a68c68f1d873ac81930320303059",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a837fe483731a68c68f1d873ac81930320303059",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a837fe483731a68c68f1d873ac81930320303059/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49bb701140f356f59716397a8123435be1846873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bb701140f356f59716397a8123435be1846873",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49bb701140f356f59716397a8123435be1846873"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 37,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5052fd00ae71b39362e8b7038c7a741a64fc135",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a837fe483731a68c68f1d873ac81930320303059/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a837fe483731a68c68f1d873ac81930320303059/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a837fe483731a68c68f1d873ac81930320303059",
        "patch": "@@ -52,6 +52,9 @@ int nAvgStallMinute = 0;\n int nStallTotMinute = 0;\n int nBytesTotMinute = 0;\n int nBytesPerMinute = 0;\n+NodeId nSlowest = 0;\n+NodeId nSlowestLast = 0;\n+NodeId nFastest = 0;\n long nAvgClick = 0;\n int64_t tLastClick = 0;\n int nClickTotMinute = 0;\n@@ -236,6 +239,8 @@ struct CNodeState {\n     int nMisbehavior;\n     // Whether this peer should be disconnected and banned (unless whitelisted).\n     bool fShouldBan;\n+    // Whether this peer is the metaphorical \"runt of the litter\".\n+    bool fRunt;\n     // NodeId of this peer (debugging/logging purposes).\n     NodeId id;\n     // String name of this peer (debugging/logging purposes).\n@@ -281,6 +286,7 @@ struct CNodeState {\n     CNodeState() {\n         nMisbehavior = 0;\n         fShouldBan = false;\n+        fRunt = false;\n         pindexBestKnownBlock = NULL;\n         hashLastUnknownBlock = uint256(0);\n         pindexLastCommonBlock = NULL;\n@@ -4375,6 +4381,23 @@ bool ProcessMessages(CNode* pfrom)\n             nStallBiggest = nStallBiggestNext;\n             nStallBiggestNext = 0;\n             LogPrint(\"stall\", \"System: AvgStall=%d BigStall=%d B/s=%d AvgBlkSize=%d Click: Avg=%dms Big=%dms\\n\", nAvgStallMinute, nStallBiggest, nBytesPerMinute / 60, nAvgBlockSize, nAvgClick * .001, nClickBiggest * .001);\n+            if (nSlowest > 0 && nSyncStarted > 7) {\n+                if (State(nSlowest) == NULL)\n+                    LogPrint(\"stall\", \"peer=%d was the runt.\\n\", nSlowest);\n+                else {\n+                    if (nSlowest == nSlowestLast) {\n+                        LogPrint(\"stall\", \"peer=%d is the consistent runt. Stopping using.\\n\", nSlowest);\n+                        State(nSlowest)->fRunt = true;\n+                    } else if (nFastest && State(nFastest) && State(nFastest)->nBytesPerMinute > State(nSlowest)->nBytesPerMinute * 2) {\n+                        LogPrint(\"stall\", \"peer=%d is the runt. Stopping using.\\n\", nSlowest);\n+                        State(nSlowest)->fRunt = true;\n+                    } else\n+                        LogPrint(\"stall\", \"peer=%d is the runt.\\n\", nSlowest);\n+                }\n+            }\n+            nSlowestLast = nSlowest;\n+            nSlowest = 0;\n+            nFastest = 0;\n         }\n         if (state.nStallSamples > 5) {\n             state.nAvgStallMinute = state.nStallTotMinute / state.nStallSamples;\n@@ -4385,6 +4408,14 @@ bool ProcessMessages(CNode* pfrom)\n             state.nBytesPerMinute = (state.nBytesPerMinute + state.nBytesTotMinute) / 2;\n         else\n             state.nBytesPerMinute = state.nBytesTotMinute;\n+        if (nSlowest > 0 && State(nSlowest) == NULL) {\n+            LogPrint(\"stall\", \"peer=%d was the runt.\\n\", nSlowest);\n+            nSlowest = 0;\n+        }\n+        if (!state.fRunt && (nSlowest == 0 || (nSlowest > 0 && state.nBytesPerMinute < State(nSlowest)->nBytesPerMinute)))\n+            nSlowest = pfrom->id;\n+        if (nFastest == 0 || (nFastest > 0 && (State(nFastest) == NULL || state.nBytesPerMinute > State(nFastest)->nBytesPerMinute)))\n+            nFastest = pfrom->id;\n         state.nBytesTotMinute = 0;\n         state.nStallBiggest = state.nStallBiggestNext;\n         state.nStallBiggestNext = 0;\n@@ -4727,7 +4758,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64_t nOldMaxInFlight = state.nMaxInFlight;\n         if (state.nBytesPerMinute && nBytesPerMinute && nAvgBlockSize && nAvgClick) {\n-            state.nMaxInFlight = std::min<int64_t>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2) * state.nBytesPerMinute / nBytesPerMinute;\n+            if (state.fRunt)\n+                state.nMaxInFlight = 0;\n+            else\n+                state.nMaxInFlight = std::min<int64_t>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2) * state.nBytesPerMinute / nBytesPerMinute;\n             if (state.nMaxInFlight != nOldMaxInFlight)\n                 LogPrint(\"stall2\", \"peer=%d Changing MaxInFlight from %d to %d (%d * %d / %d).\\n\", pto->id, nOldMaxInFlight, state.nMaxInFlight,\n                     std::min<int>(nConcurrentDownloads * 2000000 / nAvgBlockSize, BLOCK_DOWNLOAD_WINDOW / 2), state.nBytesPerMinute / 60, nBytesPerMinute / 60);\n@@ -4750,7 +4784,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                         nBatch = state.nBlockBunch;\n                 if (GetArg(\"-stripe\", false) && nBatch < nToDownload)\n                     nToDownload = nBatch;\n-            }\n+            } else\n+                nSlowest = -1;\n             FindNextBlocksToDownload(pto->GetId(), nToDownload, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));"
      }
    ]
  },
  {
    "sha": "acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2RiYzBlMmZmYTk1NzViNGQxZDIyZTc5YjAxYWUzYWZjYjY5NDU1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-29T08:07:00Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:53Z"
      },
      "message": "Reset variables when network changed.",
      "tree": {
        "sha": "760c5cdb77ea30d73c720c16cdd11dba4d2d1b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/760c5cdb77ea30d73c720c16cdd11dba4d2d1b72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a837fe483731a68c68f1d873ac81930320303059",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a837fe483731a68c68f1d873ac81930320303059",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a837fe483731a68c68f1d873ac81930320303059"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e50977810be1ae1ab772d8b0f0bbd9cfb02f067a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "patch": "@@ -4334,6 +4334,21 @@ bool ProcessMessages(CNode* pfrom)\n     CNodeState &state = *State(pfrom->id);\n     int64_t nNow = GetTimeMicros();\n     state.nStallClicks++;\n+    if (fReset) {\n+        fReset = false;\n+        tMinuteStart = 0;\n+        nStallSamples = 0;\n+        nStallBiggest = 0;\n+        nStallBiggestNext = 0;\n+        nClickSamples = 0;\n+        nAvgStallMinute = 0;\n+        nStallTotMinute = 0;\n+        nBytesTotMinute = 0;\n+        nBytesPerMinute = 0;\n+        nBlockTotMinute = 0;\n+        nBlocksMinute = 0;\n+        nByteTotMinute = 0;\n+    }\n     if (!tMinuteStart)\n         tMinuteStart = nNow;\n     if (state.tLastClick && state.nLastBestHeight == chainActive.Height()) {"
      },
      {
        "sha": "70dfb43c5c14974f19f80be572b3394d2e4241a7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "patch": "@@ -831,6 +831,10 @@ void ThreadSocketHandler()\n         if(vNodes.size() != nPrevNodeCount) {\n             nPrevNodeCount = vNodes.size();\n             uiInterface.NotifyNumConnectionsChanged(nPrevNodeCount);\n+            if (!vNodes.size()) {\n+                LogPrint(\"net\", \"NO PEERS CONNECTED. Resetting network state.\\n\");\n+                fReset = true;\n+            }\n         }\n \n         //"
      },
      {
        "sha": "0fbd10f2419ea5c64288a774adab450f1971cfe0",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "patch": "@@ -103,6 +103,7 @@ bool fServer = false;\n string strMiscWarning;\n bool fLogTimestamps = false;\n bool fLogIPs = false;\n+bool fReset = false;\n volatile bool fReopenDebugLog = false;\n \n // Init OpenSSL library multithreading support"
      },
      {
        "sha": "0ecf57dc47182aa33d27c63796ea8fd99bbd1309",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "patch": "@@ -36,6 +36,7 @@ extern bool fServer;\n extern std::string strMiscWarning;\n extern bool fLogTimestamps;\n extern bool fLogIPs;\n+extern bool fReset;\n extern volatile bool fReopenDebugLog;\n \n void SetupEnvironment();"
      }
    ]
  },
  {
    "sha": "574419704790bd33272dd771517460f4e0bcc802",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzQ0MTk3MDQ3OTBiZDMzMjcyZGQ3NzE1MTc0NjBmNGUwYmNjODAy",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-27T23:35:10Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:53Z"
      },
      "message": "Allow many blocks to be received in one go from a peer for up to 1 second.\n\nThis speeds up IDB.",
      "tree": {
        "sha": "6e58b4e464a2840df5cc6d0c7174f6c9ea83009f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e58b4e464a2840df5cc6d0c7174f6c9ea83009f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/574419704790bd33272dd771517460f4e0bcc802",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/574419704790bd33272dd771517460f4e0bcc802",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/574419704790bd33272dd771517460f4e0bcc802",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/574419704790bd33272dd771517460f4e0bcc802/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acdbc0e2ffa9575b4d1d22e79b01ae3afcb69455"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "219ae40cdd0dba8e7fdc7a6a7a81f0ca7fbb1025",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/574419704790bd33272dd771517460f4e0bcc802/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/574419704790bd33272dd771517460f4e0bcc802/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=574419704790bd33272dd771517460f4e0bcc802",
        "patch": "@@ -4554,7 +4554,8 @@ bool ProcessMessages(CNode* pfrom)\n         if (!fRet)\n             LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n \n-        break;\n+        if (!nConcurrentDownloads || GetTimeMicros() - nNow > 1000000 / nConcurrentDownloads)\n+            break;\n     }\n \n     // Detect whether we're stalling"
      }
    ]
  },
  {
    "sha": "e2b98a947337847ce22a5296e2eb4a7273412158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmI5OGE5NDczMzc4NDdjZTIyYTUyOTZlMmViNGE3MjczNDEyMTU4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-12T01:12:25Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-11-13T01:33:53Z"
      },
      "message": "Detect when headers downloading is stalling.",
      "tree": {
        "sha": "0176c649eeb8b8ba6a079bcefebb88923ad87c91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0176c649eeb8b8ba6a079bcefebb88923ad87c91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2b98a947337847ce22a5296e2eb4a7273412158",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b98a947337847ce22a5296e2eb4a7273412158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b98a947337847ce22a5296e2eb4a7273412158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b98a947337847ce22a5296e2eb4a7273412158/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "574419704790bd33272dd771517460f4e0bcc802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/574419704790bd33272dd771517460f4e0bcc802",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/574419704790bd33272dd771517460f4e0bcc802"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 49,
      "deletions": 27
    },
    "files": [
      {
        "sha": "74e4ff184b162db480a49581907d28c71ae77fe3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 27,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b98a947337847ce22a5296e2eb4a7273412158/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b98a947337847ce22a5296e2eb4a7273412158/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e2b98a947337847ce22a5296e2eb4a7273412158",
        "patch": "@@ -255,9 +255,8 @@ struct CNodeState {\n     CBlockIndex *pindexLastCommonBlock;\n     // Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n-    // Whether we've received headers from this peer.\n-    bool fHeadersReceived;\n     int64_t tBlockRecving;     // Time of last block reception.\n+    int64_t tHeadersRecving;   // Time of last headers reception.\n     int nStallSamples;         // Number of stall samples collected per minute.\n     int nStallBiggest;         // Biggest stall recorded in the last minute.\n     int nStallBiggestNext;     // Biggest stall recorded in the current minute.\n@@ -274,12 +273,14 @@ struct CNodeState {\n     // Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n     int64_t tGetdataBlock;     // Time first getdata block sent.\n+    int64_t tGetheaders;       // Time last getheaders request sent.\n     int nBlockSize;            // Size of current block being downloaded.\n     int nBlockDLed;            // Bytes of current block downloaded.\n+    int nHeadersSize;          // Size of current headers being downloaded.\n+    int nHeadersDLed;          // Bytes of current headers downloaded.\n     int nBlockBunch;           // Size of last bunch of blocks received.\n     list<QueuedBlock> vBlocksInFlight;\n     int nBlocksInFlight;       // How many getdata block requests still waiting for.\n-    bool fHeadersInFlight;     // Headers are being received still.\n     // Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n \n@@ -291,8 +292,8 @@ struct CNodeState {\n         hashLastUnknownBlock = uint256(0);\n         pindexLastCommonBlock = NULL;\n         fSyncStarted = false;\n-        fHeadersReceived = false;\n         tBlockRecving = 0;\n+        tHeadersRecving = 0;\n         nStallSamples = 0;\n         nStallBiggest = 0;\n         nStallBiggestNext = 0;\n@@ -307,11 +308,11 @@ struct CNodeState {\n         tLastClick = 0;\n         nStallingSince = 0;\n         tGetdataBlock = 0;\n+        tGetheaders = 0;\n         nBlockSize = 0;\n         nBlockDLed = 0;\n         nBlockBunch = 0;\n         nBlocksInFlight = 0;\n-        fHeadersInFlight = false;\n         fPreferredDownload = false;\n     }\n };\n@@ -3762,18 +3763,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // doing this will result in the received block being rejected as an orphan in case it is\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n-                    state->fHeadersInFlight = true;\n+                    int64_t nNow = GetTimeMicros();\n+                    state->tGetheaders = nNow;\n+                    if (!state->nBlocksInFlight)\n+                        state->nStallClicks = 0;\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                     if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - Params().TargetSpacing() * 20) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash);\n                         LogPrint(\"net\", \"Requesting(%d,%d) %s peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, inv.ToString(), pfrom->id, state->nBlocksInFlight);\n-                        if (!state->tGetdataBlock && !state->nBlocksInFlight) {\n-                            state->tGetdataBlock = GetTimeMicros();\n-                            state->nStallClicks = 0;\n-                        }\n+                        if (!state->tGetdataBlock)\n+                            state->tGetdataBlock = nNow;\n                     }\n                 }\n             }\n@@ -4014,15 +4016,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n \n-        State(pfrom->id)->fHeadersInFlight = false;\n-\n         if (nCount == 0) {\n             // Nothing interesting. Stop asking this peers for more headers.\n             return true;\n         }\n \n-        State(pfrom->id)->fHeadersReceived = true;\n-\n         CBlockIndex *pindexLast = NULL;\n         BOOST_FOREACH(const CBlockHeader& header, headers) {\n             CValidationState state;\n@@ -4049,7 +4047,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256(0));\n-            State(pfrom->id)->fHeadersInFlight = true;\n+            State(pfrom->id)->tGetheaders = GetTimeMicros();\n         }\n     }\n \n@@ -4361,7 +4359,7 @@ bool ProcessMessages(CNode* pfrom)\n         } else\n             LogPrintf(\"Abnormal time jump detected (%d > %d * 10).\\n\", nThisClick, std::max(nClickBiggest, nClickBiggestNext));\n     }\n-    if (state.nBlocksInFlight || state.fHeadersInFlight)\n+    if (state.nBlocksInFlight || state.tGetheaders || state.tHeadersRecving)\n         state.nClicks++;\n     tLastClick = nNow;\n     state.tLastClick = nNow;\n@@ -4456,7 +4454,7 @@ bool ProcessMessages(CNode* pfrom)\n         //            msg.complete() ? \"Y\" : \"N\");\n \n         if (msg.nDataPos != msg.nLastDataPos) {\n-            if (state.nBlocksInFlight || state.fHeadersInFlight) {\n+            if (state.nBlocksInFlight || state.tGetheaders || state.tHeadersRecving) {\n                 state.nBytesTotMinute += (msg.nDataPos - msg.nLastDataPos);\n                 nBytesTotMinute += (msg.nDataPos - msg.nLastDataPos);\n             }\n@@ -4471,17 +4469,32 @@ bool ProcessMessages(CNode* pfrom)\n             if (strCommand == \"block\") {\n                 state.nBlockDLed = msg.nDataPos;\n                 if (msg.nLastDataPos == 0) {\n-                    state.nBlockSize = nMessageSize;\n                     nBlockTotMinute += nMessageSize;\n                     nBlocksMinute++;\n                     state.nBlockBunch++;\n-                    if (!state.tBlockRecving && !msg.complete())\n+                    if (!state.nBlockSize && !msg.complete())\n                         LogPrint(\"net\", \"%d clicks later, first incoming block (%u of %u bytes) from peer=%d\\n\", state.nStallClicks, msg.nDataPos, nMessageSize, pfrom->id);\n+                    state.nBlockSize = nMessageSize;\n                 }\n                 state.tGetdataBlock = 0;\n                 state.tBlockRecving = nNow;\n+                state.nStallClicks = 0;\n+            }\n+            if (strCommand == \"headers\") {\n+                state.nHeadersDLed = msg.nDataPos;\n+                if (!msg.nLastDataPos) {\n+                    state.nHeadersSize = nMessageSize;\n+                    if (!state.tHeadersRecving && !msg.complete())\n+                        LogPrint(\"net\", \"%d clicks later, incoming headers (%u of %u bytes) from peer=%d\\n\", state.nStallClicks, msg.nDataPos, nMessageSize, pfrom->id);\n+                }\n+                state.tGetheaders = 0;\n+                if (msg.complete())\n+                    state.tHeadersRecving = 0;\n+                else\n+                    state.tHeadersRecving = nNow;\n+                if (!state.nBlocksInFlight)\n+                    state.nStallClicks = 0;\n             }\n-            state.nStallClicks = 0;\n             msg.nLastDataPos = msg.nDataPos;\n         }\n \n@@ -4559,13 +4572,20 @@ bool ProcessMessages(CNode* pfrom)\n     }\n \n     // Detect whether we're stalling\n-    if (state.tGetdataBlock && !state.tBlockRecving && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n+    if (state.tGetdataBlock > state.tBlockRecving && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n         LogPrintf(\"No response from peer=%d for getdata block for %d seconds (%d clicks).\\n\", pfrom->id, (nNow - state.tGetdataBlock) / 1000000, state.nStallClicks);\n         pfrom->fDisconnect = true;\n-    }\n+    } else\n     if (state.tBlockRecving && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n         LogPrintf(\"Block download (%u of %u bytes) from peer=%d stalled for %d seconds (%d clicks).\\n\", state.nBlockDLed, state.nBlockSize, pfrom->id, (nNow - state.tBlockRecving) / 1000000, state.nStallClicks);\n         pfrom->fDisconnect = true;\n+    } else\n+    if (state.tGetheaders && (state.nStallClicks * nAvgClick) > 10*1000*1000 && state.nStallClicks > std::max(nStallBiggest, nStallBiggestNext) * 2) {\n+        if (state.tHeadersRecving)\n+            LogPrintf(\"Headers download (%u of %u bytes) from peer=%d stalled for %d seconds (%d clicks).\\n\", state.nHeadersDLed, state.nHeadersSize, pfrom->id, (nNow - state.tHeadersRecving) / 1000000, state.nStallClicks);\n+        else\n+            LogPrintf(\"No response from peer=%d for getheaders for %s seconds (%d clicks).\\n\", pfrom->id, (nNow - state.tGetheaders) / 1000000, state.nStallClicks);\n+        pfrom->fDisconnect = true;\n     }\n \n     // In case the connection got shut down, its receive buffer was wiped\n@@ -4690,6 +4710,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (pindexBestHeader == NULL)\n             pindexBestHeader = chainActive.Tip();\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+        int64_t nNow = GetTimeMicros();\n         if (!state.fSyncStarted && !pto->fClient && fFetch && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n             if (nSyncStarted == 0 || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n@@ -4698,7 +4719,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256(0));\n-                state.fHeadersInFlight = true;\n+                state.tGetheaders = nNow;\n+                state.nStallClicks = 0;\n             }\n         }\n \n@@ -4759,7 +4781,6 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->PushMessage(\"inv\", vInv);\n \n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n         if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n@@ -4786,7 +4807,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 pto->fDisconnect = true;\n             }\n         }\n-        if (!pto->fDisconnect && !pto->fClient && fFetch && state.fHeadersReceived && state.nBlocksInFlight < state.nMaxInFlight) {\n+        if (!pto->fDisconnect && !pto->fClient && fFetch && state.nBlocksInFlight < state.nMaxInFlight) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             int nToDownload = state.nMaxInFlight - state.nBlocksInFlight;\n@@ -4806,9 +4827,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n                 LogPrint(\"net\", \"Requesting(%d,%d) block %s (%d) peer=%d (%d)\\n\", nConcurrentDownloads, nBlocksInFlight, pindex->GetBlockHash().ToString(), pindex->nHeight, pto->id, state.nBlocksInFlight);\n-                if (!state.tGetdataBlock && !state.nBlocksInFlight) {\n+                if (!state.tGetdataBlock) {\n                     state.tGetdataBlock = nNow;\n-                    state.nStallClicks = 0;\n+                    if (!state.nBlocksInFlight)\n+                        state.nStallClicks = 0;\n                 }\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n             }"
      }
    ]
  }
]