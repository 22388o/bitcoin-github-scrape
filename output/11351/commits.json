[
  {
    "sha": "2a07f878a80003f2142d5052d015a9ac81a3a6bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTA3Zjg3OGE4MDAwM2YyMTQyZDUwNTJkMDE1YTlhYzgxYTNhNmJj",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-16T10:06:05Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-16T10:06:05Z"
      },
      "message": "Refactor: Modernize disallowed copy constructors/assignment\n\nUse C++11's better capability of expressing an interface of a non-copyable class by publicly deleting its copy ctor and assignment operator instead of just declaring them private.",
      "tree": {
        "sha": "43e85852061f076a5a247cbb2eea8a8c59c73ce8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43e85852061f076a5a247cbb2eea8a8c59c73ce8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a07f878a80003f2142d5052d015a9ac81a3a6bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a07f878a80003f2142d5052d015a9ac81a3a6bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a07f878a80003f2142d5052d015a9ac81a3a6bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a07f878a80003f2142d5052d015a9ac81a3a6bc/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e278f86c536921032e8288625dc5f3af610f2ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f86c536921032e8288625dc5f3af610f2ec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f86c536921032e8288625dc5f3af610f2ec8"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 30,
      "deletions": 34
    },
    "files": [
      {
        "sha": "181b2fd4b9798614a486ef24e3e8f89520f7b2f6",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -214,6 +214,11 @@ class CCoinsViewCache : public CCoinsViewBacked\n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n \n+    /**\n+     * By deleting the copy constructor, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n+     */\n+    CCoinsViewCache(const CCoinsViewCache &) = delete;\n+\n     // Standard CCoinsView methods\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n@@ -290,11 +295,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n private:\n     CCoinsMap::iterator FetchCoin(const COutPoint &outpoint) const;\n-\n-    /**\n-     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n-     */\n-    CCoinsViewCache(const CCoinsViewCache &);\n };\n \n //! Utility function to add all of a transaction's outputs to a cache."
      },
      {
        "sha": "cfc383ced5d9bbe92a0adcc1d70075c8980ee48f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -702,13 +702,11 @@ class CNode\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n+    CNode(const CNode&) = delete;\n+    CNode& operator=(const CNode&) = delete;\n \n private:\n-    CNode(const CNode&);\n-    void operator=(const CNode&);\n     const NodeId id;\n-\n-\n     const uint64_t nLocalHostNonce;\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;"
      },
      {
        "sha": "9a3badea57848090219d5048312c2af2afc7542f",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -455,10 +455,6 @@ class CDataStream\n class CAutoFile\n {\n private:\n-    // Disallow copies\n-    CAutoFile(const CAutoFile&);\n-    CAutoFile& operator=(const CAutoFile&);\n-\n     const int nType;\n     const int nVersion;\n \n@@ -475,6 +471,10 @@ class CAutoFile\n         fclose();\n     }\n \n+    // Disallow copies\n+    CAutoFile(const CAutoFile&) = delete;\n+    CAutoFile& operator=(const CAutoFile&) = delete;\n+\n     void fclose()\n     {\n         if (file) {\n@@ -564,10 +564,6 @@ class CAutoFile\n class CBufferedFile\n {\n private:\n-    // Disallow copies\n-    CBufferedFile(const CBufferedFile&);\n-    CBufferedFile& operator=(const CBufferedFile&);\n-\n     const int nType;\n     const int nVersion;\n \n@@ -609,6 +605,10 @@ class CBufferedFile\n         fclose();\n     }\n \n+    // Disallow copies\n+    CBufferedFile(const CBufferedFile&) = delete;\n+    CBufferedFile& operator=(const CBufferedFile&) = delete;\n+\n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n "
      },
      {
        "sha": "834f0371e2db5e419a1cc9ec5fb4a55d94273943",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -50,6 +50,9 @@ class Arena\n     Arena(void *base, size_t size, size_t alignment);\n     virtual ~Arena();\n \n+    Arena(const Arena& other) = delete; // non construction-copyable\n+    Arena& operator=(const Arena&) = delete; // non copyable\n+\n     /** Memory statistics. */\n     struct Stats\n     {\n@@ -85,9 +88,6 @@ class Arena\n      */\n     bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }\n private:\n-    Arena(const Arena& other) = delete; // non construction-copyable\n-    Arena& operator=(const Arena&) = delete; // non copyable\n-\n     /** Map of chunk address to chunk information. This class makes use of the\n      * sorted order to merge previous and next chunks during deallocation.\n      */\n@@ -153,6 +153,9 @@ class LockedPool\n     explicit LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = nullptr);\n     ~LockedPool();\n \n+    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n+    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n+\n     /** Allocate size bytes from this arena.\n      * Returns pointer on success, or 0 if memory is full or\n      * the application tried to allocate 0 bytes.\n@@ -168,9 +171,6 @@ class LockedPool\n     /** Get pool usage statistics */\n     Stats stats() const;\n private:\n-    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n-    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n-\n     std::unique_ptr<LockedPageAllocator> allocator;\n \n     /** Create an arena from locked pages */"
      },
      {
        "sha": "c254ba91c88bc3e057f28d5cba05733d413910dc",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -110,10 +110,10 @@ class CBlockTreeDB : public CDBWrapper\n {\n public:\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n-private:\n-    CBlockTreeDB(const CBlockTreeDB&);\n-    void operator=(const CBlockTreeDB&);\n-public:\n+\n+    CBlockTreeDB(const CBlockTreeDB&) = delete;\n+    CBlockTreeDB& operator=(const CBlockTreeDB&) = delete;\n+\n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n     bool ReadLastBlockFile(int &nFile);"
      },
      {
        "sha": "14283ac8f8f18150fde7f0f8d67b296a7a92fbb4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -156,6 +156,9 @@ class CDB\n     explicit CDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n+    CDB(const CDB&) = delete;\n+    CDB& operator=(const CDB&) = delete;\n+\n     void Flush();\n     void Close();\n     static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n@@ -168,10 +171,6 @@ class CDB\n     /* verifies the database file */\n     static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n-private:\n-    CDB(const CDB&);\n-    void operator=(const CDB&);\n-\n public:\n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "3a146179afb21e5519c2b6a8bf0fe4509af70ae7",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a07f878a80003f2142d5052d015a9ac81a3a6bc/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "patch": "@@ -167,6 +167,8 @@ class CWalletDB\n         m_dbw(dbw)\n     {\n     }\n+    CWalletDB(const CWalletDB&) = delete;\n+    CWalletDB& operator=(const CWalletDB&) = delete;\n \n     bool WriteName(const std::string& strAddress, const std::string& strName);\n     bool EraseName(const std::string& strAddress);\n@@ -244,9 +246,6 @@ class CWalletDB\n private:\n     CDB batch;\n     CWalletDBWrapper& m_dbw;\n-\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n };\n \n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)"
      }
    ]
  }
]