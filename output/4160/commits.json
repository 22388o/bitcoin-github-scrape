[
  {
    "sha": "ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2M4NGUwOTYzZGFiMmVlNjI3NmNjYzk3NjZjMmMxOWIwZWJiM2Uz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T15:38:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T15:38:44Z"
      },
      "message": "Reduce bignum.h now it is only needed for scriptnum_tests",
      "tree": {
        "sha": "6fbda694cc19547bdb80296fce0ba09bb3f38d61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fbda694cc19547bdb80296fce0ba09bb3f38d61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa"
      }
    ],
    "stats": {
      "total": 495,
      "additions": 3,
      "deletions": 492
    },
    "files": [
      {
        "sha": "b57800f372522758a6da60f90ec90bb7066130fd",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 2,
        "deletions": 353,
        "changes": 355,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "patch": "@@ -6,52 +6,21 @@\n #ifndef BITCOIN_BIGNUM_H\n #define BITCOIN_BIGNUM_H\n \n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n-\n+#include <algorithm>\n+#include <limits>\n #include <stdexcept>\n #include <stdint.h>\n #include <vector>\n \n #include <openssl/bn.h>\n \n-/** Errors thrown by the bignum class */\n class bignum_error : public std::runtime_error\n {\n public:\n     explicit bignum_error(const std::string& str) : std::runtime_error(str) {}\n };\n \n \n-/** RAII encapsulated BN_CTX (OpenSSL bignum context) */\n-class CAutoBN_CTX\n-{\n-protected:\n-    BN_CTX* pctx;\n-    BN_CTX* operator=(BN_CTX* pnew) { return pctx = pnew; }\n-\n-public:\n-    CAutoBN_CTX()\n-    {\n-        pctx = BN_CTX_new();\n-        if (pctx == NULL)\n-            throw bignum_error(\"CAutoBN_CTX : BN_CTX_new() returned NULL\");\n-    }\n-\n-    ~CAutoBN_CTX()\n-    {\n-        if (pctx != NULL)\n-            BN_CTX_free(pctx);\n-    }\n-\n-    operator BN_CTX*() { return pctx; }\n-    BN_CTX& operator*() { return *pctx; }\n-    BN_CTX** operator&() { return &pctx; }\n-    bool operator!() { return (pctx == NULL); }\n-};\n-\n-\n /** C++ wrapper for BIGNUM (OpenSSL bignum) */\n class CBigNum : public BIGNUM\n {\n@@ -83,41 +52,14 @@ class CBigNum : public BIGNUM\n         BN_clear_free(this);\n     }\n \n-    //CBigNum(char n) is not portable.  Use 'signed char' or 'unsigned char'.\n-    CBigNum(signed char n)        { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(short n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(int n)                { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(long n)               { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n     CBigNum(long long n)          { BN_init(this); setint64(n); }\n-    CBigNum(unsigned char n)      { BN_init(this); setulong(n); }\n-    CBigNum(unsigned short n)     { BN_init(this); setulong(n); }\n-    CBigNum(unsigned int n)       { BN_init(this); setulong(n); }\n-    CBigNum(unsigned long n)      { BN_init(this); setulong(n); }\n-    CBigNum(unsigned long long n) { BN_init(this); setuint64(n); }\n-    explicit CBigNum(uint256 n)   { BN_init(this); setuint256(n); }\n \n     explicit CBigNum(const std::vector<unsigned char>& vch)\n     {\n         BN_init(this);\n         setvch(vch);\n     }\n \n-    void setulong(unsigned long n)\n-    {\n-        if (!BN_set_word(this, n))\n-            throw bignum_error(\"CBigNum conversion from unsigned long : BN_set_word failed\");\n-    }\n-\n-    unsigned long getulong() const\n-    {\n-        return BN_get_word(this);\n-    }\n-\n-    unsigned int getuint() const\n-    {\n-        return BN_get_word(this);\n-    }\n-\n     int getint() const\n     {\n         unsigned long n = BN_get_word(this);\n@@ -172,76 +114,6 @@ class CBigNum : public BIGNUM\n         BN_mpi2bn(pch, p - pch, this);\n     }\n \n-    void setuint64(uint64_t n)\n-    {\n-        unsigned char pch[sizeof(n) + 6];\n-        unsigned char* p = pch + 4;\n-        bool fLeadingZeroes = true;\n-        for (int i = 0; i < 8; i++)\n-        {\n-            unsigned char c = (n >> 56) & 0xff;\n-            n <<= 8;\n-            if (fLeadingZeroes)\n-            {\n-                if (c == 0)\n-                    continue;\n-                if (c & 0x80)\n-                    *p++ = 0;\n-                fLeadingZeroes = false;\n-            }\n-            *p++ = c;\n-        }\n-        unsigned int nSize = p - (pch + 4);\n-        pch[0] = (nSize >> 24) & 0xff;\n-        pch[1] = (nSize >> 16) & 0xff;\n-        pch[2] = (nSize >> 8) & 0xff;\n-        pch[3] = (nSize) & 0xff;\n-        BN_mpi2bn(pch, p - pch, this);\n-    }\n-\n-    void setuint256(uint256 n)\n-    {\n-        unsigned char pch[sizeof(n) + 6];\n-        unsigned char* p = pch + 4;\n-        bool fLeadingZeroes = true;\n-        unsigned char* pbegin = (unsigned char*)&n;\n-        unsigned char* psrc = pbegin + sizeof(n);\n-        while (psrc != pbegin)\n-        {\n-            unsigned char c = *(--psrc);\n-            if (fLeadingZeroes)\n-            {\n-                if (c == 0)\n-                    continue;\n-                if (c & 0x80)\n-                    *p++ = 0;\n-                fLeadingZeroes = false;\n-            }\n-            *p++ = c;\n-        }\n-        unsigned int nSize = p - (pch + 4);\n-        pch[0] = (nSize >> 24) & 0xff;\n-        pch[1] = (nSize >> 16) & 0xff;\n-        pch[2] = (nSize >> 8) & 0xff;\n-        pch[3] = (nSize >> 0) & 0xff;\n-        BN_mpi2bn(pch, p - pch, this);\n-    }\n-\n-    uint256 getuint256() const\n-    {\n-        unsigned int nSize = BN_bn2mpi(this, NULL);\n-        if (nSize < 4)\n-            return 0;\n-        std::vector<unsigned char> vch(nSize);\n-        BN_bn2mpi(this, &vch[0]);\n-        if (vch.size() > 4)\n-            vch[4] &= 0x7f;\n-        uint256 n = 0;\n-        for (unsigned int i = 0, j = vch.size()-1; i < sizeof(n) && j >= 4; i++, j--)\n-            ((unsigned char*)&n)[i] = vch[j];\n-        return n;\n-    }\n-\n     void setvch(const std::vector<unsigned char>& vch)\n     {\n         std::vector<unsigned char> vch2(vch.size() + 4);\n@@ -269,188 +141,7 @@ class CBigNum : public BIGNUM\n         return vch;\n     }\n \n-    void SetHex(const std::string& str)\n-    {\n-        // skip 0x\n-        const char* psz = str.c_str();\n-        while (isspace(*psz))\n-            psz++;\n-        bool fNegative = false;\n-        if (*psz == '-')\n-        {\n-            fNegative = true;\n-            psz++;\n-        }\n-        if (psz[0] == '0' && tolower(psz[1]) == 'x')\n-            psz += 2;\n-        while (isspace(*psz))\n-            psz++;\n-\n-        // hex string to bignum\n-        *this = 0;\n-        int n;\n-        while ((n = HexDigit(*psz)) != -1)\n-        {\n-            *this <<= 4;\n-            *this += n;\n-            ++psz;\n-        }\n-        if (fNegative)\n-            *this = 0 - *this;\n-    }\n-\n-    std::string ToString(int nBase=10) const\n-    {\n-        CAutoBN_CTX pctx;\n-        CBigNum bnBase = nBase;\n-        CBigNum bn0 = 0;\n-        std::string str;\n-        CBigNum bn = *this;\n-        BN_set_negative(&bn, false);\n-        CBigNum dv;\n-        CBigNum rem;\n-        if (BN_cmp(&bn, &bn0) == 0)\n-            return \"0\";\n-        while (BN_cmp(&bn, &bn0) > 0)\n-        {\n-            if (!BN_div(&dv, &rem, &bn, &bnBase, pctx))\n-                throw bignum_error(\"CBigNum::ToString() : BN_div failed\");\n-            bn = dv;\n-            unsigned int c = rem.getulong();\n-            str += \"0123456789abcdef\"[c];\n-        }\n-        if (BN_is_negative(this))\n-            str += \"-\";\n-        reverse(str.begin(), str.end());\n-        return str;\n-    }\n-\n-    std::string GetHex() const\n-    {\n-        return ToString(16);\n-    }\n-\n-    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n-    {\n-        return ::GetSerializeSize(getvch(), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n-    {\n-        ::Serialize(s, getvch(), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n-    {\n-        std::vector<unsigned char> vch;\n-        ::Unserialize(s, vch, nType, nVersion);\n-        setvch(vch);\n-    }\n-\n-\n-    bool operator!() const\n-    {\n-        return BN_is_zero(this);\n-    }\n-\n-    CBigNum& operator+=(const CBigNum& b)\n-    {\n-        if (!BN_add(this, this, &b))\n-            throw bignum_error(\"CBigNum::operator+= : BN_add failed\");\n-        return *this;\n-    }\n-\n-    CBigNum& operator-=(const CBigNum& b)\n-    {\n-        *this = *this - b;\n-        return *this;\n-    }\n-\n-    CBigNum& operator*=(const CBigNum& b)\n-    {\n-        CAutoBN_CTX pctx;\n-        if (!BN_mul(this, this, &b, pctx))\n-            throw bignum_error(\"CBigNum::operator*= : BN_mul failed\");\n-        return *this;\n-    }\n-\n-    CBigNum& operator/=(const CBigNum& b)\n-    {\n-        *this = *this / b;\n-        return *this;\n-    }\n-\n-    CBigNum& operator%=(const CBigNum& b)\n-    {\n-        *this = *this % b;\n-        return *this;\n-    }\n-\n-    CBigNum& operator<<=(unsigned int shift)\n-    {\n-        if (!BN_lshift(this, this, shift))\n-            throw bignum_error(\"CBigNum:operator<<= : BN_lshift failed\");\n-        return *this;\n-    }\n-\n-    CBigNum& operator>>=(unsigned int shift)\n-    {\n-        // Note: BN_rshift segfaults on 64-bit if 2^shift is greater than the number\n-        //   if built on ubuntu 9.04 or 9.10, probably depends on version of OpenSSL\n-        CBigNum a = 1;\n-        a <<= shift;\n-        if (BN_cmp(&a, this) > 0)\n-        {\n-            *this = 0;\n-            return *this;\n-        }\n-\n-        if (!BN_rshift(this, this, shift))\n-            throw bignum_error(\"CBigNum:operator>>= : BN_rshift failed\");\n-        return *this;\n-    }\n-\n-\n-    CBigNum& operator++()\n-    {\n-        // prefix operator\n-        if (!BN_add(this, this, BN_value_one()))\n-            throw bignum_error(\"CBigNum::operator++ : BN_add failed\");\n-        return *this;\n-    }\n-\n-    const CBigNum operator++(int)\n-    {\n-        // postfix operator\n-        const CBigNum ret = *this;\n-        ++(*this);\n-        return ret;\n-    }\n-\n-    CBigNum& operator--()\n-    {\n-        // prefix operator\n-        CBigNum r;\n-        if (!BN_sub(&r, this, BN_value_one()))\n-            throw bignum_error(\"CBigNum::operator-- : BN_sub failed\");\n-        *this = r;\n-        return *this;\n-    }\n-\n-    const CBigNum operator--(int)\n-    {\n-        // postfix operator\n-        const CBigNum ret = *this;\n-        --(*this);\n-        return ret;\n-    }\n-\n-\n     friend inline const CBigNum operator-(const CBigNum& a, const CBigNum& b);\n-    friend inline const CBigNum operator/(const CBigNum& a, const CBigNum& b);\n-    friend inline const CBigNum operator%(const CBigNum& a, const CBigNum& b);\n };\n \n \n@@ -478,48 +169,6 @@ inline const CBigNum operator-(const CBigNum& a)\n     return r;\n }\n \n-inline const CBigNum operator*(const CBigNum& a, const CBigNum& b)\n-{\n-    CAutoBN_CTX pctx;\n-    CBigNum r;\n-    if (!BN_mul(&r, &a, &b, pctx))\n-        throw bignum_error(\"CBigNum::operator* : BN_mul failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator/(const CBigNum& a, const CBigNum& b)\n-{\n-    CAutoBN_CTX pctx;\n-    CBigNum r;\n-    if (!BN_div(&r, NULL, &a, &b, pctx))\n-        throw bignum_error(\"CBigNum::operator/ : BN_div failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator%(const CBigNum& a, const CBigNum& b)\n-{\n-    CAutoBN_CTX pctx;\n-    CBigNum r;\n-    if (!BN_mod(&r, &a, &b, pctx))\n-        throw bignum_error(\"CBigNum::operator% : BN_div failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator<<(const CBigNum& a, unsigned int shift)\n-{\n-    CBigNum r;\n-    if (!BN_lshift(&r, &a, shift))\n-        throw bignum_error(\"CBigNum:operator<< : BN_lshift failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator>>(const CBigNum& a, unsigned int shift)\n-{\n-    CBigNum r = a;\n-    r >>= shift;\n-    return r;\n-}\n-\n inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }\n inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\n inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }"
      },
      {
        "sha": "5600b904ccdcfc82973bf07e106b53a252401296",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_CHAIN_PARAMS_H\n #define BITCOIN_CHAIN_PARAMS_H\n \n-#include \"bignum.h\"\n #include \"uint256.h\"\n \n #include <vector>"
      },
      {
        "sha": "e6f105fe5c052aecb4e7831e4ce11a01c95dbdfd",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "patch": "@@ -14,6 +14,7 @@\n #include \"netbase.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "fb06fb34354797ae19dcad545c383cf89cc78556",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "patch": "@@ -8,7 +8,6 @@\n \n \n \n-#include \"bignum.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "fbc79cf996f1dd054da373e8f41319741997ba56",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "patch": "@@ -37,7 +37,6 @@ test_bitcoin_SOURCES = \\\n   base32_tests.cpp \\\n   base58_tests.cpp \\\n   base64_tests.cpp \\\n-  bignum_tests.cpp \\\n   bloom_tests.cpp \\\n   canonical_tests.cpp \\\n   checkblock_tests.cpp \\"
      },
      {
        "sha": "01967c76847211d6ede0fb1df0ecdf8d26a186c0",
        "filename": "src/test/bignum_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 136,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa/src/test/bignum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa/src/test/bignum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum_tests.cpp?ref=8bcfccbc2de25e3b40d1c222d7c5d9991345a0aa",
        "patch": "@@ -1,136 +0,0 @@\n-// Copyright (c) 2012-2014 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"bignum.h\"\n-\n-#include <limits>\n-#include <stdint.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(bignum_tests)\n-\n-// Unfortunately there's no standard way of preventing a function from being\n-// inlined, so we define a macro for it.\n-//\n-// You should use it like this:\n-//   NOINLINE void function() {...}\n-#if defined(__GNUC__)\n-// This also works and will be defined for any compiler implementing GCC\n-// extensions, such as Clang and ICC.\n-#define NOINLINE __attribute__((noinline))\n-#elif defined(_MSC_VER)\n-#define NOINLINE __declspec(noinline)\n-#else\n-// We give out a warning because it impacts the correctness of one bignum test.\n-#warning You should define NOINLINE for your compiler.\n-#define NOINLINE\n-#endif\n-\n-// For the following test case, it is useful to use additional tools.\n-//\n-// The simplest one to use is the compiler flag -ftrapv, which detects integer\n-// overflows and similar errors. However, due to optimizations and compilers\n-// taking advantage of undefined behavior sometimes it may not actually detect\n-// anything.\n-//\n-// You can also use compiler-based stack protection to possibly detect possible\n-// stack buffer overruns.\n-//\n-// For more accurate diagnostics, you can use an undefined arithmetic operation\n-// detector such as the clang's undefined behaviour checker.\n-// See also: http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation\n-//\n-// It might also be useful to use Google's AddressSanitizer to detect\n-// stack buffer overruns, which valgrind can't currently detect.\n-\n-// Let's force this code not to be inlined, in order to actually\n-// test a generic version of the function. This increases the chance\n-// that -ftrapv will detect overflows.\n-NOINLINE void mysetint64(CBigNum& num, int64_t n)\n-{\n-    num.setint64(n);\n-}\n-\n-// For each number, we do 2 tests: one with inline code, then we reset the\n-// value to 0, then the second one with a non-inlined function.\n-BOOST_AUTO_TEST_CASE(bignum_setint64)\n-{\n-    int64_t n;\n-\n-    {\n-        n = 0;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-    }\n-    {\n-        n = 1;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"1\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"1\");\n-    }\n-    {\n-        n = -1;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-1\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-1\");\n-    }\n-    {\n-        n = 5;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"5\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"5\");\n-    }\n-    {\n-        n = -5;\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-5\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-5\");\n-    }\n-    {\n-        n = std::numeric_limits<int64_t>::min();\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n-    }\n-    {\n-        n = std::numeric_limits<int64_t>::max();\n-        CBigNum num(n);\n-        BOOST_CHECK(num.ToString() == \"9223372036854775807\");\n-        num.setulong(0);\n-        BOOST_CHECK(num.ToString() == \"0\");\n-        mysetint64(num, n);\n-        BOOST_CHECK(num.ToString() == \"9223372036854775807\");\n-    }\n-}\n-\n-\n-BOOST_AUTO_TEST_CASE(bignum_SetHex)\n-{\n-    std::string hexStr = \"deecf97fd890808b9cc0f1b6a3e7a60b400f52710e6ad075b1340755bfa58cc9\";\n-    CBigNum num;\n-    num.SetHex(hexStr);\n-    BOOST_CHECK_EQUAL(num.GetHex(), hexStr);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7cd0af7cc222d0694ce72e71458aef460698ee2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2QwYWY3Y2MyMjJkMDY5NGNlNzJlNzE0NThhZWY0NjA2OThlZTJj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T15:56:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T15:56:16Z"
      },
      "message": "Move bignum.h to test/",
      "tree": {
        "sha": "afec48c1fecc2264e5d9586aa467039efc1abb98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afec48c1fecc2264e5d9586aa467039efc1abb98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cd0af7cc222d0694ce72e71458aef460698ee2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd0af7cc222d0694ce72e71458aef460698ee2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd0af7cc222d0694ce72e71458aef460698ee2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd0af7cc222d0694ce72e71458aef460698ee2c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc84e0963dab2ee6276ccc9766c2c19b0ebb3e3"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a49ad587160bb3bc5ac5c675ea438eec514460b5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7cd0af7cc222d0694ce72e71458aef460698ee2c",
        "patch": "@@ -28,7 +28,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n   allocators.h \\\n-  base58.h bignum.h \\\n+  base58.h \\\n   bloom.h \\\n   chainparams.h \\\n   checkpoints.h \\"
      },
      {
        "sha": "cde3a31e2fb7c95d447dc5937153acb94d9c833a",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=7cd0af7cc222d0694ce72e71458aef460698ee2c",
        "patch": "@@ -32,6 +32,7 @@ endif\n test_bitcoin_LDADD += $(BDB_LIBS)\n \n test_bitcoin_SOURCES = \\\n+  bignum.h \\\n   alert_tests.cpp \\\n   allocator_tests.cpp \\\n   base32_tests.cpp \\"
      },
      {
        "sha": "b57800f372522758a6da60f90ec90bb7066130fd",
        "filename": "src/test/bignum.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=7cd0af7cc222d0694ce72e71458aef460698ee2c",
        "previous_filename": "src/bignum.h"
      }
    ]
  }
]