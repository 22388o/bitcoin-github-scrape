vasild,2020-09-09 19:05:34,"This overlaps with #19865 and #19918.\n\ncc @hebasto @ryanofsky @MarcoFalke @ajtowns ",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689757482,689757482,
hebasto,2020-09-09 19:50:35,"Tested with the following patch:\n```diff\n--- a/src/txmempool.cpp\n+++ b/src/txmempool.cpp\n@@ -1108,7 +1108,7 @@ bool CTxMemPool::IsLoaded() const\n \n void CTxMemPool::SetIsLoaded(bool loaded)\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     m_is_loaded = loaded;\n }\n \n```\n\n- on master (564e1ab0f3dc573bd3ea60a80f6649c361243df9) clang emits warning:\n```\ntxmempool.cpp:11",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689782739,689782739,
vasild,2020-09-09 20:21:37,"This is exactly how it is supposed to work: https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability\n\n`m_is_loaded = loaded;` is never going to be executed if `cs` is not locked and thus clang does not emit a warning about it.",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689800574,689800574,
vasild,2020-09-10 07:00:45,"Just to elaborate - expecting a warning in the example above is similar to expecting a warning in:\n\n```cpp\nint Func(int x)\n{\n    if (x == 1) {\n        return 10;\n    }       \n    abort();\n} // should we get ""control reaches end of non-void function"" here?\n```\n\nThe compiler does not emit a warning because it sees that `abort()` will [not return](https://en.cppreference.com/w",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690032955,690032955,
hebasto,2020-09-10 07:31:10,"My testing [patch](https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689782739) makes the code wrong from the point of concurrency -- writing to `m_is_loaded` is not protected by a mutex.\n\nOn master compiler emits a warning about wrong code.\n\nWith this PR we get know about wrong code only at run time.\n\nI believe that the former is strictly better then latter.",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690048719,690048719,
ryanofsky,2020-09-10 15:15:20,"@vasild, the [textualist](https://en.wikipedia.org/wiki/Textualism) interpretation of the clang documentation here is very smart, but I think is misplaced because https://clang.llvm.org/docs/ThreadSafetyAnalysis.html is not a legal document or programming language standard, and this interpretation causes practical problems that will make the code less verifiably thread safe and harder to work with",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690358411,690358411,
vasild,2020-09-14 07:38:06,"@hebasto, @ryanofsky, thanks for the review!\n\nI re-read your comments a few times and I see your points, but I disagree with some of the above. I see neither side is convinced and so I am closing this PR because for it to get merged an agreement is needed.\n\nIt would have been too boring if everybody agreed on everything all the time! :)\n\nI still think that sticking to the documentation",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-691878491,691878491,
ryanofsky,2020-09-14 20:05:38,"@vasild I can't speak for others, but I agree with you there is a potential problem. I just don't think this PR is an good solution to the problem due to bigger problems it creates.\n\nI think the best solution would be a documentation fix. It'd be helpful if you could take a look at https://reviews.llvm.org/D87629 and see if it resolves your concerns.",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-692284229,692284229,
aaronpuchert,2020-09-16 23:38:47,"> * if `DEBUG_LOCKORDER` is not defined, then `AssertLockHeld()` does\n>   nothing, thus don't tag it with any attributes (don't fool the\n>   compiler that we do something which we don't).\n\nThe attribute is meant to model the standard `assert`, so the function doesn't have to actually check anything. My [comment](https://reviews.llvm.org/D87629#2278073) on @ryanofsky's documentation change ",https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-693722339,693722339,
