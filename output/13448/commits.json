[
  {
    "sha": "634bd970013eca90f4b4c1f9044eec8c97ba62c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzRiZDk3MDAxM2VjYTkwZjRiNGMxZjkwNDRlZWM4Yzk3YmE2MmMy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-12T15:49:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-12T19:34:52Z"
      },
      "message": "Explicitly specify encoding when opening text files in Python code",
      "tree": {
        "sha": "cf308babc695722ab55344bcd27b1b68802ce3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf308babc695722ab55344bcd27b1b68802ce3f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/634bd970013eca90f4b4c1f9044eec8c97ba62c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634bd970013eca90f4b4c1f9044eec8c97ba62c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/634bd970013eca90f4b4c1f9044eec8c97ba62c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634bd970013eca90f4b4c1f9044eec8c97ba62c2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4b9065a8298f546d91fe382b4517fbf30749c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b9065a8298f546d91fe382b4517fbf30749c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b9065a8298f546d91fe382b4517fbf30749c1"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "abfa5ed5ae7b01a86f7bbe8b9229fb69f2356b9f",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -37,7 +37,7 @@ def module_name(path):\n # TODO: implement support for multiple include directories\n for arg in sorted(files.keys()):\n     module = files[arg]\n-    with open(arg, 'r') as f:\n+    with open(arg, 'r', encoding=\"utf8\") as f:\n         for line in f:\n             match = RE.match(line)\n             if match:"
      },
      {
        "sha": "77e845a9b4976c2ae1f7438e734b9bb9bad9fa49",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -152,7 +152,7 @@ def main():\n       sys.exit(p.returncode)\n \n     if not args.i:\n-      with open(filename) as f:\n+      with open(filename, encoding=\"utf8\") as f:\n         code = f.readlines()\n       formatted_code = io.StringIO(stdout).readlines()\n       diff = difflib.unified_diff(code, formatted_code,"
      },
      {
        "sha": "da7d74bdc45459ac44008035739fe82a8943711a",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -146,7 +146,7 @@ def file_has_without_c_style_copyright_for_holder(contents, holder_name):\n ################################################################################\n \n def read_file(filename):\n-    return open(os.path.abspath(filename), 'r').read()\n+    return open(os.path.abspath(filename), 'r', encoding=\"utf8\").read()\n \n def gather_file_info(filename):\n     info = {}\n@@ -325,13 +325,13 @@ def get_most_recent_git_change_year(filename):\n ################################################################################\n \n def read_file_lines(filename):\n-    f = open(os.path.abspath(filename), 'r')\n+    f = open(os.path.abspath(filename), 'r', encoding=\"utf8\")\n     file_lines = f.readlines()\n     f.close()\n     return file_lines\n \n def write_file_lines(filename, file_lines):\n-    f = open(os.path.abspath(filename), 'w')\n+    f = open(os.path.abspath(filename), 'w', encoding=\"utf8\")\n     f.write(''.join(file_lines))\n     f.close()\n "
      },
      {
        "sha": "4e90f85f5033db4c6e9ec23204a66e9c62398491",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -191,7 +191,7 @@ def main():\n     merge_branch = 'pull/'+pull+'/merge'\n     local_merge_branch = 'pull/'+pull+'/local-merge'\n \n-    devnull = open(os.devnull,'w')\n+    devnull = open(os.devnull, 'w', encoding=\"utf8\")\n     try:\n         subprocess.check_call([GIT,'checkout','-q',branch])\n     except subprocess.CalledProcessError:"
      },
      {
        "sha": "9b6d6bf6658bd7509b7297a5f9fd0b770bd6cf39",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -9,7 +9,7 @@\n import unittest\n \n def write_testcode(filename):\n-    with open(filename, 'w') as f:\n+    with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n     #include <stdio.h>\n     int main()"
      },
      {
        "sha": "df1db76e924ef025d1449441cfd01fdf14cc3f85",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -13,8 +13,8 @@\n outfile = args.outfile\n \n in_remove = False\n-with open(tracefile, 'r') as f:\n-    with open(outfile, 'w') as wf:\n+with open(tracefile, 'r', encoding=\"utf8\") as f:\n+    with open(outfile, 'w', encoding=\"utf8\") as wf:\n         for line in f:\n             for p in pattern:\n                 if line.startswith(\"SF:\") and p in line:"
      },
      {
        "sha": "b501388fd2b4123d5c0a5d22e020994cede66117",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -75,7 +75,7 @@ def get_blk_dt(blk_hdr):\n # When getting the list of block hashes, undo any byte reversals.\n def get_block_hashes(settings):\n     blkindex = []\n-    f = open(settings['hashlist'], \"r\")\n+    f = open(settings['hashlist'], \"r\", encoding=\"utf8\")\n     for line in f:\n         line = line.rstrip()\n         if settings['rev_hash_bytes'] == 'true':\n@@ -261,7 +261,7 @@ def run(self):\n         print(\"Usage: linearize-data.py CONFIG-FILE\")\n         sys.exit(1)\n \n-    f = open(sys.argv[1])\n+    f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n         m = re.search('^\\s*#', line)"
      },
      {
        "sha": "bfd21719475a3df63c82014e86ba229976f75fdb",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -96,7 +96,7 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \n def get_rpc_cookie():\n     # Open the cookie file\n-    with open(os.path.join(os.path.expanduser(settings['datadir']), '.cookie'), 'r') as f:\n+    with open(os.path.join(os.path.expanduser(settings['datadir']), '.cookie'), 'r', encoding=\"ascii\") as f:\n         combined = f.readline()\n         combined_split = combined.split(\":\")\n         settings['rpcuser'] = combined_split[0]\n@@ -107,7 +107,7 @@ def get_rpc_cookie():\n         print(\"Usage: linearize-hashes.py CONFIG-FILE\")\n         sys.exit(1)\n \n-    f = open(sys.argv[1])\n+    f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n         m = re.search('^\\s*#', line)"
      },
      {
        "sha": "fe7cd1d5974dc86db7ca437659268f82f72f40cf",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -127,10 +127,10 @@ def main():\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n     g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n-    with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n+    with open(os.path.join(indir,'nodes_main.txt'), 'r', encoding=\"utf8\") as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')\n-    with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n+    with open(os.path.join(indir,'nodes_test.txt'), 'r', encoding=\"utf8\") as f:\n         process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n "
      },
      {
        "sha": "a9e4977715208f398183b28e80c9db36571daf91",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -76,11 +76,11 @@ def main():\n     # get directory of this program and read data files\n     dirname = os.path.dirname(os.path.abspath(__file__))\n     print(\"Using verify-commits data from \" + dirname)\n-    verified_root = open(dirname + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n-    verified_sha512_root = open(dirname + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n-    revsig_allowed = open(dirname + \"/allow-revsig-commits\", \"r\").read().splitlines()\n-    unclean_merge_allowed = open(dirname + \"/allow-unclean-merge-commits\", \"r\").read().splitlines()\n-    incorrect_sha512_allowed = open(dirname + \"/allow-incorrect-sha512-commits\", \"r\").read().splitlines()\n+    verified_root = open(dirname + \"/trusted-git-root\", \"r\", encoding=\"utf8\").read().splitlines()[0]\n+    verified_sha512_root = open(dirname + \"/trusted-sha512-root-commit\", \"r\", encoding=\"utf8\").read().splitlines()[0]\n+    revsig_allowed = open(dirname + \"/allow-revsig-commits\", \"r\", encoding=\"utf-8\").read().splitlines()\n+    unclean_merge_allowed = open(dirname + \"/allow-unclean-merge-commits\", \"r\", encoding=\"utf-8\").read().splitlines()\n+    incorrect_sha512_allowed = open(dirname + \"/allow-incorrect-sha512-commits\", \"r\", encoding=\"utf-8\").read().splitlines()\n \n     # Set commit and branch and set variables\n     current_commit = args.commit"
      },
      {
        "sha": "e90807132114ed5ad31fd61a1852dc7e95a03760",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -63,7 +63,7 @@ def parse_po(text):\n \n messages = parse_po(out.decode('utf-8'))\n \n-f = open(OUT_CPP, 'w')\n+f = open(OUT_CPP, 'w', encoding=\"utf8\")\n f.write(\"\"\"\n \n #include <QtGlobal>"
      },
      {
        "sha": "6d51f31e350bd390e53cbe2c00cc09cd1c3e5df0",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         wait_until(lambda: os.path.isfile(self.block_filename) and os.stat(self.block_filename).st_size >= (block_count * 65), timeout=10)\n \n         # file content should equal the generated blocks hashes\n-        with open(self.block_filename, 'r') as f:\n+        with open(self.block_filename, 'r', encoding=\"utf-8\") as f:\n             assert_equal(sorted(blocks), sorted(l.strip() for l in f.read().splitlines()))\n \n         self.log.info(\"test -walletnotify\")\n@@ -45,7 +45,7 @@ def run_test(self):\n \n         # file content should equal the generated transaction hashes\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        with open(self.tx_filename, 'r') as f:\n+        with open(self.tx_filename, 'r', encoding=\"ascii\") as f:\n             assert_equal(sorted(txids_rpc), sorted(l.strip() for l in f.read().splitlines()))\n         os.remove(self.tx_filename)\n \n@@ -58,7 +58,7 @@ def run_test(self):\n \n         # file content should equal the generated transaction hashes\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        with open(self.tx_filename, 'r') as f:\n+        with open(self.tx_filename, 'r', encoding=\"ascii\") as f:\n             assert_equal(sorted(txids_rpc), sorted(l.strip() for l in f.read().splitlines()))\n \n         # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st."
      },
      {
        "sha": "f573faaf177b8a26b5b65cfd1eb21606bd870eac",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -81,11 +81,11 @@ def generate_test_data(self, filename):\n             'mocktime': int(mocktime),\n             'stats': self.expected_stats,\n         }\n-        with open(filename, 'w') as f:\n+        with open(filename, 'w', encoding=\"utf8\") as f:\n             json.dump(to_dump, f, sort_keys=True, indent=2)\n \n     def load_test_data(self, filename):\n-        with open(filename, 'r') as f:\n+        with open(filename, 'r', encoding=\"utf8\") as f:\n             d = json.load(f)\n             blocks = d['blocks']\n             mocktime = d['mocktime']"
      },
      {
        "sha": "5e0b61b5e7861faaf29d308dc2908af3af761806",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -327,7 +327,7 @@ def get_auth_cookie(datadir):\n                     assert password is None  # Ensure that there is only one rpcpassword line\n                     password = line.split(\"=\")[1].strip(\"\\n\")\n     if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n-        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n+        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r', encoding=\"ascii\") as f:\n             userpass = f.read()\n             split_userpass = userpass.split(':')\n             user = split_userpass[0]"
      },
      {
        "sha": "36101d9f573861d23a26d6b298e26b5998114787",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -213,7 +213,7 @@ def main():\n     # Read config generated by configure.\n     config = configparser.ConfigParser()\n     configfile = os.path.abspath(os.path.dirname(__file__)) + \"/../config.ini\"\n-    config.read_file(open(configfile))\n+    config.read_file(open(configfile, encoding=\"utf8\"))\n \n     passon_args.append(\"--configfile=%s\" % configfile)\n \n@@ -590,7 +590,7 @@ def _get_uncovered_rpc_commands(self):\n         if not os.path.isfile(coverage_ref_filename):\n             raise RuntimeError(\"No coverage reference found\")\n \n-        with open(coverage_ref_filename, 'r') as coverage_ref_file:\n+        with open(coverage_ref_filename, 'r', encoding=\"utf8\") as coverage_ref_file:\n             all_cmds.update([line.strip() for line in coverage_ref_file.readlines()])\n \n         for root, dirs, files in os.walk(self.dir):\n@@ -599,7 +599,7 @@ def _get_uncovered_rpc_commands(self):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n-            with open(filename, 'r') as coverage_file:\n+            with open(filename, 'r', encoding=\"utf8\") as coverage_file:\n                 covered_cmds.update([line.strip() for line in coverage_file.readlines()])\n \n         return all_cmds - covered_cmds"
      },
      {
        "sha": "a0fbc4a754a5839c78420a93bf899ebdbffebe9b",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -88,7 +88,7 @@ def run_test(self):\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n         # should not initialize if the specified walletdir is not a directory\n         not_a_dir = wallet_dir('notadir')\n-        open(not_a_dir, 'a').close()\n+        open(not_a_dir, 'a', encoding=\"utf8\").close()\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n         self.log.info(\"Do not allow -zapwallettxes with multiwallet\")"
      },
      {
        "sha": "c3cdeef5801db23491b127aaa720a1eaf76ea948",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -44,7 +44,7 @@ def process_commands(fname):\n     \"\"\"Find and parse dispatch table in implementation file `fname`.\"\"\"\n     cmds = []\n     in_rpcs = False\n-    with open(fname, \"r\") as f:\n+    with open(fname, \"r\", encoding=\"utf8\") as f:\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:\n@@ -70,7 +70,7 @@ def process_mapping(fname):\n     \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n     cmds = []\n     in_rpcs = False\n-    with open(fname, \"r\") as f:\n+    with open(fname, \"r\", encoding=\"utf8\") as f:\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:"
      },
      {
        "sha": "16371a6234afd4feefbab8c564a042aafa120394",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -28,7 +28,7 @@\n def main():\n     config = configparser.ConfigParser()\n     config.optionxform = str\n-    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\"), encoding=\"utf8\"))\n     env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n@@ -49,7 +49,7 @@ def main():\n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n     input_filename = os.path.join(testDir, input_basename)\n-    raw_data = open(input_filename).read()\n+    raw_data = open(input_filename, encoding=\"utf8\").read()\n     input_data = json.loads(raw_data)\n \n     failed_testcases = []\n@@ -86,7 +86,7 @@ def bctest(testDir, testObj, buildenv):\n     inputData = None\n     if \"input\" in testObj:\n         filename = os.path.join(testDir, testObj[\"input\"])\n-        inputData = open(filename).read()\n+        inputData = open(filename, encoding=\"utf8\").read()\n         stdinCfg = subprocess.PIPE\n \n     # Read the expected output data (if there is any)\n@@ -97,7 +97,7 @@ def bctest(testDir, testObj, buildenv):\n         outputFn = testObj['output_cmp']\n         outputType = os.path.splitext(outputFn)[1][1:]  # output type from file extension (determines how to compare)\n         try:\n-            outputData = open(os.path.join(testDir, outputFn)).read()\n+            outputData = open(os.path.join(testDir, outputFn), encoding=\"utf8\").read()\n         except:\n             logging.error(\"Output file \" + outputFn + \" can not be opened\")\n             raise"
      },
      {
        "sha": "46e9fbc7398f0de61bd0fc338639f8c889a1c7ca",
        "filename": "test/util/rpcauth-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/util/rpcauth-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634bd970013eca90f4b4c1f9044eec8c97ba62c2/test/util/rpcauth-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/rpcauth-test.py?ref=634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "patch": "@@ -18,7 +18,7 @@ def setUp(self):\n         config_path = os.path.abspath(\n             os.path.join(os.sep, os.path.abspath(os.path.dirname(__file__)),\n             \"../config.ini\"))\n-        with open(config_path) as config_file:\n+        with open(config_path, encoding=\"utf8\") as config_file:\n             config.read_file(config_file)\n         sys.path.insert(0, os.path.dirname(config['environment']['RPCAUTH']))\n         self.rpcauth = importlib.import_module('rpcauth')"
      }
    ]
  },
  {
    "sha": "c8176b3cc7556d7bcec39a55ae4d6ba16453baaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODE3NmIzY2M3NTU2ZDdiY2VjMzlhNTVhZTRkNmJhMTY0NTNiYWFh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-12T15:48:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-12T19:49:04Z"
      },
      "message": "Add linter: Make sure we explicitly open all text files using UTF-8 or ASCII encoding in Python",
      "tree": {
        "sha": "54350892b613591cd3eafb8b4edfd75eedcb0183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54350892b613591cd3eafb8b4edfd75eedcb0183"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634bd970013eca90f4b4c1f9044eec8c97ba62c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/634bd970013eca90f4b4c1f9044eec8c97ba62c2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ce973e710a4a957e6b3e92f7a8699d627ab4d4ca",
        "filename": "test/lint/lint-python-utf8-encoding.sh",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa/test/lint/lint-python-utf8-encoding.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8176b3cc7556d7bcec39a55ae4d6ba16453baaa/test/lint/lint-python-utf8-encoding.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-utf8-encoding.sh?ref=c8176b3cc7556d7bcec39a55ae4d6ba16453baaa",
        "patch": "@@ -0,0 +1,19 @@\n+#!/bin/bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Make sure we explicitly open all text files using UTF-8 (or ASCII) encoding to\n+# avoid potential issues on the BSDs where the locale is not always set.\n+\n+EXIT_CODE=0\n+OUTPUT=$(git grep \" open(\" -- \"*.py\" | grep -vE \"encoding=.(ascii|utf8|utf-8).\" | grep -vE \"open\\([^,]*, ['\\\"][^'\\\"]*b[^'\\\"]*['\\\"]\")\n+if [[ ${OUTPUT} != \"\" ]]; then\n+    echo \"Python's open(...) seems to be used to open text files without explicitly\"\n+    echo \"specifying encoding=\\\"utf8\\\":\"\n+    echo\n+    echo \"${OUTPUT}\"\n+    EXIT_CODE=1\n+fi\n+exit ${EXIT_CODE}"
      }
    ]
  }
]