[
  {
    "sha": "b3493b99ad50e72844fb951a361e7de65b442692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzQ5M2I5OWFkNTBlNzI4NDRmYjk1MWEzNjFlN2RlNjViNDQyNjky",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T01:09:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T11:11:00Z"
      },
      "message": "Policy: RENAME: Introduce CPolicy interface and hidden CStandardPolicy class implementing it\n\nRename 3 functions into CPolicy methods:\n\n- IsStandard -> policy.ApproveScript\n- IsStandardTx -> policy.ApproveTx\n- AreInputsStandard -> policy.ApproveTxInputs",
      "tree": {
        "sha": "faeed5a9d6266ca058943ae4fe6447738fd62e7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faeed5a9d6266ca058943ae4fe6447738fd62e7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3493b99ad50e72844fb951a361e7de65b442692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3493b99ad50e72844fb951a361e7de65b442692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3493b99ad50e72844fb951a361e7de65b442692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3493b99ad50e72844fb951a361e7de65b442692/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/086cb336cd8ac0b2a7ad9ff0544c014569c7db38"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 118,
      "deletions": 54
    },
    "files": [
      {
        "sha": "7f38e46719f3348f36c255e0a5a679c12d8ee3ff",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -96,6 +96,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n+  globals/policy.h \\\n   hash.h \\\n   init.h \\\n   key.h \\\n@@ -169,6 +170,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  globals/policy.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "e58f8c95de5c94e4afc0c95fbd8e5a969d1bd750",
        "filename": "src/globals/policy.cpp",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/globals/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/globals/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/policy.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"globals/policy.h\"\n+\n+#include \"policy/policy.h\"\n+\n+CStandardPolicy globalPolicy;"
      },
      {
        "sha": "2f4d0a7c2c19e8b32f3b8df7b6db429a232f76ba",
        "filename": "src/globals/policy.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/globals/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/globals/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/policy.h?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_GLOBALS_POLICY_H\n+#define BITCOIN_GLOBALS_POLICY_H\n+\n+class CStandardPolicy;\n+\n+extern CStandardPolicy globalPolicy;\n+\n+#endif /*BITCOIN_GLOBALS_POLICY_H */"
      },
      {
        "sha": "dfc4c62bad1274acc0e3895c6db238eeee576419",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -13,6 +13,7 @@\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"globals/policy.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n@@ -751,6 +752,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n+    const CPolicy& policy = globalPolicy;\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -765,7 +767,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (!policy.ApproveTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -836,7 +838,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n+        if (!policy.ApproveTxInputs(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n \n         // Check that the transaction doesn't have an excessive number of"
      },
      {
        "sha": "8ce4e74c07e6cff082b16ba36c905962b0ac1bbe",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -14,27 +14,9 @@\n \n #include <boost/foreach.hpp>\n \n-    /**\n-     * Check transaction inputs to mitigate two\n-     * potential denial-of-service attacks:\n-     * \n-     * 1. scriptSigs with extra data stuffed into them,\n-     *    not consumed by scriptPubKey (or P2SH script)\n-     * 2. P2SH scripts with a crazy number of expensive\n-     *    CHECKSIG/CHECKMULTISIG operations\n-     *\n-     * Check transaction inputs, and make sure any\n-     * pay-to-script-hash transactions are evaluating IsStandard scripts\n-     * \n-     * Why bother? To avoid denial-of-service attacks; an attacker\n-     * can submit a standard HASH... OP_EQUAL transaction,\n-     * which will get accepted into blocks. The redemption\n-     * script can be anything; an attacker could use a very\n-     * expensive-to-check-upon-redemption script like:\n-     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n-     */\n-\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+/** CStandardPolicy implementation */\n+\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -54,8 +36,11 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool CStandardPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n {\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n@@ -93,7 +78,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!ApproveScript(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n@@ -118,8 +103,11 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n {\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n "
      },
      {
        "sha": "ba270e72fc953d0b89f37eea1d66dba4c67e747f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 45,
        "deletions": 3,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -42,17 +42,59 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+/**\n+ * \\class CPolicy\n+ * Generic interface class for policy.\n+ */\n+class CPolicy\n+{\n+public:\n+    virtual ~CPolicy() {};\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const { return true; };\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const { return true; };\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const { return true; };\n+};\n+\n+/**\n+ * \\class CStandardPolicy\n+ * Standard implementation of CPolicy.\n+ */\n+class CStandardPolicy : public CPolicy\n+{\n+public:\n+    CStandardPolicy()\n+    {};\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n \n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "bfe615383f935753849bc1de88069cd3b4dce6ce",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -143,6 +143,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n+    const CStandardPolicy testPolicy;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n@@ -151,19 +152,19 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_and_b, whichType));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_or_b, whichType));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(escrow, whichType));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!testPolicy.ApproveScript(one_of_four, whichType));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -174,7 +175,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!testPolicy.ApproveScript(malformed[i], whichType));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      },
      {
        "sha": "2167132b59c5ad93cb04f4b850104e4c7b25dba9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -53,6 +53,7 @@ BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n@@ -91,7 +92,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -154,6 +155,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n BOOST_AUTO_TEST_CASE(set)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n@@ -187,7 +189,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -205,7 +207,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(testPolicy.ApproveTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -262,6 +264,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n \n BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -342,7 +345,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -351,7 +354,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n+        BOOST_CHECK(!testPolicy.ApproveTxInputs(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -364,7 +367,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -376,7 +379,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "33f41a0f4723bdb7e1bb53abcf8920fe41c36567",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3493b99ad50e72844fb951a361e7de65b442692/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3493b99ad50e72844fb951a361e7de65b442692/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b3493b99ad50e72844fb951a361e7de65b442692",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>\n@@ -287,6 +288,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n+    const CStandardPolicy testPolicy;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -307,20 +309,21 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n@@ -339,43 +342,43 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // 80-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // 81-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "cece42eb9087c6fe36de7ddd8afd8da8b315da91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWNlNDJlYjkwODdjNmZlMzZkZTdkZGQ4YWZkOGRhOGIzMTVkYTkx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T11:35:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T11:12:27Z"
      },
      "message": "Policy: Turn globals fIsBareMultisigStd and fRequireStandard into CStandardPolicy attributes",
      "tree": {
        "sha": "3e7d9330ebffa5331a82d7ab77466dc91cebf96a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7d9330ebffa5331a82d7ab77466dc91cebf96a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cece42eb9087c6fe36de7ddd8afd8da8b315da91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cece42eb9087c6fe36de7ddd8afd8da8b315da91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cece42eb9087c6fe36de7ddd8afd8da8b315da91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cece42eb9087c6fe36de7ddd8afd8da8b315da91/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3493b99ad50e72844fb951a361e7de65b442692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3493b99ad50e72844fb951a361e7de65b442692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3493b99ad50e72844fb951a361e7de65b442692"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 117,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7063fc49223ec488cf4e81d8de372b0d174904ef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -14,6 +14,7 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"globals/policy.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -314,7 +315,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n@@ -394,9 +394,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n+    Policy::AppendHelpMessages(strUsage);\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n@@ -819,10 +818,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n-\n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n-    if (Params().RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+    try {\n+        globalPolicy.InitFromArgs(mapArgs);\n+    } catch(const std::exception& e) {\n+        return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n+    }\n \n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n@@ -868,7 +868,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);"
      },
      {
        "sha": "69b2b1de4bd20e3c14f4681def35e3b344f821d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -59,8 +59,6 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = true;\n-bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n size_t nCoinCacheUsage = 5000 * 300;"
      },
      {
        "sha": "849224d3fd23a8e17c266ce4ac89c5b7f2aa17d4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -98,8 +98,6 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n-extern bool fIsBareMultisigStd;\n-extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;"
      },
      {
        "sha": "8f2864f33033a0637d6a58b2513afde8914505a4",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -7,13 +7,32 @@\n \n #include \"policy/policy.h\"\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n \n+/** CStandardPolicy initialization */\n+\n+std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHelp() const\n+{\n+    std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd)));\n+    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (testnet/regtest only; default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n+    return optionsHelp;\n+}\n+\n+void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n+    fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard(), mapArgs);\n+    if (fAcceptNonStdTxn && Params().RequireStandard())\n+        throw std::runtime_error(strprintf(_(\"%s: acceptnonstdtxn is not currently supported for %s chain.\"), __func__, Params().NetworkIDString()));\n+}\n+\n /** CStandardPolicy implementation */\n \n bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n@@ -38,7 +57,7 @@ bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whi\n \n bool CStandardPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n {\n-    if (!fRequireStandard)\n+    if (fAcceptNonStdTxn)\n         return true;\n \n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n@@ -105,7 +124,7 @@ bool CStandardPolicy::ApproveTx(const CTransaction& tx, std::string& reason) con\n \n bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n {\n-    if (!fRequireStandard)\n+    if (fAcceptNonStdTxn)\n         return true;\n \n     if (tx.IsCoinBase())\n@@ -164,3 +183,12 @@ bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCa\n \n     return true;\n }\n+\n+/** Policy Factory and related utility functions */\n+\n+void Policy::AppendHelpMessages(std::string& strUsage)\n+{\n+    const CStandardPolicy policy;\n+    strUsage += HelpMessageGroup(strprintf(_(\"Policy options: (for policy: %s)\"), Policy::STANDARD));\n+    AppendMessagesOpt(strUsage, policy.GetOptionsHelp());\n+}"
      },
      {
        "sha": "7e17e32ebf65ca40efe985741cdcdd12f1223150",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n+#include <map>\n #include <string>\n \n class CCoinsViewCache;\n@@ -50,6 +51,20 @@ class CPolicy\n {\n public:\n     virtual ~CPolicy() {};\n+    /**\n+     * @param argMap a map with options to read from.\n+     * @return a formatted HelpMessage string with the policy options\n+     */\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const\n+    {\n+        std::vector<std::pair<std::string, std::string> > optionsHelp;\n+        return optionsHelp;\n+    }\n+    /**\n+     * @param argMap a map with options to read from.\n+     * @return a formatted HelpMessage string with the policy options\n+     */\n+    virtual void InitFromArgs(const std::map<std::string, std::string>& argMap) {};\n     virtual bool ApproveScript(const CScript&, txnouttype&) const { return true; };\n     /**\n      * Check for standard transaction types\n@@ -70,9 +85,16 @@ class CPolicy\n  */\n class CStandardPolicy : public CPolicy\n {\n+protected:\n+    bool fIsBareMultisigStd;\n+    bool fAcceptNonStdTxn;\n public:\n-    CStandardPolicy()\n+    CStandardPolicy(bool fIsBareMultisigStdIn=true, bool fAcceptNonStdTxnIn=false) :\n+        fIsBareMultisigStd(fIsBareMultisigStdIn),\n+        fAcceptNonStdTxn(fAcceptNonStdTxnIn)\n     {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ApproveScript(const CScript&, txnouttype&) const;\n     virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n     /**\n@@ -97,4 +119,18 @@ class CStandardPolicy : public CPolicy\n     virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n };\n \n+namespace Policy {\n+\n+/**\n+ * Append a help string for the options of the selected policy.\n+ * @param strUsage a formatted HelpMessage string with policy options\n+ * is appended to this string\n+ */\n+void AppendHelpMessages(std::string& strUsage);\n+\n+/** Supported policies */\n+static const std::string STANDARD = \"standard\";\n+\n+} // namespace Policy\n+\n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "de0c14e19f183263c9e397ce7e8da45abe14e1b9",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -312,31 +312,49 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return it->second;\n     return strDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return atoi64(it->second);\n     return nDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n     {\n-        if (mapArgs[strArg].empty())\n+        if (it->second.empty())\n             return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n+        return (atoi(it->second) != 0);\n     }\n     return fDefault;\n }\n \n+std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return GetArg(strArg, strDefault, mapArgs);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return GetArg(strArg, nDefault, mapArgs);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return GetBoolArg(strArg, fDefault, mapArgs);\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))\n@@ -368,6 +386,12 @@ std::string HelpMessageOpt(const std::string &option, const std::string &message\n            std::string(\"\\n\\n\");\n }\n \n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp)\n+{\n+    for (unsigned int i=0; i < optionsHelp.size(); i++)\n+        strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "5d45bb65f4adcbc941101c7f9afb53b892ee45eb",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cece42eb9087c6fe36de7ddd8afd8da8b315da91/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "patch": "@@ -145,6 +145,7 @@ inline bool IsSwitchChar(char c)\n  * @return command-line argument or default value\n  */\n std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return integer argument or default value\n@@ -154,6 +155,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault);\n  * @return command-line argument (0 if invalid number) or default value\n  */\n int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return boolean argument or default value\n@@ -163,6 +165,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault);\n  * @return command-line argument or default value\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Set an argument if it doesn't already have a value\n@@ -199,6 +202,12 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * @param strUsage a string where the options' help with me appended\n+ * @param optionsHelp a vector of string pairs to iteratively call HelpMessageOpt\n+ */\n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp);\n+\n /**\n  * Return the number of physical cores available on the current system.\n  * @note This does not count virtual cores, such as those provided by HyperThreading"
      }
    ]
  },
  {
    "sha": "2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDcxNDc4YTY4ZDNhMmM2Y2I1ZjUyMTBmNzZiMzdkMWY2MGEyMmNm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T20:34:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T11:12:27Z"
      },
      "message": "fixup! the whole point of exposing policy options is to allow users to select them",
      "tree": {
        "sha": "4f9fa0743131a8d35c29d98e757c70fc4167572b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f9fa0743131a8d35c29d98e757c70fc4167572b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cece42eb9087c6fe36de7ddd8afd8da8b315da91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cece42eb9087c6fe36de7ddd8afd8da8b315da91"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0c63c13898d0318dab73e4ddcb1993bf02293ac4",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
        "patch": "@@ -21,16 +21,14 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n     optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd)));\n-    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (testnet/regtest only; default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n+    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n     return optionsHelp;\n }\n \n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n     fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard(), mapArgs);\n-    if (fAcceptNonStdTxn && Params().RequireStandard())\n-        throw std::runtime_error(strprintf(_(\"%s: acceptnonstdtxn is not currently supported for %s chain.\"), __func__, Params().NetworkIDString()));\n }\n \n /** CStandardPolicy implementation */"
      }
    ]
  },
  {
    "sha": "38d64c96fffb472bc7f8c4985da76685c9665a32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGQ2NGM5NmZmZmI0NzJiYzdmOGM0OTg1ZGE3NjY4NWM5NjY1YTMy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T13:05:00Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T11:12:27Z"
      },
      "message": "Introduce Container template",
      "tree": {
        "sha": "f5d71edf3270a171b18783bc994459c2d071e750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d71edf3270a171b18783bc994459c2d071e750"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38d64c96fffb472bc7f8c4985da76685c9665a32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d64c96fffb472bc7f8c4985da76685c9665a32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38d64c96fffb472bc7f8c4985da76685c9665a32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d64c96fffb472bc7f8c4985da76685c9665a32/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d71478a68d3a2c6cb5f5210f76b37d1f60a22cf"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ab56a8347d66c0d1e1a1b1d3a23bcf67f1091fd8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d64c96fffb472bc7f8c4985da76685c9665a32/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d64c96fffb472bc7f8c4985da76685c9665a32/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=38d64c96fffb472bc7f8c4985da76685c9665a32",
        "patch": "@@ -137,6 +137,7 @@ BITCOIN_CORE_H = \\\n   support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n+  templates.hpp \\\n   timedata.h \\\n   tinyformat.h \\\n   txdb.h \\"
      },
      {
        "sha": "97b97b688c0a86006ef99e4441e2b2c544b3a70c",
        "filename": "src/templates.hpp",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d64c96fffb472bc7f8c4985da76685c9665a32/src/templates.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d64c96fffb472bc7f8c4985da76685c9665a32/src/templates.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/templates.hpp?ref=38d64c96fffb472bc7f8c4985da76685c9665a32",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEMPLATES_H\n+#define BITCOIN_TEMPLATES_H\n+\n+#include <assert.h>\n+#include <cstddef>\n+\n+template<typename T>\n+class Container\n+{\n+    T* pObj;\n+public:\n+    Container() : pObj(NULL) {}\n+    Container(T* pObjIn) : pObj(pObjIn) {}\n+    ~Container()\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return pObj == NULL;\n+    }\n+    const T& Get() const\n+    {\n+        assert(!IsNull());\n+        return *pObj;\n+    }\n+    void Set(T* pObjIn)\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+        pObj = pObjIn;\n+    }\n+};\n+\n+#endif // BITCOIN_TEMPLATES_H"
      }
    ]
  },
  {
    "sha": "3ca225fbf269fda4d0a2338ee2147d0eba091365",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2EyMjVmYmYyNjlmZGE0ZDBhMjMzOGVlMjE0N2QwZWJhMDkxMzY1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T11:54:50Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T12:15:49Z"
      },
      "message": "Policy: Allow selection of different policies using a factory",
      "tree": {
        "sha": "31c3be22f73b78b30e0cbf1a50ad44c1f8931465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c3be22f73b78b30e0cbf1a50ad44c1f8931465"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ca225fbf269fda4d0a2338ee2147d0eba091365",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca225fbf269fda4d0a2338ee2147d0eba091365",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca225fbf269fda4d0a2338ee2147d0eba091365",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca225fbf269fda4d0a2338ee2147d0eba091365/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38d64c96fffb472bc7f8c4985da76685c9665a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d64c96fffb472bc7f8c4985da76685c9665a32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38d64c96fffb472bc7f8c4985da76685c9665a32"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a20c20a7adc5ee9653a28722e21d55e82f87c71b",
        "filename": "src/globals/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/globals/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/globals/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/policy.cpp?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -7,4 +7,4 @@\n \n #include \"policy/policy.h\"\n \n-CStandardPolicy globalPolicy;\n+Container<CPolicy> cGlobalPolicy;"
      },
      {
        "sha": "2b25a135dbf62e48b1605ad4516e70b2395df044",
        "filename": "src/globals/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/globals/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/globals/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/policy.h?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -6,8 +6,10 @@\n #ifndef BITCOIN_GLOBALS_POLICY_H\n #define BITCOIN_GLOBALS_POLICY_H\n \n-class CStandardPolicy;\n+#include \"templates.hpp\"\n \n-extern CStandardPolicy globalPolicy;\n+class CPolicy;\n+\n+extern Container<CPolicy> cGlobalPolicy;\n \n #endif /*BITCOIN_GLOBALS_POLICY_H */"
      },
      {
        "sha": "f03791568dd97a7c7c38a8f4835e7713dea25c57",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -394,7 +394,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n-    Policy::AppendHelpMessages(strUsage);\n+    Policy::AppendHelpMessages(strUsage, GetArg(\"-policy\", Policy::STANDARD));\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n@@ -819,7 +819,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n     try {\n-        globalPolicy.InitFromArgs(mapArgs);\n+        cGlobalPolicy.Set(Policy::Factory(Policy::STANDARD, mapArgs));\n     } catch(const std::exception& e) {\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }"
      },
      {
        "sha": "88b607d09d245fc81aa647975b4746d705de6c33",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -750,7 +750,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n-    const CPolicy& policy = globalPolicy;\n+    const CPolicy& policy = cGlobalPolicy.Get();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;"
      },
      {
        "sha": "efca7d42115f11978a9f18cddc072f1e5dc0537f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -9,6 +9,7 @@\n \n #include \"chainparams.h\"\n #include \"main.h\"\n+#include \"templates.hpp\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n@@ -184,9 +185,23 @@ bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCa\n \n /** Policy Factory and related utility functions */\n \n-void Policy::AppendHelpMessages(std::string& strUsage)\n+CPolicy* Policy::Factory(const std::string& policy)\n {\n-    const CStandardPolicy policy;\n-    strUsage += HelpMessageGroup(strprintf(_(\"Policy options: (for policy: %s)\"), Policy::STANDARD));\n-    AppendMessagesOpt(strUsage, policy.GetOptionsHelp());\n+    if (policy == Policy::STANDARD)\n+        return new CStandardPolicy(true, false);\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));    \n+}\n+\n+CPolicy* Policy::Factory(const std::string& defaultPolicy, const std::map<std::string, std::string>& mapArgs)\n+{\n+    CPolicy* pPolicy = Policy::Factory(GetArg(\"-policy\", defaultPolicy, mapArgs));\n+    pPolicy->InitFromArgs(mapArgs);\n+    return pPolicy;\n+}\n+\n+void Policy::AppendHelpMessages(std::string& strUsage, const std::string& selectedPolicy)\n+{\n+    Container<CPolicy> cPolicy(Policy::Factory(selectedPolicy));\n+    strUsage += HelpMessageGroup(strprintf(_(\"Policy options: (for policy: %s)\"), selectedPolicy));\n+    AppendMessagesOpt(strUsage, cPolicy.Get().GetOptionsHelp());\n }"
      },
      {
        "sha": "115a1571edf9ff35ecc8afb0d918be3de967a674",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -121,12 +121,22 @@ class CStandardPolicy : public CPolicy\n \n namespace Policy {\n \n+/**\n+ * Returns a new CPolicy* with the parameters specified. The caller has to delete the object.\n+ * @param defaultPolicy the string selecting the policy.\n+ * @param mapArgs [optional] a map with values for policy options (mapArgs[\"-policy\"] overrides defaultPolicy).\n+ * @return the newly created CPolicy*.\n+ * @throws a std::runtime_error if the policy is not supported.\n+ */\n+CPolicy* Factory(const std::string& defaultPolicy, const std::map<std::string, std::string>& mapArgs);\n+CPolicy* Factory(const std::string& policy);\n /**\n  * Append a help string for the options of the selected policy.\n  * @param strUsage a formatted HelpMessage string with policy options\n  * is appended to this string\n+ * @param selectedPolicy select a policy to show its options\n  */\n-void AppendHelpMessages(std::string& strUsage);\n+void AppendHelpMessages(std::string& strUsage, const std::string& selectedPolicy);\n \n /** Supported policies */\n static const std::string STANDARD = \"standard\";"
      },
      {
        "sha": "1e507d0b6971a826969e8eb11ed32662b7fca768",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca225fbf269fda4d0a2338ee2147d0eba091365/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "patch": "@@ -7,7 +7,9 @@\n #include \"test_bitcoin.h\"\n \n #include \"key.h\"\n+#include \"globals/policy.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -34,6 +36,7 @@ BasicTestingSetup::BasicTestingSetup()\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(CBaseChainParams::MAIN);\n+        cGlobalPolicy.Set(Policy::Factory(Policy::STANDARD));\n }\n BasicTestingSetup::~BasicTestingSetup()\n {"
      }
    ]
  },
  {
    "sha": "e6ae42255e0682896834946c17bc6cb867da41bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmFlNDIyNTVlMDY4Mjg5NjgzNDk0NmMxN2JjNmNiODY3ZGE0MWJm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-24T18:12:50Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-08T12:26:36Z"
      },
      "message": "Policy: Separate Standard and test policies to select them independently of the chain\n\n...by replacing CChainParams::fRequireStandard with CChainParams::strDefaultPolicy\n\nAlso expose it as an option (-policy=test) equivalent to -acceptnonstdtxn.\nThis decouples policy/policy.cpp from Params()",
      "tree": {
        "sha": "d0e8d6d325a1a4c03aa4d83c886d6f6dae9a0538",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e8d6d325a1a4c03aa4d83c886d6f6dae9a0538"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6ae42255e0682896834946c17bc6cb867da41bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6ae42255e0682896834946c17bc6cb867da41bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6ae42255e0682896834946c17bc6cb867da41bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6ae42255e0682896834946c17bc6cb867da41bf/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca225fbf269fda4d0a2338ee2147d0eba091365",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca225fbf269fda4d0a2338ee2147d0eba091365"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "77da67eb55337992a57a699f731df835865458a2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6ae42255e0682896834946c17bc6cb867da41bf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6ae42255e0682896834946c17bc6cb867da41bf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e6ae42255e0682896834946c17bc6cb867da41bf",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"policy/policy.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -31,6 +32,7 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        strDefaultPolicy = \"standard\";\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -102,7 +104,6 @@ class CMainParams : public CChainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n-        fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n \n@@ -137,6 +138,7 @@ class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        strDefaultPolicy = \"test\";\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n@@ -174,7 +176,6 @@ class CTestNetParams : public CMainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n-        fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n \n@@ -197,6 +198,7 @@ class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        strDefaultPolicy = \"test\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -221,7 +223,6 @@ class CRegTestParams : public CTestNetParams {\n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = true;\n-        fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n "
      },
      {
        "sha": "ec8b055b2167aacde2a623d00d52881f587e5d99",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6ae42255e0682896834946c17bc6cb867da41bf/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6ae42255e0682896834946c17bc6cb867da41bf/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e6ae42255e0682896834946c17bc6cb867da41bf",
        "patch": "@@ -50,6 +50,7 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n+    std::string DefaultPolicy() const { return strDefaultPolicy; }\n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n@@ -58,8 +59,6 @@ class CChainParams\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n-    /** Policy: Filter transactions that do not match well-defined patterns */\n-    bool RequireStandard() const { return fRequireStandard; }\n     int64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n@@ -84,12 +83,12 @@ class CChainParams\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string strNetworkID;\n+    std::string strDefaultPolicy;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n-    bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;\n     Checkpoints::CCheckpointData checkpointData;"
      },
      {
        "sha": "fc6159caf3546350b0d7b0b1beab54107415dd20",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6ae42255e0682896834946c17bc6cb867da41bf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6ae42255e0682896834946c17bc6cb867da41bf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e6ae42255e0682896834946c17bc6cb867da41bf",
        "patch": "@@ -394,7 +394,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n-    Policy::AppendHelpMessages(strUsage, GetArg(\"-policy\", Policy::STANDARD));\n+    Policy::AppendHelpMessages(strUsage, GetArg(\"-policy\", Params().DefaultPolicy()));\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n@@ -819,7 +819,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n     try {\n-        cGlobalPolicy.Set(Policy::Factory(Policy::STANDARD, mapArgs));\n+        cGlobalPolicy.Set(Policy::Factory(Params().DefaultPolicy(), mapArgs));\n     } catch(const std::exception& e) {\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }"
      },
      {
        "sha": "46f0f6835804499e35fcaa56bf013c4aafe46e50",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6ae42255e0682896834946c17bc6cb867da41bf/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6ae42255e0682896834946c17bc6cb867da41bf/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=e6ae42255e0682896834946c17bc6cb867da41bf",
        "patch": "@@ -7,7 +7,6 @@\n \n #include \"policy/policy.h\"\n \n-#include \"chainparams.h\"\n #include \"main.h\"\n #include \"templates.hpp\"\n #include \"tinyformat.h\"\n@@ -22,14 +21,14 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n     optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd)));\n-    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n+    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (default: %u)\"), fAcceptNonStdTxn)));\n     return optionsHelp;\n }\n \n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n-    fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard(), mapArgs);\n+    fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", fAcceptNonStdTxn, mapArgs);\n }\n \n /** CStandardPolicy implementation */\n@@ -189,6 +188,8 @@ CPolicy* Policy::Factory(const std::string& policy)\n {\n     if (policy == Policy::STANDARD)\n         return new CStandardPolicy(true, false);\n+    else if (policy == Policy::TEST)\n+        return new CStandardPolicy(true, true);\n     throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));    \n }\n "
      },
      {
        "sha": "9997f7b7686579607f19d5f452e3cdb7163ed89d",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6ae42255e0682896834946c17bc6cb867da41bf/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6ae42255e0682896834946c17bc6cb867da41bf/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e6ae42255e0682896834946c17bc6cb867da41bf",
        "patch": "@@ -140,6 +140,7 @@ void AppendHelpMessages(std::string& strUsage, const std::string& selectedPolicy\n \n /** Supported policies */\n static const std::string STANDARD = \"standard\";\n+static const std::string TEST = \"test\";\n \n } // namespace Policy\n "
      }
    ]
  }
]