[
  {
    "sha": "2fc5dee997d5700847d6658eb59b18146386fa86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmM1ZGVlOTk3ZDU3MDA4NDdkNjY1OGViNTliMTgxNDYzODZmYTg2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-23T18:57:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-23T20:11:41Z"
      },
      "message": "Introduce BuriedBIP9 and BuriedDeployments for containing info about buried forks",
      "tree": {
        "sha": "849315214c581920244ee96f2ae32b522b138d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/849315214c581920244ee96f2ae32b522b138d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fc5dee997d5700847d6658eb59b18146386fa86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc5dee997d5700847d6658eb59b18146386fa86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc5dee997d5700847d6658eb59b18146386fa86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc5dee997d5700847d6658eb59b18146386fa86/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442a9c64775454a7073aff9872721c58b1dd35c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442a9c64775454a7073aff9872721c58b1dd35c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442a9c64775454a7073aff9872721c58b1dd35c5"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 48,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7738fb43568f2a236208c7486d1a21d832d63e98",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 8,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -69,8 +69,6 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n-        consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n-        consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -82,6 +80,16 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Add buried depoyments\n+        consensus.buried_deployments[Consensus::BURIED_CSV].bit = 0;\n+        /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n+        consensus.buried_deployments[Consensus::BURIED_CSV].height = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].bit = 1;\n+        /** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active.\n+         * Note that segwit v0 script rules are enforced on all blocks except the\n+         * BIP 16 exception blocks. */\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].height = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n@@ -175,8 +183,6 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n-        consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n-        consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -188,6 +194,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Add buried depoyments\n+        consensus.buried_deployments[Consensus::BURIED_CSV].bit = 0;\n+        consensus.buried_deployments[Consensus::BURIED_CSV].height = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].bit = 1;\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].height = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000007dbe94253893cbd463\");\n \n@@ -259,8 +271,6 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n-        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n-        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -272,6 +282,12 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n+        // Add buried depoyments\n+        consensus.buried_deployments[Consensus::BURIED_CSV].bit = 0;\n+        consensus.buried_deployments[Consensus::BURIED_CSV].height = 432; // CSV activated on regtest (Used in rpc activation tests)\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].bit = 1;\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].height = 0; // SEGWIT is always activated on regtest unless overridden\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n@@ -336,14 +352,14 @@ class CRegTestParams : public CChainParams {\n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (gArgs.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.buried_deployments[Consensus::BURIED_SEGWIT].height);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n             throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n         } else if (height == -1) {\n             LogPrintf(\"Segwit disabled for testing\\n\");\n             height = std::numeric_limits<int>::max();\n         }\n-        consensus.SegwitHeight = static_cast<int>(height);\n+        consensus.buried_deployments[Consensus::BURIED_SEGWIT].height = static_cast<int>(height);\n     }\n \n     if (!args.IsArgSet(\"-vbparams\")) return;"
      },
      {
        "sha": "980f56596ab032e005c9281f9fa3018a697f0cdb",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -20,6 +20,13 @@ enum DeploymentPos\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n+enum BuriedDeployments\n+{\n+    BURIED_CSV,\n+    BURIED_SEGWIT,\n+    NUM_BURIED_DEPLOYMENTS\n+};\n+\n /**\n  * Struct for each individual consensus rule change using BIP9.\n  */\n@@ -41,6 +48,11 @@ struct BIP9Deployment {\n     static constexpr int64_t ALWAYS_ACTIVE = -1;\n };\n \n+struct BuriedBIP9 {\n+    int bit;\n+    int height;\n+};\n+\n /**\n  * Parameters that influence chain consensus.\n  */\n@@ -56,12 +68,6 @@ struct Params {\n     int BIP65Height;\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n-    /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n-    int CSVHeight;\n-    /** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active.\n-     * Note that segwit v0 script rules are enforced on all blocks except the\n-     * BIP 16 exception blocks. */\n-    int SegwitHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n@@ -70,6 +76,7 @@ struct Params {\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n     BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    BuriedBIP9 buried_deployments[NUM_BURIED_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "d13d4b6c1bf5a8ad9ad6435c83f24d370b67f52c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -1673,7 +1673,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (chainparams.GetConsensus().buried_deployments[Consensus::BURIED_SEGWIT].height != std::numeric_limits<int>::max()) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "e8d2dde8fa3c97ac9e826b427de7149464bef9dd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -1344,8 +1344,8 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.buried_deployments[Consensus::BURIED_CSV].height);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.buried_deployments[Consensus::BURIED_SEGWIT].height);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n "
      },
      {
        "sha": "7ea3dc47b27d480374964b7a6d863ba651ef4cd7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -520,7 +520,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.buried_deployments[Consensus::BURIED_SEGWIT].height);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "92ec6b68ed413b7c929cb30a133f8e1ebdba2d8d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc5dee997d5700847d6658eb59b18146386fa86/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc5dee997d5700847d6658eb59b18146386fa86/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2fc5dee997d5700847d6658eb59b18146386fa86",
        "patch": "@@ -1648,7 +1648,7 @@ static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_\n // environment. See test/functional/p2p-segwit.py.\n static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n {\n-    return params.SegwitHeight != std::numeric_limits<int>::max();\n+    return params.buried_deployments[Consensus::BURIED_SEGWIT].height != std::numeric_limits<int>::max();\n }\n \n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n@@ -1685,7 +1685,7 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     }\n \n     // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n-    if (pindex->nHeight >= consensusparams.CSVHeight) {\n+    if (pindex->nHeight >= consensusparams.buried_deployments[Consensus::BURIED_CSV].height) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1877,7 +1877,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \n     // Start enforcing BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= chainparams.GetConsensus().CSVHeight) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().buried_deployments[Consensus::BURIED_CSV].height) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -3090,7 +3090,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n-    return (height >= params.SegwitHeight);\n+    return (height >= params.buried_deployments[Consensus::BURIED_SEGWIT].height);\n }\n \n // Compute at which vout of the block's coinbase transaction the witness\n@@ -3125,7 +3125,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (consensusParams.buried_deployments[Consensus::BURIED_SEGWIT].height != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n@@ -3225,7 +3225,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n \n     // Start enforcing BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (nHeight >= consensusParams.CSVHeight) {\n+    if (nHeight >= consensusParams.buried_deployments[Consensus::BURIED_CSV].height) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n@@ -3260,7 +3260,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (nHeight >= consensusParams.SegwitHeight) {\n+    if (nHeight >= consensusParams.buried_deployments[Consensus::BURIED_SEGWIT].height) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      }
    ]
  },
  {
    "sha": "78c289a3b615a365dff6920918e1434c91ac5c61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGMyODlhM2I2MTVhMzY1ZGZmNjkyMDkxOGUxNDM0YzkxYWM1YzYx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-23T20:11:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-23T20:27:20Z"
      },
      "message": "Compute the block version for a buried fork\n\nWhen the height of a block is less than the activation height of a\nburied bip9 soft fork, compute the version number containing the deployment\nbits that would have been in use at that time",
      "tree": {
        "sha": "79ef674bb088d2352289c7f6e52dc44da388d4a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ef674bb088d2352289c7f6e52dc44da388d4a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78c289a3b615a365dff6920918e1434c91ac5c61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c289a3b615a365dff6920918e1434c91ac5c61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78c289a3b615a365dff6920918e1434c91ac5c61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c289a3b615a365dff6920918e1434c91ac5c61/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc5dee997d5700847d6658eb59b18146386fa86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc5dee997d5700847d6658eb59b18146386fa86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc5dee997d5700847d6658eb59b18146386fa86"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c76a78f1c2e38cac3740e83be73fd97d7a0dc7ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c289a3b615a365dff6920918e1434c91ac5c61/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c289a3b615a365dff6920918e1434c91ac5c61/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=78c289a3b615a365dff6920918e1434c91ac5c61",
        "patch": "@@ -1616,6 +1616,19 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     return nVersion;\n }\n \n+int32_t ComputeBuriedBlockVersion(const CBlockIndex* pindex_prev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    int32_t version = ComputeBlockVersion(pindex_prev, params);\n+\n+    for (int i = 0; i < Consensus::NUM_BURIED_DEPLOYMENTS; ++i) {\n+        if (pindex_prev->nHeight < params.buried_deployments[i].height) {\n+            version |= ((uint32_t)1) << params.buried_deployments[i].bit;\n+        }\n+    }\n+    return version;\n+}\n+\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */\n@@ -1636,7 +1649,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((ComputeBuriedBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n     }\n };\n "
      }
    ]
  }
]