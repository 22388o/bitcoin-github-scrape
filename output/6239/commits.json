[
  {
    "sha": "4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjRiOWE4ZGU2NjJlNjMyN2Y3OGFhZjA0YTFlODNkNDU3MTNjMDZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-04T12:22:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-06T07:30:41Z"
      },
      "message": "Don't go through double in AmountFromValue and ValueFromAmount\n\nMy prime gripe with JSON spirit was that monetary values still had to be\nconverted from and to floating point which can cause deviations (see #3759\nand https://bitcoin.stackexchange.com/questions/22716/bitcoind-sendfrom-round-amount-error).\n\nAs UniValue stores internal values as strings, this is no longer\nnecessary. This avoids risky double-to-integer and integer-to-double\nconversions completely, and results in more elegant code to boot.",
      "tree": {
        "sha": "c706e3110388a099d914f7f27dace69f4eb76194",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c706e3110388a099d914f7f27dace69f4eb76194"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4b9a8de662e6327f78aaf04a1e83d45713c06a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12cdbabc26a58fe19b97a2e45a3d31ddc455bbc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cdbabc26a58fe19b97a2e45a3d31ddc455bbc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12cdbabc26a58fe19b97a2e45a3d31ddc455bbc8"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "11312ff63ea039670b65fd4ef02be08bd9d0311f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4b9a8de662e6327f78aaf04a1e83d45713c06a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4b9a8de662e6327f78aaf04a1e83d45713c06a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
        "patch": "@@ -11,6 +11,7 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n@@ -118,25 +119,21 @@ void RPCTypeCheckObj(const UniValue& o,\n     }\n }\n \n-static inline int64_t roundint64(double d)\n-{\n-    return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n-}\n-\n CAmount AmountFromValue(const UniValue& value)\n {\n-    double dAmount = value.get_real();\n-    if (dAmount <= 0.0 || dAmount > 21000000.0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    CAmount nAmount = roundint64(dAmount * COIN);\n-    if (!MoneyRange(nAmount))\n+    if (!value.isReal() && !value.isNum())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n+    CAmount amount;\n+    if (!ParseMoney(value.getValStr(), amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    return nAmount;\n+    if (!MoneyRange(amount))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n+    return amount;\n }\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return (double)amount / (double)COIN;\n+    return UniValue(UniValue::VREAL, FormatMoney(amount, false));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)"
      }
    ]
  },
  {
    "sha": "a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDRiZGVmYmViZjljNmVlZTEyNzEyY2NmOGVmMGIyMGU5OTNkYTRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-04T12:43:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-06T07:30:41Z"
      },
      "message": "Get rid of fPlus argument to FormatMoney\n\nIt's never used with any other value than false, the default.",
      "tree": {
        "sha": "7ee330d97d0d87ff19ed58f45c55e2754760cdb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ee330d97d0d87ff19ed58f45c55e2754760cdb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4b9a8de662e6327f78aaf04a1e83d45713c06a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b4b9a8de662e6327f78aaf04a1e83d45713c06a"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 24,
      "deletions": 28
    },
    "files": [
      {
        "sha": "3894dd08bba86a0a7d7f819a6652da5db2c80e80",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "patch": "@@ -133,7 +133,7 @@ CAmount AmountFromValue(const UniValue& value)\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return UniValue(UniValue::VREAL, FormatMoney(amount, false));\n+    return UniValue(UniValue::VREAL, FormatMoney(amount));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)"
      },
      {
        "sha": "2d445f426c02bdd298361d794308a20250990e2e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 23,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "patch": "@@ -146,29 +146,27 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)\n {\n-    BOOST_CHECK_EQUAL(FormatMoney(0, false), \"0.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney((COIN/10000)*123456789, false), \"12345.6789\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN, true), \"+1.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(-COIN, false), \"-1.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(-COIN, true), \"-1.00\");\n-\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000000, false), \"100000000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000000, false), \"10000000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000000, false), \"1000000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000, false), \"100000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000, false), \"10000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000, false), \"1000.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*100, false), \"100.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN*10, false), \"10.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN, false), \"1.00\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/10, false), \"0.10\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/100, false), \"0.01\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000, false), \"0.001\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000, false), \"0.0001\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000, false), \"0.00001\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000000, false), \"0.000001\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000000, false), \"0.0000001\");\n-    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000000, false), \"0.00000001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(0), \"0.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney((COIN/10000)*123456789), \"12345.6789\");\n+    BOOST_CHECK_EQUAL(FormatMoney(-COIN), \"-1.00\");\n+\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000000), \"100000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000000), \"10000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000000), \"1000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000), \"100000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000), \"10000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000), \"1000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100), \"100.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10), \"10.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN), \"1.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10), \"0.10\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100), \"0.01\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000), \"0.001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000), \"0.0001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000), \"0.00001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000000), \"0.000001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000000), \"0.0000001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000000), \"0.00000001\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)"
      },
      {
        "sha": "0f3203432f6e136549c9ea41f29d5aea6021d3b7",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "patch": "@@ -11,7 +11,7 @@\n \n using namespace std;\n \n-string FormatMoney(const CAmount& n, bool fPlus)\n+std::string FormatMoney(const CAmount& n)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -29,8 +29,6 @@ string FormatMoney(const CAmount& n, bool fPlus)\n \n     if (n < 0)\n         str.insert((unsigned int)0, 1, '-');\n-    else if (fPlus && n > 0)\n-        str.insert((unsigned int)0, 1, '+');\n     return str;\n }\n "
      },
      {
        "sha": "99c3ba83061b795ec3a07e63dbaf1136c57d9527",
        "filename": "src/utilmoneystr.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "patch": "@@ -14,7 +14,7 @@\n \n #include \"amount.h\"\n \n-std::string FormatMoney(const CAmount& n, bool fPlus=false);\n+std::string FormatMoney(const CAmount& n);\n bool ParseMoney(const std::string& str, CAmount& nRet);\n bool ParseMoney(const char* pszIn, CAmount& nRet);\n "
      }
    ]
  },
  {
    "sha": "7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDhmZmFjMTg2MTJmZTlhNWZhZWEzZjhmYjQxNDQyZjllN2EzYzFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-06T07:41:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-06T07:41:12Z"
      },
      "message": "Changes necessary now that zero values accepted in AmountFromValue\n\n- Add an accept test for zero amounts, and a reject test for negative\n  amounts\n- Remove ugly hack in `settxfee` that is no longer necessary\n- Do explicit zero checks in wallet RPC functions\n- Don't add a check for zero amounts in `createrawtransaction` - this\n  could be seen as a feature",
      "tree": {
        "sha": "b454d9b892fb5b4eaf654f72bbb37f3ca20410f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b454d9b892fb5b4eaf654f72bbb37f3ca20410f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a04bdefbebf9c6eee12712ccf8ef0b20e993da4a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "08f988fdbf7fc21691aeb387b4858d8bd14a85d0",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
        "patch": "@@ -131,6 +131,9 @@ static UniValue ValueFromString(const std::string &str)\n \n BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n {\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"-0.00000001\")), UniValue);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0\")), 0LL);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000000\")), 0LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001\")), 1LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.17622195\")), 17622195LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.5\")), 50000000LL);"
      },
      {
        "sha": "d284fcf15c253b573066d049d72e361158d47830",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7d8ffac18612fe9a5faea3f8fb41442f9e7a3c1d",
        "patch": "@@ -414,6 +414,8 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     // Amount\n     CAmount nAmount = AmountFromValue(params[1]);\n+    if (nAmount <= 0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -809,6 +811,8 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n+    if (nAmount <= 0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -888,6 +892,8 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CAmount nAmount = AmountFromValue(params[2]);\n+    if (nAmount <= 0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -987,6 +993,8 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n         CAmount nAmount = AmountFromValue(sendTo[name_]);\n+        if (nAmount <= 0)\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n         totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n@@ -2168,9 +2176,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Amount\n-    CAmount nAmount = 0;\n-    if (params[0].get_real() != 0.0)\n-        nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n+    CAmount nAmount = AmountFromValue(params[0]);\n \n     payTxFee = CFeeRate(nAmount, 1000);\n     return true;\n@@ -2352,4 +2358,4 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n     }\n \n     return results;\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  }
]