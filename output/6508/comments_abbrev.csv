dgenr8,2015-08-03T22:08:36Z,"Great improvement over current space requirement which is O(n), yes?\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-127418842,127418842,
sipa,2015-08-03T22:34:58Z,"@dgenr8 Yes, but the current code requires around 96 bytes per transaction, which is insignificant compared to the ~1 kB each transaction already requires in memory on average. Still, this PR improves it to ~1 kB total (but more importantly: entirely continuous and on the stack).\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-127423349,127423349,
laanwj,2015-08-05T10:39:43Z,Concept ACK.\nNeeds to be reviewed very carefully as to not change the behavior in subtle edge cases.\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-127952421,127952421,
sipa,2015-08-05T13:17:24Z,"Of course.\n\nNote that the unit test creates merkle trees of all sizes up to 16, and for\neach all known malleabilities and all branches.\n\nOn the other side, the performance and memory usage benefit are not\nsignificant, but getting rid of vMerkleTree in CBlock may be worth it.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-127994436,127994436,
cozz,2015-08-08T09:03:01Z,"Does this mean that all transactions in a block have to be hashed together again, every time a transaction gets added to the wallet? So if there are 10 transactions in a block for the wallet, we hash it again 10 times?\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-128941740,128941740,
sipa,2015-08-08T09:12:35Z,"@cozz: with the current code, yes. But I don't think we actually need to\nstore those...\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-128943222,128943222,
cozz,2015-08-08T09:42:33Z,"Yes, I wouldnt store them either. But as long as we do, I do not like, that this pull decreases wallet performance. So I would like to see that fixed. Either by some temp-cache for the wallet, or just by removing those merkle-branches.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-128944456,128944456,
sipa,2015-08-11T08:52:36Z,"There is definitely a wallet performance downside, as you need to recompute\nthe merkle tree for every wallet transaction. If it looked like I claimed\notherwise, sorry. It's only an individual merkle root/branch computation\nthat is made faster.\n\nI'll delay this until we remove the call from the wallet to conpute\nbranches.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-129775458,129775458,
sipa,2015-08-11T19:27:49Z,"Rebased on top of #6550, to address the issue that @cozz raised.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-130030213,130030213,
dcousens,2015-08-12T01:01:02Z,utACK\n\n[Diff comparison](https://github.com/sipa/bitcoin/compare/nomerkle...sipa:constmerkle) for those who want to check without including the rebased commits.\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-130127041,130127041,
laanwj,2015-10-06T08:55:14Z,"Needs rebase (after #6550, I think)\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-145789682,145789682,
sipa,2015-11-02T04:41:23Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-152911072,152911072,
sipa,2015-11-17T16:38:36Z,"Moved the Merkle computation code to a separate file (independent of CBlock and CTransaction), and used that in a thin wrapper caller in primitives/block.h.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-157425381,157425381,
dcousens,2015-11-18T00:37:21Z,"re-ACK\n\nAlso, awesome on moving `merkle.cpp` out :+1: \n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-157557669,157557669,
jtimon,2015-11-23T10:07:39Z,"If we make it consensus/merkle.o, that would be less code to move again later...\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-158893956,158893956,
sipa,2015-11-26T00:46:10Z,"@jtimon Hmm, I was seeing this more as generic data structure code, like limitedmap.h is for example, but it's probably not useful to anything that doesn't also need the consensus logic anyway.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159768098,159768098,
laanwj,2015-11-26T09:53:47Z,"Agree that Merkle trees are a general data structure - however, the specific way of doing a Merkle-tree is very bitcoin-consensus-specific, and there is the big warning that this is not recommended to use this as-is outside of bitcoin.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159863621,159863621,
jtimon,2015-11-26T11:09:44Z,"General data structure or not, this is used in checkBlock and will therefore be part of VerifyBlock and the complete libconsensus too.\nOnce it is complete, if we want to separate it as a subtree with its own repo, we will have to put all the files in the same dir (ie src/consensus) first.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159884260,159884260,
laanwj,2015-11-26T11:13:03Z,@jtimon I agree\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159884889,159884889,
sipa,2015-11-26T12:18:38Z,"Done.\n\nI had to move more things around, because otherwise primitives and consensus would end up with a circular dependency on each other. Now all logic (both generic Merkle logic, and the block-specific code) are in consensus, which is better as none of it really belonged in primitives anyway.\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159899160,159899160,
jtimon,2015-11-26T12:32:21Z,Thank you. \nI wouldn't worry about consensus/merkle depending on primitives/transaction while primitives/block depends on consensus/merkle. primitives is not a building package and they all three belong in the consensus building package (see WIP #7091) and eventually they should all be in the consensus dir anyway.\nA circular dependency between consensus/merkle and primitives/block is another thi,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-159901372,159901372,
laanwj,2015-11-27T11:20:33Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-160118211,160118211,
jtimon,2015-11-27T14:53:59Z,"Oh, thought I had done it already...concept ACK\n",https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-160154385,160154385,
jgarzik,2015-11-28T21:28:56Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6508#issuecomment-160336929,160336929,
jtimon,2015-11-26T15:57:04Z,"minor nit, is main_tests.cpp really the right place for this?\n",https://github.com/bitcoin/bitcoin/pull/6508#discussion_r45991474,45991474,src/test/main_tests.cpp
sipa,2015-11-27T14:19:26Z,Have a better suggestion? :)\n,https://github.com/bitcoin/bitcoin/pull/6508#discussion_r46050239,46050239,src/test/main_tests.cpp
jtimon,2015-11-27T14:26:39Z,"I don't know, checkblock_tests.cpp? maybe its own merkle_test.cpp ?\nThe only use in main.cpp is in CheckBlock(), which should eventually move to the consensus dir...\n",https://github.com/bitcoin/bitcoin/pull/6508#discussion_r46050753,46050753,src/test/main_tests.cpp
sipa,2015-11-27T14:38:16Z,Moved!\n,https://github.com/bitcoin/bitcoin/pull/6508#discussion_r46051545,46051545,src/test/main_tests.cpp
