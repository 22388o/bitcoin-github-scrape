[
  {
    "sha": "6d5d656d741b3d9173349c3841a844abb302d748",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDVkNjU2ZDc0MWIzZDkxNzMzNDljMzg0MWE4NDRhYmIzMDJkNzQ4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-24T03:00:46Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:04Z"
      },
      "message": "Added ProbabilityTarget/Estimate support to arith_uint256.",
      "tree": {
        "sha": "15ab1b2b4952d42d547791d411ed7349e0512719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ab1b2b4952d42d547791d411ed7349e0512719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d5d656d741b3d9173349c3841a844abb302d748",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HgACgkQV692LbM1\nMyL1vQ/9FJvsDaVNnyMKSKUlxGhyvGcjCm8Gf2regM7EEB+jkwrl6foFw4KLhHJi\nIgpLGCsmBog/D6+W8CHKy7wBOJd1mu8SoK7Vi8S+5aUEViBIojo4WzSwJ9rzlb3L\nPTlbzQHiGnurNdkcwVlV7jXKeVs1A+to95K23UdNqDSwnDNFyxGQQo/l4d+trc+o\nR3ehGz6j/Yg0ccomgVh2MAF0JTLxbLJz97uTrSuAp+YerxhjbXy5y1uAEpboql5e\n7L2C/AtXqkKY5URpF/5Ky9LzRts87rf3bndkJ33MqKq4ObUD6SzAQZ0uiYMykvZu\n4VLm3PPJB2Lyy8v34wlG8okHRaX7+N9xpdwnDRI+LoxVMxX8dav9+tEOGYlTFMKS\nml1D+/JTsuRthnjk83EV7b7N+9L3XaNSrXrv4t11YCUE7OS/t2HOM7BhhVtMyrUY\ncstVyo90WohrsQkSO5kp+xLzKlb0+xGHp7c+RWIoX1udxBwOnWbSWXDGjClK5rEQ\nqWTHD7Fpt7VPCFRUKWSX7aDI3CLGC4zRNO/6otySUjNWZYPxclhkFLWrhLzHq+5x\npDbTPMKGUct2Kztj1dSG2CqR5LPsKOdXQ0thxsXCvRvIYVaXwBJ/iGZ1qdESGjAM\nq7WCbeI/n2Kg8jjJ3su2FZsHQexQbuCvbzR1tqAv9V28sugHtgk=\n=9pE5\n-----END PGP SIGNATURE-----",
        "payload": "tree 15ab1b2b4952d42d547791d411ed7349e0512719\nparent e4fcbf797ed3b472d352ac3794ec82f581209c50\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1493002846 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920504 +0900\n\nAdded ProbabilityTarget/Estimate support to arith_uint256.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d5d656d741b3d9173349c3841a844abb302d748",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d5d656d741b3d9173349c3841a844abb302d748",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d5d656d741b3d9173349c3841a844abb302d748/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4fcbf797ed3b472d352ac3794ec82f581209c50"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "db0e647982be911d5abe44d0b13f339e8a863076",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d5d656d741b3d9173349c3841a844abb302d748/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d5d656d741b3d9173349c3841a844abb302d748/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=6d5d656d741b3d9173349c3841a844abb302d748",
        "patch": "@@ -246,6 +246,44 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n     return nCompact;\n }\n \n+arith_uint256& arith_uint256::SetProbabilityTarget(double pt)\n+{\n+    double pti = 1.0 - pt;      // we are actually summating the probability of failing, whereas pt is the desired probability of success\n+    double psum = 0.0;          // sum of probabilities\n+    double pcurr = 1.0/2;       // probability at current bit\n+    // unset bits to satisfy probability\n+    for (int k = WIDTH - 1; k >= 0; k--) {\n+        uint32_t pbit = 0x80000000; // current bit value\n+        uint32_t v = 0;\n+        for (unsigned int i = 0; psum < pti && i < 32; i++) {\n+            if (psum + pcurr <= pti) {\n+                psum += pcurr;\n+                v |= pbit;\n+            }\n+            pcurr /= 2;\n+            pbit >>= 1;\n+        }\n+        pn[k] = ~v;\n+    }\n+    return *this;\n+}\n+\n+double arith_uint256::GetProbabilityEstimate() const\n+{\n+    double psum = 0.0;\n+    double pcurr = 1.0/2;       // probability at current bit\n+    for (int k = WIDTH - 1; k >= 0; k--) {\n+        uint32_t pbit = 0x80000000; // current bit value\n+        uint32_t v = ~pn[k];\n+        for (unsigned int i = 0; i < 32; i++) {\n+            if (v & pbit) psum += pcurr;\n+            pcurr /= 2;\n+            pbit >>= 1;\n+        }\n+    }\n+    return 1.0 - psum;\n+}\n+\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;"
      },
      {
        "sha": "2e4fc028f118c2fa05a7f036293b13f2785f3bec",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d5d656d741b3d9173349c3841a844abb302d748/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d5d656d741b3d9173349c3841a844abb302d748/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=6d5d656d741b3d9173349c3841a844abb302d748",
        "patch": "@@ -286,6 +286,21 @@ class arith_uint256 : public base_uint<256> {\n     arith_uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n     uint32_t GetCompact(bool fNegative = false) const;\n \n+    /**\n+     * Set the value so that a random 256 bit digest will be smaller than this\n+     * 1/pt number of times on average.\n+     * @param  pt Probability target, in the range [0..1]\n+     * @return    Updated self\n+     */\n+    arith_uint256& SetProbabilityTarget(double pt);\n+\n+    /**\n+     * Obtain an estimate probability that a random 256 bit digest will be\n+     * smaller than this.\n+     * @return Probability estimate, in the range [0..1]\n+     */\n+    double GetProbabilityEstimate() const;\n+\n     friend uint256 ArithToUint256(const arith_uint256 &);\n     friend arith_uint256 UintToArith256(const uint256 &);\n };"
      }
    ]
  },
  {
    "sha": "f9b818d17e0b9049bee906c27c3a461484a1d392",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWI4MThkMTdlMGI5MDQ5YmVlOTA2YzI3YzNhNDYxNDg0YTFkMzky",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-24T03:01:14Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "[test] Added tests for arith_uint256::SetProbabilityTarget/GetProbabilityEstimate.",
      "tree": {
        "sha": "9ccda47bbade0ce3e9b714c75e322a26c32ca354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ccda47bbade0ce3e9b714c75e322a26c32ca354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b818d17e0b9049bee906c27c3a461484a1d392",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyLF3g//TWzVG0tN0qulYGpd0C3sB+Yrzissa/50Hod+c9Q+EJb+QNWwUJh1IdYW\n+BcuOHQLbfk1qc0WhNNJSKpyXOrcComie268fpGeJ7p+bPadwECt2YvYMuYnuw2w\n6z3qG7ZKJcOYhxrdsvtNecUQB0inHqGPIcJbR5rDarqss+9wheTzvcY+v2npyXgc\nhncU9yEIfJLBoeCJy+SRfD2q5TxnFMEthTWiqWhuM2ZOmHAfPamvfcuf6RFUyVNL\nQFmddRySdORVNsvkyxbbSluk2mbFC+WnGYrNoenESvKDLktVPkc7BUohvqSFy9u5\n81fiSgmZ1Y3c2TDRgBFgP30rcP8bRsWVfKGPRtw2AGOQxf7OzpNWIvL4780nlDwL\nn2KvUeOv5dAMROeURnG62uPjmUwlvlQ7ZVdY1wGBS8K+5CZLKUyCe6bJp20N8wAQ\n3rdd/dAlJ2XXl6DINGmpxFhl16WwPMdGwx0R+BeGBvu+BAFvxBTA/6TOgKsfc5EQ\nF+6ZZK9piPB5bPGPtdE6JrI3Yskt/gensjEy0G4s8g3yi8MFXXlfvR9g07LYCNNd\nKgKXVXMd2SlTTVk/c5rOXC4vuO897laAwTi4cOqiv8yvQ+GGKNMe0pg5XkdM/hfi\nyRKbNCHf9Ghi4L9cS7P6i998GonQWrLBvWDnnjEe3CGYlVFS4HM=\n=gJaV\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ccda47bbade0ce3e9b714c75e322a26c32ca354\nparent 6d5d656d741b3d9173349c3841a844abb302d748\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1493002874 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\n[test] Added tests for arith_uint256::SetProbabilityTarget/GetProbabilityEstimate.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b818d17e0b9049bee906c27c3a461484a1d392",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b818d17e0b9049bee906c27c3a461484a1d392",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b818d17e0b9049bee906c27c3a461484a1d392/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d5d656d741b3d9173349c3841a844abb302d748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d5d656d741b3d9173349c3841a844abb302d748",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d5d656d741b3d9173349c3841a844abb302d748"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cc70cb4fe5d684d2385c27055daa502deefe37f9",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b818d17e0b9049bee906c27c3a461484a1d392/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b818d17e0b9049bee906c27c3a461484a1d392/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=f9b818d17e0b9049bee906c27c3a461484a1d392",
        "patch": "@@ -537,6 +537,17 @@ BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n     BOOST_CHECK_EQUAL(fOverflow, true);\n }\n \n+BOOST_AUTO_TEST_CASE(probabilityTarget)\n+{\n+    arith_uint256 t;\n+    for (uint32_t target_attempts = 1; target_attempts < 256; target_attempts++) {\n+        double pt = 1.0/target_attempts;\n+        t.SetProbabilityTarget(pt);\n+        double got = t.GetProbabilityEstimate();\n+        BOOST_CHECK(std::abs(got - pt) < 0.0000001);\n+    }\n+}\n+\n \n BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% coverage\n {"
      }
    ]
  },
  {
    "sha": "acb859be3a967b3830415b90f30429ceb9621009",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2I4NTliZTNhOTY3YjM4MzA0MTViOTBmMzA0MjljZWI5NjIxMDA5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-11T09:17:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "Added generic proof of work class.",
      "tree": {
        "sha": "ff5b60017105f2d9844186f22da1247e651c0450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff5b60017105f2d9844186f22da1247e651c0450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acb859be3a967b3830415b90f30429ceb9621009",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyIgTQ//Vi5+dc8zYnUOnbUv7bOPhpPoVU9lyeXOoIIZHqQjxQqOBTTNYWMfRPdh\n/IT+xUydeWSq/tbiHr+j2YIdu8ndhBjn8u0vqdClUsQRQT7eWybAgKpXvCIro/ea\nBi0EK6VVBTPTWfJyKZNe9TdcCMGrYDocbtIbb7SDaqYPIUP6UjoE8h5z+dv1C0ul\n6KWpy0s0lKZGCk/KsXhVhm0pyKK36S+0UC63JB0AU+oz1w71IPLyW+7WqwA/7acV\nwQmvgxj5M8eMivI5RWTJUHFhJxPNf9/TONIYI+FsEQ/Y5Ytm+wM9C7Nz4BrnqYFw\nWNZclBzS5m52Jjm8tYZvxwQMH046N53Nwzb3Z/L17NnHNXVeDv8fqtDKtQDW2VFR\nYU5FvgxTVlWTEFE2rh3Qu+o3ROrOl1ifaW14wyM4VU72kWVoLCRnoXmj+KRizn5d\ncWVC/lYavEaHF7kT5zJBfo+JOxLA7FGLIXqCeCVMedjhKyroRta2bHo3NfQKKPkt\nsfPmI7KorRsTkfMcYqauOULCEdqPcKp+ufV5AAOmr6z/ilLfG060UiK5olPyz9NU\nc8NO4w4dwqqdIiLvb4w3CFrM3ULDdFuvbIAyChlt6wATJ89DXsLNwd0uDwNBZqlH\noJo8XPqa7hj+bnkcZi6Iiu/ZZx15uwjjhLnPdkqO5rlRpHbSL7k=\n=Jyaj\n-----END PGP SIGNATURE-----",
        "payload": "tree ff5b60017105f2d9844186f22da1247e651c0450\nparent f9b818d17e0b9049bee906c27c3a461484a1d392\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1491902230 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\nAdded generic proof of work class.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb859be3a967b3830415b90f30429ceb9621009",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acb859be3a967b3830415b90f30429ceb9621009",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb859be3a967b3830415b90f30429ceb9621009/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9b818d17e0b9049bee906c27c3a461484a1d392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b818d17e0b9049bee906c27c3a461484a1d392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b818d17e0b9049bee906c27c3a461484a1d392"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 306,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bdbedb3f46f900d606513229b12c8ae1b4e82b8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acb859be3a967b3830415b90f30429ceb9621009/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acb859be3a967b3830415b90f30429ceb9621009/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=acb859be3a967b3830415b90f30429ceb9621009",
        "patch": "@@ -121,6 +121,7 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n+  pow/pow.h \\\n   pow.h \\\n   protocol.h \\\n   random.h \\\n@@ -201,6 +202,7 @@ libbitcoin_server_a_SOURCES = \\\n   policy/fees.cpp \\\n   policy/policy.cpp \\\n   policy/rbf.cpp \\\n+  pow/pow.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\"
      },
      {
        "sha": "bc14edb18f03c1e299f640dd3799a7cebf1988f0",
        "filename": "src/pow/pow.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acb859be3a967b3830415b90f30429ceb9621009/src/pow/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acb859be3a967b3830415b90f30429ceb9621009/src/pow/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/pow.cpp?ref=acb859be3a967b3830415b90f30429ceb9621009",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"pow/pow.h\"\n+#include \"pow/cuckoo_cycle/cuckoo_cycle.h\"\n+#include \"pow/sha256/sha256.h\"\n+\n+namespace powa {\n+\n+bool fZeroStartingNonce = false;\n+\n+pow_ref pow::create(const uint32_t powid, challenge_ref c_in, callback_ref cb_in) {\n+    switch (powid) {\n+    case POWID_CUCKOO_CYCLE: return pow_ref(new cuckoo_cycle::cuckoo_cycle(cuckoo_cycle::cc_challenge_ref(new cuckoo_cycle::cc_challenge(*c_in)), cb_in));\n+    case POWID_SHA256:       return pow_ref(new sha256(challenge_ref(new sha256challenge(*c_in)), cb_in));\n+    default:\n+        fprintf(stderr, \"error: unknown powid:%u\\n\", powid);\n+        return nullptr;\n+    }\n+}\n+\n+}  // namespace powa"
      },
      {
        "sha": "56b6f359ec2b809bbe05adfa65984fd5c0990ef8",
        "filename": "src/pow/pow.h",
        "status": "added",
        "additions": 281,
        "deletions": 0,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acb859be3a967b3830415b90f30429ceb9621009/src/pow/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acb859be3a967b3830415b90f30429ceb9621009/src/pow/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/pow.h?ref=acb859be3a967b3830415b90f30429ceb9621009",
        "patch": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POW_POW_H\n+#define BITCOIN_POW_POW_H\n+\n+#include <vector>\n+#include <stdint.h>\n+\n+#include \"random.h\"\n+#include \"serialize.h\"\n+#include \"tinyformat.h\"\n+\n+namespace powa {\n+\n+extern bool fZeroStartingNonce; ///< used for debugging to get deterministic challenges\n+\n+class challenge;\n+class solution;\n+class callback;\n+class pow;\n+\n+typedef std::shared_ptr<challenge> challenge_ref;\n+typedef std::shared_ptr<solution> solution_ref;\n+typedef std::shared_ptr<callback> callback_ref;\n+typedef std::shared_ptr<pow> pow_ref;\n+\n+enum solver_state {\n+    state_ready    = 1,  //!< ready to run\n+    state_running  = 2,  //!< currently running\n+    state_paused   = 3,  //!< ran out of ticks, and waiting to resume\n+    state_aborted  = 4,  //!< run was aborted\n+    state_stopped  = 5,  //!< no longer running\n+    state_term     = 6,  //!< asked to terminate\n+};\n+\n+static const uint32_t POWID_SHA256       = 1;\n+static const uint32_t POWID_CUCKOO_CYCLE = 2;\n+\n+class container {\n+public:\n+    std::vector<uint8_t> params;\n+    container() {}\n+    container(const std::vector<uint8_t>& params_in) : params(params_in) {}\n+    container(const container& other) { params = other.params; }\n+    void set_params(const uint8_t* arr, const uint32_t size) { params = std::vector<uint8_t>(arr, arr + size); }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(params);\n+    }\n+\n+    virtual bool operator==(const container& other) const {\n+        return params == other.params;\n+    }\n+};\n+\n+class challenge : public container {\n+public:\n+    container config;\n+    using container::container;\n+    challenge() : container() {}\n+    challenge(const challenge& other) : container(other) { config = other.config; }\n+    void randomize(const uint32_t bytes, const uint32_t offset = 0) {\n+        if (params.size() < bytes) params.resize(bytes);\n+        GetRandBytes(&params.begin()[offset], bytes);\n+    }\n+    /**\n+     * Generate a random challenge of this POW type.\n+     * @param  size Number of random bytes to generate.\n+     * @return      A challenge whose params consists of size random bytes.\n+     */\n+    static challenge* random_challenge(const uint32_t size) {\n+        challenge* c = new challenge();\n+        c->randomize(size);\n+        return c;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(config);\n+        READWRITE(params);\n+    }\n+};\n+\n+class solution : public container {\n+public:\n+    using container::container;\n+    solution() : container() {}\n+    template<typename T> solution(T t) {\n+        params.resize(sizeof(T));\n+        memcpy(&params[0], &t, sizeof(T));\n+    }\n+};\n+\n+class pow;\n+\n+class callback {\n+public:\n+    virtual ~callback() {}\n+    /**\n+     * Called whenever a solution is found to a given challenge. This method\n+     * should return true if the solution satisfies external requirements or\n+     * false if the solver should continue finding solutions.\n+     * @param  p The proof of work\n+     * @param  c The challenge\n+     * @param  s The solution\n+     * @return   Whether the solver should continue looking.\n+     */\n+    virtual bool found_solution(const pow& p, challenge_ref c, solution_ref s) {\n+        assert(!\"not implemented found_solution callback\");\n+    }\n+};\n+\n+class callback_proxy : public callback {\n+public:\n+    callback* actual;\n+    callback_proxy(callback* actual_in) : actual(actual_in) {}\n+    bool found_solution(const pow& p, challenge_ref c, solution_ref s) override {\n+        return actual->found_solution(p, c, s);\n+    }\n+};\n+\n+class pow {\n+public:\n+    uint32_t powid;\n+    challenge_ref c;\n+    callback_ref cb;\n+    solver_state state;\n+    int32_t ticks_left;\n+\n+    static pow_ref create(const uint32_t powid, challenge_ref c_in, callback_ref cb_in = nullptr);\n+\n+    pow(uint32_t powid_in, challenge_ref c_in, callback_ref cb_in = nullptr) : powid(powid_in), c(c_in), cb(cb_in), state(state_ready) {}\n+\n+    /**\n+     * Determine if s is a valid solution to c.\n+     * @param  s A solution to this POW\n+     * @return   Whether the solution solves the challenge.\n+     */\n+    virtual bool is_valid(solution& s) const = 0;\n+\n+    /**\n+     * Set the given vector to the output given the solution s.\n+     * @param s      The solution on which output should be based.\n+     * @param output The output produced by this POW.\n+     */\n+    virtual void set_output(solution& s, std::vector<uint8_t>& output) = 0;\n+\n+    /**\n+     * Attempt to solve c in the given number of threads over the given number\n+     * of ticks. Whenever a solution is found, cb.found_solution is called with\n+     * the given solution.\n+     * @param threads    The number of threads to spin up to solve.\n+     * @param background If true, the solver will create a new thread and work from there, returning control to the caller immediately.\n+     * @param ticks      Number of ticks (cycles) to attempt before temporarily pausing. If -1, unlimited.\n+     */\n+    virtual void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) = 0;\n+\n+    /**\n+     * Stop solving.\n+     */\n+    virtual void abort() {\n+        if (state == state_running) state = state_term;\n+    }\n+\n+    virtual int64_t expected_iteration_cycles() const = 0;\n+    virtual int64_t expected_invprob() const = 0;\n+\n+    bool operator==(const pow& other) const {\n+        return powid == other.powid &&\n+            *c == *other.c;\n+    }\n+\n+    virtual std::string to_string() const {\n+        return strprintf(\"POW<id=%u; ptr=%p>\", powid, this);\n+    }\n+};\n+\n+class powchain : public pow, public callback {\n+public:\n+    std::vector<pow_ref> pows;\n+\n+    powchain(challenge_ref c_in = challenge_ref(new challenge()), callback_ref cb_in = nullptr) : pow(0, c_in, cb_in) {}\n+\n+    void add_pow(pow_ref p) {\n+        pows.push_back(p);\n+    }\n+\n+    bool found_solution(const pow& p, challenge_ref c, solution_ref s) override {\n+        if (p == *pows.back()) {\n+            if (!is_valid(*s)) return false;\n+            return cb->found_solution(*this, c, s);\n+        }\n+        assert(p == *pows.front());\n+        return cb->found_solution(p, c, s);\n+    }\n+\n+    bool is_valid(solution& s) const override {\n+        solution z = s;\n+        std::vector<uint8_t> output;\n+        for (auto it = pows.rbegin(); it != pows.rend(); ++it) {\n+            pow* p = it->get();\n+            if (!p->is_valid(z)) return false;\n+            p->set_output(z, output);\n+            z = solution(output);\n+        }\n+        return true;\n+    }\n+\n+    void set_output(solution& s, std::vector<uint8_t>& output) override {\n+        pows.back()->set_output(s, output);\n+    }\n+\n+    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n+        pows.back()->cb = callback_ref(new callback_proxy(this));\n+        pows.back()->solve(threads, false, ticks);\n+        state = pows.back()->state; // TODO: deal with background case (right now using false for background always)\n+    }\n+\n+    int64_t expected_iteration_cycles() const override {\n+        int64_t cycles = 0;\n+        for (pow_ref p : pows) {\n+            cycles += p->expected_iteration_cycles();\n+        }\n+        return cycles;\n+    }\n+\n+    int64_t expected_invprob() const override {\n+        int64_t invprob = 1;\n+        for (pow_ref p : pows) {\n+            invprob *= p->expected_invprob();\n+        }\n+        return invprob;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            uint8_t pows_size;\n+            READWRITE(pows_size);\n+            pows.resize(pows_size);\n+            for (uint32_t i = 0; i < pows_size; i++) {\n+                uint32_t powid;\n+                challenge_ref c(new challenge());\n+                READWRITE(powid);\n+                READWRITE(*c);\n+                pow_ref p = pow::create(powid, c);\n+                pows[i] = p;\n+            }\n+            return;\n+        }\n+\n+        // Writing to stream\n+        uint8_t pows_size = pows.size();\n+        READWRITE(pows_size);\n+        for (pow_ref p : pows) {\n+            READWRITE(p->powid);\n+            READWRITE(*p->c);\n+        }\n+    }\n+\n+    virtual std::string to_string() const override {\n+        std::string s = strprintf(\"POW-chain<%p>[\", this);\n+        for (pow_ref p : pows) {\n+            s += \"\\n\\t\" + p->to_string();\n+        }\n+        return s + \"\\n]\";\n+    }\n+};\n+\n+}  // namespace powa\n+\n+#endif  // BITCOIN_POW_POW_H"
      }
    ]
  },
  {
    "sha": "7f4cbf16c32244dd166bd9be81513ce191670eeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjRjYmYxNmMzMjI0NGRkMTY2YmQ5YmU4MTUxM2NlMTkxNjcwZWVi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-11T09:20:16Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "Imported cuckoo cycle code.",
      "tree": {
        "sha": "d99fd0f54cfe79b6d025dd11df2752b742300fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d99fd0f54cfe79b6d025dd11df2752b742300fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f4cbf16c32244dd166bd9be81513ce191670eeb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyJtgxAAjpevuJzRsjsXMkyXCfZQyCFIN6FnxbIqXCEWw1bKzP4MJEvnJfgNQOG4\nmyW3O+71gmMvPbKCVpsMOIYZyUx1NsJYQhmvuy8gvenTW4nnQLxjat6Nx3YD9uWy\nLJL1FnuIcSwifiluFwTAWrf+/zbrLQwcHHFUKHr0I3BfaxoeFMQMKKUZSA9oNfvJ\nyG+kp8n3aZKRS5CKmsVI95zvwg1LoTAXaxfYsxX7T7ztO1USDkkFWkAhKhAeqYCW\nNG1RWdWEZ7pewjKioBA5dggMWEiUmBK0oy70VtlFwWVKiFc+GRuCl+Guqy000Tzd\nsm7PSRi81IbdoxRClXsf6V5mx5vUtJCYATvcsaQZLyQiktYKHgRwwQVqS3URamwD\nlijTCKr/39LZyfD35hARoLvoYp14E8Nh1Xfwxn3dsLPotBgkmocz1ubxiBF3HzPg\n2juMWeqqIbrF5quTzSF0+5xaySJ3zG71p+zcFLq1hj/MWzz10EJV+YkfZCHTBlJ8\nTIRhNKSdbtl4t+2RwPCXb2lNqpFdcRTkhGZJeYdcLaPX9hYnD29ADUAGCRgDGT8O\nMkxiUAKPwgnwKlqrwSHzZ/7P1ltKkSfczErAV6/+i7zFqXS2QASeP2Vo+TxeC9ew\nhfx/T2x7rajIZRcSBDT84+4bRv8cDP+AzONl9gLWrR1P9b23wkw=\n=LJ1H\n-----END PGP SIGNATURE-----",
        "payload": "tree d99fd0f54cfe79b6d025dd11df2752b742300fb9\nparent acb859be3a967b3830415b90f30429ceb9621009\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1491902416 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\nImported cuckoo cycle code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4cbf16c32244dd166bd9be81513ce191670eeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f4cbf16c32244dd166bd9be81513ce191670eeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4cbf16c32244dd166bd9be81513ce191670eeb/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb859be3a967b3830415b90f30429ceb9621009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb859be3a967b3830415b90f30429ceb9621009",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb859be3a967b3830415b90f30429ceb9621009"
      }
    ],
    "stats": {
      "total": 766,
      "additions": 766,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1a3050db82961c0c053cab9e43253eefc3b4913",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -121,6 +121,9 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n+  pow/cuckoo_cycle/cuckoo_miner.h \\\n+  pow/cuckoo_cycle/cuckoo.h \\\n+  pow/cuckoo_cycle/siphash.h \\\n   pow/pow.h \\\n   pow.h \\\n   protocol.h \\"
      },
      {
        "sha": "89ccdb1ca9c2d00bf333c313811c91e324f4134a",
        "filename": "src/pow/cuckoo_cycle/LICENSE.txt",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/LICENSE.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/LICENSE.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/LICENSE.txt?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2013-2016 John Tromp\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
      },
      {
        "sha": "48503f696bbe5f544044698c806053034aac1a31",
        "filename": "src/pow/cuckoo_cycle/cuckoo.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/cuckoo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/cuckoo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo.h?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -0,0 +1,93 @@\n+// Cuckoo Cycle, a memory-hard proof-of-work\n+// Copyright (c) 2013-2016 John Tromp\n+\n+#ifndef BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_H\n+#define BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_H\n+\n+#include <stdint.h> // for types uint32_t,uint64_t\n+#include <string.h> // for functions strlen, memset\n+#include \"siphash.h\"\n+// both cuckoo.c and cuckoo_miner.h need htole32\n+#ifdef __APPLE__\n+#include \"osx_barrier.h\"\n+#include <machine/endian.h>\n+#include <libkern/OSByteOrder.h>\n+#define htole32(x) OSSwapHostToLittleInt32(x)\n+#else\n+#include <endian.h>\n+#endif\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+// proof-of-work parameters\n+#ifndef SIZESHIFT\n+// the main parameter is the 2log of the graph size,\n+// which is the size in bits of the node identifiers\n+#define SIZESHIFT 20\n+#endif\n+#ifndef PROOFSIZE\n+// the next most important parameter is (even) length\n+// of the cycle to be found. a minimum of 12 is recommended\n+#define PROOFSIZE 42\n+#endif\n+\n+// the graph size / number of nodes\n+static const u64 SIZE = 1ULL<<SIZESHIFT;\n+// number of nodes in one partition (eg. all even nodes)\n+static const u64 HALFSIZE = SIZE/2;\n+// used to mask siphash output\n+static const u64 NODEMASK = HALFSIZE-1;\n+\n+// generate edge endpoint in cuckoo graph without partition bit\n+u64 _sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n+  return siphash24(keys, 2*nonce + uorv) & NODEMASK;\n+}\n+\n+// generate edge endpoint in cuckoo graph\n+u64 sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n+  return _sipnode(keys, nonce, uorv) << 1 | uorv;\n+}\n+\n+enum verify_code { POW_OK, POW_HEADER_LENGTH, POW_TOO_BIG, POW_TOO_SMALL, POW_NON_MATCHING, POW_BRANCH, POW_DEAD_END, POW_SHORT_CYCLE};\n+const char *errstr[] = { \"OK\", \"wrong header length\", \"proof too big\", \"proof too small\", \"endpoints don't match up\", \"branch in cycle\", \"cycle dead ends\", \"cycle too short\"};\n+\n+// verify that nonces are ascending and form a cycle in header-generated graph\n+int verify(u32 nonces[PROOFSIZE], const char *headernonce, const u32 headerlen) {\n+  if (headerlen != HEADERLEN)\n+    return POW_HEADER_LENGTH;\n+  siphash_keys keys;\n+  setheader(&keys, headernonce);\n+  u32 uvs[2*PROOFSIZE];\n+  u32 xor0=0,xor1=0;\n+  for (u32 n = 0; n < PROOFSIZE; n++) {\n+    if (nonces[n] >= HALFSIZE)\n+      return POW_TOO_BIG;\n+    if (n && nonces[n] <= nonces[n-1])\n+      return POW_TOO_SMALL;\n+    xor0 ^= uvs[2*n  ] = sipnode(&keys, nonces[n], 0);\n+    xor1 ^= uvs[2*n+1] = sipnode(&keys, nonces[n], 1);\n+  }\n+  if (xor0|xor1)                        // matching endpoints imply zero xors\n+    return POW_NON_MATCHING;\n+  u32 n = 0, i = 0, j;\n+  do {                        // follow cycle\n+    for (u32 k = j = i; (k = (k+2) % (2*PROOFSIZE)) != i; ) {\n+      if (uvs[k] == uvs[i]) { // find other edge endpoint identical to one at i\n+        if (j != i)           // already found one before\n+          return POW_BRANCH;\n+        j = k;\n+      }\n+    } if (j == i) return POW_DEAD_END;  // no matching endpoint\n+    i = j^1;\n+    n++;\n+  } while (i != 0);           // must cycle back to start or we would have found branch\n+  return n == PROOFSIZE ? POW_OK : POW_SHORT_CYCLE;\n+}\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa\n+\n+#endif  // BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_H"
      },
      {
        "sha": "3fbc4390a40ed2af228d04321203cf771199d2e3",
        "filename": "src/pow/cuckoo_cycle/cuckoo_miner.h",
        "status": "added",
        "additions": 486,
        "deletions": 0,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_miner.h?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -0,0 +1,486 @@\n+// Cuckoo Cycle, a memory-hard proof-of-work\n+// Copyright (c) 2013-2016 John Tromp\n+// The edge-trimming memory optimization is due to Dave Andersen\n+// http://da-data.blogspot.com/2014/03/a-public-review-of-cuckoo-cycle.html\n+// The use of prefetching was suggested by Alexander Peslyak (aka Solar Designer)\n+// define SINGLECYCLING to run cycle finding single threaded which runs slower\n+// but avoids losing cycles to race conditions (not worth it in my testing)\n+\n+#ifndef BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_MINER_H\n+#define BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_MINER_H\n+\n+#include \"cuckoo.h\"\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <pthread.h>\n+#include <assert.h>\n+#include <set>\n+\n+#ifdef ATOMIC\n+#include <atomic>\n+#endif\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+#ifdef ATOMIC\n+typedef std::atomic<u32> au32;\n+typedef std::atomic<u64> au64;\n+#else\n+typedef u32 au32;\n+typedef u64 au64;\n+#endif\n+\n+#ifndef SIZEOF_TWICE_ATOM\n+#define SIZEOF_TWICE_ATOM 4\n+#endif\n+#if SIZEOF_TWICE_ATOM == 8\n+typedef au64 atwice;\n+typedef u64 uatwice;\n+#elif SIZEOF_TWICE_ATOM == 4\n+typedef au32 atwice;\n+typedef u32 uatwice;\n+#elif SIZEOF_TWICE_ATOM == 1\n+typedef unsigned char atwice;\n+typedef unsigned char uatwice;\n+#else\n+#error not implemented\n+#endif\n+\n+#if SIZESHIFT <= 32\n+typedef u32 nonce_t;\n+typedef u32 node_t;\n+#else\n+typedef u64 nonce_t;\n+typedef u64 node_t;\n+#endif\n+\n+// algorithm/performance parameters\n+#ifndef PART_BITS\n+// #bits used to partition edge set processing to save memory\n+// a value of 0 does no partitioning and is fastest\n+// a value of 1 partitions in two, making twice_set the\n+// same size as shrinkingset at about 33% slowdown\n+// higher values are not that interesting\n+#define PART_BITS 0\n+#endif\n+\n+#ifndef NPREFETCH\n+// how many prefetches to queue up\n+// before accessing the memory\n+// must be a multiple of NSIPHASH\n+#define NPREFETCH 32\n+#endif\n+\n+#ifndef IDXSHIFT\n+// we want sizeof(cuckoo_hash) == sizeof(twice_set), so\n+// CUCKOO_SIZE * sizeof(u64)   == 2 * ONCE_BITS / 32\n+// CUCKOO_SIZE * 2             == 2 * ONCE_BITS / 32\n+// (SIZE >> IDXSHIFT) * 2      == 2 * ONCE_BITS / 32\n+// SIZE >> IDXSHIFT            == HALFSIZE >> PART_BITS >> 5\n+// IDXSHIFT                    == 1 + PART_BITS + 5\n+#define IDXSHIFT (PART_BITS + 6)\n+#endif\n+// grow with cube root of size, hardly affected by trimming\n+const static u32 MAXCCPATHLEN = 8 << (SIZESHIFT/3);\n+\n+const static u32 PART_MASK = (1 << PART_BITS) - 1;\n+const static u64 ONCE_BITS = HALFSIZE >> PART_BITS;\n+const static u64 TWICE_BYTES = (2 * ONCE_BITS) / 8;\n+const static u64 TWICE_ATOMS = TWICE_BYTES / sizeof(atwice);\n+const static u32 TWICE_PER_ATOM = sizeof(atwice) * 4;\n+\n+class twice_set {\n+public:\n+  atwice *bits;\n+\n+  twice_set() {\n+    bits = (atwice *)calloc(TWICE_ATOMS, sizeof(atwice));\n+    assert(bits != 0);\n+  }\n+  void clear() {\n+    assert(bits);\n+    memset(bits, 0, TWICE_ATOMS*sizeof(atwice));\n+  }\n+ void prefetch(node_t u) const {\n+#ifdef PREFETCH\n+    __builtin_prefetch((const void *)(&bits[u/TWICE_PER_ATOM]), /*READ=*/0, /*TEMPORAL=*/0);\n+#endif\n+  }\n+  void set(node_t u) {\n+    node_t idx = u/TWICE_PER_ATOM;\n+    uatwice bit = (uatwice)1 << (2 * (u%TWICE_PER_ATOM));\n+#ifdef ATOMIC\n+    uatwice old = std::atomic_fetch_or_explicit(&bits[idx], bit, std::memory_order_relaxed);\n+    if (old & bit) std::atomic_fetch_or_explicit(&bits[idx], bit<<1, std::memory_order_relaxed);\n+#else\n+    uatwice old = bits[idx];\n+    bits[idx] = old | (bit + (old & bit));\n+#endif\n+  }\n+  bool test(node_t u) const {\n+#ifdef ATOMIC\n+    return ((bits[u/TWICE_PER_ATOM].load(std::memory_order_relaxed)\n+            >> (2 * (u%TWICE_PER_ATOM))) & 2) != 0;\n+#else\n+    return (bits[u/TWICE_PER_ATOM] >> (2 * (u%TWICE_PER_ATOM)) & 2) != 0;\n+#endif\n+  }\n+  ~twice_set() {\n+    free(bits);\n+  }\n+};\n+\n+// set that starts out full and gets reset by threads on disjoint words\n+class shrinkingset {\n+public:\n+  u64 *bits;\n+  u64 *cnt;\n+  u32 nthreads;\n+\n+  shrinkingset(const u32 nt) {\n+    bits = (u64 *)malloc(HALFSIZE/8);\n+    cnt  = (u64 *)malloc(nt * sizeof(u64));\n+    nthreads = nt;\n+  }\n+  void clear() {\n+    memset(bits, 0, HALFSIZE/8);\n+    memset(cnt, 0, nthreads * sizeof(u64));\n+    cnt[0] = HALFSIZE;\n+  }\n+  u64 count() const {\n+    u64 sum = 0LL;\n+    for (u32 i=0; i<nthreads; i++)\n+      sum += cnt[i];\n+    return sum;\n+  }\n+  void reset(nonce_t n, u32 thread) {\n+    bits[n/64] |= 1LL << (n%64);\n+    cnt[thread]--;\n+  }\n+  bool test(node_t n) const {\n+    return !((bits[n/64] >> (n%64)) & 1LL);\n+  }\n+  u64 block(node_t n) const {\n+    return ~bits[n/64];\n+  }\n+};\n+\n+const static u64 CUCKOO_SIZE = SIZE >> IDXSHIFT;\n+const static u64 CUCKOO_MASK = CUCKOO_SIZE - 1;\n+// number of (least significant) key bits that survives leftshift by SIZESHIFT\n+const static u32 KEYBITS = 64-SIZESHIFT;\n+const static u64 KEYMASK = (1LL << KEYBITS) - 1;\n+const static u64 MAXDRIFT = 1LL << (KEYBITS - IDXSHIFT);\n+\n+class cuckoo_hash {\n+public:\n+  au64 *cuckoo;\n+\n+  cuckoo_hash(void *recycle) {\n+    cuckoo = (au64 *)recycle;\n+    memset(cuckoo, 0, CUCKOO_SIZE*sizeof(au64));\n+  }\n+  void set(node_t u, node_t v) {\n+    u64 niew = (u64)u << SIZESHIFT | v;\n+    for (node_t ui = u >> IDXSHIFT; ; ui = (ui+1) & CUCKOO_MASK) {\n+#if !defined(SINGLECYCLING) && defined(ATOMIC)\n+      u64 old = 0;\n+      if (cuckoo[ui].compare_exchange_strong(old, niew, std::memory_order_relaxed))\n+        return;\n+      if ((old >> SIZESHIFT) == (u & KEYMASK)) {\n+        cuckoo[ui].store(niew, std::memory_order_relaxed);\n+        return;\n+      }\n+#else\n+      u64 old = cuckoo[ui];\n+      if (old == 0 || (old >> SIZESHIFT) == (u & KEYMASK)) {\n+        cuckoo[ui] = niew;\n+        return;\n+      }\n+#endif\n+    }\n+  }\n+  node_t operator[](node_t u) const {\n+    for (node_t ui = u >> IDXSHIFT; ; ui = (ui+1) & CUCKOO_MASK) {\n+#if !defined(SINGLECYCLING) && defined(ATOMIC)\n+      u64 cu = cuckoo[ui].load(std::memory_order_relaxed);\n+#else\n+      u64 cu = cuckoo[ui];\n+#endif\n+      if (!cu)\n+        return 0;\n+      if ((cu >> SIZESHIFT) == (u & KEYMASK)) {\n+        assert(((ui - (u >> IDXSHIFT)) & CUCKOO_MASK) < MAXDRIFT);\n+        return (node_t)(cu & (SIZE-1));\n+      }\n+    }\n+  }\n+};\n+\n+class cuckoo_ctx {\n+public:\n+  siphash_keys sip_keys;\n+  shrinkingset *alive;\n+  twice_set *nonleaf;\n+  cuckoo_hash *cuckoo;\n+  nonce_t (*sols)[PROOFSIZE];\n+  u32 maxsols;\n+  au32 nsols;\n+  u32 nthreads;\n+  u32 ntrims;\n+  pthread_barrier_t barry;\n+\n+  cuckoo_ctx(u32 n_threads, u32 n_trims, u32 max_sols) {\n+    nthreads = n_threads;\n+    alive = new shrinkingset(nthreads);\n+    cuckoo = 0;\n+    nonleaf = new twice_set;\n+    ntrims = n_trims;\n+    int err = pthread_barrier_init(&barry, NULL, nthreads);\n+    assert(err == 0);\n+    sols = (nonce_t (*)[PROOFSIZE])calloc(maxsols = max_sols, PROOFSIZE*sizeof(nonce_t));\n+    assert(sols != 0);\n+    nsols = 0;\n+  }\n+  void setheadernonce(char* headernonce, const u32 len, const u32 nonce) {\n+    ((u32 *)headernonce)[len/sizeof(u32)-1] = htole32(nonce); // place nonce at end\n+    setheader(&sip_keys, headernonce);\n+    alive->clear(); // set all edges to be alive\n+    nsols = 0;\n+  }\n+  ~cuckoo_ctx() {\n+    delete alive;\n+    delete nonleaf;\n+    delete cuckoo;\n+  }\n+  void prefetch(const u64 *hashes, const u32 part) const {\n+    for (u32 i=0; i < NSIPHASH; i++) {\n+      u32 u = hashes[i] & NODEMASK;\n+      if ((u & PART_MASK) == part) {\n+        nonleaf->prefetch(u >> PART_MASK);\n+      }\n+    }\n+  }\n+  void node_deg(const u64 *hashes, const u32 nsiphash, const u32 part) const {\n+    for (u32 i=0; i < nsiphash; i++) {\n+      u32 u = hashes[i] & NODEMASK;\n+      if ((u & PART_MASK) == part) {\n+        nonleaf->set(u >>= PART_BITS);\n+      }\n+    }\n+  }\n+  void count_node_deg(const u32 id, const u32 uorv, const u32 part) {\n+    alignas(64) u64 indices[NSIPHASH];\n+    alignas(64) u64 hashes[NPREFETCH];\n+\n+    memset(hashes, 0, NPREFETCH * sizeof(u64)); // allow many nonleaf->set(0) to reduce branching\n+    u32 nidx = 0;\n+    for (nonce_t block = id*64; block < HALFSIZE; block += nthreads*64) {\n+      u64 alive64 = alive->block(block);\n+      for (nonce_t nonce = block-1; alive64; ) { // -1 compensates for 1-based ffs\n+        u32 ffs = __builtin_ffsll(alive64);\n+        nonce += ffs; alive64 >>= ffs;\n+        indices[nidx++ % NSIPHASH] = 2*nonce + uorv;\n+        if (nidx % NSIPHASH == 0) {\n+          node_deg(hashes+nidx-NSIPHASH, NSIPHASH, part);\n+          siphash24xN(&sip_keys, indices, hashes+nidx-NSIPHASH);\n+          prefetch(hashes+nidx-NSIPHASH, part);\n+          nidx %= NPREFETCH;\n+        }\n+        if (ffs & 64) break; // can't shift by 64\n+      }\n+    }\n+    node_deg(hashes, NPREFETCH, part);\n+    if (nidx % NSIPHASH != 0) {\n+      siphash24xN(&sip_keys, indices, hashes+(nidx&-NSIPHASH));\n+      node_deg(hashes+(nidx&-NSIPHASH), nidx%NSIPHASH, part);\n+    }\n+  }\n+  void kill(const u64 *hashes, const u64 *indices, const u32 nsiphash,\n+             const u32 part, const u32 id) const {\n+    for (u32 i=0; i < nsiphash; i++) {\n+      u32 u = hashes[i] & NODEMASK;\n+      if ((u & PART_MASK) == part && !nonleaf->test(u >> PART_BITS)) {\n+        alive->reset(indices[i]/2, id);\n+      }\n+    }\n+  }\n+  void kill_leaf_edges(const u32 id, const u32 uorv, const u32 part) {\n+    alignas(64) u64 indices[NPREFETCH];\n+    alignas(64) u64 hashes[NPREFETCH];\n+\n+    memset(hashes, 0, NPREFETCH * sizeof(u64)); // allow many nonleaf->test(0) to reduce branching\n+    u32 nidx = 0;\n+    for (nonce_t block = id*64; block < HALFSIZE; block += nthreads*64) {\n+      u64 alive64 = alive->block(block);\n+      for (nonce_t nonce = block-1; alive64; ) { // -1 compensates for 1-based ffs\n+        u32 ffs = __builtin_ffsll(alive64);\n+        nonce += ffs; alive64 >>= ffs;\n+        indices[nidx++] = 2*nonce + uorv;\n+        if (nidx % NSIPHASH == 0) {\n+          siphash24xN(&sip_keys, indices+nidx-NSIPHASH, hashes+nidx-NSIPHASH);\n+          prefetch(hashes+nidx-NSIPHASH, part);\n+          nidx %= NPREFETCH;\n+          kill(hashes+nidx, indices+nidx, NSIPHASH, part, id);\n+        }\n+        if (ffs & 64) break; // can't shift by 64\n+      }\n+    }\n+    const u32 pnsip = nidx & -NSIPHASH;\n+    if (pnsip != nidx) {\n+      siphash24xN(&sip_keys, indices+pnsip, hashes+pnsip);\n+    }\n+    kill(hashes, indices, nidx, part, id);\n+    const u32 nnsip = pnsip + NSIPHASH;\n+    kill(hashes+nnsip, indices+nnsip, NPREFETCH-nnsip, part, id);\n+  }\n+  void solution(node_t *us, u32 nu, node_t *vs, u32 nv) {\n+    typedef std::pair<node_t,node_t> edge;\n+    std::set<edge> cycle;\n+    u32 n = 0;\n+    cycle.insert(edge(*us, *vs));\n+    while (nu--)\n+      cycle.insert(edge(us[(nu+1)&~1], us[nu|1])); // u's in even position; v's in odd\n+    while (nv--)\n+      cycle.insert(edge(vs[nv|1], vs[(nv+1)&~1])); // u's in odd position; v's in even\n+  #ifdef ATOMIC\n+    u32 soli = std::atomic_fetch_add_explicit(&nsols, 1U, std::memory_order_relaxed);\n+  #else\n+    u32 soli = nsols++;\n+  #endif\n+    for (nonce_t block = 0; block < HALFSIZE; block += 64) {\n+      u64 alive64 = alive->block(block);\n+      for (nonce_t nonce = block-1; alive64; ) { // -1 compensates for 1-based ffs\n+        u32 ffs = __builtin_ffsll(alive64);\n+        nonce += ffs; alive64 >>= ffs;\n+        edge e(sipnode(&sip_keys, nonce, 0), sipnode(&sip_keys, nonce, 1));\n+        if (cycle.find(e) != cycle.end()) {\n+          sols[soli][n++] = nonce;\n+  #ifdef SHOWSOL\n+          printf(\"e(%x)=(%x,%x)%c\", nonce, e.first, e.second, n==PROOFSIZE?'\\n':' ');\n+  #endif\n+          if (PROOFSIZE > 2)\n+            cycle.erase(e);\n+        }\n+        if (ffs & 64) break; // can't shift by 64\n+      }\n+    }\n+    assert(n==PROOFSIZE);\n+  }\n+};\n+\n+typedef struct {\n+  u32 id;\n+  pthread_t thread;\n+  cuckoo_ctx *ctx;\n+} thread_ctx;\n+\n+void barrier(pthread_barrier_t *barry) {\n+  int rc = pthread_barrier_wait(barry);\n+  if (rc != 0 && rc != PTHREAD_BARRIER_SERIAL_THREAD) {\n+    printf(\"Could not wait on barrier\\n\");\n+    pthread_exit(NULL);\n+  }\n+}\n+\n+u32 path(cuckoo_hash &cuckoo, node_t u, node_t *us) {\n+  u32 nu;\n+  for (nu = 0; u; u = cuckoo[u]) {\n+    if (nu >= MAXCCPATHLEN) {\n+      while (nu-- && us[nu] != u) ;\n+      // if (!~nu)\n+      //   printf(\"maximum path length exceeded\\n\");\n+      // else printf(\"illegal %4d-cycle\\n\", MAXCCPATHLEN-nu);\n+      pthread_exit(NULL);\n+    }\n+    us[nu++] = u;\n+  }\n+  return nu-1;\n+}\n+\n+void *worker(void *vp) {\n+  thread_ctx *tp = (thread_ctx *)vp;\n+  cuckoo_ctx *ctx = tp->ctx;\n+\n+  shrinkingset *alive = ctx->alive;\n+  u32 load = 100LL * HALFSIZE / CUCKOO_SIZE;\n+  // if (tp->id == 0)\n+  //   printf(\"initial load %d%%\\n\", load);\n+  for (u32 round=1; round <= ctx->ntrims; round++) {\n+    // if (tp->id == 0) printf(\"round %2d partition loads\", round);\n+    for (u32 uorv = 0; uorv < 2; uorv++) {\n+      for (u32 part = 0; part <= PART_MASK; part++) {\n+        if (tp->id == 0)\n+          ctx->nonleaf->clear(); // clear all counts\n+        barrier(&ctx->barry);\n+        ctx->count_node_deg(tp->id,uorv,part);\n+        barrier(&ctx->barry);\n+        ctx->kill_leaf_edges(tp->id,uorv,part);\n+        barrier(&ctx->barry);\n+        // if (tp->id == 0) {\n+        //   u32 load = (u32)(100LL * alive->count() / CUCKOO_SIZE);\n+        //   printf(\" %c%d %4d%%\", \"UV\"[uorv], part, load);\n+        // }\n+      }\n+    }\n+    // if (tp->id == 0) printf(\"\\n\");\n+  }\n+  if (tp->id == 0) {\n+    load = (u32)(100LL * alive->count() / CUCKOO_SIZE);\n+    // printf(\"nonce %d: %d trims completed  final load %d%%\\n\", ctx->nonce, ctx->ntrims, load);\n+    if (load >= 90) {\n+      printf(\"overloaded! exiting...\");\n+      pthread_exit(NULL);\n+    }\n+    ctx->cuckoo = new cuckoo_hash(ctx->nonleaf->bits);\n+  }\n+#ifdef SINGLECYCLING\n+  else pthread_exit(NULL);\n+#else\n+  barrier(&ctx->barry);\n+#endif\n+  cuckoo_hash &cuckoo = *ctx->cuckoo;\n+  node_t us[MAXCCPATHLEN], vs[MAXCCPATHLEN];\n+#ifdef SINGLECYCLING\n+  for (nonce_t block = 0; block < HALFSIZE; block += 64) {\n+#else\n+  for (nonce_t block = tp->id*64; block < HALFSIZE; block += ctx->nthreads*64) {\n+#endif\n+    u64 alive64 = alive->block(block);\n+    for (nonce_t nonce = block-1; alive64; ) { // -1 compensates for 1-based ffs\n+      u32 ffs = __builtin_ffsll(alive64);\n+      nonce += ffs; alive64 >>= ffs;\n+      node_t u0=sipnode(&ctx->sip_keys, nonce, 0), v0=sipnode(&ctx->sip_keys, nonce, 1);\n+      if (u0) {// ignore vertex 0 so it can be used as nil for cuckoo[]\n+        u32 nu = path(cuckoo, u0, us), nv = path(cuckoo, v0, vs);\n+        if (us[nu] == vs[nv]) {\n+          u32 min = nu < nv ? nu : nv;\n+          for (nu -= min, nv -= min; us[nu] != vs[nv]; nu++, nv++) ;\n+          u32 len = nu + nv + 1;\n+          // printf(\"%4d-cycle found at %d:%d%%\\n\", len, tp->id, (u32)(nonce*100LL/HALFSIZE));\n+          if (len == PROOFSIZE && ctx->nsols < ctx->maxsols)\n+            ctx->solution(us, nu, vs, nv);\n+        } else if (nu < nv) {\n+          while (nu--)\n+            cuckoo.set(us[nu+1], us[nu]);\n+          cuckoo.set(u0, v0);\n+        } else {\n+          while (nv--)\n+            cuckoo.set(vs[nv+1], vs[nv]);\n+          cuckoo.set(v0, u0);\n+        }\n+      }\n+      if (ffs & 64) break; // can't shift by 64\n+    }\n+  }\n+  pthread_exit(NULL);\n+  return 0;\n+}\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa\n+\n+#endif  // BITCOIN_POW_CUCKOO_CYCLE_CUCKOO_MINER_H"
      },
      {
        "sha": "698cf25d79e98507eec61929ed2f9b8625c7f08d",
        "filename": "src/pow/cuckoo_cycle/osx_barrier.h",
        "status": "added",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/osx_barrier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/osx_barrier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/osx_barrier.h?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -0,0 +1,83 @@\n+#ifndef BITCOIN_POW_CUCKOO_CYCLE_OSX_BARRIER_H\n+#define BITCOIN_POW_CUCKOO_CYCLE_OSX_BARRIER_H\n+\n+#ifdef __APPLE__\n+\n+#ifndef PTHREAD_BARRIER_H_\n+#define PTHREAD_BARRIER_H_\n+\n+#include <pthread.h>\n+#include <errno.h>\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+typedef int pthread_barrierattr_t;\n+#define PTHREAD_BARRIER_SERIAL_THREAD 1\n+\n+typedef struct\n+{\n+    pthread_mutex_t mutex;\n+    pthread_cond_t cond;\n+    int count;\n+    int tripCount;\n+} pthread_barrier_t;\n+\n+\n+int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t *attr, unsigned int count)\n+{\n+    if(count == 0)\n+    {\n+        errno = EINVAL;\n+        return -1;\n+    }\n+    if(pthread_mutex_init(&barrier->mutex, 0) < 0)\n+    {\n+        return -1;\n+    }\n+    if(pthread_cond_init(&barrier->cond, 0) < 0)\n+    {\n+        pthread_mutex_destroy(&barrier->mutex);\n+        return -1;\n+    }\n+    barrier->tripCount = count;\n+    barrier->count = 0;\n+\n+    return 0;\n+}\n+\n+int pthread_barrier_destroy(pthread_barrier_t *barrier)\n+{\n+    pthread_cond_destroy(&barrier->cond);\n+    pthread_mutex_destroy(&barrier->mutex);\n+    return 0;\n+}\n+\n+int pthread_barrier_wait(pthread_barrier_t *barrier)\n+{\n+    pthread_mutex_lock(&barrier->mutex);\n+    ++(barrier->count);\n+    if(barrier->count >= barrier->tripCount)\n+    {\n+        barrier->count = 0;\n+        pthread_cond_broadcast(&barrier->cond);\n+        pthread_mutex_unlock(&barrier->mutex);\n+        return PTHREAD_BARRIER_SERIAL_THREAD;\n+    }\n+    else\n+    {\n+        pthread_cond_wait(&barrier->cond, &(barrier->mutex));\n+        pthread_mutex_unlock(&barrier->mutex);\n+        return 0;\n+    }\n+}\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa\n+\n+#endif  // PTHREAD_BARRIER_H_\n+#endif  // __APPLE__\n+\n+#endif  // BITCOIN_POW_CUCKOO_CYCLE_OSX_BARRIER_H"
      },
      {
        "sha": "3bd97f3d8d8b1f860ed2226e7c40ccd97973d0b8",
        "filename": "src/pow/cuckoo_cycle/siphash.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/siphash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4cbf16c32244dd166bd9be81513ce191670eeb/src/pow/cuckoo_cycle/siphash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/siphash.h?ref=7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "patch": "@@ -0,0 +1,80 @@\n+#ifndef INCLUDE_SIPHASH_H\n+#define INCLUDE_SIPHASH_H\n+#include <stdint.h> // for types uint32_t,uint64_t\n+#include <openssl/sha.h> // if openssl absent, use #include \"sha256.c\"\n+#include <immintrin.h>\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+// length of header hashed into siphash key\n+#ifndef HEADERLEN\n+#define HEADERLEN 80\n+#endif\n+\n+// save some keystrokes since i'm a lazy typer\n+typedef uint32_t u32;\n+typedef uint64_t u64;\n+\n+// siphash uses a pair of 64-bit keys,\n+typedef struct {\n+  u64 k0;\n+  u64 k1;\n+} siphash_keys;\n+\n+#define U8TO64_LE(p) \\\n+  (((u64)((p)[0])      ) | ((u64)((p)[1]) <<  8) | \\\n+   ((u64)((p)[2]) << 16) | ((u64)((p)[3]) << 24) | \\\n+   ((u64)((p)[4]) << 32) | ((u64)((p)[5]) << 40) | \\\n+   ((u64)((p)[6]) << 48) | ((u64)((p)[7]) << 56))\n+\n+#ifndef SHA256\n+#define SHA256(d, n, md) do { \\\n+    SHA256_CTX c; \\\n+    SHA256_Init(&c); \\\n+    SHA256_Update(&c, d, n); \\\n+    SHA256_Final(md, &c); \\\n+  } while (0)\n+#endif\n+\n+// derive siphash key from fixed length header\n+void setheader(siphash_keys *keys, const char *header) {\n+  unsigned char hdrkey[32];\n+  SHA256((unsigned char *)header, HEADERLEN, hdrkey);\n+  keys->k0 = U8TO64_LE(hdrkey);\n+  keys->k1 = U8TO64_LE(hdrkey+8);\n+}\n+\n+#define ROTL(x,b) (u64)( ((x) << (b)) | ( (x) >> (64 - (b))) )\n+#define SIPROUND \\\n+  do { \\\n+    v0 += v1; v2 += v3; v1 = ROTL(v1,13); \\\n+    v3 = ROTL(v3,16); v1 ^= v0; v3 ^= v2; \\\n+    v0 = ROTL(v0,32); v2 += v1; v0 += v3; \\\n+    v1 = ROTL(v1,17);   v3 = ROTL(v3,21); \\\n+    v1 ^= v2; v3 ^= v0; v2 = ROTL(v2,32); \\\n+  } while(0)\n+\n+// SipHash-2-4 specialized to precomputed key and 8 byte nonces\n+u64 siphash24(const siphash_keys *keys, const u64 nonce) {\n+  u64 v0 = keys->k0 ^ 0x736f6d6570736575ULL, v1 = keys->k1 ^ 0x646f72616e646f6dULL,\n+      v2 = keys->k0 ^ 0x6c7967656e657261ULL, v3 = keys->k1 ^ 0x7465646279746573ULL ^ nonce;\n+  SIPROUND; SIPROUND;\n+  v0 ^= nonce;\n+  v2 ^= 0xff;\n+  SIPROUND; SIPROUND; SIPROUND; SIPROUND;\n+  return (v0 ^ v1) ^ (v2  ^ v3);\n+}\n+\n+#define NSIPHASH 1\n+\n+inline void siphash24xN(const siphash_keys *keys, const u64 *indices, u64 * hashes) {\n+  *hashes = siphash24(keys, *indices);\n+}\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa\n+\n+#endif // ifdef INCLUDE_SIPHASH_H"
      }
    ]
  },
  {
    "sha": "94f170c4807fd1326187042169552bc0fc17be00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGYxNzBjNDgwN2ZkMTMyNjE4NzA0MjE2OTU1MmJjMGZjMTdiZTAw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-11T09:22:21Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "Added wrapper around cuckoo cycle code.",
      "tree": {
        "sha": "f33e1a27a113aa181cd84a5a0a2ff44c060025d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f33e1a27a113aa181cd84a5a0a2ff44c060025d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94f170c4807fd1326187042169552bc0fc17be00",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyKlEA//VTnoDg1K4pSBpymEjOAWGY7ZB+uPnA9eeaUBRSYiliuavSHLdT0mNtWa\nnb7daN2mX92zBpMJDCbf0Zs7gWPlCFQR9769B3kF5HHdcty/f1L8GuG2SMS6Se3T\nKDsB8fmcecPfGoxbv4WXcnlRNAWCtXovr1oGnFNj6DZpiIwNAt1qdR/ZL4lgkLc9\nV/90Kio1X8CII+XKK8xYGWJOEhKombguDGfeuu0xs15q3/0+zid64Tkt2TKXhMk0\nBKRFDrIwXvkMu+/b+LKdg5cGQJmJ4dQO27Dvo3bxW6lgArooCGT97qncWcsaLD+P\nBMbvYE7eI0RwkO0H4/OipdcTQfB7daPt/7il54LEIWDnBcwq4LUbu1YYzaJNBUXY\nsbtilSS3TP8Mf4obwZs0yUUMnF2H/iUZxpYl9gllRUzHEQwTL0T1e0pkABE3I2gm\nB5Tfef8bXjWqP4bbIHoceIioGaQKVSnFjLscMFFo5jVyc7HTtEVBv7io98XLlJiB\nqVQ1X9rwDDafaU+jotIjw5OC4aCFKKuR0N5wgbsFh0wTz8pgw2a2eEd4soihVtIO\nEUgal1GBvdYtgRj8lZDEb/gID2YJLTr02EOcrRfaT+M/e2Ozo5RkrgHkvx2LrWYx\nnOmMbj49Upd5w0ePZYyhsFclRoCvU6yMpPlTaWbYhNj0o3zrrMM=\n=qLdo\n-----END PGP SIGNATURE-----",
        "payload": "tree f33e1a27a113aa181cd84a5a0a2ff44c060025d0\nparent 7f4cbf16c32244dd166bd9be81513ce191670eeb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1491902541 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\nAdded wrapper around cuckoo cycle code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f170c4807fd1326187042169552bc0fc17be00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94f170c4807fd1326187042169552bc0fc17be00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f170c4807fd1326187042169552bc0fc17be00/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4cbf16c32244dd166bd9be81513ce191670eeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f4cbf16c32244dd166bd9be81513ce191670eeb"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 237,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d0a487bc4098da70a6b5d3d7fb34bd606940a8d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f170c4807fd1326187042169552bc0fc17be00/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f170c4807fd1326187042169552bc0fc17be00/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=94f170c4807fd1326187042169552bc0fc17be00",
        "patch": "@@ -121,6 +121,7 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n+  pow/cuckoo_cycle/cuckoo_cycle.h \\\n   pow/cuckoo_cycle/cuckoo_miner.h \\\n   pow/cuckoo_cycle/cuckoo.h \\\n   pow/cuckoo_cycle/siphash.h \\\n@@ -322,6 +323,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n+  pow/cuckoo_cycle/cuckoo_cycle.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/sign.cpp \\"
      },
      {
        "sha": "cf3b8aa0982ebc6ef099d7b9497df49511de1238",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f170c4807fd1326187042169552bc0fc17be00/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f170c4807fd1326187042169552bc0fc17be00/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.cpp?ref=94f170c4807fd1326187042169552bc0fc17be00",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"cuckoo_cycle.h\"\n+\n+#include <algorithm>\n+\n+#include \"../random.h\"\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+int cuckoo_cycle::last_err = POW_OK;\n+\n+cuckoo_cycle::~cuckoo_cycle() {\n+    if (thread) {\n+        if (state == state_running) {\n+            state = state_term;\n+            thread->join();\n+        }\n+        delete thread;\n+        thread = nullptr;\n+    }\n+}\n+\n+void cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n+    assert(state == state_ready || state == state_paused);\n+    if (state == state_ready && !fZeroStartingNonce) {\n+        // randomize nonce\n+        GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+    }\n+    state = state_running;\n+    ticks_left = ticks;\n+    if (c->params.size() != HEADERLEN - 4) {\n+        c->params.resize(HEADERLEN - 4);\n+    }\n+    if (background) {\n+        thread = new std::thread(&cuckoo_cycle::solve_async, this, threads ?: 1);\n+    } else {\n+        solve_async(threads ?: 1);\n+    }\n+}\n+\n+void cuckoo_cycle::abort() {\n+    if (state != state_running) return;\n+    state = state_term;\n+    thread->join();\n+}\n+\n+void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n+    int ntrims = 1 + (PART_BITS+3)*(PART_BITS+4)/2;\n+    int nonce  = next_nonce;\n+    thread_ctx* threads = new thread_ctx[thread_count];\n+    assert(threads);\n+    size_t wx = std::min((size_t)80, c->params.size() + 4);\n+    char* ws = new char[wx];\n+    memcpy(ws, &c->params[0], c->params.size());\n+    ctx = new cuckoo_ctx(thread_count, ntrims, 8, c->proofsize_min, c->proofsize_max);\n+    while (state == state_running) {\n+        ctx->setheadernonce(ws, wx, nonce);\n+        for (uint32_t t = 0; t < thread_count; t++) {\n+            threads[t].id = t;\n+            threads[t].ctx = ctx;\n+            int err = pthread_create(&threads[t].thread, nullptr, worker, (void*)&threads[t]);\n+            assert(err == 0);\n+        }\n+        for (uint32_t t = 0; t < thread_count; t++) {\n+            int err = pthread_join(threads[t].thread, nullptr);\n+            assert(err == 0);\n+        }\n+        // if we are aborted due to deallocation we don't want to talk to callback\n+        // even if we have solutions, so we break on term\n+        if (state != state_running) break;\n+        for (unsigned s = 0; s < ctx->nsols; s++) {\n+            nonce_t proofsize = ctx->sols[s][ctx->proofsize_max];\n+            printf(\"- solution with proofsize = %u found for nonce = %d\\n\", proofsize, nonce);\n+            solution_ref sol(new solution());\n+            sol->params.resize(4 * (1 + proofsize));\n+            SetNonce(sol, nonce);\n+            SetKeys(sol, ctx->sols[s], proofsize);\n+            if (cb->found_solution(*this, c, sol)) {\n+                state = state_stopped;\n+                break;\n+            }\n+        }\n+        nonce++;\n+        ticks_left -= ticks_left > -1;\n+        if (ticks_left == 0) state = state_paused;\n+    }\n+    if (state == state_term) state = state_aborted;\n+    delete ctx;\n+    delete [] ws;\n+    delete [] threads;\n+    next_nonce = nonce;\n+}\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa"
      },
      {
        "sha": "e1ab830476a249c39629b5fc72fce1b7a8e8110e",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f170c4807fd1326187042169552bc0fc17be00/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f170c4807fd1326187042169552bc0fc17be00/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.h?ref=94f170c4807fd1326187042169552bc0fc17be00",
        "patch": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POW_CUCKOO_CYCLE_H\n+#define BITCOIN_POW_CUCKOO_CYCLE_H\n+\n+#include <thread>\n+\n+#include \"pow/pow.h\"\n+#include \"cuckoo_miner.h\"\n+\n+namespace powa {\n+\n+namespace cuckoo_cycle {\n+\n+class cc_challenge;\n+\n+typedef std::shared_ptr<cc_challenge> cc_challenge_ref;\n+\n+class cc_challenge : public challenge {\n+public:\n+    using challenge::challenge;\n+    uint8_t sizeshift;\n+    uint16_t proofsize_min;\n+    uint16_t proofsize_max;\n+\n+    cc_challenge() : challenge() {\n+        config.params.resize(5);\n+        uint8_t* configb = &config.params[0];\n+        *configb = sizeshift = SIZESHIFT;\n+        configb += 1;\n+        *(uint16_t*)configb = proofsize_min = 12;\n+        configb += 2;\n+        *(uint16_t*)configb = proofsize_max = 228;\n+    }\n+\n+    cc_challenge(const challenge& other) : challenge(other) {\n+        assert(config.params.size() == 5);\n+        uint8_t* configb = &config.params[0];\n+        sizeshift = *configb;\n+        // TODO: deal with the fact we don't support certain size shifts; currently this is ignored\n+        configb += 1;\n+        proofsize_min = *(uint16_t*)configb;\n+        configb += 2;\n+        proofsize_max = *(uint16_t*)configb;\n+        // TODO: validate proofsizes; must be even, max must >= min, ...\n+    }\n+\n+    static cc_challenge_ref random_challenge(const uint8_t len = HEADERLEN - 4) {\n+        cc_challenge* c = new cc_challenge();\n+        c->params.resize(len);\n+        c->randomize(c->params.size());\n+        return cc_challenge_ref(c);\n+    }\n+\n+    cc_challenge& operator=(const cc_challenge& other) {\n+        params = other.params;\n+        return *this;\n+    }\n+\n+    bool operator==(const cc_challenge& other) const {\n+        return !memcmp(&params[0], &other.params[0], params.size());\n+    }\n+};\n+\n+inline uint32_t GetNonce(solution_ref& s) { return *(uint32_t*)&s->params[0]; }\n+inline uint32_t* GetKeys(solution_ref& s) { return &((uint32_t*)&s->params[0])[1]; }\n+inline void SetNonce(solution_ref& s, uint32_t nonce) { memcpy(&s->params[0], &nonce, 4); }\n+inline void SetKeys(solution_ref& s, uint32_t* keys, uint16_t count) { memcpy(&s->params[4], keys, count * 4); }\n+\n+class cuckoo_cycle : public pow {\n+public:\n+    std::thread* thread;\n+    cc_challenge_ref c;\n+    cuckoo_ctx* ctx;\n+    int next_nonce;\n+    static int last_err;               ///< last error after call to is_valid()\n+    cuckoo_cycle(cc_challenge_ref c_in, callback_ref cb_in = nullptr) : pow(POWID_CUCKOO_CYCLE, c_in, cb_in), thread(nullptr), c(c_in), next_nonce(0) {}\n+    ~cuckoo_cycle();\n+\n+    std::string last_error_string() {\n+        return errstr[last_err];\n+    }\n+\n+    bool is_valid(solution& s) const override {\n+        if (s.params.size() < size_t(1 + c->proofsize_min) * 4 ||\n+            s.params.size() > size_t(1 + c->proofsize_max) * 4) {\n+            return false; // 1 nonce + edges, all 32 bit\n+        }\n+        u32* values = (u32*)&s.params[0];\n+        u32 nonce = values[0];\n+        u32* keys = &values[1];\n+        uint16_t proofsize = (s.params.size() >> 2) - 1;\n+        printf(\"CC is_valid(): nonce=%u, proofsize=%u\\n\", nonce, proofsize);\n+\n+        char headernonce[HEADERLEN];\n+        u32 hdrlen = c.get()->params.size();\n+        memcpy(headernonce, &c.get()->params[0], hdrlen);\n+        if (hdrlen < sizeof(headernonce)) memset(headernonce + hdrlen, 0, sizeof(headernonce) - hdrlen);\n+        ((u32 *)headernonce)[HEADERLEN/sizeof(u32)-1] = htole32(nonce);\n+\n+        last_err = verify(keys, headernonce, HEADERLEN, proofsize);\n+        return (last_err == POW_OK);\n+    }\n+\n+    void set_output(solution& s, std::vector<uint8_t>& output) override {\n+        // the output for a CC POW is the solution in full\n+        output.resize(s.params.size());\n+        memcpy(&output[0], &s.params[0], s.params.size());\n+    }\n+\n+    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override;\n+\n+    int64_t expected_iteration_cycles() const override { return 150000000000; }\n+    int64_t expected_invprob()          const override {\n+        // we require 12/228 at this point, or we expect a 1/999 probability of solving\n+        return c->proofsize_min == 12 && c->proofsize_max == 228 ? 1 : 999;\n+    }\n+\n+    void abort() override;\n+\n+    virtual std::string to_string() const override {\n+        return strprintf(\"Cuckoo-Cycle<%p; ps=[%u, %u]>\", this, c->proofsize_min, c->proofsize_max);\n+    }\n+private:\n+    void solve_async(uint32_t thread_count);\n+};\n+\n+}  // namespace cuckoo_cycle\n+\n+}  // namespace powa\n+\n+#endif  // BITCOIN_POW_CUCKOO_CYCLE_H"
      }
    ]
  },
  {
    "sha": "caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWZmMTRhYjIyMGZiMmRkM2IwZWE0NWI1NmU3YTI0ZmYxNGFiYTVk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-11T09:23:24Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "Added SHA256 POW.",
      "tree": {
        "sha": "7138895497b299ae9f54327bba28842dd2179bd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7138895497b299ae9f54327bba28842dd2179bd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyLdUw/9Fb/EnkzCBPUfZVLBus34AQXp6Tfn9DexjwhhUzsdmH1Yh7k2XcJKqhM+\niy04XpP2A9ukvG0z9voSJcBR8Cv0RYcap74ditm3vrR+FClYfhmW7Cj2ALJJRypn\nH8HqpR6VFXV2TQ1O4sBoOXU7oe6rE9JMxczHS9NTiFU3D5b6f5g7yG3/IW4hgz5/\nrHmc+0MuNPiE+4Iek6NfMLPaqatSr4/sgiRZW59/FSSfX6FBj+h6e2HY/ElB9qP9\nwLvleb41CuDY0GfUizeBVopwttu62t54ntO3/gtdUvaBHY/Vfbt6qo6hhL08FjIl\nQ+Jp4GfarfHeI7vbQwOdtxKlmncaKhA4wk5p13TNOGZnFkZgk3oQLWypAiEjaZxa\nF/cD0krx68UyNrufxZ9VBxbME4oHS12Yvt8oMGPODGjbD73LjxIW3rFmCvVuWT1J\nv0PXqatNS4YjqA0nuHwKdb+Fz4oSzFxCnGMcYIKcffIYZ9qDy9ciE6X47ZYzUj9+\njwSC/NCZ3FBRSLWvPkmRJrXT7/IUzVLGsSSqGn2HvooW27FgPmJmsDxfXkrOMjup\n0of9vNuup50bWnxHoBfOIeH37rUBPqaQRINZA0kwmr6wYrPP+o3mI8fdcOB8jfli\nN1T50pHzcq/b1oU6UZc3by5v4Xh4aOeKKZpgmG6gI3fX7A59m0c=\n=zq6K\n-----END PGP SIGNATURE-----",
        "payload": "tree 7138895497b299ae9f54327bba28842dd2179bd1\nparent 94f170c4807fd1326187042169552bc0fc17be00\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1491902604 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\nAdded SHA256 POW.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94f170c4807fd1326187042169552bc0fc17be00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f170c4807fd1326187042169552bc0fc17be00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94f170c4807fd1326187042169552bc0fc17be00"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 164,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a022a600db3310b1c632b4a747fdcc20d2cbaaee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
        "patch": "@@ -126,6 +126,7 @@ BITCOIN_CORE_H = \\\n   pow/cuckoo_cycle/cuckoo.h \\\n   pow/cuckoo_cycle/siphash.h \\\n   pow/pow.h \\\n+  pow/sha256/sha256.h \\\n   pow.h \\\n   protocol.h \\\n   random.h \\"
      },
      {
        "sha": "68f17fe87c1b5b802566de16e017c4528e77a0f3",
        "filename": "src/pow/sha256/sha256.h",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d/src/pow/sha256/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d/src/pow/sha256/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/sha256/sha256.h?ref=caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
        "patch": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POW_SHA256_H\n+#define BITCOIN_POW_SHA256_H\n+\n+#include <algorithm>\n+\n+#include \"crypto/sha256.h\"\n+#include \"arith_uint256.h\"\n+#include \"uint256.h\"\n+#include \"pow/pow.h\"\n+\n+namespace powa {\n+\n+class sha256;\n+typedef std::shared_ptr<sha256> sha256_ref;\n+\n+class sha256challenge : public challenge {\n+public:\n+    using challenge::challenge;\n+    uint32_t compact_target;\n+    uint8_t nonce_size;\n+    uint32_t nonce_offset;\n+    sha256challenge(const challenge& other) : challenge(other) {\n+        assert(config.params.size() == 9);\n+        uint8_t* configb = &config.params[0];\n+        compact_target = *(uint32_t*)configb;\n+        configb += 4;\n+        nonce_size = configb[0];\n+        configb++;\n+        nonce_offset = *(uint32_t*)configb;\n+    }\n+    sha256challenge(const uint32_t compact_target_in, const uint8_t nonce_size_in, const uint32_t nonce_offset_in, const uint32_t size) {\n+        compact_target = compact_target_in;\n+        nonce_size = nonce_size_in;\n+        nonce_offset = nonce_offset_in;\n+        uint32_t realsize = std::max(nonce_size_in + nonce_offset_in, size);\n+        params.resize(realsize);\n+        config.params.resize(9);\n+        uint8_t* configb = &config.params[0];\n+        *(uint32_t*)configb = compact_target;\n+        configb += 4;\n+        configb[0] = nonce_size;\n+        configb++;\n+        *(uint32_t*)configb = nonce_offset;\n+    }\n+    static challenge_ref random_challenge(const uint32_t compact_target_in, const uint8_t nonce_size_in, const uint32_t nonce_offset_in, const uint32_t size) {\n+        sha256challenge* c = new sha256challenge(compact_target_in, nonce_size_in, nonce_offset_in, size);\n+        c->randomize(c->params.size());\n+        return challenge_ref(c);\n+    }\n+};\n+\n+class sha256 : public pow {\n+public:\n+    uint64_t next_nonce;\n+    sha256challenge* sc;\n+    sha256(challenge_ref c_in, callback_ref cb_in = nullptr) : pow(POWID_SHA256, c_in, cb_in), next_nonce(0), sc((sha256challenge*)c_in.get()) {}\n+\n+    uint256 get_hash(solution& s) const {\n+        // two modes: if nonce_size is 0 we simply append, otherwise we expect\n+        // the solution to be the size of the nonce only\n+        uint32_t size;\n+        uint8_t* data;\n+        if (sc->nonce_size == 0) {\n+            // append\n+            size = sc->params.size() + s.params.size();\n+            data = new uint8_t[size];\n+            memcpy(data, &sc->params[0], sc->params.size());\n+            memcpy(&data[sc->params.size()], &s.params[0], s.params.size());\n+        } else {\n+            // insert nonce only, retaining remaining challenge params\n+            if (s.params.size() != sc->nonce_size) return uint256();\n+            size = std::max(uint32_t(sc->nonce_offset + sc->nonce_size), uint32_t(sc->params.size()));\n+            data = new uint8_t[size];\n+            memcpy(data, &sc->params[0], sc->params.size());\n+            memcpy(&data[sc->nonce_offset], &s.params[0], s.params.size());\n+        }\n+        uint256 hash;\n+        CSHA256().Write(data, size).Finalize(hash.begin());\n+        delete [] data;\n+        return hash;\n+    }\n+\n+    bool is_valid(solution& s) const override {\n+        uint256 hash = get_hash(s);\n+        arith_uint256 target;\n+        target.SetCompact(sc->compact_target);\n+        printf(\"sha256: is_valid():\\n\\t%s\\n>\\t%s\\n\", target.ToString().c_str(), hash.ToString().c_str());\n+        return target > UintToArith256(hash);\n+    }\n+\n+    void set_output(solution& s, std::vector<uint8_t>& output) override {\n+        // the output for a sha256 POW is the full hash\n+        output.resize(32);\n+        memcpy(&output[0], get_hash(s).begin(), 32);\n+    }\n+\n+    template<typename T>\n+    void solve_t(T startnonce) {\n+        CSHA256 sha;\n+        uint256 hash;\n+        arith_uint256 target;\n+\n+        uint32_t size = std::max(uint32_t(sc->nonce_offset + sc->nonce_size), uint32_t(sc->params.size()));\n+        uint8_t* data = new uint8_t[size];\n+        memcpy(data, &sc->params[0], sc->params.size());\n+        T& refnonce = *(T*)&data[sc->nonce_offset];\n+        target.SetCompact(sc->compact_target);\n+        bool satisfied = false;\n+        for (refnonce = startnonce; state == state_running && !satisfied && refnonce + 1 != startnonce; refnonce++) {\n+            sha.Write(data, size);\n+            sha.Finalize(hash.begin());\n+            sha.Reset();\n+            if (UintToArith256(hash) < target) {\n+                solution_ref s(new solution(refnonce));\n+                satisfied = cb->found_solution(*this, c, s);\n+            }\n+            ticks_left -= ticks_left > -1;\n+            if (ticks_left == 0) break; // ran out of ticks\n+        }\n+        next_nonce = refnonce;\n+        delete [] data;\n+        state = state == state_term ? state_aborted : state_stopped;\n+    }\n+\n+    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n+        assert(state == state_ready || state == state_paused);\n+        if (background || threads > 1) printf(\"warning: sha256 solver does not spawn threads\\n\");\n+        if (state == state_ready && sc->nonce_size > 0 && !fZeroStartingNonce) {\n+            // randomize nonce\n+            GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+        }\n+        state = state_running;\n+        ticks_left = ticks;\n+        solution_ref s(new solution());\n+        switch (sc->nonce_size) {\n+        case 0: if (is_valid(*s)) { cb->found_solution(*this, c, s); } return;\n+        case 4: solve_t((uint32_t)next_nonce); return;\n+        case 8: solve_t(next_nonce); return;\n+        default: return; // we don't support this nonce size\n+        }\n+    }\n+\n+    int64_t expected_iteration_cycles() const override { return 11000; }\n+\n+    int64_t expected_invprob() const override {\n+        arith_uint256 u;\n+        u.SetCompact(sc->compact_target);\n+        return 1.0 / u.GetProbabilityEstimate();\n+    }\n+\n+    virtual std::string to_string() const override {\n+        assert(sc == c.get());\n+        return strprintf(\"SHA256<%p; target = %x; params# = %lu>\", this, sc->compact_target, sc->params.size());\n+    }\n+};\n+\n+}  // namespace powa\n+\n+#endif  // BITCOIN_POW_SHA256_H"
      }
    ]
  },
  {
    "sha": "e141ca2149c171a4dc73660a5b53ebe2091c579a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTQxY2EyMTQ5YzE3MWE0ZGM3MzY2MGE1YjUzZWJlMjA5MWM1Nzlh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-11T09:50:39Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:05Z"
      },
      "message": "Modified base cuckoo cycle implementation for Bitcoin.",
      "tree": {
        "sha": "8a24a8974f36479b26267ede8d72229c98ca13e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a24a8974f36479b26267ede8d72229c98ca13e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e141ca2149c171a4dc73660a5b53ebe2091c579a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HkACgkQV692LbM1\nMyLbMg/6AnSUsLvWPY1L4nVYGF+U9o5ZzvckDl1rkvRN5ukc33JsSqbSwzEkN3mh\nXPhD+9gbNXiz+jiAgTOzS9PU+U3TVhnANQr5Xh5fZG30y4j5ht3dJltn8bL3Iggc\nhCHnKT60Act+QYHtM7tSRAd/NVxf9bwDhfTcRx4SgP1qLwvTGA/nS6HBRw95aPfG\nsayQscWgHHZHhEnDLIFmhUtWvZx02IkfJ66ZbqHiGBDxwAN6SH5s1b0EM7k5dAEg\nYsU+AETDC4y2juYJTFlOZBbhrUWV8ilBC3Ysz0to9T5+Sv0f0f+lX/iGkbLteXYI\nuFzdOmj18eVOuCshxtk6QmCOOap8aN2woRd3+YjBppedPCQGVtFlrcRjEkgwDGTk\n6fg51BC1Zu0E6lQOUUq0PZkk9nsZ5q/tgR4IC7QDrAM1ZXeTPjktLSF/D9slJh+v\nh1CNFwkzRgUvNNJgut9Ndg29CHNG/2PkegD1Md2dUQQ8p0J75kDxxFBFPUxwCvct\nrOfwOC/hampPFL9jXfKMxungz/hlBWWKqrd8XsRof/egSyvb2io0699qUDlk0UTY\nP1303EeVIOmDe1nLsUEdrOmIfQh3SM84jjYgKzh/ededGEA3xVc2s4PZu++GDIK3\nyxhnwxTeDlK7mI0jqcZEfa4y+/Il5yH/EzqSQd213XbxH9vgO84=\n=v9GO\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a24a8974f36479b26267ede8d72229c98ca13e6\nparent caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1491904239 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920505 +0900\n\nModified base cuckoo cycle implementation for Bitcoin.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141ca2149c171a4dc73660a5b53ebe2091c579a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e141ca2149c171a4dc73660a5b53ebe2091c579a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141ca2149c171a4dc73660a5b53ebe2091c579a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caff14ab220fb2dd3b0ea45b56e7a24ff14aba5d"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 64,
      "deletions": 54
    },
    "files": [
      {
        "sha": "0ba5fcc2e98985c0011c25623dc2f21e5eaeaaff",
        "filename": "src/pow/cuckoo_cycle/cuckoo.h",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/cuckoo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/cuckoo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo.h?ref=e141ca2149c171a4dc73660a5b53ebe2091c579a",
        "patch": "@@ -7,14 +7,10 @@\n #include <stdint.h> // for types uint32_t,uint64_t\n #include <string.h> // for functions strlen, memset\n #include \"siphash.h\"\n-// both cuckoo.c and cuckoo_miner.h need htole32\n+#include \"compat/endian.h\"\n+\n #ifdef __APPLE__\n #include \"osx_barrier.h\"\n-#include <machine/endian.h>\n-#include <libkern/OSByteOrder.h>\n-#define htole32(x) OSSwapHostToLittleInt32(x)\n-#else\n-#include <endian.h>\n #endif\n \n namespace powa {\n@@ -25,12 +21,7 @@ namespace cuckoo_cycle {\n #ifndef SIZESHIFT\n // the main parameter is the 2log of the graph size,\n // which is the size in bits of the node identifiers\n-#define SIZESHIFT 20\n-#endif\n-#ifndef PROOFSIZE\n-// the next most important parameter is (even) length\n-// of the cycle to be found. a minimum of 12 is recommended\n-#define PROOFSIZE 42\n+#define SIZESHIFT 28\n #endif\n \n // the graph size / number of nodes\n@@ -41,49 +32,66 @@ static const u64 HALFSIZE = SIZE/2;\n static const u64 NODEMASK = HALFSIZE-1;\n \n // generate edge endpoint in cuckoo graph without partition bit\n-u64 _sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n+inline u64 _sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n   return siphash24(keys, 2*nonce + uorv) & NODEMASK;\n }\n \n // generate edge endpoint in cuckoo graph\n-u64 sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n+inline u64 sipnode(siphash_keys *keys, u64 nonce, u32 uorv) {\n   return _sipnode(keys, nonce, uorv) << 1 | uorv;\n }\n \n enum verify_code { POW_OK, POW_HEADER_LENGTH, POW_TOO_BIG, POW_TOO_SMALL, POW_NON_MATCHING, POW_BRANCH, POW_DEAD_END, POW_SHORT_CYCLE};\n-const char *errstr[] = { \"OK\", \"wrong header length\", \"proof too big\", \"proof too small\", \"endpoints don't match up\", \"branch in cycle\", \"cycle dead ends\", \"cycle too short\"};\n+static const char *errstr[] = { \"OK\", \"wrong header length\", \"proof too big\", \"proof too small\", \"endpoints don't match up\", \"branch in cycle\", \"cycle dead ends\", \"cycle too short\"};\n \n // verify that nonces are ascending and form a cycle in header-generated graph\n-int verify(u32 nonces[PROOFSIZE], const char *headernonce, const u32 headerlen) {\n+inline int verify(u32* nonces, const char *headernonce, const u32 headerlen, const uint16_t proofsize) {\n   if (headerlen != HEADERLEN)\n     return POW_HEADER_LENGTH;\n   siphash_keys keys;\n   setheader(&keys, headernonce);\n-  u32 uvs[2*PROOFSIZE];\n+  u32* uvs = new u32[2*proofsize];\n   u32 xor0=0,xor1=0;\n-  for (u32 n = 0; n < PROOFSIZE; n++) {\n-    if (nonces[n] >= HALFSIZE)\n-      return POW_TOO_BIG;\n-    if (n && nonces[n] <= nonces[n-1])\n-      return POW_TOO_SMALL;\n-    xor0 ^= uvs[2*n  ] = sipnode(&keys, nonces[n], 0);\n-    xor1 ^= uvs[2*n+1] = sipnode(&keys, nonces[n], 1);\n+  int err = POW_OK;\n+  for (u32 n = 0; err == POW_OK && n < proofsize; n++) {\n+    if (nonces[n] >= HALFSIZE) {\n+      err = POW_TOO_BIG;\n+    } else if (n && nonces[n] <= nonces[n-1]) {\n+      err = POW_TOO_SMALL;\n+    } else {\n+      xor0 ^= uvs[2*n  ] = sipnode(&keys, nonces[n], 0);\n+      xor1 ^= uvs[2*n+1] = sipnode(&keys, nonces[n], 1);\n+    }\n   }\n-  if (xor0|xor1)                        // matching endpoints imply zero xors\n+  if (err != POW_OK) {\n+    delete [] uvs;\n+    return err;\n+  }\n+  if (xor0|xor1) {                      // matching endpoints imply zero xors\n+    delete [] uvs;\n     return POW_NON_MATCHING;\n+  }\n   u32 n = 0, i = 0, j;\n   do {                        // follow cycle\n-    for (u32 k = j = i; (k = (k+2) % (2*PROOFSIZE)) != i; ) {\n+    for (u32 k = j = i; (k = (k+2) % (2*proofsize)) != i; ) {\n       if (uvs[k] == uvs[i]) { // find other edge endpoint identical to one at i\n-        if (j != i)           // already found one before\n+        if (j != i) {          // already found one before\n+          delete [] uvs;\n           return POW_BRANCH;\n+        }\n         j = k;\n       }\n-    } if (j == i) return POW_DEAD_END;  // no matching endpoint\n+    }\n+    if (j == i) {\n+      // no matching endpoint\n+      delete [] uvs;\n+      return POW_DEAD_END;\n+    }\n     i = j^1;\n     n++;\n   } while (i != 0);           // must cycle back to start or we would have found branch\n-  return n == PROOFSIZE ? POW_OK : POW_SHORT_CYCLE;\n+  delete [] uvs;\n+  return n == proofsize ? POW_OK : POW_SHORT_CYCLE;\n }\n \n }  // namespace cuckoo_cycle"
      },
      {
        "sha": "045250a5a93db4bf1a201379800df83d5d663ef5",
        "filename": "src/pow/cuckoo_cycle/cuckoo_miner.h",
        "status": "modified",
        "additions": 20,
        "deletions": 12,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_miner.h?ref=e141ca2149c171a4dc73660a5b53ebe2091c579a",
        "patch": "@@ -225,22 +225,27 @@ class cuckoo_ctx {\n   shrinkingset *alive;\n   twice_set *nonleaf;\n   cuckoo_hash *cuckoo;\n-  nonce_t (*sols)[PROOFSIZE];\n+  nonce_t **sols;\n   u32 maxsols;\n   au32 nsols;\n   u32 nthreads;\n   u32 ntrims;\n+  uint16_t proofsize_min;\n+  uint16_t proofsize_max;\n   pthread_barrier_t barry;\n \n-  cuckoo_ctx(u32 n_threads, u32 n_trims, u32 max_sols) {\n+  cuckoo_ctx(u32 n_threads, u32 n_trims, u32 max_sols, uint16_t proofsize_min_in, uint16_t proofsize_max_in) {\n+    proofsize_min = proofsize_min_in;\n+    proofsize_max = proofsize_max_in;\n     nthreads = n_threads;\n     alive = new shrinkingset(nthreads);\n     cuckoo = 0;\n     nonleaf = new twice_set;\n     ntrims = n_trims;\n     int err = pthread_barrier_init(&barry, NULL, nthreads);\n     assert(err == 0);\n-    sols = (nonce_t (*)[PROOFSIZE])calloc(maxsols = max_sols, PROOFSIZE*sizeof(nonce_t));\n+    sols = (nonce_t**)calloc(maxsols = max_sols, sizeof(nonce_t*));\n+    for (u32 i = 0; i < max_sols; i++) sols[i] = (nonce_t*)calloc(proofsize_max + 1, sizeof(nonce_t));\n     assert(sols != 0);\n     nsols = 0;\n   }\n@@ -254,6 +259,8 @@ class cuckoo_ctx {\n     delete alive;\n     delete nonleaf;\n     delete cuckoo;\n+    for (u32 i = 0; i < maxsols; i++) free(sols[i]);\n+    free(sols);\n   }\n   void prefetch(const u64 *hashes, const u32 part) const {\n     for (u32 i=0; i < NSIPHASH; i++) {\n@@ -336,7 +343,7 @@ class cuckoo_ctx {\n     const u32 nnsip = pnsip + NSIPHASH;\n     kill(hashes+nnsip, indices+nnsip, NPREFETCH-nnsip, part, id);\n   }\n-  void solution(node_t *us, u32 nu, node_t *vs, u32 nv) {\n+  void solution(node_t *us, u32 nu, node_t *vs, u32 nv, uint16_t proofsize) {\n     typedef std::pair<node_t,node_t> edge;\n     std::set<edge> cycle;\n     u32 n = 0;\n@@ -359,15 +366,16 @@ class cuckoo_ctx {\n         if (cycle.find(e) != cycle.end()) {\n           sols[soli][n++] = nonce;\n   #ifdef SHOWSOL\n-          printf(\"e(%x)=(%x,%x)%c\", nonce, e.first, e.second, n==PROOFSIZE?'\\n':' ');\n+          printf(\"e(%x)=(%x,%x)%c\", nonce, e.first, e.second, n == proofsize?'\\n':' ');\n   #endif\n-          if (PROOFSIZE > 2)\n+          if (proofsize_min > 2)\n             cycle.erase(e);\n         }\n         if (ffs & 64) break; // can't shift by 64\n       }\n     }\n-    assert(n==PROOFSIZE);\n+    assert(n == proofsize);\n+    sols[soli][proofsize_max] = n; // store actual proofsize as last entry in solution\n   }\n };\n \n@@ -377,15 +385,15 @@ typedef struct {\n   cuckoo_ctx *ctx;\n } thread_ctx;\n \n-void barrier(pthread_barrier_t *barry) {\n+inline void barrier(pthread_barrier_t *barry) {\n   int rc = pthread_barrier_wait(barry);\n   if (rc != 0 && rc != PTHREAD_BARRIER_SERIAL_THREAD) {\n     printf(\"Could not wait on barrier\\n\");\n     pthread_exit(NULL);\n   }\n }\n \n-u32 path(cuckoo_hash &cuckoo, node_t u, node_t *us) {\n+inline u32 path(cuckoo_hash &cuckoo, node_t u, node_t *us) {\n   u32 nu;\n   for (nu = 0; u; u = cuckoo[u]) {\n     if (nu >= MAXCCPATHLEN) {\n@@ -400,7 +408,7 @@ u32 path(cuckoo_hash &cuckoo, node_t u, node_t *us) {\n   return nu-1;\n }\n \n-void *worker(void *vp) {\n+inline void *worker(void *vp) {\n   thread_ctx *tp = (thread_ctx *)vp;\n   cuckoo_ctx *ctx = tp->ctx;\n \n@@ -460,8 +468,8 @@ void *worker(void *vp) {\n           for (nu -= min, nv -= min; us[nu] != vs[nv]; nu++, nv++) ;\n           u32 len = nu + nv + 1;\n           // printf(\"%4d-cycle found at %d:%d%%\\n\", len, tp->id, (u32)(nonce*100LL/HALFSIZE));\n-          if (len == PROOFSIZE && ctx->nsols < ctx->maxsols)\n-            ctx->solution(us, nu, vs, nv);\n+          if (len >= ctx->proofsize_min && len <= ctx->proofsize_max && ctx->nsols < ctx->maxsols)\n+            ctx->solution(us, nu, vs, nv, len);\n         } else if (nu < nv) {\n           while (nu--)\n             cuckoo.set(us[nu+1], us[nu]);"
      },
      {
        "sha": "d8510136a7beea0cf0a38fc58c1f08e01102ca0a",
        "filename": "src/pow/cuckoo_cycle/siphash.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/siphash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141ca2149c171a4dc73660a5b53ebe2091c579a/src/pow/cuckoo_cycle/siphash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/siphash.h?ref=e141ca2149c171a4dc73660a5b53ebe2091c579a",
        "patch": "@@ -1,8 +1,7 @@\n-#ifndef INCLUDE_SIPHASH_H\n-#define INCLUDE_SIPHASH_H\n+#ifndef BITCOIN_POW_CUCKOO_CYCLE_SIPHASH_H\n+#define BITCOIN_POW_CUCKOO_CYCLE_SIPHASH_H\n #include <stdint.h> // for types uint32_t,uint64_t\n-#include <openssl/sha.h> // if openssl absent, use #include \"sha256.c\"\n-#include <immintrin.h>\n+#include \"hash.h\"\n \n namespace powa {\n \n@@ -30,16 +29,11 @@ typedef struct {\n    ((u64)((p)[6]) << 48) | ((u64)((p)[7]) << 56))\n \n #ifndef SHA256\n-#define SHA256(d, n, md) do { \\\n-    SHA256_CTX c; \\\n-    SHA256_Init(&c); \\\n-    SHA256_Update(&c, d, n); \\\n-    SHA256_Final(md, &c); \\\n-  } while (0)\n+#define SHA256(d, n, md) CSHA256().Write(d, n).Finalize(md)\n #endif\n \n // derive siphash key from fixed length header\n-void setheader(siphash_keys *keys, const char *header) {\n+inline void setheader(siphash_keys *keys, const char *header) {\n   unsigned char hdrkey[32];\n   SHA256((unsigned char *)header, HEADERLEN, hdrkey);\n   keys->k0 = U8TO64_LE(hdrkey);\n@@ -57,7 +51,7 @@ void setheader(siphash_keys *keys, const char *header) {\n   } while(0)\n \n // SipHash-2-4 specialized to precomputed key and 8 byte nonces\n-u64 siphash24(const siphash_keys *keys, const u64 nonce) {\n+inline u64 siphash24(const siphash_keys *keys, const u64 nonce) {\n   u64 v0 = keys->k0 ^ 0x736f6d6570736575ULL, v1 = keys->k1 ^ 0x646f72616e646f6dULL,\n       v2 = keys->k0 ^ 0x6c7967656e657261ULL, v3 = keys->k1 ^ 0x7465646279746573ULL ^ nonce;\n   SIPROUND; SIPROUND;\n@@ -77,4 +71,4 @@ inline void siphash24xN(const siphash_keys *keys, const u64 *indices, u64 * hash\n \n }  // namespace powa\n \n-#endif // ifdef INCLUDE_SIPHASH_H\n+#endif // BITCOIN_POW_CUCKOO_CYCLE_SIPHASH_H"
      }
    ]
  },
  {
    "sha": "1464aa203d5a887b9cced56146d0a4a3f35b475d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDY0YWEyMDNkNWE4ODdiOWNjZWQ1NjE0NmQwYTRhM2YzNWI0NzVk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-06T02:30:42Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "f'inline pthread helpers in osx_barrier.h (fix core cuckoo-cycle)",
      "tree": {
        "sha": "bc176bd340e129fb3a2835320ece9d32960b31cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc176bd340e129fb3a2835320ece9d32960b31cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1464aa203d5a887b9cced56146d0a4a3f35b475d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyK/Rw//Uw0pefQKni4VaIc0b2mQviU8gWrPu0+Ait9VSIuGQgJm2gqqCNU4lz22\ndbTTEF6m7Di4RCX5gnVrSENfon9vaN9uQ6uMTNFOB6Ks2i5p5wX/i6fa9tIODTOj\nHVhT6A6Pbm8fVtVhnCofJvj2u7MluPTUpzXXcwsOCriq+Xxje6HzjGgCgNEZIlkt\nnefMptwNhlJKj8p6YRkhj8NkHvDUkNfvBpCtVh4OwaiMgddKJvn2f+ZR8BIbcSbH\nLfwp2KyMyVUtYDb3ym34tkZImKJf7umWwdkyWwqv13NlzGqgCjzntsYGsym11K/w\nONdN0cLv6erNyCeXtZSzAGTdhAi1FxKtOwwIK09AHw0TEOui9KGNKEyPM2tX3mg7\nm3UhcJBD7nnc/8fF0lKCdYKH3LhV4apm3GJW+V6TQ+K3sjW4TYujdndII++vwGOO\nP5GMgi18tRy83vDUsblUf5ULSoMYdkOclaz1fKGV3tr8xrTgruNu4weVHXkqiQeQ\n5YDw3OE0ixWTLjZmRcg/MbE0J4mf9R9HSLTQdRg5CdkTXPBGBqh69kdVyDNUJiNa\nG3Au1V7qttWTs778Q3Dr8sSeA0ogEXdEkce7vPh3rls/hH39sHix1RAnkd8EUF2q\nbHpHrnW1m6dPIPofn5eLXXcFV/QUR9AVWwGvDd4/fBi53VOYqWU=\n=V7nb\n-----END PGP SIGNATURE-----",
        "payload": "tree bc176bd340e129fb3a2835320ece9d32960b31cf\nparent e141ca2149c171a4dc73660a5b53ebe2091c579a\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496716242 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\nf'inline pthread helpers in osx_barrier.h (fix core cuckoo-cycle)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1464aa203d5a887b9cced56146d0a4a3f35b475d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1464aa203d5a887b9cced56146d0a4a3f35b475d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1464aa203d5a887b9cced56146d0a4a3f35b475d/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e141ca2149c171a4dc73660a5b53ebe2091c579a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141ca2149c171a4dc73660a5b53ebe2091c579a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e141ca2149c171a4dc73660a5b53ebe2091c579a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d14506713c17e964fb822d620f278102d5e1b546",
        "filename": "src/pow/cuckoo_cycle/osx_barrier.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1464aa203d5a887b9cced56146d0a4a3f35b475d/src/pow/cuckoo_cycle/osx_barrier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1464aa203d5a887b9cced56146d0a4a3f35b475d/src/pow/cuckoo_cycle/osx_barrier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/osx_barrier.h?ref=1464aa203d5a887b9cced56146d0a4a3f35b475d",
        "patch": "@@ -25,7 +25,7 @@ typedef struct\n } pthread_barrier_t;\n \n \n-int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t *attr, unsigned int count)\n+inline int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t *attr, unsigned int count)\n {\n     if(count == 0)\n     {\n@@ -47,14 +47,14 @@ int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t\n     return 0;\n }\n \n-int pthread_barrier_destroy(pthread_barrier_t *barrier)\n+inline int pthread_barrier_destroy(pthread_barrier_t *barrier)\n {\n     pthread_cond_destroy(&barrier->cond);\n     pthread_mutex_destroy(&barrier->mutex);\n     return 0;\n }\n \n-int pthread_barrier_wait(pthread_barrier_t *barrier)\n+inline int pthread_barrier_wait(pthread_barrier_t *barrier)\n {\n     pthread_mutex_lock(&barrier->mutex);\n     ++(barrier->count);"
      }
    ]
  },
  {
    "sha": "49d63d90cd5cfe30354a7710e774145a9558e3ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWQ2M2Q5MGNkNWNmZTMwMzU0YTc3MTBlNzc0MTQ1YTk1NThlM2Fk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-06T03:41:40Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[consensus] Add C4 network to chainparams.",
      "tree": {
        "sha": "3083c0dade5afdcfee948e9ce72d5e3d156e042c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3083c0dade5afdcfee948e9ce72d5e3d156e042c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49d63d90cd5cfe30354a7710e774145a9558e3ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyK6Yg/+NfbbYEhh0AEHrqA4yIwougSYC4wnjFZYZV8YW/dSUUptV1cqwgWYHlsV\nhs55jMmiUGArqwPTt3NWKSppVP/QgzdpEFemlasQzqr7GBb+Ghej/9jibsmC5OdR\nAVLhGL20HPw7XVCZtTt4U2usmiXSH+rU/u+D/tlzCTAOhp5ZW4hkYo6ZBybk1zq3\na2S6/EGl0HSfMoUCcy7AzaMALsXiq6Sx2sYk85w2zHP1g2hZZ6JMVu4DCWQdaUU6\nElRXzFleUXQmk39uSt+PB0Mj1HlH/bFj1nOiw5HlqmguD8boGeGTBJHNHpiSHk9A\nBv5F5xyWnIrimgPQhWBKjLQSSpToOuzIXT3imw/lTSNZ/c0gB/m/Dg4/9asdc8tc\nl3eLjNnmrcMKPqZImHGgvotrL8OZv9HngqENV2y+lB74MGs2QQWLTa87SDHTlRKX\n5CyS5FhIa9fED+UNbukpO7bi7rhwgTEqs4T4IC3eBO6fqAmy1RG9uz8Mkpy4/Pyq\n32abLgl+euXW1nCCNKxmkTaA9CgJXMj51X7zWdXIsiR/BLVaSCDerq2k8BYR159G\nvKqNSicB6KFpUauhrbpwtTRwQVn7Ye2HJqRrP7Yi9CgFCKYleItpzTaPwMOmzP8J\nluBuNi+iARIDDUez/RZYIm5sjBl14i7shw01VLcsC3djoFgLIRs=\n=TQ0A\n-----END PGP SIGNATURE-----",
        "payload": "tree 3083c0dade5afdcfee948e9ce72d5e3d156e042c\nparent 1464aa203d5a887b9cced56146d0a4a3f35b475d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496720500 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[consensus] Add C4 network to chainparams.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d63d90cd5cfe30354a7710e774145a9558e3ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49d63d90cd5cfe30354a7710e774145a9558e3ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d63d90cd5cfe30354a7710e774145a9558e3ad/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1464aa203d5a887b9cced56146d0a4a3f35b475d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1464aa203d5a887b9cced56146d0a4a3f35b475d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1464aa203d5a887b9cced56146d0a4a3f35b475d"
      }
    ],
    "stats": {
      "total": 201,
      "additions": 198,
      "deletions": 3
    },
    "files": [
      {
        "sha": "49be44a18475a8c5fe438c8f6797b06bb7504641",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 179,
        "deletions": 3,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=49d63d90cd5cfe30354a7710e774145a9558e3ad",
        "patch": "@@ -14,7 +14,74 @@\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+#include \"arith_uint256.h\"\n+\n+static bool DetermineNonceRequired(CBlock block, uint32_t nBits)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+    return !block.CheckProofOfWork() || bnTarget <= UintToArith256(block.GetHash());\n+}\n+\n+static std::string TimeDiff(double s)\n+{\n+    uint32_t sssi = s;\n+    uint32_t m = sssi / 60;\n+    sssi = sssi % 60;\n+    uint32_t h = m / 60;\n+    m %= 60;\n+    return strprintf(\"%02u:%02u.%02u\", h, m, sssi);\n+}\n+\n+static void DetermineNonce(CBlock block, uint32_t nBits)\n+{\n+    time_t start = time(0);\n+    time_t lastprog = time(0);\n+    printf(\"DetermineNonce() nBits = %u ...\\n\", nBits);\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+    printf(\"Target = %s\\n\", bnTarget.ToString().c_str());\n+    uint64_t iters = 0;\n+    block.nNonce = 0;\n+    uint32_t noncePoint = block.nNonce;\n+    arith_uint256 hash = UintToArith256(block.GetHash());\n+    arith_uint256 bnLowest = hash;\n+    uint64_t progressIter = 0;\n+    std::string targetValueString = bnTarget.ToString();\n+    while (!block.CheckProofOfWork(true) || bnTarget <= hash) {\n+        progressIter++;\n+        if (hash < bnLowest) {\n+            bnLowest = hash;\n+            printf(\"Progress after %llu iterations (%s):\\n\", progressIter, TimeDiff(difftime(time(0), lastprog)).c_str());\n+            progressIter = 0;\n+            printf(\"- lowest value -> %s [%u]\\n\", hash.ToString().c_str(), block.nNonce);\n+            printf(\"  target value -> %s\\n\", targetValueString.c_str());\n+            lastprog = time(0);\n+        }\n+        block.nNonce++;\n+        iters++;\n+        if (block.nNonce == noncePoint) {\n+            block.nTime++;\n+            printf(\"- iterated over all nonce values; updating nTime -> %u\\n\", block.nTime);\n+        }\n+        if (iters % 10000000 == 0) {\n+            printf(\"- %llu iters [%u] (last prog %s ago)\\n\", iters, block.nNonce, TimeDiff(difftime(time(0), lastprog)).c_str());\n+        }\n+        hash = UintToArith256(block.GetHash());\n+    }\n+    printf(\"Took %s\\n\", TimeDiff(difftime( time(0), start)).c_str());\n+    printf(\"   %s\\n>= %s\\n\", bnTarget.ToString().c_str(), block.GetHash().ToString().c_str());\n+    printf(\"... after %llu iters, nonce = %u; hash = %s\\n\", iters, block.nNonce, HexStr(block.GetHash()).c_str());\n+    printf(\"genesis = CreateGenesisBlock(%u, %u, ...);\\n\", block.nTime, block.nNonce);\n+    printf(\"assert(consensus.hashGenesisBlock == uint256S(\\\"0x%s\\\"));\\n\", block.GetHash().ToString().c_str());\n+    printf(\"assert(genesis.hashMerkleRoot == uint256S(\\\"0x%s\\\"));\\n\", block.hashMerkleRoot.ToString().c_str());\n+}\n+\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, uint32_t* cycle = nullptr)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -32,6 +99,10 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n     genesis.hashPrevBlock.SetNull();\n     genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n+    if (cycle) memcpy(genesis.cycle, cycle, sizeof(uint32_t) * 42);\n+    if (DetermineNonceRequired(genesis, nBits)) {\n+        DetermineNonce(genesis, nBits);\n+    }\n     return genesis;\n }\n \n@@ -46,11 +117,11 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n-static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, uint32_t* cycle = nullptr)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward, cycle);\n }\n \n void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n@@ -171,6 +242,109 @@ class CMainParams : public CChainParams {\n     }\n };\n \n+class CC4Params : public CChainParams {\n+public:\n+    CC4Params() {\n+        strNetworkID = \"c4\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.BIP34Height = 0;\n+        consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n+        consensus.BIP65Height = 0; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.BIP66Height = 0; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 60 * 60; // 1 hour\n+        consensus.nPowTargetSpacing = 1 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 50; // 5/6 of 60\n+        consensus.nMinerConfirmationWindow = 60; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n+        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n+\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n+\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n+\n+        /**\n+         * The message start string is designed to be unlikely to occur in normal data.\n+         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+         * a large 32-bit integer with any alignment.\n+         */\n+        pchMessageStart[0] = 0x9c;  // \"BC2\\n\" ^ 0xdeadbeef\n+        pchMessageStart[1] = 0xee;\n+        pchMessageStart[2] = 0x8c;\n+        pchMessageStart[3] = 0xe5;\n+        nDefaultPort = 9232;\n+        nPruneAfterHeight = 100000;\n+\n+        uint32_t cycle[42] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+        genesis = CreateGenesisBlock(1496312816, 0, 0x207fffff, 1, 50 * COIN, cycle);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n+        // Note that of those with the service bits flag, most only support a subset of possible options\n+        // vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n+        // vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n+        // vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n+        // vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n+        // vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n+        // vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.btc.petertodd.org\", true)); // Peter Todd, only supports x1, x5, x9, and xd\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n+\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n+\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = true;\n+        fMineBlocksOnDemand = false;\n+\n+        checkpointData = (CCheckpointData) {\n+            boost::assign::map_list_of\n+            ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+            // ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+            // ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+            // ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+            // (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+            // (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+            // (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+            // (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+            // (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+            // (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+            // (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+            // (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+            // (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+            // (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        };\n+\n+        chainTxData = ChainTxData{\n+            // // Data as of block 00000000000000000166d612d5595e2b1cd88d71d695fc580af64d8da8658c23 (height 446482).\n+            // 1483472411, // * UNIX timestamp of last known number of transactions\n+            // 184495391,  // * total number of transactions between genesis and that timestamp\n+            //             //   (the tx=... number in the SetBestChain debug.log lines)\n+            // 3.2         // * estimated number of transactions per second after that timestamp\n+            0, 0, 0\n+        };\n+    }\n+};\n+\n /**\n  * Testnet (v3)\n  */\n@@ -344,6 +518,8 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n+    else if (chain == CBaseChainParams::C4)\n+        return std::unique_ptr<CChainParams>(new CC4Params());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)"
      },
      {
        "sha": "70a8ed4683580aac7e268de06c36f2115329700c",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=49d63d90cd5cfe30354a7710e774145a9558e3ad",
        "patch": "@@ -13,6 +13,7 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::C4 = \"c4\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -36,6 +37,18 @@ class CBaseMainParams : public CBaseChainParams\n     }\n };\n \n+/**\n+ * Main network\n+ */\n+class CBaseC4Params : public CBaseChainParams\n+{\n+public:\n+    CBaseC4Params()\n+    {\n+        nRPCPort = 9232;\n+    }\n+};\n+\n /**\n  * Testnet (v3)\n  */\n@@ -74,6 +87,8 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n+    else if (chain == CBaseChainParams::C4)\n+        return std::unique_ptr<CBaseC4Params>(new CBaseC4Params());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n@@ -89,6 +104,7 @@ void SelectBaseParams(const std::string& chain)\n \n std::string ChainNameFromCommandLine()\n {\n+    bool fC4 = GetBoolArg(\"-c4\", true);\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n@@ -98,5 +114,7 @@ std::string ChainNameFromCommandLine()\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n+    if (fC4)\n+        return CBaseChainParams::C4;\n     return CBaseChainParams::MAIN;\n }"
      },
      {
        "sha": "c7d68d472cd811d35d517f1844964c955b0600a3",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d63d90cd5cfe30354a7710e774145a9558e3ad/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=49d63d90cd5cfe30354a7710e774145a9558e3ad",
        "patch": "@@ -18,6 +18,7 @@ class CBaseChainParams\n public:\n     /** BIP70 chain name strings (main, test or regtest) */\n     static const std::string MAIN;\n+    static const std::string C4;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n "
      }
    ]
  },
  {
    "sha": "6f45bed355c93829556b7d0706a7229ac2849159",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjQ1YmVkMzU1YzkzODI5NTU2YjdkMDcwNmE3MjI5YWMyODQ5MTU5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-06T03:42:22Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[temporary] Disable random.cpp dependency in pow to deal with linker issues.",
      "tree": {
        "sha": "21420a2e2e156d3ee67cc1fe563c361a0051b1fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21420a2e2e156d3ee67cc1fe563c361a0051b1fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f45bed355c93829556b7d0706a7229ac2849159",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyKI3w/7BymXaDb2giuMjQS28g5MI0C5qIVcw8g13rL0ewvxXuMBpw2njY2iTRyl\n93SCn/UXufa3kqlFffQG/uZctIWyE2FJExcCOiz/J4IbbkEa8lqGo48mndM3VqsB\n612R5V4TqEmIOpP0K3DI/tSfkAFUal2WQfVddjeD8mHYMw6e2lICsT4Aw/32kMQf\nFokr2L2MyjEmNXXWngOC/x39sVRex8PVVoCxZf7oaIZ+6vl+7njRW1tM1GL+nZ8t\nN+xz2vxD8LMniYluITfR66BPFoWEJh/GWDFG2NbJClmTJ52L+Xggnny0nut5MgM9\nGzFz/BjOaRopwKRnruQHh6JLXscYClW4D8JaiAxj+c+hClzNIoFTr1vxDci1OecR\nNaNuOmpLZSBbZ9XQ8qGJuntnEKWSLEqOfx+eYa2TXN7ZzDsyMNV4qMeB/mGB4UGw\ntK7gNsZ7QsirkCVZXAcfOPc4aLNlVhISHfQ945y9TWZjQP8CU4GW8oSOY+9KC8Jw\nYrA5foHnQ2EblGjj33vx/3hKpatinIrcbMNHbIrmiODszjBweHrJLa0xT3m6ghCp\n3jgXrdqimArnQHra9SotCmLoP3edbfRbueUeClmCx0eX/u9MImNXgDKLknJqmhcC\nABM0UTcykWLE0k0zG7V6Slse5tRKEYB1LTj1p6YO0WA0xI/yjgY=\n=s2BO\n-----END PGP SIGNATURE-----",
        "payload": "tree 21420a2e2e156d3ee67cc1fe563c361a0051b1fc\nparent 49d63d90cd5cfe30354a7710e774145a9558e3ad\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496720542 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[temporary] Disable random.cpp dependency in pow to deal with linker issues.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f45bed355c93829556b7d0706a7229ac2849159",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f45bed355c93829556b7d0706a7229ac2849159",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f45bed355c93829556b7d0706a7229ac2849159/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49d63d90cd5cfe30354a7710e774145a9558e3ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d63d90cd5cfe30354a7710e774145a9558e3ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49d63d90cd5cfe30354a7710e774145a9558e3ad"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 70,
      "deletions": 37
    },
    "files": [
      {
        "sha": "dcd5046bd755417b55b5c513a48a59ea68f2b107",
        "filename": "src/pow/cuckoo_cycle/cuckoo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo.h?ref=6f45bed355c93829556b7d0706a7229ac2849159",
        "patch": "@@ -21,7 +21,7 @@ namespace cuckoo_cycle {\n #ifndef SIZESHIFT\n // the main parameter is the 2log of the graph size,\n // which is the size in bits of the node identifiers\n-#define SIZESHIFT 28\n+#define SIZESHIFT 26\n #endif\n \n // the graph size / number of nodes"
      },
      {
        "sha": "97cb4d54f94492c466dd9f2211109b0cead074ca",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.cpp?ref=6f45bed355c93829556b7d0706a7229ac2849159",
        "patch": "@@ -6,7 +6,7 @@\n \n #include <algorithm>\n \n-#include \"../random.h\"\n+// #include \"../random.h\"\n \n namespace powa {\n \n@@ -27,9 +27,10 @@ cuckoo_cycle::~cuckoo_cycle() {\n \n void cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n     assert(state == state_ready || state == state_paused);\n-    if (state == state_ready && !fZeroStartingNonce) {\n+    if (external_nonce && state == state_ready && !fZeroStartingNonce) {\n         // randomize nonce\n-        GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+        // GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+        next_nonce = (int)reinterpret_cast<uint64_t>(this);\n     }\n     state = state_running;\n     ticks_left = ticks;\n@@ -59,7 +60,7 @@ void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n     memcpy(ws, &c->params[0], c->params.size());\n     ctx = new cuckoo_ctx(thread_count, ntrims, 8, c->proofsize_min, c->proofsize_max);\n     while (state == state_running) {\n-        ctx->setheadernonce(ws, wx, nonce);\n+        if (external_nonce) ctx->setheadernonce(ws, wx, nonce);\n         for (uint32_t t = 0; t < thread_count; t++) {\n             threads[t].id = t;\n             threads[t].ctx = ctx;\n@@ -87,7 +88,7 @@ void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n         }\n         nonce++;\n         ticks_left -= ticks_left > -1;\n-        if (ticks_left == 0) state = state_paused;\n+        if (ticks_left == 0 || !external_nonce) state = state_paused;\n     }\n     if (state == state_term) state = state_aborted;\n     delete ctx;"
      },
      {
        "sha": "2971a51091c4576e25f09f9028b3cf689c714dc8",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "status": "modified",
        "additions": 43,
        "deletions": 13,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.h?ref=6f45bed355c93829556b7d0706a7229ac2849159",
        "patch": "@@ -47,13 +47,25 @@ class cc_challenge : public challenge {\n         // TODO: validate proofsizes; must be even, max must >= min, ...\n     }\n \n-    static cc_challenge_ref random_challenge(const uint8_t len = HEADERLEN - 4) {\n-        cc_challenge* c = new cc_challenge();\n-        c->params.resize(len);\n-        c->randomize(c->params.size());\n-        return cc_challenge_ref(c);\n+    cc_challenge(const uint8_t sizeshift_in, const uint16_t proofsize_min_in, const uint16_t proofsize_max_in, const std::vector<uint8_t>& data)\n+    : challenge(data)\n+    {\n+        config.params.resize(5);\n+        uint8_t* configb = &config.params[0];\n+        *configb = sizeshift = sizeshift_in;\n+        configb += 1;\n+        *(uint16_t*)configb = proofsize_min = proofsize_min_in;\n+        configb += 2;\n+        *(uint16_t*)configb = proofsize_max = proofsize_max_in;\n     }\n \n+    // static cc_challenge_ref random_challenge(const uint8_t len = HEADERLEN - 4) {\n+    //     cc_challenge* c = new cc_challenge();\n+    //     c->params.resize(len);\n+    //     c->randomize(c->params.size());\n+    //     return cc_challenge_ref(c);\n+    // }\n+\n     cc_challenge& operator=(const cc_challenge& other) {\n         params = other.params;\n         return *this;\n@@ -76,29 +88,47 @@ class cuckoo_cycle : public pow {\n     cuckoo_ctx* ctx;\n     int next_nonce;\n     static int last_err;               ///< last error after call to is_valid()\n-    cuckoo_cycle(cc_challenge_ref c_in, callback_ref cb_in = nullptr) : pow(POWID_CUCKOO_CYCLE, c_in, cb_in), thread(nullptr), c(c_in), next_nonce(0) {}\n+    bool external_nonce;\n+    cuckoo_cycle(cc_challenge_ref c_in, callback_ref cb_in = nullptr, bool external_nonce_in = true)\n+    : pow(POWID_CUCKOO_CYCLE, c_in, cb_in), thread(nullptr), c(c_in), next_nonce(0), external_nonce(external_nonce_in) {}\n     ~cuckoo_cycle();\n \n     std::string last_error_string() {\n         return errstr[last_err];\n     }\n \n     bool is_valid(solution& s) const override {\n-        if (s.params.size() < size_t(1 + c->proofsize_min) * 4 ||\n-            s.params.size() > size_t(1 + c->proofsize_max) * 4) {\n-            return false; // 1 nonce + edges, all 32 bit\n+        u32* values;\n+        u32 nonce = 0;\n+        u32* keys;\n+        if (external_nonce) {\n+            // nonce is embedded in solution\n+            if (s.params.size() < size_t(1 + c->proofsize_min) * 4 ||\n+                s.params.size() > size_t(1 + c->proofsize_max) * 4) {\n+                return false; // 1 nonce + edges, all 32 bit\n+            }\n+            values = (u32*)&s.params[0];\n+            nonce = values[0];\n+            keys = &values[1];\n+        } else {\n+            // nonce is embedded in challenge\n+            if (s.params.size() < size_t(c->proofsize_min) * 4 ||\n+                s.params.size() > size_t(c->proofsize_max) * 4) {\n+                return false; // edges, all 32 bit\n+            }\n+            values = (u32*)&s.params[0];\n+            keys = &values[0];\n         }\n-        u32* values = (u32*)&s.params[0];\n-        u32 nonce = values[0];\n-        u32* keys = &values[1];\n         uint16_t proofsize = (s.params.size() >> 2) - 1;\n         printf(\"CC is_valid(): nonce=%u, proofsize=%u\\n\", nonce, proofsize);\n \n         char headernonce[HEADERLEN];\n         u32 hdrlen = c.get()->params.size();\n         memcpy(headernonce, &c.get()->params[0], hdrlen);\n         if (hdrlen < sizeof(headernonce)) memset(headernonce + hdrlen, 0, sizeof(headernonce) - hdrlen);\n-        ((u32 *)headernonce)[HEADERLEN/sizeof(u32)-1] = htole32(nonce);\n+        if (external_nonce) {\n+            ((u32 *)headernonce)[HEADERLEN/sizeof(u32)-1] = htole32(nonce);\n+        }\n \n         last_err = verify(keys, headernonce, HEADERLEN, proofsize);\n         return (last_err == POW_OK);"
      },
      {
        "sha": "0605360358644ae88e4d21f676c19720a542b307",
        "filename": "src/pow/pow.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/pow.h?ref=6f45bed355c93829556b7d0706a7229ac2849159",
        "patch": "@@ -8,7 +8,7 @@\n #include <vector>\n #include <stdint.h>\n \n-#include \"random.h\"\n+// #include \"random.h\"\n #include \"serialize.h\"\n #include \"tinyformat.h\"\n \n@@ -64,20 +64,20 @@ class challenge : public container {\n     using container::container;\n     challenge() : container() {}\n     challenge(const challenge& other) : container(other) { config = other.config; }\n-    void randomize(const uint32_t bytes, const uint32_t offset = 0) {\n-        if (params.size() < bytes) params.resize(bytes);\n-        GetRandBytes(&params.begin()[offset], bytes);\n-    }\n+    // void randomize(const uint32_t bytes, const uint32_t offset = 0) {\n+    //     if (params.size() < bytes) params.resize(bytes);\n+    //     GetRandBytes(&params.begin()[offset], bytes);\n+    // }\n     /**\n      * Generate a random challenge of this POW type.\n      * @param  size Number of random bytes to generate.\n      * @return      A challenge whose params consists of size random bytes.\n      */\n-    static challenge* random_challenge(const uint32_t size) {\n-        challenge* c = new challenge();\n-        c->randomize(size);\n-        return c;\n-    }\n+    // static challenge* random_challenge(const uint32_t size) {\n+    //     challenge* c = new challenge();\n+    //     c->randomize(size);\n+    //     return c;\n+    // }\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -140,8 +140,9 @@ class pow {\n \n     /**\n      * Determine if s is a valid solution to c.\n-     * @param  s A solution to this POW\n-     * @return   Whether the solution solves the challenge.\n+     * @param  s             A solution to this POW\n+     * @param  noncePosition -1 if nonce is embedded in solution, otherwise the byte position in the challenge which indicates the nonce\n+     * @return               Whether the solution solves the challenge.\n      */\n     virtual bool is_valid(solution& s) const = 0;\n "
      },
      {
        "sha": "52a9ca72c0c594f7d2caf7c6a78a19b543af246c",
        "filename": "src/pow/sha256/sha256.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/sha256/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f45bed355c93829556b7d0706a7229ac2849159/src/pow/sha256/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/sha256/sha256.h?ref=6f45bed355c93829556b7d0706a7229ac2849159",
        "patch": "@@ -46,11 +46,11 @@ class sha256challenge : public challenge {\n         configb++;\n         *(uint32_t*)configb = nonce_offset;\n     }\n-    static challenge_ref random_challenge(const uint32_t compact_target_in, const uint8_t nonce_size_in, const uint32_t nonce_offset_in, const uint32_t size) {\n-        sha256challenge* c = new sha256challenge(compact_target_in, nonce_size_in, nonce_offset_in, size);\n-        c->randomize(c->params.size());\n-        return challenge_ref(c);\n-    }\n+    // static challenge_ref random_challenge(const uint32_t compact_target_in, const uint8_t nonce_size_in, const uint32_t nonce_offset_in, const uint32_t size) {\n+    //     sha256challenge* c = new sha256challenge(compact_target_in, nonce_size_in, nonce_offset_in, size);\n+    //     c->randomize(c->params.size());\n+    //     return challenge_ref(c);\n+    // }\n };\n \n class sha256 : public pow {\n@@ -131,7 +131,8 @@ class sha256 : public pow {\n         if (background || threads > 1) printf(\"warning: sha256 solver does not spawn threads\\n\");\n         if (state == state_ready && sc->nonce_size > 0 && !fZeroStartingNonce) {\n             // randomize nonce\n-            GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+            // GetRandBytes((unsigned char*)&next_nonce, sizeof(next_nonce));\n+            next_nonce = reinterpret_cast<uint64_t>(this);\n         }\n         state = state_running;\n         ticks_left = ticks;"
      }
    ]
  },
  {
    "sha": "0a4c671905de1fe0b9e18f047d254b0af18e6df0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTRjNjcxOTA1ZGUxZmUwYjllMThmMDQ3ZDI1NGIwYWYxOGU2ZGYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T04:57:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[pow] Updated CC to allow internal nonces and support for aborting mid-nonce.",
      "tree": {
        "sha": "e5ebc6b85c1c94d3cc26aaa576a8fc630c9d4f9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ebc6b85c1c94d3cc26aaa576a8fc630c9d4f9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a4c671905de1fe0b9e18f047d254b0af18e6df0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyIULQ//a6ZUvrNzNyRLIzkVJg+zSHe9NBz1GRmktTNRr7zuGMp8yx45g2bRFZbP\nwOKGSZF1Ca/Nkxdi7XRIIPe1IDFtvV4qeRYhCTCUNeSqCC3FI5emhXs8cJSKdZuQ\nPNrBcuEY2T5zNge7oJMD3kXa4l8/dPfdcdRNaBp0s4juIKpTU4KdtA3BU+SPzCv4\ntwy8pqZ0Ff739bZmeg0xMrlnj4Vj1lb3VVZSGBPxS8A8KHXdBqihh34QkOrZXwhW\n4700hgEucJl1wxsC6ag1BNXZIub7fVBqll7fAIRAZ4+IBTzCh/d8gdAregqjmisZ\nKgbwqY670MrH7Ht/Nk7290MZqjCBZ6oywIXyQGJSyO+XmU7tqUP94F3riYNbRSl5\nraowI2Am/bEX4bsIenbIzwVqzf5wXpzCccxWUZoMydrnslQ0m3cwbItvqgVOxNfc\nU0D1u3qp6t4n0xRJ7zsSxNXjVrqP6kMsqPWZ6bVyRHhQkXEwRT24BYSGdEANKwJE\n/eCx+FQe0c8HbBSlaF2qN0rOZOzP0Q2tuG1b1oWHEwhIAlcBAZWIIcFtlDc0OsfJ\nqx1SqSZ0zcEFOtDPIIMllgh+WZhAzz8x7Bdw4jJCUKXb/MnpwWBF+zAFEHokvkft\nPmzLjZrxKm9J8cluwPajmVzdzJBd6gCMOpTp9z5I3maR22B0sU0=\n=JNMj\n-----END PGP SIGNATURE-----",
        "payload": "tree e5ebc6b85c1c94d3cc26aaa576a8fc630c9d4f9a\nparent 6f45bed355c93829556b7d0706a7229ac2849159\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811430 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[pow] Updated CC to allow internal nonces and support for aborting mid-nonce.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4c671905de1fe0b9e18f047d254b0af18e6df0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4c671905de1fe0b9e18f047d254b0af18e6df0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4c671905de1fe0b9e18f047d254b0af18e6df0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f45bed355c93829556b7d0706a7229ac2849159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f45bed355c93829556b7d0706a7229ac2849159",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f45bed355c93829556b7d0706a7229ac2849159"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 50,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0ba5fcc2e98985c0011c25623dc2f21e5eaeaaff",
        "filename": "src/pow/cuckoo_cycle/cuckoo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo.h?ref=0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "patch": "@@ -21,7 +21,7 @@ namespace cuckoo_cycle {\n #ifndef SIZESHIFT\n // the main parameter is the 2log of the graph size,\n // which is the size in bits of the node identifiers\n-#define SIZESHIFT 26\n+#define SIZESHIFT 28\n #endif\n \n // the graph size / number of nodes"
      },
      {
        "sha": "b65e1eb070673fb2ba07c9474a62748a30b2174a",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 11,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.cpp?ref=0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "patch": "@@ -25,7 +25,7 @@ cuckoo_cycle::~cuckoo_cycle() {\n     }\n }\n \n-void cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n+bool cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n     assert(state == state_ready || state == state_paused);\n     if (external_nonce && state == state_ready && !fZeroStartingNonce) {\n         // randomize nonce\n@@ -34,23 +34,27 @@ void cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n     }\n     state = state_running;\n     ticks_left = ticks;\n-    if (c->params.size() != HEADERLEN - 4) {\n-        c->params.resize(HEADERLEN - 4);\n+    if (c->params.size() != HEADERLEN - (external_nonce ? 4 : 0)) {\n+        c->params.resize(HEADERLEN - (external_nonce ? 4 : 0));\n     }\n     if (background) {\n         thread = new std::thread(&cuckoo_cycle::solve_async, this, threads ?: 1);\n-    } else {\n-        solve_async(threads ?: 1);\n+        return false;\n     }\n+    return solve_async(threads ?: 1);\n }\n \n void cuckoo_cycle::abort() {\n+    if (pAbort) {\n+        *pAbort = true;\n+        pAbort = NULL;\n+    }\n     if (state != state_running) return;\n     state = state_term;\n     thread->join();\n }\n \n-void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n+bool cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n     int ntrims = 1 + (PART_BITS+3)*(PART_BITS+4)/2;\n     int nonce  = next_nonce;\n     thread_ctx* threads = new thread_ctx[thread_count];\n@@ -59,8 +63,13 @@ void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n     char* ws = new char[wx];\n     memcpy(ws, &c->params[0], c->params.size());\n     ctx = new cuckoo_ctx(thread_count, ntrims, 8, c->proofsize_min, c->proofsize_max);\n+    pAbort = &ctx->abort;\n     while (state == state_running) {\n-        if (external_nonce) ctx->setheadernonce(ws, wx, nonce);\n+        if (external_nonce) {\n+            ctx->setheadernonce(ws, wx, nonce);\n+        } else {\n+            ctx->prepare(ws);\n+        }\n         for (uint32_t t = 0; t < thread_count; t++) {\n             threads[t].id = t;\n             threads[t].ctx = ctx;\n@@ -78,23 +87,30 @@ void cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n             nonce_t proofsize = ctx->sols[s][ctx->proofsize_max];\n             printf(\"- solution with proofsize = %u found for nonce = %d\\n\", proofsize, nonce);\n             solution_ref sol(new solution());\n-            sol->params.resize(4 * (1 + proofsize));\n-            SetNonce(sol, nonce);\n-            SetKeys(sol, ctx->sols[s], proofsize);\n+            sol->params.resize(4 * (proofsize + (external_nonce ? 1 : 0)));\n+            if (external_nonce) {\n+                SetNonce(sol, nonce);\n+                SetKeys(sol, ctx->sols[s], proofsize);\n+            } else {\n+                memcpy(&sol->params[0], ctx->sols[s], proofsize * 4);\n+                printf(\"solution with nonces %u, %u, %u, ..., %u\\n\", ctx->sols[s][0], ctx->sols[s][1], ctx->sols[s][2], ctx->sols[s][proofsize-1]);\n+            }\n             if (cb->found_solution(*this, c, sol)) {\n                 state = state_stopped;\n                 break;\n             }\n         }\n         nonce++;\n         ticks_left -= ticks_left > -1;\n-        if (ticks_left == 0 || !external_nonce) state = state_paused;\n+        if (state == state_running && (ticks_left == 0 || !external_nonce)) state = state_paused;\n     }\n     if (state == state_term) state = state_aborted;\n     delete ctx;\n     delete [] ws;\n     delete [] threads;\n     next_nonce = nonce;\n+    pAbort = NULL;\n+    return state == state_stopped;\n }\n \n }  // namespace cuckoo_cycle"
      },
      {
        "sha": "964f1f8b7e5af2fe1b5297077df3c1d5efeb5735",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_cycle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.h?ref=0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "patch": "@@ -89,8 +89,9 @@ class cuckoo_cycle : public pow {\n     int next_nonce;\n     static int last_err;               ///< last error after call to is_valid()\n     bool external_nonce;\n+    std::atomic<bool>* pAbort;\n     cuckoo_cycle(cc_challenge_ref c_in, callback_ref cb_in = nullptr, bool external_nonce_in = true)\n-    : pow(POWID_CUCKOO_CYCLE, c_in, cb_in), thread(nullptr), c(c_in), next_nonce(0), external_nonce(external_nonce_in) {}\n+    : pow(POWID_CUCKOO_CYCLE, c_in, cb_in), thread(nullptr), c(c_in), next_nonce(0), external_nonce(external_nonce_in), pAbort(NULL) {}\n     ~cuckoo_cycle();\n \n     std::string last_error_string() {\n@@ -119,8 +120,7 @@ class cuckoo_cycle : public pow {\n             values = (u32*)&s.params[0];\n             keys = &values[0];\n         }\n-        uint16_t proofsize = (s.params.size() >> 2) - 1;\n-        printf(\"CC is_valid(): nonce=%u, proofsize=%u\\n\", nonce, proofsize);\n+        uint16_t proofsize = (s.params.size() >> 2) - (external_nonce ? 1 : 0);\n \n         char headernonce[HEADERLEN];\n         u32 hdrlen = c.get()->params.size();\n@@ -131,6 +131,7 @@ class cuckoo_cycle : public pow {\n         }\n \n         last_err = verify(keys, headernonce, HEADERLEN, proofsize);\n+        printf(\"CC is_valid(): nonce=%u, proofsize=%u, err=%d (%s)\\n\", nonce, proofsize, last_err, last_err == POW_OK ? \"true\" : \"false\");\n         return (last_err == POW_OK);\n     }\n \n@@ -140,7 +141,7 @@ class cuckoo_cycle : public pow {\n         memcpy(&output[0], &s.params[0], s.params.size());\n     }\n \n-    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override;\n+    bool solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override;\n \n     int64_t expected_iteration_cycles() const override { return 150000000000; }\n     int64_t expected_invprob()          const override {\n@@ -153,8 +154,9 @@ class cuckoo_cycle : public pow {\n     virtual std::string to_string() const override {\n         return strprintf(\"Cuckoo-Cycle<%p; ps=[%u, %u]>\", this, c->proofsize_min, c->proofsize_max);\n     }\n+\n private:\n-    void solve_async(uint32_t thread_count);\n+    bool solve_async(uint32_t thread_count);\n };\n \n }  // namespace cuckoo_cycle"
      },
      {
        "sha": "d6856a0ac00b4dd10a1b97ce5acfa9c51f536535",
        "filename": "src/pow/cuckoo_cycle/cuckoo_miner.h",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a4c671905de1fe0b9e18f047d254b0af18e6df0/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_miner.h?ref=0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "patch": "@@ -233,8 +233,10 @@ class cuckoo_ctx {\n   uint16_t proofsize_min;\n   uint16_t proofsize_max;\n   pthread_barrier_t barry;\n+  std::atomic<bool> abort;\n \n   cuckoo_ctx(u32 n_threads, u32 n_trims, u32 max_sols, uint16_t proofsize_min_in, uint16_t proofsize_max_in) {\n+    abort = false;\n     proofsize_min = proofsize_min_in;\n     proofsize_max = proofsize_max_in;\n     nthreads = n_threads;\n@@ -249,12 +251,15 @@ class cuckoo_ctx {\n     assert(sols != 0);\n     nsols = 0;\n   }\n-  void setheadernonce(char* headernonce, const u32 len, const u32 nonce) {\n-    ((u32 *)headernonce)[len/sizeof(u32)-1] = htole32(nonce); // place nonce at end\n+  void prepare(char* headernonce) {\n     setheader(&sip_keys, headernonce);\n     alive->clear(); // set all edges to be alive\n     nsols = 0;\n   }\n+  void setheadernonce(char* headernonce, const u32 len, const u32 nonce) {\n+    ((u32 *)headernonce)[len/sizeof(u32)-1] = htole32(nonce); // place nonce at end\n+    prepare(headernonce);\n+  }\n   ~cuckoo_ctx() {\n     delete alive;\n     delete nonleaf;\n@@ -298,6 +303,7 @@ class cuckoo_ctx {\n         }\n         if (ffs & 64) break; // can't shift by 64\n       }\n+      if (abort) return;\n     }\n     node_deg(hashes, NPREFETCH, part);\n     if (nidx % NSIPHASH != 0) {\n@@ -334,6 +340,7 @@ class cuckoo_ctx {\n         }\n         if (ffs & 64) break; // can't shift by 64\n       }\n+      if (abort) return;\n     }\n     const u32 pnsip = nidx & -NSIPHASH;\n     if (pnsip != nidx) {\n@@ -423,10 +430,13 @@ inline void *worker(void *vp) {\n         if (tp->id == 0)\n           ctx->nonleaf->clear(); // clear all counts\n         barrier(&ctx->barry);\n+        if (ctx->abort) pthread_exit(NULL);\n         ctx->count_node_deg(tp->id,uorv,part);\n         barrier(&ctx->barry);\n+        if (ctx->abort) pthread_exit(NULL);\n         ctx->kill_leaf_edges(tp->id,uorv,part);\n         barrier(&ctx->barry);\n+        if (ctx->abort) pthread_exit(NULL);\n         // if (tp->id == 0) {\n         //   u32 load = (u32)(100LL * alive->count() / CUCKOO_SIZE);\n         //   printf(\" %c%d %4d%%\", \"UV\"[uorv], part, load);\n@@ -437,9 +447,9 @@ inline void *worker(void *vp) {\n   }\n   if (tp->id == 0) {\n     load = (u32)(100LL * alive->count() / CUCKOO_SIZE);\n-    // printf(\"nonce %d: %d trims completed  final load %d%%\\n\", ctx->nonce, ctx->ntrims, load);\n+    printf(\"CC: %d trims completed  final load %d%%\\n\", ctx->ntrims, load);\n     if (load >= 90) {\n-      printf(\"overloaded! exiting...\");\n+      printf(\"overloaded! exiting...\\n\");\n       pthread_exit(NULL);\n     }\n     ctx->cuckoo = new cuckoo_hash(ctx->nonleaf->bits);\n@@ -482,6 +492,7 @@ inline void *worker(void *vp) {\n       }\n       if (ffs & 64) break; // can't shift by 64\n     }\n+    if (ctx->abort) pthread_exit(NULL);\n   }\n   pthread_exit(NULL);\n   return 0;"
      }
    ]
  },
  {
    "sha": "65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWJkZmMzNmUzZTJmYTQ1NGUzMWUwNTU0MjU4YzVlNzVmOWUwM2I4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T04:57:56Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[pow-sha256] Solver now returns success state.",
      "tree": {
        "sha": "47bdebd2d94053aa6f068540df56b1cdb3dd5b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47bdebd2d94053aa6f068540df56b1cdb3dd5b02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyJYmw/6AqOGdwdnWskcWN8BO12zRW33QsjroP7d+8uKGGjQSUPvQezYqPy5NwVE\np9p7YH56vcWp2ueynh1nmIKHuDfg5/0QlsW8EHTgBhXXHfa5J5Vq7PRwGVT7a8wz\nFGNvLg+DF5KHLcIEYgm8zOg5WHRT5kBTOvSO/NV/e266HFDpp+fD5GmGHQfhBFq4\nWv+JmLBsHGOuji5vn0rFIgqObA2kHnGOqP4ifMzUZHGaTGlmAxnRSjFo4QO50Tx3\nRAFqSmWnFGbYknLQZ/dMPsMLrH3QNW89YZb/ccrya4pWBuEgJRdl2KypClJ+eELk\nE4aBzGLypJb2V1dTYbdotZnCIweYlfqY0Ae1LWzHTgPbWbovilUEJKFIajovk7bm\nMVXTlHxz/2t3/XaDxmcMtk6Kgd4mkkqf28SWozynohCQb6TtEkNODtHMlz+pdv5q\nXLer0lvqioxbwLeDs3BtI6KUPmAnX/impG1I+hhStoFyt7GStx+twdGn56mM61qY\nz3L4L6pz/LNYRSdb3e4WUGTlMVEliLSodIvN6YeyZ1uy7tBrk+HNJewuA7uJyJvP\nBv1o3Nmr1CUijibZfSIt4dCeNTGPBn2rq+CTpHLYTCDymFz2EYd4qTovvdXJYQuT\n8/BKewyC9W0IxNtnRF0EXso9Ti7LGCRayifcEhVwrjBTgdTkirg=\n=J7xo\n-----END PGP SIGNATURE-----",
        "payload": "tree 47bdebd2d94053aa6f068540df56b1cdb3dd5b02\nparent 0a4c671905de1fe0b9e18f047d254b0af18e6df0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811476 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[pow-sha256] Solver now returns success state.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4c671905de1fe0b9e18f047d254b0af18e6df0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4c671905de1fe0b9e18f047d254b0af18e6df0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4be3c30657de40dd5581b253e781573dba08008e",
        "filename": "src/pow/sha256/sha256.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8/src/pow/sha256/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8/src/pow/sha256/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/sha256/sha256.h?ref=65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
        "patch": "@@ -99,7 +99,7 @@ class sha256 : public pow {\n     }\n \n     template<typename T>\n-    void solve_t(T startnonce) {\n+    bool solve_t(T startnonce) {\n         CSHA256 sha;\n         uint256 hash;\n         arith_uint256 target;\n@@ -124,9 +124,10 @@ class sha256 : public pow {\n         next_nonce = refnonce;\n         delete [] data;\n         state = state == state_term ? state_aborted : state_stopped;\n+        return satisfied;\n     }\n \n-    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n+    bool solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n         assert(state == state_ready || state == state_paused);\n         if (background || threads > 1) printf(\"warning: sha256 solver does not spawn threads\\n\");\n         if (state == state_ready && sc->nonce_size > 0 && !fZeroStartingNonce) {\n@@ -138,10 +139,10 @@ class sha256 : public pow {\n         ticks_left = ticks;\n         solution_ref s(new solution());\n         switch (sc->nonce_size) {\n-        case 0: if (is_valid(*s)) { cb->found_solution(*this, c, s); } return;\n-        case 4: solve_t((uint32_t)next_nonce); return;\n-        case 8: solve_t(next_nonce); return;\n-        default: return; // we don't support this nonce size\n+        case 0: if (is_valid(*s)) { cb->found_solution(*this, c, s); return true; } return false;\n+        case 4: return solve_t((uint32_t)next_nonce);\n+        case 8: return solve_t(next_nonce);\n+        default: return false; // we don't support this nonce size\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "093bae676839dd5358df5f3f72ffdbe563825305",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTNiYWU2NzY4MzlkZDUzNThkZjVmM2Y3MmZmZGJlNTYzODI1MzA1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T04:58:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[pow] Solvers now return success state.",
      "tree": {
        "sha": "4e0c95ca5f41691d6b66ba20f27d039781281e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e0c95ca5f41691d6b66ba20f27d039781281e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/093bae676839dd5358df5f3f72ffdbe563825305",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyIbSA/8Dsp/EB85z1iYoW++jgAo8sBEGWQ7v0ATXlbSaRuoPDKULAm9yyzbnmId\n82EeoR/fw0BRkfTtg8t+4E/yxjvjlMyaoOBn+cChztAk7FH/xagHASVT6ZSNV2am\nnuTnDZikCZNHYxCtVyQYB2pYQ90eTKXmd3T484ENA2Mr1XokN1XtJyMmdEy+NjyD\nF3CXhTdhaoUjr8rZVg5YMoFayNSnX/oEG6bpxI2ZlPwwBqhwLDW83bKMK99slLSq\nHBpSm7batQ5G/OHFig4TWJ0ap0kDACpIZIBeRyE79bFIBmVa1Y6a15Ez+lBp7EP8\njmcQSzJu1st9GF29ReB2Zc6Nc8pOS3t4gO+98HAYNER4zTT7VWK2PaRfSfPts/SC\nuVKF96/rjSbXKNPxZ7xjjX/PNeIkEDbCCh8tqgQASfXkJdT0y4ORaJbI0zDd4Qmz\nB9Tq9eh12WZFn9SNmB3izw9e/eMBnyv7ow3/KNpBOhXAb1NC02KX88awuNE7Vvd7\n8ZuL6bEyuFRK+YEnYVBrx5IPUxkV3lyeTVtH5lmluk2ciXqfMamGeY+ioeXuFUBY\nzTCsOWqdRR/svOg4kMBkxSZ6dThyj3UONJWtD1AXqcue/FavL/s5S9cBwudCk19J\n+Bv9D/MSaGH8mINcYFEFKI5L1qBo1AD5WMumIHh550fO/ZLm3QI=\n=Bi3l\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e0c95ca5f41691d6b66ba20f27d039781281e3a\nparent 65bdfc36e3e2fa454e31e0554258c5e75f9e03b8\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811499 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[pow] Solvers now return success state.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093bae676839dd5358df5f3f72ffdbe563825305",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/093bae676839dd5358df5f3f72ffdbe563825305",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093bae676839dd5358df5f3f72ffdbe563825305/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65bdfc36e3e2fa454e31e0554258c5e75f9e03b8"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "45a1922b8bd594713fb9a7978266b218c4c050c7",
        "filename": "src/pow/pow.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/093bae676839dd5358df5f3f72ffdbe563825305/src/pow/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/093bae676839dd5358df5f3f72ffdbe563825305/src/pow/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/pow.h?ref=093bae676839dd5358df5f3f72ffdbe563825305",
        "patch": "@@ -140,9 +140,8 @@ class pow {\n \n     /**\n      * Determine if s is a valid solution to c.\n-     * @param  s             A solution to this POW\n-     * @param  noncePosition -1 if nonce is embedded in solution, otherwise the byte position in the challenge which indicates the nonce\n-     * @return               Whether the solution solves the challenge.\n+     * @param  s A solution to this POW\n+     * @return   Whether the solution solves the challenge.\n      */\n     virtual bool is_valid(solution& s) const = 0;\n \n@@ -157,11 +156,12 @@ class pow {\n      * Attempt to solve c in the given number of threads over the given number\n      * of ticks. Whenever a solution is found, cb.found_solution is called with\n      * the given solution.\n-     * @param threads    The number of threads to spin up to solve.\n-     * @param background If true, the solver will create a new thread and work from there, returning control to the caller immediately.\n-     * @param ticks      Number of ticks (cycles) to attempt before temporarily pausing. If -1, unlimited.\n+     * @param  threads    The number of threads to spin up to solve.\n+     * @param  background If true, the solver will create a new thread and work from there, returning control to the caller immediately.\n+     * @param  ticks      Number of ticks (cycles) to attempt before temporarily pausing. If -1, unlimited.\n+     * @return            True if some solution was found before return, false otherwise (always false for background = true).\n      */\n-    virtual void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) = 0;\n+    virtual bool solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) = 0;\n \n     /**\n      * Stop solving.\n@@ -218,10 +218,11 @@ class powchain : public pow, public callback {\n         pows.back()->set_output(s, output);\n     }\n \n-    void solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n+    bool solve(uint32_t threads = 0, bool background = false, int32_t ticks = -1) override {\n         pows.back()->cb = callback_ref(new callback_proxy(this));\n-        pows.back()->solve(threads, false, ticks);\n+        bool r = pows.back()->solve(threads, false, ticks);\n         state = pows.back()->state; // TODO: deal with background case (right now using false for background always)\n+        return r;\n     }\n \n     int64_t expected_iteration_cycles() const override {"
      }
    ]
  },
  {
    "sha": "46c586e9d4171b1834644482e07025191a6356a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM1ODZlOWQ0MTcxYjE4MzQ2NDQ0ODJlMDcwMjUxOTFhNjM1NmE0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T04:59:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:06Z"
      },
      "message": "[chain] Added C4 network parameters.",
      "tree": {
        "sha": "05370c56f08ff1621d9526b11567efa3cb89f190",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05370c56f08ff1621d9526b11567efa3cb89f190"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c586e9d4171b1834644482e07025191a6356a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HoACgkQV692LbM1\nMyJkFg//cKyPwaDWIV6BznrxSb38+DZQMnvVzaRFCsfVFxKEwH6Fea0duckwJSYB\nmWTsW3ZeN/uy82mynyGBDJTl5LLdwq51wLMuQDft+Ix9gyGnjidWCSqxeG6ViW0V\nildcnTt3szZhGF8ccYIvgz+z0c/V+IfDUCF4uhN0sxlNtNnWjO/Vg+fqUOoIrtsV\nKd7agLEJp7SqweijjZkKrOyJzwdohITr6HyUfGvaCGXzlfwEjuFcDT6KJj89+dqm\nLokB9DCEFytqfu1IaQJHFwMFfTinmGaR3swicAWswI8QCHpcDKC/7eZJ08BJjBD3\ntlDPP5QuBULfaJDCLc8XWrkNSqo+minAhHnAfOPpm8iP5pQaQHbEVkoa4CHt2EoB\nijrm2wwOI1xJqCy8Lc6kGO/T2Xbf/w/vWAm5PPCU6yQO+zKUllaWe8Bk8a3NoStg\ns/U/KXThX8tBgitKSzCyIGYpuXz1MSyQo93eo7BwFH72JUdYfkr65HDy11tXZsSb\nytIPUuU0Gwn1Ynuo7uxIHHwIe8STWG5rn7RixZJmqof0V/gE5l24irtwnKtMRXLy\nWKJDuNEex/Zm/MIB2SHhJSH9qst8sDSgKMBTsgn0SA/RbEZqgM8W6ZK8d1+dvRsH\n7++JPStLJ8C3UDjuL9HXqedCXGeJQ7DesuxDuKtAGobUKIZ+62o=\n=fU+2\n-----END PGP SIGNATURE-----",
        "payload": "tree 05370c56f08ff1621d9526b11567efa3cb89f190\nparent 093bae676839dd5358df5f3f72ffdbe563825305\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811546 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920506 +0900\n\n[chain] Added C4 network parameters.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c586e9d4171b1834644482e07025191a6356a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c586e9d4171b1834644482e07025191a6356a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c586e9d4171b1834644482e07025191a6356a4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "093bae676839dd5358df5f3f72ffdbe563825305",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093bae676839dd5358df5f3f72ffdbe563825305",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/093bae676839dd5358df5f3f72ffdbe563825305"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 38,
      "deletions": 29
    },
    "files": [
      {
        "sha": "7133c5070d7a54026cd4ce18cd7edf78c4a8f3f7",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c586e9d4171b1834644482e07025191a6356a4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c586e9d4171b1834644482e07025191a6356a4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=46c586e9d4171b1834644482e07025191a6356a4",
        "patch": "@@ -48,13 +48,15 @@ static void DetermineNonce(CBlock block, uint32_t nBits)\n     uint64_t iters = 0;\n     block.nNonce = 0;\n     uint32_t noncePoint = block.nNonce;\n-    arith_uint256 hash = UintToArith256(block.GetHash());\n-    arith_uint256 bnLowest = hash;\n     uint64_t progressIter = 0;\n     std::string targetValueString = bnTarget.ToString();\n-    while (!block.CheckProofOfWork(true) || bnTarget <= hash) {\n+    bool proven = block.CheckProofOfWork(true);\n+    arith_uint256 hash = UintToArith256(block.GetHash());\n+    arith_uint256 bnLowest = hash;\n+    while (!proven || bnTarget <= hash) {\n+        printf(\"hash: %s\\n\", hash.ToString().c_str());\n         progressIter++;\n-        if (hash < bnLowest) {\n+        if (proven && hash < bnLowest) {\n             bnLowest = hash;\n             printf(\"Progress after %llu iterations (%s):\\n\", progressIter, TimeDiff(difftime(time(0), lastprog)).c_str());\n             progressIter = 0;\n@@ -68,20 +70,25 @@ static void DetermineNonce(CBlock block, uint32_t nBits)\n             block.nTime++;\n             printf(\"- iterated over all nonce values; updating nTime -> %u\\n\", block.nTime);\n         }\n-        if (iters % 10000000 == 0) {\n+        // if (iters % 10 == 0) {\n             printf(\"- %llu iters [%u] (last prog %s ago)\\n\", iters, block.nNonce, TimeDiff(difftime(time(0), lastprog)).c_str());\n-        }\n+        // }\n+        proven = block.CheckProofOfWork(true);\n         hash = UintToArith256(block.GetHash());\n+        printf(\"proven -> %s, hash -> %s\\n\", proven ? \"true\" : \"false\", hash.ToString().c_str());\n     }\n     printf(\"Took %s\\n\", TimeDiff(difftime( time(0), start)).c_str());\n     printf(\"   %s\\n>= %s\\n\", bnTarget.ToString().c_str(), block.GetHash().ToString().c_str());\n     printf(\"... after %llu iters, nonce = %u; hash = %s\\n\", iters, block.nNonce, HexStr(block.GetHash()).c_str());\n-    printf(\"genesis = CreateGenesisBlock(%u, %u, ...);\\n\", block.nTime, block.nNonce);\n+    printf(\"std::vector<uint32_t> vEdges{\");\n+    for (size_t i = 0; i < block.vEdges.size(); i++) printf(\"%s%u\", i ? \", \" : \"\", block.vEdges[i]);\n+    printf(\"};\\n\");\n+    printf(\"genesis = CreateGenesisBlock(%u, %u, ..., cycle);\\n\", block.nTime, block.nNonce);\n     printf(\"assert(consensus.hashGenesisBlock == uint256S(\\\"0x%s\\\"));\\n\", block.GetHash().ToString().c_str());\n     printf(\"assert(genesis.hashMerkleRoot == uint256S(\\\"0x%s\\\"));\\n\", block.hashMerkleRoot.ToString().c_str());\n }\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, uint32_t* cycle = nullptr)\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, std::vector<uint32_t>* vpCycles = nullptr)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -99,7 +106,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n     genesis.hashPrevBlock.SetNull();\n     genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n-    if (cycle) memcpy(genesis.cycle, cycle, sizeof(uint32_t) * 42);\n+    if (vpCycles) genesis.vEdges = *vpCycles; // memcpy(genesis.cycle, cycle, sizeof(uint32_t) * 42);\n     if (DetermineNonceRequired(genesis, nBits)) {\n         DetermineNonce(genesis, nBits);\n     }\n@@ -117,11 +124,11 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n-static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, uint32_t* cycle = nullptr)\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, std::vector<uint32_t>* vpCycles = nullptr)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward, cycle);\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward, vpCycles);\n }\n \n void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n@@ -251,7 +258,7 @@ class CC4Params : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 0; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 0; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n-        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.powLimit = uint256S(\"7fffff0000000000000000000000000000000000000000000000000000000000\");\n         consensus.nPowTargetTimespan = 60 * 60; // 1 hour\n         consensus.nPowTargetSpacing = 1 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n@@ -290,10 +297,23 @@ class CC4Params : public CChainParams {\n         nDefaultPort = 9232;\n         nPruneAfterHeight = 100000;\n \n-        uint32_t cycle[42] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n-        genesis = CreateGenesisBlock(1496312816, 0, 0x207fffff, 1, 50 * COIN, cycle);\n+        std::vector<uint32_t> vEdges{\n+            1409485, 3789529, 5371692, 6129924, 6681319, 7028467, 8837407, 15464272, 17576893, 19032192, 20577624, 20631626,\n+            21597368, 23555556, 25244627, 25330094, 26483188, 26894653, 28257925, 29032109, 29121948, 32493275, 36840805,\n+            36955569, 38233849, 41333142, 44170781, 45702087, 45746177, 49645459, 52369294, 52789153, 55792309, 56770930,\n+            61727178, 64753429, 65493219, 67285582, 68759304, 78275336, 82306507, 83680274, 84590365, 84753477, 85478477,\n+            86256972, 88510298, 88900836, 90473349, 97441439, 98687694, 100474176, 109541059, 116372748, 122000550,\n+            122413502, 123392522, 123616273\n+        };\n+        // uint32_t powCompact = UintToArith256(consensus.powLimit).GetCompact();\n+        // printf(\n+        //     \"compact %s\\n\"\n+        //     \"=       0x%08x\\n\"\n+        //     , consensus.powLimit.ToString().c_str(), powCompact\n+        // );\n+        genesis = CreateGenesisBlock(1496312816, 1, 0x207fffff, 1, 50 * COIN, &vEdges);\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x437840ad883e641b9659c8a70cb0e2c19466d9d0386dc323ee73e36c252694b0\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         // Note that of those with the service bits flag, most only support a subset of possible options\n@@ -310,7 +330,8 @@ class CC4Params : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n@@ -319,19 +340,6 @@ class CC4Params : public CChainParams {\n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-            // ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-            // ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-            // ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-            // (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-            // (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-            // (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-            // (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-            // (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-            // (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-            // (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-            // (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-            // (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-            // (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n         };\n \n         chainTxData = ChainTxData{"
      },
      {
        "sha": "1c4a15b749a19aae3e9040f705b9631ae311b4d3",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c586e9d4171b1834644482e07025191a6356a4/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c586e9d4171b1834644482e07025191a6356a4/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=46c586e9d4171b1834644482e07025191a6356a4",
        "patch": "@@ -46,6 +46,7 @@ class CBaseC4Params : public CBaseChainParams\n     CBaseC4Params()\n     {\n         nRPCPort = 9232;\n+        strDataDir = \"c4\";\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGMxZGI1ODJiMGMyZDRhN2NmNzNlNjdjMjRkNTc4MTdmNGFlMmJm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T04:59:52Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "[pow] Added support for CC in blocks as well as primitive mining functionality.",
      "tree": {
        "sha": "aa2b229fb9326165a8680a4e7c5d4f49b05fdc8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa2b229fb9326165a8680a4e7c5d4f49b05fdc8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyIa+Q/+OVR2H/ldqGqvfJyCSto15saJTzsUMXKqKWiT4llrhuxh449/EePoYJqQ\nbXRLxYqpIFLzZ+U0eEv0VKe8O9h3I6kDtDicQZz5+UyN4ZnZGvip2is9vzFJDC+u\n0SW3SNyAvHWbnK3pZ4tXDrF+yLKKZs2kKN6NoJhxZhetSGBTzipRQV5LyjJ+xMa3\ns5Hem6iU/NxdlvRwMt+OdQVrA/5hH79ASC57nmGdDI7CNHHrgixePIRQKd7FQMCB\nOwY/FfNbBbbe1JgWnK3qDVvp5i0AfONL7Z+QURIXlsi/F/LzCzrzcztUWw5nIDHs\nBkobuW8BoWpKinumxqAZUvz1WNheTQzs0mKLIuK/U68ZtV3LzWl5Hm4dtsR/5Uju\npeO+XmY7OEdzP/Qd9mVVhhI0FVZ9Yaugeh3NDTwMYe1pYXzQgEG8pqpYYpaBVVCh\n4DIx2OpC+rTIMWQaF6AMf0yLeQIEModG/8bVRL6KZm7KeP9W4UmTrL6W/qAjsZtO\nzx2V2sXRwVxfva9dchtl+dhGSxYX2yNyMn30Wx4rQr1LnVfGz20GRP+FCmxwf60R\nTpJYzwQ/34BAM1madrIGiWIPKhnjdIgqGt1Vx5ED+jHeD4GUXna1dle0WCd7O1Jy\n23NQA6vbGZJjtMYicc0KjdJQdxTI5ifEdcf4rKx2SfWD96uYZCU=\n=qNv+\n-----END PGP SIGNATURE-----",
        "payload": "tree aa2b229fb9326165a8680a4e7c5d4f49b05fdc8d\nparent 46c586e9d4171b1834644482e07025191a6356a4\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811592 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\n[pow] Added support for CC in blocks as well as primitive mining functionality.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46c586e9d4171b1834644482e07025191a6356a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c586e9d4171b1834644482e07025191a6356a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46c586e9d4171b1834644482e07025191a6356a4"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 72,
      "deletions": 1
    },
    "files": [
      {
        "sha": "28948434522a58cbc257ccd17a30941353930f4c",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
        "patch": "@@ -9,12 +9,67 @@\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n #include \"crypto/common.h\"\n+#include \"pow/cuckoo_cycle/cuckoo_cycle.h\"\n+\n+bool CBlockHeader::found_solution(const powa::pow& p, powa::challenge_ref c, powa::solution_ref s)\n+{\n+    // copy solution into cycles\n+    vEdges.resize(s->params.size() / 4);\n+    memcpy(&vEdges[0], &s->params[0], s->params.size());\n+    // call it a day; we may lose some solutions for this nonce but whatevs\n+    solver = nullptr;\n+    return true;\n+}\n \n uint256 CBlockHeader::GetHash() const\n {\n     return SerializeHash(*this);\n }\n \n+std::vector<uint8_t> CBlockHeader::GetData() const\n+{\n+    std::vector<uint8_t> vhdr;\n+    vhdr.resize(80);\n+    uint8_t* hp = vhdr.data();\n+    *(int32_t*)hp = nVersion;                   hp += 4;    // 4\n+    memcpy(hp, hashPrevBlock.begin(), 32);      hp += 32;   // 36\n+    memcpy(hp, hashMerkleRoot.begin(), 32);     hp += 32;   // 68\n+    *(uint32_t*)hp = nTime;                     hp += 4;    // 72\n+    *(uint32_t*)hp = nBits;                     hp += 4;    // 76\n+    *(uint32_t*)hp = nNonce;                                // 80\n+    return vhdr;\n+}\n+\n+bool CBlockHeader::CheckProofOfWork(bool searchCycle, bool background)\n+{\n+    vEdges.clear();\n+    auto challenge = powa::cuckoo_cycle::cc_challenge_ref(new powa::cuckoo_cycle::cc_challenge(28, 28, 128, GetData()));\n+    printf(\"CheckProofOfWork :: \");\n+    for (int i = 0; i < 80; i++) printf(\"%02x\", challenge->params[i]);\n+    printf(\"\\n\");\n+\n+    if (searchCycle) {\n+        powa::cuckoo_cycle::cuckoo_cycle cc(challenge, powa::callback_ref(new powa::callback_proxy(this)), false);\n+        if (background) {\n+            cc.solve(1, true, 1);\n+            return false;\n+        }\n+        if (!cc.solve()) return false; // no sols found\n+    }\n+\n+    if (vEdges.size() < 28) vEdges.resize(28);\n+    std::vector<uint8_t> data;\n+    data.resize(vEdges.size() * sizeof(uint32_t));\n+    memcpy(&data[0], &vEdges[0], vEdges.size() * sizeof(uint32_t));\n+    printf(\"data  = \"); for (int i = 0; i < 4; i++) printf(\"%02x\", data[i]); printf(\"...\\n\");\n+    printf(\"cycle = %08x, ...\\n\", vEdges[0]);\n+    uint32_t a = *(uint32_t*)&data[0];\n+    assert(a == vEdges[0]);\n+\n+    auto solution = powa::solution(data);\n+    return powa::cuckoo_cycle::cuckoo_cycle(challenge, nullptr, false).is_valid(solution);\n+}\n+\n std::string CBlock::ToString() const\n {\n     std::stringstream s;"
      },
      {
        "sha": "c94c53c04d2291d08127dc74cb344046c3451431",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
        "patch": "@@ -9,6 +9,7 @@\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"pow/pow.h\"\n \n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n@@ -17,7 +18,7 @@\n  * in the block is a special one that creates a new coin owned by the creator\n  * of the block.\n  */\n-class CBlockHeader\n+class CBlockHeader : powa::callback\n {\n public:\n     // header\n@@ -27,6 +28,7 @@ class CBlockHeader\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n+    std::vector<uint32_t> vEdges; // cuckoo cycle edges\n \n     CBlockHeader()\n     {\n@@ -43,6 +45,11 @@ class CBlockHeader\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n+        READWRITE(vEdges);\n+        if (ser_action.ForRead())\n+            printf(\"CBlockHeader (prev=%s) read %lu edges\\n\", hashPrevBlock.ToString().c_str(), vEdges.size());\n+        else\n+            printf(\"CBlockHeader (prev=%s) writing %lu edges\\n\", hashPrevBlock.ToString().c_str(), vEdges.size());\n     }\n \n     void SetNull()\n@@ -62,6 +69,14 @@ class CBlockHeader\n \n     uint256 GetHash() const;\n \n+    std::vector<uint8_t> GetData() const;\n+\n+    bool found_solution(const powa::pow& p, powa::challenge_ref c, powa::solution_ref s) override;\n+\n+    bool CheckProofOfWork(bool searchCycle = false, bool background = false);\n+\n+    bool ProofAvailable() { return vEdges.size() > 0; }\n+\n     int64_t GetBlockTime() const\n     {\n         return (int64_t)nTime;\n@@ -113,6 +128,7 @@ class CBlock : public CBlockHeader\n         block.nTime          = nTime;\n         block.nBits          = nBits;\n         block.nNonce         = nNonce;\n+        block.vEdges         = vEdges;\n         return block;\n     }\n "
      }
    ]
  },
  {
    "sha": "749671be83ecdb73d670ab38ad298ad1707f6456",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDk2NzFiZTgzZWNkYjczZDY3MGFiMzhhZDI5OGFkMTcwN2Y2NDU2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T05:00:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "Updated Makefile.",
      "tree": {
        "sha": "69f4f2ec1d5cb0c74ae6f1ebcfe6dcea70d2ca20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f4f2ec1d5cb0c74ae6f1ebcfe6dcea70d2ca20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/749671be83ecdb73d670ab38ad298ad1707f6456",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyKUmg//YGYd1gJO1CQX3I4+8mBGzWf0xzJvzHPOszlmudbgwFnIMbh6rwD/uEwe\n516bqAIeRDo+JUZUR4JdZoWUGZgfxVd5uYv8Il1PcQ7EBqT+N8iLpGY9LtYDFar4\nfhDvag0766ZI5kd1bEEKPnsdl0peFWng86bkFapvtHoSi3McYkhmAg2nejkFoPMN\nUk62yFES7xUqUR5WIZ+/TZ4uFke2ssAxK6n0QhAxlohxhUYghbcdwFYmwUsdIlRG\n9oBE7AQEivC760njXWdNwU0lsrAsvL4hNkB89arBCBzwssCjJZjWpNU3LYNfz+EQ\nXpsZZM7bqLk3UcHxYYNLDVkaVqFcAbSiCSRB1j+oXhszGIeNX3Hq5F058wqQJil/\nSVP6Pdkho9pqag3oQhiK6UQCoj1jdZopJrn7q32D7WO+UOATG6L6EEhrBEMbeqdk\n2VOSmQZ5M8PbkbGBrRvktx7oWU7h4aP1K5ZKS/MhAzhS4eptO/QHmh7awRqUFIwf\nWcnjJu76KNKC8NXjdHW89AZ70YpbnXSVL5U9BhJQwDXyFJIOTShQkMYbyaA+BlY0\nXW3wCo4E345nkqGKo4qjWR2+3eB1U4xa4WoSqL218XbmdTcv04hl7rBT2ErpFBZK\nzWAexCZLchC6gZDLKf226zmIu2BltnpsFr83E+zOKwIuzPb/1ow=\n=TLbk\n-----END PGP SIGNATURE-----",
        "payload": "tree 69f4f2ec1d5cb0c74ae6f1ebcfe6dcea70d2ca20\nparent 44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811610 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\nUpdated Makefile.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749671be83ecdb73d670ab38ad298ad1707f6456",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/749671be83ecdb73d670ab38ad298ad1707f6456",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749671be83ecdb73d670ab38ad298ad1707f6456/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44c1db582b0c2d4a7cf73e67c24d57817f4ae2bf"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f58cb1910fd81677fb9d20f13446735507210a24",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/749671be83ecdb73d670ab38ad298ad1707f6456/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/749671be83ecdb73d670ab38ad298ad1707f6456/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=749671be83ecdb73d670ab38ad298ad1707f6456",
        "patch": "@@ -287,6 +287,10 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\\n+  pow/cuckoo_cycle/cuckoo_cycle.cpp \\\n+  pow/cuckoo_cycle/cuckoo_cycle.h \\\n+  pow/pow.cpp \\\n+  pow/pow.h \\\n   prevector.h \\\n   primitives/block.cpp \\\n   primitives/block.h \\\n@@ -325,6 +329,7 @@ libbitcoin_common_a_SOURCES = \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n   pow/cuckoo_cycle/cuckoo_cycle.cpp \\\n+  pow/pow.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/sign.cpp \\"
      }
    ]
  },
  {
    "sha": "e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWQ1ZDE1NTZiNWQ3YjMzYzJkZGQ2OThiMDE2NGE1ZDcyNmJiMDYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T05:01:16Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "Edge ivars and started work on bg mining interrupted mid-nonce upon new chain active tip.",
      "tree": {
        "sha": "73ef8e6839aabba4f0f75f6b860d428186a5bbeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73ef8e6839aabba4f0f75f6b860d428186a5bbeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyLdkQ//TDLIalqAFqEWTZv1Dv1VDEy0SLf+9h8VJM+FOeE65oZE+l0H1Tz78jR/\nXIAC0tvEYR0NaR/F8z+jQkzPJLkhfucuoz1UylxcwdPnz2PjQpgrygFRENDKvZvE\nh7ho4KuH5D8Zl2ltOKjaqWyn+RUHP4pRiTQzmDbquHd8/hNERojondLNAmMqvepe\nTLYMep7E/Asfx6DHAUoSS/uCwM2hn7fajbMmCEgSZCRf858rNLYC3X+wxw2UAmSr\nRe8pKZzPZT0Fqzy0nMD5WBADBsGh9J8vKrU0sxkuuyW5IInikIIXDIMWV8god/RL\nb/9+qquvAltB9UtWKlgVDHCYa19yMYHUUIAr9CiWih0kPRUcJn+DEC+8njn/KFSs\nKxTZbx90hu+n2/Hi41hW6MvOefcVWWK1VeMT4AXuh2cW5f3rRQNqwVvuEoOpo4w7\n+uzOXUJSDh+N1lGDuh06EH3929h78/xv7owpBNBYQFSuK5+SbS2LrVIYiJVs4Dt1\neDOkHEOlgg227c7cLRaNazlppdy5tFjiKlkk9PHm8UjE1Ga9tGZfOxcGBObMyYME\naXu7Pgcs6IwH+bF+0az1r2enJOUINrYo2HmYxtplvDt2mKE3gtkcr7js8wW3z8vq\n8yvGYD5DmabBeRcg1BOyT+9gdhZUl//h7jmOEsPH+DNIgzRCaIY=\n=mhpW\n-----END PGP SIGNATURE-----",
        "payload": "tree 73ef8e6839aabba4f0f75f6b860d428186a5bbeb\nparent 749671be83ecdb73d670ab38ad298ad1707f6456\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496811676 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\nEdge ivars and started work on bg mining interrupted mid-nonce upon new chain active tip.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "749671be83ecdb73d670ab38ad298ad1707f6456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749671be83ecdb73d670ab38ad298ad1707f6456",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/749671be83ecdb73d670ab38ad298ad1707f6456"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 40,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a123230d45f509dc6040046f127fc547449b4bad",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "patch": "@@ -212,6 +212,7 @@ class CBlockIndex\n     unsigned int nTime;\n     unsigned int nBits;\n     unsigned int nNonce;\n+    std::vector<uint32_t> vEdges;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     int32_t nSequenceId;\n@@ -240,6 +241,7 @@ class CBlockIndex\n         nTime          = 0;\n         nBits          = 0;\n         nNonce         = 0;\n+        vEdges.clear();\n     }\n \n     CBlockIndex()\n@@ -256,6 +258,7 @@ class CBlockIndex\n         nTime          = block.nTime;\n         nBits          = block.nBits;\n         nNonce         = block.nNonce;\n+        vEdges         = block.vEdges;\n     }\n \n     CDiskBlockPos GetBlockPos() const {\n@@ -286,6 +289,7 @@ class CBlockIndex\n         block.nTime          = nTime;\n         block.nBits          = nBits;\n         block.nNonce         = nNonce;\n+        block.vEdges         = vEdges;\n         return block;\n     }\n \n@@ -405,6 +409,7 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n+        READWRITE(vEdges);\n     }\n \n     uint256 GetBlockHash() const\n@@ -416,6 +421,7 @@ class CDiskBlockIndex : public CBlockIndex\n         block.nTime           = nTime;\n         block.nBits           = nBits;\n         block.nNonce          = nNonce;\n+        block.vEdges          = vEdges;\n         return block.GetHash();\n     }\n "
      },
      {
        "sha": "1d0fb36c68047d726997c670ddeacb68b80920a4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "patch": "@@ -48,8 +48,13 @@ extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n \n double GetDifficulty(const CBlockIndex* blockindex)\n {\n-    if (blockindex == NULL)\n-    {\n+    // Floating point number that is a multiple of the minimum difficulty,\n+    // minimum difficulty = 1.0.\n+    uint32_t compactPowLimit = UintToArith256(Params().GetConsensus().powLimit).GetCompact();\n+    int shiftTarget = (compactPowLimit & 0xff000000) >> 24;\n+    uint32_t rem = compactPowLimit  & 0x00ffffff;\n+\n+    if (blockindex == NULL) {\n         if (chainActive.Tip() == NULL)\n             return 1.0;\n         else\n@@ -59,15 +64,13 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     int nShift = (blockindex->nBits >> 24) & 0xff;\n \n     double dDiff =\n-        (double)0x0000ffff / (double)(blockindex->nBits & 0x00ffffff);\n+        (double)rem / (double)(blockindex->nBits & 0x00ffffff);\n \n-    while (nShift < 29)\n-    {\n+    while (nShift < shiftTarget) {\n         dDiff *= 256.0;\n         nShift++;\n     }\n-    while (nShift > 29)\n-    {\n+    while (nShift > shiftTarget) {\n         dDiff /= 256.0;\n         nShift--;\n     }\n@@ -136,6 +139,11 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n     result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n+    UniValue edges(UniValue::VARR);\n+    for (uint32_t edge : block.vEdges) {\n+        edges.push_back((uint64_t)edge);\n+    }\n+    result.push_back(Pair(\"edges\", edges));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n \n@@ -717,6 +725,7 @@ UniValue getblock(const JSONRPCRequest& request)\n             \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"edges\\\" : [...],     (array) Edges making up cuckoo cycle\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n             \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\""
      },
      {
        "sha": "bf083f1be443b471cafa6fcf1a98883d54212934",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "patch": "@@ -94,6 +94,22 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n+void mine(uint32_t timeoutSeconds)\n+{\n+    boost::system_time checkblktime = boost::get_system_time() + boost::posix_time::seconds(timeoutSeconds);\n+\n+    boost::unique_lock<boost::mutex> lock(csBestBlock);\n+    CBlockIndex* tip = chainActive.Tip();\n+    while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning()) {\n+        if (!cvBlockChange.timed_wait(lock, checkbkltime)) {\n+            // Timeout: Check transactions for update\n+            if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n+                break;\n+            checkblktime += boost::posix_time::seconds(10);\n+        }\n+    }\n+}\n+\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n     static const int nInnerLoopCount = 0x10000;\n@@ -117,7 +133,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && (!pblock->CheckProofOfWork(true) || !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))) {\n             ++pblock->nNonce;\n             --nMaxTries;\n         }"
      },
      {
        "sha": "8e9a46d0889ded98456a6421a9bffa7ab1904641",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "patch": "@@ -283,6 +283,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n                 pindexNew->hashMerkleRoot = diskindex.hashMerkleRoot;\n                 pindexNew->nTime          = diskindex.nTime;\n                 pindexNew->nBits          = diskindex.nBits;\n+                pindexNew->vEdges         = diskindex.vEdges;\n                 pindexNew->nNonce         = diskindex.nNonce;\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;"
      }
    ]
  },
  {
    "sha": "12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmUxOWI1ZjA1YWJhMmZlZGY5YmQzMmYyYzVhMjQ2ZTU2MmJjYzc5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T05:52:07Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "[pow] Background mining.",
      "tree": {
        "sha": "a25d21dcedf6bb01576b14768b8090ef46a7699e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a25d21dcedf6bb01576b14768b8090ef46a7699e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyL7OQ//XaZfSxGE5z25ABUxptd1hm7IeV3nhPaOKMiBUyATMS9FhtfGEU01nvBu\nlpmai22nP7/72PuTmr6t3JtoBNGtU+px4mS9+m40ooKHIx2gnLmeR8b5qbguzh8s\nMudd0572JHdYT8vZNp3qcXeRcsB5UBg3VIQ3DJMmMD/LpFEFdHWHfzWCDlQbDjTF\ny6NGfGcJNRKyi3cetmycGqL++1FNpPO+q3FJc6hVoH1TI8VYF9+okY2jrB3n1otU\nQ+HNpr5RsEApIU60i4gGsX9bTQTod2eT4LRphiyM1B0TLSBX1DV+taquQuHFiWRh\n3fHV1edSkjDatBUrXfAXZU+7fNpyIs9hP0B9qBHdMvhyd/TeqI4N8OCAIQwTu/st\nn0SQ8oO32zWZnnX90Hpy+BeGgb5RkLHCMPtWPZJJact/GUv8DHqm4t676UiqXP4j\nLnpJHygvwiliD93pVJkNSlDfP2Y2CyOno/L88CabZTOJOIuCJ8FR42RBFdtT3iBx\nwwQKECpBP/e+sMHjLjqk28gh2H5aooy86NAJEO/QOYxfFYgmqQlKbpPmqexwlhcA\n/NuXRUaA4yADdQfZuNQcbNTTL5zxdxnc5jbE3BZIGkic5+Y3Em3Us+rbiE8NIqQh\nsXsIvlVkVddRA4kwiGV96Rck6+ByAjyj0UUFcdgJywU3fKv0hd8=\n=Pksg\n-----END PGP SIGNATURE-----",
        "payload": "tree a25d21dcedf6bb01576b14768b8090ef46a7699e\nparent e9d5d1556b5d7b33c2ddd698b0164a5d726bb060\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496814727 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\n[pow] Background mining.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9d5d1556b5d7b33c2ddd698b0164a5d726bb060"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "aaa6144edb67abe208bf9d51ef36d69fe69cb757",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
        "patch": "@@ -42,19 +42,19 @@ std::vector<uint8_t> CBlockHeader::GetData() const\n \n bool CBlockHeader::CheckProofOfWork(bool searchCycle, bool background)\n {\n-    vEdges.clear();\n     auto challenge = powa::cuckoo_cycle::cc_challenge_ref(new powa::cuckoo_cycle::cc_challenge(28, 28, 128, GetData()));\n     printf(\"CheckProofOfWork :: \");\n     for (int i = 0; i < 80; i++) printf(\"%02x\", challenge->params[i]);\n     printf(\"\\n\");\n \n     if (searchCycle) {\n-        powa::cuckoo_cycle::cuckoo_cycle cc(challenge, powa::callback_ref(new powa::callback_proxy(this)), false);\n+        vEdges.clear();\n+        solver = std::shared_ptr<powa::cuckoo_cycle::cuckoo_cycle>(new powa::cuckoo_cycle::cuckoo_cycle(challenge, powa::callback_ref(new powa::callback_proxy(this)), false));\n         if (background) {\n-            cc.solve(1, true, 1);\n+            solver->solve(1, true, 1);\n             return false;\n         }\n-        if (!cc.solve()) return false; // no sols found\n+        if (!solver->solve()) return false; // no sols found\n     }\n \n     if (vEdges.size() < 28) vEdges.resize(28);"
      },
      {
        "sha": "8bbb4a715fb5872576bcb7a580d5a308525fedcd",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
        "patch": "@@ -29,6 +29,7 @@ class CBlockHeader : powa::callback\n     uint32_t nBits;\n     uint32_t nNonce;\n     std::vector<uint32_t> vEdges; // cuckoo cycle edges\n+    std::shared_ptr<powa::pow> solver; // solver, if currently finding a solution, otherwise NULL\n \n     CBlockHeader()\n     {\n@@ -60,6 +61,7 @@ class CBlockHeader : powa::callback\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;\n+        solver = nullptr;\n     }\n \n     bool IsNull() const\n@@ -75,7 +77,9 @@ class CBlockHeader : powa::callback\n \n     bool CheckProofOfWork(bool searchCycle = false, bool background = false);\n \n-    bool ProofAvailable() { return vEdges.size() > 0; }\n+    bool ProofAvailable() { return solver == nullptr && vEdges.size() > 0; }\n+\n+    void StopSolving() { if (solver != nullptr) solver->abort(); }\n \n     int64_t GetBlockTime() const\n     {"
      },
      {
        "sha": "5f7de39239bb770f4d1f40c6a445ccba09a988ad",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
        "patch": "@@ -94,20 +94,19 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n-void mine(uint32_t timeoutSeconds)\n+bool processNonce(CBlock* pblock)\n {\n-    boost::system_time checkblktime = boost::get_system_time() + boost::posix_time::seconds(timeoutSeconds);\n-\n     boost::unique_lock<boost::mutex> lock(csBestBlock);\n     CBlockIndex* tip = chainActive.Tip();\n-    while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning()) {\n-        if (!cvBlockChange.timed_wait(lock, checkbkltime)) {\n-            // Timeout: Check transactions for update\n-            if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n-                break;\n-            checkblktime += boost::posix_time::seconds(10);\n-        }\n+\n+    pblock->CheckProofOfWork(true, true);\n+\n+    boost::system_time checkblktime = boost::get_system_time() + boost::posix_time::seconds(5);\n+    while (chainActive.Tip() == tip && !pblock->ProofAvailable()) {\n+        cvBlockChange.timed_wait(lock, checkblktime);\n+        checkblktime += boost::posix_time::seconds(5);\n     }\n+    return pblock->CheckProofOfWork();\n }\n \n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -133,7 +132,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && (!pblock->CheckProofOfWork(true) || !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))) {\n+        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && (!processNonce(pblock) || !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))) {\n             ++pblock->nNonce;\n             --nMaxTries;\n         }"
      }
    ]
  },
  {
    "sha": "64d1148e97bb218bcd0622f995f7d0ec548ea409",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGQxMTQ4ZTk3YmIyMThiY2QwNjIyZjk5NWY3ZDBlYzU0OGVhNDA5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-07T10:15:20Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "f'fixes to background solving",
      "tree": {
        "sha": "a24a24e54198599c545832dd31cf289f8a35150d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a24a24e54198599c545832dd31cf289f8a35150d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64d1148e97bb218bcd0622f995f7d0ec548ea409",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyIQSw/8DYMuIijIEFHWM9IqJ2sjRMXB3XBFDA0ghqYLagEiM1Y/bG1AWj9Ei9NS\nA4BOeTBjntj8f8gRXfEYvl/+HIcPvYxMvF7wwZcNQys5cKcuVgrMskp5QVpwF2MP\n9l00s02jvY6GK3dlqNEn94K+DOE+f7IeB6taSjpC0cMI1BYe2wCAHGhFIG5MAZCX\nJDeFLhqUIEdlRhl3gCwYkptmZsNWpH9jWDDTTQPtMkVWxMlrq1KwJWLsmNmm8xj5\nOMqF0r/0N+lfpZHSG1ew9HHtTdbOU86aoLitqq/EBVdHufYt1jJ2adavdL6l41mJ\nZNo9HHP/FX4VHTLUI7eiYmeu3AS+KG5APsF8NwoGMqN0XYpD3Ky+lhTH/dSVFlqt\n9knKmmUjWV3Z+xsXVjYJSzJ5XsnD0vhZqshFhNdwKcZ+ht1w7DFqJrsx5o3GK7vs\nqqDmSw7Z5ahFYtiNmjPEVvQuNwbercrzYquosT6FpD3WyavrmIo+aKm2o8BYdJiE\njPjkJAPMyAV7w6awU29Nu89Rmi3juXNDrcDe4ovHseSQqVsiOp1r6kLysRMGZNA/\nHZ+SNNiNjd7YcPqDGG9DhTZjCrw3vcQspWapL68shg+7hS5lO2g05G5HRD6SG8tz\nXqDd0n9xVcSqOro8VtPYZFarxxqL/j4MGlbHuIuVm52zB3ZCw5k=\n=El8j\n-----END PGP SIGNATURE-----",
        "payload": "tree a24a24e54198599c545832dd31cf289f8a35150d\nparent 12e19b5f05aba2fedf9bd32f2c5a246e562bcc79\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496830520 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\nf'fixes to background solving\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d1148e97bb218bcd0622f995f7d0ec548ea409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64d1148e97bb218bcd0622f995f7d0ec548ea409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d1148e97bb218bcd0622f995f7d0ec548ea409/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12e19b5f05aba2fedf9bd32f2c5a246e562bcc79"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 21,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6059e5f5db442dc9a5eede3967f954ed1d091b04",
        "filename": "src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/pow/cuckoo_cycle/cuckoo_cycle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_cycle.cpp?ref=64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "patch": "@@ -16,10 +16,8 @@ int cuckoo_cycle::last_err = POW_OK;\n \n cuckoo_cycle::~cuckoo_cycle() {\n     if (thread) {\n-        if (state == state_running) {\n-            state = state_term;\n-            thread->join();\n-        }\n+        if (state == state_running) state = state_term;\n+        thread->join();\n         delete thread;\n         thread = nullptr;\n     }\n@@ -46,6 +44,7 @@ bool cuckoo_cycle::solve(uint32_t threads, bool background, int32_t ticks) {\n \n void cuckoo_cycle::abort() {\n     if (pAbort) {\n+        printf(\"*** setting abort flag\\n\");\n         *pAbort = true;\n         pAbort = NULL;\n     }\n@@ -65,21 +64,25 @@ bool cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n     ctx = new cuckoo_ctx(thread_count, ntrims, 8, c->proofsize_min, c->proofsize_max);\n     pAbort = &ctx->abort;\n     while (state == state_running) {\n+        printf(\"CC: solve_async() entering loop\\n\");\n         if (external_nonce) {\n             ctx->setheadernonce(ws, wx, nonce);\n         } else {\n             ctx->prepare(ws);\n         }\n+        printf(\"CC: making threads\\n\");\n         for (uint32_t t = 0; t < thread_count; t++) {\n             threads[t].id = t;\n             threads[t].ctx = ctx;\n             int err = pthread_create(&threads[t].thread, nullptr, worker, (void*)&threads[t]);\n             assert(err == 0);\n         }\n+        printf(\"CC: joining threads\\n\");\n         for (uint32_t t = 0; t < thread_count; t++) {\n             int err = pthread_join(threads[t].thread, nullptr);\n             assert(err == 0);\n         }\n+        printf(\"CC: joined threads; state is %s; got %u solutions\\n\", state == state_running ? \"running\" : \"not running\", ctx->nsols);\n         // if we are aborted due to deallocation we don't want to talk to callback\n         // even if we have solutions, so we break on term\n         if (state != state_running) break;\n@@ -100,10 +103,14 @@ bool cuckoo_cycle::solve_async(uint32_t thread_count) { // asynchronous\n                 break;\n             }\n         }\n+        printf(\"CC: nonce increment\\n\");\n         nonce++;\n         ticks_left -= ticks_left > -1;\n-        if (state == state_running && (ticks_left == 0 || !external_nonce)) state = state_paused;\n+        if (state == state_running && (ticks_left == 0 || !external_nonce)) {\n+            state = state_paused;\n+        }\n     }\n+    printf(\"CC: leaving loop; state = %s\\n\", state == state_term ? \"term\" : state == state_paused ? \"paused\" : \"not term or paused\");\n     if (state == state_term) state = state_aborted;\n     delete ctx;\n     delete [] ws;"
      },
      {
        "sha": "c1536fbb6140ce174df2a9f95021025abef36028",
        "filename": "src/pow/cuckoo_cycle/cuckoo_miner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_miner.h?ref=64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "patch": "@@ -457,6 +457,7 @@ inline void *worker(void *vp) {\n #ifdef SINGLECYCLING\n   else pthread_exit(NULL);\n #else\n+  printf(\"CC: pre-main barrier()\\n\");\n   barrier(&ctx->barry);\n #endif\n   cuckoo_hash &cuckoo = *ctx->cuckoo;\n@@ -492,8 +493,12 @@ inline void *worker(void *vp) {\n       }\n       if (ffs & 64) break; // can't shift by 64\n     }\n+    if (block % (64 * 10000) == 0) {\n+      printf(\"CC: block=%u, abort=%s\\n\", block, ctx->abort ? \"true\" : \"false\");\n+    }\n     if (ctx->abort) pthread_exit(NULL);\n   }\n+  printf(\"CC: finished\\n\");\n   pthread_exit(NULL);\n   return 0;\n }"
      },
      {
        "sha": "fa5ebaac73dc674432e1957ed1ebb0bd4f366a15",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "patch": "@@ -17,7 +17,6 @@ bool CBlockHeader::found_solution(const powa::pow& p, powa::challenge_ref c, pow\n     vEdges.resize(s->params.size() / 4);\n     memcpy(&vEdges[0], &s->params[0], s->params.size());\n     // call it a day; we may lose some solutions for this nonce but whatevs\n-    solver = nullptr;\n     return true;\n }\n "
      },
      {
        "sha": "ec41559659fbdc0a367e1a9f03381d737f052817",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "patch": "@@ -77,7 +77,8 @@ class CBlockHeader : powa::callback\n \n     bool CheckProofOfWork(bool searchCycle = false, bool background = false);\n \n-    bool ProofAvailable() { return solver == nullptr && vEdges.size() > 0; }\n+    bool ProofAvailable() { return vEdges.size() > 0; }\n+    bool IsSolving() { return !ProofAvailable() && solver != nullptr && solver->state == powa::state_running; }\n \n     void StopSolving() { if (solver != nullptr) solver->abort(); }\n "
      },
      {
        "sha": "b3adb53b1de0f4813a03aa3cb5be4abe11b85c16",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d1148e97bb218bcd0622f995f7d0ec548ea409/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "patch": "@@ -102,9 +102,10 @@ bool processNonce(CBlock* pblock)\n     pblock->CheckProofOfWork(true, true);\n \n     boost::system_time checkblktime = boost::get_system_time() + boost::posix_time::seconds(5);\n-    while (chainActive.Tip() == tip && !pblock->ProofAvailable()) {\n+    while (chainActive.Tip() == tip && !pblock->ProofAvailable() && pblock->IsSolving()) {\n         cvBlockChange.timed_wait(lock, checkblktime);\n         checkblktime += boost::posix_time::seconds(5);\n+        LogPrintf(\"processNonce: same tip: %s, got proof: %s, is solving: %s\\n\", chainActive.Tip() == tip ? \"true\" : \"false\", pblock->ProofAvailable() ? \"true\" : \"false\", pblock->IsSolving() ? \"true\" : \"false\");\n     }\n     return pblock->CheckProofOfWork();\n }"
      }
    ]
  },
  {
    "sha": "97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2RlNGNjZmNjYjYzNzRlZWY1YzZjNjFjMzU3ZmMzZjBiNWM5NTY4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-06-08T04:30:27Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:07Z"
      },
      "message": "f'some debug stuff; CC stops iterating after 1st sol (probably not worth it but keeping for now)",
      "tree": {
        "sha": "c9f6edd4d52f2bb6df2a236d39346c3ca1c746dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9f6edd4d52f2bb6df2a236d39346c3ca1c746dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HsACgkQV692LbM1\nMyKD8A/+IcbVaAeLnfy9jBCSpFlFPN484t4tnL03leW6jH28QcB+wcefJf59VEqN\n3FgHJgvmwYgChPYjSNqldSzoDDBaLv+45klf4mugLm0Jqfr67ZgKjq3hADho4T5z\nRZXNMHqk+/V8et8TqJ0Oz5TZonfkYC9vJ9zCjsVyUBzX3I+hoNIv9zmxjvywXi+M\nUZeKzOH7Fwhe3ioZ991sqx1Ta8tUksfByoA01mgRgwJR4eeRM1U2TyRb792lefLK\n3L8VxqzmD5PdCPSWwimt7u4ZAXYHSTssMDEBjDnLtrsesf4MhM5zERQ2tlJDMTjl\nq16fZepSM4d5M0q0hNEBLK3cHhl9kFivo+CGqIa9SwRbOWQAem//J0h49a+u4INN\nkLkgL3RW1A7gjI4P6ybrWpdhAIe9m+qgPDibcYSjrrppwI6aI4jZkvYE9ESYneJL\no6h0rgv5VdaynO7sI1FqKkyTduPeZRzElieW+/Jcx/NidiTzW9bIyKIcwHe4eutH\nqNt5gdG/9BdigB+yhABob8+weDQZM/lcthDha+TMnVplG0jEiHyLH95RPMSi7Jbi\nW1yeJI+9ngluXl6jGGSnIklVCYhyXPr+gtM2iuLhoB8KRn4jCQuypA4aZvmd8MPf\nOzgfCIQs1Uv/57gOzhSuJB6LS64GlvR9TG+/THHxgG6cYN4FcXY=\n=jZfU\n-----END PGP SIGNATURE-----",
        "payload": "tree c9f6edd4d52f2bb6df2a236d39346c3ca1c746dd\nparent 64d1148e97bb218bcd0622f995f7d0ec548ea409\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1496896227 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920507 +0900\n\nf'some debug stuff; CC stops iterating after 1st sol (probably not worth it but keeping for now)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d1148e97bb218bcd0622f995f7d0ec548ea409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64d1148e97bb218bcd0622f995f7d0ec548ea409"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "deb26c0b9f675690dc6d58411ffcdcc992920ebf",
        "filename": "src/pow/cuckoo_cycle/cuckoo_miner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568/src/pow/cuckoo_cycle/cuckoo_miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow/cuckoo_cycle/cuckoo_miner.h?ref=97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
        "patch": "@@ -479,8 +479,12 @@ inline void *worker(void *vp) {\n           for (nu -= min, nv -= min; us[nu] != vs[nv]; nu++, nv++) ;\n           u32 len = nu + nv + 1;\n           // printf(\"%4d-cycle found at %d:%d%%\\n\", len, tp->id, (u32)(nonce*100LL/HALFSIZE));\n-          if (len >= ctx->proofsize_min && len <= ctx->proofsize_max && ctx->nsols < ctx->maxsols)\n+          if (len >= ctx->proofsize_min && len <= ctx->proofsize_max && ctx->nsols < ctx->maxsols) {\n+            printf(\"CC: solution found; exiting\\n\");\n             ctx->solution(us, nu, vs, nv, len);\n+            pthread_exit(NULL);\n+            return 0;\n+          }\n         } else if (nu < nv) {\n           while (nu--)\n             cuckoo.set(us[nu+1], us[nu]);"
      },
      {
        "sha": "40c6d673c9a38d68d09a439e856dd97a1a71f8d1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
        "patch": "@@ -134,6 +134,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n         while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && (!processNonce(pblock) || !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))) {\n+            printf(\"[mining] incrementing nonce (hash=%s, CheckPOW=%s)\\n\", pblock->GetHash().ToString().c_str(), CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()) ? \"true\" : \"false\");\n             ++pblock->nNonce;\n             --nMaxTries;\n         }"
      }
    ]
  },
  {
    "sha": "c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWVkYzM4ZjY5ZGZkMzZkZjJiMzJlZGZhYWY3NDMzMzNiMmI3ZGJh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-06T09:16:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-13T04:35:08Z"
      },
      "message": "[consensus] Add BC2 network to chainparams.",
      "tree": {
        "sha": "0be247652f6dd56ad611301bc1fcddc594823bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0be247652f6dd56ad611301bc1fcddc594823bcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllm+HwACgkQV692LbM1\nMyLkCg/9FVRaizUWCw71meovI9jfSbOM5JgpBNGon99JaaIACI8VvZozhLPwYvFc\n1Gd1AkqrKUaUQJIxIS7Ty16b7pkwu1ziP3s+JkSZXnMW2JCffZFuz3jjHqsK2mvq\n0pR1CAX6HHjoVn0Iy0HWepxyzpEv/i2ZgMCT2vH6HK4ESeYuo1Gen5+ZlQVh6F6U\n8rmOiO3DNcCiriID697LGMDd6Qvhw29ojX8Bk1e+j9StGKqNJndAUXXe9RoWFgq1\n6bYYuQ29SXM0ylwgS1WhA32+p7WD+GWFyW3lPcQyv7QN5n2bzPa+5GQmV1ImjLt4\nkxVQ0dLTMkrRREecA9eTGmB4+TqwAVP48GGvd5kwoEfYHUUFkWqyE77CQ8vDXLXz\nG4QUrB4E9D4pBYUi+9T3YfdM+yruRKHSly7JKCjF4ZM2Qb+iTgTAHW3xmF8up18l\nODY3A12/aQIGbQyzzkfXz/DcAomj+yP+VjgNh1iriipl+KNjQinpNT26vrhhpLAN\ndADPH7mvrmI7fU5eFWg1wQ37e3lpPHzoq1Vk25v/eP5NkGUDvRBTE4wTH0yid1C2\njYHDqBeLAamkcvI6eVtMQ+968Y37CnGx0ljRf9VGt3yenbSNidXe39FJVSn+d8cO\nHi4JJaB70fEergBLqy5xq+ehtw40mUP1u/ie3CpaOFj8clXIZmc=\n=pPYJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 0be247652f6dd56ad611301bc1fcddc594823bcb\nparent 97de4ccfccb6374eef5c6c61c357fc3f0b5c9568\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499332573 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1499920508 +0900\n\n[consensus] Add BC2 network to chainparams.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97de4ccfccb6374eef5c6c61c357fc3f0b5c9568"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "24d98da419b84805f35e4a71a68e1381728016f3",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
        "patch": "@@ -249,10 +249,10 @@ class CMainParams : public CChainParams {\n     }\n };\n \n-class CC4Params : public CChainParams {\n+class CBC2Params : public CChainParams {\n public:\n-    CC4Params() {\n-        strNetworkID = \"c4\";\n+    CBC2Params() {\n+        strNetworkID = \"bc2\";\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP34Height = 0;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n@@ -327,19 +327,20 @@ class CC4Params : public CChainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n-        vFixedSeeds.clear();\n+        vFixedSeeds.clear(); // = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n         vSeeds.clear();\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n \n         checkpointData = (CCheckpointData) {\n-            boost::assign::map_list_of\n-            ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+            {\n+                { 0, uint256S(\"0x437840ad883e641b9659c8a70cb0e2c19466d9d0386dc323ee73e36c252694b0\")}\n+            }\n         };\n \n         chainTxData = ChainTxData{\n@@ -526,8 +527,8 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n-    else if (chain == CBaseChainParams::C4)\n-        return std::unique_ptr<CChainParams>(new CC4Params());\n+    else if (chain == CBaseChainParams::BC2)\n+        return std::unique_ptr<CChainParams>(new CBC2Params());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)"
      },
      {
        "sha": "437926c0f7e6099edb1a6ad569a1c823ce17402d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
        "patch": "@@ -13,7 +13,7 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n-const std::string CBaseChainParams::C4 = \"c4\";\n+const std::string CBaseChainParams::BC2 = \"bc2\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -40,13 +40,13 @@ class CBaseMainParams : public CBaseChainParams\n /**\n  * Main network\n  */\n-class CBaseC4Params : public CBaseChainParams\n+class CBaseBC2Params : public CBaseChainParams\n {\n public:\n-    CBaseC4Params()\n+    CBaseBC2Params()\n     {\n         nRPCPort = 9232;\n-        strDataDir = \"c4\";\n+        strDataDir = \"bc2\";\n     }\n };\n \n@@ -88,8 +88,8 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n-    else if (chain == CBaseChainParams::C4)\n-        return std::unique_ptr<CBaseC4Params>(new CBaseC4Params());\n+    else if (chain == CBaseChainParams::BC2)\n+        return std::unique_ptr<CBaseBC2Params>(new CBaseBC2Params());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n@@ -105,17 +105,18 @@ void SelectBaseParams(const std::string& chain)\n \n std::string ChainNameFromCommandLine()\n {\n-    bool fC4 = GetBoolArg(\"-c4\", true);\n+    bool fBC2 = GetBoolArg(\"-bc2\", true);\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    int nets = fBC2 + fRegTest + fTestNet;\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if (nets > 1)\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet, and -bc2.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    if (fC4)\n-        return CBaseChainParams::C4;\n+    if (fBC2)\n+        return CBaseChainParams::BC2;\n     return CBaseChainParams::MAIN;\n }"
      },
      {
        "sha": "5e54a89ee7ec87cf705a00b556dc1d44300241ee",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1edc38f69dfd36df2b32edfaaf743333b2b7dba/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
        "patch": "@@ -18,7 +18,7 @@ class CBaseChainParams\n public:\n     /** BIP70 chain name strings (main, test or regtest) */\n     static const std::string MAIN;\n-    static const std::string C4;\n+    static const std::string BC2;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n "
      }
    ]
  },
  {
    "sha": "0023b073312354910b48360ad85c6acb20fc85de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDIzYjA3MzMxMjM1NDkxMGI0ODM2MGFkODVjNmFjYjIwZmM4NWRl",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-07-14T10:01:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-19T04:51:05Z"
      },
      "message": "Add GMP library as dependency, for arbitrary-precision rational numbers.",
      "tree": {
        "sha": "521178160a20150b972c9e8b00415ab7271638dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/521178160a20150b972c9e8b00415ab7271638dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0023b073312354910b48360ad85c6acb20fc85de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllu5TkACgkQV692LbM1\nMyLnnBAAjueAcNQv0f+LSeiE9denNXZ9lroA7sZMQa2OUQcK/mSowEG/oeqfXqgt\nnqHvjPq/8YmlyGMJXoWMs1WPdW3jdDVEbg55rvs14maCo4h3JAPGefZZeUSbjXYe\n1sQd3XGKLxb1TBe8pw0AXC6KigSeqxO9Zj3lwz4zZxPh67gaNC9g7ziYHjFPDNzp\nKZwL7FWREWazVo2+WS41aU0usu0OrOU4U753IZpHsKNhLT5pQmTWmioNdHa0Cdd+\n2nzWGA415Q466mgbjTvuohGy+i2mrHDLaeWGVgsSVoPMZwdlY09ZBthPTVJHw86i\n341zTVIqVy6xIa6s3pRY9DCo95bORX4kD8OJhwIMpNveArSTMOoaSnkWr3x0o/uW\n2BmapGFIVg8EG3pGpClBaP5AB2xNhNYnStodl5plSdtJydyzSHmhr4nQ7qK2kKvK\nbCwMWvYVIpocMoqySSywpXAzRV6nc4WyBfahCrT/dKXNMvyGuHF+h0kLx4K9r5Yt\nRX5hlEWHlNZLhOBE+lrIt0CjGlxCeUxbaFcFyffPCJNBXf6WlHeo8e38mpFhITs2\nflIAOPaaSLi2YUCoWLH3BpQVcpYPsaSMyKY+lVhNlpMyNvTzS+M+MpPvJguuCdEl\nVHsdFSI3i/L/VIQrKliUvKAu0tSwFY4ojgBsVU4ZFkH2kvx5Stk=\n=HOwY\n-----END PGP SIGNATURE-----",
        "payload": "tree 521178160a20150b972c9e8b00415ab7271638dc\nparent c1edc38f69dfd36df2b32edfaaf743333b2b7dba\nauthor Mark Friedenbach <mark@friedenbach.org> 1500026473 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1500439865 +0900\n\nAdd GMP library as dependency, for arbitrary-precision rational numbers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023b073312354910b48360ad85c6acb20fc85de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0023b073312354910b48360ad85c6acb20fc85de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023b073312354910b48360ad85c6acb20fc85de/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1edc38f69dfd36df2b32edfaaf743333b2b7dba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1edc38f69dfd36df2b32edfaaf743333b2b7dba"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "363430155cc9c7016d9ffe7a33369abd17e4485a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0023b073312354910b48360ad85c6acb20fc85de/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0023b073312354910b48360ad85c6acb20fc85de/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0023b073312354910b48360ad85c6acb20fc85de",
        "patch": "@@ -734,6 +734,26 @@ if test x$use_tests = xyes; then\n     AC_MSG_ERROR(hexdump is required for tests)\n   fi\n \n+AC_ARG_WITH([gmp_include],\n+            [AC_HELP_STRING([--with-gmp-include=DIR],\n+                            [GMP include directory])],\n+            [CPPFLAGS=\"-I$withval $CPPFLAGS\"])\n+AC_ARG_WITH([gmp_lib],\n+            [AC_HELP_STRING([--with-gmp-lib=DIR],\n+                            [GMP lib directory])],\n+            [LDFLAGS=\"-L$withval $LDFLAGS\"])\n+AC_ARG_WITH([gmp],\n+            [AC_HELP_STRING([--with-gmp=DIR],\n+                           [GMP install directory])],\n+            [\n+            if test -z \"$with_gmp_lib\" -a -z \"$with_gmp_include\" ; then\n+               CPPFLAGS=\"-I$withval/include $CPPFLAGS\"\n+               LDFLAGS=\"-L$withval/lib $LDFLAGS\"\n+            else\n+               AC_MSG_FAILURE([Do not use --with-gmp and --with-gmp-include/--with-gmp-lib options simultaneously.])\n+            fi\n+            ])\n+\n \n   if test x$use_boost = xyes; then\n \n@@ -927,6 +947,19 @@ else\n   fi\n fi\n \n+# Check GMP Header\n+AC_MSG_CHECKING(for gmp.h)\n+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n+#include \"gmp.h\"\n+]])],[AC_MSG_RESULT(yes)],[\n+ AC_MSG_RESULT(no)\n+ AC_MSG_ERROR([gmp.h cannot be found or is unusable.])\n+])\n+\n+AC_CHECK_LIB([gmp], [__gmpz_init],\n+             [LIBS=\"-lgmp -lgmpxx $LIBS\"],\n+             [AC_MSG_ERROR([libgmp not found or uses a different ABI.])])\n+\n save_CXXFLAGS=\"${CXXFLAGS}\"\n CXXFLAGS=\"${CXXFLAGS} ${CRYPTO_CFLAGS} ${SSL_CFLAGS}\"\n AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT"
      }
    ]
  },
  {
    "sha": "a1decce99b7de15add3b8a3a8c800f97aad68f75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWRlY2NlOTliN2RlMTVhZGQzYjhhM2E4YzgwMGY5N2FhZDY4Zjc1",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-07-14T10:03:57Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-07-19T04:51:11Z"
      },
      "message": "Add new difficulty adjustment filter, which replaces the simple average over 2016 blocks with a faster-activing 36-tap Parks and McClellan FIR filter, and adjustments every 15 blocks with a gain of 0.125 and a limiter of 1.375.",
      "tree": {
        "sha": "3e6445fb5eb62a5f87452116f48dff4fe56f820c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e6445fb5eb62a5f87452116f48dff4fe56f820c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1decce99b7de15add3b8a3a8c800f97aad68f75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAllu5T8ACgkQV692LbM1\nMyLwyQ/9FrrwCzXrGkS3+A+KANQ0XBRqBj11xFkZ9TxMgyXeA2IWyW7hVKQjm370\nw55uiDNM8YWkIwNuzXB2D1KVrthOCgi5gfZHjtcR3KzXGem3LR3UAzZgypm0A5ci\nBN7VJjdpwA5uuAcTNt/G75rEZDNgYiWWtaNJ8q/PTUc6/cUq6NJnXnPZ8Oo2f0PW\n/Q+NRW1s8v4r/qKTYuBq2Ho3bd8FXbXF0UiXEym2JeKeKNpAAm4Bw6XO1THn2N10\ntqtgDkeq3viaq7M7TJ6IBgdj7wy+7LMeXuOE+OZ1CNxbkn5WHI+LAav1BqLrlPNo\n5T8leUrDiTJfBdd1EZC2FHXb+hEYufFWqS1QXRfGINui1L5s7WLjt0iVhiFQEaZw\nWOpGeesnb37JEfR5vT10C53tzXX9dtrAGFFLgJdT9ci09uc8/+d7xvfbmw1RFT2Q\nZOHNs1oOhmUseYqDxBgGujeIAuWPc7xRmlCL0FwCPnSYgdlWoGLMVH0tGP/T/mmP\n33B1352QcOI9KS6noxJGeB5p04xfbxyhd8cbCTEVechekMYrNOG/LRopxiho6u+u\nqvpVh29E2Hq5b2aWlDF14IZUxZYI8wTiwSXmml48J5+sJStp7FwQEiXZc6MfNtR3\nr40pNBoa73rZUjOgXnladkTkmq3XTZAfZlyhBqQ1b2+2noRjfis=\n=taIn\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e6445fb5eb62a5f87452116f48dff4fe56f820c\nparent 0023b073312354910b48360ad85c6acb20fc85de\nauthor Mark Friedenbach <mark@friedenbach.org> 1500026637 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1500439871 +0900\n\nAdd new difficulty adjustment filter, which replaces the simple average over 2016 blocks with a faster-activing 36-tap Parks and McClellan FIR filter, and adjustments every 15 blocks with a gain of 0.125 and a limiter of 1.375.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1decce99b7de15add3b8a3a8c800f97aad68f75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1decce99b7de15add3b8a3a8c800f97aad68f75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1decce99b7de15add3b8a3a8c800f97aad68f75/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0023b073312354910b48360ad85c6acb20fc85de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023b073312354910b48360ad85c6acb20fc85de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0023b073312354910b48360ad85c6acb20fc85de"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 127,
      "deletions": 21
    },
    "files": [
      {
        "sha": "5ca36fc052783088b3601ee201c8a0fd410cf815",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a1decce99b7de15add3b8a3a8c800f97aad68f75",
        "patch": "@@ -157,13 +157,15 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.nFIRDiffFilterThreshold = std::numeric_limits<int>::max(); // never\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowOriginalTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowFilteredTargetTimespan = 15 * 10 * 60; // 2.5 hrs\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n-        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.nMinerConfirmationWindow = 2016; // nPowOriginalTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n@@ -366,13 +368,15 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.nFIRDiffFilterThreshold = std::numeric_limits<int>::max(); // never\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowOriginalTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowFilteredTargetTimespan = 15 * 10 * 60; // 2.5 hrs\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n-        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.nMinerConfirmationWindow = 2016; // nPowOriginalTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n@@ -454,8 +458,10 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.nFIRDiffFilterThreshold = std::numeric_limits<int>::max(); // never\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowOriginalTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowFilteredTargetTimespan = 15 * 10 * 60; // 2.5 hrs\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;"
      },
      {
        "sha": "f825af6913595a4dd015e130fb3203e14edce38b",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=a1decce99b7de15add3b8a3a8c800f97aad68f75",
        "patch": "@@ -46,6 +46,9 @@ struct Params {\n     int BIP65Height;\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n+    /** FIR difficulty filter parameters */\n+    int nFIRDiffFilterThreshold;\n+    bool UseDiffFilter(int nHeight) const { return (nHeight >= nFIRDiffFilterThreshold); }\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n@@ -59,8 +62,9 @@ struct Params {\n     bool fPowAllowMinDifficultyBlocks;\n     bool fPowNoRetargeting;\n     int64_t nPowTargetSpacing;\n-    int64_t nPowTargetTimespan;\n-    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+    int64_t nPowOriginalTargetTimespan;\n+    int64_t nPowFilteredTargetTimespan;\n+    int64_t DifficultyAdjustmentInterval(int nHeight) const { return (UseDiffFilter(nHeight)? nPowFilteredTargetTimespan: nPowOriginalTargetTimespan) / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n };"
      },
      {
        "sha": "d12762304a599969aa20cbff88edcef3b3e7e980",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 13,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a1decce99b7de15add3b8a3a8c800f97aad68f75",
        "patch": "@@ -9,14 +9,19 @@\n #include \"chain.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <gmp.h>\n+#include <gmpxx.h>\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n     assert(pindexLast != NULL);\n     unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n     // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval(pindexLast->nHeight+1) != 0)\n     {\n         if (params.fPowAllowMinDifficultyBlocks)\n         {\n@@ -29,7 +34,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval(pindex->nHeight) != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -38,36 +43,127 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n+    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval(pindexLast->nHeight+1)-1);\n     assert(nHeightFirst >= 0);\n     const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n     assert(pindexFirst);\n \n     return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n+mpz_class inline i64_to_mpz(int64_t nValue)\n+{\n+    return mpz_class(i64tostr(nValue));\n+}\n+\n+int64_t inline mpz_to_i64(const mpz_class &zValue)\n+{\n+    static mpz_class MPZ_MAX_I64( \"9223372036854775807\");\n+    static mpz_class MPZ_MIN_I64(\"-9223372036854775808\");\n+    if (zValue < MPZ_MIN_I64 || zValue > MPZ_MAX_I64)\n+        throw std::runtime_error(\"mpz_to_i64 : input exceeds range of int64_t type\");\n+    int64_t result = 0;\n+    mpz_class tmp(zValue);\n+    bool sign = tmp < 0;\n+    if ( sign ) tmp = -tmp;\n+    result = atoi64(tmp.get_str());\n+    return (sign ? -result : result);\n+}\n+\n+mpz_class inline mpz_from_uint256(const uint256& bn)\n+{\n+    mpz_class z;\n+    mpz_import(z.get_mpz_t(), 32, -1, 1, -1, 0, bn.begin());\n+    return z;\n+}\n+\n+uint256 inline uint256_from_mpz(const mpz_class& z)\n+{\n+    uint256 bn;\n+    mpz_export(bn.begin(), NULL, -1, 32, -1, 0, z.get_mpz_t());\n+    return bn;\n+}\n+\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     if (params.fPowNoRetargeting)\n         return pindexLast->nBits;\n \n-    // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    if (nActualTimespan < params.nPowTargetTimespan/4)\n-        nActualTimespan = params.nPowTargetTimespan/4;\n-    if (nActualTimespan > params.nPowTargetTimespan*4)\n-        nActualTimespan = params.nPowTargetTimespan*4;\n+    const int kWindowSize = 36;\n+    static mpq_class kOne = mpq_class(1);\n+    static mpq_class kGain = mpq_class(1, 8);       // 0.125\n+    static mpq_class kLimiterUp = mpq_class(11, 8); // 1.375\n+    static mpq_class kLimiterDown = mpq_class(8, 11);\n+    static mpq_class kTargetInterval = mpq_class(i64_to_mpz(params.nPowTargetSpacing));\n+    static int32_t kFilterCoeff[kWindowSize] =\n+        {  140111793,  105764386,  109100300,   79262945,   11957247,  -86965742,\n+          -200607279, -301199508, -354940962, -328658726, -197005272,   49124369,\n+           398931360,  820161125, 1263269526, 1669153929, 1979408502, 2147483647,\n+          2147483647, 1979408502, 1669153929, 1263269526,  820161125,  398931360,\n+            49124369, -197005272, -328658726, -354940962, -301199508, -200607279,\n+           -86965742,   11957247,   79262945,  109100300,  105764386,  140111793 };\n+    static mpz_class kNormFactor = mpz_class(\"14608703280\");\n+\n+    const bool fUseFilter = (pindexLast->nHeight >= (params.nFIRDiffFilterThreshold-1));\n+\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+\n+    mpq_class dAdjustmentFactor;\n+\n+    if (fUseFilter)\n+    {\n+        int64_t vTimeDelta[kWindowSize];\n+\n+        size_t idx = 0;\n+        const CBlockIndex *pitr = pindexLast;\n+        for ( ; idx!=kWindowSize && pitr && pitr->pprev; ++idx, pitr=pitr->pprev )\n+            vTimeDelta[idx] = (int32_t)(pitr->GetBlockTime() - pitr->pprev->GetBlockTime());\n+        for ( ; idx!=kWindowSize; ++idx )\n+            vTimeDelta[idx] = (int32_t)params.nPowTargetSpacing;\n+\n+        int64_t vFilteredTime = 0;\n+        for ( idx=0; idx<kWindowSize; ++idx )\n+            vFilteredTime += (int64_t)kFilterCoeff[idx] * (int64_t)vTimeDelta[idx];\n+        mpq_class dFilteredInterval(i64_to_mpz(vFilteredTime), kNormFactor);\n+\n+        dAdjustmentFactor = kOne - kGain * (dFilteredInterval - kTargetInterval) / kTargetInterval;\n+        if (dAdjustmentFactor > kLimiterUp)\n+            dAdjustmentFactor = kLimiterUp;\n+        if (dAdjustmentFactor < kLimiterDown)\n+            dAdjustmentFactor = kLimiterDown;\n+    } else {\n+        // Limit adjustment step\n+        int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n+        LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+        if (nActualTimespan < params.nPowOriginalTargetTimespan/4)\n+            nActualTimespan = params.nPowOriginalTargetTimespan/4;\n+        if (nActualTimespan > params.nPowOriginalTargetTimespan*4)\n+            nActualTimespan = params.nPowOriginalTargetTimespan*4;\n+\n+        dAdjustmentFactor = mpq_class(i64_to_mpz(params.nPowOriginalTargetTimespan),\n+                                      i64_to_mpz(nActualTimespan));\n+    }\n \n     // Retarget\n-    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n+    arith_uint256 bnOld;\n+    bnOld.SetCompact(pindexLast->nBits);\n+\n+    mpz_class zNew;\n+    zNew  = mpz_from_uint256(ArithToUint256(bnOld));\n+    zNew *= dAdjustmentFactor.get_den();\n+    zNew /= dAdjustmentFactor.get_num();\n+\n     arith_uint256 bnNew;\n-    bnNew.SetCompact(pindexLast->nBits);\n-    bnNew *= nActualTimespan;\n-    bnNew /= params.nPowTargetTimespan;\n+    bnNew = UintToArith256(uint256_from_mpz(zNew));\n \n+    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n     if (bnNew > bnPowLimit)\n         bnNew = bnPowLimit;\n \n+    LogPrintf(\"dAdjustmentFactor = %g\\n\", dAdjustmentFactor.get_d());\n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, ArithToUint256(bnOld).ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), ArithToUint256(bnNew).ToString());\n+\n     return bnNew.GetCompact();\n }\n "
      },
      {
        "sha": "264d5359f5e0528bf7aa7c84ecc7c4c3825f05b0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1decce99b7de15add3b8a3a8c800f97aad68f75/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a1decce99b7de15add3b8a3a8c800f97aad68f75",
        "patch": "@@ -46,7 +46,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().GetConsensus().DifficultyAdjustmentInterval() + 1;\n+        lookup = pb->nHeight % Params().GetConsensus().DifficultyAdjustmentInterval(pb->nHeight) + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  }
]