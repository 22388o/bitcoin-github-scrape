[
  {
    "sha": "73f41190b91dce9c125b1828b18f7625e0200145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2Y0MTE5MGI5MWRjZTljMTI1YjE4MjhiMThmNzYyNWUwMjAwMTQ1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2016-12-05T07:03:53Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-02T11:35:23Z"
      },
      "message": "Refactoring: Removed using namespace <xxx> from bench/ and test/ source files.",
      "tree": {
        "sha": "7fbc5af2fa822231182c85df8d5d9826e8c1ecae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fbc5af2fa822231182c85df8d5d9826e8c1ecae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73f41190b91dce9c125b1828b18f7625e0200145",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73f41190b91dce9c125b1828b18f7625e0200145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73f41190b91dce9c125b1828b18f7625e0200145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73f41190b91dce9c125b1828b18f7625e0200145/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53442af0aac3838179fad79a65512ee8c5603922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53442af0aac3838179fad79a65512ee8c5603922",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53442af0aac3838179fad79a65512ee8c5603922"
      }
    ],
    "stats": {
      "total": 535,
      "additions": 245,
      "deletions": 290
    },
    "files": [
      {
        "sha": "8f9432e11c90e64a17373f9a9d794c4934527996",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -9,39 +9,37 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-using namespace benchmark;\n-\n-std::map<std::string, BenchFunction> BenchRunner::benchmarks;\n+std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n \n static double gettimedouble(void) {\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     return tv.tv_usec * 0.000001 + tv.tv_sec;\n }\n \n-BenchRunner::BenchRunner(std::string name, BenchFunction func)\n+benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n     benchmarks.insert(std::make_pair(name, func));\n }\n \n void\n-BenchRunner::RunAll(double elapsedTimeForOne)\n+benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n {\n     perf_init();\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n+    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n          it != benchmarks.end(); ++it) {\n \n         State state(it->first, elapsedTimeForOne);\n-        BenchFunction& func = it->second;\n+        benchmark::BenchFunction& func = it->second;\n         func(state);\n     }\n     perf_fini();\n }\n \n-bool State::KeepRunning()\n+bool benchmark::State::KeepRunning()\n {\n     if (count & countMask) {\n       ++count;"
      },
      {
        "sha": "9db6492e51dc4a38e70511db855e692c17893575",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -8,9 +8,7 @@\n #include <boost/foreach.hpp>\n #include <set>\n \n-using namespace std;\n-\n-static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput>& vCoins)\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)\n {\n     int nInput = 0;\n \n@@ -36,7 +34,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput\n static void CoinSelection(benchmark::State& state)\n {\n     const CWallet wallet;\n-    vector<COutput> vCoins;\n+    std::vector<COutput> vCoins;\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n@@ -50,7 +48,7 @@ static void CoinSelection(benchmark::State& state)\n             addCoin(1000 * COIN, wallet, vCoins);\n         addCoin(3 * COIN, wallet, vCoins);\n \n-        set<pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        std::set<std::pair<const CWalletTx*, unsigned int> > setCoinsRet;\n         CAmount nValueRet;\n         bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet);\n         assert(success);"
      },
      {
        "sha": "1e284609abf8b858f6315ef876b88ff02a352c18",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -10,8 +10,6 @@\n #include \"netbase.h\"\n #include \"random.h\"\n \n-using namespace std;\n-\n class CAddrManTest : public CAddrMan\n {\n     uint64_t state;\n@@ -365,7 +363,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test 22: Sanity check, GetAddr should never return anything if addrman\n     //  is empty.\n     BOOST_CHECK(addrman.size() == 0);\n-    vector<CAddress> vAddr1 = addrman.GetAddr();\n+    std::vector<CAddress> vAddr1 = addrman.GetAddr();\n     BOOST_CHECK(vAddr1.size() == 0);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n@@ -401,7 +399,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n         int octet1 = i % 256;\n         int octet2 = (i / 256) % 256;\n         int octet3 = (i / (256 * 2)) % 256;\n-        string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".\" + boost::to_string(octet3) + \".23\";\n+        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".\" + boost::to_string(octet3) + \".23\";\n         CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n         \n         // Ensure that for all addrs in addrman, isTerrible == false.\n@@ -410,7 +408,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n         if (i % 8 == 0)\n             addrman.Good(addr);\n     }\n-    vector<CAddress> vAddr = addrman.GetAddr();\n+    std::vector<CAddress> vAddr = addrman.GetAddr();\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK(vAddr.size() == percent23);\n@@ -452,7 +450,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     BOOST_CHECK(info1.GetKey() != info2.GetKey());\n     BOOST_CHECK(info1.GetTriedBucket(nKey1) != info2.GetTriedBucket(nKey1));\n \n-    set<int> buckets;\n+    std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n@@ -505,7 +503,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     BOOST_CHECK(info1.GetKey() != info2.GetKey());\n     BOOST_CHECK(info1.GetNewBucket(nKey1) == info2.GetNewBucket(nKey1));\n \n-    set<int> buckets;\n+    std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),"
      },
      {
        "sha": "3956c32e55d2a50e0531bd93d7d5994c7c8d175f",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 29,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -21,8 +21,6 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/tuple/tuple.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n@@ -43,8 +41,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;\n \n-    vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n-    vector<char> expected(vch.size());\n+    std::vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n+    std::vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n         expected[i] = (char)vch[i];\n@@ -75,8 +73,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;\n \n-    vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n-    vector<char> expected(vch.size());\n+    std::vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n+    std::vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n         expected[i] = (char)vch[i];\n@@ -86,24 +84,24 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n-    string strSecret = string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n+    std::string strSecret = std::string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n     CBitcoinSecret vchSecret;\n     BOOST_CHECK(vchSecret.SetString(strSecret));\n \n     CKey key = vchSecret.GetKey();\n     CPubKey pubkey = key.GetPubKey();\n-    vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());\n+    std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());\n \n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;\n \n-    vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n-    vector<char> expected(vch.size());\n+    std::vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n+    std::vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n         expected[i] = (char)vch[i];\n@@ -119,7 +117,7 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n \n     // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n-    vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n+    std::vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n     CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);\n     CTransaction spendingTx(deserialize, spendStream);\n \n@@ -156,7 +154,7 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     COutPoint prevOutPoint(uint256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n-        vector<unsigned char> data(32 + sizeof(unsigned int));\n+        std::vector<unsigned char> data(32 + sizeof(unsigned int));\n         memcpy(&data[0], prevOutPoint.hash.begin(), 32);\n         memcpy(&data[32], &prevOutPoint.n, sizeof(unsigned int));\n         filter.insert(data);\n@@ -196,13 +194,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n-    vector<uint256> vMatched;\n-    vector<unsigned int> vIndex;\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -242,13 +240,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n-    vector<unsigned int> vIndex;\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -297,13 +295,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n-    vector<unsigned int> vIndex;\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -353,8 +351,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n-    vector<unsigned int> vIndex;\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -363,8 +361,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);\n     merkleStream << merkleBlock;\n \n-    vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101\");\n-    vector<char> expected(vch.size());\n+    std::vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101\");\n+    std::vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n         expected[i] = (char)vch[i];\n@@ -388,13 +386,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n-    vector<uint256> vMatched;\n-    vector<unsigned int> vIndex;\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)"
      },
      {
        "sha": "6751b9d5a0875eb1890c176f366e3ab6f9dd27b1",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -10,13 +10,9 @@\n #include <boost/assign/std/vector.hpp> // for 'operator+=()'\n #include <boost/assert.hpp>\n #include <boost/test/unit_test.hpp>\n-                    \n-using namespace std;\n-using namespace boost::assign; // bring 'operator+=()' into scope\n-using namespace boost::filesystem;\n-         \n+\n // Test if a string consists entirely of null characters\n-bool is_null_key(const vector<unsigned char>& key) {\n+bool is_null_key(const std::vector<unsigned char>& key) {\n     bool isnull = true;\n \n     for (unsigned int i = 0; i < key.size(); i++)\n@@ -32,7 +28,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        path ph = temp_directory_path() / unique_path();\n+        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n@@ -53,7 +49,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        path ph = temp_directory_path() / unique_path();\n+        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -90,7 +86,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        path ph = temp_directory_path() / unique_path();\n+        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -129,8 +125,8 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n-    // We're going to share this path between two wrappers\n-    path ph = temp_directory_path() / unique_path();\n+    // We're going to share this boost::filesystem::path between two wrappers\n+    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -170,8 +166,8 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n-    // We're going to share this path between two wrappers\n-    path ph = temp_directory_path() / unique_path();\n+    // We're going to share this boost::filesystem::path between two wrappers\n+    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -206,7 +202,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    path ph = temp_directory_path() / unique_path();\n+    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -241,11 +237,11 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n struct StringContentsSerializer {\n     // Used to make two serialized objects the same while letting them have a different lengths\n     // This is a terrible idea\n-    string str;\n+    std::string str;\n     StringContentsSerializer() {}\n-    StringContentsSerializer(const string& inp) : str(inp) {}\n+    StringContentsSerializer(const std::string& inp) : str(inp) {}\n \n-    StringContentsSerializer& operator+=(const string& s) {\n+    StringContentsSerializer& operator+=(const std::string& s) {\n         str += s;\n         return *this;\n     }\n@@ -277,7 +273,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    path ph = temp_directory_path() / unique_path();\n+    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {\n@@ -303,7 +299,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n         for (int x=seek_start; x<10; ++x) {\n             for (int y = 0; y < 10; y++) {\n                 sprintf(buf, \"%d\", x);\n-                string exp_key(buf);\n+                std::string exp_key(buf);\n                 for (int z = 0; z < y; z++)\n                     exp_key += exp_key;\n                 StringContentsSerializer key;"
      },
      {
        "sha": "763107fb122e549012c106b8916ac378f65d88d7",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -10,8 +10,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(hash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(murmurhash3)"
      },
      {
        "sha": "40a7fdf11d0537b88a74616043e4c9c497db2237",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -16,19 +16,17 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n-static const string strSecret1     (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");\n-static const string strSecret2     (\"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3\");\n-static const string strSecret1C    (\"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw\");\n-static const string strSecret2C    (\"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g\");\n+static const std::string strSecret1     (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");\n+static const std::string strSecret2     (\"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3\");\n+static const std::string strSecret1C    (\"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw\");\n+static const std::string strSecret2C    (\"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g\");\n static const CBitcoinAddress addr1 (\"1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ\");\n static const CBitcoinAddress addr2 (\"1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ\");\n static const CBitcoinAddress addr1C(\"1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs\");\n static const CBitcoinAddress addr2C(\"1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs\");\n \n \n-static const string strAddressBad(\"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\");\n+static const std::string strAddressBad(\"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\");\n \n \n #ifdef KEY_TESTS_DUMPINFO\n@@ -37,7 +35,7 @@ void dumpKeyInfo(uint256 privkey)\n     CKey key;\n     key.resize(32);\n     memcpy(&secret[0], &privkey, 32);\n-    vector<unsigned char> sec;\n+    std::vector<unsigned char> sec;\n     sec.resize(32);\n     memcpy(&sec[0], &secret[0], 32);\n     printf(\"  * secret (hex): %s\\n\", HexStr(sec).c_str());\n@@ -51,7 +49,7 @@ void dumpKeyInfo(uint256 privkey)\n         printf(\"    * secret (base58): %s\\n\", bsecret.ToString().c_str());\n         CKey key;\n         key.SetSecret(secret, fCompressed);\n-        vector<unsigned char> vchPubKey = key.GetPubKey();\n+        std::vector<unsigned char> vchPubKey = key.GetPubKey();\n         printf(\"    * pubkey (hex): %s\\n\", HexStr(vchPubKey).c_str());\n         printf(\"    * address (base58): %s\\n\", CBitcoinAddress(vchPubKey).ToString().c_str());\n     }\n@@ -111,12 +109,12 @@ BOOST_AUTO_TEST_CASE(key_test1)\n \n     for (int n=0; n<16; n++)\n     {\n-        string strMsg = strprintf(\"Very secret message %i: 11\", n);\n+        std::string strMsg = strprintf(\"Very secret message %i: 11\", n);\n         uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n \n         // normal signatures\n \n-        vector<unsigned char> sign1, sign2, sign1C, sign2C;\n+        std::vector<unsigned char> sign1, sign2, sign1C, sign2C;\n \n         BOOST_CHECK(key1.Sign (hashMsg, sign1));\n         BOOST_CHECK(key2.Sign (hashMsg, sign2));\n@@ -145,7 +143,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n \n         // compact signatures (with key recovery)\n \n-        vector<unsigned char> csign1, csign2, csign1C, csign2C;\n+        std::vector<unsigned char> csign1, csign2, csign1C, csign2C;\n \n         BOOST_CHECK(key1.SignCompact (hashMsg, csign1));\n         BOOST_CHECK(key2.SignCompact (hashMsg, csign2));\n@@ -168,7 +166,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     // test deterministic signing\n \n     std::vector<unsigned char> detsig, detsigc;\n-    string strMsg = \"Very deterministic message\";\n+    std::string strMsg = \"Very deterministic message\";\n     uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));"
      },
      {
        "sha": "34d7fc9d11d770298d372bd7d0faa920b7de6c2b",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -17,22 +17,20 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n-typedef vector<unsigned char> valtype;\n+typedef std::vector<unsigned char> valtype;\n \n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n-sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n+sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, SIGVERSION_BASE);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n     BOOST_FOREACH(const CKey &key, keys)\n     {\n-        vector<unsigned char> vchSig;\n+        std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         result << vchSig;\n@@ -75,7 +73,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         txTo[i].vout[0].nValue = 1;\n     }\n \n-    vector<CKey> keys;\n+    std::vector<CKey> keys;\n     CScript s;\n \n     // Test a AND b:\n@@ -200,7 +198,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     partialkeystore.AddKey(key[0]);\n \n     {\n-        vector<valtype> solutions;\n+        std::vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n         s << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n@@ -213,7 +211,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<valtype> solutions;\n+        std::vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n         s << OP_DUP << OP_HASH160 << ToByteVector(key[0].GetPubKey().GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n@@ -226,7 +224,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<valtype> solutions;\n+        std::vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n         s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -239,13 +237,13 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(!IsMine(partialkeystore, s));\n     }\n     {\n-        vector<valtype> solutions;\n+        std::vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n         s << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        vector<CTxDestination> addrs;\n+        std::vector<CTxDestination> addrs;\n         int nRequired;\n         BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));\n         BOOST_CHECK(addrs[0] == keyaddr[0]);\n@@ -256,7 +254,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(!IsMine(partialkeystore, s));\n     }\n     {\n-        vector<valtype> solutions;\n+        std::vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n         s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;"
      },
      {
        "sha": "0bd7869f32fc40608189c685d76966a3e9271d7b",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -12,8 +12,6 @@\n #include \"netbase.h\"\n #include \"chainparams.h\"\n \n-using namespace std;\n-\n class CAddrManSerializationMock : public CAddrMan\n {\n public:\n@@ -68,7 +66,7 @@ CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n     ssPeersIn << FLATDATA(Params().MessageStart());\n     ssPeersIn << _addrman;\n     std::string str = ssPeersIn.str();\n-    vector<unsigned char> vchData(str.begin(), str.end());\n+    std::vector<unsigned char> vchData(str.begin(), str.end());\n     return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n }\n "
      },
      {
        "sha": "b4dff75a0912fba3b37a2f615acb7726347c8701",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -10,8 +10,6 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n static CNetAddr ResolveIP(const char* ip)\n@@ -64,9 +62,9 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n \n }\n \n-bool static TestSplitHost(string test, string host, int port)\n+bool static TestSplitHost(std::string test, std::string host, int port)\n {\n-    string hostOut;\n+    std::string hostOut;\n     int portOut = -1;\n     SplitHostPort(test, portOut, hostOut);\n     return hostOut == host && port == portOut;\n@@ -91,7 +89,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n     BOOST_CHECK(TestSplitHost(\"\", \"\", -1));\n }\n \n-bool static TestParse(string src, string canon)\n+bool static TestParse(std::string src, std::string canon)\n {\n     CService addr(LookupNumeric(src.c_str(), 65535));\n     return canon == addr.ToString();"
      },
      {
        "sha": "c5796277b012db6ffd60c0548cd832c0ac264d1c",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -17,8 +17,6 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n class CPartialMerkleTreeTester : public CPartialMerkleTree\n {\n public:"
      },
      {
        "sha": "4ca6f1caf0a25588b831701d7581b1e2a68ffcce",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -11,8 +11,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n /* Test calculation of next difficulty target with no constraints applying */"
      },
      {
        "sha": "fd86ba5d80de52277ed6958f3645360324886fed",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 70,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -16,13 +16,11 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n-UniValue CallRPC(string args)\n+UniValue CallRPC(std::string args)\n {\n-    vector<string> vArgs;\n+    std::vector<std::string> vArgs;\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n-    string strMethod = vArgs[0];\n+    std::string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n     JSONRPCRequest request;\n     request.strMethod = strMethod;\n@@ -35,7 +33,7 @@ UniValue CallRPC(string args)\n         return result;\n     }\n     catch (const UniValue& objError) {\n-        throw runtime_error(find_value(objError, \"message\").get_str());\n+        throw std::runtime_error(find_value(objError, \"message\").get_str());\n     }\n }\n \n@@ -47,41 +45,41 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     // Test raw transaction API argument handling\n     UniValue r;\n \n-    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction null null\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction not_array\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] []\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction {} {}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction null null\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction not_array\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] []\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction {} {}\"), std::runtime_error);\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [] {}\"));\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] {} extra\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] {} extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction null\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), runtime_error);\n-    string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx));\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction null\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), std::runtime_error);\n+    std::string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx));\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"size\").get_int(), 193);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" null null badenum\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n+    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n \n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n-    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction DEADBEEF\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(string(\"sendrawtransaction \")+rawtx+\" extra\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction DEADBEEF\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(std::string(\"sendrawtransaction \")+rawtx+\" extra\"), std::runtime_error);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_togglenetwork)\n@@ -110,18 +108,18 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n {\n     UniValue r;\n     // input is a 1-of-2 multisig (so is output):\n-    string prevout =\n+    std::string prevout =\n       \"[{\\\"txid\\\":\\\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\\\",\"\n       \"\\\"vout\\\":1,\\\"scriptPubKey\\\":\\\"a914b10c9df5f7edf436c697f02f1efdba4cf399615187\\\",\"\n       \"\\\"redeemScript\\\":\\\"512103debedc17b3df2badbcdd86d5feb4562b86fe182e5998abd8bcd4f122c6155b1b21027e940bb73ab8732bfdf7f9216ecefca5b94d6df834e77e108f68e66f126044c052ae\\\"}]\";\n-    r = CallRPC(string(\"createrawtransaction \")+prevout+\" \"+\n+    r = CallRPC(std::string(\"createrawtransaction \")+prevout+\" \"+\n       \"{\\\"3HqAe9LtNBjnsfM4CyYaWTnvCaUYT7v4oZ\\\":11}\");\n-    string notsigned = r.get_str();\n-    string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n-    string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    std::string notsigned = r.get_str();\n+    std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n+    std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n+    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n \n@@ -133,11 +131,11 @@ BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n \n     // Key not \"data\" (bad address)\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), std::runtime_error);\n \n     // Bad hex encoding of data output\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345\\\"}\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345g\\\"}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345\\\"}\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345g\\\"}\"), std::runtime_error);\n \n     // Data 81 bytes long\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\\\"}\"));\n@@ -241,34 +239,34 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n \n BOOST_AUTO_TEST_CASE(rpc_ban)\n {\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    \n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n+\n     UniValue r;\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0 add\")));\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.0:8334\")), runtime_error); //portnumber for setban not allowed\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban 127.0.0.0:8334\")), std::runtime_error); //portnumber for setban not allowed\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     UniValue ar = r.get_array();\n     UniValue o1 = ar[0].get_obj();\n     UniValue adr = find_value(o1, \"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/32\");\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"setban 127.0.0.0 remove\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     BOOST_CHECK_EQUAL(ar.size(), 0);\n \n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n     UniValue banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/24\");\n     BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n \n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n \n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 200\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0/24 add 200\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n@@ -279,43 +277,43 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK(banned_until.get_int64()-now <= 200);\n \n     // must throw an exception because 127.0.0.1 is in already banned suubnet range\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.1 add\")), runtime_error);\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban 127.0.0.1 add\")), std::runtime_error);\n \n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0/24 remove\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"setban 127.0.0.0/24 remove\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     BOOST_CHECK_EQUAL(ar.size(), 0);\n \n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/255.255.0.0 add\")));\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.1.1 add\")), runtime_error);\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0/255.255.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban 127.0.1.1 add\")), std::runtime_error);\n \n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     BOOST_CHECK_EQUAL(ar.size(), 0);\n \n \n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban test add\")), runtime_error); //invalid IP\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban test add\")), std::runtime_error); //invalid IP\n \n     //IPv6 tests\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban FE80:0000:0000:0000:0202:B3FF:FE1E:8329 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban FE80:0000:0000:0000:0202:B3FF:FE1E:8329 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"fe80::202:b3ff:fe1e:8329/128\");\n \n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:db8::/ffff:fffc:0:0:0:0:0:0 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 2001:db8::/ffff:fffc:0:0:0:0:0:0 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"2001:db8::/30\");\n \n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");"
      },
      {
        "sha": "ce8071e4e9e4e07f19c97093516a5de0b4276740",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n // Helpers:\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n@@ -80,7 +78,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    std::string reason;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -178,7 +176,7 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    std::string reason;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -263,7 +261,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n     CKey key[6];\n-    vector<CPubKey> keys;\n+    std::vector<CPubKey> keys;\n     for (int i = 0; i < 6; i++)\n     {\n         key[i].MakeNewKey(true);\n@@ -335,8 +333,8 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:\n-    txTo.vin[3].scriptSig << OP_11 << OP_11 << vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n-    txTo.vin[4].scriptSig << vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n+    txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n+    txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n@@ -349,7 +347,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd1.vin[0].scriptSig << vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n+    txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n@@ -361,7 +359,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd2.vin[0].scriptSig << vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n+    txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);"
      },
      {
        "sha": "02af8af081827cc39b22e4f3c92cd023328ba316",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 21,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -29,15 +29,13 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n // Uncomment if you want to output updated JSON tests.\n // #define UPDATE_JSON_TESTS\n \n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n-unsigned int ParseScriptFlags(string strFlags);\n-string FormatScriptFlags(unsigned int flags);\n+unsigned int ParseScriptFlags(std::string strFlags);\n+std::string FormatScriptFlags(unsigned int flags);\n \n UniValue\n read_json(const std::string& jsondata)\n@@ -800,7 +798,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n         CScript witscript = CScript() << ToByteVector(keys.pubkey0);\n         uint256 hash;\n         CSHA256().Write(&witscript[0], witscript.size()).Finalize(hash.begin());\n-        vector<unsigned char> hashBytes = ToByteVector(hash);\n+        std::vector<unsigned char> hashBytes = ToByteVector(hash);\n         hashBytes.pop_back();\n         tests.push_back(TestBuilder(CScript() << OP_0 << hashBytes,\n                                     \"P2WPKH with wrong witness program length\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false\n@@ -965,7 +963,7 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n-        string strTest = test.write();\n+        std::string strTest = test.write();\n         CScriptWitness witness;\n         CAmount nValue = 0;\n         unsigned int pos = 0;\n@@ -984,9 +982,9 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n             }\n             continue;\n         }\n-        string scriptSigString = test[pos++].get_str();\n+        std::string scriptSigString = test[pos++].get_str();\n         CScript scriptSig = ParseScript(scriptSigString);\n-        string scriptPubKeyString = test[pos++].get_str();\n+        std::string scriptPubKeyString = test[pos++].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[pos++].get_str());\n         int scriptError = ParseScriptError(test[pos++].get_str());\n@@ -1005,21 +1003,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     ScriptError err;\n-    vector<vector<unsigned char> > directStack;\n+    std::vector<std::vector<unsigned char> > directStack;\n     BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    vector<vector<unsigned char> > pushdata1Stack;\n+    std::vector<std::vector<unsigned char> > pushdata1Stack;\n     BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    vector<vector<unsigned char> > pushdata2Stack;\n+    std::vector<std::vector<unsigned char> > pushdata2Stack;\n     BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    vector<vector<unsigned char> > pushdata4Stack;\n+    std::vector<std::vector<unsigned char> > pushdata4Stack;\n     BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -1042,7 +1040,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     result << OP_0;\n     BOOST_FOREACH(const CKey &key, keys)\n     {\n-        vector<unsigned char> vchSig;\n+        std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         result << vchSig;\n@@ -1161,8 +1159,8 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // Test the CombineSignatures function\n     CAmount amount = 0;\n     CBasicKeyStore keystore;\n-    vector<CKey> keys;\n-    vector<CPubKey> pubkeys;\n+    std::vector<CKey> keys;\n+    std::vector<CPubKey> pubkeys;\n     for (int i = 0; i < 3; i++)\n     {\n         CKey key;\n@@ -1223,15 +1221,15 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // A couple of partially-signed versions:\n-    vector<unsigned char> sig1;\n+    std::vector<unsigned char> sig1;\n     uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n-    vector<unsigned char> sig2;\n+    std::vector<unsigned char> sig2;\n     uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n-    vector<unsigned char> sig3;\n+    std::vector<unsigned char> sig3;\n     uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n@@ -1305,9 +1303,9 @@ BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n     BOOST_CHECK_EQUAL(\"OP_CHECKLOCKTIMEVERIFY\", ScriptToAsmStr(CScript() << OP_NOP2));\n     BOOST_CHECK_EQUAL(\"OP_CHECKLOCKTIMEVERIFY\", ScriptToAsmStr(CScript() << OP_CHECKLOCKTIMEVERIFY));\n \n-    string derSig(\"304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090\");\n-    string pubKey(\"03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2\");\n-    vector<unsigned char> vchPubKey = ToByteVector(ParseHex(pubKey));\n+    std::string derSig(\"304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090\");\n+    std::string pubKey(\"03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2\");\n+    std::vector<unsigned char> vchPubKey = ToByteVector(ParseHex(pubKey));\n \n     BOOST_CHECK_EQUAL(derSig + \"00 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"00\")) << vchPubKey, true));\n     BOOST_CHECK_EQUAL(derSig + \"80 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"80\")) << vchPubKey, true));"
      },
      {
        "sha": "447428a836af4d9a0bbe46ef4cd2d414ac19694e",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -10,7 +10,6 @@\n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n-using namespace std;\n \n BOOST_FIXTURE_TEST_SUITE(serialize_tests, BasicTestingSetup)\n \n@@ -227,7 +226,7 @@ BOOST_AUTO_TEST_CASE(varints_bitpatterns)\n BOOST_AUTO_TEST_CASE(compactsize)\n {\n     CDataStream ss(SER_DISK, 0);\n-    vector<char>::size_type i, j;\n+    std::vector<char>::size_type i, j;\n \n     for (i = 1; i <= MAX_SIZE; i *= 2)\n     {\n@@ -260,7 +259,7 @@ BOOST_AUTO_TEST_CASE(noncanonical)\n     // Write some non-canonical CompactSize encodings, and\n     // make sure an exception is thrown when read back.\n     CDataStream ss(SER_DISK, 0);\n-    vector<char>::size_type n;\n+    std::vector<char>::size_type n;\n \n     // zero encoded with three bytes:\n     ss.write(\"\\xfd\\x00\\x00\", 3);"
      },
      {
        "sha": "a34459fc836e8b91155741c734279376f0a45885",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -15,8 +15,6 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n // Helpers:\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n@@ -160,8 +158,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForWitness(p2pk);\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n \n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n@@ -190,8 +188,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n@@ -204,9 +202,9 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForWitness(witnessScript);\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n@@ -221,9 +219,9 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);"
      },
      {
        "sha": "cafed7616f5ede878f6e41270ebaea4315c50706",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -9,8 +9,7 @@\n #include <boost/assign/std/vector.hpp> // for 'operator+=()'\n #include <boost/assert.hpp>\n #include <boost/test/unit_test.hpp>\n-                    \n-using namespace std;\n+\n using namespace boost::assign; // bring 'operator+=()' into scope\n \n BOOST_FIXTURE_TEST_SUITE(streams_tests, BasicTestingSetup)"
      },
      {
        "sha": "34863fd9d06fda3574fe15dcaa3e83aea6763400",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -7,8 +7,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(timedata_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_MedianFilter)"
      },
      {
        "sha": "8c9aaef02fc7f74f88fb98578374f6dccc2431dc",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 41,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -32,42 +32,40 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n-typedef vector<unsigned char> valtype;\n+typedef std::vector<unsigned char> valtype;\n \n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n \n-static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n-    (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n-    (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n-    (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n-    (string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n-    (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n-    (string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY)\n-    (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n-    (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n-    (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (string(\"MINIMALIF\"), (unsigned int)SCRIPT_VERIFY_MINIMALIF)\n-    (string(\"NULLFAIL\"), (unsigned int)SCRIPT_VERIFY_NULLFAIL)\n-    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n-    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n-    (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n-    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n-    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n-\n-unsigned int ParseScriptFlags(string strFlags)\n+static std::map<std::string, unsigned int> mapFlagNames = boost::assign::map_list_of\n+    (std::string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n+    (std::string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n+    (std::string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (std::string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n+    (std::string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n+    (std::string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY)\n+    (std::string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n+    (std::string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n+    (std::string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+    (std::string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n+    (std::string(\"MINIMALIF\"), (unsigned int)SCRIPT_VERIFY_MINIMALIF)\n+    (std::string(\"NULLFAIL\"), (unsigned int)SCRIPT_VERIFY_NULLFAIL)\n+    (std::string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n+    (std::string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n+    (std::string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n+    (std::string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n+    (std::string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n+\n+unsigned int ParseScriptFlags(std::string strFlags)\n {\n     if (strFlags.empty()) {\n         return 0;\n     }\n     unsigned int flags = 0;\n-    vector<string> words;\n+    std::vector<std::string> words;\n     boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n-    BOOST_FOREACH(string word, words)\n+    BOOST_FOREACH(std::string word, words)\n     {\n         if (!mapFlagNames.count(word))\n             BOOST_ERROR(\"Bad test: unknown verification flag '\" << word << \"'\");\n@@ -77,13 +75,13 @@ unsigned int ParseScriptFlags(string strFlags)\n     return flags;\n }\n \n-string FormatScriptFlags(unsigned int flags)\n+std::string FormatScriptFlags(unsigned int flags)\n {\n     if (flags == 0) {\n         return \"\";\n     }\n-    string ret;\n-    std::map<string, unsigned int>::const_iterator it = mapFlagNames.begin();\n+    std::string ret;\n+    std::map<std::string, unsigned int>::const_iterator it = mapFlagNames.begin();\n     while (it != mapFlagNames.end()) {\n         if (flags & it->second) {\n             ret += it->first + \",\";\n@@ -109,7 +107,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     ScriptError err;\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n-        string strTest = test.write();\n+        std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n             if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n@@ -118,8 +116,8 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 continue;\n             }\n \n-            map<COutPoint, CScript> mapprevOutScriptPubKeys;\n-            map<COutPoint, int64_t> mapprevOutValues;\n+            std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            std::map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -148,7 +146,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 continue;\n             }\n \n-            string transaction = test[1].get_str();\n+            std::string transaction = test[1].get_str();\n             CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n             CTransaction tx(deserialize, stream);\n \n@@ -194,7 +192,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     ScriptError err;\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n-        string strTest = test.write();\n+        std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n             if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n@@ -203,8 +201,8 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 continue;\n             }\n \n-            map<COutPoint, CScript> mapprevOutScriptPubKeys;\n-            map<COutPoint, int64_t> mapprevOutValues;\n+            std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            std::map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -233,7 +231,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 continue;\n             }\n \n-            string transaction = test[1].get_str();\n+            std::string transaction = test[1].get_str();\n             CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION );\n             CTransaction tx(deserialize, stream);\n \n@@ -268,7 +266,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n {\n     // Random real transaction (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n-    vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n+    std::vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n     CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n     CMutableTransaction tx;\n     stream >> tx;\n@@ -390,7 +388,7 @@ void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& inp\n     assert(ret == success);\n }\n \n-static CScript PushAll(const vector<valtype>& values)\n+static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n     BOOST_FOREACH(const valtype& v, values) {\n@@ -407,7 +405,7 @@ static CScript PushAll(const vector<valtype>& values)\n \n void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n-    vector<valtype> stack;\n+    std::vector<valtype> stack;\n     EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SIGVERSION_BASE);\n     assert(stack.size() > 0);\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n@@ -425,7 +423,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     CKeyID hash = key.GetPubKey().GetID();\n     CScript scriptPubKey = CScript() << OP_0 << std::vector<unsigned char>(hash.begin(), hash.end());\n \n-    vector<int> sigHashes;\n+    std::vector<int> sigHashes;\n     sigHashes.push_back(SIGHASH_NONE | SIGHASH_ANYONECANPAY);\n     sigHashes.push_back(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY);\n     sigHashes.push_back(SIGHASH_ALL | SIGHASH_ANYONECANPAY);\n@@ -688,7 +686,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n-    string reason;\n+    std::string reason;\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     // Check dust with default relay fee:"
      },
      {
        "sha": "2c20b14ea0d858a109194b5d405a549a15e75858",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 20,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -12,8 +12,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(univalue_constructor)\n@@ -53,7 +51,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n     BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n-    string vs(\"yawn\");\n+    std::string vs(\"yawn\");\n     UniValue v8(vs);\n     BOOST_CHECK(v8.isStr());\n     BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n@@ -69,41 +67,41 @@ BOOST_AUTO_TEST_CASE(univalue_typecheck)\n     UniValue v1;\n     BOOST_CHECK(v1.setNumStr(\"1\"));\n     BOOST_CHECK(v1.isNum());\n-    BOOST_CHECK_THROW(v1.get_bool(), runtime_error);\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n \n     UniValue v2;\n     BOOST_CHECK(v2.setBool(true));\n     BOOST_CHECK_EQUAL(v2.get_bool(), true);\n-    BOOST_CHECK_THROW(v2.get_int(), runtime_error);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n \n     UniValue v3;\n     BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n-    BOOST_CHECK_THROW(v3.get_int64(), runtime_error);\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n     BOOST_CHECK(v3.setNumStr(\"1000\"));\n     BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n \n     UniValue v4;\n     BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n     BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n-    BOOST_CHECK_THROW(v4.get_int(), runtime_error);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n     BOOST_CHECK(v4.setNumStr(\"1000\"));\n     BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n-    BOOST_CHECK_THROW(v4.get_str(), runtime_error);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n     BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n-    BOOST_CHECK_THROW(v4.get_array(), runtime_error);\n-    BOOST_CHECK_THROW(v4.getKeys(), runtime_error);\n-    BOOST_CHECK_THROW(v4.getValues(), runtime_error);\n-    BOOST_CHECK_THROW(v4.get_obj(), runtime_error);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n \n     UniValue v5;\n     BOOST_CHECK(v5.read(\"[true, 10]\"));\n     BOOST_CHECK_NO_THROW(v5.get_array());\n     std::vector<UniValue> vals = v5.getValues();\n-    BOOST_CHECK_THROW(vals[0].get_int(), runtime_error);\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n     BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n \n     BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n-    BOOST_CHECK_THROW(vals[1].get_bool(), runtime_error);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n }\n \n BOOST_AUTO_TEST_CASE(univalue_set)\n@@ -172,13 +170,13 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n     UniValue v((int64_t)1023LL);\n     BOOST_CHECK(arr.push_back(v));\n \n-    string vStr(\"zippy\");\n+    std::string vStr(\"zippy\");\n     BOOST_CHECK(arr.push_back(vStr));\n \n     const char *s = \"pippy\";\n     BOOST_CHECK(arr.push_back(s));\n \n-    vector<UniValue> vec;\n+    std::vector<UniValue> vec;\n     v.setStr(\"boing\");\n     vec.push_back(v);\n \n@@ -206,7 +204,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n BOOST_AUTO_TEST_CASE(univalue_object)\n {\n     UniValue obj(UniValue::VOBJ);\n-    string strKey, strVal;\n+    std::string strKey, strVal;\n     UniValue v;\n \n     strKey = \"age\";\n@@ -266,7 +264,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n \n     BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n \n-    map<string, UniValue::VType> objTypes;\n+    std::map<std::string, UniValue::VType> objTypes;\n     objTypes[\"age\"] = UniValue::VNUM;\n     objTypes[\"first\"] = UniValue::VSTR;\n     objTypes[\"last\"] = UniValue::VSTR;\n@@ -294,7 +292,7 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     UniValue v;\n     BOOST_CHECK(v.read(json1));\n \n-    string strJson1(json1);\n+    std::string strJson1(json1);\n     BOOST_CHECK(v.read(strJson1));\n \n     BOOST_CHECK(v.isArray());\n@@ -333,4 +331,3 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "d14b6c8e7e3423362e891843a46fde51aad02104",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73f41190b91dce9c125b1828b18f7625e0200145/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73f41190b91dce9c125b1828b18f7625e0200145/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=73f41190b91dce9c125b1828b18f7625e0200145",
        "patch": "@@ -17,9 +17,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n-extern map<string, string> mapArgs;\n+extern std::map<std::string, std::string> mapArgs;\n \n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n "
      }
    ]
  }
]