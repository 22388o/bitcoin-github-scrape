practicalswift,2020-11-23 19:44:59,Concept ACK: nice cleanup (+49 âˆ’109)!,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-732385818,732385818,
DrahtBot,2020-11-23 21:38:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #14485 (Try to use posix_fadvise with CBufferedFile by luke-jr)\n\nIf you consider this pull request important, please als",https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-732441436,732441436,
laanwj,2020-11-25 08:54:56,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-733562823,733562823,
laanwj,2020-11-25 08:58:33,"There are some more unnecessary `MakeUCharSpan` that can be removed here, especially related to Base64 handling:\n```\nsrc/rpc/rawtransaction.cpp:    return EncodeBase64(MakeUCharSpan(ssTx));\nsrc/rpc/rawtransaction.cpp:    return EncodeBase64(MakeUCharSpan(ssTx));\nsrc/rpc/rawtransaction.cpp:    return EncodeBase64(MakeUCharSpan(ssTx));\nsrc/rpc/rawtransaction.cpp:    return EncodeBase64(Mak",https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-733564863,733564863,
jonatack,2020-11-25 09:25:01,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-733580337,733580337,
laanwj,2020-12-19 12:18:21,Code review ACK apart from the above comment. This PR is straightforward to review. The first commit can be seen separately.,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-748466937,748466937,
theStack,2020-12-30 20:19:11,Concept ACK -- will review as soon as https://github.com/bitcoin/bitcoin/pull/20464#discussion_r546231371 is resolved,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-752745862,752745862,
laanwj,2021-02-01 14:06:38,code review ACK fa292724598c273867bc6dbf311f1440fe2541ba,https://github.com/bitcoin/bitcoin/pull/20464#issuecomment-770881961,770881961,
laanwj,2020-12-19 12:10:45,"There is already a `bool Rewind(size_type n)`, overloading it here is confusing. We should think of a new name. I had hoped to think of a way to use the existing method in the only place it is used, but it appears there is  no way to access `nReadPos` (or even derive it) from the outside.",https://github.com/bitcoin/bitcoin/pull/20464#discussion_r546231371,546231371,src/streams.h
MarcoFalke,2020-12-19 12:17:51,"I think the name make sense. `Rewind(size_t)` rewinds only how much is passed. `Rewind()` rewinds all the way. Though, I am happy to rename this to anything else, if there are suggestions.",https://github.com/bitcoin/bitcoin/pull/20464#discussion_r546232009,546232009,src/streams.h
theStack,2020-12-30 20:09:26,"It's a pity that there is no defined invalid value for size_t, which could be passed as default value. Would `Rewind(std::optional<size_t> n = std::nullopt)` be a possibility here to unite the two methods? Like e.g.:\n\n```diff\ndiff --git a/src/streams.h b/src/streams.h\nindex 2a921c2c5..a6e781b95 100644\n--- a/src/streams.h\n+++ b/src/streams.h\n@@ -14,6 +14,7 @@\n #include <assert.h>\n",https://github.com/bitcoin/bitcoin/pull/20464#discussion_r550313783,550313783,src/streams.h
MarcoFalke,2020-12-31 08:10:21,"Thanks, fixed",https://github.com/bitcoin/bitcoin/pull/20464#discussion_r550424466,550424466,src/streams.h
laanwj,2021-02-01 14:05:14,"> I think the name make sense. Rewind(size_t) rewinds only how much is passed.\n\nRight. My remark was triggered mostly by that the two implementations of `rewind()` were in different places in the method list and not together, the name makes some sense.\n\nBut I like the new combined implementation.\n",https://github.com/bitcoin/bitcoin/pull/20464#discussion_r567848918,567848918,src/streams.h
