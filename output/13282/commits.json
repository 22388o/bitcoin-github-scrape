[
  {
    "sha": "60ebc7da4c2f918c821008088e88aba8ab40d867",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGViYzdkYTRjMmY5MThjODIxMDA4MDg4ZTg4YWJhOGFiNDBkODY3",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-05-20T07:15:39Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-05-20T07:15:39Z"
      },
      "message": "trivial: Mark overrides as such.\n\nThis trivial change adds the \"override\" keyword to some methods of\nsubclasses meant to override interface methods.  This ensures that any\nfuture change to the interface' method signatures which are not correctly\nmirrored in the subclass will break at compile time with a clear error message,\nrather than fail at runtime (which is harder to debug).",
      "tree": {
        "sha": "64375d39d60874eb2a16b6c5760f6659eaac2b68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64375d39d60874eb2a16b6c5760f6659eaac2b68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ebc7da4c2f918c821008088e88aba8ab40d867",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ebc7da4c2f918c821008088e88aba8ab40d867",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60ebc7da4c2f918c821008088e88aba8ab40d867",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ebc7da4c2f918c821008088e88aba8ab40d867/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5d131c2aa8589e84c0516770f8bd5c6131e47b98",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ebc7da4c2f918c821008088e88aba8ab40d867/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ebc7da4c2f918c821008088e88aba8ab40d867/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=60ebc7da4c2f918c821008088e88aba8ab40d867",
        "patch": "@@ -111,19 +111,19 @@ class Printer\n class ConsolePrinter : public Printer\n {\n public:\n-    void header();\n-    void result(const State& state);\n-    void footer();\n+    void header() override;\n+    void result(const State& state) override;\n+    void footer() override;\n };\n \n // creates box plot with plotly.js\n class PlotlyPrinter : public Printer\n {\n public:\n     PlotlyPrinter(std::string plotly_url, int64_t width, int64_t height);\n-    void header();\n-    void result(const State& state);\n-    void footer();\n+    void header() override;\n+    void result(const State& state) override;\n+    void footer() override;\n \n private:\n     std::string m_plotly_url;"
      },
      {
        "sha": "37c4f79133a05c9c79dcbf9f4db08cc4c64a4cf2",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ebc7da4c2f918c821008088e88aba8ab40d867/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ebc7da4c2f918c821008088e88aba8ab40d867/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=60ebc7da4c2f918c821008088e88aba8ab40d867",
        "patch": "@@ -25,20 +25,20 @@ struct TestSubscriber : public CValidationInterface {\n \n     TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n \n-    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n     }\n \n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n         BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n \n         m_expected_tip = block->GetHash();\n     }\n \n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n "
      }
    ]
  }
]