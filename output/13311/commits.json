[
  {
    "sha": "980b38f8a12130d2761d0f748db750165cfed025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODBiMzhmOGExMjEzMGQyNzYxZDBmNzQ4ZGI3NTAxNjVjZmVkMDI1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-06-16T20:33:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-09-23T20:55:11Z"
      },
      "message": "MOVEONLY: Move versionbits info out of versionbits.o",
      "tree": {
        "sha": "f5eb758ca0fb57d70fc3606c85a60d20ae057951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5eb758ca0fb57d70fc3606c85a60d20ae057951"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/980b38f8a12130d2761d0f748db750165cfed025",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbp/2vAAoJEKT10UHAGgOH7MwP/jU2AkC4pwXoHB+/KzxEQ1M3\nESaPAfNksjafHm8rJWpmQ/tNymyDryYp1+7X4f8o9155aqd9YmhMzo0fKEDe1PeR\nVBlu1Wju9x78ljrBUFIn+fT0f13WVyxmoxIQTp1kILnnko82y/hEa1uuPRxg+efh\n/qP2VhzJam2Bj7FVg3gQi4FmibdtEyNna4F0kvRHbw+0v5/Ve1msHrTB2vToK1l4\n1GgaP7BVLRZOR23S8YB8Q3Z34P+DLZEXswH8JsrDfkwdqMWa4dz/QRKU3jdrAC7j\nyZPgsXxC5S22pVUH15LwbH6NtqZusBrQJ3zH9PhJQL9uW/TA6Ivt4d7TFJTvtJ7c\nKYb4L0sDtcm/3yPOaabNjo2Z3s5jA1pQoTHw/pw6YHG8PW2muZrPDryqfo2retlr\nBBqsO1Li9GPhrh+OArc2oIuk52mJeFbQ1zIvjyJSCVz+u1LXPPFbMjEzQ2EJj4t5\npaJwe7bD/l2Fg7VrCxYzZk4jr+lOYSxk5LJj1yTvM6vTPGMf/bfTInyVHu5+mLQd\nzrUIp8fryA5Wr0nXa4ylu1xCHC8BfkKDd1aqsC9t8j3IO8wxvSG5BJPQ9StDc9DX\nPISrUA+nI6xjrTqLPWJE0xe3YAoiBxcgpsowgZUnghR5t0AccnBKF7US8PUlWFiN\ndajqwpzI2+fv+VVvCzdB\n=yQ95\n-----END PGP SIGNATURE-----",
        "payload": "tree f5eb758ca0fb57d70fc3606c85a60d20ae057951\nparent 920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1529181222 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1537736111 +0200\n\nMOVEONLY: Move versionbits info out of versionbits.o\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/980b38f8a12130d2761d0f748db750165cfed025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/980b38f8a12130d2761d0f748db750165cfed025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/980b38f8a12130d2761d0f748db750165cfed025/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 44,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a1b9b4cb8234ac93a0967fda27a052823de22365",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -187,6 +187,7 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n+  versionbitsinfo.h \\\n   walletinitinterface.h \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n@@ -400,6 +401,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n+  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "bb23748d82668472c9d70f0c88b085c42b804bf7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -44,6 +44,7 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>\n+#include <versionbitsinfo.h>\n #include <warnings.h>\n #include <walletinitinterface.h>\n #include <stdint.h>"
      },
      {
        "sha": "073ab8b1b122bee201720b497475cbd7b3bb97a2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -30,6 +30,7 @@\n #include <utilstrencodings.h>\n #include <hash.h>\n #include <validationinterface.h>\n+#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <assert.h>"
      },
      {
        "sha": "3eac8a10160e3d09788e32daae7c972a469cd8b0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -24,6 +24,7 @@\n #include <utilstrencodings.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>"
      },
      {
        "sha": "3f297c0ebbc8bcd4a861be711e466318f4abaee0",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -5,21 +5,6 @@\n #include <versionbits.h>\n #include <consensus/params.h>\n \n-const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n-    {\n-        /*.name =*/ \"testdummy\",\n-        /*.gbt_force =*/ true,\n-    },\n-    {\n-        /*.name =*/ \"csv\",\n-        /*.gbt_force =*/ true,\n-    },\n-    {\n-        /*.name =*/ \"segwit\",\n-        /*.gbt_force =*/ true,\n-    }\n-};\n-\n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     int nPeriod = Period(params);"
      },
      {
        "sha": "cdc947cd9ef4f778d3c5baa87230c83651d2804f",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -30,13 +30,6 @@ enum class ThresholdState {\n // will either be nullptr or a block with (height + 1) % Period() == 0.\n typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n \n-struct VBDeploymentInfo {\n-    /** Deployment name */\n-    const char *name;\n-    /** Whether GBT clients can safely ignore this rule in simplified usage */\n-    bool gbt_force;\n-};\n-\n struct BIP9Stats {\n     int period;\n     int threshold;\n@@ -45,8 +38,6 @@ struct BIP9Stats {\n     bool possible;\n };\n \n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n-\n /**\n  * Abstract class that implements BIP9-style threshold logic, and caches results.\n  */"
      },
      {
        "sha": "ecf34829277292af50b4c07ce8908c6ba72fd33c",
        "filename": "src/versionbitsinfo.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <versionbitsinfo.h>\n+\n+#include <consensus/params.h>\n+\n+const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+    {\n+        /*.name =*/ \"testdummy\",\n+        /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"csv\",\n+        /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"segwit\",\n+        /*.gbt_force =*/ true,\n+    }\n+};"
      },
      {
        "sha": "a7822bc747a977df697e1e8975cd5558948820c8",
        "filename": "src/versionbitsinfo.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/980b38f8a12130d2761d0f748db750165cfed025/src/versionbitsinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/980b38f8a12130d2761d0f748db750165cfed025/src/versionbitsinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.h?ref=980b38f8a12130d2761d0f748db750165cfed025",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VERSIONBITSINFO_H\n+#define BITCOIN_VERSIONBITSINFO_H\n+\n+struct VBDeploymentInfo {\n+    /** Deployment name */\n+    const char *name;\n+    /** Whether GBT clients can safely ignore this rule in simplified usage */\n+    bool gbt_force;\n+};\n+\n+extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n+\n+#endif // BITCOIN_VERSIONBITSINFO_H"
      }
    ]
  },
  {
    "sha": "6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmE5MDFmYjQ3MjZkZGFjMDI1ZDUzOTZlY2YwOWQwNDdhOGFhOWEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-06-16T20:38:13Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-09-23T20:58:54Z"
      },
      "message": "Don't edit Chainparams after initialization",
      "tree": {
        "sha": "efd5ec896f8f8542eeb6a5649118a22858de609d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efd5ec896f8f8542eeb6a5649118a22858de609d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbp/6QAAoJEKT10UHAGgOHpSAP/jX4so53VCyrcgry3MMBEHHv\nRRCRctixE34lAkWMd/ZzaRY4nn8ZnAoe7m0YOn/3f2R5mT15uFTF6o3VbjLQOffB\nZCgQ5zHidHpV1EOoSzoCA0hJMiWRVZOwzJlagUpR5sMvHtG6u7YQsI0wGi4MxprB\n2mPbpwk11DhhknO1Le/aDIGUbpS2UF51oFT+oqb8JVNFQF/wTUQnjignWOIeeHnq\nP6O7kgD+uoGWbeSFO2YaisuzY0Fw3iWprw7STQzc1n15olgq74+cBA69OAj5ks6B\ngVNzqI3oWHDkzFQPxLMnOt8LErHEsuU71kYM4WgbHev8UhviyPN2fRMYzcVBwTF3\n8ssiTe87jR5AcdVOK7eykGWcQFdP3ZINEhnW3TVFRaRAADFSS1FvRWEGpeMuY311\nd5Qy3vwiwMhsN5PSCqP9EmBkD6KS9mxs73FedtXwVOISAOji2CK+S8HKfp6za6fP\n+e10hwCn9ucXzTqftwBVZkbzoB+WKGHfSNnzrs8AnvHFaLGdiUefBvCp4AikC1m7\nyNLcrLzlol/TBtoqp/ZPkT5AQYv3WFQXkVHC20UpisnBzgxZ/yvvWQ0gU07Z3nXA\nmwxyO3rmfop5fGvTQFfbsdD4BU5yVhJIz53/35qNh7NNBr5r4Ev6GuR8ewOs3Ai2\n2fBxuMk6hCitdjZOj/3z\n=bJpM\n-----END PGP SIGNATURE-----",
        "payload": "tree efd5ec896f8f8542eeb6a5649118a22858de609d\nparent 980b38f8a12130d2761d0f748db750165cfed025\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1529181493 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1537736334 +0200\n\nDon't edit Chainparams after initialization\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "980b38f8a12130d2761d0f748db750165cfed025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/980b38f8a12130d2761d0f748db750165cfed025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/980b38f8a12130d2761d0f748db750165cfed025"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 58,
      "deletions": 60
    },
    "files": [
      {
        "sha": "0574e2395e810e3b28970c0c583a74ef54c4674a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 15,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
        "patch": "@@ -10,9 +10,13 @@\n #include <tinyformat.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <versionbitsinfo.h>\n \n #include <assert.h>\n \n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -52,12 +56,6 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n-void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-{\n-    consensus.vDeployments[d].nStartTime = nStartTime;\n-    consensus.vDeployments[d].nTimeout = nTimeout;\n-}\n-\n /**\n  * Main network\n  */\n@@ -270,7 +268,7 @@ class CTestNetParams : public CChainParams {\n  */\n class CRegTestParams : public CChainParams {\n public:\n-    CRegTestParams() {\n+    explicit CRegTestParams(const ArgsManager& args) {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n@@ -308,6 +306,8 @@ class CRegTestParams : public CChainParams {\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n \n+        UpdateVersionBitsParametersFromArgs(args);\n+\n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n@@ -343,23 +343,65 @@ class CRegTestParams : public CChainParams {\n         /* enable fallback fee on regtest */\n         m_fallback_fee_enabled = true;\n     }\n+\n+    /**\n+     * Allows modifying the Version Bits regtest parameters.\n+     */\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    {\n+        consensus.vDeployments[d].nStartTime = nStartTime;\n+        consensus.vDeployments[d].nTimeout = nTimeout;\n+    }\n+    void UpdateVersionBitsParametersFromArgs(const ArgsManager& args);\n };\n \n-static std::unique_ptr<CChainParams> globalChainParams;\n+void CRegTestParams::UpdateVersionBitsParametersFromArgs(const ArgsManager& args)\n+{\n+    if (!args.IsArgSet(\"-vbparams\")) return;\n+\n+    for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n+        std::vector<std::string> vDeploymentParams;\n+        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n+        if (vDeploymentParams.size() != 3) {\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+        }\n+        int64_t nStartTime, nTimeout;\n+        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n+            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+        }\n+        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n+            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+        }\n+        bool found = false;\n+        for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n+            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                found = true;\n+                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                break;\n+            }\n+        }\n+        if (!found) {\n+            throw std::runtime_error(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+        }\n+    }\n+}\n+\n+static std::unique_ptr<const CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n     return *globalChainParams;\n }\n \n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CChainParams>(new CRegTestParams());\n+        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n@@ -368,8 +410,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     globalChainParams = CreateChainParams(network);\n }\n-\n-void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-{\n-    globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n-}"
      },
      {
        "sha": "19818b40aff5c5a2d026a34718d5e8c8092dbd88",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
        "patch": "@@ -80,7 +80,6 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n \n@@ -107,7 +106,7 @@ class CChainParams\n  * @returns a CChainParams* of the chosen chain.\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n \n /**\n  * Return the currently selected parameters. This won't change after app\n@@ -121,9 +120,4 @@ const CChainParams &Params();\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Allows modifying the Version Bits regtest parameters.\n- */\n-void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "870640e77d01e28c1c4b362929f284b8814ee56d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
        "patch": "@@ -20,6 +20,7 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "00d97629f77297cff9af39e321b44587df2afeb3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
        "patch": "@@ -44,7 +44,6 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n #include <walletinitinterface.h>\n #include <stdint.h>\n@@ -446,7 +445,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n@@ -1102,39 +1100,6 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (gArgs.IsArgSet(\"-vbparams\")) {\n-        // Allow overriding version bits parameters for testing\n-        if (!chainparams.MineBlocksOnDemand()) {\n-            return InitError(\"Version bits parameters may only be overridden on regtest.\");\n-        }\n-        for (const std::string& strDeployment : gArgs.GetArgs(\"-vbparams\")) {\n-            std::vector<std::string> vDeploymentParams;\n-            boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-            if (vDeploymentParams.size() != 3) {\n-                return InitError(\"Version bits parameters malformed, expecting deployment:start:end\");\n-            }\n-            int64_t nStartTime, nTimeout;\n-            if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-                return InitError(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n-            }\n-            if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-                return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n-            }\n-            bool found = false;\n-            for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n-            {\n-                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n-                    UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n-                    found = true;\n-                    LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n-                    break;\n-                }\n-            }\n-            if (!found) {\n-                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n-            }\n-        }\n-    }\n     return true;\n }\n "
      },
      {
        "sha": "f7874e6882bb913caaec5757846647a75fcaf205",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa901fb4726ddac025d5396ecf09d047a8aa9a1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=6fa901fb4726ddac025d5396ecf09d047a8aa9a1",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n #include <miner.h>\n@@ -58,6 +59,9 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n     fCheckBlockIndex = true;\n+    // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n+    // TODO: fix the code to support SegWit blocks.\n+    gArgs.ForceSetArg(\"-vbparams\", strprintf(\"segwit:0:%d\", (int64_t)Consensus::BIP9Deployment::NO_TIMEOUT));\n     SelectParams(chainName);\n     noui_connect();\n }\n@@ -128,9 +132,6 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n-    // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n-    // TODO: fix the code to support SegWit blocks.\n-    UpdateVersionBitsParameters(Consensus::DEPLOYMENT_SEGWIT, 0, Consensus::BIP9Deployment::NO_TIMEOUT);\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;"
      }
    ]
  }
]