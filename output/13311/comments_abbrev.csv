skeees,2018-05-23T17:45:46Z,"to ease review, might be good to split this into a moveonly commit and then a subsequent one with changes if thats possible?",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-391437656,391437656,
sipa,2018-05-24T17:42:09Z,"Why move the version bits information to a separate file? This introduces a circular dependency between chainparams and versionbitsinfo,",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-391800316,391800316,
jtimon,2018-05-27T10:36:54Z,"> to ease review, might be good to split this into a moveonly commit and then a subsequent one with changes if thats possible?\n\nSure, but I would like to wait for some concept acks first.\n\n> Why move the version bits information to a separate file? This introduces a circular dependency between chainparams and versionbitsinfo,\n\nNo, it does not. After this, versionbits depends onchainpar",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-392321101,392321101,
sipa,2018-05-27T20:01:35Z,"> No, it does not. After this, versionbits depends onchainparams, which depends on versionbitsinfo, which depends on consensus/params.\n> The separation is precisely to avoid a circular dependency between chainparams and versionbits.\n\nMy apologies! I confused chainparams and consensus/params when reading this.",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-392362127,392362127,
MarcoFalke,2018-05-30T13:58:47Z,"Needs rebase due to merge of #13341\n",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-393172348,393172348,
jtimon,2018-06-16T20:42:49Z,"Rebased and separated MOVEONLY commit.\n",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-397837719,397837719,
jtimon,2018-07-19T05:41:05Z,"rebased\n",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-406160934,406160934,
jtimon,2018-07-19T22:36:52Z,Fixed nit in https://github.com/bitcoin/bitcoin/pull/13311#discussion_r201876880,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-406435380,406435380,
promag,2018-07-20T01:13:49Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-406459616,406459616,
jtimon,2018-07-20T01:31:34Z,Fixed nit in https://github.com/bitcoin/bitcoin/pull/13311/files#r203899444,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-406462100,406462100,
jtimon,2018-09-05T00:06:36Z,"Hopefully fixed all pending nits in the last commit to be squashed, please remind me if I left anything out. Also sorry about the wait, back from vacation.",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-418556456,418556456,
ajtowns,2018-09-06T00:04:28Z,"Looks good to me, fwiw",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-418919835,418919835,
jtimon,2018-09-07T22:09:40Z,"Of course, @DrahtBot , from now on I will rebase all my open PRs whenever you ask. Starting today with this PR. Thanks",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-419579264,419579264,
DrahtBot,2018-09-10T01:49:43Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14309 (scripted-diff: Use non-throwing type-safe ChainType where possible by MarcoFalke)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n* #14045 (refactor: Fix the chainparamsbase -> util circular dependency by Empact)\n* #13751 (Utils and libraries: Drops the boost/a,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-419764792,419764792,
ken2812221,2018-09-12T20:04:57Z,utACK 18d5f26,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-420779255,420779255,
jtimon,2018-09-16T22:37:21Z,"Any reason to use the global instead of a parameter?\nI think it's more encapsulated this way, but I tend to be alergic to\nglobals ib general. If people prefer a global I guess I will have to change\nit.\n\n\nOn Sun, 16 Sep 2018, 23:21 Jo√£o Barbosa, <notifications@github.com> wrote:\n\n> *@promag* commented on this pull request.\n>\n> utACK 18d5f26\n> <https://github.com/bitcoin/bitcoin/commit/18",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-421845888,421845888,
ajtowns,2018-09-18T13:03:04Z,utACK 18d5f2621f2ade428e631d34b95e23c8be862ec8,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-422384407,422384407,
jtimon,2018-09-19T16:03:21Z,Fixed 2 of the 3 clang warnings.,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-422860252,422860252,
jtimon,2018-09-23T20:59:59Z,"Fixed latest style nit.\n",https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-423847512,423847512,
promag,2018-09-23T23:25:37Z,utACK 6fa901f.,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-423855860,423855860,
MarcoFalke,2018-09-24T20:45:54Z,re-utACK 6fa901f,https://github.com/bitcoin/bitcoin/pull/13311#issuecomment-424118836,424118836,
instagibbs,2018-07-12T00:07:25Z,"NB: it's still used in init.cpp, only for mempool replacement",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r201875969,201875969,src/chainparams.cpp
instagibbs,2018-07-12T00:11:19Z,"NB: it's still used in init.cpp, only for mempool replacement",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r201876512,201876512,src/chainparams.cpp
instagibbs,2018-07-12T00:14:10Z,nit: would be nice to keep using `Consensus::BIP9Deployment::NO_TIMEOUT`,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r201876880,201876880,src/test/test_bitcoin.cpp
ajtowns,2018-07-19T23:11:44Z,"Could change this to `unique_ptr<const CChainParams>` to better ensure that params aren't changed after initialisation? (Means `CreateChainParams()` return value also needs to change, but that seems to work fine)",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203899444,203899444,src/chainparams.cpp
ajtowns,2018-07-19T23:23:40Z,Why not reference `gArgs` directly in `CreateChainParams()` when using REGTEST? This is the only place that actually calls `CreateChainParams` with the `args` parameter and the only place that calls it with `chain==REGTEST`. That way you don't need to have two different ways of calling `CreateChainParams`.,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203901242,203901242,src/chainparams.cpp
sipa,2018-07-19T23:25:04Z,Is it necessary to pass in an entire ArgsManager object? It seems only the -vbparams value is used. What about just passing in the vbparams value?,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203901479,203901479,src/chainparams.cpp
jtimon,2018-07-19T23:26:33Z,"Well, the point of that is to make it easy to add further params, like in https://github.com/bitcoin/bitcoin/pull/8994 (probably not all of them are interesting for testing).\n",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203901688,203901688,src/chainparams.cpp
jtimon,2018-07-20T01:23:17Z,"I can remove the new way of calling CreateChainParams, but the idea was that some unittests could create their own custom ArgsManager instead of using gArgs. This would only serve for testing functions that explicitly take a CChainParams instead of relaying on Params().",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203917276,203917276,src/chainparams.cpp
promag,2018-08-19T22:51:07Z,"Tend to agree with @ajtowns.\n\n> but the idea was that some unittests could create their own custom ArgsManager instead of using gArgs\n\nIf needed it can mutate gArgs? Or this can be done when needed?",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r211117992,211117992,src/chainparams.cpp
jtimon,2018-08-20T20:20:44Z,"I guess one can mutate gArgs to a given value for a given test and then back to its original value afterwards.\nOr as you say, make this change afterwards when it's going to be used.\n",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r211394627,211394627,src/chainparams.cpp
Empact,2018-08-20T23:23:55Z,"Better to just pass the needed arg IMO, and only couple these classes if preferable based on the eventual use.\nhttps://martinfowler.com/bliki/Yagni.html",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r211437401,211437401,src/chainparams.cpp
ajtowns,2018-08-27T04:39:58Z,Could make this `const ArgsManager& args`,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r212864705,212864705,src/chainparams.cpp
ajtowns,2018-08-27T04:40:23Z,`const ArgsManager&` here as well,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r212864736,212864736,src/chainparams.cpp
ajtowns,2018-08-27T04:41:39Z,"I still think dropping the `args` param and referencing `gArgs` here directly makes more sense. Otherwise, could make `args` be `const` here too.",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r212864830,212864830,src/chainparams.cpp
l2a5b1,2018-09-01T15:52:25Z,"This function can exit early if the `-vbparams` arg is not set.\n```c++\nvoid CRegTestParams::UpdateVersionBitsParametersFromArgs(ArgsManager& args)\n{\n    if (!args.IsArgSet(""-vbparams"")) return;\n\n    for (const std::string& strDeployment : args.GetArgs(""-vbparams"")) {\n        ...\n    }\n}\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r214517046,214517046,src/chainparams.cpp
l2a5b1,2018-09-01T21:00:37Z,"I tend to agree with @ajtowns that we can do without `std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain, ArgsManager& args)`.\n\nIf you want to keep it then maybe you can remove its declaration from `chainparams.h`. There is no need to expose it; it only uses internal linkage at the moment.",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r214522950,214522950,src/chainparams.h
l2a5b1,2018-09-01T21:50:44Z,"Yes, that makes sense. \n\nBy doing just that and dropping the `ArgsManager& args` argument from `std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain, ArgsManager& args)` we can remove `std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)` as you also have pointed out here: https://github.com/bitcoin/bitcoin/pull/13311#discussion_r203901242.",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r214523789,214523789,src/chainparams.cpp
promag,2018-09-16T21:19:08Z,Any reason to not use `gArgs` global in `CRegTestParams` constructor?,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r217928196,217928196,src/chainparams.cpp
ajtowns,2018-09-18T12:54:05Z,"The class only uses the global for initialisation; I think it makes sense to supply it as a parameter for initialisation rather than making the entire class dependent on the global. YMMV, FWIW, etc.",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218418992,218418992,src/chainparams.cpp
practicalswift,2018-09-18T15:05:17Z,"```\n2018-09-18 16:46:43 clang-tidy(pr=13311): src/test/test_bitcoin.cpp:64:61: warning: redundant cast to the same type [google-readability-casting]\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218471221,218471221,src/test/test_bitcoin.cpp
practicalswift,2018-09-18T15:06:54Z,"```\n2018-09-18 16:46:43 clang-tidy(pr=13311): src/chainparams.cpp:377:17: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [misc-string-compare]\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218471875,218471875,src/chainparams.cpp
practicalswift,2018-09-18T15:07:05Z,"```\n2018-09-18 16:46:43 clang-tidy(pr=13311): src/chainparams.cpp:271:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218471939,218471939,src/chainparams.cpp
jtimon,2018-09-19T16:02:41Z,"If I remove that casting, I get:\n```\ntest/qt_test_test_bitcoin_qt-test_bitcoin.o: In function `tinyformat::detail::FormatArg::FormatArg<long>(long const&)':\n/home/jt/code/bitcoin/src/./tinyformat.h:508: undefined reference to `Consensus::BIP9Deployment::NO_TIMEOUT'\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218865284,218865284,src/test/test_bitcoin.cpp
practicalswift,2018-09-19T16:11:38Z,Cool! A false positive then. Thanks for investigating.,https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218868220,218868220,src/test/test_bitcoin.cpp
MarcoFalke,2018-09-19T18:46:41Z,"I don't like that this introduces more exceptions in code that can normally hit them by a mere typo. I'd prefer if we used exceptions only in exceptional circumstances, since it is not easy to follow the control flow with exceptions.\n\nNote that the our other command line parsing is done with functions that return bool instead of void and append the error to a passed in string reference.\n\nI",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r218921579,218921579,src/chainparams.cpp
jtimon,2018-09-20T08:47:46Z,"I think there's absolutely no problem in initialization exceptions that will prevent the binary from starting, this one should be cached (depending on binary) on bitcoin-cli.cpp, bitcoin-tx.cpp or bitcoind.cpp, when SelectParams is called, just like https://github.com/bitcoin/bitcoin/blob/master/src/chainparamsbase.cpp#L42\n",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r219081422,219081422,src/chainparams.cpp
practicalswift,2018-09-23T08:20:47Z,"```\n2018-09-22 22:20:08 cpplint(pr=13311): src/chainparams.cpp:376:  Missing spaces around <  [whitespace/operators] [3]\n```",https://github.com/bitcoin/bitcoin/pull/13311#discussion_r219691718,219691718,src/chainparams.cpp
