[
  {
    "sha": "39e19713cd6594f93db835e8ef7eef5824a9ba02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWUxOTcxM2NkNjU5NGY5M2RiODM1ZThlZjdlZWY1ODI0YTliYTAy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-05-01T09:10:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-05-04T08:31:03Z"
      },
      "message": "[net processing] Add internal _RelayTransactions()\n\nCallers of the external RelayTransactions() no longer need to lock cs_main.",
      "tree": {
        "sha": "80105186c0fe14353e31a25935cb6f2841ace678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80105186c0fe14353e31a25935cb6f2841ace678"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39e19713cd6594f93db835e8ef7eef5824a9ba02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39e19713cd6594f93db835e8ef7eef5824a9ba02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39e19713cd6594f93db835e8ef7eef5824a9ba02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39e19713cd6594f93db835e8ef7eef5824a9ba02/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8593616dc2ab5b8f81edd8b2408d400e3b696cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8593616dc2ab5b8f81edd8b2408d400e3b696cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8593616dc2ab5b8f81edd8b2408d400e3b696cd"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "27ad9eefb5a78881ec6b17e44db914d1d5050478",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=39e19713cd6594f93db835e8ef7eef5824a9ba02",
        "patch": "@@ -25,6 +25,7 @@\n #include <reverse_iterator.h>\n #include <scheduler.h>\n #include <streams.h>\n+#include <sync.h>\n #include <tinyformat.h>\n #include <txmempool.h>\n #include <txorphanage.h>\n@@ -256,6 +257,9 @@ class PeerManagerImpl final : public PeerManager\n                         const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) override;\n \n private:\n+    void _RelayTransaction(const uint256& txid, const uint256& wtxid)\n+        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -1015,7 +1019,7 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash());\n+            _RelayTransaction(txid, tx->GetWitnessHash());\n         } else {\n             m_mempool.RemoveUnbroadcastTx(txid, true);\n         }\n@@ -1511,6 +1515,11 @@ void PeerManagerImpl::SendPings()\n }\n \n void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+{\n+    WITH_LOCK(cs_main, _RelayTransaction(txid, wtxid););\n+}\n+\n+void PeerManagerImpl::_RelayTransaction(const uint256& txid, const uint256& wtxid)\n {\n     m_connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n@@ -2087,7 +2096,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n+            _RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n             m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n@@ -3055,7 +3064,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n+                    _RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n                 }\n             }\n             return;\n@@ -3070,7 +3079,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n+            _RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n \n             pfrom.nLastTXTime = GetTime();"
      },
      {
        "sha": "d5801aadd343b2ded464193dedda0ef92b299fc3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=39e19713cd6594f93db835e8ef7eef5824a9ba02",
        "patch": "@@ -7,16 +7,13 @@\n #define BITCOIN_NET_PROCESSING_H\n \n #include <net.h>\n-#include <sync.h>\n #include <validationinterface.h>\n \n class CAddrMan;\n class CChainParams;\n class CTxMemPool;\n class ChainstateManager;\n \n-extern RecursiveMutex cs_main;\n-\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n@@ -49,8 +46,7 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     virtual bool IgnoresIncomingTxs() = 0;\n \n     /** Relay transaction to all peers. */\n-    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid)\n-        EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) = 0;\n \n     /** Send ping message to all peers */\n     virtual void SendPings() = 0;"
      },
      {
        "sha": "a1e7a71e2ce49a613ae94f9f271293988a14a517",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39e19713cd6594f93db835e8ef7eef5824a9ba02/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=39e19713cd6594f93db835e8ef7eef5824a9ba02",
        "patch": "@@ -100,8 +100,6 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // the mempool tracks locally submitted transactions to make a\n         // best-effort of initial broadcast\n         node.mempool->AddUnbroadcastTx(hashTx);\n-\n-        LOCK(cs_main);\n         node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash());\n     }\n "
      }
    ]
  }
]