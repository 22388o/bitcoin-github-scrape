[
  {
    "sha": "d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjE3YmVjZmM5YjVlZmI2MzU5ZjVmZTJkNDQ0NDcxMmU5ZGNmZDhi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-14T14:33:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-01-20T03:51:42Z"
      },
      "message": "test: add test for corrupt wallet bdb logs",
      "tree": {
        "sha": "3e6ffbac46e87dfbf72acc964da639ef3faabed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e6ffbac46e87dfbf72acc964da639ef3faabed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80486e7e2d8c360839cffc5a0c597b5c745433a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80486e7e2d8c360839cffc5a0c597b5c745433a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80486e7e2d8c360839cffc5a0c597b5c745433a7"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f62c5724659ef886c1116332f269dfa843f3d175",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
        "patch": "@@ -157,6 +157,7 @@\n     'wallet_createwallet.py --descriptors',\n     'wallet_watchonly.py --legacy-wallet',\n     'wallet_watchonly.py --usecli --legacy-wallet',\n+    'wallet_db.py',\n     'wallet_reorgsrestore.py',\n     'interface_http.py',\n     'interface_rpc.py',"
      },
      {
        "sha": "6cb78322c56ea573e8da150669a1a8e03d02484a",
        "filename": "test/functional/wallet_db.py",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b/test/functional/wallet_db.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b/test/functional/wallet_db.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_db.py?ref=d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
        "patch": "@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet database layer & recovery features.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error\n+\n+from pathlib import Path\n+\n+class WalletDbTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Unload default wallet, write corrupt log file, verify fails to reload\n+        node.unloadwallet(\"\")\n+        Path(node.datadir, self.chain, \"database\", \"log.0000000001\").write_bytes(b'\\1'*1024)\n+        assert_raises_rpc_error(-4, \"This error could occur if this wallet was not shutdown cleanly and was last loaded using a build with a newer version of Berkeley DB.\", node.loadwallet, \"\")\n+\n+if __name__ == '__main__':\n+    WalletDbTest().main()"
      }
    ]
  },
  {
    "sha": "104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDQ1MTRiY2UxOGEwYmI1YWEzNzFjN2Q2NmQxOGFkZjExZDJjN2Zm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-01-21T22:51:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-01-21T22:51:01Z"
      },
      "message": "attempt fix memory leak",
      "tree": {
        "sha": "ba6e5ccd3b4781d22ed2d7d067e8929c0369219c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6e5ccd3b4781d22ed2d7d067e8929c0369219c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d217becfc9b5efb6359f5fe2d4444712e9dcfd8b"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 42,
      "deletions": 53
    },
    "files": [
      {
        "sha": "352c798a6b3bab6238a45ae54e6ef064db9e7cc8",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 45,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
        "patch": "@@ -91,9 +91,9 @@ void BerkeleyEnvironment::Close()\n     }\n \n     FILE* error_file = nullptr;\n-    dbenv->get_errfile(&error_file);\n+    m_db_env.get_errfile(&error_file);\n \n-    int ret = dbenv->close(0);\n+    int ret = m_db_env.close(0);\n     if (ret != 0)\n         LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n@@ -104,16 +104,8 @@ void BerkeleyEnvironment::Close()\n     UnlockDirectory(strPath, \".walletlock\");\n }\n \n-void BerkeleyEnvironment::Reset()\n-{\n-    dbenv.reset(new DbEnv(DB_CXX_NO_EXCEPTIONS));\n-    fDbEnvInit = false;\n-    fMockDb = false;\n-}\n-\n BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())\n {\n-    Reset();\n }\n \n BerkeleyEnvironment::~BerkeleyEnvironment()\n@@ -146,17 +138,17 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv->set_lg_dir(pathLogDir.string().c_str());\n-    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    dbenv->set_lg_bsize(0x10000);\n-    dbenv->set_lg_max(1048576);\n-    dbenv->set_lk_max_locks(40000);\n-    dbenv->set_lk_max_objects(40000);\n-    dbenv->set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n-    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv->open(strPath.c_str(),\n+    m_db_env.set_lg_dir(pathLogDir.string().c_str());\n+    m_db_env.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    m_db_env.set_lg_bsize(0x10000);\n+    m_db_env.set_lg_max(1048576);\n+    m_db_env.set_lk_max_locks(40000);\n+    m_db_env.set_lk_max_objects(40000);\n+    m_db_env.set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n+    m_db_env.set_flags(DB_AUTO_COMMIT, 1);\n+    m_db_env.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    m_db_env.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = m_db_env.open(strPath.c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -168,11 +160,10 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0) {\n         LogPrintf(\"BerkeleyEnvironment::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n-        int ret2 = dbenv->close(0);\n+        int ret2 = m_db_env.close(0);\n         if (ret2 != 0) {\n             LogPrintf(\"BerkeleyEnvironment::Open: Error %d closing failed database environment: %s\\n\", ret2, DbEnv::strerror(ret2));\n         }\n-        Reset();\n         err = strprintf(_(\"Error initializing wallet database environment %s!\"), Directory());\n         if (ret == DB_RUNRECOVERY) {\n             err += Untranslated(\" \") + _(\"This error could occur if this wallet was not shutdown cleanly and was last loaded using a build with a newer version of Berkeley DB. If so, please use the software that last loaded this wallet\");\n@@ -188,18 +179,16 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n //! Construct an in-memory mock Berkeley environment for testing\n BerkeleyEnvironment::BerkeleyEnvironment()\n {\n-    Reset();\n-\n     LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::MakeMock\\n\");\n \n-    dbenv->set_cachesize(1, 0, 1);\n-    dbenv->set_lg_bsize(10485760 * 4);\n-    dbenv->set_lg_max(10485760);\n-    dbenv->set_lk_max_locks(10000);\n-    dbenv->set_lk_max_objects(10000);\n-    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = dbenv->open(nullptr,\n+    m_db_env.set_cachesize(1, 0, 1);\n+    m_db_env.set_lg_bsize(10485760 * 4);\n+    m_db_env.set_lg_max(10485760);\n+    m_db_env.set_lk_max_locks(10000);\n+    m_db_env.set_lk_max_objects(10000);\n+    m_db_env.set_flags(DB_AUTO_COMMIT, 1);\n+    m_db_env.log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = m_db_env.open(nullptr,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -271,7 +260,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n     {\n         assert(m_refcount == 0);\n \n-        Db db(env->dbenv.get(), 0);\n+        Db db(&env->m_db_env, 0);\n         int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n         if (result != 0) {\n             errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n@@ -284,10 +273,10 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n \n void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n {\n-    dbenv->txn_checkpoint(0, 0, 0);\n+    m_db_env.txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv->lsn_reset(strFile.c_str(), 0);\n+    m_db_env.lsn_reset(strFile.c_str(), 0);\n }\n \n BerkeleyDatabase::~BerkeleyDatabase()\n@@ -331,7 +320,7 @@ void BerkeleyDatabase::Open()\n \n         if (m_db == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n+            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(&env->m_db_env, 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n@@ -375,7 +364,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->m_db_env.txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n \n@@ -441,7 +430,8 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     }\n     // Reset the environment\n     Flush(true); // This will flush and close the environment\n-    Reset();\n+    fDbEnvInit = false;\n+    fMockDb = false;\n     bilingual_str open_err;\n     Open(open_err);\n }\n@@ -462,7 +452,7 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     BerkeleyBatch db(*this, true);\n-                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(&env->m_db_env, 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -513,10 +503,10 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(env->dbenv.get(), 0);\n+                    Db dbA(&env->m_db_env, 0);\n                     if (dbA.remove(strFile.c_str(), nullptr, 0))\n                         fSuccess = false;\n-                    Db dbB(env->dbenv.get(), 0);\n+                    Db dbB(&env->m_db_env, 0);\n                     if (dbB.rename(strFileRes.c_str(), nullptr, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -549,10 +539,10 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s checkpoint\\n\", strFile);\n-                dbenv->txn_checkpoint(0, 0, 0);\n+                m_db_env.txn_checkpoint(0, 0, 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv->lsn_reset(strFile.c_str(), 0);\n+                    m_db_env.lsn_reset(strFile.c_str(), 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n                 nRefCount = -1;\n             } else {\n@@ -563,7 +553,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (no_dbs_accessed) {\n-                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n+                m_db_env.log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n                     fs::remove_all(fs::path(strPath) / \"database\");"
      },
      {
        "sha": "31e5ece2a0cdd2e950364de024fb88c0785cfbde",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
        "patch": "@@ -44,22 +44,21 @@ class BerkeleyDatabase;\n class BerkeleyEnvironment\n {\n private:\n-    bool fDbEnvInit;\n-    bool fMockDb;\n+    bool fDbEnvInit = false;\n+    bool fMockDb = false;\n     // Don't change into fs::path, as that can result in\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n public:\n-    std::unique_ptr<DbEnv> dbenv;\n+    DbEnv m_db_env{DB_CXX_NO_EXCEPTIONS};\n     std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n     explicit BerkeleyEnvironment(const fs::path& env_directory);\n     BerkeleyEnvironment();\n     ~BerkeleyEnvironment();\n-    void Reset();\n \n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n@@ -76,7 +75,7 @@ class BerkeleyEnvironment\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = nullptr;\n-        int ret = dbenv->txn_begin(nullptr, &ptxn, flags);\n+        int ret = m_db_env.txn_begin(nullptr, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return nullptr;\n         return ptxn;"
      },
      {
        "sha": "bc2a9998b3ddccccfb0362e8a8d42cebbf3a6cbe",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104514bce18a0bb5aa371c7d66d18adf11d2c7ff/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
        "patch": "@@ -50,7 +50,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+    int result = env->m_db_env.dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result != 0)\n     {\n@@ -68,7 +68,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n \n     std::stringstream strDump;\n \n-    Db db(env->dbenv.get(), 0);\n+    Db db(&env->m_db_env, 0);\n     result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n     if (result == DB_VERIFY_BAD) {\n         warnings.push_back(Untranslated(\"Salvage: Database salvage found errors, all data may not be recoverable.\"));\n@@ -119,7 +119,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n         return false;\n     }\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(&env->m_db_env, 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  },
  {
    "sha": "fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzJjMTViZjg4NTFjNjA3NzdmOWE4MWYzNjNhM2Q4MmY1YmYzZTA0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-01-22T01:46:39Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-01-22T01:46:39Z"
      },
      "message": "basically revert but remove reset mehtod",
      "tree": {
        "sha": "bfc1bfbb20cea283525d0bc7e6219a382db73156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfc1bfbb20cea283525d0bc7e6219a382db73156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104514bce18a0bb5aa371c7d66d18adf11d2c7ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/104514bce18a0bb5aa371c7d66d18adf11d2c7ff"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 39,
      "deletions": 38
    },
    "files": [
      {
        "sha": "2476edd1d93714dd854bb97827489e96c6d40525",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
        "patch": "@@ -91,9 +91,9 @@ void BerkeleyEnvironment::Close()\n     }\n \n     FILE* error_file = nullptr;\n-    m_db_env.get_errfile(&error_file);\n+    dbenv->get_errfile(&error_file);\n \n-    int ret = m_db_env.close(0);\n+    int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n@@ -138,17 +138,17 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n-    m_db_env.set_lg_dir(pathLogDir.string().c_str());\n-    m_db_env.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    m_db_env.set_lg_bsize(0x10000);\n-    m_db_env.set_lg_max(1048576);\n-    m_db_env.set_lk_max_locks(40000);\n-    m_db_env.set_lk_max_objects(40000);\n-    m_db_env.set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n-    m_db_env.set_flags(DB_AUTO_COMMIT, 1);\n-    m_db_env.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    m_db_env.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = m_db_env.open(strPath.c_str(),\n+    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    dbenv->set_lg_bsize(0x10000);\n+    dbenv->set_lg_max(1048576);\n+    dbenv->set_lk_max_locks(40000);\n+    dbenv->set_lk_max_objects(40000);\n+    dbenv->set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv->open(strPath.c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -160,7 +160,7 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0) {\n         LogPrintf(\"BerkeleyEnvironment::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n-        int ret2 = m_db_env.close(0);\n+        int ret2 = dbenv->close(0);\n         if (ret2 != 0) {\n             LogPrintf(\"BerkeleyEnvironment::Open: Error %d closing failed database environment: %s\\n\", ret2, DbEnv::strerror(ret2));\n         }\n@@ -181,14 +181,14 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n {\n     LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::MakeMock\\n\");\n \n-    m_db_env.set_cachesize(1, 0, 1);\n-    m_db_env.set_lg_bsize(10485760 * 4);\n-    m_db_env.set_lg_max(10485760);\n-    m_db_env.set_lk_max_locks(10000);\n-    m_db_env.set_lk_max_objects(10000);\n-    m_db_env.set_flags(DB_AUTO_COMMIT, 1);\n-    m_db_env.log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = m_db_env.open(nullptr,\n+    dbenv->set_cachesize(1, 0, 1);\n+    dbenv->set_lg_bsize(10485760 * 4);\n+    dbenv->set_lg_max(10485760);\n+    dbenv->set_lk_max_locks(10000);\n+    dbenv->set_lk_max_objects(10000);\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv->open(nullptr,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -260,7 +260,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n     {\n         assert(m_refcount == 0);\n \n-        Db db(&env->m_db_env, 0);\n+        Db db(env->dbenv.get(), 0);\n         int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n         if (result != 0) {\n             errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n@@ -273,10 +273,10 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n \n void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n {\n-    m_db_env.txn_checkpoint(0, 0, 0);\n+    dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    m_db_env.lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n BerkeleyDatabase::~BerkeleyDatabase()\n@@ -320,7 +320,7 @@ void BerkeleyDatabase::Open()\n \n         if (m_db == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(&env->m_db_env, 0);\n+            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n@@ -364,7 +364,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->m_db_env.txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n \n@@ -430,6 +430,7 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     }\n     // Reset the environment\n     Flush(true); // This will flush and close the environment\n+    dbenv = std::make_unique<DbEnv>(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n     bilingual_str open_err;\n@@ -452,7 +453,7 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     BerkeleyBatch db(*this, true);\n-                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(&env->m_db_env, 0);\n+                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -503,10 +504,10 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(&env->m_db_env, 0);\n+                    Db dbA(env->dbenv.get(), 0);\n                     if (dbA.remove(strFile.c_str(), nullptr, 0))\n                         fSuccess = false;\n-                    Db dbB(&env->m_db_env, 0);\n+                    Db dbB(env->dbenv.get(), 0);\n                     if (dbB.rename(strFileRes.c_str(), nullptr, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -539,10 +540,10 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s checkpoint\\n\", strFile);\n-                m_db_env.txn_checkpoint(0, 0, 0);\n+                dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    m_db_env.lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n                 nRefCount = -1;\n             } else {\n@@ -553,7 +554,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (no_dbs_accessed) {\n-                m_db_env.log_archive(&listp, DB_ARCH_REMOVE);\n+                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n                     fs::remove_all(fs::path(strPath) / \"database\");"
      },
      {
        "sha": "bb451ebf6951eaac25ab667a4e0d4c8c4b61b0db",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
        "patch": "@@ -51,7 +51,7 @@ class BerkeleyEnvironment\n     std::string strPath;\n \n public:\n-    DbEnv m_db_env{DB_CXX_NO_EXCEPTIONS};\n+    std::unique_ptr<DbEnv> dbenv{std::make_unique<DbEnv>(DB_CXX_NO_EXCEPTIONS)};\n     std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n@@ -75,7 +75,7 @@ class BerkeleyEnvironment\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = nullptr;\n-        int ret = m_db_env.txn_begin(nullptr, &ptxn, flags);\n+        int ret = dbenv->txn_begin(nullptr, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return nullptr;\n         return ptxn;"
      },
      {
        "sha": "09a9ec68cd0aec6d97d3b6458f7a1617d77bafb0",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2c15bf8851c60777f9a81f363a3d82f5bf3e04/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=fc2c15bf8851c60777f9a81f363a3d82f5bf3e04",
        "patch": "@@ -50,7 +50,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = env->m_db_env.dbrename(nullptr, filename.c_str(), nullptr,\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result != 0)\n     {\n@@ -68,7 +68,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n \n     std::stringstream strDump;\n \n-    Db db(&env->m_db_env, 0);\n+    Db db(env->dbenv.get(), 0);\n     result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n     if (result == DB_VERIFY_BAD) {\n         warnings.push_back(Untranslated(\"Salvage: Database salvage found errors, all data may not be recoverable.\"));\n@@ -119,7 +119,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n         return false;\n     }\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(&env->m_db_env, 0);\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  }
]