[
  {
    "sha": "06b238bb0cbca4156de07740ce6e144999886d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmIyMzhiYjBjYmNhNDE1NmRlMDc3NDBjZTZlMTQ0OTk5ODg2ZDIy",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-05-28T05:48:02Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-05-28T08:12:56Z"
      },
      "message": "Implement pinentry wrapper to unlock bitcoin wallet",
      "tree": {
        "sha": "6429278ff9edce617592ba9db6fa43a7d111da98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6429278ff9edce617592ba9db6fa43a7d111da98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06b238bb0cbca4156de07740ce6e144999886d22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEYlj7NGJl3hK98UMLenZjGAELgsMFAlsLuggACgkQenZjGAEL\ngsNxmgf/ZPlOSLdy5Lg862PxlEBj/c7Uuz2cUF1JldoBoSa8xzwNKlMeKAMZ+i5A\nrvaR+NtpbMORGFPXoSgG0+oJ7Lr716hVBa9kb2NPN7a6+wShN3KIgzlEtNJ/Di8g\nO0vqEnBkcHgkSDvBbjWSNWxl1LgB0F09UQX1o+EN/en0LUY1wUU4+GVJdcftcQfR\nHt7nPHZQYDcBUjVSzsOj5BqFOotb4fOlk0X7CdhveVGGkc1If99sZtmkdCzpM0Hp\n6tCYI2DrNmPHGPu3bK8S1TLIDmEvCu9Pc5uwJ3YspGm1ZSrbFLjnFYrDI8e4OpxV\nev9BdYuaDvqMHl7puIYQLyNWAgrKIw==\n=3ki9\n-----END PGP SIGNATURE-----",
        "payload": "tree 6429278ff9edce617592ba9db6fa43a7d111da98\nparent 610f4dd719ad690cde480b12665d2ba74284a826\nauthor Evan Klitzke <evan@eklitzke.org> 1527486482 -0700\ncommitter Evan Klitzke <evan@eklitzke.org> 1527495176 -0700\n\nImplement pinentry wrapper to unlock bitcoin wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b238bb0cbca4156de07740ce6e144999886d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06b238bb0cbca4156de07740ce6e144999886d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b238bb0cbca4156de07740ce6e144999886d22/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610f4dd719ad690cde480b12665d2ba74284a826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610f4dd719ad690cde480b12665d2ba74284a826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610f4dd719ad690cde480b12665d2ba74284a826"
      }
    ],
    "stats": {
      "total": 382,
      "additions": 382,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5919b320a9b717d6fc74a85516bc1b90bec1c7f5",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b238bb0cbca4156de07740ce6e144999886d22/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b238bb0cbca4156de07740ce6e144999886d22/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=06b238bb0cbca4156de07740ce6e144999886d22",
        "patch": "@@ -5,6 +5,7 @@ src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n+src/bitcoin-wallet-unlock\n src/test/test_bitcoin\n src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt"
      },
      {
        "sha": "7b8e2702a418e809f495ad4778645d42e2780d12",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b238bb0cbca4156de07740ce6e144999886d22/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b238bb0cbca4156de07740ce6e144999886d22/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=06b238bb0cbca4156de07740ce6e144999886d22",
        "patch": "@@ -170,6 +170,12 @@ AC_ARG_ENABLE([lcov],\n   [use_lcov=$enableval],\n   [use_lcov=no])\n \n+AC_ARG_ENABLE([pinentry],\n+  [AS_HELP_STRING([--disable-pinentry],\n+  [disable bitcoin-wallet-unlock pinentry wrapper (enabled by default)])],\n+  [enable_pinentry=$enableval],\n+  [enable_pinentry=yes])\n+\n AC_ARG_ENABLE([lcov-branch-coverage],\n   [AS_HELP_STRING([--enable-lcov-branch-coverage],\n   [enable lcov testing branch coverage (default is no)])],\n@@ -1236,6 +1242,8 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n+AM_CONDITIONAL([ENABLE_PINENTRY], [test x$enable_pinentry = xyes && test x$TARGET_OS != xwindows])\n+\n if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi"
      },
      {
        "sha": "ca99790bf04d2aea1892f4bb819cb6404b67bb6b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b238bb0cbca4156de07740ce6e144999886d22/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b238bb0cbca4156de07740ce6e144999886d22/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=06b238bb0cbca4156de07740ce6e144999886d22",
        "patch": "@@ -71,6 +71,9 @@ endif\n \n if BUILD_BITCOIN_UTILS\n   bin_PROGRAMS += bitcoin-cli bitcoin-tx\n+if ENABLE_PINENTRY\n+  bin_PROGRAMS += bitcoin-wallet-unlock\n+endif\n endif\n \n .PHONY: FORCE check-symbols check-security\n@@ -458,6 +461,15 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-wallet-unlock binary #\n+if ENABLE_PINENTRY\n+bitcoin_wallet_unlock_SOURCES = bitcoin-wallet-unlock.cpp\n+bitcoin_wallet_unlock_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_wallet_unlock_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_wallet_unlock_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+endif\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h"
      },
      {
        "sha": "1e74fecac1df33afb63382edabf0b3c1f3966ffd",
        "filename": "src/bitcoin-wallet-unlock.cpp",
        "status": "added",
        "additions": 361,
        "deletions": 0,
        "changes": 361,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b238bb0cbca4156de07740ce6e144999886d22/src/bitcoin-wallet-unlock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b238bb0cbca4156de07740ce6e144999886d22/src/bitcoin-wallet-unlock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-unlock.cpp?ref=06b238bb0cbca4156de07740ce6e144999886d22",
        "patch": "@@ -0,0 +1,361 @@\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <errno.h>\n+#include <getopt.h>\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+\n+#include <cstdio>\n+#include <cstring>\n+#include <iostream>\n+#include <sstream>\n+\n+void xclose(int fd)\n+{\n+    if (close(fd) == -1) {\n+        std::ostringstream os;\n+        os << \"close(): \" << strerror(errno);\n+        throw std::runtime_error(os.str());\n+    }\n+}\n+\n+void xdup2(int oldfd, int newfd)\n+{\n+    if (dup2(oldfd, newfd) == -1) {\n+        std::ostringstream os;\n+        os << \"dup2(): \" << strerror(errno);\n+        throw std::runtime_error(os.str());\n+    }\n+}\n+\n+void xpipe(int pipefd[2])\n+{\n+    if (pipe(pipefd) == -1) {\n+        std::ostringstream os;\n+        os << \"pipe(): \" << strerror(errno);\n+        throw std::runtime_error(os.str());\n+    }\n+}\n+\n+pid_t xfork()\n+{\n+    pid_t pid = fork();\n+    if (pid == -1) {\n+        std::ostringstream os;\n+        os << \"fork(): \" << strerror(errno);\n+        throw std::runtime_error(os.str());\n+    }\n+    return pid;\n+}\n+\n+// Pinentry is a simple wrapper for pinentry, which communicates with its parent\n+// process using a simplified subset of the assuan protcol over stdin/stdout.\n+// The relevant aspects of the pinentry protocol are documented at\n+// http://info2html.sourceforge.net/cgi-bin/info2html-demo/info2html?%28pinentry%29Protocol\n+class Pinentry\n+{\n+public:\n+    Pinentry() = delete;\n+    Pinentry(const Pinentry& other) = delete;\n+    Pinentry(int read, int write)\n+        : read_(fdopen(read, \"r\")), write_(fdopen(write, \"w\")), line_(nullptr), line_sz_(0) {}\n+    ~Pinentry()\n+    {\n+        fclose(read_);\n+        fclose(write_);\n+        free(line_);\n+    }\n+\n+    void CheckOK()\n+    {\n+        ReadLine();\n+        if (strncmp(line_, \"OK\", 2) != 0) {\n+            throw std::runtime_error(\"pinentry protocol failure\");\n+        }\n+    }\n+\n+    std::string ReadData()\n+    {\n+        size_t sz = ReadLine();\n+        if (strncmp(line_, \"D \", 2) != 0) {\n+            throw std::runtime_error(\"pinentry protocol failure\");\n+        }\n+        return {&line_[2], sz - 3};\n+    }\n+\n+    void Command(const std::string& cmd)\n+    {\n+        fprintf(write_, \"%s\\n\", cmd.c_str());\n+        fflush(write_);\n+    }\n+\n+private:\n+    FILE* read_;\n+    FILE* write_;\n+    char* line_;\n+    size_t line_sz_;\n+\n+    ssize_t ReadLine()\n+    {\n+        ssize_t nread = getline(&line_, &line_sz_, read_);\n+        if (nread < 0) {\n+            throw std::runtime_error(\"failed to read data from pinentry\");\n+        }\n+        return nread;\n+    }\n+};\n+\n+// GetPinentryPassphrase invokes pinentry to get the wallet passphrase.\n+//\n+// If there were extra parameters not parsed by getopt_long() they will be\n+// forwarded to pinentry. Consider the following invocation:\n+//\n+//   bitcoin-wallet-unlock 300 -- -D :0\n+//\n+// This would cause pinentry to be invoked as:\n+//\n+//   pinentry -D :0\n+//\n+// Ordinarily this is not needed, but this can be useful in contexts where\n+// pinentry has to be explicitly told where to prompt for inputs (e.g. to force\n+// pinentry to use a TTY, or the opposite). In most cases they will need to be\n+// separated using -- as in the example above to prevent getopt_long() to\n+// interpret these arguments as program flags.\n+//\n+// These extra arguments are forwarded directly to execvp(), so there are no\n+// shell expansion or escaping issues to be aware of.\n+static std::string GetPinentryPassphrase(\n+    const std::string& pinentry_program,\n+    bool force_tty,\n+    int argc,\n+    char** argv)\n+{\n+    int read_pipe[2];\n+    xpipe(read_pipe);\n+    int parent_read = read_pipe[0];\n+    int child_write = read_pipe[1];\n+\n+    int write_pipe[2];\n+    xpipe(write_pipe);\n+    int child_read = write_pipe[0];\n+    int parent_write = write_pipe[1];\n+\n+    pid_t pid = xfork();\n+    if (pid > 0) {\n+        // parent process\n+        xclose(child_read);\n+        xclose(child_write);\n+\n+        Pinentry pinentry(parent_read, parent_write);\n+        pinentry.CheckOK();\n+\n+        if (force_tty) {\n+            std::ostringstream os;\n+            os << \"OPTION ttyname=\" << ttyname(STDIN_FILENO);\n+            pinentry.Command(os.str());\n+            pinentry.CheckOK();\n+\n+            char* envvar;\n+            if ((envvar = getenv(\"TERM\"))) {\n+                os.str(\"\");\n+                os << \"OPTION ttytype=\" << envvar;\n+                pinentry.Command(os.str());\n+                pinentry.CheckOK();\n+            }\n+\n+            if ((envvar = getenv(\"LC_ALL\"))) {\n+                os.str(\"\");\n+                os << \"OPTION lc-ctype=\" << envvar;\n+                pinentry.Command(os.str());\n+                pinentry.CheckOK();\n+            } else if ((envvar = getenv(\"LANG\"))) {\n+                os.str(\"\");\n+                os << \"OPTION lc-ctype=\" << envvar;\n+                pinentry.Command(os.str());\n+                pinentry.CheckOK();\n+            }\n+        }\n+\n+        pinentry.Command(\"SETDESC Enter your Bitcoin wallet passphrase.\");\n+        pinentry.CheckOK();\n+\n+        pinentry.Command(\"SETPROMPT Passphrase:\");\n+        pinentry.CheckOK();\n+\n+        pinentry.Command(\"SETTITLE Unlock Bitcoin wallet\");\n+        pinentry.CheckOK();\n+\n+        pinentry.Command(\"GETPIN\");\n+        std::string passphrase = pinentry.ReadData();\n+        pinentry.CheckOK();\n+        return passphrase;\n+    } else {\n+        // child process\n+        xclose(parent_read);\n+        xclose(parent_write);\n+        xdup2(child_read, STDIN_FILENO);\n+        xdup2(child_write, STDOUT_FILENO);\n+        xclose(child_read);\n+        xclose(child_write);\n+\n+        // build an arg array for execvp\n+        size_t argcount = argc + 2;\n+        char** pinentry_args = new char*[argcount];\n+        pinentry_args[0] = strdup(pinentry_program.c_str());\n+        pinentry_args[argcount - 1] = nullptr;\n+        for (int i = 0; i < argc; i++) {\n+            pinentry_args[i + 1] = argv[i];\n+        }\n+        execvp(pinentry_args[0], pinentry_args);\n+        perror(\"failed to exec pinentry\");\n+        exit(EXIT_FAILURE);\n+    }\n+    return 0;\n+}\n+\n+// InvokeBitcoinCLI calls bitcoin-cli with the wallet passphrase and timeout.\n+static void InvokeBitcoinCLI(\n+    const std::string& bitcoin_cli_program,\n+    const std::string& passphrase,\n+    int timeout)\n+{\n+    int read_pipe[2];\n+    xpipe(read_pipe);\n+    int parent_read = read_pipe[0];\n+    int child_write = read_pipe[1];\n+\n+    int write_pipe[2];\n+    xpipe(write_pipe);\n+    int child_read = write_pipe[0];\n+    int parent_write = write_pipe[1];\n+\n+    pid_t pid = xfork();\n+    if (pid > 0) {\n+        // parent process\n+        xclose(child_read);\n+        xclose(child_write);\n+\n+        FILE* child_stdin = fdopen(parent_write, \"w\");\n+        fprintf(child_stdin, \"%s\\n%d\\n\", passphrase.c_str(), timeout);\n+        fclose(child_stdin);\n+\n+        int wstatus;\n+        if (waitpid(pid, &wstatus, 0) == -1) {\n+            std::ostringstream os;\n+            os << \"waitpid(): \" << strerror(errno);\n+            throw std::runtime_error(os.str());\n+        }\n+        int exit_status = WEXITSTATUS(wstatus);\n+        if (exit_status != 0) {\n+            std::ostringstream os;\n+            os << \"bitcoin-cli exited with status \" << exit_status;\n+            throw std::runtime_error(os.str());\n+        }\n+        xclose(parent_read);\n+    } else {\n+        // child process\n+        xclose(parent_read);\n+        xclose(parent_write);\n+        xdup2(child_read, STDIN_FILENO);\n+        xdup2(child_write, STDOUT_FILENO);\n+        xclose(child_read);\n+        xclose(child_write);\n+        const char* cli_args[] = {\n+            bitcoin_cli_program.c_str(),\n+            \"-stdin\",\n+            \"walletpassphrase\",\n+            nullptr};\n+        execvp(cli_args[0], (char* const*)cli_args);\n+        perror(\"Failed to exec bitcoin-cli\");\n+        exit(EXIT_FAILURE);\n+    }\n+}\n+\n+static void PrintUsage()\n+{\n+    std::cerr << \"Usage: bitcoin-wallet-unlock [options] TIMEOUT\\n\";\n+    std::cerr << \"       bitcoin-wallet-unlock [options] TIMEOUT -- pinentry_arg1 pinentry_arg2...\\n\";\n+    std::cerr << \"\\n\";\n+    std::cerr << \"Options:\\n\";\n+    std::cerr << \"  -h, --help                         Show help\\n\";\n+    std::cerr << \"  -c, --bitcoin-cli PROGRAM          Set the bitcoin-cli program (default: bitcoin-cli)\\n\";\n+    std::cerr << \"  -p, --pinentry-program PROGRAM     Set the pinentry program (default: pinentry)\\n\";\n+    std::cerr << \"  -t, --tty                          Force pinentry into TTY mode\\n\";\n+}\n+\n+int main(int argc, char** argv)\n+{\n+    bool force_tty = false;\n+    std::string pinentry_program = \"\";\n+    std::string bitcoin_cli_program = \"bitcoin-cli\";\n+    static const char short_opts[] = \"c:hp:t\";\n+    static struct option long_opts[] = {\n+        {\"help\", no_argument, 0, 'h'},\n+        {\"bitcoin-cli\", required_argument, 0, 'c'},\n+        {\"pinentry-program\", required_argument, 0, 'p'},\n+        {\"tty\", no_argument, 0, 't'},\n+        {0, 0, 0, 0}};\n+\n+    for (;;) {\n+        int c = getopt_long(argc, argv, short_opts, long_opts, nullptr);\n+        if (c == -1) {\n+            break;\n+        }\n+        switch (c) {\n+        case 'h':\n+            PrintUsage();\n+            return 0;\n+            break;\n+        case 'c':\n+            bitcoin_cli_program = optarg;\n+            break;\n+        case 'p':\n+            pinentry_program = optarg;\n+            break;\n+        case 't':\n+            force_tty = true;\n+            break;\n+        case '?':\n+            // getopt_long should already have printed an error message\n+            break;\n+        default:\n+            std::cerr << \"Unrecognized command line flag: \" << optarg << \"\\n\";\n+            abort();\n+        }\n+    }\n+    if (pinentry_program.empty()) {\n+        pinentry_program = force_tty ? \"pinentry-curses\" : \"pinentry\";\n+    }\n+    if (optind >= argc) {\n+        std::cerr << \"Error: no TIMEOUT argument was supplied.\\n\\n\";\n+        PrintUsage();\n+        return 1;\n+    }\n+\n+    int unlocktime;\n+    try {\n+        unlocktime = std::stod(argv[optind]);\n+    } catch (const std::invalid_argument&) {\n+        std::cerr << \"Error: invalid timeout value \" << argv[optind] << \"\\n\";\n+        return 1;\n+    }\n+    if (unlocktime <= 0) {\n+        std::cerr << \"Error: invalid timeout value \" << argv[optind] << \"\\n\";\n+        return 1;\n+    }\n+\n+    try {\n+        const std::string passphrase = GetPinentryPassphrase(\n+            pinentry_program,\n+            force_tty,\n+            argc - optind - 1,\n+            &argv[optind + 1]);\n+        InvokeBitcoinCLI(bitcoin_cli_program, passphrase, unlocktime);\n+    } catch (const std::exception& exc) {\n+        std::cerr << \"Fatal exception: \" << exc.what() << \"\\n\";\n+    }\n+    return 0;\n+}"
      }
    ]
  }
]