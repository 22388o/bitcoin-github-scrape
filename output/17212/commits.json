[
  {
    "sha": "5b44a75493a1a098404d5e21dc384e74eae1892e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQ0YTc1NDkzYTFhMDk4NDA0ZDVlMjFkYzM4NGU3NGVhZTE4OTJl",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-10-21T22:07:31Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-10-21T22:07:31Z"
      },
      "message": "refactor: Remove unused CExt{Pub,}Key (de)serialization methods\n\nThe serialization/deserialization methods for the classes CExtKey and\nCExtPubKey were only used in the BIP32 unit tests, where the relevant parts are\nremoved as well.",
      "tree": {
        "sha": "fc4d1b067682421a53f105b3377879805713a7dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc4d1b067682421a53f105b3377879805713a7dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b44a75493a1a098404d5e21dc384e74eae1892e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b44a75493a1a098404d5e21dc384e74eae1892e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b44a75493a1a098404d5e21dc384e74eae1892e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b44a75493a1a098404d5e21dc384e74eae1892e/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a22b62481aae95747830bd3c0db3227860b12d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a22b62481aae95747830bd3c0db3227860b12d8e"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 0,
      "deletions": 60
    },
    "files": [
      {
        "sha": "6a86b0411df44e9c9c8854bf21343e85d38efa6d",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b44a75493a1a098404d5e21dc384e74eae1892e/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b44a75493a1a098404d5e21dc384e74eae1892e/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=5b44a75493a1a098404d5e21dc384e74eae1892e",
        "patch": "@@ -162,25 +162,6 @@ struct CExtKey {\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n     void SetSeed(const unsigned char* seed, unsigned int nSeedLen);\n-    template <typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        unsigned int len = BIP32_EXTKEY_SIZE;\n-        ::WriteCompactSize(s, len);\n-        unsigned char code[BIP32_EXTKEY_SIZE];\n-        Encode(code);\n-        s.write((const char *)&code[0], len);\n-    }\n-    template <typename Stream>\n-    void Unserialize(Stream& s)\n-    {\n-        unsigned int len = ::ReadCompactSize(s);\n-        unsigned char code[BIP32_EXTKEY_SIZE];\n-        if (len != BIP32_EXTKEY_SIZE)\n-            throw std::runtime_error(\"Invalid extended key size\\n\");\n-        s.read((char *)&code[0], len);\n-        Decode(code);\n-    }\n };\n \n /** Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. */"
      },
      {
        "sha": "fd815a871b5077839d59fa81619cd0088df9a278",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b44a75493a1a098404d5e21dc384e74eae1892e/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b44a75493a1a098404d5e21dc384e74eae1892e/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=5b44a75493a1a098404d5e21dc384e74eae1892e",
        "patch": "@@ -222,31 +222,6 @@ struct CExtPubKey {\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n-\n-    void Serialize(CSizeComputer& s) const\n-    {\n-        // Optimized implementation for ::GetSerializeSize that avoids copying.\n-        s.seek(BIP32_EXTKEY_SIZE + 1); // add one byte for the size (compact int)\n-    }\n-    template <typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        unsigned int len = BIP32_EXTKEY_SIZE;\n-        ::WriteCompactSize(s, len);\n-        unsigned char code[BIP32_EXTKEY_SIZE];\n-        Encode(code);\n-        s.write((const char *)&code[0], len);\n-    }\n-    template <typename Stream>\n-    void Unserialize(Stream& s)\n-    {\n-        unsigned int len = ::ReadCompactSize(s);\n-        unsigned char code[BIP32_EXTKEY_SIZE];\n-        if (len != BIP32_EXTKEY_SIZE)\n-            throw std::runtime_error(\"Invalid extended key size\\n\");\n-        s.read((char *)&code[0], len);\n-        Decode(code);\n-    }\n };\n \n /** Users of this module must hold an ECCVerifyHandle. The constructor and"
      },
      {
        "sha": "e46cf624cf2aff222a668ba083530a302b6b0ecb",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b44a75493a1a098404d5e21dc384e74eae1892e/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b44a75493a1a098404d5e21dc384e74eae1892e/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=5b44a75493a1a098404d5e21dc384e74eae1892e",
        "patch": "@@ -118,22 +118,6 @@ static void RunTest(const TestVector &test) {\n         }\n         key = keyNew;\n         pubkey = pubkeyNew;\n-\n-        CDataStream ssPub(SER_DISK, CLIENT_VERSION);\n-        ssPub << pubkeyNew;\n-        BOOST_CHECK(ssPub.size() == 75);\n-\n-        CDataStream ssPriv(SER_DISK, CLIENT_VERSION);\n-        ssPriv << keyNew;\n-        BOOST_CHECK(ssPriv.size() == 75);\n-\n-        CExtPubKey pubCheck;\n-        CExtKey privCheck;\n-        ssPub >> pubCheck;\n-        ssPriv >> privCheck;\n-\n-        BOOST_CHECK(pubCheck == pubkeyNew);\n-        BOOST_CHECK(privCheck == keyNew);\n     }\n }\n "
      }
    ]
  }
]