[
  {
    "sha": "4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTZiYjQ1MmZmM2Y5MjdjNDBmN2Q3MzM4ZWUxZGUxNDdmNzNlZDRh",
    "commit": {
      "author": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2020-12-30T21:57:12Z"
      },
      "committer": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2021-03-01T20:51:06Z"
      },
      "message": "test: Run rpc_generateblock.py even with wallet disabled",
      "tree": {
        "sha": "72be3e34013cf2cc5e1af3ef2867a6e56a35354f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72be3e34013cf2cc5e1af3ef2867a6e56a35354f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a/comments",
    "author": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e52ce9f2b312b3cf3b0837918e07d7603e241d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e52ce9f2b312b3cf3b0837918e07d7603e241d63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e52ce9f2b312b3cf3b0837918e07d7603e241d63"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "44acae1c4ad7e0ee8c9cd7f3c5313737a4377c88",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
        "patch": "@@ -10,30 +10,33 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet import MiniWallet\n \n \n class GenerateBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n \n         self.log.info('Generate an empty block to address')\n-        address = node.getnewaddress()\n-        hash = node.generateblock(output=address, transactions=[])['hash']\n+        hash = node.generateblock(output=miniwallet.address, transactions=[])['hash']\n         block = node.getblock(blockhash=hash, verbose=2)\n+        tx = block['tx'][0]\n+        utxo = {'txid': tx['txid'], 'vout': 0, 'value': tx['vout'][0]['value']}\n+        miniwallet._utxos.append(utxo)\n         assert_equal(len(block['tx']), 1)\n-        assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], address)\n+        assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], miniwallet.address)\n \n         self.log.info('Generate an empty block to a descriptor')\n-        hash = node.generateblock('addr(' + address + ')', [])['hash']\n+        hash = node.generateblock('addr(' + miniwallet.address + ')', [])['hash']\n         block = node.getblock(blockhash=hash, verbosity=2)\n         assert_equal(len(block['tx']), 1)\n-        assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], address)\n+        assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], miniwallet.address)\n+        miniwallet.scan_blocks(num=2) # add previous two blocks to _utxos\n \n         self.log.info('Generate an empty block to a combo descriptor with compressed pubkey')\n         combo_key = '0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'\n@@ -51,45 +54,43 @@ def run_test(self):\n         assert_equal(len(block['tx']), 1)\n         assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], combo_address)\n \n-        # Generate 110 blocks to spend\n-        node.generatetoaddress(110, address)\n+        # Generate some blocks to spend\n+        node.generatetoaddress(110, miniwallet.address)\n+        miniwallet.scan_blocks(start=5, num=10) # start after the previous two blocks which weren't mined to miniwallet\n \n         # Generate some extra mempool transactions to verify they don't get mined\n         for _ in range(10):\n-            node.sendtoaddress(address, 0.001)\n+            miniwallet.send_self_transfer(from_node=node)\n \n         self.log.info('Generate block with txid')\n-        txid = node.sendtoaddress(address, 1)\n-        hash = node.generateblock(address, [txid])['hash']\n+        txid = miniwallet.send_self_transfer(from_node=node)['txid']\n+        hash = node.generateblock(miniwallet.address, [txid])['hash']\n         block = node.getblock(hash, 1)\n         assert_equal(len(block['tx']), 2)\n         assert_equal(block['tx'][1], txid)\n \n         self.log.info('Generate block with raw tx')\n-        utxos = node.listunspent(addresses=[address])\n-        raw = node.createrawtransaction([{'txid':utxos[0]['txid'], 'vout':utxos[0]['vout']}],[{address:1}])\n-        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n-        hash = node.generateblock(address, [signed_raw])['hash']\n+        rawtx = miniwallet.send_self_transfer(from_node=node, submit_tx=False)['hex']\n+        hash = node.generateblock(miniwallet.address, [rawtx])['hash']\n         block = node.getblock(hash, 1)\n         assert_equal(len(block['tx']), 2)\n         txid = block['tx'][1]\n-        assert_equal(node.gettransaction(txid)['hex'], signed_raw)\n+        assert_equal(node.getrawtransaction(txid=txid, verbose=False, blockhash=hash), rawtx)\n \n         self.log.info('Fail to generate block with out of order txs')\n-        raw1 = node.createrawtransaction([{'txid':txid, 'vout':0}],[{address:0.9999}])\n-        signed_raw1 = node.signrawtransactionwithwallet(raw1)['hex']\n-        txid1 = node.sendrawtransaction(signed_raw1)\n-        raw2 = node.createrawtransaction([{'txid':txid1, 'vout':0}],[{address:0.999}])\n-        signed_raw2 = node.signrawtransactionwithwallet(raw2)['hex']\n-        assert_raises_rpc_error(-25, 'TestBlockValidity failed: bad-txns-inputs-missingorspent', node.generateblock, address, [signed_raw2, txid1])\n+        txid1 = miniwallet.send_self_transfer(from_node=node)['txid']\n+        utxo1 = miniwallet.get_utxo(txid=txid1)\n+        rawtx2 = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=utxo1, submit_tx=False)['hex']\n+\n+        assert_raises_rpc_error(-25, 'TestBlockValidity failed: bad-txns-inputs-missingorspent', node.generateblock, miniwallet.address, [rawtx2, txid1])\n \n         self.log.info('Fail to generate block with txid not in mempool')\n         missing_txid = '0000000000000000000000000000000000000000000000000000000000000000'\n-        assert_raises_rpc_error(-5, 'Transaction ' + missing_txid + ' not in mempool.', node.generateblock, address, [missing_txid])\n+        assert_raises_rpc_error(-5, 'Transaction ' + missing_txid + ' not in mempool.', node.generateblock, miniwallet.address, [missing_txid])\n \n         self.log.info('Fail to generate block with invalid raw tx')\n         invalid_raw_tx = '0000'\n-        assert_raises_rpc_error(-22, 'Transaction decode failed for ' + invalid_raw_tx, node.generateblock, address, [invalid_raw_tx])\n+        assert_raises_rpc_error(-22, 'Transaction decode failed for ' + invalid_raw_tx, node.generateblock, miniwallet.address, [invalid_raw_tx])\n \n         self.log.info('Fail to generate block with invalid address/descriptor')\n         assert_raises_rpc_error(-5, 'Invalid address or descriptor', node.generateblock, '1234', [])"
      }
    ]
  },
  {
    "sha": "f40a01a9b5309503f176fbebade8f329794d88ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDBhMDFhOWI1MzA5NTAzZjE3NmZiZWJhZGU4ZjMyOTc5NGQ4OGVm",
    "commit": {
      "author": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2021-01-12T02:42:09Z"
      },
      "committer": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2021-03-01T20:55:14Z"
      },
      "message": "add submit transaction to network boolean in MiniWallet",
      "tree": {
        "sha": "d85e3b47cf14cd244f472fa4fdde4d1653b6269b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d85e3b47cf14cd244f472fa4fdde4d1653b6269b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f40a01a9b5309503f176fbebade8f329794d88ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40a01a9b5309503f176fbebade8f329794d88ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f40a01a9b5309503f176fbebade8f329794d88ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40a01a9b5309503f176fbebade8f329794d88ef/comments",
    "author": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a6bb452ff3f927c40f7d7338ee1de147f73ed4a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d94de00c5446608866414c7d725fef1de271afb8",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40a01a9b5309503f176fbebade8f329794d88ef/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40a01a9b5309503f176fbebade8f329794d88ef/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=f40a01a9b5309503f176fbebade8f329794d88ef",
        "patch": "@@ -25,9 +25,6 @@ def run_test(self):\n         self.log.info('Generate an empty block to address')\n         hash = node.generateblock(output=miniwallet.address, transactions=[])['hash']\n         block = node.getblock(blockhash=hash, verbose=2)\n-        tx = block['tx'][0]\n-        utxo = {'txid': tx['txid'], 'vout': 0, 'value': tx['vout'][0]['value']}\n-        miniwallet._utxos.append(utxo)\n         assert_equal(len(block['tx']), 1)\n         assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['addresses'][0], miniwallet.address)\n "
      },
      {
        "sha": "a26d207176246ca18af7c5537be679cf4ccbae34",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40a01a9b5309503f176fbebade8f329794d88ef/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40a01a9b5309503f176fbebade8f329794d88ef/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=f40a01a9b5309503f176fbebade8f329794d88ef",
        "patch": "@@ -64,8 +64,8 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n-    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n-        \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None,  submit_tx=True):\n+        \"\"\"Create and optionally send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n         vsize = Decimal(96)\n@@ -82,7 +82,8 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n \n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         self._utxos.append({'txid': tx_info['txid'], 'vout': 0, 'value': send_value})\n-        from_node.sendrawtransaction(tx_hex)\n+        if submit_tx:\n+            from_node.sendrawtransaction(tx_hex)\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fees']['base'], fee)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex}"
      }
    ]
  },
  {
    "sha": "c4fb4148259082ce4932838b42d96c2edd6c15df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGZiNDE0ODI1OTA4MmNlNDkzMjgzOGI0MmQ5NmMyZWRkNmMxNWRm",
    "commit": {
      "author": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2021-02-28T18:13:50Z"
      },
      "committer": {
        "name": "nginocchio",
        "email": "nginocchio@gmail.com",
        "date": "2021-03-01T20:55:27Z"
      },
      "message": "make address public",
      "tree": {
        "sha": "da6115e0271aa409c8be0d18baaa235a2ebc217e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da6115e0271aa409c8be0d18baaa235a2ebc217e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4fb4148259082ce4932838b42d96c2edd6c15df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4fb4148259082ce4932838b42d96c2edd6c15df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4fb4148259082ce4932838b42d96c2edd6c15df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4fb4148259082ce4932838b42d96c2edd6c15df/comments",
    "author": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nginocchio",
      "id": 14829793,
      "node_id": "MDQ6VXNlcjE0ODI5Nzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14829793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nginocchio",
      "html_url": "https://github.com/nginocchio",
      "followers_url": "https://api.github.com/users/nginocchio/followers",
      "following_url": "https://api.github.com/users/nginocchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/nginocchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nginocchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nginocchio/subscriptions",
      "organizations_url": "https://api.github.com/users/nginocchio/orgs",
      "repos_url": "https://api.github.com/users/nginocchio/repos",
      "events_url": "https://api.github.com/users/nginocchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nginocchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f40a01a9b5309503f176fbebade8f329794d88ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40a01a9b5309503f176fbebade8f329794d88ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f40a01a9b5309503f176fbebade8f329794d88ef"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4e734e06ff4e47d41c689fe55c19be2f72468ac6",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4fb4148259082ce4932838b42d96c2edd6c15df/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4fb4148259082ce4932838b42d96c2edd6c15df/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=c4fb4148259082ce4932838b42d96c2edd6c15df",
        "patch": "@@ -29,8 +29,8 @@ class MiniWallet:\n     def __init__(self, test_node):\n         self._test_node = test_node\n         self._utxos = []\n-        self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n-        self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n+        self.address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n+        self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self.address)['scriptPubKey'])\n \n     def scan_blocks(self, *, start=1, num):\n         \"\"\"Scan the blocks for self._address outputs and add them to self._utxos\"\"\"\n@@ -43,7 +43,7 @@ def scan_blocks(self, *, start=1, num):\n \n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n-        blocks = self._test_node.generatetoaddress(num_blocks, self._address)\n+        blocks = self._test_node.generatetoaddress(num_blocks, self.address)\n         for b in blocks:\n             cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})"
      }
    ]
  }
]