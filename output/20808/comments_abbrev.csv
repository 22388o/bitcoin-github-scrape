michaelfolkson,2021-01-03 20:39:28,"Not a huge deal @stackman27 but we ACK the commit hash of the HEAD commit. In this case it is 4e8803e22f0cd8a71f7f81f67ed0137a667b63ce\n\n> When giving an ACK, specify the commits reviewed by appending the commit hash of the HEAD commit.\n\nFor more details on the review process see this @jonatack doc: https://jonatack.github.io/articles/how-to-review-pull-requests-in-bitcoin-core",https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-753672969,753672969,
stackman27,2021-01-03 22:06:07,"> Not a huge deal @stackman27 but we ACK the commit hash of the HEAD commit. In this case it is [4e8803e](https://github.com/bitcoin/bitcoin/commit/4e8803e22f0cd8a71f7f81f67ed0137a667b63ce)\n> \n> > When giving an ACK, specify the commits reviewed by appending the commit hash of the HEAD commit.\n> \n> For more details on the review process see this @jonatack doc: https://jonatack.github.io/ar",https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-753682758,753682758,
DrahtBot,2021-01-12 08:13:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21178 (test: run mempool_reorg.py even with wallet disabled by DariusParvin)\n* #21014 (test: Run mempool_accept.py even ",https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-758485600,758485600,
DrahtBot,2021-03-29 14:22:14,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-809420087,809420087,
MarcoFalke,2021-07-20 07:32:11,Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-883165139,883165139,
jsarenik,2021-11-18 19:28:47,"> Are you still working on this?\n\nI know someone who is working on this and hopefully they will write here soon. (Just wanted to leave a trace in the PR by this message, sorry for spam.)",https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-973187509,973187509,
DariusParvin,2021-11-19 17:33:01,Thanks @jsarenik :)  I am working on this issue. I am mostly finished but will go through it a few more times (reviewing the comments here) before submitting a PR. Work in progress is [here](https://github.com/DariusParvin/bitcoin/tree/rpc-generateblock-to-miniwallet),https://github.com/bitcoin/bitcoin/pull/20808#issuecomment-974269192,974269192,
michaelfolkson,2021-01-04 17:59:32,nit: Any reason you bumped up the blocks generated from 110 to 200?,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551475077,551475077,test/functional/rpc_generateblock.py
nginocchio,2021-01-04 19:11:50,I bumped it from 110 blocks because I was getting premature spend when using 110 blocks. I think its because the utxos are sorted by value so their confirmations are somewhat arbitrary in the self._utxos. 200 seemed to be a quick and dirty fix.,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551511734,551511734,test/functional/rpc_generateblock.py
mjdietzx,2021-01-04 21:22:13,"It doesn't seem totally related to what's being tested here, but one thing I noticed while reviewing:\n\nDo you know why, in the original code, `rpc_generateblock.py` sometimes does  `sendrawtransaction` and other times does not, before `generateblock`?\n\nie here `signed_raw2` was never submitted to the `node` with `sendrawtransaction`, while `txid1` was. \n\n",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551576038,551576038,test/functional/rpc_generateblock.py
mjdietzx,2021-01-04 21:27:39,"Yeah, you're right that it's bc the utxos are sorted by value in `MiniWallet` and a lot of them will be immature coin bases. I think what you have is good. But what I've usually done, and seen done before, is generating the utxos you need to spend with `mini_wallet.generate()`, and then generating 100 block with node, `node.generate(100)` so that all the utxos in `MiniWallet` are mature and good t",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551578672,551578672,test/functional/rpc_generateblock.py
nginocchio,2021-01-04 22:25:40,"I am not entirely sure, but my assumption while reading through the code was that it was to save a line of code.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551605654,551605654,test/functional/rpc_generateblock.py
stackman27,2021-01-04 22:29:16,I pretty much approached with a similar style as described by @mjdietzx in `mempool_limit.py` as well to prevent premature spend error ,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551607299,551607299,test/functional/rpc_generateblock.py
nginocchio,2021-01-04 22:35:35,ya that certainly seems like a more coherent approach,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551609818,551609818,test/functional/rpc_generateblock.py
MarcoFalke,2021-01-05 09:56:48,"This will add the tx to the mempool, which is not wanted. the raw tx should only be passed to the miner",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551828175,551828175,test/functional/rpc_generateblock.py
MarcoFalke,2021-01-05 09:57:24,would be nice to use named arguments,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r551828527,551828527,test/functional/rpc_generateblock.py
michaelfolkson,2021-01-05 16:29:19,"By ""not wanted"" you mean unnecessary @MarcoFalke? I only ask for my own understanding as the test passes in its current form.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r552044318,552044318,test/functional/rpc_generateblock.py
glozow,2021-01-05 23:13:11,"`sendrawtransaction` submits the tx to mempool, while `createrawtransaction` + `signrawtransaction` merely creates the raw tx objects. Here, in the original test, tx1 is submitted and tx2 is not. It's calling `generateblock()` with the whole raw tx for tx2 and just the txid for tx1.\n\nSo, actually, your implementation doesn't really match what was there before. Be careful - [`generateblock`](ht",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r552254246,552254246,test/functional/rpc_generateblock.py
glozow,2021-01-05 23:14:34,"You can keep this as just 10. It'll fix your premature spend error; 10 outputs is enough for this test.\n```\nminiwallet.generate(10)\n```\n\n(oops, I put the suggestion on the wrong line - I mean only generate 10 on the miniwallet)",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r552254730,552254730,test/functional/rpc_generateblock.py
MarcoFalke,2021-01-06 06:23:26,"Transactions for the miner are picked from the mempool, usually. This test should check that the tx can be supplied in raw form, not taking it from the mempool. Also, it tests that a miner can mine a tx that is not in the mempool.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r552391964,552391964,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 18:49:40,"Can you do `hash = miniwallet.generate(1)[0][""hash""]` here? That way the coinbase will be appended to `miniwallet._utxos` in the way you're doing it and you won't have to duplicate logic",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554607313,554607313,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 18:50:26,"You should be able to remove this if you do `hash = miniwallet.generate(1)[0][""hash""]` instead",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554607411,554607411,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 18:57:36,"If you still want the `utxo` in your list, you can then just do `utxos.append(miniwallet.get_utxo())`",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554608202,554608202,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 19:03:58,"I know it's frowned upon, but thoughts on doing:\n```python\naddress = miniwallet._address\nscriptPubKey = miniwallet._scriptPubKey\n```\n\nOtherwise we're just duplicating that logic, and we can get rid of a bunch of imports. Maybe it's worth considering adding a getter for `address` and `scriptPubKey` to `MiniWallet` (although I don't see anything wrong just accessing the private vars)",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554608913,554608913,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 19:08:36,I'm not seeing how this is different than `miniwallet.send_self_transfer(...)`,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554609512,554609512,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 19:10:24,"If you did miniwallet.send_self_transfer(...) as suggested above, you could get rid of this. Again, if you want the utxo in the list of utxos you are maintaining, you could do: utxos.append(miniwallet.get_utxo())",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554609713,554609713,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 19:15:11,"I think @MarcoFalke is setting you up for a layup here https://github.com/bitcoin/bitcoin/pull/20876. Then @glozow suggests ""was just thinking that it'd be nice to have a just-create-don't-send option for the MiniWallet. What do you think of a bool option?""\n\nI think this is the PR where this is needed. So I'd consider rebasing on-top of #20876, and adding this option to `send_self_transfer` as",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554610229,554610229,test/functional/rpc_generateblock.py
mjdietzx,2021-01-10 19:18:19,"I'm not convinced that we need to maintain our own utxo set. After some re-working (ie adding ""a just-create-don't-send option for the MiniWallet."") I'm wondering if this can go away",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554610606,554610606,test/functional/rpc_generateblock.py
nginocchio,2021-01-10 19:30:31,Yes I didn't like my approach but I wasn't sure I should touch the miniwallet class itself to add a `create_raw_transaction` function. So I think your suggestion is a nice solution.,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554611909,554611909,test/functional/rpc_generateblock.py
stackman27,2021-01-10 19:41:37,"I did a similar thing in `mempool_limit` by adding a `prepare_tx` method in MiniWallet Class.\nlink: https://github.com/bitcoin/bitcoin/pull/20874/files#diff-7932a60a9127fd22d10d367526fd7b987f9647ce017595f8b1af5c32d5db0083R58\nTo be honest, it was just to avoid repetition, but I can see how it could be helpful for both of us\n\n",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554613150,554613150,test/functional/rpc_generateblock.py
nginocchio,2021-01-10 19:45:41,"Yes it probably can go away. My only reasoning for maintaining this list was because I wasn't exactly sure how I could get MiniWallet access to the utxos created from `generateblock`, and even if it did, Miniwallet (in its current state) doesn't have the option to create a transaction not submitted to mempool.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554613628,554613628,test/functional/rpc_generateblock.py
nginocchio,2021-01-10 19:54:39,I thought of doing something along the lines of that but shouldn't I be using `generateblock` explicitly in this test?,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554614623,554614623,test/functional/rpc_generateblock.py
stackman27,2021-01-10 19:56:20,nit: shouldn't the name of the method be `create_and_sign_miniwallet_rawtx`?,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554614840,554614840,test/functional/rpc_generateblock.py
nginocchio,2021-01-10 20:01:51,"You're right, it really isn't. It mostly just comes down to the blocks generated by `generateblock` not being appended to `self._utxos`. So what it comes down to is what the proper approach for appending to `self._utxos` is.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554615413,554615413,test/functional/rpc_generateblock.py
MarcoFalke,2021-01-11 07:59:06,Agree with @mjdietzx . Please rebase and add the bool option to #20876 ,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554862558,554862558,test/functional/rpc_generateblock.py
mjdietzx,2021-01-12 18:47:41,"Is this necessary? I don't see why we need this Coinbase in our utxos. I don't see us specifically spending it, and if you remove this it gets rid of the potential problem of appending to mini wallets private `_utxos`",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r555996983,555996983,test/functional/rpc_generateblock.py
mjdietzx,2021-01-12 18:53:41,"nit: I'm not sure if this really matters, but would it be better to use `miniwallet._address`? I know they are hard-coded to the same value rn\n\n@MarcoFalke what's you're opinion on this, would it be beneficial to add a getter to `MiniWallet`?\n```python\n@property\ndef address(self):\n  return self._address\n```",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556000512,556000512,test/functional/rpc_generateblock.py
nginocchio,2021-01-12 19:06:36,"10 blocks isn't enough for the test because the 10 generated by MiniWallet are sent to sit in the mempool not to be mined. So I can up the generated blocks to 11 and remove that code, or do this approach.",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556008019,556008019,test/functional/rpc_generateblock.py
mjdietzx,2021-01-12 19:20:24,"Is there any reason you need this specific utxo for this test? If you need 11, I'd say generate 11 blocks where you need them.\n\nbut the 10 generated by MiniWallet are definitely mined. ie if you synced another node, you'd see those blocks with the coinbases (utxos) you are spending. they aren't just in the mempool\n\nif I'm missing something please lmk, definitely possible",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556015910,556015910,test/functional/rpc_generateblock.py
nginocchio,2021-01-12 19:42:18,"I do not need that specific utxo for the test. I guess I should have elaborated more on my point. What I meant was that those 10 blocks are generated via `generate` and then are sent via `send_self_transfer`, however, those transactions are never confirmed. So while those new utxos are present within miniwallet generating a confirmed transaction based on them (because they are unconfirmed) isn't p",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556033753,556033753,test/functional/rpc_generateblock.py
mjdietzx,2021-01-12 19:47:50,"Ah yeah, so the transactions you send with `send_self_transfer` are in the mempool. However, you could still spend them even though they are only in the mempool. And you could also generate a block, and all the transactions in the mempool would then be mined/confirmed (although I don't think this is necessary).\n\nI'd recommend generating 11 blocks for miniwallet if you need to send 11 utxos. Ot",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556037737,556037737,test/functional/rpc_generateblock.py
stackman27,2021-01-12 20:46:26,"I'm just wondering whether `rpc_generateblock.py` requires a `flat_fee` or a calculated fee? Because, if i'm not mistaken you used `flat_fee` in previous commits ",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556080918,556080918,test/functional/test_framework/wallet.py
stackman27,2021-01-12 20:47:38,could this be something like `if not submit_tx: return tx` because that would help `mempool_limit.py` as well without much changes? ,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556082342,556082342,test/functional/test_framework/wallet.py
nginocchio,2021-01-12 21:12:58,The fee was irrelevant to `rpc_generateblock.py` so I used a flat fee to reduce the amount of code in the helper function `create_miniwallet_rawtx`. `create_miniwallet_rawtx` now no longer needed in place of `send_self_transfer`.,https://github.com/bitcoin/bitcoin/pull/20808#discussion_r556098137,556098137,test/functional/test_framework/wallet.py
mjdietzx,2021-01-14 16:39:21,"You can also rebuild the `tx` from the `hex` field that this returns as-is I think\n```python\nfrom test_framework.messages import CTransaction, ToHex\nhex = wallet.send_self_transfer(...)[""hex""]\ntx = FromHex(CTransaction(), hex)\n```",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r557533619,557533619,test/functional/test_framework/wallet.py
stackman27,2021-01-15 20:53:07,I see thanks :),https://github.com/bitcoin/bitcoin/pull/20808#discussion_r558586823,558586823,test/functional/test_framework/wallet.py
MarcoFalke,2021-02-16 16:58:18,I think it is fine to just make `_address` public (remove the underscore),https://github.com/bitcoin/bitcoin/pull/20808#discussion_r576982498,576982498,test/functional/rpc_generateblock.py
MarcoFalke,2021-02-16 16:58:31," Generating blocks takes a few seconds in valgrind, so I am thinking if this test may benefit from using `miniwallet.scan_blocks` (to be introduced in #21200)",https://github.com/bitcoin/bitcoin/pull/20808#discussion_r576982673,576982673,test/functional/rpc_generateblock.py
