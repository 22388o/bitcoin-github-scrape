promag,2018-05-29T16:11:05Z,"@laanwj see 4fa29f8, what would be the solution in that case? only escape `'`? IIUC there is no function to do that as it depends on the shell.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392835751,392835751,
jamesob,2018-05-29T16:27:07Z,Concept ACK - seems like a nice consideration,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392841050,392841050,
laanwj,2018-05-29T17:17:55Z,"> @laanwj see 4fa29f8, what would be the solution in that case? only escape '? IIUC there is no function to do that as it depends on the shell.\n\nThe best way would be to use an invocation (use one of the `exec*` functions) that passes arguments without involving the shell. That's quite a big change, though, and existing usages of the arguments might assume a shell is involved.\n\nLacking tha",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392862031,392862031,
promag,2018-05-29T17:29:56Z,@laanwj `exec*` yes that would be breaking change. Agree on the NACK reasons. I think I'll go with https://unix.stackexchange.com/a/30936. I'll change the test to cover more cases.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392866769,392866769,
laanwj,2018-05-29T17:52:28Z,"> @laanwj exec* yes that would be breaking change. Agree on the NACK reasons. I think I'll go with https://unix.stackexchange.com/a/30936. I'll change the test to cover more cases.\n\nAgree. Right - things to test would be `$VAR` and `${VAR}` in the name, `$(command)` as well as various quote characters.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392874007,392874007,
promag,2018-05-29T20:13:21Z,"> Agree. Right - things to test would be `$VAR` and `${VAR}` in the name, `$(command)` as well as various quote characters.\n\nI don't understand what you mean. You suggest the wallet name can have `$VAR`?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-392928027,392928027,
laanwj,2018-05-30T01:33:28Z,">I don't understand what you mean. You suggest the wallet name can have $VAR?\n\nYes, those sequences could be part of the wallet name. They are the typical ways to fool shell escaping and do arbitrary command execution, so I suggested them for testing whether shell escaping is working as expected.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-393001712,393001712,
jonasschnelli,2018-05-30T08:37:54Z,"Not sure if we want to further extend walletnotify.\nA more future-proof way is probably the recently created RPC approach https://github.com/bitcoin/bitcoin/pull/13262.\nIt would still be possible to ship a little python script that emulates the walletnotify ""API"".",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-393078700,393078700,
promag,2018-05-30T09:04:49Z,"IMO we should consider adding this to fully support multi wallets without taking into account #13262. For existing systems that are based on `-walletnotify` changing to `listsincetx` would be more problematic. Beside that, currently `listsincetx` requires a connection for each wallet. I do consider `listsincetx` better than `-walletnotify` though.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-393087067,393087067,
laanwj,2018-05-30T10:06:15Z,"I think it's fine to add this to walletnotify, too. Agree that another notification system would be better, but this is useful to users in the short term. It's is a small change to the code.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-393105608,393105608,
MarcoFalke,2018-05-30T13:58:35Z,"Needs rebase due to merge of #13341\n",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-393172260,393172260,
laanwj,2018-09-12T09:30:10Z,Needs rebase and comments addressed.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-420578567,420578567,
meshcollider,2018-11-12T14:43:33Z,LGTM https://github.com/bitcoin/bitcoin/pull/13339/commits/cef0327afd220950142ec9d4d051bb94f5210be1 but yeah needs rebase + comments addressed üëç ,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-437906399,437906399,
practicalswift,2018-11-13T12:36:26Z,"@promag This no longer compiles:\n\n```\nerror: no member named 'replace_all' in namespace 'boost'\n```\n\nPerhaps a good opportunity to get rid of `boost::replace_all`? :-)",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-438250968,438250968,
DrahtBot,2018-11-13T19:50:47Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #9381 (Remove CWalletTx merging logic from AddToWallet by ryanofsky)\n\nIf you consider this pull request important, pleas",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-438412099,438412099,
promag,2018-11-15T02:00:41Z,@ken2812221 do you mind checking the last commit?,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-438888202,438888202,
ken2812221,2018-11-15T08:24:50Z,"Sure, will test",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-438956832,438956832,
ken2812221,2018-11-17T00:02:48Z,ACK ac771808910dab16e7d0c413a1077464407c66e2. I think it's good to test all available ascii characters. like 2f16218b658aecf798a77cb5e5ecae5f000e1729,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-439565002,439565002,
promag,2018-11-21T13:00:50Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-440654325,440654325,
laanwj,2019-02-06T15:22:17Z,What is the status here? This is still tagged for 0.18.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461062176,461062176,
ryanofsky,2019-02-06T16:08:16Z,"> What is the status here? This is still tagged for 0.18.\n\nI don't think this this can merged currently due to concerns in https://github.com/bitcoin/bitcoin/pull/13339#discussion_r248486988.\n\nI think the current shell escaping in this PR looks good when WIN32 isn't defined. But the windows shell escaping is cumbersome and probably broken and uses unlicensed, undocumented, and uncredited(!",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461080591,461080591,
promag,2019-02-06T16:23:15Z,"If boost process was an option I would expose an env var with the plain wallet name, after all `%w` is a bit awkward.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461086488,461086488,
luke-jr,2019-02-06T17:30:09Z,"> I think encoding is the better way to go on windows, \n\nUgh, let's not have different interfaces for *nix vs Windows please...\n\nConsidering how Windows works (application just gets a long string and parses it how it likes), maybe we should just use *nix quoting and make the target application deal with it?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461112335,461112335,
ryanofsky,2019-02-06T18:32:22Z,"> maybe we should just use *nix quoting and make the target application deal with it?\n\nThis won't work for two reasons:\n\n1. cmd.exe is script interpreter that uses special characters. The target application will have no way of accessing the original string if cmd.exe has interpreted and executed it.\n2. In many scripting environments it is not straightforward to get access to the command ",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461134806,461134806,
luke-jr,2019-02-07T02:58:57Z,"Passing the environment on the command line would need to be escaped too.\n\nWhat's wrong with `putenv`?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461271653,461271653,
promag,2019-02-07T03:05:42Z,"It's not thread safe, we would have to serialize command executions.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461272679,461272679,
ryanofsky,2019-02-07T04:54:31Z,"> Passing the environment on the command line would need to be escaped too.\n\nIt would only need to be escaped for cmd.exe interpreter, not for the argv parsing that happens in msvcrt. Escaping only for cmd.exe is simpler because msvcrt escaping is crazy by comparison and can also confuse cmd.exe (see the msdn article or the [cmd.exe+msvcrt escaping code](https://svn.apache.org/viewvc/subversio",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461288094,461288094,
jb55,2019-05-24T00:49:35Z,Concept ACK. I ran into this issue recently with an emailer walletnotify script. I needed the wallet name for the subsequent gettransaction call inside the script.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-495433743,495433743,
jb55,2019-05-24T09:25:25Z,"Hmm after reading the comments, is walletnotify deprecated in favor of listsincetx + https://github.com/bitcoin/bitcoin/pull/13262/commits/2dadbc883ecf37c42ec29c904b19cc2e5fe39b30 ?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-495539604,495539604,
promag,2019-06-22T10:34:05Z,"I still think this makes sense regardless of other options.\n\nI'm kind of waiting for boost process support.\n\nI wonder if we can ignore windows for now?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-504653790,504653790,
jb55,2019-06-22T20:40:53Z,"FWIW I've been using this patch on my linux machine in the meantime, seems to be working.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-504696852,504696852,
laanwj,2019-09-30T12:09:51Z,"> I wonder if we can ignore windows for now?\n\nYes, please, this has been held up for long enough now. Let's do this for UNIX only for now. Windows support can be added later.\n",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536532633,536532633,
promag,2019-09-30T12:13:07Z,For 0.19?,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536533729,536533729,
laanwj,2019-09-30T14:39:32Z,"It's too late for that, and unfair with regard to the feature freeze. But the way this was going it was going to miss 0.20 too :woman_shrugging: ",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536592934,536592934,
promag,2019-09-30T14:44:30Z,"> It's too late for that, and unfair with regard to the feature freeze\n\nAs I thought.. I'll get back to this after branching off 0.19, thanks.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536595152,536595152,
jb55,2019-09-30T16:35:16Z,"If I'm understanding correctly, this should still work on windows except in the case where the walletname has certain characters?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536644050,536644050,
practicalswift,2019-09-30T16:47:32Z,The potential licensing issue which @luke-jr commented on needs to be resolved as well?,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-536648765,536648765,
promag,2019-10-01T14:23:26Z,Rebased and dropped shell escape support for windows.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537060582,537060582,
jb55,2019-10-01T17:25:03Z,perhaps we should log a warning/error if the walletname contains those characters on windows?,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537140998,537140998,
promag,2019-10-01T21:18:42Z,@jb55 honestly I was tempted to simply not suport %w in windows.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537234997,537234997,
jb55,2019-10-01T23:49:35Z,"> honestly I was tempted to simply not suport %w in windows.\n\nreally? as long as they don't have a weird wallet name it should work fine, no?",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537277101,537277101,
laanwj,2019-10-02T08:07:57Z,"> @jb55 honestly I was tempted to simply not suport %w in windows.\n\nI think that's for the best for now. Simply not escaping could be dangerous, and anything else will bring in lots of logic and bikeshedding around it again, just on how to cripple the functionality.\n\n(make sure to mention in the --help that it's only supported on UNIX)\n\nHopefully someone else will pick it up for window",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537384875,537384875,
promag,2019-10-02T08:48:16Z,"@laanwj will updated accordingly, thanks.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537398850,537398850,
ryanofsky,2019-10-02T13:33:11Z,"> Hopefully someone else will pick it up for windows later.\n\nIf someone does want to pick this up later, the various solutions that were discussed are listed in https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-461288094. Any of these would work and be safe and at least get some acks.\n\nAnother alternative that would work would be to build on #15382 and use boost process.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537493805,537493805,
laanwj,2019-12-13T14:25:44Z,"ACK 826718490fb22d7908ebf23ffc789d2949bb44d6\n",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-565459434,565459434,
promag,2020-01-06T03:42:35Z,BTW #17878 adds support for wallet ZMQ notifications which include the wallet name.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-570991912,570991912,
promag,2020-01-09T16:14:07Z,"Thanks @ryanofsky, rebased, squashed and added you as co author. Updated test to take into account behavior difference in windows.",https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-572632892,572632892,
jb55,2020-01-10T03:42:59Z,Linux Tested ACK 1c335d5828e27833d4afd5e23cca9c28e6ccf1cc,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-572859739,572859739,
promag,2020-02-17T00:40:19Z,Replaced with @ryanofsky amended commit.,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-586775531,586775531,
laanwj,2020-02-17T10:58:39Z,ACK 4e9efac678a9c0ea4e4c7dd956ea036ae6cf17ec,https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-586936766,586936766,
laanwj,2018-05-29T15:15:06Z,"As the wallet name can contain any character, we need shell-escaping here.\n",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r191464672,191464672,src/wallet/wallet.cpp
laanwj,2018-05-31T06:01:05Z,"Please factor this out to a function `ShellEscape` which does `boost::replace_all(name, ""'"", ""'\''"");; return ""'"" + name + ""'""`. We might need that in other places at some point, and it makes it an easier to review unit.\n(also it's possible that for WIN32/cmd this needs something else?)",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r191996154,191996154,src/wallet/wallet.cpp
promag,2018-05-31T10:34:55Z,Will do.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r192056673,192056673,src/wallet/wallet.cpp
luke-jr,2018-06-12T21:28:12Z,This would work even without %w properly escaped.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r194894771,194894771,test/functional/feature_notifications.py
MarcoFalke,2018-07-08T06:54:44Z,Could just use `'...%w\:%s >> {}'.format(self.tx_filename)` to avoid this confusion.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r200831047,200831047,test/functional/feature_notifications.py
MarcoFalke,2018-11-13T16:55:24Z,This test fails when the wallet name has a `'` in it. Probably need to quote it below?,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r233131972,233131972,test/functional/feature_notifications.py
ken2812221,2018-11-19T02:14:37Z,"~Can you explain that why `ws2s` and `s2ws` is required? I think it's fine to use std::string to add quotes.~\n\nEdit: Oh I know. It's unicode problem. But maybe it's ok if #13884 merged.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r234478250,234478250,src/util/system.cpp
luke-jr,2018-11-25T02:22:11Z,"This appears to be copied out of [this MSDN article](https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/), at least some derivative thereof. There's no indication that it is licensed for free use. Please clarify the licensing terms (and move it to a separate commit with proper attribution to the true author), or rewrite it.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r236058714,236058714,src/util/system.cpp
promag,2018-11-26T15:23:15Z,Yes it's borrowed from there. I'll update accordingly.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r236297452,236297452,src/util/system.cpp
MarcoFalke,2018-11-26T20:11:22Z,"Rewriting it doesn't make the creators authorship disappear, just like translations don't make the copyright disappear. Though, very straightforward algorithms can't be licensed due to their simplicity. I suggest we at least put a link and author in a comment inside this function.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r236408578,236408578,src/util/system.cpp
practicalswift,2018-11-26T20:21:20Z,Consider adding a project local `ReplaceAll(‚Ä¶)` instead of bringing in `boost::replace_all`.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r236411684,236411684,src/util/system.cpp
luke-jr,2018-11-28T21:40:45Z,"""Rewrite"" does not mean ""obfuscate"".\n\nAgain, AFAICT, this code is not licensed freely. (I don't think there's a strong argument that it is too simple for copyright.)",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r237271758,237271758,src/util/system.cpp
ken2812221,2019-01-10T04:12:57Z,"#13884 has been merged, you could use `std::string` instead of `std::wstring` and drop `ws2s`, `s2ws` now.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r246631644,246631644,src/util/system.cpp
luke-jr,2019-01-10T10:30:47Z,Using dependencies is better than rewriting them.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r246707574,246707574,src/util/system.cpp
practicalswift,2019-01-10T11:23:57Z,"@luke-jr Sometimes, but not always.\n\nThis is new code and we're mostly using our own string handling helpers already.\n\nPersonally I think it is a mistake to add new code depending on Boost: I want to see declining Boost usage without unnecessary increases like this one.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r246723466,246723466,src/util/system.cpp
promag,2019-01-10T11:30:19Z,"@practicalswift `boost::replace_all` is already a dependency.\n\nBeside that, I'm considering `EncodeBase64` the wallet name/path. WDYT?",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r246725075,246725075,src/util/system.cpp
laanwj,2019-01-16T09:56:55Z,"`replace_all` is already used in four places. I'd suggest to simply use it here, too.\nRewriting it could always be done, it's irrelevant to his PR.\n\nEdit: Regarding EncodeBase64, no I don't think that's useful here. It'd add another hoop to client scripts to decode it again, adding complexity and potential bugs. It should be possible to quote correctly. It's not trivail but also we're not th",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r248215966,248215966,src/util/system.cpp
ryanofsky,2019-01-16T23:12:10Z,"re: https://github.com/bitcoin/bitcoin/pull/13339#discussion_r236058714\n\nI don't think we should use this code. As Luke points out it's unlicensed, and it doesn't handle cmd.exe escaping, so it will break if the argument contains quotes.\n\nBut the problem is actually worse than that. There is no reliable way to escape argv values on windows because the windows OS doesn't have a concept of a",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r248486988,248486988,src/util/system.cpp
luke-jr,2019-10-21T18:56:21Z,"I wonder if `""'\\''""` would be better",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337184713,337184713,src/util/system.cpp
luke-jr,2019-10-21T20:32:53Z,Prefer making `ShellEscape` a noop on WIN32 over conditionals everywhere...,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337225130,337225130,src/wallet/wallet.cpp
luke-jr,2019-10-21T20:39:41Z,Even with various locales? How is Unicode handled?,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337228203,337228203,test/functional/feature_notifications.py
luke-jr,2019-10-21T20:39:51Z,Would be nice to autodetect this in the test.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337228270,337228270,test/functional/feature_notifications.py
luke-jr,2019-10-21T20:40:10Z,"What about macOS, BSD, Amiga, etc?",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337228399,337228399,test/functional/feature_notifications.py
luke-jr,2019-10-21T20:41:27Z,This looks potentially dangerous...,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337228950,337228950,test/functional/feature_notifications.py
luke-jr,2019-10-21T20:42:10Z,"Until escaping works on Windows, we should exclude spaces, tabs, and single quotes here too...",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337229253,337229253,test/functional/feature_notifications.py
luke-jr,2019-10-21T20:43:50Z,"Why 128? If we're aiming for only ASCII, it should end at 127...? (Yes, I see that the range excludes the end char, but the name for this implies inclusive)",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337230008,337230008,test/functional/feature_notifications.py
luke-jr,2019-10-21T21:23:09Z,"Maybe prefix it with ""wallet"" so you can tab-complete if you ever need to touch it...",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337246467,337246467,test/functional/feature_notifications.py
luke-jr,2019-10-21T21:27:11Z,Maybe leaving the UNIX quoting in place is better than nothing at all?,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337248077,337248077,src/util/system.cpp
ryanofsky,2019-10-22T17:20:54Z,"> Maybe leaving the UNIX quoting in place is better than nothing at all?\n\nI think there's some agreement to not support `%w` on windows, and leave windows escaping for a future PR: https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537384875, instead of implementing something broken. This is the simplest and least dangerous approach.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337647408,337647408,src/util/system.cpp
laanwj,2019-10-23T11:24:14Z,"Right. Let's please not repeat this argument. If we do, this will never make any progress. This makes the explicit choice to not support `%w` on windows for now.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337990307,337990307,src/util/system.cpp
promag,2019-12-13T12:13:18Z,You mean identity.,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357617979,357617979,src/wallet/wallet.cpp
ryanofsky,2019-12-13T13:55:17Z,"Please don't do this is. Please leave behavior **unchanged** on windows in this PR, and do not perform any substitution, as laanwj suggested https://github.com/bitcoin/bitcoin/pull/13339#discussion_r337990307 and https://github.com/bitcoin/bitcoin/pull/13339#issuecomment-537384875\n\nWe are talking about an obscure new feature. Better to not support it on windows, than to implement it an a half ",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357655050,357655050,src/wallet/wallet.cpp
jb55,2019-12-13T16:33:54Z,"> sometimes mangle the string it is trying to pass, and sometimes turn on your webcam, upload your private keys, and reset your gmail password\n\nif this is the case we should probably have tests that cover these broken scenarios?",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357729306,357729306,src/wallet/wallet.cpp
ryanofsky,2019-12-13T17:21:08Z,"re: https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357729306\n\n> > sometimes mangle the string it is trying to pass, and sometimes turn on your webcam, upload your private keys, and reset your gmail password\n> \n> if this is the case we should probably have tests that cover these broken scenarios?\n\nI'm confused figuring out if this is a joke or a serious suggestion. But to tak",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357749035,357749035,src/wallet/wallet.cpp
jb55,2019-12-13T18:30:27Z,"you're describing a different issue than what I was thinking of, could you have a wallet name that would get passed incorrectly if it was not escaped properly? for instance with a wallet named `wallet`, `wallet 1`, `wallet 2`. I'm just trying to understand all the different ways the current code would break, and suggested tests that document this, so no I was not joking.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357775030,357775030,src/wallet/wallet.cpp
jb55,2019-12-13T19:00:27Z,"Regardless, I believe that you're right that this should be a noop if we're not supporting it on windows...",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357787050,357787050,src/wallet/wallet.cpp
ryanofsky,2019-12-13T19:52:49Z,"Ah I see. I hope that comment didn't come off wrong. I believe an example of a name that'd be passed incorrectly would be a wallet named `eggs & bacon`. With cacc63bed101ecb56679695e1b490fd76f83bd50 and `walletnotify=walletnotify.exe %w`, I think the notifications script would see command line string `walletnotify.exe 'eggs`, because the `cmd.exe` command interpreter on windows treats `&` as a sep",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357807610,357807610,src/wallet/wallet.cpp
ryanofsky,2020-01-08T21:36:40Z,This line is unsafe since it can corrupt wallet names and trigger arbitrary shell commands to run from an RPC. Suggested fix from previous thread https://github.com/bitcoin/bitcoin/pull/13339#discussion_r357655050 is 26e0017bcfca722892eaf79d459d80f57a599863,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364455057,364455057,src/wallet/wallet.cpp
ryanofsky,2020-01-09T16:23:25Z,"> This looks potentially dangerous...\n\n> Maybe prefix it with ""wallet"" so you can tab-complete if you ever need to touch it...\n\nI like luke's suggestion to prefix with something. Maybe a prefix like ""feature_notifications"" to give a hint where the file comes from, and to help with tab completion",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364833906,364833906,test/functional/feature_notifications.py
ryanofsky,2020-01-09T16:35:56Z,"> Even with various locales? How is Unicode handled?\n\nShould be no issue here. This remains in unicode and utf8 formats until it hits bitcoin filesystem code which uses utf8 directly on non-windows systems, and converts to wide characters for windows apis.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364841030,364841030,test/functional/feature_notifications.py
ryanofsky,2020-01-09T17:02:10Z,"> What about macOS, BSD, Amiga, etc?\n\n> Would be nice to autodetect this in the test.\n\nIt shouldn't be too hard to autodetect by just writing to files and seeing what succeeds, but in the worst case this test just doesn't work on an obscure platform and the fix is trivial, so I don't think it's is a big deal",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364855885,364855885,test/functional/feature_notifications.py
ryanofsky,2020-01-09T17:10:58Z,"Instead of repeating the  `os.name != 'nt'` checks and `""{}_{}""` formatting throughout the test, maybe just define a helper function and call it here and below:\n\n```python\ndef notify_outputname(walletname, txid):\n    return txid if os == ""nt"" else ""{}_{}"".format(walletname, txid)\n```",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364860093,364860093,test/functional/feature_notifications.py
ryanofsky,2020-01-09T17:34:02Z,"I misunderstood what this code was doing when I wrote the suggestion above. But I guess you could still call the function here as `notify_outputname(""%w"", ""%s"")`",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364870632,364870632,test/functional/feature_notifications.py
promag,2020-01-09T19:05:40Z,"Yes that's a neat suggestion, will also add a comment.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364910624,364910624,test/functional/feature_notifications.py
promag,2020-01-09T19:23:55Z,~~Just prefixed with `wallet`.~~ not yet,https://github.com/bitcoin/bitcoin/pull/13339#discussion_r364918095,364918095,test/functional/feature_notifications.py
meshcollider,2020-01-15T10:35:24Z,"Typo in ""implemented""",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r366803636,366803636,src/wallet/init.cpp
promag,2020-01-15T11:48:02Z,"ops, fixed.",https://github.com/bitcoin/bitcoin/pull/13339#discussion_r366833875,366833875,src/wallet/init.cpp
ryanofsky,2020-01-31T22:50:32Z,Pushed amended commit https://github.com/ryanofsky/bitcoin/commit/4e9efac678a9c0ea4e4c7dd956ea036ae6cf17ec ([diff](https://github.com/ryanofsky/bitcoin/compare/56d2307446b3d91dd63a05a78d2ebe52edc5bcaf..4e9efac678a9c0ea4e4c7dd956ea036ae6cf17ec)),https://github.com/bitcoin/bitcoin/pull/13339#discussion_r373719623,373719623,test/functional/feature_notifications.py
