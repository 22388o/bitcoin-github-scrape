[
  {
    "sha": "11c09018f22c40d665c8e6194b5744eac1180cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWMwOTAxOGYyMmM0MGQ2NjVjOGU2MTk0YjU3NDRlYWMxMTgwY2Yy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-25T17:42:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T15:01:13Z"
      },
      "message": "p2p: Stop relaying non-mempool txs",
      "tree": {
        "sha": "39050da9086af56956242e34acb05cde5720fe3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39050da9086af56956242e34acb05cde5720fe3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11c09018f22c40d665c8e6194b5744eac1180cf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11c09018f22c40d665c8e6194b5744eac1180cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11c09018f22c40d665c8e6194b5744eac1180cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11c09018f22c40d665c8e6194b5744eac1180cf2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f32a3dee9a965c8198f9ddd3aaebc627c273e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2f32a3dee9a965c8198f9ddd3aaebc627c273e4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d7b281887251525edc5a04c3c804949ce6982146",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11c09018f22c40d665c8e6194b5744eac1180cf2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11c09018f22c40d665c8e6194b5744eac1180cf2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=11c09018f22c40d665c8e6194b5744eac1180cf2",
        "patch": "@@ -1622,8 +1622,9 @@ CTransactionRef static FindTxForGetData(const uint256& txid, const std::chrono::\n     if (txinfo.tx) {\n         // To protect privacy, do not answer getdata using the mempool when\n         // that TX couldn't have been INVed in reply to a MEMPOOL request,\n-        // or when it's too recent to have expired from mapRelay.\n-        if ((mempool_req.count() && txinfo.m_time <= mempool_req) || txinfo.m_time <= longlived_mempool_time) {\n+        // and when it's not marked for relay,\n+        // and when it's too recent to have expired from mapRelay.\n+        if ((mempool_req.count() && txinfo.m_time <= mempool_req) || (mapRelay.find(inv.hash) != mapRelay.end() || txinfo.m_time <= longlived_mempool_time) {\n             return txinfo.tx;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGNlZmQ3Yjc3OWYyYmZkMjRmMTM1OTEyM2RkZjBmNGViNjcxODE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-29T20:43:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T15:03:14Z"
      },
      "message": "p2p: Stop relaying txs to nodes that could have never received an inv for it",
      "tree": {
        "sha": "5aa3e36d5ac06682ef49bff255da2f8903705fdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5aa3e36d5ac06682ef49bff255da2f8903705fdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11c09018f22c40d665c8e6194b5744eac1180cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11c09018f22c40d665c8e6194b5744eac1180cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11c09018f22c40d665c8e6194b5744eac1180cf2"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 19,
      "deletions": 29
    },
    "files": [
      {
        "sha": "972bbb838e642732392cf002d0ecec84997c61d1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
        "patch": "@@ -823,7 +823,10 @@ class CNode\n         bool fSendMempool GUARDED_BY(cs_tx_inventory){false};\n         // Last time a \"MEMPOOL\" request was serviced.\n         std::atomic<std::chrono::seconds> m_last_mempool_req{std::chrono::seconds{0}};\n+        /** When to send the next batch of invs to this peer */\n         std::chrono::microseconds nNextInvSend{0};\n+        /** When the last batch of invs was sent to this peer */\n+        std::chrono::microseconds m_last_inv_sent{0};\n \n         RecursiveMutex cs_feeFilter;\n         // Minimum fee rate with which to filter inv's to this node"
      },
      {
        "sha": "dcd81968c9cd8829a7aa29c08732632006c5f37f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 28,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
        "patch": "@@ -40,8 +40,6 @@\n static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n-/** How long to cache transactions in mapRelay for normal relay */\n-static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME{15 * 60};\n /** Headers download timeout expressed in microseconds\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n@@ -214,12 +212,6 @@ namespace {\n     /** When our tip was last updated. */\n     std::atomic<int64_t> g_last_tip_update(0);\n \n-    /** Relay map */\n-    typedef std::map<uint256, CTransactionRef> MapRelay;\n-    MapRelay mapRelay GUARDED_BY(cs_main);\n-    /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n-    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n-\n     struct IteratorComparator\n     {\n         template<typename I>\n@@ -1609,7 +1601,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n }\n \n //! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n-CTransactionRef static FindTxForGetData(const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)\n+CTransactionRef static FindTxForGetData(const uint256& txid, const std::chrono::seconds mempool_req) LOCKS_EXCLUDED(cs_main)\n {\n     {\n         LOCK(cs_main);\n@@ -1622,9 +1614,8 @@ CTransactionRef static FindTxForGetData(const uint256& txid, const std::chrono::\n     if (txinfo.tx) {\n         // To protect privacy, do not answer getdata using the mempool when\n         // that TX couldn't have been INVed in reply to a MEMPOOL request,\n-        // and when it's not marked for relay,\n-        // and when it's too recent to have expired from mapRelay.\n-        if ((mempool_req.count() && txinfo.m_time <= mempool_req) || (mapRelay.find(inv.hash) != mapRelay.end() || txinfo.m_time <= longlived_mempool_time) {\n+        // or INVed in normal poisson relay.\n+        if ((mempool_req.count() && txinfo.m_time <= mempool_req) || (txinfo.m_time <= pfrom->m_tx_relay->m_last_inv_sent)) {\n             return txinfo.tx;\n         }\n     }\n@@ -1640,8 +1631,6 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    // mempool entries added before this time have likely expired from mapRelay\n-    const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n     // Get last mempool request time\n     const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n                                                                           : std::chrono::seconds::min();\n@@ -1662,7 +1651,7 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             continue;\n         }\n \n-        CTransactionRef tx = FindTxForGetData(inv.hash, mempool_req, longlived_mempool_time);\n+        CTransactionRef tx = FindTxForGetData(inv.hash, mempool_req);\n         if (tx) {\n             int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n             connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *tx));\n@@ -3978,6 +3967,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // Assume that this peer received all txs in the mempool at the current time, even if they are too many\n+                // to fit in one inv message or were filtered out later on\n+                if (fSendTrickle) {\n+                    pto->m_tx_relay->m_last_inv_sent = current_time;\n+                }\n+\n                 // Time to send but the peer has requested we not relay transactions.\n                 if (fSendTrickle) {\n                     LOCK(pto->m_tx_relay->cs_filter);\n@@ -4063,19 +4058,6 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                         // Send\n                         vInv.push_back(CInv(MSG_TX, hash));\n                         nRelayedTransactions++;\n-                        {\n-                            // Expire old relay messages\n-                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n-                            {\n-                                mapRelay.erase(vRelayExpiration.front().second);\n-                                vRelayExpiration.pop_front();\n-                            }\n-\n-                            auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n-                            if (ret.second) {\n-                                vRelayExpiration.push_back(std::make_pair(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first));\n-                            }\n-                        }\n                         if (vInv.size() == MAX_INV_SZ) {\n                             connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                             vInv.clear();"
      },
      {
        "sha": "483b71180f722a95d7255f0ce581e1f266de96c4",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=4dcefd7b779f2bfd24f1359123ddf0f4eb671816",
        "patch": "@@ -49,7 +49,12 @@ def run_test(self):\n                 break\n             else:\n                 self.log.debug('tx {} was already announced to us. Try test again.'.format(txid))\n-                assert int(txid, 16) in [inv.hash for inv in inbound_peer.last_message['inv'].inv]\n+                if 'inv' in inbound_peer.last_message:\n+                    assert int(txid, 16) in [inv.hash for inv in inbound_peer.last_message['inv'].inv]\n+                    inbound_peer.last_message.pop('inv')\n+                if 'tx' in inbound_peer.last_message:\n+                    assert_equal(txid, inbound_peer.last_message['tx'].tx.rehash())\n+                    inbound_peer.last_message.pop('tx')\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]