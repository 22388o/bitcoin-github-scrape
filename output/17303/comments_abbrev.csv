sdaftuar,2019-10-29 19:23:28,"I think this is the eventual right direction for us to go (because mapRelay doesn't have great memory bounds), but without something like #15505 this turns nodes into accidental DoSers whenever they evict a transaction after announcement and before a getdata comes in.  If you're a node running with a small mempool, then transactions can be evicted even if they're not ""low feerate"".\n\nI tend to ",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-547589047,547589047,
MarcoFalke,2019-10-29 20:12:47,">  We should go ahead and fix the privacy problem (mentioned in #14220) at the same time though.\n\nIt is trivial to fix that now, but I refuse to write code that does time comparisons that don't use std::chrono. Will push the commit after #17243 .",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-547608501,547608501,
DrahtBot,2019-10-29 22:52:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18861 (Do not answer GETDATA for to-be-announced tx by sipa)\n* #18808 ([net processing] Drop unknown types in getdata by",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-547664454,547664454,
naumenkogs,2019-11-04 19:06:46,"This sounds reasonable to me, but I think we should be careful here to not introduce vulns as a side-effect.\nSo I'd want to give a more thorough review once all the pre-reqs mentioned above are satisfied.",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-549501082,549501082,
MarcoFalke,2019-11-06 18:38:01,Minimized the diff. Also fixed the privacy issue as requested by @sdaftuar ,https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-550443904,550443904,
naumenkogs,2019-11-06 19:19:03,"### Summary\n\nI think the privacy problem mentioned above is fixed here in a limited way.\nThere are 2 privacy threats related to the discussed behavior right now:\na) inferring an origin node of the particular transaction\nb) inferring tx relay network topology\n\nThis proposal fixes a), but does not fix b), see below.\nI also show that ideas of fixing b) after this change would require ",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-550460346,550460346,
jkczyz,2019-11-13 18:59:26,"The PR title states that this change ""improve tx privacy slightly"". Could you elaborate in the PR description how? (i.e., why was it less private before?)",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-553550171,553550171,
jnewbery,2019-11-13 21:27:21,"Concept ACK\n\n@sdaftuar\nYou had two concept comments on this PR:\n1. If we make this change, then it should address the privacy issue identified in #14220. I haven't fully reviewed the second commit yet, but it seems like a reasonable fix (keep a per-peer timestamp of the last tx INV we sent, don't respond to GETDATAs for txs that entered our mempool after that timestamp).\n2. This PR might",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-553611188,553611188,
jnewbery,2019-11-14 18:25:20,"> I think Suhas point is requester is going to keep sending GETDATA as tx isn't erased from m_tx_process_time at NOTFOUND processing?\n\nI think the concern is that a peer will send us an INV for a tx that then gets removed from its mempool because of `SIZELIMIT`. It'll reply with a `NOTFOUND` which we don't do anything with.\n\nI think that's ok because one minute later we'll request from ano",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-554016248,554016248,
ariard,2019-11-14 20:09:38,"> I think that's ok because one minute later we'll request from another peer that INV'ed the transaction to us\n\nOk, I was making the assumption than the NOTFOUND peer is the origin one so you don't have an INV from other peers. Isn't our current logic going to loop on the sending GETDATA, receiving NOTFOUND sequence ? Or is this too an edge case?",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-554058157,554058157,
sdaftuar,2019-11-14 20:12:59,So the benefits of this PR are presumably to eliminate DoS attack surface on mapRelay (though I‚Äôm not sure anyone has articulated this clearly) and to solve a privacy issue.  I think both those things could also be solved without introducing relay problems from announcing transactions and then not responding (and I‚Äôve proposed one approach that I think would be satisfactory; I‚Äôm sure someone could,https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-554059479,554059479,
naumenkogs,2019-11-15 00:55:54,"@jnewbery \n> I don't think the topology probing technique you describe in #17303 (comment) is made any worse by this PR. We can always probe whether a tx is in a peer's mempool using the technique here: #16851 (comment).\n\nI have never said it's made any worse. What I don't like is that in future when we'll want to fix privacy issue we might return ``mapRelay`` in a slightly different form, s",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-554158568,554158568,
ajtowns,2020-02-03 06:16:53,"@naumenkogs \n\n> I have never said it's made any worse. What I don't like is that in future when we'll want to fix privacy issue we might return `mapRelay` in a slightly different form, so I thought maybe we should do it right away here.\n\nI don't think we have a clear enough idea on how to fix privacy issues in non-token ways to do anything ""right away"" here? And if we'll want a different t",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-581256010,581256010,
ajtowns,2020-02-03 11:18:37,"I don't think this PR really makes reacting to notfounds a more urgent issue for all the reasons @jnewbery lists. But I had a look at #15505 again anyway, and think that logic like ""if we see a notfound for an inflight tx, look through our other peers to reset the process_time for that tx that was soonest to right now"" should be fine -- we don't need to take any new locks, and we're just iterating",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-581363980,581363980,
MarcoFalke,2020-03-25 14:17:11,"> I don't think the p2p_leak_tx test is quite right -- if I take away the ""break"" after a GETDATA fails, it continues for a while then fails on the txid in inbound_peer.last_message['inv'] assertion. Not sure why; maybe there's a race condition if the getdata comes in between the inv getting queued and actually send or similar?\n\nThe test is ""right"". It is only single-use, as correctly assumed ",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-603864485,603864485,
DrahtBot,2020-05-12 03:04:03,<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-627079876,627079876,
adamjonas,2020-06-12 18:21:58,Looks like there are still a [couple of references to `mapRelay`](https://github.com/bitcoin/bitcoin/blob/4dcefd7b779f2bfd24f1359123ddf0f4eb671816/src/net_processing.cpp#L1609) in `net_processing.cpp` left to remove.,https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-643420715,643420715,
MarcoFalke,2020-06-12 19:04:04,Please don't review yet. This has not yet properly been rebased.,https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-643437342,643437342,
MarcoFalke,2020-06-28 12:00:31,"Closing for now. There have been some other changes, so if this still makes sense, it is probably best to start a new pull request",https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-650741739,650741739,
jkczyz,2019-11-12 20:47:19,You can now remove `push` and then update `vNotFound` in an else branch opposite the `PushMessage` below.,https://github.com/bitcoin/bitcoin/pull/17303#discussion_r345435567,345435567,src/net_processing.cpp
jkczyz,2019-11-12 20:47:33,Is this scope needed?,https://github.com/bitcoin/bitcoin/pull/17303#discussion_r345435673,345435673,src/net_processing.cpp
MarcoFalke,2019-11-13 00:52:46,Happy to remove in a new commit if I get at least one ACK and others agree to do this.,https://github.com/bitcoin/bitcoin/pull/17303#discussion_r345522122,345522122,src/net_processing.cpp
MarcoFalke,2019-11-13 00:52:49,"no, but it keeps the scope that came previously after the else to minimize the diff. Happy to remove in a new commit if I get at least one ACK and others agree to do this.",https://github.com/bitcoin/bitcoin/pull/17303#discussion_r345522136,345522136,src/net_processing.cpp
ariard,2019-11-13 22:43:36,"Given new `m_last_inv_sent` update just before the mempool one in `SendMessages`, is checking mempool one still useful ?\n\nWe take `cs_main` in beginning of `SendMessages` which implicitly means new tx can't get inserted in the mempool. So we are going to send only mempool txn with a `m_time` before updated `m_last_inv_sent`. There can't a tx INVed by us between two time measures in reply to a ",https://github.com/bitcoin/bitcoin/pull/17303#discussion_r346042718,346042718,src/net_processing.cpp
MarcoFalke,2020-03-25 12:22:05,"`push` is used in #18038, so to avoid a merge conflict I will leave it as is for now. Whichever pull gets merged last can address this nit.",https://github.com/bitcoin/bitcoin/pull/17303#discussion_r397812206,397812206,src/net_processing.cpp
MarcoFalke,2020-03-25 13:12:58,"@ariard Good point, added commit to remove `mempool_req` as well",https://github.com/bitcoin/bitcoin/pull/17303#discussion_r397841508,397841508,src/net_processing.cpp
