[
  {
    "sha": "353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTNlZmRjNDhmNjJkMmZlNWM0ZDNjZWMwYzc1NTUwZWIyODEzMmU3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-07-09T18:19:44Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-07-15T00:33:04Z"
      },
      "message": "rpc: Add mempoolchanges",
      "tree": {
        "sha": "7ad3f8d698977c5f7ba60fd83421aac61ed3036c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ad3f8d698977c5f7ba60fd83421aac61ed3036c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/353efdc48f62d2fe5c4d3cec0c75550eb28132e7/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4de89edfa8be4501534fec0c662c650a4ce7ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4de89edfa8be4501534fec0c662c650a4ce7ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4de89edfa8be4501534fec0c662c650a4ce7ef2"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 123,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98397d25dcda6bc2c429fc7c57096e97b45e368e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 0,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/353efdc48f62d2fe5c4d3cec0c75550eb28132e7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/353efdc48f62d2fe5c4d3cec0c75550eb28132e7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
        "patch": "@@ -42,8 +42,10 @@\n #include <univalue.h>\n \n #include <condition_variable>\n+#include <future>\n #include <memory>\n #include <mutex>\n+#include <queue>\n \n struct CUpdatedBlock\n {\n@@ -543,6 +545,124 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     return MempoolToJSON(EnsureMemPool(request.context), fVerbose);\n }\n \n+// TODO: streams must have a maximum queue size, when reached stream is dropped.\n+class MempoolChanges : public CValidationInterface\n+{\n+    struct Stream {\n+        std::queue<std::pair<bool, uint256>> queue;\n+    };\n+protected:\n+    virtual void TransactionAddedToMempool(const CTransactionRef& tx)\n+    {\n+        LOCK(m_mutex);\n+        for (auto& i : m_streams) {\n+            Stream& stream = i.second;\n+            stream.queue.emplace(true, tx->GetHash());\n+        }\n+    }\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason)\n+    {\n+        LOCK(m_mutex);\n+        for (auto& i : m_streams) {\n+            Stream& stream = i.second;\n+            stream.queue.emplace(false, tx->GetHash());\n+        }\n+    }\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex)\n+    {\n+        LOCK(m_mutex);\n+        for (auto& i : m_streams) {\n+            Stream& stream = i.second;\n+            for (auto& tx : block->vtx) {\n+                stream.queue.emplace(false, tx->GetHash());\n+            }\n+        }\n+    }\n+public:\n+    UniValue Start(const CTxMemPool& pool)\n+    {\n+        uint64_t id;\n+        std::promise<void> promise;\n+        CallFunctionInValidationInterfaceQueue([&] {\n+            Stream stream;\n+            {\n+                LOCK(pool.cs);\n+                for (const CTxMemPoolEntry& e : pool.mapTx) {\n+                    const uint256& hash = e.GetTx().GetHash();\n+                    stream.queue.emplace(true, hash);\n+                }\n+            }\n+            LOCK(m_mutex);\n+            if (m_streams.empty()) RegisterValidationInterface(this);\n+            id = ++m_last_stream_id;\n+            m_streams.emplace(id, std::move(stream));\n+            promise.set_value();\n+        });\n+        promise.get_future().wait();\n+        return id;\n+    }\n+    UniValue Stop(uint64_t id)\n+    {\n+        LOCK(m_mutex);\n+        const bool erased = m_streams.erase(id) == 1;\n+        CHECK_NONFATAL(erased);\n+        if (m_streams.empty()) UnregisterValidationInterface(this);\n+        return {};\n+    }\n+    UniValue Pull(uint64_t id, size_t max)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_streams.find(id);\n+        CHECK_NONFATAL(it != m_streams.end());\n+        UniValue result(UniValue::VARR);\n+        Stream& stream = it->second;\n+        while (stream.queue.size() > 0 && max-- > 0) {\n+            auto e = stream.queue.front();\n+            UniValue v(UniValue::VOBJ);\n+            v.pushKV(e.first ? \"add\" : \"del\", e.second.ToString());\n+            result.push_back(v);\n+            stream.queue.pop();\n+        }\n+        return result;\n+    }\n+private:\n+    Mutex m_mutex;\n+    std::map<uint64_t, Stream> m_streams GUARDED_BY(m_mutex);\n+    uint64_t m_last_stream_id GUARDED_BY(m_mutex) {0};\n+};\n+\n+static MempoolChanges g_mempool_changes;\n+\n+static UniValue mempoolchanges(const JSONRPCRequest& request)\n+{\n+            RPCHelpMan{\"mempoolchanges\",\n+                \"\\n.\\n\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"action\\n\"},\n+                    {\"stream\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"stream\\n\"},\n+                    {\"max\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"max\\n\"}\n+                },\n+                {\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"mempoolchanges\", \"\\\"start\\\"\")\n+            + HelpExampleRpc(\"mempoolchanges\", \"\\\"start\\\"\")\n+                },\n+            }.Check(request);\n+\n+    const auto action = request.params[0].get_str();\n+    if (action == \"start\") {\n+        return g_mempool_changes.Start(EnsureMemPool(request.context));\n+    }\n+    if (action == \"stop\") {\n+        return g_mempool_changes.Stop(request.params[1].get_int());\n+    }\n+    if (action == \"pull\") {\n+        return g_mempool_changes.Pull(request.params[1].get_int(), request.params[2].get_int());\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action\");\n+}\n+\n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"getmempoolancestors\",\n@@ -2387,6 +2507,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        {\"txid\"} },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\"} },\n+    { \"blockchain\",         \"mempoolchanges\",         &mempoolchanges,         {\"action\", \"stream\", \"max\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {\"hash_type\"} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },"
      },
      {
        "sha": "f0842eb406e31987c35e34a994d4a7df5d8dcd33",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/353efdc48f62d2fe5c4d3cec0c75550eb28132e7/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/353efdc48f62d2fe5c4d3cec0c75550eb28132e7/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
        "patch": "@@ -139,6 +139,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n+    { \"mempoolchanges\", 1, \"stream\" },\n+    { \"mempoolchanges\", 2, \"max\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },"
      }
    ]
  },
  {
    "sha": "47083b0b4cf02356956b66c0bb63b8bdecc9771a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzA4M2IwYjRjZjAyMzU2OTU2YjY2YzBiYjYzYjhiZGVjYzk3NzFh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-07-15T00:30:53Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-07-16T09:03:59Z"
      },
      "message": "qa: Test mempoolchanges RPC",
      "tree": {
        "sha": "38bc9a781c87f3e2bf406afab384b283ed23888b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38bc9a781c87f3e2bf406afab384b283ed23888b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47083b0b4cf02356956b66c0bb63b8bdecc9771a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47083b0b4cf02356956b66c0bb63b8bdecc9771a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47083b0b4cf02356956b66c0bb63b8bdecc9771a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47083b0b4cf02356956b66c0bb63b8bdecc9771a/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/353efdc48f62d2fe5c4d3cec0c75550eb28132e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/353efdc48f62d2fe5c4d3cec0c75550eb28132e7"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85550f18b0487831c150fdf28c58d8389061bdce",
        "filename": "test/functional/rpc_mempoolchanges.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47083b0b4cf02356956b66c0bb63b8bdecc9771a/test/functional/rpc_mempoolchanges.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47083b0b4cf02356956b66c0bb63b8bdecc9771a/test/functional/rpc_mempoolchanges.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_mempoolchanges.py?ref=47083b0b4cf02356956b66c0bb63b8bdecc9771a",
        "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempoolchanges RPC call\"\"\"\n+\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class MempoolChangesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        # basic start stop\n+        stream = node.mempoolchanges('start')\n+        node.mempoolchanges('stop', stream)\n+        # start gives a different stream id\n+        stream = node.mempoolchanges('start')\n+        assert_equal(stream, 2)\n+        # mempool is empty\n+        changes = node.mempoolchanges('pull', stream, 10)\n+        assert_equal(changes, [])\n+        # mempool with one transaction\n+        txid = node.sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1)\n+        changes = node.mempoolchanges('pull', stream, 10)\n+        assert_equal(changes, [{'add': txid}])\n+        # pulling again doesn't give the same data\n+        changes = node.mempoolchanges('pull', stream, 10)\n+        assert_equal(changes, [])\n+        node.mempoolchanges('stop', stream)\n+\n+\n+if __name__ == '__main__':\n+    MempoolChangesTest().main()"
      },
      {
        "sha": "2846f8a5c50a160b6611bc572041d2ca981c1659",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47083b0b4cf02356956b66c0bb63b8bdecc9771a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47083b0b4cf02356956b66c0bb63b8bdecc9771a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=47083b0b4cf02356956b66c0bb63b8bdecc9771a",
        "patch": "@@ -245,6 +245,7 @@\n     'feature_config_args.py',\n     'rpc_getdescriptorinfo.py',\n     'rpc_getpeerinfo_banscore_deprecation.py',\n+    'rpc_mempoolchanges.py',\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',"
      }
    ]
  }
]