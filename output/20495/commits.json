[
  {
    "sha": "3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWI5NGVjODFiNzJiMTRmNzJhMWY2Y2U1YzlhYTI0NDc2ZGY3NTVh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-11-25T16:05:23Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-04T17:23:05Z"
      },
      "message": "sync: Use decltype(auto) return type for WITH_LOCK\n\nNow that we're using C++17, we can use the decltype(auto) return type\n(available since C++14) for functions and lambda expressions.\n\nAs demonstrated in this commit, this can simplify cases where previously\nthe compiler failed to deduce the correct return type.\n\nJust for reference, for the \"assign to ref\" cases fixed here, there are\n3 possible solutions:\n\n- Return a pointer and immediately deref as used before this commit\n- Make sure the function/lambda returns declspec(auto) as used after\n  this commit\n- Class& i = WITH_LOCK(..., return std::ref(...));\n\n-----\n\nReferences:\n1. https://en.cppreference.com/w/cpp/language/function#Return_type_deduction\n2. https://en.cppreference.com/w/cpp/language/template_argument_deduction#Other_contexts\n3. https://en.cppreference.com/w/cpp/language/auto\n4. https://en.cppreference.com/w/cpp/language/decltype\n\nExplanations:\n1. https://stackoverflow.com/a/21369192\n2. https://stackoverflow.com/a/21369170\n3. Item 3 in Effective Modern C++ (Scott Meyers) via jnewbery",
      "tree": {
        "sha": "9b3d0a79ffc34175ab71abf0e7325553d466ab87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3d0a79ffc34175ab71abf0e7325553d466ab87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl/KcHkACgkQDMUhUxl5\nkaUriA/8CTaUNYXZcYj3naLRBB972m61J3KaLnKDwtjtBJU+rN5VJxXZAJ72JX+M\nGWIeRA2BOoa+Fk0USsXCXJ9GMLAHhrwqYsDOpIK/XH4tAlzI7OrPCDZWHCJAdt6N\nRQf7uQomGTx2tKk+UMmGhF0vcNeO2BxbUQNsTBmro8QYZ0iS4I/rjjzqivKRnEd2\noPjjhG5LUk5H4Ug1Of0ZCR59aPaBugrkK74OiyIgHDjefWCiA+U0KXp23fNkWwE+\ne/s1Cr+No8bpttGU0sIPYbqU1ExN4QfKjM1207m0m24vxoevj0qOmig5/noQnHHh\nmUTobnuOVB6ucmyaml7votVmL9LfQTs93CWy4TJBrXdbgC+0RM1aMHLmuKV+5oyJ\nBfzUHd0vdtNFwttr3h1F+6mpsk1/6POs2qUkpdaIyCoW0uFLqmnj3rZ2SPwT+/3J\nnqQ6K97rgrt+gnYTAC1WOttOOyeOr1ZT1CJrbNpjbFgyLRZeEn5fSpKI5emeYM8x\nsHxZ2IjlktJfSEQ/ePalm+aIRx8ARIb4p5ovuICApJ/FabcdfPPijAngrY4h1Ma9\n+1MQNJr2BXOeTEDN/ulmukubdfV1F2ENGIkGnn/Er/lOANQc7WqjGnlJKukSmld5\nCp0NeQ50VyAuZ7V6yNAAqsGd+gQJMAQ4qzfqHC86SyWQXK1mWoo=\n=Glrl\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b3d0a79ffc34175ab71abf0e7325553d466ab87\nparent a0489f3472f3799dc1ece32a59556fd239c4c14b\nauthor Carl Dong <contact@carldong.me> 1606320323 -0500\ncommitter Carl Dong <contact@carldong.me> 1607102585 -0500\n\nsync: Use decltype(auto) return type for WITH_LOCK\n\nNow that we're using C++17, we can use the decltype(auto) return type\n(available since C++14) for functions and lambda expressions.\n\nAs demonstrated in this commit, this can simplify cases where previously\nthe compiler failed to deduce the correct return type.\n\nJust for reference, for the \"assign to ref\" cases fixed here, there are\n3 possible solutions:\n\n- Return a pointer and immediately deref as used before this commit\n- Make sure the function/lambda returns declspec(auto) as used after\n  this commit\n- Class& i = WITH_LOCK(..., return std::ref(...));\n\n-----\n\nReferences:\n1. https://en.cppreference.com/w/cpp/language/function#Return_type_deduction\n2. https://en.cppreference.com/w/cpp/language/template_argument_deduction#Other_contexts\n3. https://en.cppreference.com/w/cpp/language/auto\n4. https://en.cppreference.com/w/cpp/language/decltype\n\nExplanations:\n1. https://stackoverflow.com/a/21369192\n2. https://stackoverflow.com/a/21369170\n3. Item 3 in Effective Modern C++ (Scott Meyers) via jnewbery\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0489f3472f3799dc1ece32a59556fd239c4c14b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0489f3472f3799dc1ece32a59556fd239c4c14b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0489f3472f3799dc1ece32a59556fd239c4c14b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 21,
      "deletions": 6
    },
    "files": [
      {
        "sha": "faabec2c2dd48ae7060b77a5b48b35898a4e5770",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
        "patch": "@@ -256,7 +256,22 @@ using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove\n //!\n //!   int val = WITH_LOCK(cs, return shared_val);\n //!\n-#define WITH_LOCK(cs, code) [&] { LOCK(cs); code; }()\n+//! Note:\n+//!\n+//! Since the return type deduction follows that of decltype(auto), while the\n+//! deduced type of:\n+//!\n+//!   WITH_LOCK(cs, return {int i = 1; return i;});\n+//!\n+//! is int, the deduced type of:\n+//!\n+//!   WITH_LOCK(cs, return {int j = 1; return (j);});\n+//!\n+//! is &int, a reference to a local variable\n+//!\n+//! The above is detectable at compile-time with the -Wreturn-local-addr flag in\n+//! gcc and the -Wreturn-stack-address flag in clang, both enabled by default.\n+#define WITH_LOCK(cs, code) [&]() -> decltype(auto) { LOCK(cs); code; }()\n \n class CSemaphore\n {"
      },
      {
        "sha": "92d8cf2e7d5fb5446c0a2ddfce670e274cbb807c",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n         return outp;\n     };\n \n-    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "a6ec4ce17fae0a176824d5738cc62facf0c9062a",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eb94ec81b72b14f72a1f6ce5c9aa24476df755a/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=3eb94ec81b72b14f72a1f6ce5c9aa24476df755a",
        "patch": "@@ -29,7 +29,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate(mempool, GetRandHash()));\n+    CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -114,7 +114,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -131,7 +131,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(mempool, GetRandHash()));\n+    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);"
      }
    ]
  }
]