DrahtBot,2020-11-26 03:23:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19806 (validation: UTXO snapshot activation by jamesob)\n\nIf you consider this pull request important, please also help ",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-734050822,734050822,
jnewbery,2020-11-26 11:11:08,"Code review ACK 50dee5a61d02eecaf78e5ac5e0305477478e5ed3\n\nThanks for the excellent explanation!\n\nIt's not important, but `decltype(auto)` has been available since c++14. You could mention that in the commit log if you felt like it.\n\nAnother really good reference on `decltype(auto)` is item 3 in Effective Modern C++ (Scott Meyers). That chapter explains one sharp edge that I wanted to t",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-734236027,734236027,
ajtowns,2020-12-01 23:38:15,Is this actually clearer or less fragile (or better in some other way?) than having the explicit `&` and `*`?,https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-736890178,736890178,
MarcoFalke,2020-12-02 08:08:04,"I think the only benefit is when new code is written, it will less likely result in a compile error. So devs need to do the add-`*`-or`&`-at-random-places-until-it-compiles workaround less often.",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-737065276,737065276,
dongcarl,2020-12-03 21:33:05,"> Is this actually clearer or less fragile (or better in some other way?) than having the explicit `&` and `*`?\n\nMy intuition could be wrong, but I think that most people, when calling `WITH_LOCK`, don't expect their deducted return type to be ""coerced"" into an object type. In `WITH_LOCK`'s particular case, this seem somewhat rigid and affects the ergonomics of a major use of `WITH_LOCK`: maki",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-738332677,738332677,
dongcarl,2020-12-03 21:34:40,Pushed 50dee5a61d02eecaf78e5ac5e0305477478e5ed3 to 7a8f4b9ea82a44c8512e6c6723ffb666cb585115: put some more context into the repo. Thanks jnewbery!,https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-738333359,738333359,
promag,2020-12-03 22:27:40,"@jnewbery I get a different warning:\n```\n$ clang++ -std=c++17 decltype_auto.cpp\ndecltype_auto.cpp:14:46: warning: reference to stack memory associated with local variable 'j' returned [-Wreturn-stack-address]\n    int j = WITH_LOCK(l, {int j = 1; return (j);}); // this isn't, auto(decltype((i)) is an &int, so this returns by reference to a local variable\n                                  ",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-738376852,738376852,
jnewbery,2020-12-07 10:22:54,utACK 3eb94ec81b72b14f72a1f6ce5c9aa24476df755a,https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-739823841,739823841,
MarcoFalke,2021-06-18 20:41:03,"review ACK 3eb94ec81b72b14f72a1f6ce5c9aa24476df755a\n\n",https://github.com/bitcoin/bitcoin/pull/20495#issuecomment-864263602,864263602,
promag,2020-12-03 21:50:31,TIL ðŸ˜± ,https://github.com/bitcoin/bitcoin/pull/20495#discussion_r535663323,535663323,src/sync.h
ryanofsky,2020-12-03 22:22:13,"> TIL\n\nWow, I didn't know this either. It's pretty funny. Seems to be C++'s way of providing two functions for the price of one keyword. decltype(variable) gives you declared type of variable while decltype(expression) gives you type of the expression with an extra & or && added to indicate lvalue or rvalueness (https://stackoverflow.com/questions/27557369/why-does-decltypeauto-return-a-refere",https://github.com/bitcoin/bitcoin/pull/20495#discussion_r535686683,535686683,src/sync.h
jnewbery,2020-12-04 11:26:09,s/deducted/deduced/,https://github.com/bitcoin/bitcoin/pull/20495#discussion_r536030673,536030673,src/sync.h
jnewbery,2020-12-04 11:26:24,"as above, deducted->deduced",https://github.com/bitcoin/bitcoin/pull/20495#discussion_r536030795,536030795,src/sync.h
