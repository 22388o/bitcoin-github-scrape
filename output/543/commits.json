[
  {
    "sha": "2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjdmMmE1ZmNhNTJmMDY0YTJmNTY2M2FiNDZjN2MxNmUxYjExN2Y4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2011-10-01T00:47:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2011-10-01T15:29:46Z"
      },
      "message": "remove possibility of 63 bit overflow in ParseMoney\n- also, add unit tests for various functions in util.cpp/util.h",
      "tree": {
        "sha": "d6711b3f81f68e00cc5caf56840788215a1796ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6711b3f81f68e00cc5caf56840788215a1796ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4769e44a326f61bdf47fa39346e1293b97e31c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4769e44a326f61bdf47fa39346e1293b97e31c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4769e44a326f61bdf47fa39346e1293b97e31c4"
      }
    ],
    "stats": {
      "total": 283,
      "additions": 275,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c7fa74e96d7c06321dd1ba646852818f8c8c44b5",
        "filename": "src/test/base58_tests.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
        "patch": "@@ -0,0 +1,87 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"../util.h\"\n+\n+BOOST_AUTO_TEST_SUITE(base58_tests)\n+\n+// TODO:\n+// EncodeBase58Check\n+// DecodeBase58Check\n+// CBase58Data\n+//    bool SetString(const char* psz)\n+    // bool SetString(const std::string& str)\n+    // std::string ToString() const\n+    // int CompareTo(const CBase58Data& b58) const\n+    // bool operator==(const CBase58Data& b58) const\n+    // bool operator<=(const CBase58Data& b58) const\n+    // bool operator>=(const CBase58Data& b58) const\n+    // bool operator< (const CBase58Data& b58) const\n+    // bool operator> (const CBase58Data& b58) const\n+\n+// CBitcoinAddress\n+    // bool SetHash160(const uint160& hash160)\n+    // bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+    // bool IsValid() const\n+    // CBitcoinAddress()\n+    // CBitcoinAddress(uint160 hash160In)\n+    // CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n+    // CBitcoinAddress(const std::string& strAddress)\n+    // CBitcoinAddress(const char* pszAddress)\n+    // uint160 GetHash160() const\n+\n+#define U(x) (reinterpret_cast<const unsigned char*>(x))\n+static struct {\n+    const unsigned char *data;\n+    int size;\n+} vstrIn[] = {\n+{U(\"\"), 0},\n+{U(\"\\x61\"), 1},\n+{U(\"\\x62\\x62\\x62\"), 3},\n+{U(\"\\x63\\x63\\x63\"), 3},\n+{U(\"\\x73\\x69\\x6d\\x70\\x6c\\x79\\x20\\x61\\x20\\x6c\\x6f\\x6e\\x67\\x20\\x73\\x74\\x72\\x69\\x6e\\x67\"), 20},\n+{U(\"\\x00\\xeb\\x15\\x23\\x1d\\xfc\\xeb\\x60\\x92\\x58\\x86\\xb6\\x7d\\x06\\x52\\x99\\x92\\x59\\x15\\xae\\xb1\\x72\\xc0\\x66\\x47\"), 25},\n+{U(\"\\x51\\x6b\\x6f\\xcd\\x0f\"), 5},\n+{U(\"\\xbf\\x4f\\x89\\x00\\x1e\\x67\\x02\\x74\\xdd\"), 9},\n+{U(\"\\x57\\x2e\\x47\\x94\"), 4},\n+{U(\"\\xec\\xac\\x89\\xca\\xd9\\x39\\x23\\xc0\\x23\\x21\"), 10},\n+{U(\"\\x10\\xc8\\x51\\x1e\"), 4},\n+{U(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"), 10},\n+};\n+\n+const char *vstrOut[] = {\n+\"\",\n+\"2g\",\n+\"a3gV\",\n+\"aPEr\",\n+\"2cFupjhnEsSn59qHXstmK2ffpLv2\",\n+\"1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L\",\n+\"ABnLTmg\",\n+\"3SEo3LWLoPntC\",\n+\"3EFU7m\",\n+\"EJDM8drfXA6uyA\",\n+\"Rt5zm\",\n+\"1111111111\"\n+};\n+\n+BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n+{\n+    for (int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    {\n+        BOOST_CHECK_EQUAL(EncodeBase58(vstrIn[i].data, vstrIn[i].data + vstrIn[i].size), vstrOut[i]);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n+{\n+    std::vector<unsigned char> result;\n+    for (int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    {\n+        std::vector<unsigned char> expected(vstrIn[i].data, vstrIn[i].data + vstrIn[i].size);\n+        BOOST_CHECK(DecodeBase58(vstrOut[i], result));\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      },
      {
        "sha": "4f98a93c19656e98beebc9a27073c1ec1a8cd035",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
        "patch": "@@ -10,6 +10,8 @@\n #include \"transaction_tests.cpp\"\n #include \"DoS_tests.cpp\"\n #include \"base64_tests.cpp\"\n+#include \"util_tests.cpp\"\n+#include \"base58_tests.cpp\"\n \n CWallet* pwalletMain;\n "
      },
      {
        "sha": "350763ee10931320c630c5f0714bd31c8ce46824",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 185,
        "deletions": 7,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
        "patch": "@@ -12,25 +12,203 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n {    \n     CMedianFilter<int> filter(5, 15);\n \n-    BOOST_CHECK(filter.median() == 15);\n+    BOOST_CHECK_EQUAL(filter.median(), 15);\n \n     filter.input(20); // [15 20]\n-    BOOST_CHECK(filter.median() == 17);\n+    BOOST_CHECK_EQUAL(filter.median(), 17);\n \n     filter.input(30); // [15 20 30]\n-    BOOST_CHECK(filter.median() == 20);\n+    BOOST_CHECK_EQUAL(filter.median(), 20);\n \n     filter.input(3); // [3 15 20 30]\n-    BOOST_CHECK(filter.median() == 17);\n+    BOOST_CHECK_EQUAL(filter.median(), 17);\n \n     filter.input(7); // [3 7 15 20 30]\n-    BOOST_CHECK(filter.median() == 15);\n+    BOOST_CHECK_EQUAL(filter.median(), 15);\n \n     filter.input(18); // [3 7 18 20 30]\n-    BOOST_CHECK(filter.median() == 18);\n+    BOOST_CHECK_EQUAL(filter.median(), 18);\n \n     filter.input(0); // [0 3 7 18 30]\n-    BOOST_CHECK(filter.median() == 7);\n+    BOOST_CHECK_EQUAL(filter.median(), 7);\n+}\n+\n+static const unsigned char ParseHex_expected[65] = {\n+    0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7, \n+    0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde, \n+    0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12, \n+    0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d, \n+    0x5f\n+};\n+BOOST_AUTO_TEST_CASE(util_ParseHex)\n+{\n+    std::vector<unsigned char> result;\n+    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    // Basic test vector\n+    result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+\n+    // Spaces between bytes must be supported\n+    result = ParseHex(\"12 34 56 78\");\n+    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+\n+    // Stop parsing at invalid value\n+    result = ParseHex(\"1234 invalid 1234\");\n+    BOOST_CHECK(result.size() == 2 && result[0] == 0x12 && result[1] == 0x34);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_HexStr)\n+{\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected)),\n+        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected, ParseHex_expected + 5, true),\n+        \"04 67 8a fd b0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n+{\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 0), \"01/01/70 00:00:00\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 0x7FFFFFFF), \"01/19/38 03:14:07\");\n+    // Formats used within bitcoin\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 1317425777), \"09/30/11 23:36:17\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M\", 1317425777), \"09/30/11 23:36\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ParseParameters)\n+{\n+    const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n+\n+    ParseParameters(0, (char**)argv_test);\n+    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+\n+    ParseParameters(1, (char**)argv_test);\n+    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+\n+    ParseParameters(5, (char**)argv_test);\n+    // expectation: -ignored is ignored (program name argument), \n+    // -a, -b and -ccc end up in map, -d ignored because it is after\n+    // a non-option argument (non-GNU option parsing)\n+    BOOST_CHECK(mapArgs.size() == 3 && mapMultiArgs.size() == 3);\n+    BOOST_CHECK(mapArgs.count(\"-a\") && mapArgs.count(\"-b\") && mapArgs.count(\"-ccc\") \n+                && !mapArgs.count(\"f\") && !mapArgs.count(\"-d\"));\n+    BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\") \n+                && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n+\n+    BOOST_CHECK(mapArgs[\"-a\"] == \"\" && mapArgs[\"-ccc\"] == \"multiple\");\n+    BOOST_CHECK(mapMultiArgs[\"-ccc\"].size() == 2);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_GetArg)\n+{\n+    mapArgs.clear();\n+    mapArgs[\"strtest1\"] = \"string...\";\n+    // strtest2 undefined on purpose\n+    mapArgs[\"inttest1\"] = \"12345\";\n+    mapArgs[\"inttest2\"] = \"81985529216486895\";\n+    // inttest3 undefined on purpose\n+    mapArgs[\"booltest1\"] = \"\";\n+    // booltest2 undefined on purpose\n+    mapArgs[\"booltest3\"] = \"0\";\n+    mapArgs[\"booltest4\"] = \"1\";\n+\n+    BOOST_CHECK_EQUAL(GetArg(\"strtest1\", \"default\"), \"string...\");\n+    BOOST_CHECK_EQUAL(GetArg(\"strtest2\", \"default\"), \"default\");\n+    BOOST_CHECK_EQUAL(GetArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(GetArg(\"inttest2\", -1), 81985529216486895);\n+    BOOST_CHECK_EQUAL(GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest1\"), true);\n+    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest2\"), false);\n+    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest3\"), false);\n+    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\"), true);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_WildcardMatch)\n+{\n+    BOOST_CHECK(WildcardMatch(\"127.0.0.1\", \"*\"));\n+    BOOST_CHECK(WildcardMatch(\"127.0.0.1\", \"127.*\"));\n+    BOOST_CHECK(WildcardMatch(\"abcdef\", \"a?cde?\"));\n+    BOOST_CHECK(!WildcardMatch(\"abcdef\", \"a?cde??\"));\n+    BOOST_CHECK(WildcardMatch(\"abcdef\", \"a*f\"));\n+    BOOST_CHECK(!WildcardMatch(\"abcdef\", \"a*x\"));\n+    BOOST_CHECK(WildcardMatch(\"\", \"*\"));\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatMoney)\n+{\n+    BOOST_CHECK_EQUAL(FormatMoney(0, false), \"0.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney((COIN/10000)*123456789, false), \"12345.6789\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN, true), \"+1.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(-COIN, false), \"-1.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(-COIN, true), \"-1.00\");\n+\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000000, false), \"100000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000000, false), \"10000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000000, false), \"1000000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100000, false), \"100000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10000, false), \"10000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*1000, false), \"1000.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*100, false), \"100.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN*10, false), \"10.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN, false), \"1.00\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10, false), \"0.10\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100, false), \"0.01\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000, false), \"0.001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000, false), \"0.0001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000, false), \"0.00001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/1000000, false), \"0.000001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/10000000, false), \"0.0000001\");\n+    BOOST_CHECK_EQUAL(FormatMoney(COIN/100000000, false), \"0.00000001\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ParseMoney)\n+{\n+    int64 ret = 0;\n+    BOOST_CHECK(ParseMoney(\"0.0\", ret));\n+    BOOST_CHECK_EQUAL(ret, 0);\n+\n+    BOOST_CHECK(ParseMoney(\"12345.6789\", ret));\n+    BOOST_CHECK_EQUAL(ret, (COIN/10000)*123456789);\n+\n+    BOOST_CHECK(ParseMoney(\"100000000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*100000000);\n+    BOOST_CHECK(ParseMoney(\"10000000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*10000000);\n+    BOOST_CHECK(ParseMoney(\"1000000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*1000000);\n+    BOOST_CHECK(ParseMoney(\"100000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*100000);\n+    BOOST_CHECK(ParseMoney(\"10000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*10000);\n+    BOOST_CHECK(ParseMoney(\"1000.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*1000);\n+    BOOST_CHECK(ParseMoney(\"100.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*100);\n+    BOOST_CHECK(ParseMoney(\"10.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN*10);\n+    BOOST_CHECK(ParseMoney(\"1.00\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN);\n+    BOOST_CHECK(ParseMoney(\"0.1\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/10);\n+    BOOST_CHECK(ParseMoney(\"0.01\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100);\n+    BOOST_CHECK(ParseMoney(\"0.001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/1000);\n+    BOOST_CHECK(ParseMoney(\"0.0001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/10000);\n+    BOOST_CHECK(ParseMoney(\"0.00001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100000);\n+    BOOST_CHECK(ParseMoney(\"0.000001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/1000000);\n+    BOOST_CHECK(ParseMoney(\"0.0000001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/10000000);\n+    BOOST_CHECK(ParseMoney(\"0.00000001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n+\n+    // Attempted 63 bit overflow should fail\n+    BOOST_CHECK(!ParseMoney(\"92233720368.54775808\", ret));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "02e2d214913205528b417d326a4f0d7d8fd1f12b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2f7f2a5fca52f064a2f5663ab46c7c16e1b117f8",
        "patch": "@@ -387,7 +387,7 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n     for (; *p; p++)\n         if (!isspace(*p))\n             return false;\n-    if (strWhole.size() > 14)\n+    if (strWhole.size() > 10) // guard against 63 bit overflow\n         return false;\n     if (nUnits < 0 || nUnits > COIN)\n         return false;"
      }
    ]
  }
]