[
  {
    "sha": "0be990ba34110184c8a5a2c04094311dab5cd84c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmU5OTBiYTM0MTEwMTg0YzhhNWEyYzA0MDk0MzExZGFiNWNkODRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-11T17:15:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T17:14:32Z"
      },
      "message": "Move CTxDestination from script/script to script/standard",
      "tree": {
        "sha": "2eb24931c396ae0dc0c57fee42f345c581bd58c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb24931c396ae0dc0c57fee42f345c581bd58c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0be990ba34110184c8a5a2c04094311dab5cd84c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be990ba34110184c8a5a2c04094311dab5cd84c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0be990ba34110184c8a5a2c04094311dab5cd84c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be990ba34110184c8a5a2c04094311dab5cd84c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab3834baae2e48708de2be74217eaf9da9081fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3834baae2e48708de2be74217eaf9da9081fc3"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 122,
      "deletions": 122
    },
    "files": [
      {
        "sha": "c5e230c72ef94133eb5f1749a23246a756015ee9",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -17,6 +17,7 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "6445042f9cba218cfcdc7281e06792fbc9d90283",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -224,9 +224,8 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     if (!addr.IsValid())\n         throw runtime_error(\"invalid TX output address\");\n \n-    // build standard output script via SetDestination()\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(addr.Get());\n+    // build standard output script via GetScriptForDestination()\n+    CScript scriptPubKey = GetScriptForDestination(addr.Get());\n \n     // construct TxOut, append to transaction output list\n     CTxOut txout(value, scriptPubKey);"
      },
      {
        "sha": "fc22871a6b042f7b115f66a6826aec212b7909e2",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -13,6 +13,8 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n \n #ifdef WIN32\n@@ -222,7 +224,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n bool isDust(const QString& address, qint64 amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n-    CScript script; script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n     return txOut.IsDust(::minRelayTxFee);\n }"
      },
      {
        "sha": "cc4478f39f1b4dac2ead0a8d4a924c8931d3fc4b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -609,7 +609,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     std::string strAccount = account.toStdString();\n     set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n-        CScript s; s.SetDestination(*refundAddresses.begin());\n+        CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n         refund_to->set_script(&s[0], s.size());\n     }\n@@ -620,7 +620,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n \n-            CScript s; s.SetDestination(keyID);\n+            CScript s = GetScriptForDestination(keyID);\n             payments::Output* refund_to = payment.add_refund_to();\n             refund_to->set_script(&s[0], s.size());\n         }"
      },
      {
        "sha": "ed90914ba7fd53950ac3698b3f36a298a9777ed4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -241,8 +241,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             setAddress.insert(rcp.address);\n             ++nAddresses;\n \n-            CScript scriptPubKey;\n-            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n+            CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n             vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;"
      },
      {
        "sha": "1ac7024550c6f14f5c082f20636ad1f9dd8a861b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -6,6 +6,8 @@\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n@@ -161,7 +163,7 @@ Value importaddress(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n-        script.SetDestination(address.Get());\n+        script = GetScriptForDestination(address.Get());\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n         script = CScript(data.begin(), data.end());"
      },
      {
        "sha": "dd45eefd58a9b32cd69e7bef6c7970bd327186ab",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -250,8 +250,7 @@ CScript _createmultisig_redeemScript(const Array& params)\n             throw runtime_error(\" Invalid public key: \"+ks);\n         }\n     }\n-    CScript result;\n-    result.SetMultisig(nRequired, pubkeys);\n+    CScript result = GetScriptForMultisig(nRequired, pubkeys);\n \n     if (result.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         throw runtime_error("
      },
      {
        "sha": "b295be3b515ea185d163d9b8a143729d3074ed9d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -366,8 +366,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);"
      },
      {
        "sha": "d9a23b23474b5d97bd241d05af497fee4052c569",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -124,8 +124,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Check if the current key has been used\n     if (account.vchPubKey.IsValid())\n     {\n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n+        CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n              it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n@@ -472,10 +471,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n-    CScript scriptPubKey;\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    scriptPubKey.SetDestination(address.Get());\n+    CScript scriptPubKey = GetScriptForDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -849,8 +847,7 @@ Value sendmany(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n "
      },
      {
        "sha": "a5126e7cc26fbb1d0aab710c1879be9e86c84656",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -253,43 +253,3 @@ bool CScript::HasCanonicalPushes() const\n     }\n     return true;\n }\n-\n-class CScriptVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CScript *script;\n-public:\n-    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n-\n-    bool operator()(const CNoDestination &dest) const {\n-        script->clear();\n-        return false;\n-    }\n-\n-    bool operator()(const CKeyID &keyID) const {\n-        script->clear();\n-        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n-        return true;\n-    }\n-\n-    bool operator()(const CScriptID &scriptID) const {\n-        script->clear();\n-        *script << OP_HASH160 << scriptID << OP_EQUAL;\n-        return true;\n-    }\n-};\n-\n-void CScript::SetDestination(const CTxDestination& dest)\n-{\n-    boost::apply_visitor(CScriptVisitor(this), dest);\n-}\n-\n-void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n-{\n-    this->clear();\n-\n-    *this << EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n-        *this << key;\n-    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n-}"
      },
      {
        "sha": "07a4229f853a3e4577b53550a5ace143d094479b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -320,20 +320,6 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n         return HexStr(vch);\n }\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {\n@@ -604,9 +590,6 @@ class CScript : public std::vector<unsigned char>\n         return (size() > 0 && *begin() == OP_RETURN);\n     }\n \n-    void SetDestination(const CTxDestination& address);\n-    void SetMultisig(int nRequired, const std::vector<CPubKey>& keys);\n-\n     std::string ToString() const\n     {\n         std::string str;"
      },
      {
        "sha": "407baf621d043b8c3e19bd6fd314a79763f82ad7",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -252,3 +252,50 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n \n     return true;\n }\n+\n+namespace\n+{\n+class CScriptVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CScript *script;\n+public:\n+    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+\n+    bool operator()(const CNoDestination &dest) const {\n+        script->clear();\n+        return false;\n+    }\n+\n+    bool operator()(const CKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        return true;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        return true;\n+    }\n+};\n+}\n+\n+CScript GetScriptForDestination(const CTxDestination& dest)\n+{\n+    CScript script;\n+\n+    boost::apply_visitor(CScriptVisitor(&script), dest);\n+    return script;\n+}\n+\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n+{\n+    CScript script;\n+\n+    script << CScript::EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CPubKey& key, keys)\n+        script << key;\n+    script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+    return script;\n+}"
      },
      {
        "sha": "ead79b82a23d2cba0529b439f0b5c9b18af96571",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -45,6 +45,20 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n@@ -53,4 +67,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n+CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+\n #endif // H_BITCOIN_SCRIPT_STANDARD"
      },
      {
        "sha": "af01e5518cec1bf4abbfc8a638ce74e0a4c65e55",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n         AddOrphanTx(tx, i);\n     }\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].prevout.hash = txPrev.GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n         AddOrphanTx(tx, i);\n@@ -203,7 +203,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         tx.vin.resize(500);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {"
      },
      {
        "sha": "9e4669eba90075c3eae6cc82a6e4e44114322c57",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(script.GetID());\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;"
      },
      {
        "sha": "1f3991d7b6fd0a455f294f2030e346a443313f96",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -68,14 +68,14 @@ BOOST_AUTO_TEST_CASE(sign)\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n     standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[1].SetDestination(key[1].GetPubKey().GetID());\n+    standardScripts[1] = GetScriptForDestination(key[1].GetPubKey().GetID());\n     standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[3].SetDestination(key[2].GetPubKey().GetID());\n+    standardScripts[3] = GetScriptForDestination(key[2].GetPubKey().GetID());\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n         keystore.AddCScript(standardScripts[i]);\n-        evalScripts[i].SetDestination(standardScripts[i].GetID());\n+        evalScripts[i] = GetScriptForDestination(standardScripts[i].GetID());\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -129,8 +129,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     CScript invalidAsScript;\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n-    CScript p2sh;\n-    p2sh.SetDestination(invalidAsScript.GetID());\n+    CScript p2sh = GetScriptForDestination(invalidAsScript.GetID());\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -140,8 +139,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n     // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n-    CScript p2sh2;\n-    p2sh2.SetDestination(p2sh.GetID());\n+    CScript p2sh2 = GetScriptForDestination(p2sh.GetID());\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -163,15 +161,15 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CScript inner[4];\n-    inner[0].SetDestination(key[0].GetPubKey().GetID());\n-    inner[1].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[2].SetMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[3].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n+    inner[0] = GetScriptForDestination(key[0].GetPubKey().GetID());\n+    inner[1] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[2] = GetScriptForMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[3] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n \n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i].SetDestination(inner[i].GetID());\n+        outer[i] = GetScriptForDestination(inner[i].GetID());\n         keystore.AddCScript(inner[i]);\n     }\n \n@@ -244,8 +242,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     CScript scriptSig;\n     scriptSig << Serialize(notValid);\n \n-    CScript fund;\n-    fund.SetDestination(notValid.GetID());\n+    CScript fund = GetScriptForDestination(notValid.GetID());\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -274,11 +271,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout.resize(7);\n \n     // First three are standard:\n-    CScript pay1; pay1.SetDestination(key[0].GetPubKey().GetID());\n+    CScript pay1 = GetScriptForDestination(key[0].GetPubKey().GetID());\n     keystore.AddCScript(pay1);\n-    CScript pay1of3; pay1of3.SetMultisig(1, keys);\n+    CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey.SetDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n     txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n@@ -293,7 +290,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     keystore.AddCScript(oneAndTwo);\n-    txFrom.vout[3].scriptPubKey.SetDestination(oneAndTwo.GetID());\n+    txFrom.vout[3].scriptPubKey = GetScriptForDestination(oneAndTwo.GetID());\n     txFrom.vout[3].nValue = 4000;\n \n     // vout[4] is max sigops:\n@@ -302,25 +299,25 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         fifteenSigops << key[i%3].GetPubKey();\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     keystore.AddCScript(fifteenSigops);\n-    txFrom.vout[4].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[4].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n     keystore.AddCScript(sixteenSigops);\n-    txFrom.vout[5].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[5].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     keystore.AddCScript(twentySigops);\n-    txFrom.vout[6].scriptPubKey.SetDestination(twentySigops.GetID());\n+    txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n \n     coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n-    txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txTo.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n \n     txTo.vin.resize(5);\n     for (int i = 0; i < 5; i++)\n@@ -352,7 +349,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n-    txToNonStd1.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd1.vout[0].nValue = 1000;\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n@@ -364,7 +361,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd2;\n     txToNonStd2.vout.resize(1);\n-    txToNonStd2.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd2.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd2.vout[0].nValue = 1000;\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;"
      },
      {
        "sha": "7afe840897748257d79583ac7003adf95424dfbc",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -280,7 +280,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     CMutableTransaction txFrom;\n     txFrom.vout.resize(1);\n-    txFrom.vout[0].scriptPubKey.SetDestination(keys[0].GetPubKey().GetID());\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(keys[0].GetPubKey().GetID());\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CMutableTransaction txTo;\n     txTo.vin.resize(1);\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n-    scriptPubKey.SetDestination(pkSingle.GetID());\n+    scriptPubKey = GetScriptForDestination(pkSingle.GetID());\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n@@ -327,7 +327,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n-    scriptPubKey.SetMultisig(2, pubkeys);\n+    scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);"
      },
      {
        "sha": "62a6cd63d65a230efb34576a08ec11802527eb74",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"uint256.h\"\n \n #include <vector>\n@@ -37,8 +38,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n-    CScript p2sh;\n-    p2sh.SetDestination(s1.GetID());\n+    CScript p2sh = GetScriptForDestination(s1.GetID());\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n@@ -50,12 +50,11 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n         k.MakeNewKey(true);\n         keys.push_back(k.GetPubKey());\n     }\n-    CScript s2;\n-    s2.SetMultisig(1, keys);\n+    CScript s2 = GetScriptForMultisig(1, keys);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n-    p2sh.SetDestination(s2.GetID());\n+    p2sh = GetScriptForDestination(s2.GetID());\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;"
      },
      {
        "sha": "221afa342082871ee2ffc7e123d58a832da3fb0b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -248,9 +248,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey.SetDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey.SetDestination(key[3].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n     coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n \n     return dummyTransactions;\n@@ -307,7 +307,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 90*CENT;\n     CKey key;\n     key.MakeNewKey(true);\n-    t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+    t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n     BOOST_CHECK(IsStandardTx(t, reason));"
      },
      {
        "sha": "6bfaec3681801c640b9e3668cfcf3c90afd745c1",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -1385,7 +1385,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                     // coin control: send change to custom address\n                     if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange.SetDestination(coinControl->destChange);\n+                        scriptChange = GetScriptForDestination(coinControl->destChange);\n \n                     // no coin control: send change to newly generated address\n                     else\n@@ -1403,7 +1403,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                         ret = reservekey.GetReservedKey(vchPubKey);\n                         assert(ret); // should never fail, as we just unlocked\n \n-                        scriptChange.SetDestination(vchPubKey.GetID());\n+                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n                     }\n \n                     CTxOut newTxOut(nChange, scriptChange);\n@@ -1556,8 +1556,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n     }\n \n     // Parse Bitcoin address\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(address);\n+    CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);"
      },
      {
        "sha": "07149ebd0b6cd2a947ded1a13f404a7b79449978",
        "filename": "src/wallet_ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -29,8 +29,7 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n \n isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n {\n-    CScript script;\n-    script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     return IsMine(keystore, script);\n }\n "
      },
      {
        "sha": "f326b86815b34725ffeeec71640ed65e42eda07a",
        "filename": "src/wallet_ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -7,9 +7,10 @@\n #define H_BITCOIN_WALLET_ISMINE\n \n #include \"key.h\"\n-#include \"script/script.h\"\n+#include \"script/standard.h\"\n \n class CKeyStore;\n+class CScript;\n \n /** IsMine() return codes */\n enum isminetype"
      }
    ]
  }
]