[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547995837",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17320#issuecomment-547995837",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17320",
    "id": 547995837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Nzk5NTgzNw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T16:32:13Z",
    "updated_at": "2019-10-30T16:32:13Z",
    "author_association": "MEMBER",
    "body": "I think this is over-sweeping. A comparison that is tautological on one platform might not be on another.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547995837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548023177",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17320#issuecomment-548023177",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17320",
    "id": 548023177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODAyMzE3Nw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T17:29:09Z",
    "updated_at": "2019-10-30T17:41:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@laanwj \r\n\r\nIf I'm reading `Parse{U,}Int64` correctly these functions are not written in a platform independent way today. The \"`sizeof(unsigned long long) > sizeof(uint64_t)` fix\" you're referring to in the current code does not look correct if the intention is that these functions should give identical results across platforms.\r\n\r\nMore specifically my reading is that input test cases can be constructed such that the output of these functions will differ depending on `sizeof(unsigned long long)`.\r\n\r\nIs that your reading too? Please correct me if I'm missing something: if so I apologise in advance.\r\n\r\nAssuming that this view is shared (regarding the platform dependence of `Parse{U,}Int64`), what is the better option when the first user decides to compile Bitcoin Core on a platform where `sizeof(unsigned long long) > sizeof(uint64_t)`:\r\n* a.). To give a compile-time error, or\r\n* b.). To compile happily and give the user a \"unique\" `Parse{U,}Int64` experience? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548023177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548031477",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17320#issuecomment-548031477",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17320",
    "id": 548031477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODAzMTQ3Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T17:46:41Z",
    "updated_at": "2019-10-30T17:47:21Z",
    "author_association": "MEMBER",
    "body": "*The idea* is that `ParseUint64` rejects values outside the range of `uint64_t` as parse error. So `strtoull` could return values outside the range of `uint64_t`, but this will be treated as a parse error. \r\n\r\n- On platforms where `uint64_t` == `unsigned long long` this works, because, values outside `uint64_t` will be rejected by `strtoull`. The comparison is tautological.\r\n- On platforms where `uint64_t` < `unsigned long long`, this works, because `strtoull` will return the larger value, but the `n <= std::numeric_limits<uint64_t>::max()` check detects it is out of range and returns a parse error.\r\n\r\nIf you think this doesn't currently work, feel free to fix it. I'm, however, unwilling to add an unnecessary static assertion here.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548031477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340721741",
    "pull_request_review_id": 309341911,
    "id": 340721741,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDcyMTc0MQ==",
    "diff_hunk": "@@ -334,8 +334,8 @@ bool ParseUInt64(const std::string& str, uint64_t *out)\n     if(out) *out = (uint64_t)n;\n     // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint64_t>::max();\n+    static_assert(std::numeric_limits<decltype(n)>::max() <= std::numeric_limits<uint64_t>::max(), \"Assumption: n <= std::numeric_limits<uint64_t>::max()\");",
    "path": "src/util/strencodings.cpp",
    "position": 19,
    "original_position": 19,
    "commit_id": "2b53af12080bdaa499ae745fd1ffbc9d822d92f5",
    "original_commit_id": "2b53af12080bdaa499ae745fd1ffbc9d822d92f5",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't like this change.\r\nThe old code is written to work for the case where a `unsigned long long` has a larger range than `uint64_t`.\r\nThe new code throws a compile-time assertion error in that case.\r\nThis is not the same.\r\n",
    "created_at": "2019-10-30T16:23:14Z",
    "updated_at": "2019-10-30T16:23:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17320#discussion_r340721741",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17320",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340721741"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17320#discussion_r340721741"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17320"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340721741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 337,
    "original_line": 337,
    "side": "RIGHT"
  }
]