[
  {
    "sha": "c3f34d06befa352acb343ad08337123d9474535f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2YzNGQwNmJlZmEzNTJhY2IzNDNhZDA4MzM3MTIzZDk0NzQ1MzVm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-02T15:14:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-03T19:47:40Z"
      },
      "message": "Make it clear which functions that are intended to be translation unit local\n\nDo not share functions that are meant to be translation unit local with\nother translation units. Use internal linkage for those consistently.",
      "tree": {
        "sha": "e9b5cae135395d090800a486791f4ad9dd1bd0ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9b5cae135395d090800a486791f4ad9dd1bd0ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3f34d06befa352acb343ad08337123d9474535f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f34d06befa352acb343ad08337123d9474535f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3f34d06befa352acb343ad08337123d9474535f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f34d06befa352acb343ad08337123d9474535f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7eb7076f70078c06bef9752f22acf92fd86e616a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb7076f70078c06bef9752f22acf92fd86e616a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb7076f70078c06bef9752f22acf92fd86e616a"
      }
    ],
    "stats": {
      "total": 452,
      "additions": 226,
      "deletions": 226
    },
    "files": [
      {
        "sha": "3cfad1b2c408cc174a973a20e8687a4c83c3bf47",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -48,7 +48,7 @@ static void PrevectorClear(benchmark::State& state)\n }\n \n template <typename T>\n-void PrevectorResize(benchmark::State& state)\n+static void PrevectorResize(benchmark::State& state)\n {\n     while (state.KeepRunning()) {\n         prevector<28, T> t0;"
      },
      {
        "sha": "34472a0e612edaf9b72d3dc7d9e1c62651fc167c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -29,7 +29,7 @@ static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n \n-std::string HelpMessageCli()\n+static std::string HelpMessageCli()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -138,7 +138,7 @@ struct HTTPReply\n     std::string body;\n };\n \n-const char *http_errorstring(int code)\n+static const char *http_errorstring(int code)\n {\n     switch(code) {\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300\n@@ -387,7 +387,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n-int CommandLineRPC(int argc, char *argv[])\n+static int CommandLineRPC(int argc, char *argv[])\n {\n     std::string strPrint;\n     int nRet = 0;"
      },
      {
        "sha": "69de1a16662c9c57a77067d599049bd10b0de5f3",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -40,7 +40,7 @@\n  * Use the buttons <code>Namespaces</code>, <code>Classes</code> or <code>Files</code> at the top of the page to start navigating the code.\n  */\n \n-void WaitForShutdown()\n+static void WaitForShutdown()\n {\n     while (!ShutdownRequested())\n     {\n@@ -53,7 +53,7 @@ void WaitForShutdown()\n //\n // Start\n //\n-bool AppInit(int argc, char* argv[])\n+static bool AppInit(int argc, char* argv[])\n {\n     bool fRet = false;\n "
      },
      {
        "sha": "aade7e21ca57af2aef505f7f7a678d6fcda00290",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -88,7 +88,7 @@ CScript ParseScript(const std::string& s)\n }\n \n // Check that all of the input and output scripts of a transaction contains valid opcodes\n-bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n+static bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n {\n     // Check input scripts for non-coinbase txs\n     if (!CTransaction(tx).IsCoinBase()) {"
      },
      {
        "sha": "3239252778f48d1c1a35fefc4da7a5e8187c8374",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -319,12 +319,12 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n }\n #endif\n \n-void OnRPCStarted()\n+static void OnRPCStarted()\n {\n     uiInterface.NotifyBlockTip.connect(&RPCNotifyBlockChange);\n }\n \n-void OnRPCStopped()\n+static void OnRPCStopped()\n {\n     uiInterface.NotifyBlockTip.disconnect(&RPCNotifyBlockChange);\n     RPCNotifyBlockChange(false, nullptr);\n@@ -595,7 +595,7 @@ struct CImportingNow\n // rev files since they'll be rewritten by the reindex anyway.  This ensures that vinfoBlockFile\n // is in sync with what's actually on disk by the time we start downloading, so that pruning\n // works correctly.\n-void CleanupBlockRevFiles()\n+static void CleanupBlockRevFiles()\n {\n     std::map<std::string, fs::path> mapBlockFiles;\n \n@@ -630,7 +630,7 @@ void CleanupBlockRevFiles()\n     }\n }\n \n-void ThreadImport(std::vector<fs::path> vImportFiles)\n+static void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n@@ -709,7 +709,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n  *  Ensure that Bitcoin is running in a usable environment with all\n  *  necessary library support.\n  */\n-bool InitSanityCheck(void)\n+static bool InitSanityCheck(void)\n {\n     if(!ECC_InitSanityCheck()) {\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n@@ -727,7 +727,7 @@ bool InitSanityCheck(void)\n     return true;\n }\n \n-bool AppInitServers()\n+static bool AppInitServers()\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);"
      },
      {
        "sha": "55043ffe30cb5a4d139d64d73a5002011aad387d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -160,7 +160,7 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n     return ret;\n }\n \n-int GetnScore(const CService& addr)\n+static int GetnScore(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n     if (mapLocalHost.count(addr) == LOCAL_NONE)\n@@ -1466,7 +1466,7 @@ void CConnman::WakeMessageHandler()\n #ifdef USE_UPNP\n static CThreadInterrupt g_upnp_interrupt;\n static std::thread g_upnp_thread;\n-void ThreadMapPort()\n+static void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n     const char * multicastif = nullptr;"
      },
      {
        "sha": "4cf7833cdc3951c382cad3af92a815faa529ce49",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -277,7 +277,7 @@ CNodeState *State(NodeId pnode) {\n     return &it->second;\n }\n \n-void UpdatePreferredDownload(CNode* node, CNodeState* state)\n+static void UpdatePreferredDownload(CNode* node, CNodeState* state)\n {\n     nPreferredDownload -= state->fPreferredDownload;\n \n@@ -287,7 +287,7 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n+static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n@@ -311,7 +311,7 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n-bool MarkBlockAsReceived(const uint256& hash) {\n+static bool MarkBlockAsReceived(const uint256& hash) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -337,7 +337,7 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n+static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -371,7 +371,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex*\n }\n \n /** Check whether the last unknown block a peer advertised is not yet known. */\n-void ProcessBlockAvailability(NodeId nodeid) {\n+static void ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -387,7 +387,7 @@ void ProcessBlockAvailability(NodeId nodeid) {\n }\n \n /** Update tracking information about which blocks a peer is assumed to have. */\n-void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -411,7 +411,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n  * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n  * removing the first element if necessary.\n  */\n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n+static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n@@ -444,7 +444,7 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     }\n }\n \n-bool TipMayBeStale(const Consensus::Params &consensusParams)\n+static bool TipMayBeStale(const Consensus::Params &consensusParams)\n {\n     AssertLockHeld(cs_main);\n     if (g_last_tip_update == 0) {\n@@ -454,13 +454,13 @@ bool TipMayBeStale(const Consensus::Params &consensusParams)\n }\n \n // Requires cs_main\n-bool CanDirectFetch(const Consensus::Params &consensusParams)\n+static bool CanDirectFetch(const Consensus::Params &consensusParams)\n {\n     return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n }\n \n // Requires cs_main\n-bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n+static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n {\n     if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\n         return true;\n@@ -471,7 +471,7 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n     if (count == 0)\n         return;\n \n@@ -570,7 +570,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n \n // Returns true for outbound peers, excluding manual connections, feelers, and\n // one-shots\n-bool IsOutboundDisconnectionCandidate(const CNode *node)\n+static bool IsOutboundDisconnectionCandidate(const CNode *node)\n {\n     return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n }\n@@ -642,7 +642,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n // mapOrphanTransactions\n //\n \n-void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n {\n     size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n@@ -1280,7 +1280,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n     }\n }\n \n-uint32_t GetFetchFlags(CNode* pfrom) {\n+static uint32_t GetFetchFlags(CNode* pfrom) {\n     uint32_t nFetchFlags = 0;\n     if ((pfrom->GetLocalServices() & NODE_WITNESS) && State(pfrom->GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;"
      },
      {
        "sha": "15f9016be8e102ff447d29f651754aa4c8e00ee6",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -289,7 +289,7 @@ struct ProxyCredentials\n };\n \n /** Convert SOCKS5 reply to an error message */\n-std::string Socks5ErrorString(uint8_t err)\n+static std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n         case SOCKS5Reply::GENFAILURE:"
      },
      {
        "sha": "4ba86e4e7ac5a957ef2c7a9b03a9fc17a456f3cc",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -178,7 +178,7 @@ static void RandAddSeedPerfmon()\n /** Fallback: get 32 bytes of system entropy from /dev/urandom. The most\n  * compatible way to get cryptographic randomness on UNIX-ish platforms.\n  */\n-void GetDevURandom(unsigned char *ent32)\n+static void GetDevURandom(unsigned char *ent32)\n {\n     int f = open(\"/dev/urandom\", O_RDONLY);\n     if (f == -1) {"
      },
      {
        "sha": "a50840950fc3ba10c0a992bdc5a9515328c11301",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -157,7 +157,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-UniValue getblockcount(const JSONRPCRequest& request)\n+static UniValue getblockcount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -174,7 +174,7 @@ UniValue getblockcount(const JSONRPCRequest& request)\n     return chainActive.Height();\n }\n \n-UniValue getbestblockhash(const JSONRPCRequest& request)\n+static UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -201,7 +201,7 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n     cond_blockchange.notify_all();\n }\n \n-UniValue waitfornewblock(const JSONRPCRequest& request)\n+static UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -239,7 +239,7 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue waitforblock(const JSONRPCRequest& request)\n+static UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -281,7 +281,7 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue waitforblockheight(const JSONRPCRequest& request)\n+static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -323,7 +323,7 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n+static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0) {\n         throw std::runtime_error(\n@@ -338,7 +338,7 @@ UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue getdifficulty(const JSONRPCRequest& request)\n+static UniValue getdifficulty(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -355,7 +355,7 @@ UniValue getdifficulty(const JSONRPCRequest& request)\n     return GetDifficulty();\n }\n \n-std::string EntryDescriptionString()\n+static std::string EntryDescriptionString()\n {\n     return \"    \\\"size\\\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\\n\"\n@@ -383,7 +383,7 @@ std::string EntryDescriptionString()\n            \"       ... ]\\n\";\n }\n \n-void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n+static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n@@ -460,7 +460,7 @@ UniValue mempoolToJSON(bool fVerbose)\n     }\n }\n \n-UniValue getrawmempool(const JSONRPCRequest& request)\n+static UniValue getrawmempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -492,7 +492,7 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n     return mempoolToJSON(fVerbose);\n }\n \n-UniValue getmempoolancestors(const JSONRPCRequest& request)\n+static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n@@ -556,7 +556,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n     }\n }\n \n-UniValue getmempooldescendants(const JSONRPCRequest& request)\n+static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n@@ -620,7 +620,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n     }\n }\n \n-UniValue getmempoolentry(const JSONRPCRequest& request)\n+static UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n@@ -653,7 +653,7 @@ UniValue getmempoolentry(const JSONRPCRequest& request)\n     return info;\n }\n \n-UniValue getblockhash(const JSONRPCRequest& request)\n+static UniValue getblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -678,7 +678,7 @@ UniValue getblockhash(const JSONRPCRequest& request)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblockheader(const JSONRPCRequest& request)\n+static UniValue getblockheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -737,7 +737,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     return blockheaderToJSON(pblockindex);\n }\n \n-UniValue getblock(const JSONRPCRequest& request)\n+static UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -899,7 +899,7 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     return true;\n }\n \n-UniValue pruneblockchain(const JSONRPCRequest& request)\n+static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -948,7 +948,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     return uint64_t(height);\n }\n \n-UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n+static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -1069,7 +1069,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue verifychain(const JSONRPCRequest& request)\n+static UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n@@ -1159,7 +1159,7 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     return rv;\n }\n \n-void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // Deployments with timeout value of 0 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n@@ -1285,7 +1285,7 @@ struct CompareBlocksByHeight\n     }\n };\n \n-UniValue getchaintips(const JSONRPCRequest& request)\n+static UniValue getchaintips(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -1402,7 +1402,7 @@ UniValue mempoolInfoToJSON()\n     return ret;\n }\n \n-UniValue getmempoolinfo(const JSONRPCRequest& request)\n+static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -1425,7 +1425,7 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n     return mempoolInfoToJSON();\n }\n \n-UniValue preciousblock(const JSONRPCRequest& request)\n+static UniValue preciousblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -1463,7 +1463,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue invalidateblock(const JSONRPCRequest& request)\n+static UniValue invalidateblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -1502,7 +1502,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue reconsiderblock(const JSONRPCRequest& request)\n+static UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -1540,7 +1540,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue getchaintxstats(const JSONRPCRequest& request)\n+static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -1614,7 +1614,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue savemempool(const JSONRPCRequest& request)\n+static UniValue savemempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error("
      },
      {
        "sha": "45ec501b9d26e7f7f1cc63323ac5ee9b62ccc119",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -44,7 +44,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-UniValue GetNetworkHashPS(int lookup, int height) {\n+static UniValue GetNetworkHashPS(int lookup, int height) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n@@ -81,7 +81,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-UniValue getnetworkhashps(const JSONRPCRequest& request)\n+static UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -151,7 +151,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n     return blockHashes;\n }\n \n-UniValue generatetoaddress(const JSONRPCRequest& request)\n+static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw std::runtime_error(\n@@ -185,7 +185,7 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n }\n \n-UniValue getmininginfo(const JSONRPCRequest& request)\n+static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -224,7 +224,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-UniValue prioritisetransaction(const JSONRPCRequest& request)\n+static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n@@ -278,7 +278,7 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     return \"valid?\";\n }\n \n-std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n+static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n     std::string s = vbinfo.name;\n     if (!vbinfo.gbt_force) {\n@@ -287,7 +287,7 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-UniValue getblocktemplate(const JSONRPCRequest& request)\n+static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -694,7 +694,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     }\n };\n \n-UniValue submitblock(const JSONRPCRequest& request)\n+static UniValue submitblock(const JSONRPCRequest& request)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n@@ -764,13 +764,13 @@ UniValue submitblock(const JSONRPCRequest& request)\n     return BIP22ValidationResult(sc.state);\n }\n \n-UniValue estimatefee(const JSONRPCRequest& request)\n+static UniValue estimatefee(const JSONRPCRequest& request)\n {\n     throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n         \"Clients should use estimatesmartfee.\");\n }\n \n-UniValue estimatesmartfee(const JSONRPCRequest& request)\n+static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -831,7 +831,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue estimaterawfee(const JSONRPCRequest& request)\n+static UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error("
      },
      {
        "sha": "6772784d3db11a32e82abf7b74ba329c84855359",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -33,7 +33,7 @@\n \n #include <univalue.h>\n \n-UniValue validateaddress(const JSONRPCRequest& request)\n+static UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -90,7 +90,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n // Needed even with !ENABLE_WALLET, to pass (ignored) pointers around\n class CWallet;\n \n-UniValue createmultisig(const JSONRPCRequest& request)\n+static UniValue createmultisig(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n     {\n@@ -145,7 +145,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue verifymessage(const JSONRPCRequest& request)\n+static UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n@@ -201,7 +201,7 @@ UniValue verifymessage(const JSONRPCRequest& request)\n     return (pubkey.GetID() == *keyID);\n }\n \n-UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n+static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n@@ -240,7 +240,7 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     return EncodeBase64(vchSig.data(), vchSig.size());\n }\n \n-UniValue setmocktime(const JSONRPCRequest& request)\n+static UniValue setmocktime(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -299,7 +299,7 @@ static std::string RPCMallocInfo()\n }\n #endif\n \n-UniValue getmemoryinfo(const JSONRPCRequest& request)\n+static UniValue getmemoryinfo(const JSONRPCRequest& request)\n {\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n@@ -346,7 +346,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     }\n }\n \n-void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n+static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n     cats = cats.get_array();\n     for (unsigned int i = 0; i < cats.size(); ++i) {\n         std::string cat = cats[i].get_str();\n@@ -433,7 +433,7 @@ UniValue logging(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue echo(const JSONRPCRequest& request)\n+static UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n         throw std::runtime_error("
      },
      {
        "sha": "1530d8578b1c70eaf3165ed3f9c7a91aec602f36",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -23,7 +23,7 @@\n \n #include <univalue.h>\n \n-UniValue getconnectioncount(const JSONRPCRequest& request)\n+static UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -42,7 +42,7 @@ UniValue getconnectioncount(const JSONRPCRequest& request)\n     return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n-UniValue ping(const JSONRPCRequest& request)\n+static UniValue ping(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -65,7 +65,7 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue getpeerinfo(const JSONRPCRequest& request)\n+static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -190,7 +190,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue addnode(const JSONRPCRequest& request)\n+static UniValue addnode(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n     if (!request.params[1].isNull())\n@@ -237,7 +237,7 @@ UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue disconnectnode(const JSONRPCRequest& request)\n+static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n         throw std::runtime_error(\n@@ -280,7 +280,7 @@ UniValue disconnectnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue getaddednodeinfo(const JSONRPCRequest& request)\n+static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -347,7 +347,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue getnettotals(const JSONRPCRequest& request)\n+static UniValue getnettotals(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n@@ -413,7 +413,7 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const JSONRPCRequest& request)\n+static UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -489,7 +489,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n-UniValue setban(const JSONRPCRequest& request)\n+static UniValue setban(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n     if (!request.params[1].isNull())\n@@ -553,7 +553,7 @@ UniValue setban(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue listbanned(const JSONRPCRequest& request)\n+static UniValue listbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -586,7 +586,7 @@ UniValue listbanned(const JSONRPCRequest& request)\n     return bannedAddresses;\n }\n \n-UniValue clearbanned(const JSONRPCRequest& request)\n+static UniValue clearbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -604,7 +604,7 @@ UniValue clearbanned(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue setnetworkactive(const JSONRPCRequest& request)\n+static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error("
      },
      {
        "sha": "c5185ca5990f4236c712ec10dc75b4a2c1021eb2",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -37,7 +37,7 @@\n #include <univalue.h>\n \n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //\n@@ -63,7 +63,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n-UniValue getrawtransaction(const JSONRPCRequest& request)\n+static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n@@ -203,7 +203,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue gettxoutproof(const JSONRPCRequest& request)\n+static UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw std::runtime_error(\n@@ -297,7 +297,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n     return strHex;\n }\n \n-UniValue verifytxoutproof(const JSONRPCRequest& request)\n+static UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -333,7 +333,7 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n     return res;\n }\n \n-UniValue createrawtransaction(const JSONRPCRequest& request)\n+static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n         throw std::runtime_error(\n@@ -493,7 +493,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(rawTx);\n }\n \n-UniValue decoderawtransaction(const JSONRPCRequest& request)\n+static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -569,7 +569,7 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue decodescript(const JSONRPCRequest& request)\n+static UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -667,7 +667,7 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue combinerawtransaction(const JSONRPCRequest& request)\n+static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -906,7 +906,7 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n     return result;\n }\n \n-UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n@@ -1084,7 +1084,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     }\n }\n \n-UniValue sendrawtransaction(const JSONRPCRequest& request)\n+static UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n@@ -1179,7 +1179,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     return hashTx.GetHex();\n }\n \n-UniValue testmempoolaccept(const JSONRPCRequest& request)\n+static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error("
      },
      {
        "sha": "7edd51d3d7efa710389524e611ad54f5c61e8e45",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -239,7 +239,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     return \"Bitcoin server stopping\";\n }\n \n-UniValue uptime(const JSONRPCRequest& jsonRequest)\n+static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error("
      },
      {
        "sha": "a273424b5111523724a7a84496dd1e6d86f84e46",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -141,7 +141,7 @@ Arena::Stats Arena::stats() const\n }\n \n #ifdef ARENA_DEBUG\n-void printchunk(char* base, size_t sz, bool used) {\n+static void printchunk(char* base, size_t sz, bool used) {\n     std::cout <<\n         \"0x\" << std::hex << std::setw(16) << std::setfill('0') << base <<\n         \" 0x\" << std::hex << std::setw(16) << std::setfill('0') << sz <<"
      },
      {
        "sha": "1868aed7dd6735113d645f4ce85f8292daa46ca8",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -31,7 +31,7 @@ struct COrphanTx {\n };\n extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n \n-CService ip(uint32_t i)\n+static CService ip(uint32_t i)\n {\n     struct in_addr s;\n     s.s_addr = i;\n@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n-void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n {\n     CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-CTransactionRef RandomOrphan()\n+static CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK(cs_main);"
      },
      {
        "sha": "13ec19834a9c7f09ad921c9506c0f264904fe8a3",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -17,7 +17,7 @@\n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n \n /// Convert vector to arith_uint256, via uint256 blob\n-inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)\n+static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)\n {\n     return UintToArith256(uint256(vch));\n }\n@@ -53,7 +53,7 @@ const unsigned char MaxArray[] =\n const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));\n \n const arith_uint256 HalfL = (OneL << 255);\n-std::string ArrayToString(const unsigned char A[], unsigned int width)\n+static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n     Stream << std::hex;\n@@ -122,7 +122,7 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n }\n \n-void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n+static void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n {\n     for (unsigned int T=0; T < arrayLength; ++T)\n     {\n@@ -136,7 +136,7 @@ void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int\n     }\n }\n \n-void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n+static void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n {\n     for (unsigned int T=0; T < arrayLength; ++T)\n     {\n@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE( divide )\n }\n \n \n-bool almostEqual(double d1, double d2)\n+static bool almostEqual(double d1, double d2)\n {\n     return fabs(d1-d2) <= 4*fabs(d1)*std::numeric_limits<double>::epsilon();\n }"
      },
      {
        "sha": "c23e23f6a124669b4055510b2c441709511fd8c4",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -9,7 +9,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n \n-bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+static bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n {\n     if (s1.size() != s2.size()) return false;\n     for (size_t i = 0; i < s1.size(); ++i) {"
      },
      {
        "sha": "51308847f6e8eafc8d390d890a4e1912d3a40c17",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -87,7 +87,7 @@ TestVector test3 =\n      \"xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L\",\n       0);\n \n-void RunTest(const TestVector &test) {\n+static void RunTest(const TestVector &test) {\n     std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n     CExtKey key;\n     CExtPubKey pubkey;"
      },
      {
        "sha": "5b8df321580521805746692139bbf807cdb223a5",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -8,12 +8,12 @@\n /* Equality between doubles is imprecise. Comparison should be done\n  * with a small threshold of tolerance, rather than exact equality.\n  */\n-bool DoubleEquals(double a, double b, double epsilon)\n+static bool DoubleEquals(double a, double b, double epsilon)\n {\n     return std::abs(a - b) < epsilon;\n }\n \n-CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)\n+static CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)\n {\n     CBlockIndex* block_index = new CBlockIndex();\n     block_index->nHeight = 46367;\n@@ -22,15 +22,15 @@ CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)\n     return block_index;\n }\n \n-CChain CreateChainWithNbits(uint32_t nbits)\n+static CChain CreateChainWithNbits(uint32_t nbits)\n {\n     CBlockIndex* block_index = CreateBlockIndexWithNbits(nbits);\n     CChain chain;\n     chain.SetTip(block_index);\n     return chain;\n }\n \n-void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {\n+static void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {\n      BOOST_CHECK_MESSAGE(\n         DoubleEquals(difficulty, expected_difficulty, 0.00001),\n         \"Difficulty was \" + std::to_string(difficulty)\n@@ -40,7 +40,7 @@ void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {\n /* Given a BlockIndex with the provided nbits,\n  * verify that the expected difficulty results.\n  */\n-void TestDifficulty(uint32_t nbits, double expected_difficulty)\n+static void TestDifficulty(uint32_t nbits, double expected_difficulty)\n {\n     CBlockIndex* block_index = CreateBlockIndexWithNbits(nbits);\n     /* Since we are passing in block index explicitly,"
      },
      {
        "sha": "c8de7f4a7cd10dfcf2ebf7a914fc3dc5befa78e4",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -146,7 +146,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n /** This test case checks that the CCheckQueue works properly\n  * with each specified size_t Checks pushed.\n  */\n-void Correct_Queue_range(std::vector<size_t> range)\n+static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = std::unique_ptr<Correct_Queue>(new Correct_Queue {QUEUE_BATCH_SIZE});\n     boost::thread_group tg;"
      },
      {
        "sha": "276d5b80ee93bc32bbe90419cace390f9df15820",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -540,7 +540,7 @@ const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};\n const static auto CLEAN_FLAGS = {char(0), FRESH};\n const static auto ABSENT_FLAGS = {NO_ENTRY};\n \n-void SetCoinsValue(CAmount value, Coin& coin)\n+static void SetCoinsValue(CAmount value, Coin& coin)\n {\n     assert(value != ABSENT);\n     coin.Clear();\n@@ -552,7 +552,7 @@ void SetCoinsValue(CAmount value, Coin& coin)\n     }\n }\n \n-size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+static size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n {\n     if (value == ABSENT) {\n         assert(flags == NO_ENTRY);\n@@ -605,7 +605,7 @@ class SingleEntryCacheTest\n     CCoinsViewCacheTest cache{&base};\n };\n \n-void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n {\n     SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n     test.cache.AccessCoin(OUTPOINT);\n@@ -656,7 +656,7 @@ BOOST_AUTO_TEST_CASE(ccoins_access)\n     CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n }\n \n-void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n {\n     SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n     test.cache.SpendCoin(OUTPOINT);\n@@ -707,7 +707,7 @@ BOOST_AUTO_TEST_CASE(ccoins_spend)\n     CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n }\n \n-void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n {\n     SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n \n@@ -734,7 +734,7 @@ void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_va\n // while still verifying that the CoinsViewCache::AddCoin implementation\n // ignores base values.\n template <typename... Args>\n-void CheckAddCoin(Args&&... args)\n+static void CheckAddCoin(Args&&... args)\n {\n     for (CAmount base_value : {ABSENT, PRUNED, VALUE1})\n         CheckAddCoinBase(base_value, std::forward<Args>(args)...);"
      },
      {
        "sha": "518cb849bb1b351217afdb5e752052799c286a4d",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -23,7 +23,7 @@\n BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n template<typename Hasher, typename In, typename Out>\n-void TestVector(const Hasher &h, const In &in, const Out &out) {\n+static void TestVector(const Hasher &h, const In &in, const Out &out) {\n     Out hash;\n     BOOST_CHECK(out.size() == h.OUTPUT_SIZE);\n     hash.resize(out.size());\n@@ -51,22 +51,22 @@ void TestVector(const Hasher &h, const In &in, const Out &out) {\n     }\n }\n \n-void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}\n-void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}\n-void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}\n-void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}\n+static void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}\n+static void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}\n+static void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}\n+static void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}\n \n-void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n+static void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     TestVector(CHMAC_SHA256(key.data(), key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n-void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n+static void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     TestVector(CHMAC_SHA512(key.data(), key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n-void TestAES128(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n+static void TestAES128(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     std::vector<unsigned char> in = ParseHex(hexin);\n@@ -86,7 +86,7 @@ void TestAES128(const std::string &hexkey, const std::string &hexin, const std::\n     BOOST_CHECK_EQUAL(HexStr(buf2), HexStr(in));\n }\n \n-void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n+static void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     std::vector<unsigned char> in = ParseHex(hexin);\n@@ -105,7 +105,7 @@ void TestAES256(const std::string &hexkey, const std::string &hexin, const std::\n     BOOST_CHECK(buf == in);\n }\n \n-void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n+static void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     std::vector<unsigned char> iv = ParseHex(hexiv);\n@@ -146,7 +146,7 @@ void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     }\n }\n \n-void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n+static void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     std::vector<unsigned char> iv = ParseHex(hexiv);\n@@ -187,7 +187,7 @@ void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     }\n }\n \n-void TestChaCha20(const std::string &hexkey, uint64_t nonce, uint64_t seek, const std::string& hexout)\n+static void TestChaCha20(const std::string &hexkey, uint64_t nonce, uint64_t seek, const std::string& hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     ChaCha20 rng(key.data(), key.size());\n@@ -200,7 +200,7 @@ void TestChaCha20(const std::string &hexkey, uint64_t nonce, uint64_t seek, cons\n     BOOST_CHECK(out == outres);\n }\n \n-std::string LongTestString(void) {\n+static std::string LongTestString(void) {\n     std::string ret;\n     for (int i=0; i<200000; i++) {\n         ret += (unsigned char)(i);"
      },
      {
        "sha": "857ab8a1b74c3262ce969176bb7ac97cd64fca96",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(cuckoocache_tests);\n \n /** insecure_GetRandHash fills in a uint256 from local_rand_ctx\n  */\n-void insecure_GetRandHash(uint256& t)\n+static void insecure_GetRandHash(uint256& t)\n {\n     uint32_t* ptr = (uint32_t*)t.begin();\n     for (uint8_t j = 0; j < 8; ++j)\n@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)\n  * inserted into a megabytes sized cache\n  */\n template <typename Cache>\n-double test_cache(size_t megabytes, double load)\n+static double test_cache(size_t megabytes, double load)\n {\n     local_rand_ctx = FastRandomContext(true);\n     std::vector<uint256> hashes;\n@@ -109,7 +109,7 @@ double test_cache(size_t megabytes, double load)\n  * how you measure around load 1.0 as after load 1.0 your normalized hit rate\n  * becomes effectively perfect, ignoring freshness.\n  */\n-double normalize_hit_rate(double hits, double load)\n+static double normalize_hit_rate(double hits, double load)\n {\n     return hits * std::max(load, 1.0);\n }\n@@ -132,7 +132,7 @@ BOOST_AUTO_TEST_CASE(cuckoocache_hit_rate_ok)\n /** This helper checks that erased elements are preferentially inserted onto and\n  * that the hit rate of \"fresher\" keys is reasonable*/\n template <typename Cache>\n-void test_cache_erase(size_t megabytes)\n+static void test_cache_erase(size_t megabytes)\n {\n     double load = 1;\n     local_rand_ctx = FastRandomContext(true);\n@@ -195,7 +195,7 @@ BOOST_AUTO_TEST_CASE(cuckoocache_erase_ok)\n }\n \n template <typename Cache>\n-void test_cache_erase_parallel(size_t megabytes)\n+static void test_cache_erase_parallel(size_t megabytes)\n {\n     double load = 1;\n     local_rand_ctx = FastRandomContext(true);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(cuckoocache_erase_parallel_ok)\n \n \n template <typename Cache>\n-void test_cache_generations()\n+static void test_cache_generations()\n {\n     // This test checks that for a simulation of network activity, the fresh hit\n     // rate is never below 99%, and the number of times that it is worse than"
      },
      {
        "sha": "6df5aec9c94e592baf44c6c42f3fa71bac6420cc",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -12,7 +12,7 @@\n #include <boost/test/unit_test.hpp>\n \n // Test if a string consists entirely of null characters\n-bool is_null_key(const std::vector<unsigned char>& key) {\n+static bool is_null_key(const std::vector<unsigned char>& key) {\n     bool isnull = true;\n \n     for (unsigned int i = 0; i < key.size(); i++)"
      },
      {
        "sha": "8676a099da74a365ed8e69ad6da85a33d9b6587f",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -58,8 +58,8 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n     BOOST_CHECK_EQUAL(nSum, CAmount{2099999997690000});\n }\n \n-bool ReturnFalse() { return false; }\n-bool ReturnTrue() { return true; }\n+static bool ReturnFalse() { return false; }\n+static bool ReturnTrue() { return true; }\n \n BOOST_AUTO_TEST_CASE(test_combiner_all)\n {"
      },
      {
        "sha": "c4b18151a75f5da467194cf9b2cb827a11949e55",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -106,7 +106,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n }\n \n template<typename name>\n-void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n+static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n     typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();"
      },
      {
        "sha": "9a325f5f4c1f0a1abc29be92be185c5d7a123309",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -82,15 +82,15 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-CBlockIndex CreateBlockIndex(int nHeight)\n+static CBlockIndex CreateBlockIndex(int nHeight)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n     index.pprev = chainActive.Tip();\n     return index;\n }\n \n-bool TestSequenceLocks(const CTransaction &tx, int flags)\n+static bool TestSequenceLocks(const CTransaction &tx, int flags)\n {\n     LOCK(mempool.cs);\n     return CheckSequenceLocks(tx, flags);\n@@ -99,7 +99,7 @@ bool TestSequenceLocks(const CTransaction &tx, int flags)\n // Test suite for ancestor feerate transaction selection.\n // Implemented as an additional function, rather than a separate test case,\n // to allow reusing the blockchain created in CreateNewBlock_validity.\n-void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n+static void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n {\n     // Test the ancestor feerate transaction selection.\n     TestMemPoolEntryHelper entry;"
      },
      {
        "sha": "77db9f5c57e7b62d86630361bef5d3eab677708a",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -18,7 +18,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n-CScript\n+static CScript\n sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction, int whichIn)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, SigVersion::BASE);"
      },
      {
        "sha": "42e615ab0c485d6710d7273a15ece7b9da560c4e",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -63,7 +63,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n     }\n };\n \n-CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n+static CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n {\n     CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n     ssPeersIn << Params().MessageStart();"
      },
      {
        "sha": "f561660fef7b7beb4c36005b2ba16628e9f7713d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -99,7 +99,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n };\n \n-const char *FormatScriptError(ScriptError_t err)\n+static const char *FormatScriptError(ScriptError_t err)\n {\n     for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n         if (script_errors[i].err == err)\n@@ -108,7 +108,7 @@ const char *FormatScriptError(ScriptError_t err)\n     return \"\";\n }\n \n-ScriptError_t ParseScriptError(const std::string &name)\n+static ScriptError_t ParseScriptError(const std::string &name)\n {\n     for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n         if (script_errors[i].name == name)\n@@ -1028,7 +1028,7 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }\n \n-CScript\n+static CScript\n sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, SigVersion::BASE);\n@@ -1052,7 +1052,7 @@ sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const\n     }\n     return result;\n }\n-CScript\n+static CScript\n sign_multisig(const CScript& scriptPubKey, const CKey& key, const CTransaction& transaction)\n {\n     std::vector<CKey> keys;"
      },
      {
        "sha": "86647e72ebb68e68f5baf808b9a3f07c844afe42",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n  * Verifies script execution of the zeroth scriptPubKey of tx output and\n  * zeroth scriptSig and witness of tx input.\n  */\n-ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)\n+static ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)\n {\n     ScriptError error;\n     CTransaction inputi(input);\n@@ -82,7 +82,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n  * and witness such that spendingTx spends output zero of creationTx.\n  * Also inserts creationTx's output into the coins view.\n  */\n-void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)\n+static void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)\n {\n     creationTx.nVersion = 1;\n     creationTx.vin.resize(1);"
      },
      {
        "sha": "b2daa2adb542ebd665cb50b82c3e0fc33e2a852b",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -52,7 +52,7 @@ enum TEST_ID {\n     TEST_ID_END\n };\n \n-bool read_stdin(std::vector<uint8_t> &data) {\n+static bool read_stdin(std::vector<uint8_t> &data) {\n     uint8_t buffer[1024];\n     ssize_t length=0;\n     while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n@@ -63,7 +63,7 @@ bool read_stdin(std::vector<uint8_t> &data) {\n     return length==0;\n }\n \n-int test_one_input(std::vector<uint8_t> buffer) {\n+static int test_one_input(std::vector<uint8_t> buffer) {\n     if (buffer.size() < sizeof(uint32_t)) return 0;\n \n     uint32_t test_id = 0xffffffff;"
      },
      {
        "sha": "8bd5ce12227fb8d3ba45eeff2b75fa03c3b3b425",
        "filename": "src/test/torcontrol_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/torcontrol_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/torcontrol_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/torcontrol_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -10,7 +10,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(torcontrol_tests, BasicTestingSetup)\n \n-void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)\n+static void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)\n {\n     BOOST_TEST_MESSAGE(std::string(\"CheckSplitTorReplyLine(\") + input + \")\");\n     auto ret = SplitTorReplyLine(input);\n@@ -51,7 +51,7 @@ BOOST_AUTO_TEST_CASE(util_SplitTorReplyLine)\n     CheckSplitTorReplyLine(\"COMMAND   EVEN+more  ARGS\", \"COMMAND\", \"  EVEN+more  ARGS\");\n }\n \n-void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)\n+static void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)\n {\n     BOOST_TEST_MESSAGE(std::string(\"CheckParseTorReplyMapping(\") + input + \")\");\n     auto ret = ParseTorReplyMapping(input);"
      },
      {
        "sha": "c753e0a11d4f48c352028c367a47f3da0c2aa7f6",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n }\n \n-void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n+static void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n {\n     CMutableTransaction outputm;\n     outputm.nVersion = 1;\n@@ -381,7 +381,7 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     assert(input.vin[0].scriptWitness.stack == inputm.vin[0].scriptWitness.stack);\n }\n \n-void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)\n+static void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)\n {\n     ScriptError error;\n     CTransaction inputi(input);\n@@ -404,7 +404,7 @@ static CScript PushAll(const std::vector<valtype>& values)\n     return result;\n }\n \n-void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n+static void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     std::vector<valtype> stack;\n     EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);"
      },
      {
        "sha": "eb23ba5ad21656b67278fcc4a84030bc67cf0f93",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -102,7 +102,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n+static void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can"
      },
      {
        "sha": "79217fa4304bafa82f890d9429c62056cf3d2b59",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -48,7 +48,7 @@ const unsigned char MaxArray[] =\n const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n \n-std::string ArrayToString(const unsigned char A[], unsigned int width)\n+static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n     Stream << std::hex;"
      },
      {
        "sha": "7442825300106a4b5cbb191f0ec7bc3cf7d17fdb",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -12,7 +12,7 @@\n #include <boost/test/unit_test.hpp>\n \n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n-int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n+static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n static const Consensus::Params paramsDummy = Consensus::Params();\n "
      },
      {
        "sha": "fc1f6477d5eb3980d654e495d0d6a29c7d922ef6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -477,7 +477,7 @@ static bool IsCurrentForFeeEstimation()\n  * and instead just erase from the mempool as needed.\n  */\n \n-void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)\n+static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -1487,7 +1487,7 @@ static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n }\n \n /** Abort with a message */\n-bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+static bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n@@ -1498,7 +1498,7 @@ bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n     return false;\n }\n \n-bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+static bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n {\n     AbortNode(strMessage, userMessage);\n     return state.Error(strMessage);"
      },
      {
        "sha": "e957c1b1caa890d1074a19037aef2854f2afb9b4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -51,7 +51,7 @@ std::string static EncodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-std::string DecodeDumpString(const std::string &str) {\n+static std::string DecodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n@@ -65,7 +65,7 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+static bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n {\n     bool fLabelFound = false;\n     CKey key;\n@@ -208,8 +208,8 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     return true;\n }\n \n-void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n-void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n+static void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n+static void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n {\n     if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n@@ -235,7 +235,7 @@ void ImportScript(CWallet* const pwallet, const CScript& script, const std::stri\n     }\n }\n \n-void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel)\n+static void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel)\n {\n     CScript script = GetScriptForDestination(dest);\n     ImportScript(pwallet, script, strLabel, false);\n@@ -811,7 +811,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n {\n     try {\n         bool success = false;\n@@ -1111,7 +1111,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n     }\n }\n \n-int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n {\n     if (data.exists(\"timestamp\")) {\n         const UniValue& timestamp = data[\"timestamp\"];"
      },
      {
        "sha": "94e61aa20ea79adacd1d4117578ae60291e08367",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 47,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -85,7 +85,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n+static void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -124,15 +124,15 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         entry.pushKV(item.first, item.second);\n }\n \n-std::string LabelFromValue(const UniValue& value)\n+static std::string LabelFromValue(const UniValue& value)\n {\n     std::string label = value.get_str();\n     if (label == \"*\")\n         throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, \"Invalid label name\");\n     return label;\n }\n \n-UniValue getnewaddress(const JSONRPCRequest& request)\n+static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -196,7 +196,7 @@ CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& la\n     return dest;\n }\n \n-UniValue getlabeladdress(const JSONRPCRequest& request)\n+static UniValue getlabeladdress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -254,7 +254,7 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n }\n \n \n-UniValue getrawchangeaddress(const JSONRPCRequest& request)\n+static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -302,7 +302,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n }\n \n \n-UniValue setlabel(const JSONRPCRequest& request)\n+static UniValue setlabel(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -356,7 +356,7 @@ UniValue setlabel(const JSONRPCRequest& request)\n }\n \n \n-UniValue getaccount(const JSONRPCRequest& request)\n+static UniValue getaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -399,7 +399,7 @@ UniValue getaccount(const JSONRPCRequest& request)\n }\n \n \n-UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n+static UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -485,7 +485,7 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n     return tx;\n }\n \n-UniValue sendtoaddress(const JSONRPCRequest& request)\n+static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -572,7 +572,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     return tx->GetHash().GetHex();\n }\n \n-UniValue listaddressgroupings(const JSONRPCRequest& request)\n+static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -629,7 +629,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n     return jsonGroupings;\n }\n \n-UniValue signmessage(const JSONRPCRequest& request)\n+static UniValue signmessage(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -690,7 +690,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n     return EncodeBase64(vchSig.data(), vchSig.size());\n }\n \n-UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n+static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -755,7 +755,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n }\n \n \n-UniValue getreceivedbylabel(const JSONRPCRequest& request)\n+static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -825,7 +825,7 @@ UniValue getreceivedbylabel(const JSONRPCRequest& request)\n }\n \n \n-UniValue getbalance(const JSONRPCRequest& request)\n+static UniValue getbalance(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -908,7 +908,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n     return ValueFromAmount(pwallet->GetBalance());\n }\n \n-UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n+static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -930,7 +930,7 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n }\n \n \n-UniValue movecmd(const JSONRPCRequest& request)\n+static UniValue movecmd(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -987,7 +987,7 @@ UniValue movecmd(const JSONRPCRequest& request)\n }\n \n \n-UniValue sendfrom(const JSONRPCRequest& request)\n+static UniValue sendfrom(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1060,7 +1060,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n }\n \n \n-UniValue sendmany(const JSONRPCRequest& request)\n+static UniValue sendmany(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1255,7 +1255,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return tx->GetHash().GetHex();\n }\n \n-UniValue addmultisigaddress(const JSONRPCRequest& request)\n+static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1390,7 +1390,7 @@ class Witnessifier : public boost::static_visitor<bool>\n     bool operator()(const T& dest) { return false; }\n };\n \n-UniValue addwitnessaddress(const JSONRPCRequest& request)\n+static UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1476,7 +1476,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label)\n+static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1622,7 +1622,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_l\n     return ret;\n }\n \n-UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n+static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1671,7 +1671,7 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     return ListReceived(pwallet, request.params, false);\n }\n \n-UniValue listreceivedbylabel(const JSONRPCRequest& request)\n+static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1739,7 +1739,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n {\n     CAmount nFee;\n     std::string strSentAccount;\n@@ -1819,7 +1819,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n     }\n }\n \n-void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccount, UniValue& ret)\n+static void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccount, UniValue& ret)\n {\n     bool fAllAccounts = (strAccount == std::string(\"*\"));\n \n@@ -2024,7 +2024,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue listaccounts(const JSONRPCRequest& request)\n+static UniValue listaccounts(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2117,7 +2117,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue listsinceblock(const JSONRPCRequest& request)\n+static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2256,7 +2256,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue gettransaction(const JSONRPCRequest& request)\n+static UniValue gettransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2350,7 +2350,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     return entry;\n }\n \n-UniValue abandontransaction(const JSONRPCRequest& request)\n+static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2394,7 +2394,7 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n }\n \n \n-UniValue backupwallet(const JSONRPCRequest& request)\n+static UniValue backupwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2427,7 +2427,7 @@ UniValue backupwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue keypoolrefill(const JSONRPCRequest& request)\n+static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2474,7 +2474,7 @@ static void LockWallet(CWallet* pWallet)\n     pWallet->Lock();\n }\n \n-UniValue walletpassphrase(const JSONRPCRequest& request)\n+static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2547,7 +2547,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n }\n \n \n-UniValue walletpassphrasechange(const JSONRPCRequest& request)\n+static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2596,7 +2596,7 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n }\n \n \n-UniValue walletlock(const JSONRPCRequest& request)\n+static UniValue walletlock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2634,7 +2634,7 @@ UniValue walletlock(const JSONRPCRequest& request)\n }\n \n \n-UniValue encryptwallet(const JSONRPCRequest& request)\n+static UniValue encryptwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2694,7 +2694,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n-UniValue lockunspent(const JSONRPCRequest& request)\n+static UniValue lockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2821,7 +2821,7 @@ UniValue lockunspent(const JSONRPCRequest& request)\n     return true;\n }\n \n-UniValue listlockunspent(const JSONRPCRequest& request)\n+static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2872,7 +2872,7 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue settxfee(const JSONRPCRequest& request)\n+static UniValue settxfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2901,7 +2901,7 @@ UniValue settxfee(const JSONRPCRequest& request)\n     return true;\n }\n \n-UniValue getwalletinfo(const JSONRPCRequest& request)\n+static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -2962,7 +2962,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n-UniValue listwallets(const JSONRPCRequest& request)\n+static UniValue listwallets(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n@@ -2994,7 +2994,7 @@ UniValue listwallets(const JSONRPCRequest& request)\n     return obj;\n }\n \n-UniValue resendwallettransactions(const JSONRPCRequest& request)\n+static UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -3029,7 +3029,7 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue listunspent(const JSONRPCRequest& request)\n+static UniValue listunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -3200,7 +3200,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n-UniValue fundrawtransaction(const JSONRPCRequest& request)\n+static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -3469,7 +3469,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n }\n \n-UniValue bumpfee(const JSONRPCRequest& request)\n+static UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n@@ -3848,7 +3848,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n \n-UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n {\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n@@ -3984,7 +3984,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -4027,7 +4027,7 @@ UniValue getaddressesbylabel(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue listlabels(const JSONRPCRequest& request)\n+static UniValue listlabels(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {"
      },
      {
        "sha": "4d1a6d48d0bd26c9c009e8df825debeeab55e19f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f34d06befa352acb343ad08337123d9474535f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c3f34d06befa352acb343ad08337123d9474535f",
        "patch": "@@ -246,7 +246,7 @@ class CWalletScanState {\n     }\n };\n \n-bool\n+static bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n              CWalletScanState &wss, std::string& strType, std::string& strErr)\n {"
      }
    ]
  }
]