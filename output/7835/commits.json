[
  {
    "sha": "e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGJhOWY2YjA0MDJjZjdhMmFkMGQ3NGY2MTdjNDM0YTI2YzZlMTI0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:33:08Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:33:08Z"
      },
      "message": "Version 2 transactions remain non-standard until CSV activates\n\nBefore activation, such transactions might not be mined, so don't\nallow into the mempool.",
      "tree": {
        "sha": "ae7956341a906af2433dc82efb5561c35e8257e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae7956341a906af2433dc82efb5561c35e8257e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5851915a006ace71493f54665322e41001fb3ac3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5851915a006ace71493f54665322e41001fb3ac3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5851915a006ace71493f54665322e41001fb3ac3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f5c7e11d6e8a39ad9050f5d3924c1917f489855a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
        "patch": "@@ -1025,6 +1025,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n+    // Don't relay version 2 transactions until CSV is active, and we can be\n+    // sure that such transactions will be mined (unless we're on\n+    // -testnet/-regtest).\n+    const CChainParams& chainparams = Params();\n+    if (fRequireStandard && tx.nVersion >= 2 && VersionBitsTipState(chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV) != THRESHOLD_ACTIVE) {\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n+    }\n+\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet."
      }
    ]
  },
  {
    "sha": "5cb1d8a2071d05beb9907a423178895fd8a5c359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2IxZDhhMjA3MWQwNWJlYjk5MDdhNDIzMTc4ODk1ZmQ4YTVjMzU5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:54:50Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:54:50Z"
      },
      "message": "Tests: move get_bip9_status to util.py",
      "tree": {
        "sha": "ed8f8c741be1cf7cab6a1b1a86626ab852f23a8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed8f8c741be1cf7cab6a1b1a86626ab852f23a8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cb1d8a2071d05beb9907a423178895fd8a5c359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb1d8a2071d05beb9907a423178895fd8a5c359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb1d8a2071d05beb9907a423178895fd8a5c359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb1d8a2071d05beb9907a423178895fd8a5c359/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ba9f6b0402cf7a2ad0d74f617c434a26c6e124"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "35c831cb8b71ddf226631166e9bfa63b830852e2",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb1d8a2071d05beb9907a423178895fd8a5c359/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb1d8a2071d05beb9907a423178895fd8a5c359/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=5cb1d8a2071d05beb9907a423178895fd8a5c359",
        "patch": "@@ -149,13 +149,6 @@ def create_test_block(self, txs, version = 536870912):\n         block.solve()\n         return block\n \n-    def get_bip9_status(self, key):\n-        info = self.nodes[0].getblockchaininfo()\n-        for row in info['bip9_softforks']:\n-            if row['id'] == key:\n-                return row\n-        raise IndexError ('key:\"%s\" not found' % key)\n-\n     def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n         txs = []\n         assert(len(bip68inputs) >= 16)\n@@ -223,11 +216,11 @@ def get_tests(self):\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n-        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n         test_blocks = self.generate_blocks(61, 4)\n         yield TestInstance(test_blocks, sync_every_block=False) # 1\n         # Advanced from DEFINED to STARTED, height = 143\n-        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n         # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n         # using a variety of bits to simulate multiple parallel softforks\n@@ -237,7 +230,7 @@ def get_tests(self):\n         test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n         yield TestInstance(test_blocks, sync_every_block=False) # 2\n         # Failed to advance past STARTED, height = 287\n-        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n         # 108 out of 144 signal bit 0 to achieve lock-in\n         # using a variety of bits to simulate multiple parallel softforks\n@@ -247,7 +240,7 @@ def get_tests(self):\n         test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n         yield TestInstance(test_blocks, sync_every_block=False) # 3\n         # Advanced from STARTED to LOCKED_IN, height = 431\n-        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # 140 more version 4 blocks\n         test_blocks = self.generate_blocks(140, 4)\n@@ -291,7 +284,7 @@ def get_tests(self):\n         test_blocks = self.generate_blocks(2, 4)\n         yield TestInstance(test_blocks, sync_every_block=False) # 5\n         # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n-        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n@@ -368,7 +361,7 @@ def get_tests(self):\n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n         yield TestInstance(test_blocks, sync_every_block=False) # 8\n-        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n \n \n         #################################"
      },
      {
        "sha": "d9fe0f75f2608d6ff8977596480f504f0e68f0db",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb1d8a2071d05beb9907a423178895fd8a5c359/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb1d8a2071d05beb9907a423178895fd8a5c359/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=5cb1d8a2071d05beb9907a423178895fd8a5c359",
        "patch": "@@ -545,3 +545,10 @@ def create_lots_of_big_transactions(node, txouts, utxos, fee):\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids\n+\n+def get_bip9_status(node, key):\n+    info = node.getblockchaininfo()\n+    for row in info['bip9_softforks']:\n+        if row['id'] == key:\n+            return row\n+    raise IndexError ('key:\"%s\" not found' % key)"
      }
    ]
  },
  {
    "sha": "da5fdbb3a2778523cce70d635c1aa2b31a693bc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTVmZGJiM2EyNzc4NTIzY2NlNzBkNjM1YzFhYTJiMzFhNjkzYmM2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:59:50Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-07T18:59:50Z"
      },
      "message": "Test relay of version 2 transactions",
      "tree": {
        "sha": "bdd5f3f93303e22079f03ee9cc506d4922850f77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdd5f3f93303e22079f03ee9cc506d4922850f77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da5fdbb3a2778523cce70d635c1aa2b31a693bc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da5fdbb3a2778523cce70d635c1aa2b31a693bc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da5fdbb3a2778523cce70d635c1aa2b31a693bc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da5fdbb3a2778523cce70d635c1aa2b31a693bc6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cb1d8a2071d05beb9907a423178895fd8a5c359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb1d8a2071d05beb9907a423178895fd8a5c359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb1d8a2071d05beb9907a423178895fd8a5c359"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 42,
      "deletions": 4
    },
    "files": [
      {
        "sha": "33e05dfc51a095a80f1760eb3cf23833834a3dc4",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 42,
        "deletions": 4,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da5fdbb3a2778523cce70d635c1aa2b31a693bc6/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da5fdbb3a2778523cce70d635c1aa2b31a693bc6/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=da5fdbb3a2778523cce70d635c1aa2b31a693bc6",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test BIP68 implementation (mempool only)\n+# Test BIP68 implementation\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -26,8 +26,10 @@ class BIP68Test(BitcoinTestFramework):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\", \"-acceptnonstdtxn=0\"]))\n         self.is_network_split = False\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+        connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):\n         # Generate some coins\n@@ -42,10 +44,18 @@ def run_test(self):\n         print \"Running test sequence-lock-unconfirmed-inputs\"\n         self.test_sequence_lock_unconfirmed_inputs()\n \n-        # This test needs to change when BIP68 becomes consensus\n-        print \"Running test BIP68 not consensus\"\n+        print \"Running test BIP68 not consensus before versionbits activation\"\n         self.test_bip68_not_consensus()\n \n+        print \"Verifying nVersion=2 transactions aren't standard\"\n+        self.test_version2_relay(before_activation=True)\n+\n+        print \"Activating BIP68 (and 112/113)\"\n+        self.activateCSV()\n+\n+        print \"Verifying nVersion=2 transactions are now standard\"\n+        self.test_version2_relay(before_activation=False)\n+\n         print \"Passed\\n\"\n \n     # Test that BIP68 is not in effect if tx version is 1, or if\n@@ -333,8 +343,12 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n         self.nodes[0].generate(10)\n \n-    # Make sure that BIP68 isn't being used to validate blocks.\n+    # Make sure that BIP68 isn't being used to validate blocks, prior to\n+    # versionbits activation.  If more blocks are mined prior to this test\n+    # being run, then it's possible the test has activated the soft fork, and\n+    # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n+        assert(get_bip9_status(self.nodes[0], 'csv')['status'] != 'active')\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -381,6 +395,30 @@ def test_bip68_not_consensus(self):\n         self.nodes[0].submitblock(ToHex(block))\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n+    def activateCSV(self):\n+        # activation should happen at block height 432 (3 periods)\n+        min_activation_height = 432\n+        height = self.nodes[0].getblockcount()\n+        assert(height < 432)\n+        self.nodes[0].generate(432-height)\n+        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        sync_blocks(self.nodes)\n+\n+    # Use self.nodes[1] to test standardness relay policy\n+    def test_version2_relay(self, before_activation):\n+        inputs = [ ]\n+        outputs = { self.nodes[1].getnewaddress() : 1.0 }\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n+        tx = FromHex(CTransaction(), rawtxfund)\n+        tx.nVersion = 2\n+        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        try:\n+            tx_id = self.nodes[1].sendrawtransaction(tx_signed)\n+            assert(before_activation == False)\n+        except:\n+            assert(before_activation)\n+\n \n if __name__ == '__main__':\n     BIP68Test().main()"
      }
    ]
  }
]