[
  {
    "sha": "1e72b68ab330c72644981508c8a1b3fa670d086f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTcyYjY4YWIzMzBjNzI2NDQ5ODE1MDhjOGExYjNmYTY3MGQwODZm",
    "commit": {
      "author": {
        "name": "Riccardo Masutti",
        "email": "46527252+RiccardoMasutti@users.noreply.github.com",
        "date": "2020-08-01T13:10:26Z"
      },
      "committer": {
        "name": "Riccardo Masutti",
        "email": "riccardo@android-2b910106bc1757ea",
        "date": "2020-08-07T12:55:02Z"
      },
      "message": "Replace `hidden service` with `onion service`\n\nFor a couple of years, Tor documentation has made\nthe term hidden service obsolete, in favor of onion\nservice.\n\nThis PR updates all the references in the code base.",
      "tree": {
        "sha": "cc16b2bff6367030f033a7c9549eb4cbeb0f0906",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc16b2bff6367030f033a7c9549eb4cbeb0f0906"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e72b68ab330c72644981508c8a1b3fa670d086f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e72b68ab330c72644981508c8a1b3fa670d086f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e72b68ab330c72644981508c8a1b3fa670d086f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e72b68ab330c72644981508c8a1b3fa670d086f/comments",
    "author": {
      "login": "RiccardoMasutti",
      "id": 46527252,
      "node_id": "MDQ6VXNlcjQ2NTI3MjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/46527252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RiccardoMasutti",
      "html_url": "https://github.com/RiccardoMasutti",
      "followers_url": "https://api.github.com/users/RiccardoMasutti/followers",
      "following_url": "https://api.github.com/users/RiccardoMasutti/following{/other_user}",
      "gists_url": "https://api.github.com/users/RiccardoMasutti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RiccardoMasutti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RiccardoMasutti/subscriptions",
      "organizations_url": "https://api.github.com/users/RiccardoMasutti/orgs",
      "repos_url": "https://api.github.com/users/RiccardoMasutti/repos",
      "events_url": "https://api.github.com/users/RiccardoMasutti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RiccardoMasutti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "f7c73b03d975a72f609ded2bbe250c1c8a76a944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7c73b03d975a72f609ded2bbe250c1c8a76a944",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7c73b03d975a72f609ded2bbe250c1c8a76a944"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2e114743822562f45432d1f9f634eec70e49022a",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -158,7 +158,7 @@ the pull request affects. Valid areas as:\n Examples:\n \n     consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n-    net: Automatically create hidden service, listen on Tor\n+    net: Automatically create onion service, listen on Tor\n     qt: Add feed bump button\n     log: Fix typo in log message\n "
      },
      {
        "sha": "40d8e330e28cd74e377bd52e16de96cf44f5a76e",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -60,7 +60,7 @@ RPC interface will be abused.\n   are sent as clear text that can be read by anyone on your network\n   path.  Additionally, the RPC interface has not been hardened to\n   withstand arbitrary Internet traffic, so changing the above settings\n-  to expose it to the Internet (even using something like a Tor hidden\n+  to expose it to the Internet (even using something like a Tor onion\n   service) could expose you to unconsidered vulnerabilities.  See\n   `bitcoind -help` for more information about these settings and other\n   settings described in this document."
      },
      {
        "sha": "52e094a60bbf981dec650916d3c589809135b6f6",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -56,7 +56,7 @@ Subdirectory       | File(s)               | Description\n `./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees and priorities required for confirmation\n `./`               | `guisettings.ini.bak` | Backup of former [GUI settings](#gui-settings) after `-resetguisettings` option is used\n `./`               | `mempool.dat`         | Dump of the mempool's transactions\n-`./`               | `onion_private_key`   | Cached Tor hidden service private key for `-listenonion` option\n+`./`               | `onion_private_key`   | Cached Tor onion service private key for `-listenonion` option\n `./`               | `peers.dat`           | Peer IP address database (custom format)\n `./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option\n `./`               | `.cookie`             | Session RPC authentication cookie; if used, created at start and deleted on shutdown; can be specified by `-rpccookiefile` option"
      },
      {
        "sha": "17807856e5fd1929a3f3897384333e99036ec5c9",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -1,6 +1,6 @@\n # TOR SUPPORT IN BITCOIN\n \n-It is possible to run Bitcoin Core as a Tor hidden service, and connect to such services.\n+It is possible to run Bitcoin Core as a Tor onion service, and connect to such services.\n \n The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n configure Tor.\n@@ -14,12 +14,12 @@ outgoing connections, but more is possible.\n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n \t                server will be used to try to reach .onion addresses as well.\n \n-\t-onion=ip:port  Set the proxy server to use for Tor hidden services. You do not\n+\t-onion=ip:port  Set the proxy server to use for Tor onion services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n-\t                to explicitly disable access to hidden services.\n+\t                to explicitly disable access to onion services.\n \n \t-listen         When using -proxy, listening is disabled by default. If you want\n-\t                to run a hidden service (see next section), you'll need to enable\n+\t                to run an onion service (see next section), you'll need to enable\n \t                it explicitly.\n \n \t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n@@ -94,11 +94,11 @@ for normal IPv4/IPv6 communication, use:\n ## 3. Automatically listen on Tor\n \n Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n-API, to create and destroy 'ephemeral' hidden services programmatically.\n+API, to create and destroy 'ephemeral' onion services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n This means that if Tor is running (and proper authentication has been configured),\n-Bitcoin Core automatically creates a hidden service to listen on. This will positively\n+Bitcoin Core automatically creates an onion service to listen on. This will positively\n affect the number of available .onion nodes.\n \n This new feature is enabled by default if Bitcoin Core is listening (`-listen`), and\n@@ -110,7 +110,7 @@ Connecting to Tor's control socket API requires one of two authentication method\n configured. It also requires the control socket to be enabled, e.g. put `ControlPort 9051`\n in `torrc` config file. For cookie authentication the user running bitcoind must have read\n access to the `CookieAuthFile` specified in Tor configuration. In some cases this is\n-preconfigured and the creation of a hidden service is automatic. If permission problems\n+preconfigured and the creation of an onion service is automatic. If permission problems\n are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\n the user running bitcoind to the same group and setting permissions appropriately. On\n Debian-based systems the user running bitcoind can be added to the debian-tor group,\n@@ -127,8 +127,8 @@ in the tor configuration file. The hashed password can be obtained with the comm\n \n ## 4. Privacy recommendations\n \n-- Do not add anything but Bitcoin Core ports to the hidden service created in section 2.\n-  If you run a web service too, create a new hidden service for that.\n+- Do not add anything but Bitcoin Core ports to the onion service created in section 2.\n+  If you run a web service too, create a new onion service for that.\n   Otherwise it is trivial to link them, which may reduce privacy. Hidden\n   services created automatically (as in section 3) always have only one port\n   open."
      },
      {
        "sha": "08944b79a5afe16e7ab7ad9e154f2b82b8ac748a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -442,13 +442,13 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "0016fb9739b9627e78bb53d2d8b1bf7b02c174f8",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -459,10 +459,10 @@\n        <item>\n         <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n          <property name=\"toolTip\">\n-          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</string>\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor onion services.</string>\n          </property>\n          <property name=\"text\">\n-          <string>Use separate SOCKS&amp;5 proxy to reach peers via Tor hidden services:</string>\n+          <string>Use separate SOCKS&amp;5 proxy to reach peers via Tor onion services:</string>\n          </property>\n         </widget>\n        </item>"
      },
      {
        "sha": "5d56d1ff8903168be246aeafc237c020955bb84e",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e72b68ab330c72644981508c8a1b3fa670d086f/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e72b68ab330c72644981508c8a1b3fa670d086f/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=1e72b68ab330c72644981508c8a1b3fa670d086f",
        "patch": "@@ -405,7 +405,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n /****** Bitcoin specific TorController implementation ********/\n \n /** Controller that connects to Tor control socket, authenticate, then create\n- * and maintain an ephemeral hidden service.\n+ * and maintain an ephemeral onion service.\n  */\n class TorController\n {\n@@ -534,7 +534,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         // Finally - now create the service\n         if (private_key.empty()) // No private key, generate one\n             private_key = \"NEW:RSA1024\"; // Explicitly request RSA1024 - see issue #9214\n-        // Request hidden service, redirect port.\n+        // Request onion service, redirect port.\n         // Note that the 'virtual' port is always the default port to avoid decloaking nodes using other ports.\n         _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, Params().GetDefaultPort(), GetListenPort()),\n             std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));"
      }
    ]
  }
]