[
  {
    "sha": "c39a6b9ec8ea6599639435378e0078218a4155fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzlhNmI5ZWM4ZWE2NTk5NjM5NDM1Mzc4ZTAwNzgyMThhNDE1NWZj",
    "commit": {
      "author": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-17T16:23:44Z"
      },
      "committer": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-20T18:28:45Z"
      },
      "message": "Tests: Refactor to create witness script creation function\n\n* Refactor blocktools.py so that witness script creation is its own function\n* Changed p2p-segwit to use new function",
      "tree": {
        "sha": "f80fa175ff24c825a52e5485ab56fbaf51334375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f80fa175ff24c825a52e5485ab56fbaf51334375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c39a6b9ec8ea6599639435378e0078218a4155fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39a6b9ec8ea6599639435378e0078218a4155fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c39a6b9ec8ea6599639435378e0078218a4155fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39a6b9ec8ea6599639435378e0078218a4155fc/comments",
    "author": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/987a6c09562e1e1e9d6623b999ae9de268490e4b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "3dd78c8b7d2460557963a0ab3cbc4e306a00e7e4",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=c39a6b9ec8ea6599639435378e0078218a4155fc",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER\n from test_framework.key import CECKey, CPubKey\n import time\n import random\n@@ -1721,15 +1721,10 @@ def test_getblocktemplate_before_lockin(self):\n                 assert('default_witness_commitment' in gbt_results)\n                 witness_commitment = gbt_results['default_witness_commitment']\n \n-                # TODO: this duplicates some code from blocktools.py, would be nice\n-                # to refactor.\n                 # Check that default_witness_commitment is present.\n-                block = CBlock()\n-                witness_root = block.get_merkle_root([ser_uint256(0), ser_uint256(txid)])\n-                check_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(0)))\n-                from test_framework.blocktools import WITNESS_COMMITMENT_HEADER\n-                output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(check_commitment)\n-                script = CScript([OP_RETURN, output_data])\n+                witness_root = CBlock.get_merkle_root([ser_uint256(0),\n+                                                       ser_uint256(txid)])\n+                script = get_witness_script(witness_root, 0)\n                 assert_equal(witness_commitment, bytes_to_hex_str(script))\n \n         # undo mocktime"
      },
      {
        "sha": "5dcf516dc6e983f0f7992fc56fd1c0d5eadc57fd",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=c39a6b9ec8ea6599639435378e0078218a4155fc",
        "patch": "@@ -25,21 +25,26 @@ def create_block(hashprev, coinbase, nTime=None):\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n+\n+def get_witness_script(witness_root, witness_nonce):\n+    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n+    output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n+    return CScript([OP_RETURN, output_data])\n+\n+\n # According to BIP141, blocks with witness rules active must commit to the\n # hash of all in-block transactions including witness.\n def add_witness_commitment(block, nonce=0):\n     # First calculate the merkle root of the block's\n     # transactions, with witnesses.\n     witness_nonce = nonce\n     witness_root = block.calc_witness_merkle_root()\n-    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n     # witness_nonce should go to coinbase witness.\n     block.vtx[0].wit.vtxinwit = [CTxInWitness()]\n     block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(witness_nonce)]\n \n     # witness commitment is the last OP_RETURN output in coinbase\n-    output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n-    block.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, output_data])))\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witness_root, witness_nonce)))\n     block.vtx[0].rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.rehash()"
      },
      {
        "sha": "2383cca58eeb44c128c84b24f462e72afc124fc6",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c39a6b9ec8ea6599639435378e0078218a4155fc/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=c39a6b9ec8ea6599639435378e0078218a4155fc",
        "patch": "@@ -610,7 +610,8 @@ def serialize(self, with_witness=False):\n         return r\n \n     # Calculate the merkle root given a vector of transaction hashes\n-    def get_merkle_root(self, hashes):\n+    @classmethod\n+    def get_merkle_root(cls, hashes):\n         while len(hashes) > 1:\n             newhashes = []\n             for i in range(0, len(hashes), 2):"
      }
    ]
  }
]