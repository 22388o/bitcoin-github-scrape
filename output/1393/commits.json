[
  {
    "sha": "9c7722b7c5ce49130bd978b932f73b629ce5cebe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzc3MjJiN2M1Y2U0OTEzMGJkOTc4YjkzMmY3M2I2MjljZTVjZWJl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-27T23:06:09Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-23T18:18:20Z"
      },
      "message": "Store a fixed order of transactions (and accounting) in the wallet\n\nFor backward compatibility, new accounting data is stored after a \\0 in the comment string.\nThis way, old versions and third-party software should load and store them, but all actual use (listtransactions, for example) ignores it.",
      "tree": {
        "sha": "d1020863fbc36871042171d73433f0f055f27f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1020863fbc36871042171d73433f0f055f27f3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c7722b7c5ce49130bd978b932f73b629ce5cebe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c7722b7c5ce49130bd978b932f73b629ce5cebe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c7722b7c5ce49130bd978b932f73b629ce5cebe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c7722b7c5ce49130bd978b932f73b629ce5cebe/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf78183fadac6e9fccb51c7355cfa34641fc06d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf78183fadac6e9fccb51c7355cfa34641fc06d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf78183fadac6e9fccb51c7355cfa34641fc06d5"
      }
    ],
    "stats": {
      "total": 322,
      "additions": 315,
      "deletions": 7
    },
    "files": [
      {
        "sha": "005a7766f1cbb78c962b0cff725ff77fa775c940",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -542,6 +542,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Debit\n     CAccountingEntry debit;\n+    debit.nOrderPos = pwalletMain->nOrderPosNext++;\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -551,6 +552,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n+    credit.nOrderPos = pwalletMain->nOrderPosNext++;\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;\n@@ -984,27 +986,27 @@ Value listtransactions(const Array& params, bool fHelp)\n     Array ret;\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n \n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n     typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef multimap<int64, TxPair > TxItems;\n-    TxItems txByTime;\n+    TxItems txOrdered;\n \n     // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n     // would make this much faster for applications that do this a lot.\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(make_pair(wtx->GetTxTime(), TxPair(wtx, (CAccountingEntry*)0)));\n+        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n     }\n     list<CAccountingEntry> acentries;\n     walletdb.ListAccountCreditDebit(strAccount, acentries);\n     BOOST_FOREACH(CAccountingEntry& entry, acentries)\n     {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n     }\n \n     // iterate backwards until we have nCount items to return:\n-    for (TxItems::reverse_iterator it = txByTime.rbegin(); it != txByTime.rend(); ++it)\n+    for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "c474fd65c113202cceebdb767ac28a4344f9f6d9",
        "filename": "src/test/accounting_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -0,0 +1,123 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include <boost/foreach.hpp>\n+\n+#include \"init.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+\n+BOOST_AUTO_TEST_SUITE(accounting_tests)\n+\n+static void\n+GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n+{\n+    std::list<CAccountingEntry> aes;\n+\n+    results.clear();\n+    BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n+    walletdb.ListAccountCreditDebit(\"\", aes);\n+    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    {\n+        results[ae.nOrderPos] = ae;\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n+{\n+    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    std::vector<CWalletTx*> vpwtx;\n+    CWalletTx wtx;\n+    CAccountingEntry ae;\n+    std::map<int64, CAccountingEntry> results;\n+\n+    ae.strAccount = \"\";\n+    ae.nCreditDebit = 1;\n+    ae.nTime = 1333333333;\n+    ae.strOtherAccount = \"b\";\n+    ae.strComment = \"\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    wtx.mapValue[\"comment\"] = \"z\";\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n+    vpwtx[0]->nOrderPos = -1;\n+\n+    ae.nTime = 1333333336;\n+    ae.strOtherAccount = \"c\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(2 == results.size());\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(results[0].strComment.empty());\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[2].strOtherAccount == \"c\");\n+\n+\n+    ae.nTime = 1333333330;\n+    ae.strOtherAccount = \"d\";\n+    ae.nOrderPos = pwalletMain->nOrderPosNext++;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[3].nTime == 1333333330);\n+    BOOST_CHECK(results[3].strComment.empty());\n+\n+\n+    wtx.mapValue[\"comment\"] = \"y\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n+\n+    wtx.mapValue[\"comment\"] = \"x\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n+    vpwtx[2]->nOrderPos = -1;\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(5 == vpwtx[1]->nOrderPos);\n+\n+\n+    ae.nTime = 1333333334;\n+    ae.strOtherAccount = \"e\";\n+    ae.nOrderPos = -1;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 4);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[3].strComment.empty());\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(results[5].nTime == 1333333334);\n+    BOOST_CHECK(6 == vpwtx[1]->nOrderPos);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3d380c827f124c555b8e3614b05a9f956d9cb892",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -336,7 +336,10 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         wtx.BindWallet(this);\n         bool fInsertedNew = ret.second;\n         if (fInsertedNew)\n+        {\n             wtx.nTimeReceived = GetAdjustedTime();\n+            wtx.nOrderPos = nOrderPosNext++;\n+        }\n \n         bool fUpdated = false;\n         if (!fInsertedNew)"
      },
      {
        "sha": "b32face5bfa92211dc1372eaf03ec77120691eee",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 82,
        "deletions": 1,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -5,11 +5,17 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n class CWalletTx;\n class CReserveKey;\n@@ -103,6 +109,7 @@ class CWallet : public CCryptoKeyStore\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, std::string> mapAddressBook;\n@@ -304,6 +311,32 @@ class CReserveKey\n };\n \n \n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static\n+void\n+ReadOrderPos(int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static\n+void\n+WriteOrderPos(const int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+\n /** A transaction with a bunch of additional info that only the owner cares about. \n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -314,13 +347,14 @@ class CWalletTx : public CMerkleTx\n \n public:\n     std::vector<CMerkleTx> vtxPrev;\n-    std::map<std::string, std::string> mapValue;\n+    mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n+    int64 nOrderPos;  // position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -371,6 +405,7 @@ class CWalletTx : public CMerkleTx\n         nCreditCached = 0;\n         nAvailableCreditCached = 0;\n         nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -392,6 +427,8 @@ class CWalletTx : public CMerkleTx\n                     fSpent = true;\n             }\n             pthis->mapValue[\"spent\"] = str;\n+\n+            WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -414,9 +451,13 @@ class CWalletTx : public CMerkleTx\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n         }\n \n+        if (fRead)\n+            ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n+        pthis->mapValue.erase(\"n\");\n     )\n \n     // marks certain txout's as spent\n@@ -705,6 +746,9 @@ class CAccountingEntry\n     int64 nTime;\n     std::string strOtherAccount;\n     std::string strComment;\n+    mapValue_t mapValue;\n+    int64 nOrderPos;  // position in ordered transaction list\n+    uint64 nEntryNo;\n \n     CAccountingEntry()\n     {\n@@ -718,18 +762,55 @@ class CAccountingEntry\n         strAccount.clear();\n         strOtherAccount.clear();\n         strComment.clear();\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n     (\n+        CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n         READWRITE(nTime);\n         READWRITE(strOtherAccount);\n+\n+        if (!fRead)\n+        {\n+            WriteOrderPos(nOrderPos, me.mapValue);\n+\n+            if (!(mapValue.empty() && _ssExtra.empty()))\n+            {\n+                CDataStream ss(nType, nVersion);\n+                ss.insert(ss.begin(), '\\0');\n+                ss << mapValue;\n+                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+                me.strComment.append(ss.str());\n+            }\n+        }\n+\n         READWRITE(strComment);\n+\n+        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n+        if (fRead)\n+        {\n+            me.mapValue.clear();\n+            if (std::string::npos != nSepPos)\n+            {\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                ss >> me.mapValue;\n+                me._ssExtra = std::vector<char>(ss.begin(), ss.end());\n+            }\n+            ReadOrderPos(me.nOrderPos, me.mapValue);\n+        }\n+        if (std::string::npos != nSepPos)\n+            me.strComment.erase(nSepPos);\n+\n+        me.mapValue.erase(\"n\");\n     )\n+\n+private:\n+    std::vector<char> _ssExtra;\n };\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);"
      },
      {
        "sha": "164b68e11f674bbf6843c71888333266646a1d38",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 1,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -42,9 +42,14 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n     return Write(make_pair(string(\"acc\"), strAccount), account);\n }\n \n+bool CWalletDB::WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry)\n+{\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+}\n+\n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+    return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n@@ -95,19 +100,94 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n             break;\n \n         ssValue >> acentry;\n+        ssKey >> acentry.nEntryNo;\n         entries.push_back(acentry);\n     }\n \n     pcursor->close();\n }\n \n \n+int\n+CWalletDB::ReorderTransactions(CWallet* pwallet)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef multimap<int64, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    int64& nOrderPosNext = pwallet->nOrderPosNext;\n+    nOrderPosNext = 0;\n+    std::vector<int64> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pacentry)\n+                // Have to write accounting regardless, since we don't keep it in memory\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64 nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!WriteTx(pwtx->GetHash(), *pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n int CWalletDB::LoadWallet(CWallet* pwallet)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     int nFileVersion = 0;\n     vector<uint256> vWalletUpgrade;\n     bool fIsEncrypted = false;\n+    bool fAnyUnordered = false;\n \n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     {\n@@ -183,6 +263,9 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                     vWalletUpgrade.push_back(hash);\n                 }\n \n+                if (wtx.nOrderPos == -1)\n+                    fAnyUnordered = true;\n+\n                 //// debug print\n                 //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n                 //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n@@ -199,6 +282,14 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssKey >> nNumber;\n                 if (nNumber > nAccountingEntryNumber)\n                     nAccountingEntryNumber = nNumber;\n+\n+                if (!fAnyUnordered)\n+                {\n+                    CAccountingEntry acentry;\n+                    ssValue >> acentry;\n+                    if (acentry.nOrderPos == -1)\n+                        fAnyUnordered = true;\n+                }\n             }\n             else if (strType == \"key\" || strType == \"wkey\")\n             {\n@@ -318,6 +409,10 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     if (nFileVersion < CLIENT_VERSION) // Update\n         WriteVersion(CLIENT_VERSION);\n \n+    if (fAnyUnordered)\n+        return ReorderTransactions(pwallet);\n+\n+    // If you add anything else here... be sure to do it if ReorderTransactions returns DB_LOAD_OK too!\n     return DB_LOAD_OK;\n }\n "
      },
      {
        "sha": "187be65a978361d3334de9e6241ef0ac7625ef20",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c7722b7c5ce49130bd978b932f73b629ce5cebe/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "patch": "@@ -170,10 +170,14 @@ class CWalletDB : public CDB\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+private:\n+    bool WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry);\n+public:\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     int64 GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n+    int ReorderTransactions(CWallet*);\n     int LoadWallet(CWallet* pwallet);\n };\n "
      }
    ]
  },
  {
    "sha": "bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGJmZDIzMjlhOTJhYjNmYTdhZDUxZTUwYTlmYjA0MTFlYzY0ZGFl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-28T16:56:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-23T18:30:30Z"
      },
      "message": "JSON-RPC: Add \"blocktime\" and (for wallet transactions) \"timereceived\" to transaction Object outputs",
      "tree": {
        "sha": "5c154348f4e3f9bec7aa6a103c154f5ab71cdba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c154348f4e3f9bec7aa6a103c154f5ab71cdba1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c7722b7c5ce49130bd978b932f73b629ce5cebe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c7722b7c5ce49130bd978b932f73b629ce5cebe"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fefefc7d624cb0ca2b88aa287df4be47e0b831ef",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
        "patch": "@@ -93,6 +93,7 @@ TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n             {\n                 entry.push_back(Pair(\"confirmations\", 1 + nBestHeight - pindex->nHeight));\n                 entry.push_back(Pair(\"time\", (boost::int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"blocktime\", (boost::int64_t)pindex->nTime));\n             }\n             else\n                 entry.push_back(Pair(\"confirmations\", 0));"
      },
      {
        "sha": "d75e43d4f9e47ff1eef3a682869e311bfdc31447",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
        "patch": "@@ -38,9 +38,11 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n+        entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n+    entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }"
      }
    ]
  },
  {
    "sha": "c3f95ef13f48d21db53992984976eac93e7a08fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2Y5NWVmMTNmNDhkMjFkYjUzOTkyOTg0OTc2ZWFjOTNlN2EwOGZj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-28T18:45:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-23T18:38:22Z"
      },
      "message": "Choose reasonable \"smart\" times to display for transactions\n\nLogic:\n- If sending a transaction, assign its timestamp to the current time.\n- If receiving a transaction outside a block, assign its timestamp to the current time.\n- If receiving a block with a future timestamp, assign all its (not already known) transactions' timestamps to the current time.\n- If receiving a block with a past timestamp, before the most recent known transaction (that we care about), assign all its (not already known) transactions' timestamps to the same timestamp as that most-recent-known transaction.\n- If receiving a block with a past timestamp, but after the most recent known transaction, assign all its (not already known) transactions' timestamps to the block time.",
      "tree": {
        "sha": "0caa89a1b21692c7e9a1dc03404280455186773f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0caa89a1b21692c7e9a1dc03404280455186773f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3f95ef13f48d21db53992984976eac93e7a08fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f95ef13f48d21db53992984976eac93e7a08fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3f95ef13f48d21db53992984976eac93e7a08fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f95ef13f48d21db53992984976eac93e7a08fc/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdbfd2329a92ab3fa7ad51e50a9fb0411ec64dae"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 88,
      "deletions": 23
    },
    "files": [
      {
        "sha": "eacb5b3b1a6b83d7a5d3d74dfef96fd94403d6e8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f95ef13f48d21db53992984976eac93e7a08fc/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f95ef13f48d21db53992984976eac93e7a08fc/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=c3f95ef13f48d21db53992984976eac93e7a08fc",
        "patch": "@@ -986,29 +986,11 @@ Value listtransactions(const Array& params, bool fHelp)\n         throw JSONRPCError(-8, \"Negative from\");\n \n     Array ret;\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64, TxPair > TxItems;\n-    TxItems txOrdered;\n \n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    list<CAccountingEntry> acentries;\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n+    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(strAccount);\n \n     // iterate backwards until we have nCount items to return:\n-    for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "07a5047cef4b6028ab1542b4a575719443b99f4e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 1,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f95ef13f48d21db53992984976eac93e7a08fc/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f95ef13f48d21db53992984976eac93e7a08fc/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c3f95ef13f48d21db53992984976eac93e7a08fc",
        "patch": "@@ -291,6 +291,31 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     return true;\n }\n \n+CWallet::TxItems\n+CWallet::OrderedTxItems(std::string strAccount)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n+    TxItems txOrdered;\n+\n+    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n+    // would make this much faster for applications that do this a lot.\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(strAccount, acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    return txOrdered;\n+}\n+\n void CWallet::WalletUpdateSpent(const CTransaction &tx)\n {\n     // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n@@ -339,6 +364,51 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n             wtx.nOrderPos = nOrderPosNext++;\n+\n+            wtx.nTimeSmart = wtx.nTimeReceived;\n+            if (wtxIn.hashBlock != 0)\n+            {\n+                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                {\n+                    unsigned int latestNow = wtx.nTimeReceived;\n+                    unsigned int latestEntry = 0;\n+                    {\n+                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                        int64 latestTolerated = latestNow + 300;\n+                        TxItems txOrdered = OrderedTxItems();\n+                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        {\n+                            CWalletTx *const pwtx = (*it).second.first;\n+                            if (pwtx == &wtx)\n+                                continue;\n+                            CAccountingEntry *const pacentry = (*it).second.second;\n+                            int64 nSmartTime;\n+                            if (pwtx)\n+                            {\n+                                nSmartTime = pwtx->nTimeSmart;\n+                                if (!nSmartTime)\n+                                    nSmartTime = pwtx->nTimeReceived;\n+                            }\n+                            else\n+                                nSmartTime = pacentry->nTime;\n+                            if (nSmartTime <= latestTolerated)\n+                            {\n+                                latestEntry = nSmartTime;\n+                                if (nSmartTime > latestNow)\n+                                    latestNow = nSmartTime;\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    unsigned int& blocktime = mapBlockIndex[wtxIn.hashBlock]->nTime;\n+                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+                }\n+                else\n+                    printf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                           wtxIn.GetHash().ToString().substr(0,10).c_str(),\n+                           wtxIn.hashBlock.ToString().c_str());\n+            }\n         }\n \n         bool fUpdated = false;\n@@ -488,7 +558,8 @@ bool CWallet::IsChange(const CTxOut& txout) const\n \n int64 CWalletTx::GetTxTime() const\n {\n-    return nTimeReceived;\n+    int64 n = nTimeSmart;\n+    return n ? n : nTimeReceived;\n }\n \n int CWalletTx::GetRequestCount() const"
      },
      {
        "sha": "9103aa675e22e1d2bd50be6323017d5efd936a6c",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f95ef13f48d21db53992984976eac93e7a08fc/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f95ef13f48d21db53992984976eac93e7a08fc/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=c3f95ef13f48d21db53992984976eac93e7a08fc",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n+class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n@@ -143,6 +144,10 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64, TxPair > TxItems;\n+    TxItems OrderedTxItems(std::string strAccount = \"\");\n+\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n@@ -351,6 +356,7 @@ class CWalletTx : public CMerkleTx\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n+    unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n@@ -394,6 +400,7 @@ class CWalletTx : public CMerkleTx\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n         nTimeReceived = 0;\n+        nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n         vfSpent.clear();\n@@ -429,6 +436,9 @@ class CWalletTx : public CMerkleTx\n             pthis->mapValue[\"spent\"] = str;\n \n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n+            if (nTimeSmart)\n+                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -449,15 +459,17 @@ class CWalletTx : public CMerkleTx\n                     pthis->vfSpent.push_back(c != '0');\n             else\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n-        }\n \n-        if (fRead)\n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n+            pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n+        }\n+\n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n         pthis->mapValue.erase(\"n\");\n+        pthis->mapValue.erase(\"timesmart\");\n     )\n \n     // marks certain txout's as spent"
      }
    ]
  }
]