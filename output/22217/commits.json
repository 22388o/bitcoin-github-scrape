[
  {
    "sha": "49ee2a0ad88e0e656234b769d806987784ff1e28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWVlMmEwYWQ4OGUwZTY1NjIzNGI3NjlkODA2OTg3Nzg0ZmYxZTI4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-10T14:58:45Z"
      },
      "message": "Avoid wallet code writing node settings file\n\nChange wallet loading code to access settings through the Chain\ninterface instead of writing settings.json directly.",
      "tree": {
        "sha": "06c2db387a170d332bdb969980b4dee2293990d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06c2db387a170d332bdb969980b4dee2293990d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49ee2a0ad88e0e656234b769d806987784ff1e28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49ee2a0ad88e0e656234b769d806987784ff1e28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49ee2a0ad88e0e656234b769d806987784ff1e28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49ee2a0ad88e0e656234b769d806987784ff1e28/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1704bbf2263f16c720604cfab4ccb775315df690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1704bbf2263f16c720604cfab4ccb775315df690",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1704bbf2263f16c720604cfab4ccb775315df690"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "96c64a3cb129cfd3585694788d9a459000f88199",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49ee2a0ad88e0e656234b769d806987784ff1e28/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49ee2a0ad88e0e656234b769d806987784ff1e28/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=49ee2a0ad88e0e656234b769d806987784ff1e28",
        "patch": "@@ -262,11 +262,18 @@ class Chain\n     //! Current RPC serialization flags.\n     virtual int rpcSerializationFlags() = 0;\n \n+    //! Get settings value.\n+    virtual util::SettingsValue getSetting(const std::string& arg) = 0;\n+\n+    //! Get list of settings values.\n+    virtual std::vector<util::SettingsValue> getSettingsList(const std::string& arg) = 0;\n+\n     //! Return <datadir>/settings.json setting value.\n     virtual util::SettingsValue getRwSetting(const std::string& name) = 0;\n \n-    //! Write a setting to <datadir>/settings.json.\n-    virtual bool updateRwSetting(const std::string& name, const util::SettingsValue& value) = 0;\n+    //! Write a setting to <datadir>/settings.json. Optionally just update the\n+    //! setting in memory and do not write the file.\n+    virtual bool updateRwSetting(const std::string& name, const util::SettingsValue& value, bool write=true) = 0;\n \n     //! Synchronously send transactionAddedToMempool notifications about all\n     //! current mempool transactions to the specified handler and return after"
      },
      {
        "sha": "cc74eec57c0824cb2cab936a787888b246ab1821",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49ee2a0ad88e0e656234b769d806987784ff1e28/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49ee2a0ad88e0e656234b769d806987784ff1e28/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=49ee2a0ad88e0e656234b769d806987784ff1e28",
        "patch": "@@ -690,6 +690,14 @@ class ChainImpl : public Chain\n         RPCRunLater(name, std::move(fn), seconds);\n     }\n     int rpcSerializationFlags() override { return RPCSerializationFlags(); }\n+    util::SettingsValue getSetting(const std::string& name) override\n+    {\n+        return gArgs.GetSetting(name);\n+    }\n+    std::vector<util::SettingsValue> getSettingsList(const std::string& name) override\n+    {\n+        return gArgs.GetSettingsList(name);\n+    }\n     util::SettingsValue getRwSetting(const std::string& name) override\n     {\n         util::SettingsValue result;\n@@ -700,7 +708,7 @@ class ChainImpl : public Chain\n         });\n         return result;\n     }\n-    bool updateRwSetting(const std::string& name, const util::SettingsValue& value) override\n+    bool updateRwSetting(const std::string& name, const util::SettingsValue& value, bool write) override\n     {\n         gArgs.LockSettings([&](util::Settings& settings) {\n             if (value.isNull()) {\n@@ -709,7 +717,7 @@ class ChainImpl : public Chain\n                 settings.rw_settings[name] = value;\n             }\n         });\n-        return gArgs.WriteSettingsFile();\n+        return !write || gArgs.WriteSettingsFile();\n     }\n     void requestMempoolTransactions(Notifications& notifications) override\n     {"
      },
      {
        "sha": "55c16bafef029b3aa4ae543d09ae73e7718973f8",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49ee2a0ad88e0e656234b769d806987784ff1e28/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49ee2a0ad88e0e656234b769d806987784ff1e28/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=49ee2a0ad88e0e656234b769d806987784ff1e28",
        "patch": "@@ -207,6 +207,7 @@ class ArgsManager\n      */\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n+ public:\n     /**\n      * Get setting value.\n      *\n@@ -221,7 +222,6 @@ class ArgsManager\n      */\n     std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n \n-public:\n     ArgsManager();\n     ~ArgsManager();\n "
      },
      {
        "sha": "5b3fccd54b27b1a4580bfaa1473659b6e875daab",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49ee2a0ad88e0e656234b769d806987784ff1e28/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49ee2a0ad88e0e656234b769d806987784ff1e28/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=49ee2a0ad88e0e656234b769d806987784ff1e28",
        "patch": "@@ -50,18 +50,20 @@ bool VerifyWallets(interfaces::Chain& chain)\n         options.require_existing = true;\n         options.verify = false;\n         if (MakeWalletDatabase(\"\", options, status, error_string)) {\n-            gArgs.LockSettings([&](util::Settings& settings) {\n-                util::SettingsValue wallets(util::SettingsValue::VARR);\n-                wallets.push_back(\"\"); // Default wallet name is \"\"\n-                settings.rw_settings[\"wallet\"] = wallets;\n-            });\n+            util::SettingsValue wallets(util::SettingsValue::VARR);\n+            wallets.push_back(\"\"); // Default wallet name is \"\"\n+            // Pass write=false because no need to write file and probably\n+            // better not to. If unnamed wallet needs to be added next startup\n+            // and the setting is empty, this code will just run again.\n+            chain.updateRwSetting(\"wallet\", wallets, /* write= */ false);\n         }\n     }\n \n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n-    for (const auto& wallet_file : gArgs.GetArgs(\"-wallet\")) {\n+    for (const auto& wallet : chain.getSettingsList(\"wallet\")) {\n+        const auto& wallet_file = wallet.get_str();\n         const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), wallet_file);\n \n         if (!wallet_paths.insert(path).second) {\n@@ -91,7 +93,8 @@ bool LoadWallets(interfaces::Chain& chain)\n {\n     try {\n         std::set<fs::path> wallet_paths;\n-        for (const std::string& name : gArgs.GetArgs(\"-wallet\")) {\n+        for (const auto& wallet : chain.getSettingsList(\"wallet\")) {\n+            const auto& name = wallet.get_str();\n             if (!wallet_paths.insert(name).second) {\n                 continue;\n             }"
      }
    ]
  }
]