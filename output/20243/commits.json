[
  {
    "sha": "30a02e9d60af542003b333996e658f982ceb2d9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGEwMmU5ZDYwYWY1NDIwMDNiMzMzOTk2ZTY1OGY5ODJjZWIyZDlh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-20T20:03:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-09T16:40:08Z"
      },
      "message": "wallet: Properly support a wallet id\n\nAdds a unique id for each wallet that is saved in a new \"walletid\"\nrecord. For compatibility, wallets using BDB will use the BDB generated\nid. All other wallets will have a randomly generated id if an id does\nnot already exist.",
      "tree": {
        "sha": "e2712c27009333114a871f67513ea7c852a4b19e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2712c27009333114a871f67513ea7c852a4b19e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30a02e9d60af542003b333996e658f982ceb2d9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a02e9d60af542003b333996e658f982ceb2d9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30a02e9d60af542003b333996e658f982ceb2d9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a02e9d60af542003b333996e658f982ceb2d9a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79a3b59cc70622fbadc43ade5fce31fcf94d852d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79a3b59cc70622fbadc43ade5fce31fcf94d852d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79a3b59cc70622fbadc43ade5fce31fcf94d852d"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb4587b5c5c358bea64a77cba0b232bd5f823dcf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=30a02e9d60af542003b333996e658f982ceb2d9a",
        "patch": "@@ -4582,3 +4582,32 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return ret;\n }\n+\n+void CWallet::LoadWalletID(const uint160& id)\n+{\n+    assert(wallet_id.IsNull());\n+    wallet_id = id;\n+}\n+\n+const uint160& CWallet::GetWalletID() const\n+{\n+    assert(!wallet_id.IsNull());\n+    return wallet_id;\n+}\n+\n+void CWallet::EnsureWalletIDWithDB(WalletBatch& batch)\n+{\n+    if (!wallet_id.IsNull()) return;\n+\n+    // No ID, so add one\n+    auto bdb_db = dynamic_cast<BerkeleyDatabase*>(database.get());\n+    if (bdb_db) {\n+        // For BDB, use the BDB unique ID\n+        assert(wallet_id.size() == sizeof(bdb_db->env->m_fileids[bdb_db->strFile].value));\n+        memcpy(wallet_id.data(), bdb_db->env->m_fileids[bdb_db->strFile].value, wallet_id.size());\n+    } else {\n+        // For everything else, generate a random ID\n+        GetStrongRandBytes(wallet_id.data(), wallet_id.size());\n+    }\n+    batch.WriteWalletID(wallet_id);\n+}"
      },
      {
        "sha": "c5e06039b5d1875040f6903c6dcefbf9e8c320b6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=30a02e9d60af542003b333996e658f982ceb2d9a",
        "patch": "@@ -725,6 +725,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign);\n \n+    uint160 wallet_id;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1281,6 +1283,13 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal);\n+\n+    //! Set the wallet ID\n+    void LoadWalletID(const uint160& id);\n+    //! Get the wallet iD\n+    const uint160& GetWalletID() const;\n+    //! Ensure that a wallet ID already exists. If one does not, add it.\n+    void EnsureWalletIDWithDB(WalletBatch& batch);\n };\n \n /**"
      },
      {
        "sha": "5a134d2bffd5e01eb3cd6dcbb32edfcd0848b829",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=30a02e9d60af542003b333996e658f982ceb2d9a",
        "patch": "@@ -51,6 +51,7 @@ const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n+const std::string WALLETID{\"walletid\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -658,6 +659,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n             wss.fIsEncrypted = true;\n+        } else if (strType == DBKeys::WALLETID) {\n+            uint160 wallet_id;\n+            ssValue >> wallet_id;\n+            pwallet->LoadWalletID(wallet_id);\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -843,6 +848,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Make sure there is a wallet id\n+    pwallet->EnsureWalletIDWithDB(*this);\n+\n     return result;\n }\n \n@@ -983,6 +991,11 @@ bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n     return WriteIC(DBKeys::FLAGS, flags);\n }\n \n+bool WalletBatch::WriteWalletID(const uint160& id)\n+{\n+    return WriteIC(DBKeys::WALLETID, id);\n+}\n+\n bool WalletBatch::TxnBegin()\n {\n     return m_batch->TxnBegin();"
      },
      {
        "sha": "748413658a7e43e8fda7af3c0384fe40834e7bd2",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a02e9d60af542003b333996e658f982ceb2d9a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=30a02e9d60af542003b333996e658f982ceb2d9a",
        "patch": "@@ -78,6 +78,7 @@ extern const std::string VERSION;\n extern const std::string WALLETDESCRIPTOR;\n extern const std::string WALLETDESCRIPTORCKEY;\n extern const std::string WALLETDESCRIPTORKEY;\n+extern const std::string WALLETID;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys\n@@ -264,6 +265,8 @@ class WalletBatch\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    bool WriteWalletID(const uint160& id);\n+\n     bool WriteWalletFlags(const uint64_t flags);\n     //! Begin a new transaction\n     bool TxnBegin();"
      }
    ]
  },
  {
    "sha": "b7eb69c48d1f0411abc16dc3210d86a3d4039fd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2ViNjljNDhkMWYwNDExYWJjMTZkYzMyMTBkODZhM2Q0MDM5ZmQ3",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-10-26T11:56:21Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-09T19:10:10Z"
      },
      "message": "rpc, wallet: Expose wallet id in getwalletinfo RPC output",
      "tree": {
        "sha": "a994384fed79caccfe9f3ffa5b84de9d0c2298cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a994384fed79caccfe9f3ffa5b84de9d0c2298cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+plBIACgkQQQEIES5+\nqB+8pQ//bQ1EMRXTZVk7u4gB0ly7DZXFQa51YgcFYgYwhyQYCT0WYBGIbMt/r3Ry\n/bYWZI1MVzZZrTLLV77uqCNPVzY4rRukcUTytEOybSbS8qA1kIua5ex+GvImMwnO\nLEmdPYUSfSobqNArr5+Ut3AWQ+dldCkyU4tghqb47nyIAuOEpXJbo81jkVXmEPVN\nwlvkyaqLnLxcfKQduageqGJDGM+9FYz1iABo9WFyQshgRtwifSFqaIn2G+x3slRN\n1Znsn+EPzJme+M4PO3JBOLuwhn3F58Kxdw/F4TrnyNXMRKdzjhe+19IYix2EypV3\nwhGfHjQ9UOmTxbROu8gYIgfOqL4lOxFs4G7zZ6H26QfChTw6Hl9Yuw0+PGfcuJ/6\n7VwWYwM72jynIK33BteuyECadustJyaOrxf7z9NGjmVH312yp7Ea8+M7Oak9nHqB\nQxU/0wj+mlLgjUubU4sQK2VvQa08DAHWESyUwezoHdl82UtUjmgIXZJ+q87o1/Kx\nV3Lf1Hnfw9bRXV0qzXebGdCUZK9B9CIh8bZdIfgYxUVlLcR0ykkACup9enbjD13O\nSbnq/wtsq07QKwxZMb0WZtFNfnEjkUzgfH6/nIteQ+DFfNsSKYnamdzfKC3OXR7d\nw0Zpl8UpPyBN5PpbbIl2+v1HqmhGzvEl85uXnXv72ntefXNqdOQ=\n=54W1\n-----END PGP SIGNATURE-----",
        "payload": "tree a994384fed79caccfe9f3ffa5b84de9d0c2298cf\nparent 30a02e9d60af542003b333996e658f982ceb2d9a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1603713381 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1604949010 +0200\n\nrpc, wallet: Expose wallet id in getwalletinfo RPC output\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30a02e9d60af542003b333996e658f982ceb2d9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a02e9d60af542003b333996e658f982ceb2d9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30a02e9d60af542003b333996e658f982ceb2d9a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9952199806ac2c779b24d8a3347e58924a88c5a3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7eb69c48d1f0411abc16dc3210d86a3d4039fd7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b7eb69c48d1f0411abc16dc3210d86a3d4039fd7",
        "patch": "@@ -2423,6 +2423,7 @@ static RPCHelpMan getwalletinfo()\n                     {\n                         {\n                         {RPCResult::Type::STR, \"walletname\", \"the wallet name\"},\n+                        {RPCResult::Type::STR, \"wallet_id\", \"the wallet id\"},\n                         {RPCResult::Type::NUM, \"walletversion\", \"the wallet version\"},\n                         {RPCResult::Type::STR, \"format\", \"the database format (bdb or sqlite)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"balance\", \"DEPRECATED. Identical to getbalances().mine.trusted\"},\n@@ -2467,6 +2468,7 @@ static RPCHelpMan getwalletinfo()\n     const auto bal = pwallet->GetBalance();\n     int64_t kp_oldest = pwallet->GetOldestKeyPoolTime();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"wallet_id\", pwallet->GetWalletID().ToString());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n     obj.pushKV(\"format\", pwallet->GetDatabase().Format());\n     obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));"
      }
    ]
  }
]