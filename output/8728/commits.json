[
  {
    "sha": "141d02fe29da312885d695b6bbca8de9812a3751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDFkMDJmZTI5ZGEzMTI4ODVkNjk1YjZiYmNhOGRlOTgxMmEzNzUx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:50:17Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T17:06:14Z"
      },
      "message": "Make net debug more granular (move some into net2, block, tx)",
      "tree": {
        "sha": "c18a8ec7ece0e78c9be7342b1051ae801eb6f172",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c18a8ec7ece0e78c9be7342b1051ae801eb6f172"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/141d02fe29da312885d695b6bbca8de9812a3751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141d02fe29da312885d695b6bbca8de9812a3751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/141d02fe29da312885d695b6bbca8de9812a3751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141d02fe29da312885d695b6bbca8de9812a3751/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 36,
      "deletions": 31
    },
    "files": [
      {
        "sha": "6d4f76887a84538d326f743a9a57223fc0ccb33c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/141d02fe29da312885d695b6bbca8de9812a3751/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/141d02fe29da312885d695b6bbca8de9812a3751/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=141d02fe29da312885d695b6bbca8de9812a3751",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee, http, libevent, lock, mempool(,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "bc9bdcfe80dd7a8f236722d9c97aa34bb53e4170",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 30,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/141d02fe29da312885d695b6bbca8de9812a3751/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/141d02fe29da312885d695b6bbca8de9812a3751/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=141d02fe29da312885d695b6bbca8de9812a3751",
        "patch": "@@ -4805,7 +4805,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n                 if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n-                    LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+                    LogPrint(\"block\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n                     //disconnect node\n                     pfrom->fDisconnect = true;\n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5265,14 +5265,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n-                    LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n             else\n             {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n@@ -5303,10 +5303,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n \n         if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n@@ -5369,7 +5369,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (it->second->nHeight < chainActive.Height() - 15) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n             return true;\n         }\n \n@@ -5397,7 +5397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n-            LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5444,7 +5444,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n-            LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n+            LogPrint(\"tx\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5672,7 +5672,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"net\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n                         return true;\n                     }\n                 }\n@@ -5741,7 +5741,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5813,7 +5813,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n-            LogPrint(\"net\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            LogPrint(\"block\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n@@ -5847,7 +5847,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(\"net\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n+            LogPrint(\"block\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n         }\n         nodestate->nUnconnectingHeaders = 0;\n \n@@ -5858,7 +5858,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n-            LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n+            LogPrint(\"block\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n         }\n \n@@ -5883,7 +5883,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // the main chain -- this shouldn't really happen.  Bail out on the\n             // direct fetch and rely on parallel download instead.\n             if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(\"net\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                LogPrint(\"block\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n@@ -5897,11 +5897,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n+                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n                 }\n                 if (vGetData.size() > 1) {\n-                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n@@ -5928,7 +5928,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -5966,7 +5966,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Only send one GetAddr response per connection to reduce resource waste\n         //  and discourage addr stamping of INV announcements.\n         if (pfrom->fSentAddr) {\n-            LogPrint(\"net\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n+            LogPrint(\"net2\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n             return true;\n         }\n         pfrom->fSentAddr = true;\n@@ -6150,7 +6150,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     vRecv >> hash;\n                     ss << \": hash \" << hash.ToString();\n                 }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+                if (strMsg == NetMsgType::BLOCK)\n+                    LogPrint(\"block\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else if (strMsg == NetMsgType::TX)\n+                    LogPrint(\"tx\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else\n+                    LogPrint(\"net\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n             } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n                 LogPrint(\"net\", \"Unparseable reject message received\\n\");\n@@ -6445,7 +6450,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n+                LogPrint(\"block\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n@@ -6529,7 +6534,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6539,12 +6544,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6566,14 +6571,14 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // This should be very rare and could be optimized out.\n                     // Just log for now.\n                     if (chainActive[pindex->nHeight] != pindex) {\n-                        LogPrint(\"net\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n+                        LogPrint(\"block\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n                             hashToAnnounce.ToString(), chainActive.Tip()->GetBlockHash().ToString());\n                     }\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->id, hashToAnnounce.ToString());\n                     }\n                 }\n@@ -6750,13 +6755,13 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n                     State(staller)->nStallingSince = nNow;\n-                    LogPrint(\"net\", \"Stall started peer=%d\\n\", staller);\n+                    LogPrint(\"block\", \"Stall started peer=%d\\n\", staller);\n                 }\n             }\n         }\n@@ -6770,7 +6775,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             if (!AlreadyHave(inv))\n             {\n                 if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      }
    ]
  },
  {
    "sha": "7efe6f4056bb1e2be4b0fd84bb1752141b8bef38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWZlNmY0MDU2YmIxZTJiZTRiMGZkODRiYjE3NTIxNDFiOGJlZjM4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:51:04Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T17:06:19Z"
      },
      "message": "Improve conformity in debug messages",
      "tree": {
        "sha": "c74300476be83f6dbf0778044eb6d6a627f9496b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c74300476be83f6dbf0778044eb6d6a627f9496b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "141d02fe29da312885d695b6bbca8de9812a3751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141d02fe29da312885d695b6bbca8de9812a3751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/141d02fe29da312885d695b6bbca8de9812a3751"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 17,
      "deletions": 23
    },
    "files": [
      {
        "sha": "cdc897ecab12b9b6d4ca76a168b333da1c322c8f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 23,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efe6f4056bb1e2be4b0fd84bb1752141b8bef38/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7efe6f4056bb1e2be4b0fd84bb1752141b8bef38",
        "patch": "@@ -734,7 +734,7 @@ void EraseOrphansFor(NodeId peer)\n             nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n \n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"recv %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5422,7 +5422,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n-        LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n+        LogPrint(\"net\", \"recv getheaders %d to %s peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -5628,7 +5628,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0)\n                     Misbehaving(pfrom->GetId(), nDoS);\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->id);\n+                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n                 return true;\n             }\n         }\n@@ -5672,7 +5672,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"recv cmpctblock. already being synced! peer=%d\\n\", pfrom->id);\n                         return true;\n                     }\n                 }\n@@ -5741,7 +5741,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s not expected peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n             return true;\n         }\n \n@@ -5751,7 +5751,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (status == READ_STATUS_INVALID) {\n             MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n             Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn. INVALID. peer=%d\\n\", pfrom->id);\n             return true;\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n@@ -5897,12 +5897,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->id);\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                    LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight, pfrom->id);\n                 }\n                 if (vGetData.size() > 0) {\n                     if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n@@ -5928,7 +5923,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"recv %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -6534,7 +6529,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"send cmpctblock %s peer=%d\\n\",\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6544,12 +6539,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send %u headers(%s to %s) peer=%d\\n\",\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send header %s peer=%d\\n\",\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6578,8 +6573,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n-                            pto->id, hashToAnnounce.ToString());\n+                        LogPrint(\"block\", \"send inv block %s (%d) peer=%d\\n\",\n+                            hashToAnnounce.ToString(), pindex->nHeight, pto->id);\n                     }\n                 }\n             }\n@@ -6755,7 +6750,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n@@ -6774,8 +6769,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))\n             {\n-                if (fDebug)\n-                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                LogPrint(\"tx2\", \"send getdata %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      }
    ]
  }
]