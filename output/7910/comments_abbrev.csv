sipa,2016-04-19T16:09:32Z,"Since github shows the commits sorted by author date rather than dependency order, here is a list of all commits:\n- preparation (https://github.com/sipa/bitcoin/compare/fb0ac482eee761ec17ed2c11df11e054347a026d...e69265d)\n  - 644b2c5 Keep addrman's nService bits consistent with outbound observations\n  - afdc413 Verify that outbound connections have expected services\n  - fdec2bc Only store and c",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958,211998958,
maaku,2016-04-19T18:51:43Z,"Created pull request https://github.com/sipa/bitcoin/pull/75 on sipa's repository against this branch. Explanation of the proposed change:\n\n> The witness root is allowed to be placed at an arbitrary position up to seven layers deep in a Merkle tree structure. The witness nonce is now the branch through the commitment tree to the witness root, and a single byte is added to the commitment output s",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212066524,212066524,
morcos,2016-04-19T19:31:35Z,See sipa#76 for fix to CInv::GetCommand\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212079865,212079865,
ghost,2016-04-20T01:03:19Z,Ayayay... a third of the original client's source base. I assume the items left to do will be committed to this PR #7910 ?\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212190166,212190166,
LongShao007,2016-04-20T11:10:11Z,"function UpdateUncommitedBlockStructures redefine in main.h\n\n> +\n>  +void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex\* pindexPrev, const Consensus::Params& consensusParams);\n>  +\n>  +/*\* Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. _/\n>  +void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212383627,212383627,
paveljanik,2016-04-20T15:18:13Z,"I can sometimes repeat failed test (https://travis-ci.org/bitcoin/bitcoin/jobs/124242358#L4152) even on master - `wallet.py`, so it seems to be irrelevant to this PR.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212473734,212473734,
MarcoFalke,2016-04-20T15:21:06Z,"Jup, since we are aware of the issue, this might be a good time to disable this specific test.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212474862,212474862,
theuni,2016-04-20T16:02:20Z,"@paveljanik Thanks, that was driving me crazy yesterday while trying to figure out wtf it has to do with segwit. Great to know it's not related.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212490581,212490581,
sipa,2016-04-20T16:10:50Z,"@theuni 3rd retry of Travis, and now it succeeded. Perhaps just bad luck...\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212494016,212494016,
sipa,2016-04-23T12:17:47Z,"I have included fixup commits for almost all comments, as well as a merge commit at the end to keep the result testable and show what changes are needed to rebase on master.\n\nI intend to only overwrite the merge commit at the end, and otherwise only append fixup commits (and where possible, list which commit they modify). I will also keep the broken-down commit list on https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-213730697,213730697,
morcos,2016-04-25T15:30:28Z,"I think there are a couple of more places that need the SERIALIZE_TRANSACTION_WITNESS flag: `rest_tx` and `rest_block` in rest.cpp, `CDB:Rewrite` in db.cpp, and I wasn't sure about `CWalletDB::Recover` in walletdb.cpp.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-214396188,214396188,
sipa,2016-04-28T12:32:15Z,Pushed a new batch of fixups.\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-215409199,215409199,
theuni,2016-05-02T20:16:34Z,"As requested in the last two IRC meetings, here's the coverage data for segwit (at 588da1e3a35c75c1d4cbe50b0224cca810db0bf0): https://dev.bitcoincore.org/cfields/post-segwit.coverage/\n\n~~It's missing branching data, and inlining throws off a few things, but I think it gives a good idea of what's being tested.~~ This data includes tests from test_bitcoin, the java pull-tester, and regular+extende",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216350091,216350091,
NicolasDorier,2016-05-03T03:54:06Z,@theuni @sipa This cover both (to squash with my test commit): https://github.com/NicolasDorier/bitcoin/commit/ad366c56536019c180901194baa376d46052fb4a\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216429678,216429678,
jonasnick,2016-05-04T01:59:47Z,https://github.com/sipa/bitcoin/pull/81/ increases coverage by causing a `SCRIPT_ERR_WITNESS_MALLEATED_P2SH` error.\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216720008,216720008,
jtimon,2016-05-05T03:38:52Z,"I'm sorry, I still cannot read this. That doesn't mean that I think the PR is not well written or it's incomplete.\nIt's just too much to review for me personally. Completely selfishly, I will promote a division of the PR in 2:\n\n1) do the most tested still-not-activate consensus changes in 0.12.99 as soon that part is ready.\nI don't think we're too far away from that, people have been really te",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-217070795,217070795,
sipa,2016-05-10T01:58:29Z,"@jtimon All the consensus logic is already combined into a single group of commits (see https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958 which I maintain for every push). As mentioned several times in the weekly meetings, I'm also not rebasing anymore, so you don't have to worry about review going stale.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218039952,218039952,
sipa,2016-05-11T07:42:01Z,"More comments and nits addressed, testnet activation included, separated -maxblocksize and -maxblockcost (by @luke-jr).\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218385522,218385522,
mruddy,2016-05-12T13:19:37Z,"Since signature/witness data gets a 75% discount in the new cost calculation, I'm wondering if the constant of `148u` in `GetDustThreshold` in transaction.h should be updated too?\nShould that be changed to `108*0.25 + 32 + 4 + 4 = 67` ?\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218754334,218754334,
sipa,2016-05-15T00:40:12Z,"I added a commit section ""commentary"" that contains comments on the changes (and not on the resulting code). Maybe they're useful for people asking ""why is X being changed?"".\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-219259461,219259461,
instagibbs,2016-05-25T17:35:39Z,"nits aside, p2p-segwit.py code review ACK https://github.com/bitcoin/bitcoin/pull/7910/commits/5b0cd48d9f29f4a839640819230d4e88e077ce40\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-221649375,221649375,
sipa,2016-06-04T20:51:54Z,"I've created a rebased/squash branch against master, whose tip tree is identical to the tree in this PR: https://github.com/sipa/bitcoin/compare/segwit-master2-base...segwit-master2\n\nEDIT: moved to a separate PR #8149.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-223777674,223777674,
sdaftuar,2016-06-07T19:32:32Z,"As brought up in https://github.com/sipa/bitcoin/issues/95 (and subsequent IRC discussion), we currently will respond to a MSG_FILTERED_BLOCK with transactions that will be serialized with witness, even though the peer may not support it.  \n\nWe should change this to returning transactions without witness, and in the future we could add support for filtered block requests to indicate whether resp",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-224389025,224389025,
sipa,2016-06-12T20:31:56Z,"Updates:\n- Removed segnet\n- Changes meaning of -maxblocksize and -maxblockcost: if only of one them is given, that becomes the only constraint\n- Avoid recomputing transaction sizes/costs in mining code\n- Bugfix: count serialized bytes rather than vsize for -maxblockcost\n- Bugfix: don't send witnesses in response to getdata MSG_FILTERED_BLOCK\n- New merge with master (on top of the mempool/rel",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225458615,225458615,
sipa,2016-06-13T20:28:13Z,"Updates:\n- Removed commentary\n- Fix inconsistent naming 'witness' vs 'segwit'\n- Added more tests by @jl2012 and @sdaftuar \n- New merge with master (on top of #7598 and #7749).\n\nThere have been significant changes in master since this PR was branched off, and as a result, many things are now hidden under the merge commit here (including adapting for the tx relay/mempool changes from #8082 #80",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225698251,225698251,
sipa,2016-06-14T07:19:32Z,"PROTOCOL_VERSION is indeed unused, so it doesn't matter. I'll change it for consistency.\n\nLonger term, I think the nSerType/nVersion should be replaced by a context object that encapsulates serialization parameters (for example, there could be a TransactionSerializationContext with a boolean fWitness, and a BlockSerializationContext that inherits from TransactionSerializationContext etc).\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225799237,225799237,
kanzure,2016-06-14T14:29:25Z,"ACK 3cb46c1. ACK 17389dc. ACK #8149 having same git tree hash for 3cb46c1 and 17389dc. Also, other reviewers might benefit from some segwit code review notes from https://bitcoincore.org/logs/2016-05-zurich-meeting-notes.html although I believe code review is possible in absence of looking at those notes.\n",https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225899147,225899147,
instagibbs,2016-06-14T15:52:41Z,tACK wallet section plus fixups https://github.com/sipa/bitcoin/compare/3f989b9...be976b7\ntACK p2p-segwit.py tests  plus fixups https://github.com/bitcoin/bitcoin/commit/da0c46e1bbee0413bb5fb107c21a31fd4bbe1f42\ncode review ACK for the rest minus unit tests through beginning of merge section: https://github.com/bitcoin/bitcoin/pull/7910/commits/2311cf6ab879b352da39d89b959c735d06cbbf59\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225926853,225926853,
jl2012,2016-06-14T18:49:30Z,tACK 2311cf6 : consensus behavior matches descriptions in BIP141 and BIP143\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225979380,225979380,
sipa,2016-06-16T00:58:05Z,A few more changes:\n- Spelling and naming consistency nits (by @sdaftuar and @instagibbs)\n- Test improvements (by @jl2012 and @sdaftuar)\n- Make a node fully behave as a non-witness node as long as there is no softfork defined\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226361837,226361837,
sipa,2016-06-16T18:35:22Z,New merge on top of #7600.\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226574050,226574050,
sdaftuar,2016-06-17T05:04:30Z,ACK e84733733d0ec3deee3b0d1cdcf643082b78ee1e\n\n(Will ACK in #8149 as well)\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226681359,226681359,
sipa,2016-06-22T14:13:16Z,New merge after #8068 and #8179. See the details in https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-227755007.\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-227756695,227756695,
NicolasDorier,2016-06-23T20:20:44Z,I udpated the sig cache PR (https://github.com/sipa/bitcoin/pull/101)\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-228171425,228171425,
sipa,2016-06-24T16:20:48Z,Merged as #8149.\n,https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-228391252,228391252,
instagibbs,2016-04-19T18:02:26Z,Probably should throw an error if it's not hex. Currently accepts anything entered.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60280033,60280033,src/rpc/misc.cpp
instagibbs,2016-04-19T19:14:17Z,"nit: ensure wallet is available for more useful error than ""not known to wallet""\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60292915,60292915,src/wallet/rpcwallet.cpp
gubatron,2016-04-20T06:44:28Z,"this little commitpos check could use a refactor, it appears 3 times. #DRY.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60356762,60356762,src/main.cpp
sipa,2016-04-20T09:07:33Z,Agree!\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60373788,60373788,src/main.cpp
SergioDemianLerner,2016-04-20T17:40:34Z,GetTransactionSigOpCost() could return a value close to 2^29 (4M \* 20 (multisig) \* 4) so to be safe nSigOps should be an int64_t. That can prevent overflows on future witness size extensions.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60453999,60453999,src/main.cpp
SergioDemianLerner,2016-04-20T17:43:08Z,same here. nSigOps -> int64_t\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60454436,60454436,src/main.cpp
SergioDemianLerner,2016-04-20T18:06:53Z,"GetBlockCost() is part of consensus-critical code. Why is the phrase ""approximate formula"" used in a comment here?\nEither the formula is exact (and matches the BIP) or it is incorrect.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60458667,60458667,src/primitives/block.cpp
jl2012,2016-04-20T18:32:29Z,"Why not (4M \* 20 (multisig))? You may have 4MB only if it is a segwit tx, and cost of segwit sigops does not need to \* 4\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60463090,60463090,src/main.cpp
sipa,2016-04-20T20:34:32Z,"I agree with jl2012, and I think an int64_t is not necessary at this point. It won't hurt though, so I'll switch the type.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60482327,60482327,src/main.cpp
sipa,2016-04-20T20:40:44Z,The formula is exact.\n\nIt's trying to explain the rationale for this rule (basesize \* 3 + totalsize) by showing that it corresponds to (basesize \* 4 + witsize). But perhaps this rationale belongs in the BIP and not in the code.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60483311,60483311,src/primitives/block.cpp
dcousens,2016-04-21T02:48:43Z,What was the reasoning behind separating this from being derived from the network rule?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60519803,60519803,src/consensus/consensus.h
dcousens,2016-04-21T03:16:58Z,"> **Reject** witness transactions if segregated witness is disabled [and a witness exists]; override with `-prematurewitness` to bypass\n\nIMHO, reads easier, less negations to do in my head\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60521354,60521354,src/main.cpp
dcousens,2016-04-21T03:24:05Z,Could this be bracketed such that precedence rules don't need to be remembered?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60521686,60521686,src/main.cpp
dcousens,2016-04-21T03:32:24Z,"ACK switch to `uint64_t`,  its what is returned by `GetTransactionSigOpCost` any way... explicit casts should be the rule, not the exception (IMHO).\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60522057,60522057,src/main.cpp
dcousens,2016-04-21T03:33:53Z,Less implicit casts if this is also `uint64_t`\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60522121,60522121,src/consensus/consensus.h
dooglus,2016-04-21T19:48:44Z,"You mean ""room _for_ spam""?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60643948,60643948,src/main.cpp
dooglus,2016-04-21T19:56:17Z,So just remove the word 'approximate'? I think it is helpful to keep the rest of the explanation here.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60644990,60644990,src/primitives/block.cpp
kanzure,2016-04-21T20:06:31Z,"would be nice to shorten this line, plus it's essentially repeated soon after a few lines later....\n\n```\nif (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60646516,60646516,src/main.cpp
MarcoFalke,2016-04-22T09:50:35Z,Needs merge conflict solved.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60715820,60715820,src/main.cpp
MarcoFalke,2016-04-22T09:50:55Z,Nit: Let's not do wildcard imports in mininode.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60715862,60715862,qa/rpc-tests/test_framework/mininode.py
btcdrak,2016-04-22T10:17:33Z,"This comment doesn't look right, since we're using version bits deployment.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60718659,60718659,qa/rpc-tests/test_framework/blocktools.py
btcdrak,2016-04-22T10:41:28Z,Add comment `Deployment of BIP141 and BIP143`\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60720954,60720954,src/consensus/params.h
btcdrak,2016-04-22T10:42:57Z,"add the BIP numbers being deployed.\n\n`Deployment of SegWit, BIP141 and BIP143`\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60721107,60721107,src/chainparams.cpp
instagibbs,2016-04-22T22:03:09Z,"Rename to ""witnesshash"", or mention hash is based on witnesshash in description.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60809182,60809182,src/rpc/mining.cpp
sipa,2016-04-23T07:33:50Z,"This is from BIP145, though I agree it's helpful to document.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60824710,60824710,src/rpc/mining.cpp
sipa,2016-04-23T07:34:12Z,Agree.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60824714,60824714,src/rpc/misc.cpp
sipa,2016-04-23T10:31:50Z,It is not derived from the network rule because it is the (only) network rule. What would you derive it from?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826625,60826625,src/consensus/consensus.h
sipa,2016-04-23T10:37:44Z,I don't think that's necessary here.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826671,60826671,src/main.cpp
sipa,2016-04-23T10:42:59Z,"Yes, will factor it out to a separate function.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826717,60826717,src/main.cpp
sipa,2016-04-23T10:44:51Z,Will do.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826733,60826733,src/primitives/block.cpp
sipa,2016-04-23T10:51:12Z,Will fix.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826808,60826808,qa/rpc-tests/test_framework/blocktools.py
sipa,2016-04-23T10:51:43Z,Will fix.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826823,60826823,src/chainparams.cpp
sipa,2016-04-23T10:54:49Z,Will turn all sigops cost variables into int64_t\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826858,60826858,src/consensus/consensus.h
sipa,2016-04-23T10:55:23Z,Will do.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826863,60826863,src/consensus/params.h
sipa,2016-04-23T10:55:37Z,Will fix.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826869,60826869,src/main.cpp
sipa,2016-04-23T10:55:59Z,"Thanks, will do.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826871,60826871,src/main.cpp
sipa,2016-04-23T10:56:21Z,I do!\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826874,60826874,src/main.cpp
sipa,2016-04-23T10:57:32Z,Will do.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826883,60826883,src/wallet/rpcwallet.cpp
jl2012,2016-04-25T15:22:16Z,Double SHA256?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60932289,60932289,src/main.cpp
instagibbs,2016-04-25T15:27:33Z,"what does ""may be fine"" mean here?\n\nedit: nevermind, I see the explanation here: https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR5221\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60933279,60933279,src/main.cpp
morcos,2016-04-25T16:59:50Z,"Do we need to handle the case that `flags == 0`? For instance, the serialization of a transaction with no inputs and no outputs, maybe we should explicitly make sure tx.vout is set empty?\n\n(i put this same comment somewhere wrong initially)\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60948634,60948634,src/primitives/transaction.h
morcos,2016-04-25T17:29:30Z,"I think after your fixup commit this doesn't deserialize properly, which probably isn't what we're supposed to be testing here.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60953084,60953084,src/test/data/tx_invalid.json
sipa,2016-04-25T17:33:26Z,"That is intentional. If a transaction starting with ""[version] 0x00 0x00 ..."" is seen, it is treated as one with no inputs and no outputs.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60953841,60953841,src/primitives/transaction.h
morcos,2016-04-25T21:34:18Z,"This isn't necessary right?  Perhaps we need a better way to identify which rules for block assembly are enforced by the mempool, but I'd rather that we keep redundant checks out to make future work on block assembly easier.  At the very least this should be commented that unless there is a reorg to a lower height more work chain immediately at the segwit activation border, then this check is supe",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60993521,60993521,src/miner.cpp
sipa,2016-04-25T21:56:00Z,"Agree, this is a hack.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60996698,60996698,src/miner.cpp
dcousens,2016-04-26T03:40:44Z,"All good,  I forgot I made that comment before finishing reviewing the majority of the PR,  it makes sense now :+1: \n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61024859,61024859,src/consensus/consensus.h
instagibbs,2016-04-26T14:12:17Z,nit: update comment to cost/4k\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61092167,61092167,src/miner.cpp
morcos,2016-04-26T14:58:59Z,"This error message might be clearer if it indicated that it was the ""nonce"" that was the wrong size.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61101582,61101582,src/main.cpp
sdaftuar,2016-04-26T19:27:54Z,"This is minor, but shouldn't we put a similar guard up above, where failed-orphan transactions get added to `recentRejects`?  Presumably failed orphans should also only be added to `recentRejects` if the corruption field is not set?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61148809,61148809,src/main.cpp
morcos,2016-04-27T17:02:25Z,nit: would it be easier to read if any time we had a sigversion we used an enum?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61296431,61296431,src/script/interpreter.cpp
morcos,2016-04-27T17:36:36Z,"maybe rebase error?  nextblockhash is repeated.  to keep the order the same as output, chainwork should go before previousblockhash and nextblockhash.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61302292,61302292,src/rpc/blockchain.cpp
instagibbs,2016-04-27T17:52:59Z,the ordering has always been wrong: https://github.com/bitcoin/bitcoin/pull/7194\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61305131,61305131,src/rpc/blockchain.cpp
sipa,2016-04-27T22:58:29Z,Going to replace it with an extra delay before witness transactions are accepted to the mempool.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61351055,61351055,src/miner.cpp
morcos,2016-04-27T23:17:35Z,"@sipa I'm not sure it's necessary to replace it with anything.  Given the way versionbits soft forks activate, its not really possible to have it unactivate without an enormous reorg\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61352908,61352908,src/miner.cpp
sipa,2016-04-27T23:34:08Z,"Indeed, and likewise for the misbehaviour assignment.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61354416,61354416,src/main.cpp
sipa,2016-04-27T23:54:29Z,Oh yes!\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61356165,61356165,src/script/interpreter.cpp
morcos,2016-04-28T13:31:50Z,this is redundant to line 286 now\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61426731,61426731,src/primitives/transaction.h
morcos,2016-04-28T14:41:59Z,do we also need to remove it from mapBlocksUnlinked?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61438709,61438709,src/main.cpp
sdaftuar,2016-04-29T00:06:10Z,"This variable doesn't appear to be used by anything; I assume this was introduced before switching to the service bit, not sure if you intended to leave it here as a useful marker, or remove?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61521620,61521620,src/version.h
sdaftuar,2016-04-29T00:14:23Z,"This logic will cause pruning nodes to fail (un-gracefully) if they try to upgrade after activation and the activation block has been pruned (which could be as short as two days).  I propose that for pruning nodes, we don't bother trying to rewind past their HAVE_DATA point.  \n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61522239,61522239,src/main.cpp
jl2012,2016-04-29T20:03:26Z,// Making v1-v16 witness program non-standard\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61636847,61636847,src/script/interpreter.h
wallclockbuilder,2016-05-10T02:39:51Z,"-    // \* ~~The~~There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r62604879,62604879,src/main.cpp
sipa,2016-05-11T00:26:11Z,"Sounds good, can you provide a patch?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r62776324,62776324,src/main.cpp
theuni,2016-05-20T11:13:08Z,This casts uint64_t -> int64_t.\nShould probably test the uint64_t directly against MAX_MONEY and fail immediately here as necessary.\n\nMaybe bitcoinconsensus_ERR_TX_AMOUNT_VALUE?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64025439,64025439,src/script/bitcoinconsensus.cpp
sdaftuar,2016-05-20T11:30:13Z,It looks like none of the tests actually use a non-zero value -- seems like we should add a way to exercise the code in the non-zero value case (as the zero case is special).\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64027026,64027026,src/test/script_tests.cpp
afk11,2016-05-20T12:28:16Z,"Or just accept int64_t, as amounts are never interpreted as unsigned..\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64033059,64033059,src/script/bitcoinconsensus.cpp
theuni,2016-05-20T12:39:10Z,I assumed that (self-documentation) was the reason for the uint64_t.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64034244,64034244,src/script/bitcoinconsensus.cpp
nicola,2016-05-20T19:32:53Z,do you mind explaining this calculation?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64095501,64095501,qa/rpc-tests/maxuploadtarget.py
jonasschnelli,2016-05-21T08:46:19Z,nit: I think we should place this in a utility class and use the same implementation also for bitcoin-txs (`static CAmount AmountFromValue(const UniValue& value)`). Can be done post this PR.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131407,64131407,src/bitcoin-tx.cpp
sdaftuar,2016-05-21T08:47:44Z,"nit: ""Uncommited"" -> ""Uncommitted""\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131412,64131412,src/main.cpp
jonasschnelli,2016-05-21T08:51:53Z,"nit: s/mode. "")/mode."")/\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131454,64131454,src/chainparamsbase.cpp
sdaftuar,2016-05-21T08:53:49Z,"This may be too much bikeshedding, but I think this would be clearer as `MAX_BLOCK_SIZE_COST` (and eg `GetBlockSizeCost()` elsewhere) to distinguish from the `MAX_BLOCK_SIGOPS_COST`.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131474,64131474,src/consensus/consensus.h
instagibbs,2016-05-21T09:08:45Z,"~~I think ""GetWitnessProgramForScript"" is more direct and clear.~~\n\nI had a misunderstanding of ""witness program"" definition somehow. \n\n""GetScriptForWitnessScript"" isn't much clearer either. Hm.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131609,64131609,src/script/standard.cpp
instagibbs,2016-05-21T09:23:22Z,"WitnessProgram has a specific meaning, which is defined in https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program \n\nTherefore, this function would be better named as ""VerifyWitness"".\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131750,64131750,src/script/interpreter.cpp
instagibbs,2016-05-21T09:36:34Z,Phrasing bothering me. The cleanstackness is implicit(not using the flag) but it requiring some new behavior is surely explicit here. Perhaps rewrite as:\n\n// Scripts inside witness require implicit cleanstack behavior as a consensus rule.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131853,64131853,src/script/interpreter.cpp
instagibbs,2016-05-21T09:49:31Z,s/actual/base/ ?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131992,64131992,src/script/interpreter.cpp
instagibbs,2016-05-21T09:51:15Z,s/actual/base/\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64132010,64132010,src/script/interpreter.cpp
instagibbs,2016-05-21T14:36:13Z,"nit: This comment would also be useful in GetTransactionCost, since the reasoning appears identical.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64135342,64135342,src/primitives/block.cpp
jonasschnelli,2016-05-22T09:31:59Z,Why can't this still be `const`?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147047,64147047,src/rpc/mining.cpp
sipa,2016-05-22T09:42:52Z,No clue!\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147135,64147135,src/rpc/mining.cpp
instagibbs,2016-05-22T09:49:04Z,self.test_node_test_witness_block with withWitness=False will do this fine\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147230,64147230,qa/rpc-tests/p2p-segwit.py
dcousens,2016-05-22T10:53:29Z,"> No clue!\n\nAs in,  compiler error or is this a mistaken edit?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147996,64147996,src/rpc/mining.cpp
sdaftuar,2016-05-24T14:51:24Z,"I suggest we change this to 4000000 so that pre-activation, miners who are setting only `-blockmaxsize` don't see a potential behavior change.\n\nFYI this is what is currently breaking `qa/rpc-tests/pruning.py`.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64405990,64405990,src/policy/policy.h
instagibbs,2016-05-25T14:03:18Z,nit: mention that this violates consensus cleanstack\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64577749,64577749,qa/rpc-tests/p2p-segwit.py
instagibbs,2016-05-25T14:38:04Z,only the announcements are relayed in this code?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64584415,64584415,qa/rpc-tests/p2p-segwit.py
sdaftuar,2016-05-25T14:42:58Z,Good observation; we should verify that sending the two different kinds of `getdata` give the expected results.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64585393,64585393,qa/rpc-tests/p2p-segwit.py
instagibbs,2016-05-25T17:17:58Z,Version 0 (and all references below)\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64614163,64614163,qa/rpc-tests/p2p-segwit.py
sdaftuar,2016-05-25T17:48:38Z,"For clarity, we should probably change this to SIGVERSION_WITNESS_V0 to match the enum that was added to the code, but that enum has value 1 (which is where ""signature version 1"" comes from).\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64619665,64619665,qa/rpc-tests/p2p-segwit.py
instagibbs,2016-05-25T19:04:16Z,Appears unused\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64633343,64633343,qa/rpc-tests/p2p-segwit.py
earonesty,2016-05-31T15:39:47Z,must be a mistaken edit: all references in that loop are const\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65207630,65207630,src/rpc/mining.cpp
JDutil,2016-06-03T07:09:42Z,Why is the max arbitrarily set here?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65664565,65664565,qa/rpc-tests/maxuploadtarget.py
sipa,2016-06-03T07:16:01Z,This is in test code. It has to test a specific scenario.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65665109,65665109,qa/rpc-tests/maxuploadtarget.py
MarcoFalke,2016-06-03T07:20:51Z,"Though, it could help to name constants that have more than 4 trailing\nzeros and put them in test_framework/ e.g. /mininode.py.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65665505,65665505,qa/rpc-tests/maxuploadtarget.py
JDutil,2016-06-03T07:25:42Z,"Okay so this is test code, but the test code used to be against the MAX_BLOCK_SIZE why is the max block size no longer important? Sorry if I sound stupid here being ruby dev not python, but I'd like to understand this seemingly arbitrary change that IMHO is way worse than being arbitrary it is changing the TEST ITSELF.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65666064,65666064,qa/rpc-tests/maxuploadtarget.py
sipa,2016-06-04T10:05:29Z,"Oh, I misunderstood your comment. Sure, I should add a constant for the new max block size on the python side.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65800645,65800645,qa/rpc-tests/maxuploadtarget.py
JDutil,2016-06-04T10:12:55Z,"@sipa 👍 on a new constant to make things readable, but sorry I'm just starting to learn the source code here so I still have simple questions.  Is the reason your setting this different than the MAX_BLOCK_SIZE because segwit is supposed to help double the amount of data per block?  I would think this would be 4MB not 4_000_000 which is close... Makes me think the test would be MAX_BLOCK_SIZE \* 2.",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65800717,65800717,qa/rpc-tests/maxuploadtarget.py
sdaftuar,2016-06-06T16:49:54Z,~~@sipa I think this still needs to be addressed?~~\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65925707,65925707,src/policy/policy.h
paveljanik,2016-06-07T08:14:58Z,`ret` is unused here.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66026986,66026986,src/test/sigopcount_tests.cpp
sdaftuar,2016-06-14T01:19:30Z,"Shouldn't this first call be `::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)`?  I guess PROTOCOL_VERSION isn't actually used, but I assume we should be consistent...\n\nEDIT: maybe I'm wrong?  I see both in the code actually...\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66896121,66896121,src/primitives/block.cpp
instagibbs,2016-06-14T15:52:12Z,nit: Vestigial segnet reference \n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66999145,66999145,qa/rpc-tests/test_framework/mininode.py
sipa,2016-06-14T15:55:59Z,Please send a small PR so this is not forgotten.\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66999985,66999985,qa/rpc-tests/test_framework/mininode.py
instagibbs,2016-06-14T15:59:54Z,done\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67000742,67000742,qa/rpc-tests/test_framework/mininode.py
instagibbs,2016-06-16T20:31:23Z,Do we want to do a similar thing for createwitnessaddress? \n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67418508,67418508,src/wallet/rpcwallet.cpp
dcousens,2016-06-17T00:23:31Z,"Rather than reassign `solved`,  maybe just `return false`? \nWhy are we waiting until the end of the scope?\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67446230,67446230,src/script/sign.cpp
sipa,2016-06-17T17:00:37Z,"We want to push the potentially partial result to sigdata.scriptSig, which is done in line 179-182.\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67542461,67542461,src/script/sign.cpp
instagibbs,2016-06-18T01:15:31Z,Upgraded nodes don't ask for blocks from non-upgraded?\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67592553,67592553,src/main.cpp
kazcw,2016-06-18T01:29:08Z,"Oh, right. Nevermind..\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67592852,67592852,src/main.cpp
rebroad,2016-08-25T10:21:11Z,"at least 4 people so far waiting for an answer to this one, @sipa  curious minds want to know!\n",https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76217691,76217691,qa/rpc-tests/maxuploadtarget.py
rebroad,2016-08-25T10:22:17Z,Oooh! We've lost the 1MB block limit rule?! ;)\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76217859,76217859,src/consensus/consensus.h
MarcoFalke,2016-08-25T10:28:15Z,@rebroad and other 3: Explanation should be in OP of  #8559\n,https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76218549,76218549,qa/rpc-tests/maxuploadtarget.py
