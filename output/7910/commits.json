[
  {
    "sha": "644b2c5090e8355676d43c1dde4e0222c48455f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDRiMmM1MDkwZTgzNTU2NzZkNDNjMWRkZTRlMDIyMmM0ODQ1NWY2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T17:58:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:19Z"
      },
      "message": "Keep addrman's nService bits consistent with outbound observations",
      "tree": {
        "sha": "4acb0b878885339f8373c0d084c880d9f6127eec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4acb0b878885339f8373c0d084c880d9f6127eec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/644b2c5090e8355676d43c1dde4e0222c48455f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644b2c5090e8355676d43c1dde4e0222c48455f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/644b2c5090e8355676d43c1dde4e0222c48455f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644b2c5090e8355676d43c1dde4e0222c48455f6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "187186b0fe039010ea4b81edb671b9bdfc63d29a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/187186b0fe039010ea4b81edb671b9bdfc63d29a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/187186b0fe039010ea4b81edb671b9bdfc63d29a"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2de005df372343f1423f24d6d02493440dae3e7d",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644b2c5090e8355676d43c1dde4e0222c48455f6/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644b2c5090e8355676d43c1dde4e0222c48455f6/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=644b2c5090e8355676d43c1dde4e0222c48455f6",
        "patch": "@@ -499,3 +499,21 @@ void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n int CAddrMan::RandomInt(int nMax){\n     return GetRandInt(nMax);\n }\n+\n+void CAddrMan::SetServices_(const CService& addr, uint64_t nServices)\n+{\n+    CAddrInfo* pinfo = Find(addr);\n+\n+    // if not found, bail out\n+    if (!pinfo)\n+        return;\n+\n+    CAddrInfo& info = *pinfo;\n+\n+    // check whether we are talking about the exact same CService (including same port)\n+    if (info != addr)\n+        return;\n+\n+    // update info\n+    info.nServices = nServices;\n+}"
      },
      {
        "sha": "646d0a1b348dc0ca29caff9730d4e977285d25e6",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644b2c5090e8355676d43c1dde4e0222c48455f6/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644b2c5090e8355676d43c1dde4e0222c48455f6/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=644b2c5090e8355676d43c1dde4e0222c48455f6",
        "patch": "@@ -249,6 +249,9 @@ class CAddrMan\n     //! Mark an entry as currently-connected-to.\n     void Connected_(const CService &addr, int64_t nTime);\n \n+    //! Update an entry's service bits.\n+    void SetServices_(const CService &addr, uint64_t nServices);\n+\n public:\n     /**\n      * serialized format:\n@@ -573,6 +576,14 @@ class CAddrMan\n         }\n     }\n \n+    void SetServices(const CService &addr, uint64_t nServices)\n+    {\n+        LOCK(cs);\n+        Check();\n+        SetServices_(addr, nServices);\n+        Check();\n+    }\n+\n };\n \n #endif // BITCOIN_ADDRMAN_H"
      },
      {
        "sha": "a9bbfdb85749a1e2fbce4a59db8e37b70a326d19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644b2c5090e8355676d43c1dde4e0222c48455f6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644b2c5090e8355676d43c1dde4e0222c48455f6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=644b2c5090e8355676d43c1dde4e0222c48455f6",
        "patch": "@@ -4539,6 +4539,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n+        if (!pfrom->fInbound)\n+        {\n+            addrman.SetServices(pfrom->addr, pfrom->nServices);\n+        }\n         if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version"
      }
    ]
  },
  {
    "sha": "afdc413823e5d6d7a5da8504cab86ff241959d60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmRjNDEzODIzZTVkNmQ3YTVkYTg1MDRjYWI4NmZmMjQxOTU5ZDYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T18:09:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:19Z"
      },
      "message": "Verify that outbound connections have expected services",
      "tree": {
        "sha": "8c3536dcede2303627c7c6df65c7adae4fec892c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c3536dcede2303627c7c6df65c7adae4fec892c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afdc413823e5d6d7a5da8504cab86ff241959d60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afdc413823e5d6d7a5da8504cab86ff241959d60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afdc413823e5d6d7a5da8504cab86ff241959d60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afdc413823e5d6d7a5da8504cab86ff241959d60/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "644b2c5090e8355676d43c1dde4e0222c48455f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644b2c5090e8355676d43c1dde4e0222c48455f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/644b2c5090e8355676d43c1dde4e0222c48455f6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c6ecb33c9dcaca8ac35417c940455b2f7384e391",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdc413823e5d6d7a5da8504cab86ff241959d60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdc413823e5d6d7a5da8504cab86ff241959d60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=afdc413823e5d6d7a5da8504cab86ff241959d60",
        "patch": "@@ -4543,6 +4543,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             addrman.SetServices(pfrom->addr, pfrom->nServices);\n         }\n+        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        {\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected));\n+            pfrom->fDisconnect = true;\n+        }\n+\n         if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version"
      },
      {
        "sha": "eb021e5e5cbe1f99c79309d41ddbcb5b6b922275",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdc413823e5d6d7a5da8504cab86ff241959d60/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdc413823e5d6d7a5da8504cab86ff241959d60/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=afdc413823e5d6d7a5da8504cab86ff241959d60",
        "patch": "@@ -71,6 +71,9 @@ namespace {\n \n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n+/** Services this node implementation cares about */\n+static const uint64_t nRelevantServices = NODE_NETWORK;\n+\n //\n // Global state variables\n //\n@@ -414,6 +417,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n             vNodes.push_back(pnode);\n         }\n \n+        pnode->nServicesExpected = addrConnect.nServices & nRelevantServices;\n         pnode->nTimeConnected = GetTime();\n \n         return pnode;\n@@ -2345,6 +2349,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     filterInventoryKnown(50000, 0.000001)\n {\n     nServices = 0;\n+    nServicesExpected = 0;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;"
      },
      {
        "sha": "4a54750252cf8a2bc948f47d4e80cb7f712e901e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdc413823e5d6d7a5da8504cab86ff241959d60/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdc413823e5d6d7a5da8504cab86ff241959d60/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=afdc413823e5d6d7a5da8504cab86ff241959d60",
        "patch": "@@ -319,6 +319,7 @@ class CNode\n public:\n     // socket\n     uint64_t nServices;\n+    uint64_t nServicesExpected;\n     SOCKET hSocket;\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries"
      }
    ]
  },
  {
    "sha": "fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGVjMmJjZTE2MGRlZTExNmVlMmY4NWI4YTlhZDhmN2U0ZDU3MzE3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T12:31:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "message": "Only store and connect to NODE_NETWORK nodes",
      "tree": {
        "sha": "d0e5c488c090818704fdd346d5877b85d1582125",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e5c488c090818704fdd346d5877b85d1582125"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afdc413823e5d6d7a5da8504cab86ff241959d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afdc413823e5d6d7a5da8504cab86ff241959d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afdc413823e5d6d7a5da8504cab86ff241959d60"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "110292eda81759c40de99a235c5a11f35c3b4c12",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
        "patch": "@@ -4702,6 +4702,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             boost::this_thread::interruption_point();\n \n+            if (!(addr.nServices & NODE_NETWORK))\n+                continue;\n+\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);"
      },
      {
        "sha": "9e1c5e643686c6b52b68c1605702416de7ec1c68",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
        "patch": "@@ -1593,6 +1593,10 @@ void ThreadOpenConnections()\n             if (IsLimited(addr))\n                 continue;\n \n+            // only connect to full nodes\n+            if (!(addr.nServices & NODE_NETWORK))\n+                continue;\n+\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;"
      }
    ]
  },
  {
    "sha": "e69265d9a4f82040729b1a81d4888d768d3b2c4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjkyNjVkOWE0ZjgyMDQwNzI5YjFhODFkNDg4OGQ3NjhkM2IyYzRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "message": "--- [SEGWIT] begin: segnet ---",
      "tree": {
        "sha": "d0e5c488c090818704fdd346d5877b85d1582125",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e5c488c090818704fdd346d5877b85d1582125"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "66dbd818f9577ccebd950b14900b625a3f18f055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmRiZDgxOGY5NTc3Y2NlYmQ5NTBiMTQ5MDBiNjI1YTNmMThmMDU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:47:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "message": "Don't check the genesis block PoW\n\nInspired by Jorge Timon's \"Testchain: Don't check the genesis block\", but\nrestricted to just PoW check.\n\nCode by Matt Corallo, originally submitted as a patch to segwit.",
      "tree": {
        "sha": "53368b280a455b57652c1972d18351988a907617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53368b280a455b57652c1972d18351988a907617"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66dbd818f9577ccebd950b14900b625a3f18f055",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66dbd818f9577ccebd950b14900b625a3f18f055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66dbd818f9577ccebd950b14900b625a3f18f055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66dbd818f9577ccebd950b14900b625a3f18f055/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e69265d9a4f82040729b1a81d4888d768d3b2c4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e69265d9a4f82040729b1a81d4888d768d3b2c4a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59d597e0492f326617b931b9d6d342fe8830ed56",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66dbd818f9577ccebd950b14900b625a3f18f055/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66dbd818f9577ccebd950b14900b625a3f18f055/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=66dbd818f9577ccebd950b14900b625a3f18f055",
        "patch": "@@ -82,6 +82,9 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n+    if (hash == params.hashGenesisBlock)\n+        return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      }
    ]
  },
  {
    "sha": "70ebe86f0073972a3d7834fcdd24989158564ae3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGViZTg2ZjAwNzM5NzJhM2Q3ODM0ZmNkZDI0OTg5MTU4NTY0YWUz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-31T02:49:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:12Z"
      },
      "message": "Create segnet4",
      "tree": {
        "sha": "4143f7391cb49b6268357f61191ac10849791f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4143f7391cb49b6268357f61191ac10849791f91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ebe86f0073972a3d7834fcdd24989158564ae3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ebe86f0073972a3d7834fcdd24989158564ae3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ebe86f0073972a3d7834fcdd24989158564ae3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ebe86f0073972a3d7834fcdd24989158564ae3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66dbd818f9577ccebd950b14900b625a3f18f055",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66dbd818f9577ccebd950b14900b625a3f18f055",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66dbd818f9577ccebd950b14900b625a3f18f055"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 85,
      "deletions": 2
    },
    "files": [
      {
        "sha": "49d0faa0271e399f2b3e1cc86d565b83bc13f44d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=70ebe86f0073972a3d7834fcdd24989158564ae3",
        "patch": "@@ -9,6 +9,7 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"arith_uint256.h\"\n \n #include <assert.h>\n \n@@ -227,6 +228,64 @@ class CTestNetParams : public CChainParams {\n };\n static CTestNetParams testNetParams;\n \n+/**\n+ * Segnet\n+ */\n+class CSegNetParams : public CChainParams {\n+public:\n+    CSegNetParams() {\n+        strNetworkID = \"segnet4\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nMajorityEnforceBlockUpgrade = 7;\n+        consensus.nMajorityRejectBlockOutdated = 9;\n+        consensus.nMajorityWindow = 10;\n+        consensus.BIP34Height = -1;\n+        consensus.BIP34Hash = uint256();\n+        consensus.powLimit = uint256S(\"000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // 512x lower min difficulty than mainnet\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = false;\n+        pchMessageStart[0] = 0xdc;\n+        pchMessageStart[1] = 0xab;\n+        pchMessageStart[2] = 0xa1;\n+        pchMessageStart[3] = 0xc4;\n+        nDefaultPort = 28901;\n+        nPruneAfterHeight = 1000;\n+        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 144; // Faster than normal for segnet (144 instead of 2016)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+\n+        genesis = CreateGenesisBlock(1452831101, 0, UintToArith256(consensus.powLimit).GetCompact(), 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,30);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,50);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,158);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x05)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x05)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_seg, pnSeed6_seg + ARRAYLEN(pnSeed6_seg));\n+\n+        fMiningRequiresPeers = true;\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = false;\n+        fMineBlocksOnDemand = false;\n+        fTestnetToBeDeprecatedFieldRPC = true;\n+\n+        // checkpointData is empty\n+    }\n+};\n+static CSegNetParams segNetParams;\n+\n /**\n  * Regression test\n  */\n@@ -304,6 +363,8 @@ CChainParams& Params(const std::string& chain)\n             return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n+    else if (chain == CBaseChainParams::SEGNET)\n+            return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n     else"
      },
      {
        "sha": "3e24a9670d432ce7ba6b357e4f0cb4cc335f7662",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=70ebe86f0073972a3d7834fcdd24989158564ae3",
        "patch": "@@ -13,6 +13,7 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::SEGNET = \"segnet\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -21,6 +22,7 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n+        strUsage += HelpMessageOpt(\"-segnet\", \"Enter segregated witness test mode. \");\n     }\n }\n \n@@ -51,6 +53,20 @@ class CBaseTestNetParams : public CBaseChainParams\n };\n static CBaseTestNetParams testNetParams;\n \n+/**\n+ * Segnet\n+ */\n+class CBaseSegNetParams : public CBaseChainParams\n+{\n+public:\n+    CBaseSegNetParams()\n+    {\n+        nRPCPort = 28902;\n+        strDataDir = \"segnet4\";\n+    }\n+};\n+static CBaseSegNetParams segNetParams;\n+\n /*\n  * Regression test\n  */\n@@ -79,6 +95,8 @@ CBaseChainParams& BaseParams(const std::string& chain)\n         return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n         return testNetParams;\n+    else if (chain == CBaseChainParams::SEGNET)\n+        return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n         return regTestParams;\n     else\n@@ -94,13 +112,16 @@ std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    bool fSegNet = GetBoolArg(\"-segnet\", false);\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if ((int)fRegTest + (int)fTestNet + (int)fSegNet > 1)\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet, -segnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n+    if (fSegNet)\n+        return CBaseChainParams::SEGNET;\n     return CBaseChainParams::MAIN;\n }\n "
      },
      {
        "sha": "dea94820ae5b77e3a15e7192ff9817fbf4ef3957",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ebe86f0073972a3d7834fcdd24989158564ae3/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=70ebe86f0073972a3d7834fcdd24989158564ae3",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n+    static const std::string SEGNET;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      }
    ]
  },
  {
    "sha": "f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJjZDg2ZDQzMjE4ZTJjYjlkNjBjMmE4OWJiNWY4OWFmODEzNDg1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T16:21:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "message": "Add segnet seed nodes",
      "tree": {
        "sha": "bf4aea4913113fc108183069f8573b9ae0f098d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf4aea4913113fc108183069f8573b9ae0f098d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70ebe86f0073972a3d7834fcdd24989158564ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ebe86f0073972a3d7834fcdd24989158564ae3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70ebe86f0073972a3d7834fcdd24989158564ae3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aeddc5f731b4294268a4bb9d3b8108bf284656e3",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
        "patch": "@@ -129,6 +129,9 @@ def main():\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')\n+    with open(os.path.join(indir,'nodes_seg.txt'),'r') as f:\n+        process_nodes(g, f, 'pnSeed6_seg', 28901)\n+    g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')"
      },
      {
        "sha": "0b3b4f6295cb35e4ca52723787176ad185a919b4",
        "filename": "contrib/seeds/nodes_seg.txt",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/contrib/seeds/nodes_seg.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/contrib/seeds/nodes_seg.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_seg.txt?ref=f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
        "patch": "@@ -0,0 +1,3 @@\n+# List of fixed seed nodes for segnet\n+\n+37.34.48.17"
      },
      {
        "sha": "03f347cb59e1e37a417bdaab547d26c42a106366",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bcd86d43218e2cb9d60c2a89bb5f89af813485/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
        "patch": "@@ -947,6 +947,10 @@ static SeedSpec6 pnSeed6_main[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0xb3,0xd1,0xf8,0xbe,0xa7,0x6b,0x46,0xbe,0xe8,0x84}, 8333}\n };\n \n+static SeedSpec6 pnSeed6_seg[] = {\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x22,0x30,0x11}, 28901}\n+};\n+\n static SeedSpec6 pnSeed6_test[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x99,0xcb,0x26,0x31,0xba,0x48,0x51,0x31,0x39,0x0d}, 18333},\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x44,0xf4,0xf4,0xf0,0xbf,0xf7,0x7e,0x6d,0xc4,0xe8}, 18333},"
      }
    ]
  },
  {
    "sha": "58847fe2c680a04325990f26cc35603b429270e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODg0N2ZlMmM2ODBhMDQzMjU5OTBmMjZjYzM1NjAzYjQyOTI3MGU3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-16T00:26:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "message": "qt: Work (don't crash) with -segnet",
      "tree": {
        "sha": "1bf0eca647ce8bda4bc293ae7d4a50931e5aa521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf0eca647ce8bda4bc293ae7d4a50931e5aa521"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58847fe2c680a04325990f26cc35603b429270e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58847fe2c680a04325990f26cc35603b429270e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58847fe2c680a04325990f26cc35603b429270e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58847fe2c680a04325990f26cc35603b429270e7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bcd86d43218e2cb9d60c2a89bb5f89af813485"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e48efbe38e8a959ee697d9cd7e86b640fe86a15a",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58847fe2c680a04325990f26cc35603b429270e7/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58847fe2c680a04325990f26cc35603b429270e7/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=58847fe2c680a04325990f26cc35603b429270e7",
        "patch": "@@ -52,5 +52,6 @@ static const int MAX_URI_LENGTH = 255;\n #define QAPP_ORG_DOMAIN \"bitcoin.org\"\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n+#define QAPP_APP_NAME_SEGNET \"Bitcoin-Qt-segnet\"\n \n #endif // BITCOIN_QT_GUICONSTANTS_H"
      },
      {
        "sha": "eccf948f0b5f2b42794d74f4b10a421dacb8686a",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58847fe2c680a04325990f26cc35603b429270e7/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58847fe2c680a04325990f26cc35603b429270e7/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=58847fe2c680a04325990f26cc35603b429270e7",
        "patch": "@@ -17,6 +17,7 @@ static const struct {\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n+    {\"segnet4\", QAPP_APP_NAME_SEGNET, 30, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[segnet4]\")},\n     {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);"
      }
    ]
  },
  {
    "sha": "bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjRiYjQ3ZDEyMTVlN2ZmM2FjNWY5MTBmOGE0YTlmNzg3Y2ZmZmJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "message": "--- [SEGWIT] begin: P2P/node/consensus ---",
      "tree": {
        "sha": "1bf0eca647ce8bda4bc293ae7d4a50931e5aa521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf0eca647ce8bda4bc293ae7d4a50931e5aa521"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58847fe2c680a04325990f26cc35603b429270e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58847fe2c680a04325990f26cc35603b429270e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58847fe2c680a04325990f26cc35603b429270e7"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjFmZjQ5ZjBjMWI1ZmNlNWZiMGVkNDEyMWNhNjg0OTVhMGNlMDc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:32:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "message": "Add segregated witness transaction serialization\n\nContains refactorings by Eric Lombrozo.\nContains fixup by Nicolas Dorier.",
      "tree": {
        "sha": "b044d019dcb97be59d8b823cba3c8e1556bcdb5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b044d019dcb97be59d8b823cba3c8e1556bcdb5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
      "comment_count": 8,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd"
      }
    ],
    "stats": {
      "total": 346,
      "additions": 283,
      "deletions": 63
    },
    "files": [
      {
        "sha": "89eebeb96f2e8a682cfa6b1454d35af16e3c8deb",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -624,7 +624,7 @@ def run_test(self):\n         # test fundrawtransaction with OP_RETURN and no vin #\n         #####################################################\n \n-        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        rawtx   = \"01000000000000010000000000000000066a047465737400000000\"\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         assert_equal(len(dec_tx['vin']), 0)"
      },
      {
        "sha": "85bd52b7f66ae01baecfa9ebd00f15d868c633db",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -96,7 +96,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n         return false;\n \n     vector<unsigned char> txData(ParseHex(strHexTx));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssData >> tx;\n     }\n@@ -113,7 +113,7 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n         return false;\n \n     std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssBlock >> block;\n     }"
      },
      {
        "sha": "fc04546cdcece2bdb80843ca186eb8c7f6d5868e",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -118,7 +118,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n \n string EncodeHexTx(const CTransaction& tx)\n {\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ssTx << tx;\n     return HexStr(ssTx.begin(), ssTx.end());\n }"
      },
      {
        "sha": "87701aa7c500911bc385256c2336559ca6e34656",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -1447,7 +1447,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n     if (fTxIndex) {\n         CDiskTxPos postx;\n         if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             if (file.IsNull())\n                 return error(\"%s: OpenBlockFile failed\", __func__);\n             CBlockHeader header;\n@@ -1506,7 +1506,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n-    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     if (fileout.IsNull())\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n@@ -1529,7 +1529,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     if (filein.IsNull())\n         return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n@@ -1918,7 +1918,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     fileout << blockundo;\n \n     // calculate & write checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     hasher << hashBlock;\n     hasher << blockundo;\n     fileout << hasher.GetHash();\n@@ -1944,7 +1944,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     }\n \n     // Verify checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n@@ -2388,7 +2388,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n+        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n@@ -3447,7 +3447,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n@@ -3965,7 +3965,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         try {\n             CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n-            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n@@ -3996,7 +3996,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -4332,6 +4332,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     switch (inv.type)\n     {\n     case MSG_TX:\n+    case MSG_WITNESS_TX:\n         {\n             assert(recentRejects);\n             if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n@@ -4352,6 +4353,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n                    pcoinsTip->HaveCoinsInCache(inv.hash);\n         }\n     case MSG_BLOCK:\n+    case MSG_WITNESS_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n     }\n     // Don't know what it is, just say we already got one\n@@ -4376,7 +4378,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             boost::this_thread::interruption_point();\n             it++;\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n@@ -4418,6 +4420,8 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         assert(!\"cannot load block from disk\");\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n+                    else if (inv.type == MSG_WITNESS_BLOCK)\n+                        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_WITNESS, NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n                     {\n                         LOCK(pfrom->cs_filter);\n@@ -4452,22 +4456,22 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n             }\n-            else if (inv.IsKnownType())\n+            else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)\n             {\n                 // Send stream from relay memory\n                 bool pushed = false;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, (*mi).second);\n                         pushed = true;\n                     }\n                 }\n-                if (!pushed && inv.type == MSG_TX) {\n+                if (!pushed && (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n-                        pfrom->PushMessage(NetMsgType::TX, tx);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }\n@@ -4479,7 +4483,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             // Track requests for our stuff.\n             GetMainSignals().Inventory(inv.hash);\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n                 break;\n         }\n     }\n@@ -4958,7 +4962,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n-        vRecv >> tx;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> tx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n@@ -5187,7 +5191,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n-        vRecv >> block;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> block;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n         LogPrint(\"net\", \"received block %s peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n@@ -5812,11 +5816,11 @@ bool SendMessages(CNode* pto)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n+                if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n+                if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && !fSendTrickle)\n                 {\n                     // 1/4 of tx invs blast to all immediately\n                     static uint256 hashSalt;"
      },
      {
        "sha": "7783496c3006bff79f29e9a24c8a6990b84cbeed",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -520,7 +520,7 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n+            if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && filterInventoryKnown.contains(inv.hash))\n                 return;\n             vInventoryToSend.push_back(inv);\n         }\n@@ -576,6 +576,23 @@ class CNode\n         }\n     }\n \n+    /** Send a message containing a1, serialized with flag flag. */\n+    template<typename T1>\n+    void PushMessageWithFlag(int flag, const char* pszCommand, const T1& a1)\n+    {\n+        try\n+        {\n+            BeginMessage(pszCommand);\n+            WithOrVersion(&ssSend, flag) << a1;\n+            EndMessage(pszCommand);\n+        }\n+        catch (...)\n+        {\n+            AbortMessage();\n+            throw;\n+        }\n+    }\n+\n     template<typename T1, typename T2>\n     void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)\n     {"
      },
      {
        "sha": "29307aed5be4803efb271634fb3af83ce15732f1",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -38,7 +38,6 @@ class CBlockHeader\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n@@ -120,7 +119,6 @@ class CBlock : public CBlockHeader\n     std::string ToString() const;\n };\n \n-\n /** Describes a place in the block chain to another node such that if the\n  * other node doesn't have the same branch, it can find a recent common trunk.\n  * The further back it is, the further before the fork it may be."
      },
      {
        "sha": "2d93e0e1e8e953a4fd5c1209b1c1eee79db78cf3",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -60,28 +60,34 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n {\n-    return SerializeHash(*this);\n+    return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n void CTransaction::UpdateHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, 0);\n+}\n+\n+uint256 CTransaction::GetWitnessHash() const\n+{\n+    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_WITNESS);\n }\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {\n     UpdateHash();\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     *const_cast<int*>(&nVersion) = tx.nVersion;\n     *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n     *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n+    *const_cast<CTxWitness*>(&wit) = tx.wit;\n     *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n     *const_cast<uint256*>(&hash) = tx.hash;\n     return *this;\n@@ -136,6 +142,8 @@ std::string CTransaction::ToString() const\n         nLockTime);\n     for (unsigned int i = 0; i < vin.size(); i++)\n         str += \"    \" + vin[i].ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < wit.vtxinwit.size(); i++)\n+        str += \"    \" + wit.vtxinwit[i].scriptWitness.ToString() + \"\\n\";\n     for (unsigned int i = 0; i < vout.size(); i++)\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;"
      },
      {
        "sha": "24b04fb50d48bd0925e994b5a175152a03900fd1",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 137,
        "deletions": 11,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -11,6 +11,8 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n+static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -194,8 +196,134 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    if (ser_action.ForRead()) {\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            if (flags == 0 && tx.vin.size() != 0) {\n+                throw std::ios_base::failure(\"Extended transaction format unnecessarily used\");\n+            }\n+        } else {\n+            /* We read a non-empty vin. Assume a normal vout follows. */\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        }\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        if ((flags & 1) && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* The witness flag is present, and we support witnesses. */\n+            flags ^= 1;\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+        if (flags) {\n+            /* Unknown flag in the serialization */\n+            throw std::ios_base::failure(\"Unknown transaction optional data\");\n+        }\n+    } else {\n+        if (nVersion & SERIALIZE_TRANSACTION_WITNESS) {\n+            /* Check whether witnesses need to be serialized. */\n+            if (!tx.wit.IsNull()) {\n+                flags |= 1;\n+            }\n+        }\n+        if (flags || ((nVersion & SERIALIZE_TRANSACTION_WITNESS) != 0 && tx.vin.size() == 0)) {\n+            /* Use extended format in case witnesses are to be serialized. */\n+            std::vector<CTxIn> vinDummy;\n+            READWRITE(vinDummy);\n+            READWRITE(flags);\n+        }\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        if (flags & 1) {\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+    }\n+    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+}\n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n@@ -224,6 +352,7 @@ class CTransaction\n     const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     const uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n@@ -238,13 +367,10 @@ class CTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n-        if (ser_action.ForRead())\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+        if (ser_action.ForRead()) {\n             UpdateHash();\n+        }\n     }\n \n     bool IsNull() const {\n@@ -255,6 +381,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // Compute a hash that includes both transaction and witness data\n+    uint256 GetWitnessHash() const;\n+\n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n@@ -290,6 +419,7 @@ struct CMutableTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n@@ -299,11 +429,7 @@ struct CMutableTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "7687cfe225af550cba83dcb4d8f384467cff6ac7",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -42,7 +42,9 @@ static const char* ppszTypeName[] =\n     \"ERROR\", // Should never occur\n     NetMsgType::TX,\n     NetMsgType::BLOCK,\n-    \"filtered block\" // Should never occur\n+    \"filtered block\", // Should never occur\n+    \"witness block\",\n+    \"witness tx\",\n };\n \n /** All known message types. Keep this in the same order as the list of\n@@ -180,7 +182,8 @@ bool operator<(const CInv& a, const CInv& b)\n \n bool CInv::IsKnownType() const\n {\n-    return (type >= 1 && type < (int)ARRAYLEN(ppszTypeName));\n+    int masked = type & MSG_TYPE_MASK;\n+    return (masked >= 1 && masked <= MSG_TYPE_MAX);\n }\n \n const char* CInv::GetCommand() const"
      },
      {
        "sha": "caf7c6673da2830dab69d2c4e62e3dfe2acebbcf",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -308,12 +308,17 @@ class CInv\n     uint256 hash;\n };\n \n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n enum {\n     MSG_TX = 1,\n     MSG_BLOCK,\n-    // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,\n-    // MSG_FILTERED_BLOCK should not appear in any invs except as a part of getdata.\n+    // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n };\n \n+const int MSG_TYPE_MAX = MSG_FILTERED_BLOCK;\n+\n #endif // BITCOIN_PROTOCOL_H"
      },
      {
        "sha": "d8dc48d780e16b5fc04d052eb90c115590c280f7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -426,7 +426,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     if (!fVerbose)\n     {\n-        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         ssBlock << block;\n         std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n         return strHex;"
      },
      {
        "sha": "2a48cdde782f32f45fdcec7b881a91f7885932f1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -605,7 +605,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n         try {"
      },
      {
        "sha": "6b1eb52bbf8c2292383e2dfdb8d957d6515607b7",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -231,3 +231,15 @@ bool CScript::IsPushOnly() const\n {\n     return this->IsPushOnly(begin());\n }\n+\n+std::string CScriptWitness::ToString() const\n+{\n+    std::string ret = \"CScriptWitness(\";\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (i) {\n+            ret += \", \";\n+        }\n+        ret += HexStr(stack[i]);\n+    }\n+    return ret + \")\";\n+}"
      },
      {
        "sha": "7453b28af77fa94e204a5da14fecb9d3ac2f0d3a",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -631,6 +631,18 @@ class CScript : public CScriptBase\n     }\n };\n \n+struct CScriptWitness\n+{\n+    std::vector<std::vector<unsigned char> > stack;\n+\n+    // Some compilers complain without a default constructor\n+    CScriptWitness() { }\n+\n+    bool IsNull() const { return stack.empty(); }\n+\n+    std::string ToString() const;\n+};\n+\n class CReserveScript\n {\n public:"
      },
      {
        "sha": "e5b0f06cde475105d37967224a724a30503228ae",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -22,6 +22,39 @@\n #include <utility>\n #include <vector>\n \n+template<typename Stream>\n+class OverrideStream\n+{\n+    Stream* stream;\n+public:\n+    const int nType;\n+    const int nVersion;\n+\n+    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator<<(const T& obj)\n+    {\n+        // Serialize to this stream\n+        ::Serialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator>>(T& obj)\n+    {\n+        // Unserialize from this stream\n+        ::Unserialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+};\n+\n+template<typename S>\n+OverrideStream<S> WithOrVersion(S* s, int nVersionFlag)\n+{\n+    return OverrideStream<S>(s, s->GetType(), s->GetVersion() | nVersionFlag);\n+}\n+\n /** Double ended buffer combining vector and stream-like interfaces.\n  *\n  * >> and << read and write unformatted data using the above serialization templates."
      },
      {
        "sha": "f9b8d9d3ef942b083f7a1c7db5d5c82be4d3d5ca",
        "filename": "src/test/data/blanktx.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/blanktx.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/blanktx.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.hex?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -1 +1 @@\n-01000000000000000000\n+010000000000000000000000"
      },
      {
        "sha": "5033bf19edaff96784ac85ffa9f4e77e77a8b570",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -32,7 +32,7 @@\n [\"Tests for CheckTransaction()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"0100000000010000000000000000015100000000\", \"P2SH\"],\n+\"01000000000000010000000000000000015100000000\", \"P2SH\"],\n \n [\"No outputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x05ab9e14d983742513f0f451e105ffb4198d1dd4 EQUAL\"]],"
      },
      {
        "sha": "82b68a9f8916d95818a719b8b52d57492cddd07d",
        "filename": "src/test/data/txcreate2.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/txcreate2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/test/data/txcreate2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.hex?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -1 +1 @@\n-01000000000100000000000000000000000000\n+010000000000000100000000000000000000000000"
      },
      {
        "sha": "13a8e1708cca7c7228b9d62271dbd7a4b07ea05b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -240,7 +240,7 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn, int nSerVersionIn) : pdb(NULL), activeTxn(NULL), nSerVersion(nSerVersionIn)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));"
      },
      {
        "sha": "ef1fff1be34f9a016bd9c900d022056dbd9f2d8b",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -99,8 +99,9 @@ class CDB\n     DbTxn* activeTxn;\n     bool fReadOnly;\n     bool fFlushOnClose;\n+    int nSerVersion;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true, int nSerVersion = CLIENT_VERSION);\n     ~CDB() { Close(); }\n \n public:\n@@ -119,7 +120,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -134,7 +135,7 @@ class CDB\n \n         // Unserialize value\n         try {\n-            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, nSerVersion);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -155,13 +156,13 @@ class CDB\n             assert(!\"Write called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Value\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(SER_DISK, nSerVersion);\n         ssValue.reserve(10000);\n         ssValue << value;\n         Dbt datValue(&ssValue[0], ssValue.size());\n@@ -184,7 +185,7 @@ class CDB\n             assert(!\"Erase called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -204,7 +205,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());"
      },
      {
        "sha": "9a0ec77be03f5fb86527fae1036f5ccd2ffaec27",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -640,8 +640,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssKey(SER_DISK, nSerVersion);\n+            CDataStream ssValue(SER_DISK, nSerVersion);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n@@ -746,8 +746,8 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssKey(SER_DISK, nSerVersion);\n+            CDataStream ssValue(SER_DISK, nSerVersion);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;"
      },
      {
        "sha": "11ad2b10a65700fda0f94b3d47f929cd983d725e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLETDB_H\n \n #include \"amount.h\"\n+#include \"primitives/transaction.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n \n@@ -77,7 +78,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "e35d0200ebc79938fd72cd5ae986cfef046f2d94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzVkMDIwMGViYzc5OTM4ZmQ3MmNkNWFlOTg2Y2ZlZjA0NmYyZDk0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-11T07:55:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Removed ppszTypeName from protocol.cpp",
      "tree": {
        "sha": "c313e0770aa133b7a49e2fc05afeeb1823d0368e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c313e0770aa133b7a49e2fc05afeeb1823d0368e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 34,
      "deletions": 35
    },
    "files": [
      {
        "sha": "87357b059dd423949552306cd3922cb51e62d662",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e35d0200ebc79938fd72cd5ae986cfef046f2d94/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e35d0200ebc79938fd72cd5ae986cfef046f2d94/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=e35d0200ebc79938fd72cd5ae986cfef046f2d94",
        "patch": "@@ -37,16 +37,6 @@ const char *SENDHEADERS=\"sendheaders\";\n const char *FEEFILTER=\"feefilter\";\n };\n \n-static const char* ppszTypeName[] =\n-{\n-    \"ERROR\", // Should never occur\n-    NetMsgType::TX,\n-    NetMsgType::BLOCK,\n-    \"filtered block\", // Should never occur\n-    \"witness block\",\n-    \"witness tx\",\n-};\n-\n /** All known message types. Keep this in the same order as the list of\n  * messages above and in protocol.h.\n  */\n@@ -161,17 +151,13 @@ CInv::CInv(int typeIn, const uint256& hashIn)\n \n CInv::CInv(const std::string& strType, const uint256& hashIn)\n {\n-    unsigned int i;\n-    for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n-    {\n-        if (strType == ppszTypeName[i])\n-        {\n-            type = i;\n-            break;\n-        }\n-    }\n-    if (i == ARRAYLEN(ppszTypeName))\n+    if (strType == NetMsgType::TX)\n+        type = MSG_TX;\n+    else if (strType == NetMsgType::BLOCK)\n+        type = MSG_BLOCK;\n+    else\n         throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n+\n     hash = hashIn;\n }\n \n@@ -188,9 +174,14 @@ bool CInv::IsKnownType() const\n \n const char* CInv::GetCommand() const\n {\n-    if (!IsKnownType())\n+    int masked = type & MSG_TYPE_MASK;\n+    switch (masked)\n+    {\n+    case MSG_TX:    return NetMsgType::TX;\n+    case MSG_BLOCK: return NetMsgType::BLOCK;\n+    default:\n         throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n-    return ppszTypeName[type];\n+    }\n }\n \n std::string CInv::ToString() const"
      },
      {
        "sha": "f356a7b6f17752247e8506005c4a5d67405e357e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e35d0200ebc79938fd72cd5ae986cfef046f2d94/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e35d0200ebc79938fd72cd5ae986cfef046f2d94/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=e35d0200ebc79938fd72cd5ae986cfef046f2d94",
        "patch": "@@ -279,6 +279,27 @@ class CAddress : public CService\n     unsigned int nTime;\n };\n \n+/** getdata message types */\n+enum GetDataMsg\n+{\n+    MSG_TX = 1,\n+    MSG_BLOCK,\n+    MSG_TYPE_MAX = MSG_BLOCK,\n+    // The following can only occur in getdata. Invs always use TX or BLOCK.\n+    MSG_FILTERED_BLOCK,\n+    UNDEFINED,\n+};\n+\n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+\n+enum GetDataMsgWithFlags\n+{\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n+    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n+};\n+\n /** inv message data */\n class CInv\n {\n@@ -308,17 +329,4 @@ class CInv\n     uint256 hash;\n };\n \n-const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n-enum {\n-    MSG_TX = 1,\n-    MSG_BLOCK,\n-    // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK,\n-    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n-    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n-};\n-\n-const int MSG_TYPE_MAX = MSG_FILTERED_BLOCK;\n-\n #endif // BITCOIN_PROTOCOL_H"
      }
    ]
  },
  {
    "sha": "adb1c09b8729ee3e1a8460e152e6ef987051d01a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGIxYzA5Yjg3MjllZTNlMWE4NDYwZTE1MmU2ZWY5ODcwNTFkMDFh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-16T01:29:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "getdata enum issue fix",
      "tree": {
        "sha": "dd57341c449d55d08c37e4d7502f187c9564bc0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd57341c449d55d08c37e4d7502f187c9564bc0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e35d0200ebc79938fd72cd5ae986cfef046f2d94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e35d0200ebc79938fd72cd5ae986cfef046f2d94"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e3710c8f01168b5d360d41d2d01cf8b4e17aa34b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c09b8729ee3e1a8460e152e6ef987051d01a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c09b8729ee3e1a8460e152e6ef987051d01a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=adb1c09b8729ee3e1a8460e152e6ef987051d01a",
        "patch": "@@ -280,21 +280,16 @@ class CAddress : public CService\n };\n \n /** getdata message types */\n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n enum GetDataMsg\n {\n-    MSG_TX = 1,\n+    UNDEFINED = 0,\n+    MSG_TX,\n     MSG_BLOCK,\n     MSG_TYPE_MAX = MSG_BLOCK,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n-    UNDEFINED,\n-};\n-\n-const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n-\n-enum GetDataMsgWithFlags\n-{\n     MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n     MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,"
      }
    ]
  },
  {
    "sha": "ac6886d30d21501300ec287e9cc4d79a48301a9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzY4ODZkMzBkMjE1MDEzMDBlYzI4N2U5Y2M0ZDc5YTQ4MzAxYTlm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-16T23:20:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Introduce and preferentially peer with NODE_WITNESS service bit\n\nService bit logic by Nicolas Dorier.",
      "tree": {
        "sha": "8e4302e17c854f4fbddf6d2a7643c43e3f6c6e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e4302e17c854f4fbddf6d2a7643c43e3f6c6e09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac6886d30d21501300ec287e9cc4d79a48301a9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adb1c09b8729ee3e1a8460e152e6ef987051d01a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c09b8729ee3e1a8460e152e6ef987051d01a"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 30,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4ed19975720b85f1af00a9255c3b508183e536f6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "patch": "@@ -265,6 +265,8 @@ struct CNodeState {\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n     bool fPreferHeaders;\n+    //! Whether this peer can give us witnesses\n+    bool fHaveWitness;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -281,6 +283,7 @@ struct CNodeState {\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n+        fHaveWitness = false;\n     }\n };\n \n@@ -4600,6 +4603,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n \n+        if((pfrom->nServices & NODE_WITNESS))\n+        {\n+            LOCK(cs_main);\n+            State(pfrom->GetId())->fHaveWitness = true;\n+        }\n+\n         // Potentially mark this peer as a preferred download peer.\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n \n@@ -4782,14 +4791,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n-            const CInv &inv = vInv[nInv];\n+            CInv &inv = vInv[nInv];\n \n             boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n+            if (inv.type == MSG_TX && State(pfrom->GetId())->fHaveWitness) {\n+                inv.type = MSG_WITNESS_TX;\n+            }\n+\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -4805,6 +4818,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        if (State(pfrom->GetId())->fHaveWitness) {\n+                            inv.type = MSG_WITNESS_BLOCK;\n+                        }\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n@@ -5883,7 +5899,7 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n                 LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);"
      },
      {
        "sha": "cde2ef0dab652e7d9882150946b07140bab5ecf9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "patch": "@@ -72,14 +72,14 @@ namespace {\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n /** Services this node implementation cares about */\n-static const uint64_t nRelevantServices = NODE_NETWORK;\n+static const uint64_t nRelevantServices = NODE_NETWORK | NODE_WITNESS;\n \n //\n // Global state variables\n //\n bool fDiscover = true;\n bool fListen = true;\n-uint64_t nLocalServices = NODE_NETWORK;\n+uint64_t nLocalServices = NODE_NETWORK | NODE_WITNESS;\n CCriticalSection cs_mapLocalHost;\n map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n@@ -1601,6 +1601,10 @@ void ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n+            // only consider non-witness nodes after 40 failed attemps\n+            if (!(addr.nServices & NODE_WITNESS) && nTries < 40)\n+                continue;\n+\n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n             if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n                 continue;"
      },
      {
        "sha": "c6d84e1fd64b2779a95871eaec1331e2183e98d9",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "patch": "@@ -236,6 +236,9 @@ enum {\n     // Bitcoin Core nodes used to support this by default, without advertising this bit,\n     // but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)\n     NODE_BLOOM = (1 << 2),\n+    // Indicates that a node can be asked for blocks and transactions including\n+    // witness data.\n+    NODE_WITNESS = (1 << 3),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "728131b7864c1631a60f3a0c46570726d5a18736",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac6886d30d21501300ec287e9cc4d79a48301a9f/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "patch": "@@ -39,4 +39,7 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n+//! Version after which witness support potentially exists\n+static const int WITNESS_VERSION = 70013;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjlkNGQzNGNhYjc4MzRmOTA1MDI5M2FiOTBhODdhMTliZDhmZjYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:42:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Witness commitment validation\n\nIncludes a fix by Suhas Daftuar",
      "tree": {
        "sha": "981ceba093fa81898dbc80a049be0fda5ed73f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981ceba093fa81898dbc80a049be0fda5ed73f76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac6886d30d21501300ec287e9cc4d79a48301a9f"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 187,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4a345092f81c1a6590784b298ee0fd96cb3033db",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -93,6 +93,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -184,6 +189,11 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -260,6 +270,9 @@ class CSegNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n \n         genesis = CreateGenesisBlock(1452831101, 0, UintToArith256(consensus.powLimit).GetCompact(), 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -312,6 +325,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n@@ -376,3 +392,4 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n+ "
      },
      {
        "sha": "35f7d2e05a937f5f2a26382d08a2d24312216b81",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -165,6 +165,17 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n     return ComputeMerkleRoot(leaves, mutated);\n }\n \n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    leaves[0].SetNull(); // The witness hash of the coinbase is 0.\n+    for (size_t s = 1; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetWitnessHash();\n+    }\n+    return ComputeMerkleRoot(leaves, mutated);\n+}\n+\n std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n {\n     std::vector<uint256> leaves;"
      },
      {
        "sha": "194aea9b75dc30fbedac6450d8d938f24e9878cd",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -22,6 +22,12 @@ uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint2\n  */\n uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = NULL);\n \n+/*\n+ * Compute the Merkle root of the witness transactions in a block.\n+ * *mutated is set to true if a duplicated subtree was found.\n+ */\n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = NULL);\n+\n /*\n  * Compute the Merkle branch for the tree of transactions in a block, for a\n  * given position."
      },
      {
        "sha": "b7c552b82146790371e2a6ba0a64e86b71ff6161",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -16,6 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n+    DEPLOYMENT_WITNESS,\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "f2a67a852d81bca5d2d7b4a7c991c3fbf6523542",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -1036,6 +1036,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n     }\n \n+    // Don't accept witness transactions before the final threshold passes\n+    if (!tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n+    }\n+\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n@@ -3304,6 +3309,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+        }\n+    }\n+    static const std::vector<unsigned char> nonce(32, 0x00);\n+    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && block.vtx[0].wit.IsEmpty()) {\n+        block.vtx[0].wit.vtxinwit.resize(1);\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.resize(1);\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0] = nonce;\n+    }\n+}\n+\n+std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    std::vector<unsigned char> commitment;\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+        }\n+    }\n+    bool fHaveWitness = false;\n+    for (size_t t = 1; t < block.vtx.size(); t++) {\n+        if (!block.vtx[t].wit.IsNull()) {\n+            fHaveWitness = true;\n+            break;\n+        }\n+    }\n+    std::vector<unsigned char> ret(32, 0x00);\n+    if (fHaveWitness && IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        if (commitpos == -1) {\n+            uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n+            CHash256().Write(witnessroot.begin(), 32).Write(&ret[0], 32).Finalize(witnessroot.begin());\n+            CTxOut out;\n+            out.nValue = 0;\n+            out.scriptPubKey.resize(38);\n+            out.scriptPubKey[0] = OP_RETURN;\n+            out.scriptPubKey[1] = 0x24;\n+            out.scriptPubKey[2] = 0xaa;\n+            out.scriptPubKey[3] = 0x21;\n+            out.scriptPubKey[4] = 0xa9;\n+            out.scriptPubKey[5] = 0xed;\n+            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n+            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n+            const_cast<std::vector<CTxOut>*>(&block.vtx[0].vout)->push_back(out);\n+            block.vtx[0].UpdateHash();\n+        }\n+    }\n+    UpdateUncommitedBlockStructures(block, pindexPrev, consensusParams);\n+    return commitment;\n+}\n+\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n@@ -3357,6 +3424,48 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   multiple, the last one is used.\n+    bool fHaveWitness = false;\n+    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        int commitpos = -1;\n+        for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+            if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+                commitpos = o;\n+            }\n+        }\n+        if (commitpos != -1) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);\n+            }\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+            }\n+            fHaveWitness = true;\n+        }\n+    }\n+\n+    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam\n+    if (!fHaveWitness) {\n+        for (size_t i = 0; i < block.vtx.size(); i++) {\n+            if (!block.vtx[i].wit.IsNull()) {\n+                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+            }\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "49c035a83c9084d440ccb8f5328e9fa35d9e12f8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -469,6 +469,17 @@ bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockI\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+/** Check whether witness commitments are required for block. */\n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n+/** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n+/** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n+std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n \n class CBlockFileInfo\n {"
      },
      {
        "sha": "db27e5f6ea8937e748f230efd64fbf786cae8b4e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -138,6 +138,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         if (chainparams.MineBlocksOnDemand())\n             pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n+        // Decide whether to include witness transactions (temporary)\n+        bool fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();\n@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())\n+                continue; // cannot accept witness transactions into a non-witness block\n+\n             bool fOrphan = false;\n             BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n             {\n@@ -280,6 +286,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n+        pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n@@ -298,7 +305,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -310,7 +317,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << vchCoinbaseCommitment << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;"
      },
      {
        "sha": "0154d1a0e97961387131e592a6d8097cb46b5734",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -24,12 +24,13 @@ struct CBlockTemplate\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n+    std::vector<unsigned char> vchCoinbaseCommitment;\n };\n \n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "9ac590e5afa0a342528610c28097d1a52433ce9c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -332,7 +332,6 @@ class CTransaction\n private:\n     /** Memory only. */\n     const uint256 hash;\n-    void UpdateHash() const;\n \n public:\n     // Default transaction version.\n@@ -411,6 +410,8 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n+\n+    void UpdateHash() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "3bb6c298dcec3f7035db7d3a61489ff9bd7d9a93",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -751,6 +751,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     bip9_softforks.push_back(Pair(\"csv\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_CSV)));\n+    bip9_softforks.push_back(Pair(\"witness\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_WITNESS)));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      },
      {
        "sha": "1b12d684db8ce67ce58e9ae76a7c9038d8ae059e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -117,7 +117,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n-            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n+            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n         }\n         while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n             ++pblock->nNonce;\n@@ -330,7 +330,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal\\n\"\n             \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n             \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n@@ -511,7 +512,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {\n         uint256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n \n@@ -521,8 +522,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         UniValue entry(UniValue::VOBJ);\n \n         entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-\n-        entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n+        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n         BOOST_FOREACH (const CTxIn &in, tx.vin)\n@@ -569,6 +570,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n+        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+    }\n \n     return result;\n }\n@@ -632,6 +636,14 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         }\n     }\n \n+    {\n+        LOCK(cs_main);\n+        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        if (mi != mapBlockIndex.end()) {\n+            UpdateUncommitedBlockStructures(block, mi->second, Params().GetConsensus());\n+        }\n+    }\n+\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);"
      },
      {
        "sha": "bd7dc5f271fe7a0f68930f9a8c9381221e55ce97",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9d4d34cab7834f9050293ab90a87a19bd8ff61/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "patch": "@@ -109,7 +109,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(tx);\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce, pblocktemplate->vchCoinbaseCommitment);\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "2c87be126f4ba420adbca47190b029f0f1029670",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzg3YmUxMjZmNGJhNDIwYWRiY2E0NzE5MGIwMjlmMGYxMDI5Njcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-08T00:16:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Script validation logic for witnesses",
      "tree": {
        "sha": "31eb1bb7e6ee89a41fe4fafcc22f066af2546ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31eb1bb7e6ee89a41fe4fafcc22f066af2546ac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c87be126f4ba420adbca47190b029f0f1029670",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c87be126f4ba420adbca47190b029f0f1029670",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c87be126f4ba420adbca47190b029f0f1029670",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c87be126f4ba420adbca47190b029f0f1029670/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9d4d34cab7834f9050293ab90a87a19bd8ff61"
      }
    ],
    "stats": {
      "total": 238,
      "additions": 201,
      "deletions": 37
    },
    "files": [
      {
        "sha": "315c2275037ba4cac21972fd8ee797639df9a64d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -467,7 +467,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "564d7db146ff7a18df88deb64ada0f43119273cb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -1786,7 +1786,8 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n+    const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "a6bcc777ff51d21e6cbb0b422232ae70010afa53",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -41,7 +41,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n                                                          SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n-                                                         SCRIPT_VERIFY_LOW_S;\n+                                                         SCRIPT_VERIFY_LOW_S |\n+                                                         SCRIPT_VERIFY_WITNESS |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "fec799acfd235564f209b09c750316bb681d6ced",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -763,7 +763,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "5c9e7c0a571a5cab15c259671c496570b6020ed5",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -85,7 +85,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "2600cea2c3eb939b10f42d10a6585a34e8841596",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 2,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -1239,8 +1239,67 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n+    vector<vector<unsigned char> > stack;\n+    CScript scriptPubKey;\n+\n+    if (witversion == 0) {\n+        if (program.size() == 32) {\n+            // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n+            if (witness.stack.size() == 0) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+            }\n+            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+            uint256 hashScriptPubKey;\n+            CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n+            if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+        } else if (program.size() == 20) {\n+            // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n+            if (witness.stack.size() != 2) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n+            }\n+            scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            stack = witness.stack;\n+        } else {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n+        }\n+    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    } else {\n+        // Higher version witness scripts return true for future softfork compatibility\n+        return set_success(serror);\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    }\n+\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+        return false;\n+    }\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1)\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    if (!CastToBool(stack.back()))\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    static const CScriptWitness emptyWitness;\n+    if (witness == NULL) {\n+        witness = &emptyWitness;\n+    }\n+    bool hadWitness = false;\n+\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n \n     if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !scriptSig.IsPushOnly()) {\n@@ -1261,6 +1320,25 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n     if (CastToBool(stack.back()) == false)\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n \n+    // Bare witness programs\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            hadWitness = true;\n+            if (scriptSig.size() != 0) {\n+                // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n+                return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n+            }\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                return false;\n+            }\n+            // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+            // for witness programs.\n+            stack.resize(1);\n+        }\n+    }\n+\n     // Additional validation for spend-to-script-hash transactions:\n     if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n     {\n@@ -1287,19 +1365,48 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n         if (!CastToBool(stack.back()))\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+\n+        // P2SH witness program\n+        if (flags & SCRIPT_VERIFY_WITNESS) {\n+            if (pubKey2.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                hadWitness = true;\n+                if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n+                    // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n+                    // reintroduce malleability.\n+                    return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n+                }\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                    return false;\n+                }\n+                // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+                // for witness programs.\n+                stack.resize(1);\n+            }\n+        }\n     }\n \n     // The CLEANSTACK check is only performed after potential P2SH evaluation,\n     // as the non-P2SH evaluation of a P2SH script will obviously not result in\n-    // a clean stack (the P2SH inputs remain).\n+    // a clean stack (the P2SH inputs remain). The same holds for witness evaluation.\n     if ((flags & SCRIPT_VERIFY_CLEANSTACK) != 0) {\n         // Disallow CLEANSTACK without P2SH, as otherwise a switch CLEANSTACK->P2SH+CLEANSTACK\n         // would be possible, which is not a softfork (and P2SH should be one).\n         assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        assert((flags & SCRIPT_VERIFY_WITNESS) != 0);\n         if (stack.size() != 1) {\n             return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n         }\n     }\n \n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        // We can't check for correct unexpected witness data if P2SH was off, so require\n+        // that WITNESS implies P2SH. Otherwise, going from WITNESS->P2SH+WITNESS would be\n+        // possible, which is not a softfork.\n+        assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        if (!hadWitness && !witness->IsNull()) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_UNEXPECTED);\n+        }\n+    }\n+\n     return set_success(serror);\n }"
      },
      {
        "sha": "1f550cd42b80d07701409e876a4f3276ff80ee5a",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -74,7 +74,7 @@ enum\n     // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n     // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n     // (softfork safe, BIP62 rule 6)\n-    // Note: CLEANSTACK should never be used without P2SH.\n+    // Note: CLEANSTACK should never be used without P2SH or WITNESS.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n \n     // Verify CHECKLOCKTIMEVERIFY\n@@ -86,6 +86,14 @@ enum\n     //\n     // See BIP112 for details\n     SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n+\n+    // Support segregated witness\n+    //\n+    SCRIPT_VERIFY_WITNESS = (1U << 11),\n+\n+    // Making v2-v16 witness program non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n@@ -139,6 +147,6 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "cabee7dc979c7de366b01e4e7402deb325467fde",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -210,6 +210,24 @@ bool CScript::IsPayToScriptHash() const\n             (*this)[22] == OP_EQUAL);\n }\n \n+// A witness program is any valid CScript that consists of a 1-byte push opcode\n+// followed by a data push between 2 and 32 bytes.\n+bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const\n+{\n+    if (this->size() < 4 || this->size() > 34) {\n+        return false;\n+    }\n+    if ((*this)[0] != OP_0 && ((*this)[0] < OP_1 || (*this)[0] > OP_16)) {\n+        return false;\n+    }\n+    if ((size_t)((*this)[1] + 2) == this->size()) {\n+        version = DecodeOP_N((opcodetype)(*this)[0]);\n+        program = std::vector<unsigned char>(this->begin() + 2, this->end());\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CScript::IsPushOnly(const_iterator pc) const\n {\n     while (pc < end())"
      },
      {
        "sha": "2d02a554ed425c2b793a96f43f88b916a5a0ebde",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -609,6 +609,7 @@ class CScript : public CScriptBase\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n+    bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly(const_iterator pc) const;"
      },
      {
        "sha": "cef807edcf475a5acfe61454ff2284580a630354",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -65,8 +65,22 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Dummy CHECKMULTISIG argument must be zero\";\n         case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS:\n             return \"NOPx reserved for soft-fork upgrades\";\n+        case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM:\n+            return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_PUBKEYTYPE:\n             return \"Public key is neither compressed or uncompressed\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH:\n+            return \"Witness program has incorrect length\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY:\n+            return \"Witness program was passed an empty witness\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH:\n+            return \"Witness program hash mismatch\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED:\n+            return \"Witness requires empty scriptSig\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED_P2SH:\n+            return \"Witness requires only-redeemscript scriptSig\";\n+        case SCRIPT_ERR_WITNESS_UNEXPECTED:\n+            return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "09dc6945adb45286a88f748b6da232c9af1d2069",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -51,6 +51,15 @@ typedef enum ScriptError_t\n \n     /* softfork safeness */\n     SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,\n+    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,\n+\n+    /* segregated witness */\n+    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,\n+    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,\n+    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,\n+    SCRIPT_ERR_WITNESS_MALLEATED,\n+    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n+    SCRIPT_ERR_WITNESS_UNEXPECTED,\n \n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;"
      },
      {
        "sha": "37b702de17cb613f05ed6c6a7885d7a67ac74fc3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -123,7 +123,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     }\n \n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      },
      {
        "sha": "a6435d94d3ad4dd7f0d98c4922244929f35e6e04",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -81,20 +81,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -105,18 +105,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -128,12 +128,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "d6b5f41d44ac5e9ffcf3c6dde545fd48f74f3535",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "8cdf8d6c7bb370001e908c871d195ea182028e51",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -147,10 +147,14 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -796,18 +800,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -829,54 +833,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n@@ -996,7 +1000,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << i;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n \n@@ -1005,7 +1009,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << data;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Length \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n }"
      },
      {
        "sha": "6c460445a812112964cc09741e2f0cc8dfa3100c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c87be126f4ba420adbca47190b029f0f1029670/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c87be126f4ba420adbca47190b029f0f1029670/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2c87be126f4ba420adbca47190b029f0f1029670",
        "patch": "@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "1e478052ca3222d13ce3646dd152ebcf27f07e76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ3ODA1MmNhMzIyMmQxM2NlMzY0NmRkMTUyZWJjZjI3ZjA3ZTc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T00:04:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Enable SCRIPT_VERIFY_WITNESS for mempool transactions",
      "tree": {
        "sha": "246d5b2b2224e09b3549e012ed08a353582b6093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/246d5b2b2224e09b3549e012ed08a353582b6093"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c87be126f4ba420adbca47190b029f0f1029670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c87be126f4ba420adbca47190b029f0f1029670",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c87be126f4ba420adbca47190b029f0f1029670"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "000b1972702718403466354b0dc47b80c36dcf8e",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e478052ca3222d13ce3646dd152ebcf27f07e76/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e478052ca3222d13ce3646dd152ebcf27f07e76/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=1e478052ca3222d13ce3646dd152ebcf27f07e76",
        "patch": "@@ -77,6 +77,9 @@ class CValidationState {\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }\n+    void SetCorruptionPossible() {\n+        corruptionPossible = true;\n+    }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n     std::string GetDebugMessage() const { return strDebugMessage; }"
      },
      {
        "sha": "a6d628aa4774af55db9bcb2c382052676df01bf2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e478052ca3222d13ce3646dd152ebcf27f07e76/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e478052ca3222d13ce3646dd152ebcf27f07e76/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1e478052ca3222d13ce3646dd152ebcf27f07e76",
        "patch": "@@ -1383,8 +1383,17 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-            return false; // state filled in by CheckInputs\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true)) {\n+            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+            // need to turn both off, and compare against just turning off CLEANSTACK\n+            // to see if the failure is specifically due to witness validation.\n+            if (CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n+                !CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+                // Only the witness is wrong, so the transaction itself may be fine.\n+                state.SetCorruptionPossible();\n+            }\n+            return false;\n+        }\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -5176,8 +5185,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            assert(recentRejects);\n-            recentRejects->insert(tx.GetHash());\n+            if (!state.CorruptionPossible()) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());\n+            }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n@@ -5206,8 +5217,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n-            if (nDoS > 0)\n+            if (nDoS > 0 && (!state.CorruptionPossible() || State(pfrom->id)->fHaveWitness)) {\n+                // When a non-witness-supporting peer gives us a transaction that would\n+                // be accepted if witness validation was off, we can't blame them for it.\n                 Misbehaving(pfrom->GetId(), nDoS);\n+            }\n         }\n         FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }"
      }
    ]
  },
  {
    "sha": "97f34f793fd9e72dfa18d2dc049402af0cd217ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2YzNGY3OTNmZDllNzJkZmExOGQyZGMwNDk0MDJhZjBjZDIxN2Vh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T15:27:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Activate script consensus rules through BIP9",
      "tree": {
        "sha": "ab9ef1627963607d31d9274e7fc48e0e30464fcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab9ef1627963607d31d9274e7fc48e0e30464fcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e478052ca3222d13ce3646dd152ebcf27f07e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cd4efdb70e319f1576a02a41b557592ac7e928c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97f34f793fd9e72dfa18d2dc049402af0cd217ea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97f34f793fd9e72dfa18d2dc049402af0cd217ea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=97f34f793fd9e72dfa18d2dc049402af0cd217ea",
        "patch": "@@ -2334,6 +2334,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n+    // Start enforcing WITNESS rules using versionbits logic.\n+    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n "
      }
    ]
  },
  {
    "sha": "6a8021fac7138d42ae6fccd305e958ef2f1acb88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTgwMjFmYWM3MTM4ZDQyYWU2ZmNjZDMwNWU5NThlZjJmMWFjYjg4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-29T01:37:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Only download blocks from witness peers after fork",
      "tree": {
        "sha": "d55a2f1a4ade63774e785a58bafadc7444ddb6eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d55a2f1a4ade63774e785a58bafadc7444ddb6eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97f34f793fd9e72dfa18d2dc049402af0cd217ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97f34f793fd9e72dfa18d2dc049402af0cd217ea"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1bd4dde54db84cffc10fbbc1f32b74832f3f0ed8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a8021fac7138d42ae6fccd305e958ef2f1acb88/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a8021fac7138d42ae6fccd305e958ef2f1acb88/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6a8021fac7138d42ae6fccd305e958ef2f1acb88",
        "patch": "@@ -4941,7 +4941,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n-                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n+                        (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         if (State(pfrom->GetId())->fHaveWitness) {\n                             inv.type = MSG_WITNESS_BLOCK;\n                         }\n@@ -5293,7 +5294,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash())) {\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -5315,7 +5317,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Can't download any more from this peer\n                         break;\n                     }\n-                    vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                    vGetData.push_back(CInv(State(pfrom->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n                     LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n@@ -6028,10 +6030,12 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                    pindex->nHeight, pto->id);\n+                if (State(pto->GetId())->fHaveWitness || !IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+                    vGetData.push_back(CInv(State(pto->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n+                    LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                        pindex->nHeight, pto->id);\n+                }\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {"
      }
    ]
  },
  {
    "sha": "271e45ef04584328d791dba18c47c14d8da45f13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzFlNDVlZjA0NTg0MzI4ZDc5MWRiYTE4YzQ3YzE0ZDhkYTQ1ZjEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:51:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Observe input amounts: verification",
      "tree": {
        "sha": "9e08d02a6f901845556a78a49b1254b7595b77bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e08d02a6f901845556a78a49b1254b7595b77bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/271e45ef04584328d791dba18c47c14d8da45f13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e45ef04584328d791dba18c47c14d8da45f13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/271e45ef04584328d791dba18c47c14d8da45f13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e45ef04584328d791dba18c47c14d8da45f13/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a8021fac7138d42ae6fccd305e958ef2f1acb88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8021fac7138d42ae6fccd305e958ef2f1acb88"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 48,
      "deletions": 36
    },
    "files": [
      {
        "sha": "0abc3c6050bcbdc3c584a1dc7b60bab99e694e78",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -457,6 +457,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n@@ -467,7 +468,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "dc3404df030ebd13077377b919a5371f6a77dcde",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -1796,7 +1796,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n-    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore), &error)) {\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "760bd342aec20f5d13706ddc852e532fd5bf04da",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -411,23 +411,25 @@ class CScriptCheck\n {\n private:\n     CScript scriptPubKey;\n+    CAmount amount;\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n     bool cacheStore;\n     ScriptError error;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n     CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n-        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n+        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n         ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n \n     bool operator()();\n \n     void swap(CScriptCheck &check) {\n         scriptPubKey.swap(check.scriptPubKey);\n         std::swap(ptxTo, check.ptxTo);\n+        std::swap(amount, check.amount);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);"
      },
      {
        "sha": "54f786d0b8f5dc371bf5a582d9fe617b5d8609ad",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -752,6 +752,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n@@ -763,7 +764,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "26e7a85b7b7229c33b01f4542996d20f4b983cf5",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -85,7 +85,8 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        CAmount am(0);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "cd3e2f773177b4d4c95db355ebbe9b9b1ac83533",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_BITCOINCONSENSUS_H\n #define BITCOIN_BITCOINCONSENSUS_H\n \n+#include <stdint.h>\n+\n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n   #if defined(_WIN32)"
      },
      {
        "sha": "acec970bb187912cfe14dc5d3c1638f47a592d18",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -131,7 +131,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n@@ -143,7 +143,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);"
      },
      {
        "sha": "050bf8cc4229089251bf3fc6d977e17ee000f193",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -22,7 +22,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn) : TransactionSignatureChecker(txToIn, nInIn, amount), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "62d874eed45845dbdd5548626673995d88404617",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -18,7 +18,8 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+static const CAmount amountZero = 0;\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amountZero) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n@@ -258,7 +259,7 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatur\n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n {\n-    TransactionSignatureChecker checker(&txTo, nIn);\n+    TransactionSignatureChecker checker(&txTo, nIn, amountZero);\n     return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n }\n "
      },
      {
        "sha": "8c95601ea1a0838f5809a4a6511f555bfd4352b4",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -46,6 +46,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n     ScriptError err;\n     CKey key[4];\n+    CAmount amount = 0;\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n@@ -81,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -105,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -128,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "62deb736aad2210d6ca665212a202f05c53297ca",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue), &err);\n }\n \n "
      },
      {
        "sha": "850fe82a3f107bb6c056c8324171a26c4d5c0dd5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -154,7 +154,8 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    static const CAmount amountZero = 0;\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, amountZero), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -800,18 +801,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -833,54 +834,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n "
      },
      {
        "sha": "87737ed26ab98840e981f4fa42b96ee415e240fc",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e45ef04584328d791dba18c47c14d8da45f13/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e45ef04584328d791dba18c47c14d8da45f13/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=271e45ef04584328d791dba18c47c14d8da45f13",
        "patch": "@@ -149,9 +149,10 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n+                CAmount amount = 0;\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -224,8 +225,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+                CAmount amount = 0;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "d374139b87d96a3ab4582351ddf52f57b85aee3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzc0MTM5Yjg3ZDk2YTNhYjQ1ODIzNTFkZGY1MmY1N2I4NWFlZTNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-27T18:49:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "message": "Add signature version 1 with updated sighash\n\nIncludes simplifications by Eric Lombrozo.",
      "tree": {
        "sha": "96e44496af1ad7170a841bd03559200ab17baaab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96e44496af1ad7170a841bd03559200ab17baaab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d374139b87d96a3ab4582351ddf52f57b85aee3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "271e45ef04584328d791dba18c47c14d8da45f13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e45ef04584328d791dba18c47c14d8da45f13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271e45ef04584328d791dba18c47c14d8da45f13"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 124,
      "deletions": 62
    },
    "files": [
      {
        "sha": "93f4ac467763694f6e4fcda74d127aa17d3980a4",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -466,7 +466,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;"
      },
      {
        "sha": "f1a341563a060ed099694ed0f070b7356e72ea6e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -761,7 +761,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {"
      },
      {
        "sha": "64e065653d4ac7f1cbbb2e1bce56a6934cbfc7fc",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 12,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -229,7 +229,7 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -869,13 +869,15 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     CScript scriptCode(pbegincodehash, pend);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n-                    scriptCode.FindAndDelete(CScript(vchSig));\n+                    if (sigversion == 0) {\n+                        scriptCode.FindAndDelete(CScript(vchSig));\n+                    }\n \n                     if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n                         //serror is set\n                         return false;\n                     }\n-                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -925,7 +927,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n-                        scriptCode.FindAndDelete(CScript(vchSig));\n+                        if (sigversion == 0) {\n+                            scriptCode.FindAndDelete(CScript(vchSig));\n+                        }\n                     }\n \n                     bool fSuccess = true;\n@@ -943,7 +947,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         }\n \n                         // Check signature\n-                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                         if (fOk) {\n                             isig++;\n@@ -1106,8 +1110,64 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n {\n+    if (sigversion == 1) {\n+        uint256 hashPrevouts;\n+        uint256 hashSequence;\n+        uint256 hashOutputs;\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].prevout;\n+            }\n+            hashPrevouts = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].nSequence;\n+            }\n+            hashSequence = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n+                ss << txTo.vout[n];\n+            }\n+            hashOutputs = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << txTo.vout[nIn];\n+            hashOutputs = ss.GetHash();\n+        }\n+\n+        CHashWriter ss(SER_GETHASH, 0);\n+        // Version\n+        ss << txTo.nVersion;\n+        // Input prevouts/nSequence (none/all, depending on flags)\n+        ss << hashPrevouts;\n+        ss << hashSequence;\n+        // The input being signed (replacing the scriptSig with scriptCode + amount)\n+        // The prevout may already be contained in hashPrevout, and the nSequence\n+        // may already be contain in hashSequence.\n+        ss << txTo.vin[nIn].prevout;\n+        ss << static_cast<const CScriptBase&>(scriptCode);\n+        ss << amount;\n+        ss << txTo.vin[nIn].nSequence;\n+        // Outputs (none/one/all, depending on flags)\n+        ss << hashOutputs;\n+        // Locktime\n+        ss << txTo.nLockTime;\n+        // Sighash type\n+        ss << nHashType;\n+\n+        return ss.GetHash();\n+    }\n+\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n@@ -1136,7 +1196,7 @@ bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned cha\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1149,7 +1209,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n@@ -1280,7 +1340,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 1, serror)) {\n         return false;\n     }\n \n@@ -1307,12 +1367,12 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     }\n \n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, flags, checker, serror))\n+    if (!EvalScript(stack, scriptSig, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (stack.empty())\n@@ -1358,7 +1418,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stack);\n \n-        if (!EvalScript(stack, pubKey2, flags, checker, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, 0, serror))\n             // serror is set\n             return false;\n         if (stack.empty())"
      },
      {
        "sha": "9761a32181dad61c44792c01ac4484cae274813e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -98,12 +98,12 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion);\n \n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return false;\n     }\n@@ -126,13 +126,14 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n private:\n     const CTransaction* txTo;\n     unsigned int nIn;\n+    const CAmount amount;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n };\n@@ -146,7 +147,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "b08f6312da54bb85710a1534bf75d9292618b082",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -18,16 +18,15 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-static const CAmount amountZero = 0;\n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amountZero) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, 0);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n@@ -186,7 +185,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (checker.CheckSig(sig, pubkey, scriptPubKey))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -256,10 +255,10 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatur\n     return CScript();\n }\n \n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n {\n-    TransactionSignatureChecker checker(&txTo, nIn, amountZero);\n+    TransactionSignatureChecker checker(&txTo, nIn, amount);\n     return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n }\n \n@@ -271,9 +270,9 @@ CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecke\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n \n     return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }\n@@ -285,7 +284,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return true;\n     }"
      },
      {
        "sha": "f54511f7a67f5d23a82b202cb2cb42f9ea1b1e14",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -35,10 +35,11 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     const CTransaction* txTo;\n     unsigned int nIn;\n     int nHashType;\n+    CAmount amount;\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n@@ -62,6 +63,6 @@ bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutab\n CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n \n /** Combine two script signatures on transactions. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n+CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "17848aa7efd8cc10e0153568e5ea5b96982b9523",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -26,7 +26,7 @@ BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "da99db022e7b53cecd9ffb49b791d30a8eac4212",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 28,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -306,7 +306,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType, 0, 0);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -735,29 +735,29 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }\n \n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     //\n@@ -888,6 +888,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the CombineSignatures function\n+    CAmount amount;\n     CBasicKeyStore keystore;\n     vector<CKey> keys;\n     vector<CPubKey> pubkeys;\n@@ -906,61 +907,61 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n     CScript empty;\n-    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);\n+    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, empty);\n     BOOST_CHECK(combined.empty());\n \n     // Single signature case:\n     SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     scriptSigCopy = scriptSig;\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n     scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, scriptSigCopy);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, scriptSigCopy);\n     BOOST_CHECK(combined == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n+    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, 0);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n+    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, 0);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n+    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, 0);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n \n@@ -976,21 +977,21 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial1b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial1b);\n     BOOST_CHECK(combined == partial1a);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial2a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial2a);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial1a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial1a);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1b, partial2b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1b, partial2b);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial1b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial1b);\n     BOOST_CHECK(combined == complete13);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial3a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial3a);\n     BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial2b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial2b);\n     BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial3a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial3a);\n     BOOST_CHECK(combined == partial3c);\n }\n "
      },
      {
        "sha": "0df5f3c88ba2c13cd8e00a9a8ed71039b8f2d04a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, txTo, nIn, nHashType, 0, 0);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, 0);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      },
      {
        "sha": "c90b1e4b937b92e46b65f177979fefeeebbcbdd1",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d374139b87d96a3ab4582351ddf52f57b85aee3d/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n         // Sign:\n         std::vector<unsigned char> vchSig;\n-        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL, 0, 0);\n         BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         spends[i].vin[0].scriptSig << vchSig;"
      }
    ]
  },
  {
    "sha": "92c6dc3ef801cb34b2e02f814988d776c07143d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmM2ZGMzZWY4MDFjYjM0YjJlMDJmODE0OTg4ZDc3NmMwNzE0M2Qx",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-01-22T17:46:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:20Z"
      },
      "message": "Return witness data\n\nIncludes RPC field name changes by Luke-jr.",
      "tree": {
        "sha": "2a82dc5c0ddf4d0d2a36325242faf73b56148cfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a82dc5c0ddf4d0d2a36325242faf73b56148cfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92c6dc3ef801cb34b2e02f814988d776c07143d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d374139b87d96a3ab4582351ddf52f57b85aee3d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 25,
      "deletions": 4
    },
    "files": [
      {
        "sha": "62cf3c49e67604805a35ad7b237af0e5181ccb31",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c6dc3ef801cb34b2e02f814988d776c07143d1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c6dc3ef801cb34b2e02f814988d776c07143d1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=92c6dc3ef801cb34b2e02f814988d776c07143d1",
        "patch": "@@ -99,7 +99,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n+    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n+    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n@@ -331,6 +332,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n             \"}\\n\"\n             \"\\nResult (for verbose=false):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -379,6 +381,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\""
      },
      {
        "sha": "2926d6359355e598c2b6b25fce1109648ea13734",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c6dc3ef801cb34b2e02f814988d776c07143d1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c6dc3ef801cb34b2e02f814988d776c07143d1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=92c6dc3ef801cb34b2e02f814988d776c07143d1",
        "patch": "@@ -62,11 +62,14 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n-    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n+    entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n+\n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.push_back(Pair(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n@@ -78,6 +81,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n+        if (!tx.wit.IsNull()) {\n+            if (!tx.wit.vtxinwit[i].IsNull()) {\n+                UniValue txinwitness(UniValue::VARR);\n+                for (unsigned int j = 0; j < tx.wit.vtxinwit[i].scriptWitness.stack.size(); j++) {\n+                    std::vector<unsigned char> item = tx.wit.vtxinwit[i].scriptWitness.stack[j];\n+                    txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                }\n+                in.push_back(Pair(\"txinwitness\", txinwitness));\n+            }\n+\n+        }\n         in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n         vin.push_back(in);\n     }\n@@ -134,7 +148,8 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n+            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -146,6 +161,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n             \"       \\\"sequence\\\": n      (numeric) The script sequence number\\n\"\n+            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n@@ -431,6 +447,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n+            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n@@ -442,6 +459,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n             \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n+            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\""
      }
    ]
  },
  {
    "sha": "395521854efd5804433d57aaf69f46676e4b6efc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTU1MjE4NTRlZmQ1ODA0NDMzZDU3YWFmNjlmNDY2NzZlNGI2ZWZj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-03T17:54:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:20Z"
      },
      "message": "Implement block size/sigop cost rules, limits, and GBT support\n\nIncludes changes by Suhas Daftuar and Luke-jr.",
      "tree": {
        "sha": "ab36b3a7d553a9a4ab7eeb9461d4c5b26e064d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab36b3a7d553a9a4ab7eeb9461d4c5b26e064d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395521854efd5804433d57aaf69f46676e4b6efc",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395521854efd5804433d57aaf69f46676e4b6efc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/395521854efd5804433d57aaf69f46676e4b6efc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395521854efd5804433d57aaf69f46676e4b6efc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92c6dc3ef801cb34b2e02f814988d776c07143d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92c6dc3ef801cb34b2e02f814988d776c07143d1"
      }
    ],
    "stats": {
      "total": 343,
      "additions": 232,
      "deletions": 111
    },
    "files": [
      {
        "sha": "fb290f476b57df7e3856366e8b6b7bd4c08cf585",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -96,7 +96,7 @@ def setup_chain(self):\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=200\", \"-blockmaxsize=999000\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n \n     def mine_full_block(self, node, address):\n         # Want to create a full block\n@@ -174,13 +174,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available // old_block_size\n \n-        # 144MB will be reserved for relaying new blocks, so expect this to\n-        # succeed for ~70 tries.\n+        # 576MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~235 tries.\n         for i in xrange(success_count):\n             test_nodes[0].send_message(getdata_request)\n             test_nodes[0].sync_with_ping()\n@@ -197,9 +197,9 @@ def run_test(self):\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n-        # We'll try 200 times\n+        # We'll try 800 times\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(200):\n+        for i in xrange(800):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)"
      },
      {
        "sha": "3f170a96a4246c90f61f7ebbab4672a03e0fd627",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -195,7 +195,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n \n     // extract and validate vout\n     string strVout = strInput.substr(pos + 1, string::npos);"
      },
      {
        "sha": "0177509d8fbd2bcceaf6894f2284be5e9ec17831",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;\n+/** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+static const unsigned int MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "7a4fa8bd7025e1f85e0700ce7452874bb222e5e4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 26,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -932,8 +932,24 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+{\n+    int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n+\n+    if (tx.IsCoinBase())\n+        return nSigOps;\n \n+    if (flags & SCRIPT_VERIFY_P2SH) {\n+        nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n+    }\n \n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, i < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[i].scriptWitness : NULL, flags);\n+    }\n+    return nSigOps;\n+}\n \n \n \n@@ -946,8 +962,8 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -1152,8 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -1176,7 +1191,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, lp);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n         if (txFeeRate) {\n             *txFeeRate = CFeeRate(nFees, nSize);\n@@ -1187,9 +1202,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOps > MAX_STANDARD_TX_SIGOPS) || (nBytesPerSigOp && nSigOps > nSize / nBytesPerSigOp))\n+        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n-                strprintf(\"%d\", nSigOps));\n+                strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n@@ -2349,7 +2364,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n-    unsigned int nSigOps = 0;\n+    unsigned int nSigOpsCost = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n@@ -2359,10 +2374,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += GetLegacySigOpCount(tx);\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                             REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n@@ -2382,18 +2393,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n+        }\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n+        // GetTransactionSigOpCost counts 3 types of sigops:\n+        // * legacy (always)\n+        // * p2sh (when P2SH enabled in flags and excludes coinbase)\n+        // * witness (when witness enabled in flags and excludes coinbase)\n+        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n+        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n+                             REJECT_INVALID, \"bad-blk-sigops\");\n \n+        if (!tx.IsCoinBase())\n+        {\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n@@ -3278,9 +3290,11 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // All potential-corruption validation must be done before we do any\n     // transaction validation, as otherwise we may mark the header as invalid\n     // because we receive the wrong transactions for it.\n+    // Note that witness malleability is checked in ContextualCheckBlock, so no\n+    // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n@@ -3301,7 +3315,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n \n     if (fCheckPOW && fCheckMerkleRoot)\n@@ -3481,6 +3495,16 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // After the coinbase witness nonce and commitment are verified,\n+    // we can check if the block cost passes (before we've checked the\n+    // coinbase witness, it would be possible for the cost to be too\n+    // large by filling up the coinbase witness, which doesn't change\n+    // the block hash, so we couldn't mark the block as permanently\n+    // failed).\n+    if (GetBlockCost(block) > MAX_BLOCK_COST) {\n+        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+    }\n+\n     return true;\n }\n \n@@ -4123,7 +4147,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -4142,7 +4166,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      },
      {
        "sha": "6cd5ab03994f47edab11d5010525dd81e3dc002b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -144,7 +144,7 @@ extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockSize;\n+extern uint64_t nLastBlockCost;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;"
      },
      {
        "sha": "31332526a916e35d327341a7c5ff0d97ea8d36eb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -155,7 +155,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "8501987ece755181131b4add860bd971c54cdde5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -43,7 +43,7 @@ using namespace std;\n // transactions that depend on transactions that aren't yet in the block.\n \n uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockSize = 0;\n+uint64_t nLastBlockCost = 0;\n \n class ScoreCompare\n {\n@@ -89,22 +89,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     // Add dummy coinbase tx as first transaction\n     pblock->vtx.push_back(CTransaction());\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    unsigned int nBlockMaxCost = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE) * WITNESS_SCALE_FACTOR;\n     // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+    nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n-    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n+    unsigned int nBlockPriorityCost = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE) * WITNESS_SCALE_FACTOR;\n+    nBlockPriorityCost = std::min(nBlockMaxCost, nBlockPriorityCost);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n-    nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n+    unsigned int nBlockMinCost = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE) * WITNESS_SCALE_FACTOR;\n+    nBlockMinCost = std::min(nBlockMaxCost, nBlockMinCost);\n \n     // Collect memory pool transactions into the block\n     CTxMemPool::setEntries inBlock;\n@@ -119,9 +119,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n     std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n     bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockCost = 4000;\n     uint64_t nBlockTx = 0;\n-    unsigned int nBlockSigOps = 100;\n+    unsigned int nBlockSigOpsCost = 400;\n     int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n@@ -145,7 +145,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();\n \n-        bool fPriorityBlock = nBlockPrioritySize > 0;\n+        bool fPriorityBlock = nBlockPriorityCost > 0;\n         if (fPriorityBlock) {\n             vecPriority.reserve(mempool.mapTx.size());\n             for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n@@ -206,22 +206,23 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n \n             unsigned int nTxSize = iter->GetTxSize();\n+            unsigned int nTxCost = nTxSize * WITNESS_SCALE_FACTOR; /* TODO: more accurate version using GetTransactionCost */\n             if (fPriorityBlock &&\n-                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                (nBlockCost + nTxCost >= nBlockPriorityCost || !AllowFree(actualPriority))) {\n                 fPriorityBlock = false;\n                 waitPriMap.clear();\n             }\n             if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockCost >= nBlockMinCost)) {\n                 break;\n             }\n-            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n-                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+            if (nBlockCost + nTxCost >= nBlockMaxCost) {\n+                if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n                     break;\n                 }\n                 // Once we're within 1000 bytes of a full block, only look at 50 more txs\n                 // to try to fill the remaining space.\n-                if (nBlockSize > nBlockMaxSize - 1000) {\n+                if (nBlockCost > nBlockMaxCost - 4000) {\n                     lastFewTxs++;\n                 }\n                 continue;\n@@ -230,9 +231,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            unsigned int nTxSigOps = iter->GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n-                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+            unsigned int nTxSigOpsCost = iter->GetSigOpCost();\n+            if (nBlockSigOpsCost + nTxSigOpsCost >= MAX_BLOCK_SIGOPS_COST) {\n+                if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n                     break;\n                 }\n                 continue;\n@@ -242,10 +243,10 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             // Added\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n-            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n-            nBlockSize += nTxSize;\n+            pblocktemplate->vTxSigOpsCost.push_back(nTxSigOpsCost);\n+            nBlockCost += nTxCost;\n             ++nBlockTx;\n-            nBlockSigOps += nTxSigOps;\n+            nBlockSigOpsCost += nTxSigOpsCost;\n             nFees += nTxFees;\n \n             if (fPrintPriority)\n@@ -279,8 +280,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n         }\n         nLastBlockTx = nBlockTx;\n-        nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n+        nLastBlockCost = nBlockCost;\n+        LogPrintf(\"CreateNewBlock(): total cost %u txs: %u fees: %ld sigopscost %d\\n\", nBlockCost, nBlockTx, nFees, nBlockSigOpsCost);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n@@ -294,7 +295,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n-        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+        pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]) * WITNESS_SCALE_FACTOR;\n \n         CValidationState state;\n         if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {"
      },
      {
        "sha": "e03dc2835353b60a84158f129097df7adc448bbc",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -23,7 +23,7 @@ struct CBlockTemplate\n {\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n-    std::vector<int64_t> vTxSigOps;\n+    std::vector<int64_t> vTxSigOpsCost;\n     std::vector<unsigned char> vchCoinbaseCommitment;\n };\n "
      },
      {
        "sha": "57b9099cdade974f8e40682290cec46b96749485",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -2126,7 +2126,7 @@ void CNode::RecordBytesSent(uint64_t bytes)\n void CNode::SetMaxOutboundTarget(uint64_t limit)\n {\n     LOCK(cs_totalBytesSent);\n-    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SERIALIZED_SIZE;\n     nMaxOutboundLimit = limit;\n \n     if (limit > 0 && limit < recommendedMinimum)\n@@ -2181,7 +2181,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n     {\n         // keep a large enough buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n-        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SERIALIZED_SIZE;\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n             return true;\n     }"
      },
      {
        "sha": "d2236a12abe517b83acd9316c41b8904e1742bc6",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -64,8 +64,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n+    unsigned int sz = GetTransactionCost(tx);\n+    if (sz >= MAX_STANDARD_TX_COST) {\n         reason = \"tx-size\";\n         return false;\n     }\n@@ -150,3 +150,8 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n     return true;\n }\n+\n+int64_t GetVirtualTransactionSize(const CTransaction& tx)\n+{\n+    return (GetTransactionCost(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+}"
      },
      {
        "sha": "0040148bac8497d6fceef4f878c1ec0f86c3f027",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -20,11 +20,11 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+static const unsigned int MAX_STANDARD_TX_COST = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n@@ -65,4 +65,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+/** Compute the virtual transaction size (cost reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(const CTransaction& tx);\n+\n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "45e61e544607a79d2e6998e7a0115c198e0e647e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+}"
      },
      {
        "sha": "e2a309e63d821df2ea86973e057072ff6f3aede8",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -154,4 +154,7 @@ struct CBlockLocator\n     }\n };\n \n+/** Compute the consensus-critical block cost (see BIP 141). */\n+int64_t GetBlockCost(const CBlock& tx);\n+\n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "de7e71bbba2ed3bf3c3b9fc854c4b789ed15be5b",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -121,7 +121,7 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // Providing any more cleanup incentive than making additional inputs free would\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n-        nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+        nTxSize = (GetTransactionCost(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n     for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n@@ -148,3 +148,8 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n+\n+int64_t GetTransactionCost(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+}"
      },
      {
        "sha": "65e94a8893615b124e9e901cb68dd584f29d652e",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -13,6 +13,8 @@\n \n static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n \n+static const int WITNESS_SCALE_FACTOR = 4;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -439,4 +441,7 @@ struct CMutableTransaction\n     uint256 GetHash() const;\n };\n \n+/** Compute the cost of a transaction, as defined by BIP 141 */\n+int64_t GetTransactionCost(const CTransaction &tx);\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "acca3df9494f5c033d01c582e1d096bf3c26c849",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -101,6 +101,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n@@ -382,6 +383,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"cost\\\" : n             (numeric) The block cost\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\""
      },
      {
        "sha": "4e00f3f188f385c28db75269d84ac8365e51ab1c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -240,7 +240,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n+    obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n@@ -310,7 +310,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+            \"For full specification, see BIP 22 and BIP 145:\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n@@ -337,7 +339,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"             ,...\\n\"\n             \"         ],\\n\"\n             \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\\n\"\n+            \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n+            \"         \\\"cost\\\" : n,                 (numeric) total transaction size cost, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -354,8 +357,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n+            \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n+            \"  \\\"costlimit\\\" : n,                  (numeric) limit of block cost\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n@@ -535,7 +539,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n-        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[index_in_template]));\n+        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n+        entry.push_back(Pair(\"cost\", GetTransactionCost(tx)));\n \n         transactions.push_back(entry);\n     }\n@@ -565,8 +570,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n+    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"costlimit\", (int64_t)MAX_BLOCK_COST));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "9928804cb54571dff44b2c437a5cf366fa71c0cb",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -64,6 +64,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n     entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    entry.push_back(Pair(\"vsize\", (int)::GetVirtualTransactionSize(tx)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n \n@@ -150,6 +151,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n+            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -449,6 +451,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n+            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\""
      },
      {
        "sha": "75b0ac5908ebc8d4d3b8c04b752a85d53784a784",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -1470,3 +1470,50 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n     return set_success(serror);\n }\n+\n+size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness, int flags)\n+{\n+    if (witversion == 0) {\n+        if (witprogram.size() == 20)\n+            return 1;\n+\n+        if (witprogram.size() == 32 && witness.stack.size() > 0) {\n+            CScript subscript(witness.stack.back().begin(), witness.stack.back().end());\n+            return subscript.GetSigOpCount(true);\n+        }\n+    }\n+\n+    // Future flags may be implemented here.\n+    return 0;\n+}\n+\n+size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)\n+{\n+    static const CScriptWitness witnessEmpty;\n+\n+    if ((flags & SCRIPT_VERIFY_WITNESS) == 0) {\n+        return 0;\n+    }\n+    assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty, flags);\n+    }\n+\n+    if (scriptPubKey.IsPayToScriptHash() && scriptSig.IsPushOnly()) {\n+        CScript::const_iterator pc = scriptSig.begin();\n+        vector<unsigned char> data;\n+        while (pc < scriptSig.end()) {\n+            opcodetype opcode;\n+            scriptSig.GetOp(pc, opcode, data);\n+        }\n+        CScript subscript(data.begin(), data.end());\n+        if (subscript.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty, flags);\n+        }\n+    }\n+\n+    return 0;\n+}"
      },
      {
        "sha": "e29dcde6c02bbdf343513582697b2d744c2b563f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -150,4 +150,6 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n+size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n+\n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "033a50f94f578b2ef82f076d7d5b6505eda57362",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"policy/policy.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n \n@@ -336,7 +337,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n     pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).Priority(9.0).FromTx(tx2));\n-    uint64_t tx2Size = ::GetSerializeSize(tx2, SER_NETWORK, PROTOCOL_VERSION);\n+    uint64_t tx2Size = GetVirtualTransactionSize(tx2);\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n@@ -384,7 +385,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx6.vout.resize(1);\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n-    uint64_t tx6Size = ::GetSerializeSize(tx6, SER_NETWORK, PROTOCOL_VERSION);\n+    uint64_t tx6Size = GetVirtualTransactionSize(tx6);\n \n     pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n@@ -398,7 +399,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx7.vout.resize(1);\n     tx7.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx7.vout[0].nValue = 10 * COIN;\n-    uint64_t tx7Size = ::GetSerializeSize(tx7, SER_NETWORK, PROTOCOL_VERSION);\n+    uint64_t tx7Size = GetVirtualTransactionSize(tx7);\n \n     /* set the fee to just below tx2's feerate when including ancestor */\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n@@ -467,12 +468,12 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx2.GetHash()));\n     BOOST_CHECK(pool.exists(tx3.GetHash()));\n \n-    pool.TrimToSize(::GetSerializeSize(CTransaction(tx1), SER_NETWORK, PROTOCOL_VERSION)); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    pool.TrimToSize(GetVirtualTransactionSize(tx1)); // mempool is limited to tx1's size in memory usage, so nothing fits\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n-    CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n+    CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();"
      },
      {
        "sha": "ee7b4201da8f7bcb91752abca3c41f6d6954da45",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -152,7 +152,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n         // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "4dd19069447299b0a56bd30400bd6d429de54080",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"policy/policy.h\"\n #include \"policy/fees.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\"\n@@ -50,7 +51,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n     tx.vout[0].nValue=0LL;\n-    CFeeRate baseRate(basefee, ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION));\n+    CFeeRate baseRate(basefee, GetVirtualTransactionSize(tx));\n \n     // Create a fake block\n     std::vector<CTransaction> block;"
      },
      {
        "sha": "4b67df0d055b42b877df98c8eeb154281f961300",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -133,7 +133,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount, lp);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCost, lp);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "b05deda89800db25b2816d3965fec12f11ac7bba",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -70,12 +70,12 @@ struct TestMemPoolEntryHelper\n     unsigned int nHeight;\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n-    unsigned int sigOpCount;\n+    unsigned int sigOpCost;\n     LockPoints lp;\n \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }\n+        hadNoDependencies(false), spendsCoinbase(false), sigOpCost(4) { }\n     \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n@@ -86,6 +86,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n-    TestMemPoolEntryHelper &SigOps(unsigned int _sigops) { sigOpCount = _sigops; return *this; }\n+    TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }\n };\n #endif"
      },
      {
        "sha": "ace297ed89eca707232f75ac0a5284f3630f467c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n #include \"timedata.h\"\n@@ -22,12 +23,12 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase, unsigned int _sigOps, LockPoints lp):\n+                                 bool _spendsCoinbase, unsigned int _sigOpsCost, LockPoints lp):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    nTxSize = GetVirtualTransactionSize(tx);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n     nUsageSize = RecursiveDynamicUsage(tx);\n \n@@ -42,7 +43,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nCountWithAncestors = 1;\n     nSizeWithAncestors = nTxSize;\n     nModFeesWithAncestors = nFee;\n-    nSigOpCountWithAncestors = sigOpCount;\n+    nSigOpCostWithAncestors = sigOpCost;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -111,7 +112,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n             modifyCount++;\n             cachedDescendants[updateIt].insert(cit);\n             // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCount()));\n+            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n         }\n     }\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n@@ -251,7 +252,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n     BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n-        updateSigOps += ancestorIt->GetSigOpCount();\n+        updateSigOps += ancestorIt->GetSigOpCost();\n     }\n     mapTx.modify(it, update_ancestor_state(updateSize, updateFee, updateCount, updateSigOps));\n }\n@@ -282,7 +283,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n             setDescendants.erase(removeIt); // don't update state for self\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n-            int modifySigOps = -removeIt->GetSigOpCount();\n+            int modifySigOps = -removeIt->GetSigOpCost();\n             BOOST_FOREACH(txiter dit, setDescendants) {\n                 mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n             }\n@@ -338,8 +339,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     nModFeesWithAncestors += modifyFee;\n     nCountWithAncestors += modifyCount;\n     assert(int64_t(nCountWithAncestors) > 0);\n-    nSigOpCountWithAncestors += modifySigOps;\n-    assert(int(nSigOpCountWithAncestors) >= 0);\n+    nSigOpCostWithAncestors += modifySigOps;\n+    assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n@@ -654,7 +655,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         bool fDependsWait = false;\n         setEntries setParentCheck;\n         int64_t parentSizes = 0;\n-        unsigned int parentSigOpCount = 0;\n+        unsigned int parentSigOpCost = 0;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n@@ -664,7 +665,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n                 fDependsWait = true;\n                 if (setParentCheck.insert(it2).second) {\n                     parentSizes += it2->GetTxSize();\n-                    parentSigOpCount += it2->GetSigOpCount();\n+                    parentSigOpCost += it2->GetSigOpCost();\n                 }\n             } else {\n                 const CCoins* coins = pcoins->AccessCoins(txin.prevout.hash);\n@@ -686,17 +687,17 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         uint64_t nCountCheck = setAncestors.size() + 1;\n         uint64_t nSizeCheck = it->GetTxSize();\n         CAmount nFeesCheck = it->GetModifiedFee();\n-        unsigned int nSigOpCheck = it->GetSigOpCount();\n+        unsigned int nSigOpCheck = it->GetSigOpCost();\n \n         BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n-            nSigOpCheck += ancestorIt->GetSigOpCount();\n+            nSigOpCheck += ancestorIt->GetSigOpCost();\n         }\n \n         assert(it->GetCountWithAncestors() == nCountCheck);\n         assert(it->GetSizeWithAncestors() == nSizeCheck);\n-        assert(it->GetSigOpCountWithAncestors() == nSigOpCheck);\n+        assert(it->GetSigOpCostWithAncestors() == nSigOpCheck);\n         assert(it->GetModFeesWithAncestors() == nFeesCheck);\n \n         // Check children against mapNextTx"
      },
      {
        "sha": "b0c06c0a4db66335caa500ee02b05376aec13267",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -84,7 +84,7 @@ class CTxMemPoolEntry\n     bool hadNoDependencies;    //!< Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //!< Sum of all txin values that are already in blockchain\n     bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n-    unsigned int sigOpCount;   //!< Legacy sig ops plus P2SH sig op count\n+    unsigned int sigOpCost;    //!< Total sigop cost\n     int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n     LockPoints lockPoints;     //!< Track the height and time at which tx was final\n \n@@ -101,13 +101,13 @@ class CTxMemPoolEntry\n     uint64_t nCountWithAncestors;\n     uint64_t nSizeWithAncestors;\n     CAmount nModFeesWithAncestors;\n-    unsigned int nSigOpCountWithAncestors;\n+    unsigned int nSigOpCostWithAncestors;\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n-                    unsigned int nSigOps, LockPoints lp);\n+                    unsigned int nSigOpsCost, LockPoints lp);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -121,7 +121,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n-    unsigned int GetSigOpCount() const { return sigOpCount; }\n+    unsigned int GetSigOpCost() const { return sigOpCost; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n     const LockPoints& GetLockPoints() const { return lockPoints; }\n@@ -145,7 +145,7 @@ class CTxMemPoolEntry\n     uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n     uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n     CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n-    unsigned int GetSigOpCountWithAncestors() const { return nSigOpCountWithAncestors; }\n+    unsigned int GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index."
      },
      {
        "sha": "124d34431d2157eebf1bcdfa2ac2586cd291120a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395521854efd5804433d57aaf69f46676e4b6efc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395521854efd5804433d57aaf69f46676e4b6efc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=395521854efd5804433d57aaf69f46676e4b6efc",
        "patch": "@@ -2222,7 +2222,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     nIn++;\n                 }\n \n-                unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION);\n+                unsigned int nBytes = GetVirtualTransactionSize(txNew);\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n@@ -2234,7 +2234,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                if (nBytes >= MAX_STANDARD_TX_SIZE)\n+                if (GetTransactionCost(txNew) >= MAX_STANDARD_TX_COST)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;"
      }
    ]
  },
  {
    "sha": "5a47b985362ca9349e391ed6fecc487d62616b87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTQ3Yjk4NTM2MmNhOTM0OWUzOTFlZDZmZWNjNDg3ZDYyNjE2Yjg3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:28:35Z"
      },
      "message": "Add command line options to loosen mempool acceptance rules",
      "tree": {
        "sha": "00ebb023d601e597926a410baeb55a07d369ae82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00ebb023d601e597926a410baeb55a07d369ae82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a47b985362ca9349e391ed6fecc487d62616b87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47b985362ca9349e391ed6fecc487d62616b87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47b985362ca9349e391ed6fecc487d62616b87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47b985362ca9349e391ed6fecc487d62616b87/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "395521854efd5804433d57aaf69f46676e4b6efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395521854efd5804433d57aaf69f46676e4b6efc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/395521854efd5804433d57aaf69f46676e4b6efc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a41ff3f857a6d3a01523ee6eead44df13810ab9d",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47b985362ca9349e391ed6fecc487d62616b87/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47b985362ca9349e391ed6fecc487d62616b87/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=5a47b985362ca9349e391ed6fecc487d62616b87",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-promiscuousmempoolflags'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "e009057edea62fd57628599a5d497ebbda2f84eb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47b985362ca9349e391ed6fecc487d62616b87/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47b985362ca9349e391ed6fecc487d62616b87/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5a47b985362ca9349e391ed6fecc487d62616b87",
        "patch": "@@ -1053,7 +1053,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Don't accept witness transactions before the final threshold passes\n-    if (!tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n@@ -1396,14 +1396,19 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n+        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+        if (!Params().RequireStandard()) {\n+            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+        }\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true)) {\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n-                !CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n                 // Only the witness is wrong, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }"
      }
    ]
  },
  {
    "sha": "e5735719c437a3cd15665e533e7db4b31e280397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTczNTcxOWM0MzdhM2NkMTU2NjVlNTMzZTdkYjRiMzFlMjgwMzk3",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2016-01-24T16:29:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "message": "bitcoinconsensus: add method that accepts amount, and return error when verify_script receives VERIFY_WITNESS flag\n\nscript_tests: always test bitcoinconsensus_verify_script_with_amount if VERIFY_WITNESS isn't set\n\nRename internal method + make it static\n\ntrim bitcoinconsensus_ prefix\n\nAdd SERIALIZE_TRANSACTION_WITNESS flag",
      "tree": {
        "sha": "fdc96b2334e9b75df97a0d4f2e65962a4f7330dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdc96b2334e9b75df97a0d4f2e65962a4f7330dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5735719c437a3cd15665e533e7db4b31e280397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5735719c437a3cd15665e533e7db4b31e280397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5735719c437a3cd15665e533e7db4b31e280397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5735719c437a3cd15665e533e7db4b31e280397/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a47b985362ca9349e391ed6fecc487d62616b87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47b985362ca9349e391ed6fecc487d62616b87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47b985362ca9349e391ed6fecc487d62616b87"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 40,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b3bace56ccfb967a7731853c6be959ee1bbaeac4",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5735719c437a3cd15665e533e7db4b31e280397/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5735719c437a3cd15665e533e7db4b31e280397/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=e5735719c437a3cd15665e533e7db4b31e280397",
        "patch": "@@ -69,29 +69,49 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n-         // Regardless of the verification result, the tx did not error.\n-         set_error(err, bitcoinconsensus_ERR_OK);\n+        // Regardless of the verification result, the tx did not error.\n+        set_error(err, bitcoinconsensus_ERR_OK);\n \n-        CAmount am(0);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }\n \n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    CAmount am(amount);\n+    return ::verify_script(scriptPubKey, scriptPubKeyLen, am, txTo, txToLen, nIn, flags, err);\n+}\n+\n+\n+int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+                                   const unsigned char *txTo        , unsigned int txToLen,\n+                                   unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n+        return set_error(err, bitcoinconsensus_ERR_AMOUNT_REQUIRED);\n+    }\n+\n+    CAmount am(0);\n+    return ::verify_script(scriptPubKey, scriptPubKeyLen, am, txTo, txToLen, nIn, flags, err);\n+}\n+\n unsigned int bitcoinconsensus_version()\n {\n     // Just use the API version for now"
      },
      {
        "sha": "7a988badded8958af3482c06377a98dee2d00609",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5735719c437a3cd15665e533e7db4b31e280397/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5735719c437a3cd15665e533e7db4b31e280397/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=e5735719c437a3cd15665e533e7db4b31e280397",
        "patch": "@@ -33,14 +33,15 @@\n extern \"C\" {\n #endif\n \n-#define BITCOINCONSENSUS_API_VER 0\n+#define BITCOINCONSENSUS_API_VER 1\n \n typedef enum bitcoinconsensus_error_t\n {\n     bitcoinconsensus_ERR_OK = 0,\n     bitcoinconsensus_ERR_TX_INDEX,\n     bitcoinconsensus_ERR_TX_SIZE_MISMATCH,\n     bitcoinconsensus_ERR_TX_DESERIALIZE,\n+    bitcoinconsensus_ERR_AMOUNT_REQUIRED,\n } bitcoinconsensus_error;\n \n /** Script verification flags */\n@@ -50,13 +51,18 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by\n /// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under\n /// the additional constraints specified by flags.\n /// If not NULL, err will contain an error/success code for the operation\n EXPORT_SYMBOL int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+                                                 const unsigned char *txTo        , unsigned int txToLen,\n+                                                 unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n+\n+EXPORT_SYMBOL int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n "
      },
      {
        "sha": "0f28b3736fad2ddb3660b711b4ad75e22e592bed",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5735719c437a3cd15665e533e7db4b31e280397/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5735719c437a3cd15665e533e7db4b31e280397/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e5735719c437a3cd15665e533e7db4b31e280397",
        "patch": "@@ -160,7 +160,12 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n-    BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n+    if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), amountZero, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+    } else {\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n+    }\n #endif\n }\n "
      }
    ]
  },
  {
    "sha": "a6386c264bbfe3b8064f1e503be67a77906db889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjM4NmMyNjRiYmZlM2I4MDY0ZjFlNTAzYmU2N2E3NzkwNmRiODg5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-18T02:41:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "message": "Increase MAX_PROTOCOL_MESSAGE_LENGTH\n\nWitness blocks can be greater than 2MiB, but cannot be validly greater\nthan 4MB.",
      "tree": {
        "sha": "dac366a162e209e6ee60f1dbfca7355ba34954f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dac366a162e209e6ee60f1dbfca7355ba34954f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6386c264bbfe3b8064f1e503be67a77906db889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6386c264bbfe3b8064f1e503be67a77906db889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6386c264bbfe3b8064f1e503be67a77906db889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6386c264bbfe3b8064f1e503be67a77906db889/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5735719c437a3cd15665e533e7db4b31e280397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5735719c437a3cd15665e533e7db4b31e280397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5735719c437a3cd15665e533e7db4b31e280397"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a577ce42104e3764d93f6871128bd2ab1bcb244b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6386c264bbfe3b8064f1e503be67a77906db889/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6386c264bbfe3b8064f1e503be67a77906db889/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a6386c264bbfe3b8064f1e503be67a77906db889",
        "patch": "@@ -44,8 +44,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n-/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** -listen default */"
      }
    ]
  },
  {
    "sha": "1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjZjNmYxNmIzMDlkNjUwM2FlYWNhZjRjNTZiNTk2MzdmZWRjYzk5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-18T16:20:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "message": "Add rewind logic to deal with post-fork software updates",
      "tree": {
        "sha": "cd51635c327a722462faec5b23612448b418728c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd51635c327a722462faec5b23612448b418728c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6386c264bbfe3b8064f1e503be67a77906db889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6386c264bbfe3b8064f1e503be67a77906db889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6386c264bbfe3b8064f1e503be67a77906db889"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 98,
      "deletions": 20
    },
    "files": [
      {
        "sha": "cc94edb2b0dfe35000815b054fd1ed421674d79d",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "patch": "@@ -90,6 +90,8 @@ enum BlockStatus {\n     BLOCK_FAILED_VALID       =   32, //! stage after last reached validness failed\n     BLOCK_FAILED_CHILD       =   64, //! descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n+\n+    BLOCK_OPT_WITNESS       =   128, //! block data in blk*.data was received with a witness-enforcing client\n };\n \n /** The block chain is a tree shaped structure starting with the"
      },
      {
        "sha": "d8fe8760d53f6b5c5ebea73b8bee0b3ce9d76bb3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "patch": "@@ -1281,6 +1281,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!fReindex) {\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                    if (!RewindBlockIndex(chainparams.GetConsensus())) {\n+                        strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                        break;\n+                    }\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\","
      },
      {
        "sha": "21eefe6f4479f8cd74093efeb5c62b859560b1d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 20,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "patch": "@@ -2669,7 +2669,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n }\n \n /** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n-bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n+bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams, bool fBare = false)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2689,24 +2689,28 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n-    // Resurrect mempool transactions from the disconnected block.\n-    std::vector<uint256> vHashUpdate;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n-        CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, NULL, true)) {\n-            mempool.removeRecursive(tx, removed);\n-        } else if (mempool.exists(tx.GetHash())) {\n-            vHashUpdate.push_back(tx.GetHash());\n-        }\n-    }\n-    // AcceptToMemoryPool/addUnchecked all assume that new mempool entries have\n-    // no in-mempool children, which is generally not true when adding\n-    // previously-confirmed transactions back to the mempool.\n-    // UpdateTransactionsFromBlock finds descendants of any transactions in this\n-    // block that were added back and cleans up the mempool state.\n-    mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+\n+    if (!fBare) {\n+        // Resurrect mempool transactions from the disconnected block.\n+        std::vector<uint256> vHashUpdate;\n+        BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+            // ignore validation errors in resurrected transactions\n+            list<CTransaction> removed;\n+            CValidationState stateDummy;\n+            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, NULL, true)) {\n+                mempool.removeRecursive(tx, removed);\n+            } else if (mempool.exists(tx.GetHash())) {\n+                vHashUpdate.push_back(tx.GetHash());\n+            }\n+        }\n+        // AcceptToMemoryPool/addUnchecked all assume that new mempool entries have\n+        // no in-mempool children, which is generally not true when adding\n+        // previously-confirmed transactions back to the mempool.\n+        // UpdateTransactionsFromBlock finds descendants of any transactions in this\n+        // block that were added back and cleans up the mempool state.\n+        mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+    }\n+\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -3127,7 +3131,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n-    pindexNew->nStatus |= BLOCK_HAVE_DATA;\n+    pindexNew->nStatus |= BLOCK_HAVE_DATA | BLOCK_OPT_WITNESS;\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n     setDirtyBlockIndex.insert(pindexNew);\n \n@@ -4058,6 +4062,68 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool RewindBlockIndex(const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+\n+    int nHeight = 1;\n+    while (nHeight <= chainActive.Height()) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            break;\n+        }\n+        nHeight++;\n+    }\n+\n+    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+    CValidationState state;\n+    CBlockIndex* pindex = chainActive.Tip();\n+    while (chainActive.Height() >= nHeight) {\n+        if (!DisconnectTip(state, params, true)) {\n+            return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n+        }\n+        // Occasionally flush state to disk.\n+        if (!FlushStateToDisk(state, FLUSH_STATE_PERIODIC))\n+            return false;\n+    }\n+\n+    // Reduce validity flag and have-data flags.\n+    // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+    // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+        CBlockIndex* pindexIter = it->second;\n+        if (IsWitnessEnabled(pindexIter->pprev, params) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n+            // Reduce validity\n+            pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n+            // Remove have-data flags.\n+            pindexIter->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+            // Remove storage location.\n+            pindexIter->nFile = 0;\n+            pindexIter->nDataPos = 0;\n+            pindexIter->nUndoPos = 0;\n+            // Remove various other things\n+            pindexIter->nTx = 0;\n+            pindexIter->nChainTx = 0;\n+            pindexIter->nSequenceId = 0;\n+            // Make sure it gets written.\n+            setDirtyBlockIndex.insert(pindexIter);\n+            // Update setBlockIndexCandidates\n+            setBlockIndexCandidates.erase(pindexIter);\n+        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->nChainTx) {\n+            setBlockIndexCandidates.insert(pindexIter);\n+        }\n+    }\n+\n+    PruneBlockIndexCandidates();\n+\n+    CheckBlockIndex(params);\n+\n+    if (!FlushStateToDisk(state, FLUSH_STATE_ALWAYS)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "c5de563ddb95b1d92425ff1785c9bf4af4ddcf3b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b6c6f16b309d6503aeacaf4c56b59637fedcc99/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "patch": "@@ -474,6 +474,8 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n+bool RewindBlockIndex(const Consensus::Params& params);\n+\n void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n /** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */"
      }
    ]
  },
  {
    "sha": "351a2feff76ba3753653d691bdbfffdcf6774fa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTFhMmZlZmY3NmJhMzc1MzY1M2Q2OTFiZGJmZmZkY2Y2Nzc0ZmEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "message": "--- [SEGWIT] begin: wallet ---",
      "tree": {
        "sha": "cd51635c327a722462faec5b23612448b418728c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd51635c327a722462faec5b23612448b418728c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/351a2feff76ba3753653d691bdbfffdcf6774fa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c6f16b309d6503aeacaf4c56b59637fedcc99"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "abbe085caeecd33f5c4c9a27d4981f84896846b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmJlMDg1Y2FlZWNkMzNmNWM0YzlhMjdkNDk4MWY4NDg5Njg0NmI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:54:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "message": "Witness script signing",
      "tree": {
        "sha": "a3dfc705643adccd5501f53848dcc2f183fdd52b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3dfc705643adccd5501f53848dcc2f183fdd52b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abbe085caeecd33f5c4c9a27d4981f84896846b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "351a2feff76ba3753653d691bdbfffdcf6774fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/351a2feff76ba3753653d691bdbfffdcf6774fa2"
      }
    ],
    "stats": {
      "total": 548,
      "additions": 382,
      "deletions": 166
    },
    "files": [
      {
        "sha": "cdadcf38578de5804cc8903a5190324ea49d96ea",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -358,6 +358,18 @@ vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n     return ParseHexUV(o[strKey], strKey);\n }\n \n+static CAmount AmountFromValue(const UniValue& value)\n+{\n+    if (!value.isNum() && !value.isStr())\n+        throw runtime_error(\"Amount is not a number or string\");\n+    CAmount amount;\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+        throw runtime_error(\"Invalid amount\");\n+    if (!MoneyRange(amount))\n+        throw runtime_error(\"Amount out of range\");\n+    return amount;\n+}\n+\n static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n {\n     int nHashType = SIGHASH_ALL;\n@@ -429,7 +441,10 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(prevOut[\"amount\"]);\n+                }\n             }\n \n             // if redeemScript given and private keys given,\n@@ -459,15 +474,16 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n         const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n-        }\n+        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }"
      },
      {
        "sha": "5734db96f4f9bb1b105b5465af92f467f50fc7b3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -580,7 +580,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\"    (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"    ]\\n\"\n@@ -718,7 +719,10 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n+                }\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n@@ -775,15 +779,18 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n         const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         }\n+\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));"
      },
      {
        "sha": "0bf180341e4ccc0d28763916903771ac698a2151",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -57,6 +57,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n             return ISMINE_SPENDABLE;\n         break;\n     case TX_PUBKEYHASH:\n+    case TX_WITNESS_V0_KEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n@@ -72,6 +73,20 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         }\n         break;\n     }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret == ISMINE_SPENDABLE)\n+                return ret;\n+        }\n+        break;\n+    }\n+\n     case TX_MULTISIG:\n     {\n         // Only consider transactions \"mine\" if we own ALL the\n@@ -88,8 +103,8 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n \n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n-        CScript scriptSig;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        SignatureData sigs;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "498c27dc3b4a26aeeb855c5feacd50f982e3160d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 196,
        "deletions": 83,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -20,37 +20,37 @@ typedef std::vector<unsigned char> valtype;\n \n TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, 0);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     vector<unsigned char> vchSig;\n-    if (!creator.CreateSig(vchSig, address, scriptCode))\n+    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))\n         return false;\n-    scriptSigRet << vchSig;\n+    ret.push_back(vchSig);\n     return true;\n }\n \n-static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, creator, scriptCode, scriptSigRet))\n+        if (Sign1(keyID, creator, scriptCode, ret, sigversion))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n@@ -63,9 +63,11 @@ static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreato\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     CScript& scriptSigRet, txnouttype& whichTypeRet)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet, int sigversion)\n {\n-    scriptSigRet.clear();\n+    CScript scriptRet;\n+    uint160 h160;\n+    ret.clear();\n \n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n@@ -79,62 +81,142 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n             CPubKey vch;\n             creator.KeyStore().GetPubKey(keyID, vch);\n-            scriptSigRet << ToByteVector(vch);\n+            ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n \n     case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n+        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n+\n+    case TX_WITNESS_V0_KEYHASH:\n+        ret.push_back(vSolutions[0]);\n+        return true;\n+\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n+        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n+\n+    default:\n+        return false;\n     }\n-    return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+static CScript PushAll(const vector<valtype>& values)\n {\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n+{\n+    CScript script = fromPubKey;\n+    bool solved = true;\n+    std::vector<valtype> result;\n     txnouttype whichType;\n-    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n-        return false;\n+    solved = SignStep(creator, script, result, whichType, 0);\n+    bool P2SH = false;\n+    CScript subscript;\n+    sigdata.scriptWitness.stack.clear();\n \n-    if (whichType == TX_SCRIPTHASH)\n+    if (solved && whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n+        // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = scriptSig;\n+        script = subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, script, result, whichType, 0) && whichType != TX_SCRIPTHASH;\n+        P2SH = true;\n+    }\n \n+    if (solved && whichType == TX_WITNESS_V0_KEYHASH)\n+    {\n+        CScript witnessscript;\n+        witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        bool fSolved =\n-            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << valtype(subscript.begin(), subscript.end());\n-        if (!fSolved) return false;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1);\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n+    }\n+    else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n+        txnouttype subType;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n     }\n \n+    if (P2SH) {\n+        result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n+    }\n+    sigdata.scriptSig = PushAll(result);\n+\n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+}\n+\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)\n+{\n+    SignatureData data;\n+    assert(tx.vin.size() > nIn);\n+    data.scriptSig = tx.vin[nIn].scriptSig;\n+    if (tx.wit.vtxinwit.size() > nIn) {\n+        data.scriptWitness = tx.wit.vtxinwit[nIn].scriptWitness;\n+    }\n+    return data;\n+}\n+\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n+{\n+    assert(tx.vin.size() > nIn);\n+    tx.vin[nIn].scriptSig = data.scriptSig;\n+    if (!data.scriptWitness.IsNull() || tx.wit.vtxinwit.size() > nIn) {\n+        tx.wit.vtxinwit.resize(tx.vin.size());\n+        tx.wit.vtxinwit[nIn].scriptWitness = data.scriptWitness;\n+    }\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, amount, nHashType);\n \n-    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n+    SignatureData sigdata;\n+    bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n+    UpdateTransaction(txTo, nIn, sigdata);\n+    return ret;\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -144,20 +226,12 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n-}\n-\n-static CScript PushAll(const vector<valtype>& values)\n-{\n-    CScript result;\n-    BOOST_FOREACH(const valtype& v, values)\n-        result << v;\n-    return result;\n+    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n-static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n-                               const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n+                               const vector<valtype>& sigs1, const vector<valtype>& sigs2, int sigversion)\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n@@ -185,7 +259,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (checker.CheckSig(sig, pubkey, scriptPubKey, 0))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey, sigversion))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -194,87 +268,126 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n     }\n     // Now build a merged CScript:\n     unsigned int nSigsHave = 0;\n-    CScript result; result << OP_0; // pop-one-too-many workaround\n+    std::vector<valtype> result; result.push_back(valtype()); // pop-one-too-many workaround\n     for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n     {\n         if (sigs.count(vSolutions[i+1]))\n         {\n-            result << sigs[vSolutions[i+1]];\n+            result.push_back(sigs[vSolutions[i+1]]);\n             ++nSigsHave;\n         }\n     }\n     // Fill any missing with OP_0:\n     for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result << OP_0;\n+        result.push_back(valtype());\n \n     return result;\n }\n \n-static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+namespace\n+{\n+struct Stacks\n+{\n+    std::vector<valtype> script;\n+    std::vector<valtype> witness;\n+\n+    Stacks() {}\n+    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n+    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+    }\n+\n+    SignatureData Output() const {\n+        SignatureData result;\n+        result.scriptSig = PushAll(script);\n+        result.scriptWitness.stack = witness;\n+        return result;\n+    }\n+};\n+}\n+\n+static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 vector<valtype>& sigs1, vector<valtype>& sigs2)\n+                                 Stacks sigs1, Stacks sigs2, int sigversion)\n {\n     switch (txType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n         // Don't know anything about this, assume bigger one is correct:\n-        if (sigs1.size() >= sigs2.size())\n-            return PushAll(sigs1);\n-        return PushAll(sigs2);\n+        if (sigs1.script.size() >= sigs2.script.size())\n+            return sigs1;\n+        return sigs2;\n     case TX_PUBKEY:\n     case TX_PUBKEYHASH:\n         // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.empty() || sigs1[0].empty())\n-            return PushAll(sigs2);\n-        return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script[0].empty())\n+            return sigs2;\n+        return sigs1;\n+    case TX_WITNESS_V0_KEYHASH:\n+        // Signatures are bigger than placeholders or empty scripts:\n+        if (sigs1.witness.empty() || sigs1.witness[0].empty())\n+            return sigs2;\n+        return sigs1;\n     case TX_SCRIPTHASH:\n-        if (sigs1.empty() || sigs1.back().empty())\n-            return PushAll(sigs2);\n-        else if (sigs2.empty() || sigs2.back().empty())\n-            return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script.back().empty())\n+            return sigs2;\n+        else if (sigs2.script.empty() || sigs2.script.back().empty())\n+            return sigs1;\n         else\n         {\n             // Recur to combine:\n-            valtype spk = sigs1.back();\n+            valtype spk = sigs1.script.back();\n             CScript pubKey2(spk.begin(), spk.end());\n \n             txnouttype txType2;\n             vector<vector<unsigned char> > vSolutions2;\n             Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.pop_back();\n-            sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n-            result << spk;\n+            sigs1.script.pop_back();\n+            sigs2.script.pop_back();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, sigversion);\n+            result.script.push_back(spk);\n             return result;\n         }\n     case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, checker, vSolutions, sigs1, sigs2);\n+        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script, sigversion));\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        if (sigs1.witness.empty() || sigs1.witness.back().empty())\n+            return sigs2;\n+        else if (sigs2.witness.empty() || sigs2.witness.back().empty())\n+            return sigs1;\n+        else\n+        {\n+            // Recur to combine:\n+            CScript pubKey2(sigs1.witness.back().begin(), sigs1.witness.back().end());\n+            txnouttype txType2;\n+            vector<valtype> vSolutions2;\n+            Solver(pubKey2, txType2, vSolutions2);\n+            sigs1.witness.pop_back();\n+            sigs1.script = sigs1.witness;\n+            sigs1.witness.clear();\n+            sigs2.witness.pop_back();\n+            sigs2.script = sigs2.witness;\n+            sigs2.witness.clear();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, 1);\n+            result.witness = result.script;\n+            result.script.clear();\n+            result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n+            return result;\n+        }\n+    default:\n+        return Stacks();\n     }\n-\n-    return CScript();\n }\n \n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n-{\n-    TransactionSignatureChecker checker(&txTo, nIn, amount);\n-    return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n-}\n-\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+                          const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n {\n     txnouttype txType;\n     vector<vector<unsigned char> > vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n-    vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n-    vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n-\n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), 0).Output();\n }\n \n namespace {\n@@ -297,7 +410,7 @@ const BaseSignatureChecker& DummySignatureCreator::Checker() const\n     return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const\n+bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const\n {\n     // Create a dummy signature that is a valid DER-encoding\n     vchSig.assign(72, '\\000');"
      },
      {
        "sha": "6144cd470f8d7500b819723c8886ac6ffa92eaa0",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -27,7 +27,7 @@ class BaseSignatureCreator {\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n     /** Create a singular (non-script) signature. */\n-    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const =0;\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -41,28 +41,44 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+};\n+\n+class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n+    CTransaction tx;\n+\n+public:\n+    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amount, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatyres. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+};\n+\n+struct SignatureData {\n+    CScript scriptSig;\n+    CScriptWitness scriptWitness;\n+\n+    SignatureData() {}\n+    explicit SignatureData(const CScript& script) : scriptSig(script) {}\n };\n \n /** Produce a script signature using a generic signature creator. */\n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n+bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n \n-/** Combine two script signatures on transactions. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount, const CScript& scriptSig1, const CScript& scriptSig2);\n+/** Extract signature data from a transaction, and insert it. */\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "bb178f49fe9f245a8359b98dc2c0fda0a0052334",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -31,6 +31,8 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_SCRIPTHASH: return \"scripthash\";\n     case TX_MULTISIG: return \"multisig\";\n     case TX_NULL_DATA: return \"nulldata\";\n+    case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n+    case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     }\n     return NULL;\n }\n@@ -66,6 +68,22 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         return true;\n     }\n \n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            typeRet = TX_WITNESS_V0_KEYHASH;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            typeRet = TX_WITNESS_V0_SCRIPTHASH;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     // Provably prunable, data-carrying output\n     //\n     // So long as script passes the IsUnspendable() test and all but the first\n@@ -282,3 +300,26 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }\n+\n+CScript GetScriptForWitness(const CScript& redeemscript)\n+{\n+    CScript ret;\n+\n+    txnouttype typ;\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (Solver(redeemscript, typ, vSolutions)) {\n+        if (typ == TX_PUBKEY) {\n+            unsigned char h160[20];\n+            CHash160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160);\n+            ret << OP_0 << std::vector<unsigned char>(&h160[0], &h160[20]);\n+            return ret;\n+        } else if (typ == TX_PUBKEYHASH) {\n+           ret << OP_0 << vSolutions[0];\n+           return ret;\n+        }\n+    }\n+    uint256 hash;\n+    CSHA256().Write(&redeemscript[0], redeemscript.size()).Finalize(hash.begin());\n+    ret << OP_0 << ToByteVector(hash);\n+    return ret;\n+}"
      },
      {
        "sha": "72aaea0b7bebe8e9efa2df6222b70ba9e1f1c77b",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -51,6 +51,8 @@ enum txnouttype\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n     TX_NULL_DATA,\n+    TX_WITNESS_V0_SCRIPTHASH,\n+    TX_WITNESS_V0_KEYHASH,\n };\n \n class CNoDestination {\n@@ -77,5 +79,6 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n CScript GetScriptForDestination(const CTxDestination& dest);\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+CScript GetScriptForWitness(const CScript& redeemscript);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "0f9158bd06ee87a167b7c430ae428da659f7234b",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -148,7 +148,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n-        SignSignature(keystore, txPrev, tx, 0);\n+        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n \n         AddOrphanTx(tx, i);\n     }\n@@ -168,7 +168,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n             tx.vin[j].prevout.n = j;\n             tx.vin[j].prevout.hash = txPrev.GetHash();\n         }\n-        SignSignature(keystore, txPrev, tx, 0);\n+        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n         // Re-use same signature for other inputs\n         // (they don't have to be valid for this test)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)"
      },
      {
        "sha": "d19c6b8590f95c30dd77aef4a0fdba9f851093dd",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n \n     for (int i = 0; i < 3; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n     }\n }\n "
      },
      {
        "sha": "5224b57ca4479f100472afd943d81af29e59aecd",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -102,7 +103,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n     for (int i = 0; i < 8; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n     }\n     // All of the above should be OK, and the txTos have valid signatures\n     // Check to make sure signature verification fails if we use the wrong ScriptSig:\n@@ -197,7 +198,7 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n     for (int i = 0; i < 4; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n         BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n@@ -326,9 +327,9 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         txTo.vin[i].prevout.n = i;\n         txTo.vin[i].prevout.hash = txFrom.GetHash();\n     }\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1, SIGHASH_ALL));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2, SIGHASH_ALL));\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:"
      },
      {
        "sha": "c216ff84e399d5dc7378f60d4f8d0438eb1fd146",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -152,16 +152,16 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n     CMutableTransaction tx2 = tx;\n-    static const CAmount amountZero = 0;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, amountZero), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n-        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), amountZero, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n     } else {\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n@@ -893,7 +893,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the CombineSignatures function\n-    CAmount amount;\n+    CAmount amount = 0;\n     CBasicKeyStore keystore;\n     vector<CKey> keys;\n     vector<CPubKey> pubkeys;\n@@ -911,50 +911,50 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n-    CScript empty;\n-    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, empty);\n-    BOOST_CHECK(combined.empty());\n+    SignatureData empty;\n+    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, empty);\n+    BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n-    SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL); // changes scriptSig\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     scriptSigCopy = scriptSig;\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, scriptSigCopy);\n-    BOOST_CHECK(combined == scriptSig);\n+    scriptSigCopy = CScript() << OP_0 << std::vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n@@ -982,22 +982,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial1b);\n-    BOOST_CHECK(combined == partial1a);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial2a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial1a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1b, partial2b);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial1b);\n-    BOOST_CHECK(combined == complete13);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial3a);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial2b);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial3a);\n-    BOOST_CHECK(combined == partial3c);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == partial1a);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial2a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial1a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == complete13);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == partial3c);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_push)"
      },
      {
        "sha": "515e884d00581faa6a5f0c736084695814a93397",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbe085caeecd33f5c4c9a27d4981f84896846b8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "patch": "@@ -2208,17 +2208,20 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 {\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n-                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n+                    SignatureData sigdata;\n                     if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata);\n                     else\n-                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n+                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata);\n \n                     if (!signSuccess)\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n+                    } else {\n+                        UpdateTransaction(txNew, nIn, sigdata);\n                     }\n+\n                     nIn++;\n                 }\n \n@@ -2228,6 +2231,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (!sign) {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n                         vin.scriptSig = CScript();\n+                    txNew.wit.SetNull();\n                 }\n \n                 // Embed the constructed transaction data in wtxNew."
      }
    ]
  },
  {
    "sha": "c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2ZlNTNmMzY0YjY0YmI4NTdlY2UyMmU4ZDRkZTFlZGQxYzIyZTJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T00:13:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:03Z"
      },
      "message": "Add witness address RPCs (using P2SH)\n\nIncludes support for pushkeyhash wit v0 by Alex Morcos.",
      "tree": {
        "sha": "e7831c5f57603ff038bd5ff5e958172f4c2b4bab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7831c5f57603ff038bd5ff5e958172f4c2b4bab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abbe085caeecd33f5c4c9a27d4981f84896846b8"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6655291324b49668ddb1dd76ee4c96a3a3a3cbc3",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
        "patch": "@@ -312,6 +312,39 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nCreates a witness address for a particular script.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"  \\\"witnessScript\\\":\\\"script\\\"      (string) The string value of the hex-encoded witness script.\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());\n+    CScript script(code.begin(), code.end());\n+    CScript witscript = GetScriptForWitness(script);\n+    CScriptID witscriptid(witscript);\n+    CBitcoinAddress address(witscriptid);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", address.ToString()));\n+    result.push_back(Pair(\"witnessScript\", HexStr(witscript.begin(), witscript.end())));\n+\n+    return result;\n+}\n+\n UniValue verifymessage(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n@@ -403,6 +436,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n+    { \"util\",               \"createwitnessaddress\",   &createwitnessaddress,   true  },\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n \n     /* Not shown in help */"
      },
      {
        "sha": "6a4bf6522d3c657cc9b29d7c5260f850f142b13f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
        "patch": "@@ -1095,6 +1095,75 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+class Witnessifier : public boost::static_visitor<bool>\n+{\n+public:\n+    CScriptID result;\n+\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+\n+    bool operator()(const CKeyID &keyID) {\n+        CPubKey pubkey;\n+        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n+            CScript basescript;\n+            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+            CScript witscript = GetScriptForWitness(basescript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) {\n+        CScript subscript;\n+        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+            int witnessversion;\n+            std::vector<unsigned char> witprog;\n+            if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n+                result = scriptID;\n+                return true;\n+            }\n+            CScript witscript = GetScriptForWitness(subscript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+            \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n+            \"It returns the witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    Witnessifier w;\n+    CTxDestination dest = address.Get();\n+    bool ret = boost::apply_visitor(w, dest);\n+    if (!ret) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet\");\n+    }\n+\n+    return CBitcoinAddress(w.result).ToString();\n+}\n \n struct tallyitem\n {\n@@ -2555,6 +2624,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true  },\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true  },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true  },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true  },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true  },"
      }
    ]
  },
  {
    "sha": "ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzM4NWZhMWQzZjVmODU0MTk1NmNjYjM2Y2M0OGNiNmI0OGI4MGMx",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-10T06:59:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "message": "signrawtransaction can sign P2WSH",
      "tree": {
        "sha": "08b0404c1ac0cbc6517ab26c7aba3f1267c73a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b0404c1ac0cbc6517ab26c7aba3f1267c73a20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "09e1d548643a8b1f3b444312f32f9eb944e93536",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "patch": "@@ -449,7 +449,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n             // if redeemScript given and private keys given,\n             // add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && scriptPubKey.IsPayToScriptHash() &&\n+            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash()) &&\n                 prevOut.exists(\"redeemScript\")) {\n                 UniValue v = prevOut[\"redeemScript\"];\n                 vector<unsigned char> rsData(ParseHexUV(v, \"redeemScript\"));"
      },
      {
        "sha": "96c52af55c6bab4a95d944745df42fa512d1aa9d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "patch": "@@ -580,7 +580,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n             \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n@@ -727,7 +727,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n+            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n                 UniValue v = find_value(prevOut, \"redeemScript\");\n                 if (!v.isNull()) {"
      },
      {
        "sha": "17fbce8ba34f028cc1f24c0dda49b55051d8b7dc",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "patch": "@@ -210,6 +210,14 @@ bool CScript::IsPayToScriptHash() const\n             (*this)[22] == OP_EQUAL);\n }\n \n+bool CScript::IsPayToWitnessScriptHash() const\n+{\n+    // Extra-fast test for pay-to-witness-script-hash CScripts:\n+    return (this->size() == 34 &&\n+            (*this)[0] == OP_0 &&\n+            (*this)[1] == 0x20);\n+}\n+\n // A witness program is any valid CScript that consists of a 1-byte push opcode\n // followed by a data push between 2 and 32 bytes.\n bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const"
      },
      {
        "sha": "e1cbf0605e92f22eede54bb4c69a8b5af24227b5",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "patch": "@@ -609,6 +609,7 @@ class CScript : public CScriptBase\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n+    bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */"
      }
    ]
  },
  {
    "sha": "a2d6f8a5d958f1fca111edfced28d7d474322908",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmQ2ZjhhNWQ5NThmMWZjYTExMWVkZmNlZDI4ZDdkNDc0MzIyOTA4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "message": "--- [SEGWIT] begin: tests ---",
      "tree": {
        "sha": "08b0404c1ac0cbc6517ab26c7aba3f1267c73a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b0404c1ac0cbc6517ab26c7aba3f1267c73a20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2d6f8a5d958f1fca111edfced28d7d474322908",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d6f8a5d958f1fca111edfced28d7d474322908",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d6f8a5d958f1fca111edfced28d7d474322908",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d6f8a5d958f1fca111edfced28d7d474322908/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "2ed1d1149aa5023694c162786bb73f399700965e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQxZDExNDlhYTUwMjM2OTRjMTYyNzg2YmI3M2YzOTk3MDA5NjVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-20T15:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "message": "Signing tests",
      "tree": {
        "sha": "2642137390b2f0705948930840b2b09469d70ec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2642137390b2f0705948930840b2b09469d70ec4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed1d1149aa5023694c162786bb73f399700965e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed1d1149aa5023694c162786bb73f399700965e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed1d1149aa5023694c162786bb73f399700965e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed1d1149aa5023694c162786bb73f399700965e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2d6f8a5d958f1fca111edfced28d7d474322908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d6f8a5d958f1fca111edfced28d7d474322908",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d6f8a5d958f1fca111edfced28d7d474322908"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 276,
      "deletions": 0
    },
    "files": [
      {
        "sha": "591e67c5aae336494be2bd0dda86e431de308ead",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 276,
        "deletions": 0,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed1d1149aa5023694c162786bb73f399700965e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed1d1149aa5023694c162786bb73f399700965e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2ed1d1149aa5023694c162786bb73f399700965e",
        "patch": "@@ -14,7 +14,9 @@\n #include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"script/script_error.h\"\n+#include \"script/standard.h\"\n #include \"utilstrencodings.h\"\n \n #include <map>\n@@ -25,11 +27,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n using namespace std;\n \n+typedef vector<unsigned char> valtype;\n+\n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n \n@@ -315,6 +320,277 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n }\n \n+void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransaction& output, CMutableTransaction& input, bool success = true)\n+{\n+    CMutableTransaction outputm;\n+    outputm.nVersion = 1;\n+    outputm.vin.resize(1);\n+    outputm.vin[0].prevout.SetNull();\n+    outputm.vin[0].scriptSig = CScript();\n+    outputm.wit.vtxinwit.resize(1);\n+    outputm.vout.resize(1);\n+    outputm.vout[0].nValue = 1;\n+    outputm.vout[0].scriptPubKey = outscript;\n+    CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) << outputm;\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) >> output;\n+    assert(output.vin.size() == 1);\n+    assert(output.vin[0] == outputm.vin[0]);\n+    assert(output.vout.size() == 1);\n+    assert(output.vout[0] == outputm.vout[0]);\n+    assert(output.wit.vtxinwit.size() == 0);\n+\n+    CMutableTransaction inputm;\n+    inputm.nVersion = 1;\n+    inputm.vin.resize(1);\n+    inputm.vin[0].prevout.hash = output.GetHash();\n+    inputm.vin[0].prevout.n = 0;\n+    inputm.wit.vtxinwit.resize(1);\n+    inputm.vout.resize(1);\n+    inputm.vout[0].nValue = 1;\n+    inputm.vout[0].scriptPubKey = CScript();\n+    bool ret = SignSignature(keystore, output, inputm, 0, SIGHASH_ALL);\n+    assert(ret == success);\n+    CDataStream ssin(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) << inputm;\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) >> input;\n+    assert(input.vin.size() == 1);\n+    assert(input.vin[0] == inputm.vin[0]);\n+    assert(input.vout.size() == 1);\n+    assert(input.vout[0] == inputm.vout[0]);\n+    if (inputm.wit.IsNull()) {\n+        assert(input.wit.IsNull());\n+    } else {\n+        assert(!input.wit.IsNull());\n+        assert(input.wit.vtxinwit.size() == 1);\n+        assert(input.wit.vtxinwit[0].scriptWitness.stack == inputm.wit.vtxinwit[0].scriptWitness.stack);\n+    }\n+}\n+\n+void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags, bool success)\n+{\n+    ScriptError error;\n+    CTransaction inputi(input);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    assert(ret == success);\n+}\n+\n+static CScript PushAll(const vector<valtype>& values)\n+{\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n+{\n+    vector<valtype> stack;\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+    assert(stack.size() > 0);\n+    stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n+    script = PushAll(stack);\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_witness)\n+{\n+    CBasicKeyStore keystore, keystore2;\n+    CKey key1, key2, key3, key1L, key2L;\n+    CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;\n+    key1.MakeNewKey(true);\n+    key2.MakeNewKey(true);\n+    key3.MakeNewKey(true);\n+    key1L.MakeNewKey(false);\n+    key2L.MakeNewKey(false);\n+    pubkey1 = key1.GetPubKey();\n+    pubkey2 = key2.GetPubKey();\n+    pubkey3 = key3.GetPubKey();\n+    pubkey1L = key1L.GetPubKey();\n+    pubkey2L = key2L.GetPubKey();\n+    keystore.AddKeyPubKey(key1, pubkey1);\n+    keystore.AddKeyPubKey(key2, pubkey2);\n+    keystore.AddKeyPubKey(key1L, pubkey1L);\n+    keystore.AddKeyPubKey(key2L, pubkey2L);\n+    CScript scriptPubkey1, scriptPubkey2, scriptPubkey1L, scriptPubkey2L, scriptMulti;\n+    scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n+    scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n+    scriptPubkey1L << ToByteVector(pubkey1L) << OP_CHECKSIG;\n+    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG; \n+    std::vector<CPubKey> oneandthree;\n+    oneandthree.push_back(pubkey1);\n+    oneandthree.push_back(pubkey3);\n+    scriptMulti = GetScriptForMultisig(2, oneandthree);\n+    keystore.AddCScript(scriptPubkey1);\n+    keystore.AddCScript(scriptPubkey2);\n+    keystore.AddCScript(scriptPubkey1L);\n+    keystore.AddCScript(scriptPubkey2L);\n+    keystore.AddCScript(scriptMulti);\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1L));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2L));\n+    keystore.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddCScript(scriptMulti);\n+    keystore2.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddKeyPubKey(key3, pubkey3);\n+\n+    CTransaction output1, output2;\n+    CMutableTransaction input1, input2;\n+    SignatureData sigdata;\n+\n+    // Normal pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1L, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2L, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2L)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, false);\n+    CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptMulti)), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(scriptMulti)), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // Witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptMulti), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForWitness(scriptMulti), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output1, input1, false);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output2, input2, false);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+}\n+\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "3c0b16f48705977c85bbad01199f6cfcfb938d4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzBiMTZmNDg3MDU5NzdjODViYmFkMDExOTlmNmNmY2ZiOTM4ZDRh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "Add rpc test for segwit\n\nAmended by Pieter Wuille to use multisig 1-of-1 for P2WSH tests, and BIP9\nbased switchover logic.",
      "tree": {
        "sha": "c81bf8417a1f3ff153132a68d11ab80a9547da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c81bf8417a1f3ff153132a68d11ab80a9547da9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ed1d1149aa5023694c162786bb73f399700965e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed1d1149aa5023694c162786bb73f399700965e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed1d1149aa5023694c162786bb73f399700965e"
      }
    ],
    "stats": {
      "total": 215,
      "additions": 215,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87e9cfdf3feb73229ff9d7a047b7f44d2edeb722",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c0b16f48705977c85bbad01199f6cfcfb938d4a/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c0b16f48705977c85bbad01199f6cfcfb938d4a/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=3c0b16f48705977c85bbad01199f6cfcfb938d4a",
        "patch": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the SegWit changeover logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+import hashlib\n+from binascii import hexlify\n+\n+NODE_0 = 0\n+NODE_1 = 1\n+NODE_2 = 2\n+WIT_V0 = 0\n+WIT_V1 = 1\n+\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+def ripemd160(s):\n+    return hashlib.new('ripemd160', s).digest()\n+\n+def witness_script(version, pubkey):\n+    if (version == 0):\n+        pubkeyhash = hexlify(ripemd160(sha256(pubkey.decode(\"hex\"))))\n+        pkscript = \"0014\" + pubkeyhash\n+    elif (version == 1):\n+        # 1-of-1 multisig\n+        scripthash = hexlify(sha256((\"5121\" + pubkey + \"51ae\").decode(\"hex\")))\n+        pkscript = \"0020\" + scripthash\n+    else:\n+        assert(\"Wrong version\" == \"0 or 1\")\n+    return pkscript\n+\n+def addlength(script):\n+    scriptlen = format(len(script)/2, 'x')\n+    assert(len(scriptlen) == 2)\n+    return scriptlen + script\n+\n+def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n+    pkscript = witness_script(version, pubkey);\n+    if (encode_p2sh):\n+        p2sh_hash = hexlify(ripemd160(sha256(pkscript.decode(\"hex\"))))\n+        pkscript = \"a914\"+p2sh_hash+\"87\"\n+    inputs = []\n+    outputs = {}\n+    inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]} )\n+    DUMMY_P2SH = \"2MySexEGVzZpRgNQ1JdjdP5bRETznm3roQ2\" # P2SH of \"OP_1 OP_DROP\"\n+    outputs[DUMMY_P2SH] = amount\n+    tx_to_witness = node.createrawtransaction(inputs,outputs)\n+    #replace dummy output with our own\n+    tx_to_witness = tx_to_witness[0:110] + addlength(pkscript) + tx_to_witness[-8:]\n+    return tx_to_witness\n+\n+def send_to_witness(version, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n+    tx_to_witness = create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount)\n+    if (sign):\n+        signed = node.signrawtransaction(tx_to_witness)\n+        return node.sendrawtransaction(signed[\"hex\"])\n+    else:\n+        if (insert_redeem_script):\n+            tx_to_witness = tx_to_witness[0:82] + addlength(insert_redeem_script) + tx_to_witness[84:]\n+\n+    return node.sendrawtransaction(tx_to_witness)\n+\n+def getutxo(txid):\n+    utxo = {}\n+    utxo[\"vout\"] = 0\n+    utxo[\"txid\"] = txid\n+    return utxo\n+\n+class SegWitTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-logtimemicros\", \"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def success_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        block = node.generate(1)\n+        assert_equal(len(node.getblock(block[0])[\"tx\"]), 2)\n+        sync_blocks(self.nodes)\n+\n+    def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        block = node.generate(1)\n+        assert_equal(len(node.getblock(block[0])[\"tx\"]), 1)\n+        sync_blocks(self.nodes)\n+\n+    def fail_accept(self, node, txid, sign, redeem_script=\"\"):\n+        try:\n+            send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        except JSONRPCException as exp:\n+            assert(exp.error[\"code\"] == -26)\n+        else:\n+            raise AssertionError(\"Tx should not have been accepted\")\n+\n+    def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        try:\n+            node.generate(1)\n+        except JSONRPCException as exp:\n+            assert(exp.error[\"code\"] == -1)\n+        else:\n+            raise AssertionError(\"Created valid block when TestBlockValidity should have failed\")\n+        sync_blocks(self.nodes)\n+\n+    def run_test(self):\n+        self.nodes[0].generate(160) #block 160\n+\n+        self.pubkey = []\n+        p2sh_ids = [] # p2sh_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE embedded in p2sh\n+        wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n+        for i in xrange(3):\n+            newaddress = self.nodes[i].getnewaddress()\n+            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n+            self.nodes[i].addwitnessaddress(newaddress)\n+            self.nodes[i].addwitnessaddress(multiaddress)\n+            p2sh_ids.append([])\n+            wit_ids.append([])\n+            for v in xrange(2):\n+                p2sh_ids[i].append([])\n+                wit_ids[i].append([])\n+\n+        for i in xrange(5):\n+            for n in xrange(3):\n+                for v in xrange(2):\n+                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], False, Decimal(\"49.999\")))\n+                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], True, Decimal(\"49.999\")))\n+\n+        self.nodes[0].generate(1) #block 161\n+        sync_blocks(self.nodes)\n+\n+        # Make sure all nodes recognize the transactions as theirs\n+        assert_equal(self.nodes[0].getbalance(), 60*50 - 60*50 + 20*Decimal(\"49.999\") + 50)\n+        assert_equal(self.nodes[1].getbalance(), 20*Decimal(\"49.999\"))\n+        assert_equal(self.nodes[2].getbalance(), 20*Decimal(\"49.999\"))\n+\n+        self.nodes[0].generate(262) #block 423\n+        sync_blocks(self.nodes)\n+\n+        print \"Verify default node can't accept any witness format txs before fork\"\n+        # unsigned, no scriptsig\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False)\n+        # unsigned with redeem script\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False, addlength(witness_script(0, self.pubkey[0])))\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False, addlength(witness_script(1, self.pubkey[0])))\n+        # signed\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True)\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True)\n+\n+        print \"Verify witness txs are skipped for mining before the fork\"\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True) #block 424\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][0], True) #block 425\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][0], True) #block 426\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][0], True) #block 427\n+\n+        # TODO: An old node would see these txs without witnesses and be able to mine them\n+\n+        print \"Verify unsigned bare witness txs in versionbits-setting blocks are valid before the fork\"\n+        self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][1], False) #block 428\n+        self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][1], False) #block 429\n+\n+        print \"Verify unsigned p2sh witness txs without a redeem script are invalid\"\n+        self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False)\n+        self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False)\n+\n+        print \"Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\"\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False, addlength(witness_script(0, self.pubkey[2]))) #block 430\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False, addlength(witness_script(1, self.pubkey[2]))) #block 431\n+\n+        print \"Verify previous witness txs skipped for mining can now be mined\"\n+        assert_equal(len(self.nodes[2].getrawmempool()), 4)\n+        block = self.nodes[2].generate(1) #block 432 (first block with new rules; 432 = 144 * 3)\n+        sync_blocks(self.nodes)\n+        assert_equal(len(self.nodes[2].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[2].getblock(block[0])[\"tx\"]), 5)\n+\n+        print \"Verify witness txs without witness data are invalid after the fork\"\n+        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][2], False)\n+        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][2], False)\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, addlength(witness_script(0, self.pubkey[2])))\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, addlength(witness_script(1, self.pubkey[2])))\n+\n+        print \"Verify default node can now use witness txs\"\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True) #block 432\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True) #block 433\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True) #block 434\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True) #block 435\n+\n+if __name__ == '__main__':\n+    SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "24746d28ef494cf4c03d06ef9015e5d5f2dac621",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDc0NmQyOGVmNDk0Y2Y0YzAzZDA2ZWY5MDE1ZTVkNWYyZGFjNjIx",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-03T14:48:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "Add transaction tests for segwit\n\n...with the four types of segwit payment, as well as all sighash combinaisons.",
      "tree": {
        "sha": "8970d36308e5d65995fdb58438e259f772ea49f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8970d36308e5d65995fdb58438e259f772ea49f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c0b16f48705977c85bbad01199f6cfcfb938d4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c0b16f48705977c85bbad01199f6cfcfb938d4a"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 241,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3371a226dc65bc61cc1cbaccd3334f1400d95a94",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=24746d28ef494cf4c03d06ef9015e5d5f2dac621",
        "patch": "@@ -255,5 +255,64 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n \n+[\"Unknown witness program version (with DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623ffffffffff1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"Unknown length for witness program v0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x15 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3fff\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff04b60300000000000001519e070000000000000151860b0000000000000100960000000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay (same index output value changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e80300000000000001516c070000000000000151b80b0000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay (input sequence changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000000000000000000000000000000000000000000000001000000000100000000010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay (third output value changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151540b00000000000001510002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with a push of 521 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x33198a9bfef674ebddb9ffaa52928017b8472791e54c609cb95f278ac6b1e349\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015102fdn+\n+[\"Witness with unknown version which push false on the stack should be invalid (even without DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x02 0x0000\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015101010100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness program should leave clean stack\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x2f04a3aa051f1f60d695f6c44c0c3d383973dfd446ace8962664a76bb10e31a8\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01000000000000000001510102515100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness v0 with a push of 2 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x02 0x0001\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015101040002000100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown witness version with non empty scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x02 0x0001\", 2000]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000151ffffffff010000000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Non witness Single|AnyoneCanPay hash input's position (permutation)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff0001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff02e9030000000000000151e803000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"P2WSH with a redeem representing a witness scriptPubKey should fail\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x34b6c399093e06cf9f0f7f660a1abcfe78fcf7b576f43993208edd9518a0ae9b\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0001045102010100000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "79166247ac9733d2249ba2a4bea50bca58fc7e74",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=24746d28ef494cf4c03d06ef9015e5d5f2dac621",
        "patch": "@@ -317,5 +317,155 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n \"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n \n+[\"Valid P2WPKH (Private key of segwit tests is L5AQtV2HDm4xGsseLokK2VAT2EtYKcTm3c7HwqnJBFt9LdaQULsM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100cfb07164b36ba64c1b1e8c7720a56ad64d96f6ef332d3d37f9cb3c96477dc44502200a464cd7a9cf94cd70f66ce4f4f0625ef650052c7afcfe29d7d7e01830ff91ed012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2WSH\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3db\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100aa5d8aa40a90f23ce2c3d11bc845ca4a12acd99cbea37de6b9f6d86edebba8cb022022dedc2aa0a255f74d04c0b76ece2d7c691f9dd11a64a8ac49f62a99c3a05f9d01232103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2SH(P2WPKH)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xfe9c7dacc9fcfbf7e3b7d5ad06aa2b28c5a7b7e3 EQUAL\", 1000]],\n+\"01000000000101000100000000000000000000000000000000000000000000000000000000000000000000171600144c9c3dfac4207d5d8cb89df5722cb3d712385e3fffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100cfb07164b36ba64c1b1e8c7720a56ad64d96f6ef332d3d37f9cb3c96477dc44502200a464cd7a9cf94cd70f66ce4f4f0625ef650052c7afcfe29d7d7e01830ff91ed012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2SH(P2WSH)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x2135ab4f0981830311e35600eebc7376dce3a914 EQUAL\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000023220020ff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100aa5d8aa40a90f23ce2c3d11bc845ca4a12acd99cbea37de6b9f6d86edebba8cb022022dedc2aa0a255f74d04c0b76ece2d7c691f9dd11a64a8ac49f62a99c3a05f9d01232103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff05540b0000000000000151d0070000000000000151840300000000000001513c0f00000000000001512c010000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71000000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff0484030000000000000151d0070000000000000151540b0000000000000151c800000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff04b60300000000000001519e070000000000000151860b00000000000001009600000000000000015100000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff04b60300000000000001519e070000000000000151860b0000000000000100960000000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None (same signature, only sequences changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"01000000000103000100000000000000000000000000000000000000000000000000000000000000000000000200000000010000000000000000000000000000000000000000000000000000000000000100000000ffffffff000100000000000000000000000000000000000000000000000000000000000002000000000200000003e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown witness program version  (without DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623ffffffffff1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with a push of 520 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x33198a9bfef674ebddb9ffaa52928017b8472791e54c609cb95f278ac6b1e349\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015102fdn+\n+[\"Transaction mixing all SigHash, segwit and normal inputs\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1002],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1003],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 4, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1004],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 5, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1005],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 6, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1006],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 7, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1007],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 8, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1008],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 9, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1009],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 10, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1010],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 11, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1011]],\n+\"0100000000010c00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff0001000000000000000000000000000000000000000000000000000000000000020000006a473044022026c2e65b33fcd03b2a3b0f25030f0244bd23cc45ae4dec0f48ae62255b1998a00220463aa3982b718d593a6b9e0044513fd67a5009c2fdccc59992cffc2b167889f4012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000030000006a4730440220008bd8382911218dcb4c9f2e75bf5c5c3635f2f2df49b36994fde85b0be21a1a02205a539ef10fb4c778b522c1be852352ea06c67ab74200977c722b0bc68972575a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000040000006b483045022100d9436c32ff065127d71e1a20e319e4fe0a103ba0272743dbd8580be4659ab5d302203fd62571ee1fe790b182d078ecfd092a509eac112bea558d122974ef9cc012c7012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000050000006a47304402200e2c149b114ec546015c13b2b464bbcb0cdc5872e6775787527af6cbc4830b6c02207e9396c6979fb15a9a2b96ca08a633866eaf20dc0ff3c03e512c1d5a1654f148012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000060000006b483045022100b20e70d897dc15420bccb5e0d3e208d27bdd676af109abbd3f88dbdb7721e6d6022005836e663173fbdfe069f54cde3c2decd3d0ea84378092a5d9d85ec8642e8a41012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff00010000000000000000000000000000000000000000000000000000000000000700000000ffffffff00010000000000000000000000000000000000000000000000000000000000000800000000ffffffff00010000000000000000000000000000000000000000000000000000000000000900000000ffffffff00010000000000000000000000000000000000000000000000000000000000000a00000000ffffffff00010000000000000000000000000000000000000000000000000000000000000b0000006a47304402206639c6e05e3b9d2675a7f3876286bdf7584fe2bbd15e0ce52dd4e02c0092cdc60220757d60b0a61fc95ada79d23746744c72bac1545a75ff6c2c7cdb6ae04e7e9592012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0ce8030000000000000151e9030000000000000151ea030000000000000151eb030000000000000151ec030000000000000151ed030000000000000151ee030000000000000151ef030000000000000151f0030000000000000151f1030000000000000151f2030000000000000151f30300000000000001510248304502210082219a54f61bf126bfc3fa068c6e33831222d1d7138c6faa9d33ca87fd4202d6022063f9902519624254d7c2c8ea7ba2d66ae975e4e229ae38043973ec707d5d4a83012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7102473044022017fb58502475848c1b09f162cb1688d0920ff7f142bed0ef904da2ccc88b168f02201798afa61850c65e77889cbcd648a5703b487895517c88f85cdd18b021ee246a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000000247304402202830b7926e488da75782c81a54cd281720890d1af064629ebf2e31bf9f5435f30220089afaa8b455bbeb7d9b9c3fe1ed37d07685ade8455c76472cda424d93e4074a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7102473044022026326fcdae9207b596c2b05921dbac11d81040c4d40378513670f19d9f4af893022034ecd7a282c0163b89aaa62c22ec202cef4736c58cd251649bad0d8139bcbf55012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71024730440220214978daeb2f38cd426ee6e2f44131a33d6b191af1c216247f1dd7d74c16d84a02205fdc05529b0bc0c430b4d5987264d9d075351c4f4484c16e91662e90a72aab24012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710247304402204a6e9f199dc9672cf2ff8094aaa784363be1eb62b679f7ff2df361124f1dca3302205eeb11f70fab5355c9c8ad1a0700ea355d315e334822fa182227e9815308ee8f012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown version witness program with empty witness\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness SIGHASH_SINGLE with output out of bound\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x20 0x4d6c2a32c87821d68fc016fca70797abdb80df6cd84651d40a9300c6bad79e62\", 1000]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff01d00700000000000001510003483045022100e078de4e96a0e05dcdc0a414124dd8475782b5f3f0ed3f607919e9a5eeeb22bf02201de309b3a3109adb3de8074b3610d4cf454c49b61247a2779a0bcbf31c889333032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc711976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"1 byte push should not be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x01 0x01\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"33 bytes push should not be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"The witness version must use OP_1 to OP_16 only\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x01 0x10 0x02 0x0001\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"The witness program push must be canonical\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x4c02 0x0001\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"Witness Single|AnyoneCanPay does not hash input's position\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff02e8030000000000000151e90300000000000001510247304402206d59682663faab5e4cb733c562e22cdae59294895929ec38d7c016621ff90da0022063ef0af5f970afe8a45ea836e3509b8847ed39463253106ac17d19c437d3d56b832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710248304502210085001a820bfcbc9f9de0298af714493f8a37b3b354bfd21a7097c3e009f2018c022050a8b4dbc8155d4d04da2f5cdd575dcf8dd0108de8bec759bd897ea01ecb3af7832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness Single|AnyoneCanPay does not hash input's position (permutation)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff02e9030000000000000151e80300000000000001510248304502210085001a820bfcbc9f9de0298af714493f8a37b3b354bfd21a7097c3e009f2018c022050a8b4dbc8155d4d04da2f5cdd575dcf8dd0108de8bec759bd897ea01ecb3af7832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710247304402206d59682663faab5e4cb733c562e22cdae59294895929ec38d7c016621ff90da0022063ef0af5f970afe8a45ea836e3509b8847ed39463253106ac17d19c437d3d56b832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Non witness Single|AnyoneCanPay hash input's position\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n+\"01000000020001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff00010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff02e8030000000000000151e903000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "a87074dc7fd356d21be037088304cdcad1949895",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24746d28ef494cf4c03d06ef9015e5d5f2dac621/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=24746d28ef494cf4c03d06ef9015e5d5f2dac621",
        "patch": "@@ -50,7 +50,9 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n     (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n     (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n-    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY);\n+    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n+    (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n+    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n \n unsigned int ParseScriptFlags(string strFlags)\n {\n@@ -113,6 +115,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -123,13 +126,17 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n                 UniValue vinput = input.get_array();\n-                if (vinput.size() != 3)\n+                if (vinput.size() < 3 || vinput.size() > 4)\n                 {\n                     fValid = false;\n                     break;\n                 }\n-\n-                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n+                if (vinput.size() >= 4)\n+                {\n+                    mapprevOutValues[outpoint] = vinput[3].get_int64();\n+                }\n             }\n             if (!fValid)\n             {\n@@ -138,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             CTransaction tx;\n             stream >> tx;\n \n@@ -155,9 +162,13 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 }\n \n                 CAmount amount = 0;\n+                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n+                    amount = mapprevOutValues[tx.vin[i].prevout];\n+                }\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n+                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -189,6 +200,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -199,13 +211,17 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n                 UniValue vinput = input.get_array();\n-                if (vinput.size() != 3)\n+                if (vinput.size() < 3 || vinput.size() > 4)\n                 {\n                     fValid = false;\n                     break;\n                 }\n-\n-                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n+                if (vinput.size() >= 4)\n+                {\n+                    mapprevOutValues[outpoint] = vinput[3].get_int64();\n+                }\n             }\n             if (!fValid)\n             {\n@@ -214,7 +230,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION  | SERIALIZE_TRANSACTION_WITNESS);\n             CTransaction tx;\n             stream >> tx;\n \n@@ -231,8 +247,12 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 CAmount amount = 0;\n+                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n+                    amount = mapprevOutValues[tx.vin[i].prevout];\n+                }\n+                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n+                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -422,7 +442,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n     scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n     scriptPubkey1L << ToByteVector(pubkey1L) << OP_CHECKSIG;\n-    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG; \n+    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG;\n     std::vector<CPubKey> oneandthree;\n     oneandthree.push_back(pubkey1);\n     oneandthree.push_back(pubkey3);"
      }
    ]
  },
  {
    "sha": "3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDA5YWQ2MmI4ZjRkZjAzZDQ0ZTMyYWE0ZjQ4NjkxYzBlMWQxYzk3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-04T14:01:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "Add segwit support to script_tests",
      "tree": {
        "sha": "376bccea2ea1e6ce782523306432178e460cee1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/376bccea2ea1e6ce782523306432178e460cee1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24746d28ef494cf4c03d06ef9015e5d5f2dac621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24746d28ef494cf4c03d06ef9015e5d5f2dac621"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 42,
      "deletions": 19
    },
    "files": [
      {
        "sha": "eea12bca4cd28af2cd6e640cc3f17191f7353023",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
        "patch": "@@ -1,5 +1,5 @@\n [\n-[\"Format is: [scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n+[\"Format is: [[wit...]?, scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n [\"It is evaluated as if there was a crediting coinbase transaction with two 0\"],\n [\"pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\"],\n [\"followed by a spending transaction which spends this output as only input (and\"],\n@@ -1251,6 +1251,12 @@\n [\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n \n+[\"Some basic segwit checks\"],\n+[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n+[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n+[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n+[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\","
      },
      {
        "sha": "e4961b506b63a46a0c0384d093a91dae622f4f46",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 18,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
        "patch": "@@ -88,7 +88,14 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_SIG_NULLDUMMY, \"SIG_NULLDUMMY\"},\n     {SCRIPT_ERR_PUBKEYTYPE, \"PUBKEYTYPE\"},\n     {SCRIPT_ERR_CLEANSTACK, \"CLEANSTACK\"},\n-    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"}\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"},\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM, \"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH, \"WITNESS_PROGRAM_WRONG_LENGTH\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY, \"WITNESS_PROGRAM_WITNESS_EMPTY\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH, \"WITNESS_PROGRAM_MISMATCH\"},\n+    {SCRIPT_ERR_WITNESS_MALLEATED, \"WITNESS_MALLEATED\"},\n+    {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n+    {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)\n@@ -127,13 +134,15 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)\n {\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n     txSpend.nLockTime = 0;\n     txSpend.vin.resize(1);\n     txSpend.vout.resize(1);\n+    txSpend.wit.vtxinwit.resize(1);\n+    txSpend.wit.vtxinwit[0].scriptWitness = scriptWitness;\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n@@ -144,7 +153,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n     if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n@@ -153,12 +162,12 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n     }\n     ScriptError err;\n     CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n@@ -280,7 +289,7 @@ class TestBuilder\n         } else {\n             creditTx = BuildCreditingTransaction(redeemScript);\n         }\n-        spendTx = BuildSpendingTransaction(CScript(), creditTx);\n+        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n     }\n \n     TestBuilder& ScriptError(ScriptError_t err)\n@@ -363,7 +372,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, comment, scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, CScriptWitness(), flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -703,29 +712,37 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n {\n     // Read tests from test/data/script_tests.json\n     // Format is an array of arrays\n-    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n+    // Inner arrays are [ [\"wit\"...]?, \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n     UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 4) // Allow size > 3; extra stuff ignored (useful for comments)\n+        CScriptWitness witness;\n+        unsigned int pos = 0;\n+        if (test.size() > 0 && test[pos].isArray()) {\n+            for (unsigned int i = 0; i < test[pos].size(); i++) {\n+                witness.stack.push_back(ParseHex(test[pos][i].get_str()));\n+            }\n+            pos++;\n+        }\n+        if (test.size() < 4 + pos) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n             }\n             continue;\n         }\n-        string scriptSigString = test[0].get_str();\n+        string scriptSigString = test[pos++].get_str();\n         CScript scriptSig = ParseScript(scriptSigString);\n-        string scriptPubKeyString = test[1].get_str();\n+        string scriptPubKeyString = test[pos++].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n-        unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        int scriptError = ParseScriptError(test[3].get_str());\n+        unsigned int scriptflags = ParseScriptFlags(test[pos++].get_str());\n+        int scriptError = ParseScriptError(test[pos++].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, scriptError);\n+        DoTest(scriptPubKey, scriptSig, witness, scriptflags, strTest, scriptError);\n     }\n }\n \n@@ -803,7 +820,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     scriptPubKey12 << OP_1 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n-    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n+    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n     BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n@@ -834,7 +851,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     scriptPubKey23 << OP_2 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << ToByteVector(key3.GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n-    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n+    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom23);\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n@@ -907,7 +924,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     }\n \n     CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n-    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), txFrom);\n+    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n "
      }
    ]
  },
  {
    "sha": "e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWZmY2MxOWFjNmE3OGVhNzVmODZhZDBhNDBkNTkyOGRkYTliYzRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T11:37:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "Autogeneration support for witness in script_tests",
      "tree": {
        "sha": "24d3e45380019cb37e395ecfa503f57978a1cb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24d3e45380019cb37e395ecfa503f57978a1cb9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97"
      }
    ],
    "stats": {
      "total": 235,
      "additions": 226,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e94fec17ed43b90601d23a0e8e3be3e283093bb0",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
        "patch": "@@ -1825,6 +1825,138 @@\n     \"OK\",\n     \"P2SH with CLEANSTACK\"\n ],\n+[\n+    [\n+        \"3044022039105b995a5f448639a997a5c90fda06f50b49df30c3bdb6663217bf79323db002206fecd54269dec569fcc517178880eb58bb40f381a282bb75766ff3637d5f4b4301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2WSH\"\n+],\n+[\n+    [\n+        \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2WPKH\"\n+],\n+[\n+    [\n+        \"3044022061fc1a144e221ec77a58a4281936eb6a1b715b9349e446e74d106ec26c8633ba022008064a0d112e8ad514440fcdfaa1006e48305d6844f50a65873fb4b2cf9c035f01\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH)\"\n+],\n+[\n+    [\n+        \"3044022014e69768e174972f21d32d93002ca6fc26133cb9e819ceef7efb970798bde7b4022078b86849dbbec692ec9355aa2a763fce7ea11bf72fdd8ea5ea8083de6f8a77fe01\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH)\"\n+],\n+[\n+    [\n+        \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WSH with the wrong key\"\n+],\n+[\n+    [\n+        \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WPKH with the wrong key\"\n+],\n+[\n+    [\n+        \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WSH) with the wrong key\"\n+],\n+[\n+    [\n+        \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WPKH) with the wrong key\"\n+],\n+[\n+    [\n+        \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2WSH with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2WPKH with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH) with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "d66c9f122bd19e08ca10cd7df8e979aa84289240",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 9,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
        "patch": "@@ -253,11 +253,22 @@ struct KeyData\n     }\n };\n \n+enum WitnessMode {\n+    WITNESS_NONE,\n+    WITNESS_PKH,\n+    WITNESS_SH\n+};\n \n class TestBuilder\n {\n private:\n-    CScript scriptPubKey;\n+    //! Actually executed script\n+    CScript script;\n+    //! The P2SH redeemscript\n+    CScript redeemscript;\n+    //! The Witness embedded script\n+    CScript witscript;\n+    CScriptWitness scriptWitness;\n     CTransaction creditTx;\n     CMutableTransaction spendTx;\n     bool havePush;\n@@ -282,13 +293,25 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n+    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n     {\n+        CScript scriptPubKey = script;\n+        if (wm == WITNESS_PKH) {\n+            uint160 hash;\n+            CHash160().Write(&script[1], script.size() - 1).Finalize(hash.begin());\n+            script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(hash) << OP_EQUALVERIFY << OP_CHECKSIG;\n+            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+        } else if (wm == WITNESS_SH) {\n+            witscript = scriptPubKey;\n+            uint256 hash;\n+            CSHA256().Write(&witscript[0], witscript.size()).Finalize(hash.begin());\n+            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+        }\n         if (P2SH) {\n-            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n-        } else {\n-            creditTx = BuildCreditingTransaction(redeemScript);\n+            redeemscript = scriptPubKey;\n+            scriptPubKey = CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n         }\n+        creditTx = BuildCreditingTransaction(scriptPubKey);\n         spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n     }\n \n@@ -318,9 +341,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 0)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType, 0, 0);\n+        uint256 hash = SignatureHash(script, spendTx, 0, nHashType, 0, sigversion);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -336,6 +359,11 @@ class TestBuilder\n         return *this;\n     }\n \n+    TestBuilder& PushWitSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 1)\n+    {\n+        return PushSig(key, nHashType, lenR, lenS, sigversion).AsWit();\n+    }\n+\n     TestBuilder& Push(const CPubKey& pubkey)\n     {\n         DoPush(std::vector<unsigned char>(pubkey.begin(), pubkey.end()));\n@@ -344,10 +372,16 @@ class TestBuilder\n \n     TestBuilder& PushRedeem()\n     {\n-        DoPush(std::vector<unsigned char>(scriptPubKey.begin(), scriptPubKey.end()));\n+        DoPush(std::vector<unsigned char>(redeemscript.begin(), redeemscript.end()));\n         return *this;\n     }\n \n+    TestBuilder& PushWitRedeem()\n+    {\n+        DoPush(std::vector<unsigned char>(witscript.begin(), witscript.end()));\n+        return AsWit();\n+    }\n+\n     TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)\n     {\n         assert(havePush);\n@@ -372,15 +406,30 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, CScriptWitness(), flags, comment, scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n \n+    TestBuilder& AsWit()\n+    {\n+        assert(havePush);\n+        scriptWitness.stack.push_back(push);\n+        havePush = false;\n+        return *this;\n+    }\n+\n     UniValue GetJSON()\n     {\n         DoPush();\n         UniValue array(UniValue::VARR);\n+        if (!scriptWitness.stack.empty()) {\n+            UniValue wit(UniValue::VARR);\n+            for (unsigned i = 0; i < scriptWitness.stack.size(); i++) {\n+                wit.push_back(HexStr(scriptWitness.stack[i]));\n+            }\n+            array.push_back(wit);\n+        }\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n@@ -676,6 +725,42 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n                                ).PushSig(keys.key0).PushRedeem());\n \n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2WSH with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2WPKH with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2SH(P2WPKH) with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2WSH with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2WPKH with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem());\n \n     std::set<std::string> tests_set;\n "
      }
    ]
  },
  {
    "sha": "5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTZhYmU1NmRiZDBkNTdlMGU5ZTU5NTcwZTU2MGExZWUzYTc4MWJk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:02:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "Update p2p test framework with segwit support\n\nmininode now supports witness transactions/blocks, blocktools\nhas a helper for adding witness commitments to blocks, and script\nhas a function to calculate hashes for signature under sigversion\n1, used by segwit.",
      "tree": {
        "sha": "4a2830bc70c67d87e68253afd27ee2c45dd0ba72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a2830bc70c67d87e68253afd27ee2c45dd0ba72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 261,
      "deletions": 27
    },
    "files": [
      {
        "sha": "b24d72641ce9b9be55ccd4e0d01365c439265140",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
        "patch": "@@ -5,7 +5,7 @@\n #\n \n from .mininode import *\n-from .script import CScript, OP_TRUE, OP_CHECKSIG\n+from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -22,6 +22,29 @@ def create_block(hashprev, coinbase, nTime=None):\n     block.calc_sha256()\n     return block\n \n+# From BIP141\n+WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n+\n+# According to BIP141, nVersion=5 blocks must commit to the\n+# hash of all in-block transactions including witness.\n+def add_witness_commitment(block, nonce=0L):\n+    # First calculate the merkle root of the block's\n+    # transactions, with witnesses.\n+    witness_nonce = nonce\n+    witness_root = block.calc_witness_merkle_root()\n+    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n+    # witness_nonce should go to coinbase witness.\n+    block.vtx[0].wit.vtxinwit = [CTxinWitness()]\n+    block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(witness_nonce)]\n+\n+    # witness commitment is the last OP_RETURN output in coinbase\n+    output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n+    block.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, output_data])))\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    block.rehash()\n+\n+\n def serialize_script_num(value):\n     r = bytearray(0)\n     if value == 0:"
      },
      {
        "sha": "c915cacc7542c6578698c774d6f1850cc81671ee",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 186,
        "deletions": 25,
        "changes": 211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
        "patch": "@@ -23,7 +23,7 @@\n import time\n import sys\n import random\n-from binascii import hexlify, unhexlify\n+from util import *\n from io import BytesIO\n from codecs import encode\n import hashlib\n@@ -41,6 +41,11 @@\n \n COIN = 100000000L # 1 btc in satoshis\n \n+NODE_NETWORK = (1 << 0)\n+NODE_GETUTXO = (1 << 1)\n+NODE_BLOOM = (1 << 2)\n+NODE_WITNESS = (1 << 3)\n+\n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when \n # using select)\n@@ -130,7 +135,10 @@ def deser_vector(f, c):\n     return r\n \n \n-def ser_vector(l):\n+# ser_function_name: Allow for an alternate serialization function on the\n+# entries in the vector (we use this for serializing the vector of transactions\n+# for a witness block).\n+def ser_vector(l, ser_function_name=None):\n     r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n@@ -141,7 +149,10 @@ def ser_vector(l):\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n-        r += i.serialize()\n+        if ser_function_name:\n+            r += getattr(i, ser_function_name)()\n+        else:\n+            r += i.serialize()\n     return r\n \n \n@@ -236,12 +247,12 @@ def ser_int_vector(l):\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(unhexlify(hex_string.encode('ascii'))))\n+    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string.encode('ascii'))))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return hexlify(obj.serialize()).decode('ascii')\n+    return bytes_to_hex_str(obj.serialize()).decode('ascii')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n@@ -270,12 +281,16 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n+MSG_WITNESS_FLAG = 1<<30\n \n class CInv(object):\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n-        2: \"Block\"}\n+        2: \"Block\",\n+        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\"\n+    }\n \n     def __init__(self, t=0, h=0L):\n         self.type = t\n@@ -359,7 +374,7 @@ def serialize(self):\n \n     def __repr__(self):\n         return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), hexlify(self.scriptSig),\n+            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n                self.nSequence)\n \n \n@@ -381,7 +396,67 @@ def serialize(self):\n     def __repr__(self):\n         return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n             % (self.nValue // COIN, self.nValue % COIN,\n-               hexlify(self.scriptPubKey))\n+               bytes_to_hex_str(self.scriptPubKey))\n+\n+\n+class CScriptWitness(object):\n+    def __init__(self):\n+        # stack is a vector of strings\n+        self.stack = []\n+\n+    def __repr__(self):\n+        return \"CScriptWitness(%s)\" % \\\n+               (\",\".join([binascii.bytes_to_hex_str(x) for x in self.stack]))\n+\n+    def is_null(self):\n+        if self.stack:\n+            return False\n+        return True\n+\n+\n+class CTxinWitness(object):\n+    def __init__(self):\n+        self.scriptWitness = CScriptWitness()\n+\n+    def deserialize(self, f):\n+        self.scriptWitness.stack = deser_string_vector(f)\n+\n+    def serialize(self):\n+        return ser_string_vector(self.scriptWitness.stack)\n+\n+    def __repr__(self):\n+        return repr(self.scriptWitness)\n+\n+    def is_null(self):\n+        return self.scriptWitness.is_null()\n+\n+\n+class CTxWitness(object):\n+    def __init__(self):\n+        self.vtxinwit = []\n+\n+    def deserialize(self, f):\n+        for i in xrange(len(self.vtxinwit)):\n+            self.vtxinwit[i].deserialize(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        # This is different than the usual vector serialization --\n+        # we omit the length of the vector, which is required to be\n+        # the same length as the transaction's vin vector.\n+        for x in self.vtxinwit:\n+            r += x.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxWitness(%s)\" % \\\n+               (';'.join([repr(x) for x in self.vtxinwit]))\n+\n+    def is_null(self):\n+        for x in self.vtxinwit:\n+            if not x.is_null():\n+                return False\n+        return True\n \n \n class CTransaction(object):\n@@ -390,6 +465,7 @@ def __init__(self, tx=None):\n             self.nVersion = 1\n             self.vin = []\n             self.vout = []\n+            self.wit = CTxWitness()\n             self.nLockTime = 0\n             self.sha256 = None\n             self.hash = None\n@@ -398,32 +474,80 @@ def __init__(self, tx=None):\n             self.vin = copy.deepcopy(tx.vin)\n             self.vout = copy.deepcopy(tx.vout)\n             self.nLockTime = tx.nLockTime\n-            self.sha256 = None\n-            self.hash = None\n+            self.sha256 = tx.sha256\n+            self.hash = tx.hash\n+            self.wit = copy.deepcopy(tx.wit)\n \n     def deserialize(self, f):\n         self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n         self.vin = deser_vector(f, CTxIn)\n-        self.vout = deser_vector(f, CTxOut)\n+        flags = 0\n+        if len(self.vin) == 0:\n+            flags = struct.unpack(\"<B\", f.read(1))[0]\n+            # Not sure why flags can't be zero, but this\n+            # matches the implementation in bitcoind\n+            if (flags != 0):\n+                self.vin = deser_vector(f, CTxIn)\n+                self.vout = deser_vector(f, CTxOut)\n+        else:\n+            self.vout = deser_vector(f, CTxOut)\n+        if flags != 0:\n+            self.wit.vtxinwit = [CTxinWitness()]*len(self.vin)\n+            self.wit.deserialize(f)\n         self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n         self.sha256 = None\n         self.hash = None\n \n-    def serialize(self):\n+    def serialize_without_witness(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Only serialize with witness when explicitly called for\n+    def serialize_with_witness(self):\n+        flags = 0\n+        if not self.wit.is_null():\n+            flags |= 1\n         r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n+        if flags:\n+            dummy = []\n+            r += ser_vector(dummy)\n+            r += struct.pack(\"<B\", flags)\n         r += ser_vector(self.vin)\n         r += ser_vector(self.vout)\n+        if flags & 1:\n+            if (len(self.wit.vtxinwit) != len(self.vin)):\n+                # vtxinwit must have the same length as vin\n+                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n+                for i in xrange(len(self.wit.vtxinwit), len(self.vin)):\n+                    self.wit.vtxinwit.append(CTxinWitness())\n+            r += self.wit.serialize()\n         r += struct.pack(\"<I\", self.nLockTime)\n         return r\n \n+    # Regular serialization is without witness -- must explicitly\n+    # call serialize_with_witness to include witness data.\n+    def serialize(self):\n+        return self.serialize_without_witness()\n+\n+    # Recalculate the txid (transaction hash without witness)\n     def rehash(self):\n         self.sha256 = None\n         self.calc_sha256()\n \n-    def calc_sha256(self):\n+    # We will only cache the serialization without witness in\n+    # self.sha256 and self.hash -- those are expected to be the txid.\n+    def calc_sha256(self, with_witness=False):\n+        if with_witness:\n+            # Don't cache the result, just return it\n+            return uint256_from_str(hash256(self.serialize_with_witness()))\n+\n         if self.sha256 is None:\n-            self.sha256 = uint256_from_str(hash256(self.serialize()))\n+            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n         self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n \n     def is_valid(self):\n@@ -515,17 +639,17 @@ def deserialize(self, f):\n         super(CBlock, self).deserialize(f)\n         self.vtx = deser_vector(f, CTransaction)\n \n-    def serialize(self):\n+    def serialize(self, with_witness=False):\n         r = b\"\"\n         r += super(CBlock, self).serialize()\n-        r += ser_vector(self.vtx)\n+        if with_witness:\n+            r += ser_vector(self.vtx, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.vtx)\n         return r\n \n-    def calc_merkle_root(self):\n-        hashes = []\n-        for tx in self.vtx:\n-            tx.calc_sha256()\n-            hashes.append(ser_uint256(tx.sha256))\n+    # Calculate the merkle root given a vector of transaction hashes\n+    def get_merkle_root(self, hashes):\n         while len(hashes) > 1:\n             newhashes = []\n             for i in xrange(0, len(hashes), 2):\n@@ -534,6 +658,24 @@ def calc_merkle_root(self):\n             hashes = newhashes\n         return uint256_from_str(hashes[0])\n \n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        return self.get_merkle_root(hashes)\n+\n+    def calc_witness_merkle_root(self):\n+        # For witness root purposes, the hash of the\n+        # coinbase, with witness, is defined to be 0...0\n+        hashes = [ser_uint256(0)]\n+\n+        for tx in self.vtx[1:]:\n+            # Calculate the hashes with witness data\n+            hashes.append(ser_uint256(tx.calc_sha256(True)))\n+\n+        return self.get_merkle_root(hashes)\n+\n     def is_valid(self):\n         self.calc_sha256()\n         target = uint256_from_compact(self.nBits)\n@@ -809,11 +951,16 @@ def deserialize(self, f):\n         self.tx.deserialize(f)\n \n     def serialize(self):\n-        return self.tx.serialize()\n+        return self.tx.serialize_without_witness()\n \n     def __repr__(self):\n         return \"msg_tx(tx=%s)\" % (repr(self.tx))\n \n+class msg_witness_tx(msg_tx):\n+\n+    def serialize(self):\n+        return self.tx.serialize_with_witness()\n+\n \n class msg_block(object):\n     command = b\"block\"\n@@ -833,6 +980,12 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n \n+class msg_witness_block(msg_block):\n+\n+    def serialize(self):\n+        r = self.block.serialize(with_witness=True)\n+        return r\n+\n \n class msg_getaddr(object):\n     command = b\"getaddr\"\n@@ -932,6 +1085,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendheaders()\"\n \n+\n # getheaders message has\n # number of entries\n # vector of hashes\n@@ -1050,6 +1204,8 @@ def __init__(self):\n         # tests; it causes message delivery to sleep for the specified time\n         # before acquiring the global lock and delivering the next message.\n         self.deliver_sleep_time = None\n+        # Remember the services our peer has advertised\n+        self.peer_services = None\n \n     def set_deliver_sleep_time(self, value):\n         with mininode_lock:\n@@ -1087,6 +1243,7 @@ def on_version(self, conn, message):\n         conn.ver_send = min(MY_VERSION, message.nVersion)\n         if message.nVersion < 209:\n             conn.ver_recv = conn.ver_send\n+        conn.nServices = message.nServices\n \n     def on_verack(self, conn, message):\n         conn.ver_recv = conn.ver_send\n@@ -1117,6 +1274,7 @@ def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n     def on_feefilter(self, conn, message): pass\n+    def on_sendheaders(self, conn, message): pass\n \n # More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n class SingleNodeConnCB(NodeConnCB):\n@@ -1165,15 +1323,17 @@ class NodeConn(asyncore.dispatcher):\n         b\"getheaders\": msg_getheaders,\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter\n+        b\"feefilter\": msg_feefilter,\n+        b\"sendheaders\": msg_sendheaders\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+        \"segnet\": b\"\\x2e\\x96\\xea\\xca\"     # segnet\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1188,6 +1348,7 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         self.network = net\n         self.cb = callback\n         self.disconnect = False\n+        self.nServices = 0\n \n         # stuff version msg into sendbuf\n         vt = msg_version()"
      },
      {
        "sha": "c446fda84f4549aceb779f560208492ee0c936d6",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
        "patch": "@@ -14,8 +14,9 @@\n \n from __future__ import absolute_import, division, print_function, unicode_literals\n \n-from .mininode import CTransaction, CTxOut, hash256\n+from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n+import hashlib\n \n import sys\n bchr = chr\n@@ -35,6 +36,10 @@\n \n OPCODE_NAMES = {}\n \n+def hash160(s):\n+    return hashlib.new('ripemd160', sha256(s)).digest()\n+\n+\n _opcode_instances = []\n class CScriptOp(int):\n     \"\"\"A single script opcode\"\"\"\n@@ -894,3 +899,48 @@ def SignatureHash(script, txTo, inIdx, hashtype):\n     hash = hash256(s)\n \n     return (hash, None)\n+\n+# TODO: Allow cached hashPrevouts/hashSequence/hashOutputs to be provided.\n+# Performance optimization probably not necessary for python tests, however.\n+# Note that this corresponds to sigversion == 1 in EvalScript, which is used\n+# for version 0 witnesses.\n+def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):\n+\n+    hashPrevouts = 0L\n+    hashSequence = 0L\n+    hashOutputs = 0L\n+\n+    if not (hashtype & SIGHASH_ANYONECANPAY):\n+        serialize_prevouts = str()\n+        for i in txTo.vin:\n+            serialize_prevouts += i.prevout.serialize()\n+        hashPrevouts = uint256_from_str(hash256(serialize_prevouts))\n+\n+    if (not (hashtype & SIGHASH_ANYONECANPAY) and (hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n+        serialize_sequence = str()\n+        for i in txTo.vin:\n+            serialize_sequence += struct.pack(\"<I\", i.nSequence)\n+        hashSequence = uint256_from_str(hash256(serialize_sequence))\n+\n+    if ((hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n+        serialize_outputs = str()\n+        for o in txTo.vout:\n+            serialize_outputs += o.serialize()\n+        hashOutputs = uint256_from_str(hash256(serialize_outputs))\n+    elif ((hashtype & 0x1f) == SIGHASH_SINGLE and inIdx < len(txTo.vout)):\n+        serialize_outputs = txTo.vout[inIdx].serialize()\n+        hashOutputs = uint256_from_str(hash256(serialize_outputs))\n+\n+    ss = str()\n+    ss += struct.pack(\"<i\", txTo.nVersion)\n+    ss += ser_uint256(hashPrevouts)\n+    ss += ser_uint256(hashSequence)\n+    ss += txTo.vin[inIdx].prevout.serialize()\n+    ss += ser_string(script)\n+    ss += struct.pack(\"<q\", amount)\n+    ss += struct.pack(\"<I\", txTo.vin[inIdx].nSequence)\n+    ss += ser_uint256(hashOutputs)\n+    ss += struct.pack(\"<i\", txTo.nLockTime)\n+    ss += struct.pack(\"<I\", hashtype)\n+\n+    return hash256(ss)"
      }
    ]
  },
  {
    "sha": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjUzOWY5YmZlNGU5NmE5YjMwZmZkYzg3NGFhODBlNDMwOGM5ZGVj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:03:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "message": "P2P test for segwit\n\nRebased by Pieter Wuille",
      "tree": {
        "sha": "cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd"
      }
    ],
    "stats": {
      "total": 1577,
      "additions": 1577,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a0d639b69720d4e5110b6cebbfce61e2dc67a46",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
        "patch": "@@ -122,6 +122,7 @@\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n+    'p2p-segwit.py',\n     'importprunedfunds.py',\n ]\n if ENABLE_ZMQ:"
      },
      {
        "sha": "b241bac26e4ced9624d83529185670f3a26fc5ab",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "added",
        "additions": 1576,
        "deletions": 0,
        "changes": 1576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
        "patch": "@@ -0,0 +1,1576 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0L):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print \"\\tVerifying NODE_WITNESS service bit\"\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print \"\\tTesting non-witness transaction\"\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), \"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print \"\\tTesting behavior of unnecessary witnesses\"\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print \"\\tTesting witness commitments\"\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28L)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1L)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0L)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print \"\\tTesting witness block malleability\"\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append('a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1L) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print \"\\tTesting witness block size limit\"\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, \"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in xrange(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in xrange(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), \"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in xrange(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = ['a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = 'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1L)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0L)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print \"\\tTesting extra witness data in tx\"\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), \"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = \"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print \"\\tTesting maximum witness push size\"\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ 'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print \"\\tTesting maximum witness program length\"\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript(['a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript(['a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print \"\\tTesting witness input length\"\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in xrange(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = \"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in xrange(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in xrange(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = ['a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = ['a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = ['a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print \"\\tTesting relay of witness transactions\"\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print \"Error: duplicate tx getdata!\"\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.\n+    def test_tx_relay_after_segwit_activation(self):\n+        print \"\\tTesting relay of witness transactions\"\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected because we can't use a witness\n+        # when spending a non-witness output.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that unnecessary witnesses are rejected.\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # Verify that removing the witness succeeds.\n+        # Re-announcing won't result in a getdata for ~2.5 minutes, so just\n+        # deliver the modified transaction.\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Now try to add extra witness data to a valid witness tx.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n+        tx3.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+\n+        # Get rid of the extra witness, and verify acceptance.\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        # Also check that old_node gets a tx announcement, even though this is\n+        # a witness transaction.\n+        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+\n+        # Cleanup: mine the transactions and update utxo for next test\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n+    # This is true regardless of segwit activation.\n+    def test_block_relay(self, segwit_activated):\n+        print \"\\tTesting block relay\"\n+\n+        # test_node has set NODE_WITNESS, so all getdata requests should be for\n+        # witness blocks.\n+        # Test announcing a block via inv results in a getdata, and that\n+        # announcing a version 4 or random VB block with a header results in a getdata\n+\n+        block1 = self.build_next_block()\n+        block1.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block1, True)\n+\n+        block2 = self.build_next_block(nVersion=4)\n+        block2.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block2, True)\n+\n+        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3.solve()\n+        self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block3, True)\n+\n+        # Check that we can getdata for witness blocks or regular blocks,\n+        # and the right thing happens.\n+        if segwit_activated == False:\n+            # Before activation, we should be able to request old blocks with\n+            # or without witness, and they should be the same.\n+            chain_height = self.nodes[0].getblockcount()\n+            # Pick 10 random blocks on main chain, and verify that getdata's\n+            # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n+            all_heights = range(chain_height+1)\n+            random.shuffle(all_heights)\n+            all_heights = all_heights[0:10]\n+            for height in all_heights:\n+                block_hash = self.nodes[0].getblockhash(height)\n+                rpc_block = self.nodes[0].getblock(block_hash, False)\n+                block_hash = int(block_hash, 16)\n+                block = self.test_node.request_block(block_hash, 2)\n+                wit_block = self.test_node.request_block(block_hash, 2|MSG_WITNESS_FLAG)\n+                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n+        else:\n+            # After activation, witness blocks and non-witness blocks should\n+            # be different.  Verify rpc getblock() returns witness blocks, while\n+            # getdata respects the requested type.\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [])\n+            # This gives us a witness commitment.\n+            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n+            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            self.test_node.test_witness_block(block, accepted=True)\n+            # Now try to retrieve it...\n+            rpc_block = self.nodes[0].getblock(block.hash, False)\n+            non_wit_block = self.test_node.request_block(block.sha256, 2)\n+            wit_block = self.test_node.request_block(block.sha256, 2|MSG_WITNESS_FLAG)\n+            assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n+            assert_equal(wit_block.serialize(True), block.serialize(True))\n+\n+\n+    # Verify that future segwit upgraded transactions are non-standard,\n+    # but valid in blocks. Can run this before and after segwit activation.\n+    def test_segwit_versions(self):\n+        print \"\\tTesting standardness/consensus for segwit versions (0-16)\"\n+        assert(len(self.utxo))\n+        NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n+        if (len(self.utxo) < NUM_TESTS):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+            split_value = (self.utxo[0].nValue - 4000) / NUM_TESTS\n+            for i in xrange(NUM_TESTS):\n+                tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n+            tx.rehash()\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [tx])\n+            self.test_node.test_witness_block(block, accepted=True)\n+            self.utxo.pop(0)\n+            for i in xrange(NUM_TESTS):\n+                self.utxo.append(UTXO(tx.sha256, i, split_value))\n+\n+        sync_blocks(self.nodes)\n+        temp_utxo = []\n+        tx = CTransaction()\n+        count = 0\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        for version in range(OP_1, OP_16+1) + [OP_0]:\n+            count += 1\n+            # First try to spend to a future version segwit scriptPubKey.\n+            scriptPubKey = CScript([CScriptOp(version), witness_hash])\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\")]\n+            tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n+            tx.rehash()\n+            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            self.utxo.pop(0)\n+            temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+        self.nodes[0].generate(1) # Mine all the transactions\n+        sync_blocks(self.nodes)\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Finally, verify that version 0 -> version 1 transactions\n+        # are non-standard\n+        scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), \"\")]\n+        tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        tx2.rehash()\n+        # Gets accepted to test_node, because standardness of outputs isn't\n+        # checked with fRequireStandard\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n+        temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        tx3 = CTransaction()\n+        total_value = 0\n+        for i in temp_utxo:\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx3.wit.vtxinwit.append(CTxinWitness())\n+            total_value += i.nValue\n+        tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n+        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.rehash()\n+        # Spending a higher version witness output is not allowed by policy,\n+        # even with fRequireStandard=false.\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        self.test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert(\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+\n+        # Building a block with the transaction must be valid, however.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2, tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+        # Add utxo to our list\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_premature_coinbase_witness_spend(self):\n+        print \"\\tTesting premature coinbase witness spend\"\n+        block = self.build_next_block()\n+        # Change the output of the block to be a witness output.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        block.vtx[0].vout[0].scriptPubKey = scriptPubKey\n+        # This next line will rehash the coinbase and update the merkle\n+        # root, and solve.\n+        self.update_witness_block_with_transactions(block, [])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        spend_tx = CTransaction()\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), \"\")]\n+        spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        spend_tx.rehash()\n+\n+        # Now test a premature spend.\n+        self.nodes[0].generate(98)\n+        sync_blocks(self.nodes)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=False)\n+\n+        # Advancing one more block should allow the spend.\n+        self.nodes[0].generate(1)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+\n+    def test_signature_version_1(self):\n+        print \"\\tTesting segwit signature hash version 1\"\n+        key = CECKey()\n+        key.set_secretbytes(\"9\")\n+        pubkey = CPubKey(key.get_pubkey())\n+\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First create a witness output for use in the tests.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+        # Mine this transaction in preparation for following tests.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+\n+        # Add signature for a P2PK witness program.\n+        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+            signature = key.sign(tx_hash) + chr(hashtype)\n+            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+            txTo.rehash()\n+\n+        # Test each hashtype\n+        prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+        for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n+            for hashtype in [SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE]:\n+                hashtype |= sigflag\n+                block = self.build_next_block()\n+                tx = CTransaction()\n+                tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+                tx.vout.append(CTxOut(prev_utxo.nValue - 1000, scriptPubKey))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                # Too-large input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Too-small input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue-1, key)\n+                block.vtx.pop() # remove last tx\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Now try correct value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n+                block.vtx.pop()\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=True)\n+\n+                prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+\n+        # Test combinations of signature hashes.\n+        # Split the utxo into a lot of outputs.\n+        # Randomly choose up to 10 to spend, sign with different hashtypes, and\n+        # output to a random number of outputs.  Repeat NUM_TESTS times.\n+        # Ensure that we've tested a situation where we use SIGHASH_SINGLE with\n+        # an input index > number of outputs.\n+        NUM_TESTS = 500\n+        temp_utxos = []\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+        split_value = prev_utxo.nValue // NUM_TESTS\n+        for i in xrange(NUM_TESTS):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n+        for i in xrange(NUM_TESTS):\n+            temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        block = self.build_next_block()\n+        used_sighash_single_out_of_bounds = False\n+        for i in xrange(NUM_TESTS):\n+            # Choose random number of inputs to use.\n+            num_inputs = random.randint(1, 10)\n+            # Create a slight bias for producing more utxos\n+            num_outputs = random.randint(1, 11)\n+            random.shuffle(temp_utxos)\n+            assert(len(temp_utxos) > num_inputs)\n+            tx = CTransaction()\n+            total_value = 0\n+            for i in xrange(num_inputs):\n+                tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), \"\"))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                total_value += temp_utxos[i].nValue\n+            split_value = total_value // num_outputs\n+            for i in xrange(num_outputs):\n+                tx.vout.append(CTxOut(split_value, scriptPubKey))\n+            for i in xrange(num_inputs):\n+                # Now try to sign each input, using a random hashtype.\n+                anyonecanpay = 0\n+                if random.randint(0, 1):\n+                    anyonecanpay = SIGHASH_ANYONECANPAY\n+                hashtype = random.randint(1, 3) | anyonecanpay\n+                sign_P2PK_witness_input(witness_program, tx, i, hashtype, temp_utxos[i].nValue, key)\n+                if (hashtype == SIGHASH_SINGLE and i >= num_outputs):\n+                    used_sighash_single_out_of_bounds = True\n+            tx.rehash()\n+            for i in xrange(num_outputs):\n+                temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+            temp_utxos = temp_utxos[num_inputs:]\n+\n+            block.vtx.append(tx)\n+\n+            # Test the block periodically, if we're close to maxblocksize\n+            if (get_virtual_size(block) > MAX_BLOCK_SIZE - 1000):\n+                self.update_witness_block_with_transactions(block, [])\n+                self.test_node.test_witness_block(block, accepted=True)\n+                block = self.build_next_block()\n+\n+        if (not used_sighash_single_out_of_bounds):\n+            print(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n+        # Test the transactions we've added to the block\n+        if (len(block.vtx) > 1):\n+            self.update_witness_block_with_transactions(block, [])\n+            self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now test witness version 0 P2PKH transactions\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), \"\"))\n+        tx.vout.append(CTxOut(temp_utxos[0].nValue, scriptPKH))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+\n+        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + chr(SIGHASH_ALL)\n+\n+        # Check that we can't have a scriptSig\n+        tx2.vin[0].scriptSig = CScript([signature, pubkey])\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Move the signature to the witness.\n+        block.vtx.pop()\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n+        tx2.vin[0].scriptSig = \"\"\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        temp_utxos.pop(0)\n+\n+        # Update self.utxos for later tests. Just spend everything in\n+        # temp_utxos to a corresponding entry in self.utxos\n+        tx = CTransaction()\n+        index = 0\n+        for i in temp_utxos:\n+            # Just spend to our usual anyone-can-spend output\n+            # Use SIGHASH_SINGLE|SIGHASH_ANYONECANPAY so we can build up\n+            # the signatures as we go.\n+            tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx.vout.append(CTxOut(i.nValue, CScript([OP_TRUE])))\n+            tx.wit.vtxinwit.append(CTxinWitness())\n+            sign_P2PK_witness_input(witness_program, tx, index, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, i.nValue, key)\n+            index += 1\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        for i in xrange(len(tx.vout)):\n+            self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n+\n+\n+    # Test P2SH wrapped witness programs.\n+    def test_p2sh_witness(self, segwit_activated):\n+        print \"\\tTesting P2SH witness transactions\"\n+\n+        assert(len(self.utxo))\n+\n+        # Prepare the p2sh-wrapped witness output\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        p2wsh_pubkey = CScript([OP_0, witness_hash])\n+        p2sh_witness_hash = hash160(p2wsh_pubkey)\n+        scriptPubKey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([p2wsh_pubkey]) # a push of the redeem script\n+\n+        # Fund the P2SH output\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # Verify mempool acceptance and block validity\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True, with_witness=segwit_activated)\n+        sync_blocks(self.nodes)\n+\n+        # Now test attempts to spend the output.\n+        spend_tx = CTransaction()\n+        spend_tx.vin.append(CTxIn(COutPoint(tx.sha256, 0), scriptSig))\n+        spend_tx.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        spend_tx.rehash()\n+\n+        # This transaction should not be accepted into the mempool pre- or\n+        # post-segwit.  Mempool acceptance will use SCRIPT_VERIFY_WITNESS which\n+        # will require a witness to spend a witness program regardless of\n+        # segwit activation.  Note that older bitcoind's that are not\n+        # segwit-aware would also reject this for failing CLEANSTACK.\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Try to put the witness script in the scriptSig, should also fail.\n+        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, 'a'])\n+        spend_tx.rehash()\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Now put the witness script in the witness, should succeed after\n+        # segwit activates.\n+        spend_tx.vin[0].scriptSig = scriptSig\n+        spend_tx.rehash()\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a', witness_program ]\n+\n+        # Verify mempool acceptance\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [spend_tx])\n+\n+        # If we're before activation, then sending this without witnesses\n+        # should be valid.  If we're after activation, then sending this with\n+        # witnesses should be valid.\n+        if segwit_activated:\n+            self.test_node.test_witness_block(block, accepted=True)\n+        else:\n+            self.test_node.test_witness_block(block, accepted=True, with_witness=False)\n+\n+        # Update self.utxo\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(spend_tx.sha256, 0, spend_tx.vout[0].nValue))\n+\n+    # Test the behavior of starting up a segwit-aware node after the softfork\n+    # has activated.  As segwit requires different block data than pre-segwit\n+    # nodes would have stored, this requires special handling.\n+    # To enable this test, pass --oldbinary=<path-to-pre-segwit-bitcoind> to\n+    # the test.\n+    def test_upgrade_after_activation(self, node, node_id):\n+        print \"\\tTesting software upgrade after softfork activation\"\n+\n+        assert(node_id != 0) # node0 is assumed to be a segwit-active bitcoind\n+\n+        # Make sure the nodes are all up\n+        sync_blocks(self.nodes)\n+\n+        # Restart with the new binary\n+        stop_node(node, node_id)\n+        self.nodes[node_id] = start_node(node_id, self.options.tmpdir, [\"-debug\"])\n+        connect_nodes(self.nodes[0], node_id)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Make sure that this peer thinks segwit has activated.\n+        assert(get_bip9_status(node, 'witness')['status'] == \"active\")\n+\n+        # Make sure this peers blocks match those of node0.\n+        height = node.getblockcount()\n+        while height >= 0:\n+            block_hash = node.getblockhash(height)\n+            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n+            assert_equal(self.nodes[0].getblock(block_hash), node.getblock(block_hash))\n+            height -= 1\n+\n+\n+    def test_witness_sigops(self):\n+        '''Ensure sigop counting is correct inside witnesses.'''\n+        print \"\\tTesting sigops limit\"\n+\n+        assert(len(self.utxo))\n+\n+        # Keep this under MAX_OPS_PER_SCRIPT (201)\n+        witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG]*5 + [OP_CHECKSIG]*193 + [OP_ENDIF])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        sigops_per_script = 20*5 + 193*1\n+        # We'll produce 2 extra outputs, one with a program that would take us\n+        # over max sig ops, and one with a program that would exactly reach max\n+        # sig ops\n+        outputs = (MAX_SIGOP_COST // sigops_per_script) + 2\n+        extra_sigops_available = MAX_SIGOP_COST % sigops_per_script\n+\n+        # We chose the number of checkmultisigs/checksigs to make this work:\n+        assert(extra_sigops_available < 100) # steer clear of MAX_OPS_PER_SCRIPT\n+\n+        # This script, when spent with the first\n+        # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n+        # would push us just over the block sigop limit.\n+        witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available + 1) + [OP_ENDIF])\n+        witness_hash_toomany = sha256(witness_program_toomany)\n+        scriptPubKey_toomany = CScript([OP_0, witness_hash_toomany])\n+\n+        # If we spend this script instead, we would exactly reach our sigop\n+        # limit (for witness sigops).\n+        witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available) + [OP_ENDIF])\n+        witness_hash_justright = sha256(witness_program_justright)\n+        scriptPubKey_justright = CScript([OP_0, witness_hash_justright])\n+\n+        # First split our available utxo into a bunch of outputs\n+        split_value = self.utxo[0].nValue // outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        for i in xrange(outputs):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.vout[-2].scriptPubKey = scriptPubKey_toomany\n+        tx.vout[-1].scriptPubKey = scriptPubKey_justright\n+        tx.rehash()\n+\n+        block_1 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_1, [tx])\n+        self.test_node.test_witness_block(block_1, accepted=True)\n+\n+        tx2 = CTransaction()\n+        # If we try to spend the first n-1 outputs from tx, that should be\n+        # too many sigops.\n+        total_value = 0\n+        for i in xrange(outputs-1):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program ]\n+            total_value += tx.vout[i].nValue\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_toomany ] \n+        tx2.vout.append(CTxOut(total_value, CScript([OP_TRUE])))\n+        tx2.rehash()\n+\n+        block_2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_2, [tx2])\n+        self.test_node.test_witness_block(block_2, accepted=False)\n+\n+        # Try dropping the last input in tx2, and add an output that has\n+        # too many sigops (contributing to legacy sigop count).\n+        checksig_count = (extra_sigops_available // 4) + 1\n+        scriptPubKey_checksigs = CScript([OP_CHECKSIG]*checksig_count)\n+        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs));\n+        tx2.vin.pop()\n+        tx2.wit.vtxinwit.pop()\n+        tx2.vout[0].nValue -= tx.vout[-2].nValue\n+        tx2.rehash()\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx2])\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # If we drop the last checksig in this output, the tx should succeed.\n+        block_4 = self.build_next_block()\n+        tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG]*(checksig_count-1))\n+        tx2.rehash()\n+        self.update_witness_block_with_transactions(block_4, [tx2])\n+        self.test_node.test_witness_block(block_4, accepted=True)\n+\n+        # Reset the tip back down for the next test\n+        sync_blocks(self.nodes)\n+        for x in self.nodes:\n+            x.invalidateblock(block_4.hash)\n+\n+        # Try replacing the last input of tx2 to be spending the last\n+        # output of tx\n+        block_5 = self.build_next_block()\n+        tx2.vout.pop()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, outputs-1), \"\"))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n+        tx2.rehash()\n+        self.update_witness_block_with_transactions(block_5, [tx2])\n+        self.test_node.test_witness_block(block_5, accepted=True)\n+\n+        # TODO: test p2sh sigop counting\n+\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n+        self.old_node = TestNode()  # only NODE_NETWORK\n+        self.std_node = TestNode() # for testing node1 (fRequireStandard=true)\n+\n+        self.p2p_connections = [self.test_node, self.old_node]\n+\n+        self.connections = []\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.old_node, services=NODE_NETWORK))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], self.std_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.test_node.add_connection(self.connections[0])\n+        self.old_node.add_connection(self.connections[1])\n+        self.std_node.add_connection(self.connections[2])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Keep a place to store utxo's that can be used in later tests\n+        self.utxo = []\n+\n+        # Test logic begins here\n+        self.test_node.wait_for_verack()\n+\n+        print \"\\nStarting tests before segwit lock in:\"\n+\n+        self.test_witness_services() # Verifies NODE_WITNESS\n+        self.test_non_witness_transaction() # non-witness tx's are accepted\n+        self.test_unnecessary_witness_before_segwit_activation()\n+        self.test_block_relay(segwit_activated=False)\n+\n+        sync_blocks(self.nodes)\n+\n+        # At lockin, nothing should change.\n+        print \"\\nTesting behavior post lockin, pre-activation\"\n+        self.advance_to_segwit_lockin()\n+\n+        # Retest unnecessary witnesses\n+        self.test_unnecessary_witness_before_segwit_activation()\n+        self.test_witness_tx_relay_before_segwit_activation()\n+        self.test_block_relay(segwit_activated=False)\n+        self.test_p2sh_witness(segwit_activated=False)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Now activate segwit\n+        print \"\\nTesting behavior after segwit activation\"\n+        self.advance_to_segwit_active()\n+\n+        sync_blocks(self.nodes)\n+\n+        # Test P2SH witness handling again\n+        self.test_p2sh_witness(segwit_activated=True)\n+        self.test_witness_commitments()\n+        self.test_block_malleability()\n+        self.test_witness_block_size()\n+        self.test_submit_block()\n+        self.test_extra_witness_data()\n+        self.test_max_witness_push_length()\n+        self.test_max_witness_program_length()\n+        self.test_witness_input_length()\n+        self.test_block_relay(segwit_activated=True)\n+        self.test_tx_relay_after_segwit_activation()\n+        self.test_segwit_versions()\n+        self.test_premature_coinbase_witness_spend()\n+        self.test_signature_version_1()\n+        sync_blocks(self.nodes)\n+        if self.test_upgrade:\n+            self.test_upgrade_after_activation(self.nodes[2], 2)\n+        else:\n+            print \"\\tSkipping upgrade-after-activation test (use --oldbinary to enable)\"\n+        self.test_witness_sigops()\n+\n+\n+if __name__ == '__main__':\n+    SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmIwYTgzZDQwZjU4YWFjMWMwZDQ2YzViZDJjNjFjYjBmYzdkNTIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T09:52:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T09:52:26Z"
      },
      "message": "--- [SEGWIT] begin: fixups ---",
      "tree": {
        "sha": "cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjJiZmNhZGQ4MzMxNjBhMGM1MDRmN2Y5ZTY0NjE3NjQxZThhOGE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:04:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:46Z"
      },
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: use int64_t for sigopcost everywhere",
      "tree": {
        "sha": "aefe8e8ab563336b92c98e579e2c058fcf393457",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aefe8e8ab563336b92c98e579e2c058fcf393457"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "81f40593b21a6d36a46fc82a94715aa0646ec1a9",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "patch": "@@ -6,14 +6,16 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdint.h>\n+\n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed cost for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_COST = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS_COST = 80000;\n+static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "a7fde01d1572fa1c7451339e3b13e2bff8cd0f2e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "patch": "@@ -1168,7 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n+        int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -2369,7 +2369,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n-    unsigned int nSigOpsCost = 0;\n+    int64_t nSigOpsCost = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());"
      },
      {
        "sha": "8e634c1cbe84c331d2a7630f51459a15a772fbf8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "patch": "@@ -121,7 +121,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     uint64_t nBlockCost = 4000;\n     uint64_t nBlockTx = 0;\n-    unsigned int nBlockSigOpsCost = 400;\n+    int64_t nBlockSigOpsCost = 400;\n     int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n@@ -231,7 +231,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            unsigned int nTxSigOpsCost = iter->GetSigOpCost();\n+            int64_t nTxSigOpsCost = iter->GetSigOpCost();\n             if (nBlockSigOpsCost + nTxSigOpsCost >= MAX_BLOCK_SIGOPS_COST) {\n                 if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n                     break;"
      },
      {
        "sha": "ee899f5fbe7debb50115c52c554d892b8debf9c7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "patch": "@@ -23,7 +23,7 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase, unsigned int _sigOpsCost, LockPoints lp):\n+                                 bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n@@ -655,7 +655,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         bool fDependsWait = false;\n         setEntries setParentCheck;\n         int64_t parentSizes = 0;\n-        unsigned int parentSigOpCost = 0;\n+        int64_t parentSigOpCost = 0;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n@@ -687,7 +687,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         uint64_t nCountCheck = setAncestors.size() + 1;\n         uint64_t nSizeCheck = it->GetTxSize();\n         CAmount nFeesCheck = it->GetModifiedFee();\n-        unsigned int nSigOpCheck = it->GetSigOpCost();\n+        int64_t nSigOpCheck = it->GetSigOpCost();\n \n         BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();"
      },
      {
        "sha": "cc622ec60fe0757a31b7447cdcb1624479b8a3b5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb2bfcadd833160a0c504f7f9e64617641e8a8a9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "patch": "@@ -84,7 +84,7 @@ class CTxMemPoolEntry\n     bool hadNoDependencies;    //!< Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //!< Sum of all txin values that are already in blockchain\n     bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n-    unsigned int sigOpCost;    //!< Total sigop cost\n+    int64_t sigOpCost;         //!< Total sigop cost\n     int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n     LockPoints lockPoints;     //!< Track the height and time at which tx was final\n \n@@ -101,13 +101,13 @@ class CTxMemPoolEntry\n     uint64_t nCountWithAncestors;\n     uint64_t nSizeWithAncestors;\n     CAmount nModFeesWithAncestors;\n-    unsigned int nSigOpCostWithAncestors;\n+    int64_t nSigOpCostWithAncestors;\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n-                    unsigned int nSigOpsCost, LockPoints lp);\n+                    int64_t nSigOpsCost, LockPoints lp);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -121,7 +121,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n-    unsigned int GetSigOpCost() const { return sigOpCost; }\n+    int64_t GetSigOpCost() const { return sigOpCost; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n     const LockPoints& GetLockPoints() const { return lockPoints; }\n@@ -145,7 +145,7 @@ class CTxMemPoolEntry\n     uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n     uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n     CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n-    unsigned int GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n+    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index."
      }
    ]
  },
  {
    "sha": "64c15279f59718a0d25d7b9d0ad6f425cd437305",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGMxNTI3OWY1OTcxOGEwZDI1ZDdiOWQwYWQ2ZjQyNWNkNDM3MzA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:18:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: update block cost comment",
      "tree": {
        "sha": "6fdfc0a3c79fc28e449aaef9636c962862793aaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fdfc0a3c79fc28e449aaef9636c962862793aaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64c15279f59718a0d25d7b9d0ad6f425cd437305",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb2bfcadd833160a0c504f7f9e64617641e8a8a9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c30fcc3152260f05b036c531b3f21ebcec5ccb3",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c15279f59718a0d25d7b9d0ad6f425cd437305/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c15279f59718a0d25d7b9d0ad6f425cd437305/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=64c15279f59718a0d25d7b9d0ad6f425cd437305",
        "patch": "@@ -34,8 +34,9 @@ std::string CBlock::ToString() const\n \n int64_t GetBlockCost(const CBlock& block)\n {\n-    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n-    // We can only serialize base or base+witness, so the formula\n-    // becomes: cost = base_size * 3 + total_size.\n+    // This implements the cost = base_size * 4 + witness_size formula, using only\n+    // serialization with and without witness data. As witness_size is equal to\n+    // total_size - base_size, this formula is identical to:\n+    // cost = base_size * 3 + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n }"
      }
    ]
  },
  {
    "sha": "cc741f525013019e012f287f98ea325b28ebba64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzc0MWY1MjUwMTMwMTllMDEyZjI4N2Y5OGVhMzI1YjI4ZWJiYTY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:24:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "message": "fixup Add segregated witness transaction serialization: comments",
      "tree": {
        "sha": "3dce9e8c142a759362c5446a6366046ef9108481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dce9e8c142a759362c5446a6366046ef9108481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc741f525013019e012f287f98ea325b28ebba64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc741f525013019e012f287f98ea325b28ebba64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc741f525013019e012f287f98ea325b28ebba64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc741f525013019e012f287f98ea325b28ebba64/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64c15279f59718a0d25d7b9d0ad6f425cd437305",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64c15279f59718a0d25d7b9d0ad6f425cd437305"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e39279d65a38569fe4cf71c70b93c27ae4f73e6",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc741f525013019e012f287f98ea325b28ebba64/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc741f525013019e012f287f98ea325b28ebba64/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=cc741f525013019e012f287f98ea325b28ebba64",
        "patch": "@@ -353,7 +353,7 @@ class CTransaction\n     const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n-    CTxWitness wit;\n+    CTxWitness wit; // Not const: can change without invalidating the txid cache\n     const uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */"
      },
      {
        "sha": "ff6de47384902d1093c714bab3654f1c04f671c4",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc741f525013019e012f287f98ea325b28ebba64/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc741f525013019e012f287f98ea325b28ebba64/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=cc741f525013019e012f287f98ea325b28ebba64",
        "patch": "@@ -635,6 +635,8 @@ class CScript : public CScriptBase\n \n struct CScriptWitness\n {\n+    // Note that this encodes the data elements being pushed, rather than\n+    // encoding them as a CScript that pushes them.\n     std::vector<std::vector<unsigned char> > stack;\n \n     // Some compilers complain without a default constructor"
      }
    ]
  },
  {
    "sha": "c28179f4a7e75dca3cb8997f5caed0eaabca3641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjgxNzlmNGE3ZTc1ZGNhM2NiODk5N2Y1Y2FlZDBlYWFiY2EzNjQx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:28:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "message": "fixup Update p2p test framework with segwit support: fix comment",
      "tree": {
        "sha": "18055ef808264906b63e5a6b3efb4052b55ca81c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18055ef808264906b63e5a6b3efb4052b55ca81c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc741f525013019e012f287f98ea325b28ebba64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc741f525013019e012f287f98ea325b28ebba64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc741f525013019e012f287f98ea325b28ebba64"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5f115f210d4a5551a4acb05ea4eb4d1dbf1ebabf",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28179f4a7e75dca3cb8997f5caed0eaabca3641/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28179f4a7e75dca3cb8997f5caed0eaabca3641/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=c28179f4a7e75dca3cb8997f5caed0eaabca3641",
        "patch": "@@ -25,7 +25,7 @@ def create_block(hashprev, coinbase, nTime=None):\n # From BIP141\n WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n \n-# According to BIP141, nVersion=5 blocks must commit to the\n+# According to BIP141, blocks with witness rules active must commit to the\n # hash of all in-block transactions including witness.\n def add_witness_commitment(block, nonce=0L):\n     # First calculate the merkle root of the block's"
      }
    ]
  },
  {
    "sha": "6a5da9bd0bc322f134e9817415da281a78995e28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTVkYTliZDBiYzMyMmYxMzRlOTgxNzQxNWRhMjgxYTc4OTk1ZTI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:33:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "message": "fixup Witness commitment validation: list the mentioned BIPs",
      "tree": {
        "sha": "cc2561a6ca89d7491db004b6eee934cdb2932b2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc2561a6ca89d7491db004b6eee934cdb2932b2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a5da9bd0bc322f134e9817415da281a78995e28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5da9bd0bc322f134e9817415da281a78995e28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5da9bd0bc322f134e9817415da281a78995e28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5da9bd0bc322f134e9817415da281a78995e28/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c28179f4a7e75dca3cb8997f5caed0eaabca3641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c28179f4a7e75dca3cb8997f5caed0eaabca3641"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bc017812c97bd932c784033003ec22c801be3c00",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5da9bd0bc322f134e9817415da281a78995e28/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5da9bd0bc322f134e9817415da281a78995e28/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6a5da9bd0bc322f134e9817415da281a78995e28",
        "patch": "@@ -93,7 +93,7 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit.\n+        // Deployment of SegWit (BIP141 and BIP143)\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n@@ -189,7 +189,7 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit.\n+        // Deployment of SegWit (BIP141 and BIP143)\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;"
      },
      {
        "sha": "5ddfba8209e0b7a2bfc0ad39e9c3d5f1da9235f4",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5da9bd0bc322f134e9817415da281a78995e28/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5da9bd0bc322f134e9817415da281a78995e28/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=6a5da9bd0bc322f134e9817415da281a78995e28",
        "patch": "@@ -16,7 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n-    DEPLOYMENT_WITNESS,\n+    DEPLOYMENT_WITNESS, // Deployment of BIP141 and BIP143\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      }
    ]
  },
  {
    "sha": "88e013560123b5c2f35ce6bf0c95bea454add000",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGUwMTM1NjAxMjNiNWMyZjM1Y2U2YmYwYzk1YmVhNDU0YWRkMDAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:36:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "message": "fixup Add command line options to loosen mempool acceptance rules: simplify comment",
      "tree": {
        "sha": "3446e2d1f71c9481582861e440c3e8d6d9aa0873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3446e2d1f71c9481582861e440c3e8d6d9aa0873"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88e013560123b5c2f35ce6bf0c95bea454add000",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88e013560123b5c2f35ce6bf0c95bea454add000",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88e013560123b5c2f35ce6bf0c95bea454add000",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88e013560123b5c2f35ce6bf0c95bea454add000/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a5da9bd0bc322f134e9817415da281a78995e28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5da9bd0bc322f134e9817415da281a78995e28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5da9bd0bc322f134e9817415da281a78995e28"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "719c06f6fe347c918143d37dc4221b413bbcbbb7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88e013560123b5c2f35ce6bf0c95bea454add000/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88e013560123b5c2f35ce6bf0c95bea454add000/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=88e013560123b5c2f35ce6bf0c95bea454add000",
        "patch": "@@ -1052,7 +1052,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n     }\n \n-    // Don't accept witness transactions before the final threshold passes\n+    // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }"
      }
    ]
  },
  {
    "sha": "da60faea77853d8259845fd4a649e75d52d11218",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTYwZmFlYTc3ODUzZDgyNTk4NDVmZDRhNjQ5ZTc1ZDUyZDExMjE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:42:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:33Z"
      },
      "message": "fixup Witness commitment validation: factor out GetWitnessCommitmentPos",
      "tree": {
        "sha": "66a8c41e27b6303a49bf657022c8406c45de2109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a8c41e27b6303a49bf657022c8406c45de2109"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da60faea77853d8259845fd4a649e75d52d11218",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da60faea77853d8259845fd4a649e75d52d11218",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da60faea77853d8259845fd4a649e75d52d11218",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da60faea77853d8259845fd4a649e75d52d11218/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88e013560123b5c2f35ce6bf0c95bea454add000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88e013560123b5c2f35ce6bf0c95bea454add000",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88e013560123b5c2f35ce6bf0c95bea454add000"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 11,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6caac1f04ab08b3c69f4c0c86d3f363b72d8404d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da60faea77853d8259845fd4a649e75d52d11218/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da60faea77853d8259845fd4a649e75d52d11218/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=da60faea77853d8259845fd4a649e75d52d11218",
        "patch": "@@ -3353,14 +3353,22 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n }\n \n-void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+// Compute at which vout of the block's coinbase transaction the witness\n+// commitment occurs, or -1 if not found.\n+static int GetWitnessCommitmentIndex(const CBlock& block)\n {\n     int commitpos = -1;\n     for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n         if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n             commitpos = o;\n         }\n     }\n+    return commitpos;\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n     if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && block.vtx[0].wit.IsEmpty()) {\n         block.vtx[0].wit.vtxinwit.resize(1);\n@@ -3372,12 +3380,7 @@ void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPre\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     std::vector<unsigned char> commitment;\n-    int commitpos = -1;\n-    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n-        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n-            commitpos = o;\n-        }\n-    }\n+    int commitpos = GetWitnessCommitmentIndex(block);\n     bool fHaveWitness = false;\n     for (size_t t = 1; t < block.vtx.size(); t++) {\n         if (!block.vtx[t].wit.IsNull()) {\n@@ -3472,12 +3475,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n-        int commitpos = -1;\n-        for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n-            if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n-                commitpos = o;\n-            }\n-        }\n+        int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;\n             uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);"
      }
    ]
  },
  {
    "sha": "4f827beaf803e5acee824c36c001429afa5dd7a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjgyN2JlYWY4MDNlNWFjZWU4MjRjMzZjMDAxNDI5YWZhNWRkN2Ew",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:44:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "message": "fixup Witness commitment validation: fix typo in comment",
      "tree": {
        "sha": "45ac71156940c8dc2808d7e4d27e57c72d31d8ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45ac71156940c8dc2808d7e4d27e57c72d31d8ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f827beaf803e5acee824c36c001429afa5dd7a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f827beaf803e5acee824c36c001429afa5dd7a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f827beaf803e5acee824c36c001429afa5dd7a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f827beaf803e5acee824c36c001429afa5dd7a0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da60faea77853d8259845fd4a649e75d52d11218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da60faea77853d8259845fd4a649e75d52d11218",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da60faea77853d8259845fd4a649e75d52d11218"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48913ac8025bc2454149cb7caccd4b889a039dad",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f827beaf803e5acee824c36c001429afa5dd7a0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f827beaf803e5acee824c36c001429afa5dd7a0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4f827beaf803e5acee824c36c001429afa5dd7a0",
        "patch": "@@ -3493,7 +3493,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n-    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam\n+    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n             if (!block.vtx[i].wit.IsNull()) {"
      }
    ]
  },
  {
    "sha": "058f49588276cbab3b70d7e77b36358d9ddcdf58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNThmNDk1ODgyNzZjYmFiM2I3MGQ3ZTc3YjM2MzU4ZDlkZGNkZjU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:46:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: improve GBT help",
      "tree": {
        "sha": "1ce6daf3e4192ba2a1a9c7ca9805282f9b1536ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ce6daf3e4192ba2a1a9c7ca9805282f9b1536ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/058f49588276cbab3b70d7e77b36358d9ddcdf58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f827beaf803e5acee824c36c001429afa5dd7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f827beaf803e5acee824c36c001429afa5dd7a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f827beaf803e5acee824c36c001429afa5dd7a0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b6c98532c0a7abf8d320f6dbcddcdb36c7bf783c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058f49588276cbab3b70d7e77b36358d9ddcdf58/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058f49588276cbab3b70d7e77b36358d9ddcdf58/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=058f49588276cbab3b70d7e77b36358d9ddcdf58",
        "patch": "@@ -333,7 +333,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n             \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n             \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n             \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\""
      }
    ]
  },
  {
    "sha": "c1e7a95ce59b019f21fa72d658ac03e14202665a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWU3YTk1Y2U1OWIwMTlmMjFmYTcyZDY1OGFjMDNlMTQyMDI2NjVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:49:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "message": "fixup Add witness address RPCs (using P2SH): test hex & wallet available",
      "tree": {
        "sha": "5f1ce70fbac950367d50e2454e18f048eccd34db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f1ce70fbac950367d50e2454e18f048eccd34db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e7a95ce59b019f21fa72d658ac03e14202665a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "058f49588276cbab3b70d7e77b36358d9ddcdf58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/058f49588276cbab3b70d7e77b36358d9ddcdf58"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c58c6f1df3d27f537833bcea9e916376fc5fc522",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e7a95ce59b019f21fa72d658ac03e14202665a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e7a95ce59b019f21fa72d658ac03e14202665a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c1e7a95ce59b019f21fa72d658ac03e14202665a",
        "patch": "@@ -332,6 +332,10 @@ UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    if (!IsHex(params[0].get_str())) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Script must be hex-encoded\");\n+    }\n+\n     std::vector<unsigned char> code = ParseHex(params[0].get_str());\n     CScript script(code.begin(), code.end());\n     CScript witscript = GetScriptForWitness(script);"
      },
      {
        "sha": "35233bbb784c2d5e9febb8eb6e73fa7cf8f34d24",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e7a95ce59b019f21fa72d658ac03e14202665a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e7a95ce59b019f21fa72d658ac03e14202665a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c1e7a95ce59b019f21fa72d658ac03e14202665a",
        "patch": "@@ -1135,6 +1135,9 @@ class Witnessifier : public boost::static_visitor<bool>\n \n UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n     if (fHelp || params.size() < 1 || params.size() > 1)\n     {\n         string msg = \"addwitnessaddress \\\"address\\\"\\n\""
      }
    ]
  },
  {
    "sha": "dbe63919221d043cd5dd796a055c3fe4fc44f387",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmU2MzkxOTIyMWQwNDNjZDVkZDc5NmEwNTVjM2ZlNGZjNDRmMzg3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:10:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:24:52Z"
      },
      "message": "fixup Add segregated witness transaction serialization: revert extformat-if-empty-vin",
      "tree": {
        "sha": "1861ea9ee1b1a3b715f616c3e501c128ff0c817e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1861ea9ee1b1a3b715f616c3e501c128ff0c817e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbe63919221d043cd5dd796a055c3fe4fc44f387",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1e7a95ce59b019f21fa72d658ac03e14202665a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e7a95ce59b019f21fa72d658ac03e14202665a"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 25,
      "deletions": 12
    },
    "files": [
      {
        "sha": "496c7fe8b0ed05165aaca622f20b3c0c360e40fa",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -624,7 +624,7 @@ def run_test(self):\n         # test fundrawtransaction with OP_RETURN and no vin #\n         #####################################################\n \n-        rawtx   = \"01000000000000010000000000000000066a047465737400000000\"\n+        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         assert_equal(len(dec_tx['vin']), 0)"
      },
      {
        "sha": "b559d44bf5a8a8a0b8c5a7aee66c5be152248fa3",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -17,7 +17,7 @@ class UniValue;\n // core_read.cpp\n extern CScript ParseScript(const std::string& s);\n extern std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n+extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitness = false);\n extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n extern uint256 ParseHashStr(const std::string&, const std::string& strName);"
      },
      {
        "sha": "c36c8f2dc0c50ed248c3f4b095b44e47e6ebac72",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -90,12 +90,26 @@ CScript ParseScript(const std::string& s)\n     return result;\n }\n \n-bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n+bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)\n {\n     if (!IsHex(strHexTx))\n         return false;\n \n     vector<unsigned char> txData(ParseHex(strHexTx));\n+\n+    if (fTryNoWitness) {\n+        CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+        try {\n+            ssData >> tx;\n+            if (ssData.eof()) {\n+                return true;\n+            }\n+        }\n+        catch (const std::exception&) {\n+            // Fall through.\n+        }\n+    }\n+\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssData >> tx;"
      },
      {
        "sha": "bc2039861b6addbc096dbac870cac8169335e866",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -283,10 +283,9 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n         if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n-            READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n-            if (flags == 0 && tx.vin.size() != 0) {\n-                throw std::ios_base::failure(\"Extended transaction format unnecessarily used\");\n+            if (flags != 0) {\n+                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n             }\n         } else {\n             /* We read a non-empty vin. Assume a normal vout follows. */\n@@ -310,7 +309,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n                 flags |= 1;\n             }\n         }\n-        if (flags || ((nVersion & SERIALIZE_TRANSACTION_WITNESS) != 0 && tx.vin.size() == 0)) {\n+        if (flags) {\n             /* Use extended format in case witnesses are to be serialized. */\n             std::vector<CTxIn> vinDummy;\n             READWRITE(vinDummy);"
      },
      {
        "sha": "af2ec5f3576730b61634f4b034eca30ab678bdfc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -496,7 +496,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n \n     CTransaction tx;\n \n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "36b6f00fb67fc8a93faf75cb75dd95fe64fc5c5f",
        "filename": "src/test/data/blanktx.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/test/data/blanktx.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/test/data/blanktx.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.hex?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -1 +1 @@\n-010000000000000000000000\n+01000000000000000000"
      },
      {
        "sha": "5243c2d02e8b5a8248bb5ad930f993d9d1f99638",
        "filename": "src/test/data/txcreate2.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/test/data/txcreate2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/test/data/txcreate2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.hex?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -1 +1 @@\n-010000000000000100000000000000000000000000\n+01000000000100000000000000000000000000"
      },
      {
        "sha": "42206ba3f68fefb56ef22ba916f54e2b7fc286bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe63919221d043cd5dd796a055c3fe4fc44f387/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "patch": "@@ -2587,7 +2587,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     // parse hex string from parameter\n     CTransaction origTx;\n-    if (!DecodeHexTx(origTx, params[0].get_str()))\n+    if (!DecodeHexTx(origTx, params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     if (origTx.vout.size() == 0)"
      }
    ]
  },
  {
    "sha": "97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2Q3NDAyYzJjNTVjMjE2ZjJkNGVmOTA1ZDliMThlOWEwOGFkNDAy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-04-19T18:33:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:38:03Z"
      },
      "message": "tidy up CInv::GetCommand",
      "tree": {
        "sha": "71c4d34021472a644895323390554cb7f1872dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71c4d34021472a644895323390554cb7f1872dc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbe63919221d043cd5dd796a055c3fe4fc44f387"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 8,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e6a52fbd24a416d0d765cf400309bf5a2db0c8b3",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 21,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97d7402c2c55c216f2d4ef905d9b18e9a08ad402/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97d7402c2c55c216f2d4ef905d9b18e9a08ad402/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
        "patch": "@@ -149,36 +149,22 @@ CInv::CInv(int typeIn, const uint256& hashIn)\n     hash = hashIn;\n }\n \n-CInv::CInv(const std::string& strType, const uint256& hashIn)\n-{\n-    if (strType == NetMsgType::TX)\n-        type = MSG_TX;\n-    else if (strType == NetMsgType::BLOCK)\n-        type = MSG_BLOCK;\n-    else\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n-\n-    hash = hashIn;\n-}\n-\n bool operator<(const CInv& a, const CInv& b)\n {\n     return (a.type < b.type || (a.type == b.type && a.hash < b.hash));\n }\n \n-bool CInv::IsKnownType() const\n-{\n-    int masked = type & MSG_TYPE_MASK;\n-    return (masked >= 1 && masked <= MSG_TYPE_MAX);\n-}\n-\n-const char* CInv::GetCommand() const\n+std::string CInv::GetCommand() const\n {\n+    std::string cmd;\n+    if (type & MSG_WITNESS_FLAG)\n+        cmd.append(\"witness-\");\n     int masked = type & MSG_TYPE_MASK;\n     switch (masked)\n     {\n-    case MSG_TX:    return NetMsgType::TX;\n-    case MSG_BLOCK: return NetMsgType::BLOCK;\n+    case MSG_TX:             return cmd.append(NetMsgType::TX);\n+    case MSG_BLOCK:          return cmd.append(NetMsgType::BLOCK);\n+    case MSG_FILTERED_BLOCK: return cmd.append(NetMsgType::MERKLEBLOCK);\n     default:\n         throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     }"
      },
      {
        "sha": "1b8d22e93e4160c251c9aa1d26e528beecba2c3a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97d7402c2c55c216f2d4ef905d9b18e9a08ad402/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97d7402c2c55c216f2d4ef905d9b18e9a08ad402/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
        "patch": "@@ -304,7 +304,6 @@ class CInv\n public:\n     CInv();\n     CInv(int typeIn, const uint256& hashIn);\n-    CInv(const std::string& strType, const uint256& hashIn);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -317,8 +316,7 @@ class CInv\n \n     friend bool operator<(const CInv& a, const CInv& b);\n \n-    bool IsKnownType() const;\n-    const char* GetCommand() const;\n+    std::string GetCommand() const;\n     std::string ToString() const;\n \n     // TODO: make private (improves encapsulation)"
      }
    ]
  },
  {
    "sha": "f0f61237d60223a694a0b8c63f7b90d2d1751f87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGY2MTIzN2Q2MDIyM2E2OTRhMGI4YzYzZjdiOTBkMmQxNzUxZjg3",
    "commit": {
      "author": {
        "name": "LongShao007",
        "email": "007longshao@gmail.com",
        "date": "2016-04-20T11:03:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:52:59Z"
      },
      "message": "fixup Witness commitment validation: function UpdateUncommitedBlockStructures redefine\n\nfunction UpdateUncommitedBlockStructures defined twice.",
      "tree": {
        "sha": "87eb7cef976560ef804b74c15cb667a33186a1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87eb7cef976560ef804b74c15cb667a33186a1d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87/comments",
    "author": {
      "login": "LongShao007",
      "id": 7669610,
      "node_id": "MDQ6VXNlcjc2Njk2MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7669610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LongShao007",
      "html_url": "https://github.com/LongShao007",
      "followers_url": "https://api.github.com/users/LongShao007/followers",
      "following_url": "https://api.github.com/users/LongShao007/following{/other_user}",
      "gists_url": "https://api.github.com/users/LongShao007/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LongShao007/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LongShao007/subscriptions",
      "organizations_url": "https://api.github.com/users/LongShao007/orgs",
      "repos_url": "https://api.github.com/users/LongShao007/repos",
      "events_url": "https://api.github.com/users/LongShao007/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LongShao007/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97d7402c2c55c216f2d4ef905d9b18e9a08ad402"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd5eaa4cbcea657d25be1731c124311400786049",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f61237d60223a694a0b8c63f7b90d2d1751f87/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f61237d60223a694a0b8c63f7b90d2d1751f87/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f0f61237d60223a694a0b8c63f7b90d2d1751f87",
        "patch": "@@ -476,8 +476,6 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n \n bool RewindBlockIndex(const Consensus::Params& params);\n \n-void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n-\n /** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjEzNTk5NWQ0Y2M4ODBkMmIwZWZhNjBkZmIwZjhkYmRkYjBlNDc3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-20T18:53:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:53:09Z"
      },
      "message": "[qa] Use integer division, byte strings properly\n\nAlso refactor some code and add segwit.py to the pulltester",
      "tree": {
        "sha": "4f7c5030a81fe2ab0a163c8e26c789969562d1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7c5030a81fe2ab0a163c8e26c789969562d1d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0f61237d60223a694a0b8c63f7b90d2d1751f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f61237d60223a694a0b8c63f7b90d2d1751f87"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 76,
      "deletions": 81
    },
    "files": [
      {
        "sha": "9200811b14558f7658f8c38529eeea388770859c",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -123,6 +123,7 @@\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n     'p2p-segwit.py',\n+    'segwit.py',\n     'importprunedfunds.py',\n ]\n if ENABLE_ZMQ:"
      },
      {
        "sha": "5dd0d226be970faf71aab58244d2865fcb0711f8",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 62,
        "deletions": 63,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -1,8 +1,7 @@\n #!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -212,7 +211,7 @@ def test_non_witness_transaction(self):\n \n         # Create a transaction that spends the coinbase\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(txid, 0), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n         tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n         tx.calc_sha256()\n \n@@ -237,7 +236,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n \n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n         tx.wit.vtxinwit.append(CTxinWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n@@ -331,7 +330,7 @@ def test_witness_commitments(self):\n         # Now test commitments with actual transactions\n         assert (len(self.utxo) > 0)\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n \n         # Let's construct a witness program\n         witness_program = CScript([OP_TRUE])\n@@ -342,7 +341,7 @@ def test_witness_commitments(self):\n \n         # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n         tx2.wit.vtxinwit.append(CTxinWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n@@ -379,7 +378,7 @@ def test_witness_commitments(self):\n         # omit the commitment.\n         block_4 = self.build_next_block()\n         tx3 = CTransaction()\n-        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n         tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n         tx3.rehash()\n         block_4.vtx.append(tx3)\n@@ -402,7 +401,7 @@ def test_block_malleability(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append('a'*5000000)\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n         assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n \n         # We can't send over the p2p network, because this is too big to relay\n@@ -458,7 +457,7 @@ def test_witness_block_size(self):\n         value = self.utxo[0].nValue\n \n         parent_tx = CTransaction()\n-        parent_tx.vin.append(CTxIn(prevout, \"\"))\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n         child_value = int(value/NUM_OUTPUTS)\n         for i in xrange(NUM_OUTPUTS):\n             parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n@@ -468,11 +467,11 @@ def test_witness_block_size(self):\n \n         child_tx = CTransaction()\n         for i in xrange(NUM_OUTPUTS):\n-            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), \"\"))\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n         child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n         for i in xrange(NUM_OUTPUTS):\n             child_tx.wit.vtxinwit.append(CTxinWitness())\n-            child_tx.wit.vtxinwit[-1].scriptWitness.stack = ['a'*195]*(2*NUM_DROPS) + [witness_program]\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n         child_tx.rehash()\n         self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n \n@@ -482,7 +481,7 @@ def test_witness_block_size(self):\n         while additional_bytes > 0:\n             # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n             extra_bytes = min(additional_bytes+1, 55)\n-            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = 'a'*(195+extra_bytes)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n             additional_bytes -= extra_bytes\n             i += 1\n \n@@ -499,7 +498,7 @@ def test_witness_block_size(self):\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n-        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(cur_length-1)\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n         block.vtx[0].vout.pop()\n         add_witness_commitment(block)\n         block.solve()\n@@ -563,7 +562,7 @@ def test_extra_witness_data(self):\n \n         # First try extra witness data on a tx that doesn't require a witness\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n         tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n         tx.wit.vtxinwit.append(CTxinWitness())\n@@ -586,8 +585,8 @@ def test_extra_witness_data(self):\n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\")) # witness output\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), \"\")) # non-witness\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n         tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n@@ -613,7 +612,7 @@ def test_extra_witness_data(self):\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n-        tx2.vin[0].scriptSig = \"\"\n+        tx2.vin[0].scriptSig = b\"\"\n         tx2.rehash()\n         add_witness_commitment(block)\n         block.solve()\n@@ -638,23 +637,23 @@ def test_max_witness_push_length(self):\n         scriptPubKey = CScript([OP_0, witness_hash])\n \n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n         tx.rehash()\n \n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx2.wit.vtxinwit.append(CTxinWitness())\n         # First try a 521-byte stack element\n-        tx2.wit.vtxinwit[0].scriptWitness.stack = [ 'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n         self.test_node.test_witness_block(block, accepted=False)\n \n         # Now reduce the length of the stack element\n-        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n@@ -672,39 +671,39 @@ def test_max_witness_program_length(self):\n         MAX_PROGRAM_LENGTH = 10000\n \n         # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n-        long_witness_program = CScript(['a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n         assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n         long_witness_hash = sha256(long_witness_program)\n         long_scriptPubKey = CScript([OP_0, long_witness_hash])\n \n         block = self.build_next_block()\n \n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n         tx.rehash()\n \n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx2.wit.vtxinwit.append(CTxinWitness())\n-        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*44 + [long_witness_program]\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n         self.test_node.test_witness_block(block, accepted=False)\n \n         # Try again with one less byte in the witness program\n-        witness_program = CScript(['a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n         assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n         witness_hash = sha256(witness_program)\n         scriptPubKey = CScript([OP_0, witness_hash])\n \n         tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n         tx.rehash()\n         tx2.vin[0].prevout.hash = tx.sha256\n-        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*43 + [witness_program]\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n@@ -725,7 +724,7 @@ def test_witness_input_length(self):\n         \n         # Create a transaction that splits our utxo into many outputs\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         nValue = self.utxo[0].nValue\n         for i in xrange(10):\n             tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n@@ -744,7 +743,7 @@ def serialize_with_witness(self):\n                 flags = 0\n                 if not self.wit.is_null():\n                     flags |= 1\n-                r = \"\"\n+                r = b\"\"\n                 r += struct.pack(\"<i\", self.nVersion)\n                 if flags:\n                     dummy = []\n@@ -759,13 +758,13 @@ def serialize_with_witness(self):\n \n         tx2 = BrokenCTransaction()\n         for i in xrange(10):\n-            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n         tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n \n         # First try using a too long vtxinwit\n         for i in xrange(11):\n             tx2.wit.vtxinwit.append(CTxinWitness())\n-            tx2.wit.vtxinwit[i].scriptWitness.stack = ['a', witness_program]\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n@@ -781,15 +780,15 @@ def serialize_with_witness(self):\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxinWitness())\n-        tx2.wit.vtxinwit[-1].scriptWitness.stack = ['a', witness_program]\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n         self.test_node.test_witness_block(block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n-        tx2.wit.vtxinwit[5].scriptWitness.stack = ['a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n         self.test_node.test_witness_block(block, accepted=True)\n@@ -805,10 +804,10 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # not be added to recently rejected list.\n         assert(len(self.utxo))\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n         tx.wit.vtxinwit.append(CTxinWitness())\n-        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n \n         tx_hash = tx.sha256\n@@ -865,10 +864,10 @@ def test_tx_relay_after_segwit_activation(self):\n         # when spending a non-witness output.\n         assert(len(self.utxo))\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n         tx.wit.vtxinwit.append(CTxinWitness())\n-        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n \n         tx_hash = tx.sha256\n@@ -889,12 +888,12 @@ def test_tx_relay_after_segwit_activation(self):\n         witness_hash = sha256(witness_program)\n         scriptPubKey = CScript([OP_0, witness_hash])\n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n         tx2.rehash()\n \n         tx3 = CTransaction()\n-        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx3.wit.vtxinwit.append(CTxinWitness())\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n@@ -995,8 +994,8 @@ def test_segwit_versions(self):\n         NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n         if (len(self.utxo) < NUM_TESTS):\n             tx = CTransaction()\n-            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n-            split_value = (self.utxo[0].nValue - 4000) / NUM_TESTS\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+            split_value = (self.utxo[0].nValue - 4000) // NUM_TESTS\n             for i in xrange(NUM_TESTS):\n                 tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n             tx.rehash()\n@@ -1018,7 +1017,7 @@ def test_segwit_versions(self):\n             count += 1\n             # First try to spend to a future version segwit scriptPubKey.\n             scriptPubKey = CScript([CScriptOp(version), witness_hash])\n-            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\")]\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n             tx.rehash()\n             self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n@@ -1034,7 +1033,7 @@ def test_segwit_versions(self):\n         # are non-standard\n         scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n         tx2 = CTransaction()\n-        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), \"\")]\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n         tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n         tx2.wit.vtxinwit.append(CTxinWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n@@ -1050,7 +1049,7 @@ def test_segwit_versions(self):\n         tx3 = CTransaction()\n         total_value = 0\n         for i in temp_utxo:\n-            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n             tx3.wit.vtxinwit.append(CTxinWitness())\n             total_value += i.nValue\n         tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n@@ -1061,7 +1060,7 @@ def test_segwit_versions(self):\n         self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n-            assert(\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+            assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n@@ -1087,7 +1086,7 @@ def test_premature_coinbase_witness_spend(self):\n         self.test_node.test_witness_block(block, accepted=True)\n \n         spend_tx = CTransaction()\n-        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), \"\")]\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n         spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n         spend_tx.wit.vtxinwit.append(CTxinWitness())\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n@@ -1111,7 +1110,7 @@ def test_premature_coinbase_witness_spend(self):\n     def test_signature_version_1(self):\n         print \"\\tTesting segwit signature hash version 1\"\n         key = CECKey()\n-        key.set_secretbytes(\"9\")\n+        key.set_secretbytes(b\"9\")\n         pubkey = CPubKey(key.get_pubkey())\n \n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n@@ -1121,7 +1120,7 @@ def test_signature_version_1(self):\n         # First create a witness output for use in the tests.\n         assert(len(self.utxo))\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n         tx.rehash()\n \n@@ -1147,7 +1146,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n                 hashtype |= sigflag\n                 block = self.build_next_block()\n                 tx = CTransaction()\n-                tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+                tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n                 tx.vout.append(CTxOut(prev_utxo.nValue - 1000, scriptPubKey))\n                 tx.wit.vtxinwit.append(CTxinWitness())\n                 # Too-large input value\n@@ -1178,7 +1177,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         NUM_TESTS = 500\n         temp_utxos = []\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n         split_value = prev_utxo.nValue // NUM_TESTS\n         for i in xrange(NUM_TESTS):\n             tx.vout.append(CTxOut(split_value, scriptPubKey))\n@@ -1203,7 +1202,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             tx = CTransaction()\n             total_value = 0\n             for i in xrange(num_inputs):\n-                tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), \"\"))\n+                tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), b\"\"))\n                 tx.wit.vtxinwit.append(CTxinWitness())\n                 total_value += temp_utxos[i].nValue\n             split_value = total_value // num_outputs\n@@ -1242,17 +1241,17 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         pubkeyhash = hash160(pubkey)\n         scriptPKH = CScript([OP_0, pubkeyhash])\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n         tx.vout.append(CTxOut(temp_utxos[0].nValue, scriptPKH))\n         tx.wit.vtxinwit.append(CTxinWitness())\n         sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n         tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n         script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n-        signature = key.sign(sig_hash) + chr(SIGHASH_ALL)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n \n         # Check that we can't have a scriptSig\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n@@ -1264,7 +1263,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         block.vtx.pop()\n         tx2.wit.vtxinwit.append(CTxinWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n-        tx2.vin[0].scriptSig = \"\"\n+        tx2.vin[0].scriptSig = b\"\"\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n@@ -1280,7 +1279,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             # Just spend to our usual anyone-can-spend output\n             # Use SIGHASH_SINGLE|SIGHASH_ANYONECANPAY so we can build up\n             # the signatures as we go.\n-            tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n             tx.vout.append(CTxOut(i.nValue, CScript([OP_TRUE])))\n             tx.wit.vtxinwit.append(CTxinWitness())\n             sign_P2PK_witness_input(witness_program, tx, index, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, i.nValue, key)\n@@ -1309,7 +1308,7 @@ def test_p2sh_witness(self, segwit_activated):\n \n         # Fund the P2SH output\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n         tx.rehash()\n \n@@ -1334,7 +1333,7 @@ def test_p2sh_witness(self, segwit_activated):\n         self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n-        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, 'a'])\n+        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n         self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n \n@@ -1343,7 +1342,7 @@ def test_p2sh_witness(self, segwit_activated):\n         spend_tx.vin[0].scriptSig = scriptSig\n         spend_tx.rehash()\n         spend_tx.wit.vtxinwit.append(CTxinWitness())\n-        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a', witness_program ]\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a', witness_program ]\n \n         # Verify mempool acceptance\n         self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n@@ -1431,7 +1430,7 @@ def test_witness_sigops(self):\n         # First split our available utxo into a bunch of outputs\n         split_value = self.utxo[0].nValue // outputs\n         tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         for i in xrange(outputs):\n             tx.vout.append(CTxOut(split_value, scriptPubKey))\n         tx.vout[-2].scriptPubKey = scriptPubKey_toomany\n@@ -1447,7 +1446,7 @@ def test_witness_sigops(self):\n         # too many sigops.\n         total_value = 0\n         for i in xrange(outputs-1):\n-            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n             tx2.wit.vtxinwit.append(CTxinWitness())\n             tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program ]\n             total_value += tx.vout[i].nValue\n@@ -1488,7 +1487,7 @@ def test_witness_sigops(self):\n         # output of tx\n         block_5 = self.build_next_block()\n         tx2.vout.pop()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, outputs-1), \"\"))\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, outputs-1), b\"\"))\n         tx2.wit.vtxinwit.append(CTxinWitness())\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n         tx2.rehash()"
      },
      {
        "sha": "c3eea7be79c41dc2316e0244c7c352157261a38b",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -9,44 +9,37 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import sha256, ripemd160\n import os\n import shutil\n-import hashlib\n-from binascii import hexlify\n \n NODE_0 = 0\n NODE_1 = 1\n NODE_2 = 2\n WIT_V0 = 0\n WIT_V1 = 1\n \n-def sha256(s):\n-    return hashlib.new('sha256', s).digest()\n-\n-def ripemd160(s):\n-    return hashlib.new('ripemd160', s).digest()\n-\n def witness_script(version, pubkey):\n     if (version == 0):\n-        pubkeyhash = hexlify(ripemd160(sha256(pubkey.decode(\"hex\"))))\n+        pubkeyhash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pubkey))))\n         pkscript = \"0014\" + pubkeyhash\n     elif (version == 1):\n         # 1-of-1 multisig\n-        scripthash = hexlify(sha256((\"5121\" + pubkey + \"51ae\").decode(\"hex\")))\n+        scripthash = bytes_to_hex_str(sha256(hex_str_to_bytes(\"5121\" + pubkey + \"51ae\")))\n         pkscript = \"0020\" + scripthash\n     else:\n         assert(\"Wrong version\" == \"0 or 1\")\n     return pkscript\n \n def addlength(script):\n-    scriptlen = format(len(script)/2, 'x')\n+    scriptlen = format(len(script)//2, 'x')\n     assert(len(scriptlen) == 2)\n     return scriptlen + script\n \n def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n     pkscript = witness_script(version, pubkey);\n     if (encode_p2sh):\n-        p2sh_hash = hexlify(ripemd160(sha256(pkscript.decode(\"hex\"))))\n+        p2sh_hash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pkscript))))\n         pkscript = \"a914\"+p2sh_hash+\"87\"\n     inputs = []\n     outputs = {}"
      },
      {
        "sha": "5dae583e0146cb47fbed3759285520dac8b4bcc0",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -23,7 +23,7 @@ def create_block(hashprev, coinbase, nTime=None):\n     return block\n \n # From BIP141\n-WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n+WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n # According to BIP141, blocks with witness rules active must commit to the\n # hash of all in-block transactions including witness."
      },
      {
        "sha": "d6d6d057b889d6bacc3790bb0851838150fa0873",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -63,6 +63,8 @@\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n \n+def ripemd160(s):\n+    return hashlib.new('ripemd160', s).digest()\n \n def hash256(s):\n     return sha256(sha256(s))\n@@ -440,7 +442,7 @@ def deserialize(self, f):\n             self.vtxinwit[i].deserialize(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         # This is different than the usual vector serialization --\n         # we omit the length of the vector, which is required to be\n         # the same length as the transaction's vin vector."
      },
      {
        "sha": "305a7f59b1a6b0b5bf1ba0b7ca1ca8f368506225",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "patch": "@@ -911,27 +911,27 @@ def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):\n     hashOutputs = 0L\n \n     if not (hashtype & SIGHASH_ANYONECANPAY):\n-        serialize_prevouts = str()\n+        serialize_prevouts = bytes()\n         for i in txTo.vin:\n             serialize_prevouts += i.prevout.serialize()\n         hashPrevouts = uint256_from_str(hash256(serialize_prevouts))\n \n     if (not (hashtype & SIGHASH_ANYONECANPAY) and (hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n-        serialize_sequence = str()\n+        serialize_sequence = bytes()\n         for i in txTo.vin:\n             serialize_sequence += struct.pack(\"<I\", i.nSequence)\n         hashSequence = uint256_from_str(hash256(serialize_sequence))\n \n     if ((hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n-        serialize_outputs = str()\n+        serialize_outputs = bytes()\n         for o in txTo.vout:\n             serialize_outputs += o.serialize()\n         hashOutputs = uint256_from_str(hash256(serialize_outputs))\n     elif ((hashtype & 0x1f) == SIGHASH_SINGLE and inIdx < len(txTo.vout)):\n         serialize_outputs = txTo.vout[inIdx].serialize()\n         hashOutputs = uint256_from_str(hash256(serialize_outputs))\n \n-    ss = str()\n+    ss = bytes()\n     ss += struct.pack(\"<i\", txTo.nVersion)\n     ss += ser_uint256(hashPrevouts)\n     ss += ser_uint256(hashSequence)"
      }
    ]
  },
  {
    "sha": "5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDZiNmUyODhkYjU2MzU0MmRjZWM1ZmNlNzlhYmY5ZDBhYzI4YWQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:51:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:53:09Z"
      },
      "message": "fixup Add segregated witness transaction serialization: add missing witness flags",
      "tree": {
        "sha": "bd2c8f925fe1235cb6947259375b2cf823f0a2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2c8f925fe1235cb6947259375b2cf823f0a2ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c0ff5bb129b113749c016928159508eae1519301",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6b6e288db563542dcec5fce79abf9d0ac28ad0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6b6e288db563542dcec5fce79abf9d0ac28ad0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
        "patch": "@@ -332,7 +332,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;\n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         ssTx << *t;\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }"
      },
      {
        "sha": "65611a69975526d56eb00b06983aef2eb816ac14",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6b6e288db563542dcec5fce79abf9d0ac28ad0/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6b6e288db563542dcec5fce79abf9d0ac28ad0/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
        "patch": "@@ -145,7 +145,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     LogPrint(\"zmq\", \"zmq: Publish rawblock %s\\n\", pindex->GetBlockHash().GetHex());\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     {\n         LOCK(cs_main);\n         CBlock block;\n@@ -166,7 +166,7 @@ bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &tr\n {\n     uint256 hash = transaction.GetHash();\n     LogPrint(\"zmq\", \"zmq: Publish rawtx %s\\n\", hash.GetHex());\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ss << transaction;\n     int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);\n     return rc == 0;"
      }
    ]
  },
  {
    "sha": "77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2M2MTNjM2I3ZWE4NTBiYmNjNTdiYmM3MGY3ZmE5ZTQxZmE1NzI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "message": "--- [SEGWIT] begin: fixups 2 ---",
      "tree": {
        "sha": "bd2c8f925fe1235cb6947259375b2cf823f0a2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2c8f925fe1235cb6947259375b2cf823f0a2ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d6b6e288db563542dcec5fce79abf9d0ac28ad0"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "f889bec4710ba8459eb3e191d5da328368db6cbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODg5YmVjNDcxMGJhODQ1OWViM2UxOTFkNWRhMzI4MzY4ZGI2Y2Jm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T15:13:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "message": "fixup Add segregated witness transaction serialization: add negative flag\n\nThis is the beginning of a transition to using an opt-out NO_WITNESS flag\nrather than an opt-in WITNESS flag. Having them temporary both at the same\ntime means we can do sanity checking in every transaction serialization to\nbe sure exactly one of both flags is set.\n\nMost of the changes in this commit will be undone when the positive flag is\nremoved.",
      "tree": {
        "sha": "f4d9a556436889e9bf2e991380ae910eb1d89479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d9a556436889e9bf2e991380ae910eb1d89479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f889bec4710ba8459eb3e191d5da328368db6cbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f889bec4710ba8459eb3e191d5da328368db6cbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f889bec4710ba8459eb3e191d5da328368db6cbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f889bec4710ba8459eb3e191d5da328368db6cbf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 51,
      "deletions": 48
    },
    "files": [
      {
        "sha": "dabd31e67d5c48e8b6562b3460ef76186b778eee",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -98,7 +98,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitne\n     vector<unsigned char> txData(ParseHex(strHexTx));\n \n     if (fTryNoWitness) {\n-        CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n         try {\n             ssData >> tx;\n             if (ssData.eof()) {"
      },
      {
        "sha": "5c733a209594eb9af618f3447fbf9b570528aa9b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -619,7 +619,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 10,000 orphans, each of which is at most 5,000 bytes big is\n     // at most 500 megabytes of orphans:\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     if (sz > 5000)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n@@ -963,7 +963,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -3303,7 +3303,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n@@ -4639,7 +4639,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if (!ReadBlockFromDisk(block, (*mi).second, consensusParams))\n                         assert(!\"cannot load block from disk\");\n                     if (inv.type == MSG_BLOCK)\n-                        pfrom->PushMessage(NetMsgType::BLOCK, block);\n+                        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n                         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_WITNESS, NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n@@ -4684,14 +4684,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     LOCK(cs_mapRelay);\n                     map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, (*mi).second);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, (*mi).second);\n                         pushed = true;\n                     }\n                 }\n                 if (!pushed && (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n-                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, tx);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }"
      },
      {
        "sha": "591a5aa5bb129bb330e66eea2c9f3444528f57d1",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -38,5 +38,5 @@ int64_t GetBlockCost(const CBlock& block)\n     // serialization with and without witness data. As witness_size is equal to\n     // total_size - base_size, this formula is identical to:\n     // cost = base_size * 3 + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+    return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n }"
      },
      {
        "sha": "0d1878e8f9e98cdd5366b761dadca709c2c6e46e",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -64,12 +64,12 @@ CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.n\n \n uint256 CMutableTransaction::GetHash() const\n {\n-    return SerializeHash(*this, SER_GETHASH, 0);\n+    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n void CTransaction::UpdateHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, 0);\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n uint256 CTransaction::GetWitnessHash() const\n@@ -151,5 +151,5 @@ std::string CTransaction::ToString() const\n \n int64_t GetTransactionCost(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+    return ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n }"
      },
      {
        "sha": "cdcd54b9f06a0ff149c615aadde10402ae4e51b0",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -12,6 +12,7 @@\n #include \"uint256.h\"\n \n static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n+static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x20000000;\n \n static const int WITNESS_SCALE_FACTOR = 4;\n \n@@ -277,10 +278,12 @@ template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n+    /* Verify that exactly one of SERIALIZE_TRANSACTION_WITNESS and SERIALIZE_TRANSACTION_NO_WITESS is set */\n+    assert(!(nVersion & SERIALIZE_TRANSACTION_WITNESS) ^ !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS));\n     if (ser_action.ForRead()) {\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+        if (tx.vin.size() == 0 && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n             if (flags != 0) {\n@@ -292,7 +295,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n         }\n         const_cast<CTxWitness*>(&tx.wit)->SetNull();\n-        if ((flags & 1) && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+        if ((flags & 1) && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n             const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n@@ -303,7 +306,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             throw std::ios_base::failure(\"Unknown transaction optional data\");\n         }\n     } else {\n-        if (nVersion & SERIALIZE_TRANSACTION_WITNESS) {\n+        if (!(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n             /* Check whether witnesses need to be serialized. */\n             if (!tx.wit.IsNull()) {\n                 flags |= 1;"
      },
      {
        "sha": "10a445695537c6e0f6f2c5cd9da8fc699da8f417",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -228,7 +228,7 @@ static bool rest_block(HTTPRequest* req,\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n     }\n \n-    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ssBlock << block;\n \n     switch (rf) {\n@@ -367,7 +367,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ssTx << tx;\n \n     switch (rf) {"
      },
      {
        "sha": "ddf398f15166d33203ac7d87d36835fee42bdde9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -99,7 +99,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n+    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n     result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));"
      },
      {
        "sha": "3b23ae710bc31275fe3ed8d165404e05a8a74a8b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -294,7 +294,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     if (ntxFound != setTxids.size())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"(Not all) transactions not found in specified block\");\n \n-    CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock mb(block, setTxids);\n     ssMB << mb;\n     std::string strHex = HexStr(ssMB.begin(), ssMB.end());\n@@ -314,7 +314,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n         );\n \n-    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n "
      },
      {
        "sha": "1965027b0c5388224f01c9e93de803e6d416df93",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -40,8 +40,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n \n     vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n     vector<char> expected(vch.size());\n@@ -72,8 +72,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n \n     vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n     vector<char> expected(vch.size());\n@@ -99,8 +99,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     uint160 hash = pubkey.GetID();\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n \n     vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n     vector<char> expected(vch.size());\n@@ -115,13 +115,13 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n {\n     // Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)\n     CTransaction tx;\n-    CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION);\n+    CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> tx;\n \n     // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n-    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);\n+    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     CTransaction spendingTx;\n     spendStream >> spendingTx;\n \n@@ -187,7 +187,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n     // With 9 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -233,7 +233,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n     // With 4 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -288,7 +288,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n     // With 4 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n@@ -340,7 +340,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     // Random real block (000000000000dab0130bbcc991d3d7ae6b81aa6f50a798888dfe62337458dc45)\n     // With one tx\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n-    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     merkleStream << merkleBlock;\n \n     vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101\");\n@@ -379,7 +379,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -425,7 +425,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_P2PUBKEY_ONLY);\n@@ -448,7 +448,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);"
      },
      {
        "sha": "4561715c9f4e1b629035057c651f143076cb6636",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -82,7 +82,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     }\n \n     // Serialize and hash\n-    CHashWriter ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n     ss << txTmp << nHashType;\n     return ss.GetHash();\n }\n@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           sigHashHex = test[4].get_str();\n \n           uint256 sh;\n-          CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n+          CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n           stream >> tx;\n \n           CValidationState state;"
      },
      {
        "sha": "92045f9b455b16f321a2c9bd0b57c57210575604",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     // Random real transaction (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n-    CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n+    CDataStream stream(vch, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;"
      },
      {
        "sha": "206ce9bfce1204bc8ee486592ce822da702c39e5",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -353,7 +353,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     return (rc == 0);\n }\n \n-bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n+bool CDB::Rewrite(const string& strFile, int nSerVersion, const char* pszSkip)\n {\n     while (true) {\n         {\n@@ -385,8 +385,8 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n                         while (fSuccess) {\n-                            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-                            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+                            CDataStream ssKey(SER_DISK, nSerVersion);\n+                            CDataStream ssValue(SER_DISK, nSerVersion);\n                             int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n                             if (ret == DB_NOTFOUND) {\n                                 pcursor->close();"
      },
      {
        "sha": "32be995dad3026e304231cb1e541b0783bf948c6",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -307,7 +307,7 @@ class CDB\n         return Write(std::string(\"version\"), nVersion);\n     }\n \n-    bool static Rewrite(const std::string& strFile, const char* pszSkip = NULL);\n+    bool static Rewrite(const std::string& strFile, int nSerVersion, const char* pszSkip = NULL);\n };\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "b092120221bc8ef06451d38eea3966fc252bb4a9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -266,7 +266,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     uint256 hashTx = tx.GetHash();\n     CWalletTx wtx(pwalletMain,tx);\n \n-    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n "
      },
      {
        "sha": "8e1a6192d3b4dc9b31c87b68c74444f0043611c5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -602,7 +602,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n         // bits of the unencrypted private key in slack space in the database file.\n-        CDB::Rewrite(strWalletFile);\n+        CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n \n     }\n     NotifyStatusChanged(this);\n@@ -2382,7 +2382,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2408,7 +2408,7 @@ DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOu\n     DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n     if (nZapSelectTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2434,7 +2434,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();"
      },
      {
        "sha": "fd4ccbbf438e44fe230edf665631b32de16b5116",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f889bec4710ba8459eb3e191d5da328368db6cbf/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f889bec4710ba8459eb3e191d5da328368db6cbf",
        "patch": "@@ -998,7 +998,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n         if (fOnlyKeys)\n         {\n             CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             string strType, strErr;\n             bool fReadOK;\n             {"
      }
    ]
  },
  {
    "sha": "3ddabe41857f8ba4d81507770f8e5416891e4ac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRhYmU0MTg1N2Y4YmE0ZDgxNTA3NzcwZjhlNTQxNjg5MWU0YWMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T22:37:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "message": "fixup Add segregated witness transaction serialization: test with no inputs no longer possible\n\nThe base commit for segwit serialization uses extended format for transactions without inputs.\nIn \"fixup Add segregated witness transaction serialization: revert extformat-if-empty-vin\" this\nwas changed, but the test for CheckTransaction with no inputs was not removed. Do that now.",
      "tree": {
        "sha": "f9f0eb76d76c680379fad37f60d6d414e986b9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9f0eb76d76c680379fad37f60d6d414e986b9a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f889bec4710ba8459eb3e191d5da328368db6cbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f889bec4710ba8459eb3e191d5da328368db6cbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f889bec4710ba8459eb3e191d5da328368db6cbf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "217a9cbe7b83afbb6b52f539c7cf7ce625a49e94",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ddabe41857f8ba4d81507770f8e5416891e4ac1/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ddabe41857f8ba4d81507770f8e5416891e4ac1/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=3ddabe41857f8ba4d81507770f8e5416891e4ac1",
        "patch": "@@ -30,10 +30,6 @@\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n [\"Tests for CheckTransaction()\"],\n-[\"No inputs\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"01000000000000010000000000000000015100000000\", \"P2SH\"],\n-\n [\"No outputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x05ab9e14d983742513f0f451e105ffb4198d1dd4 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d483045022100f16703104aab4e4088317c862daec83440242411b039d14280e03dd33b487ab802201318a7be236672c5c56083eb7a5a195bc57a40af7923ff8545016cd3b571e2a601232103c40e5d339df3f30bf753e7e04450ae4ef76c9e45587d1d993bdc4cd06f0651c7acffffffff0000000000\", \"P2SH\"],"
      }
    ]
  },
  {
    "sha": "c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQ0YTFlZjEzYTZmMDZhODk1MmQ3ODBiZDJmNGM0YjI0NjQ0Yjc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T16:20:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Add segregated witness transaction serialization: deal with overwrite and inconsistencies",
      "tree": {
        "sha": "4041022cd8d019996299546985440e7cf1ddcfdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4041022cd8d019996299546985440e7cf1ddcfdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ddabe41857f8ba4d81507770f8e5416891e4ac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddabe41857f8ba4d81507770f8e5416891e4ac1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7dc941944602165c5f1959d51dbfbaa291c5bec1",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c744a1ef13a6f06a8952d780bd2f4c4b24644b76/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c744a1ef13a6f06a8952d780bd2f4c4b24644b76/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
        "patch": "@@ -281,6 +281,9 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n     /* Verify that exactly one of SERIALIZE_TRANSACTION_WITNESS and SERIALIZE_TRANSACTION_NO_WITESS is set */\n     assert(!(nVersion & SERIALIZE_TRANSACTION_WITNESS) ^ !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS));\n     if (ser_action.ForRead()) {\n+        const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n+        const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n         if (tx.vin.size() == 0 && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n@@ -306,6 +309,8 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             throw std::ios_base::failure(\"Unknown transaction optional data\");\n         }\n     } else {\n+        // Consistency check\n+        assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n         if (!(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n             /* Check whether witnesses need to be serialized. */\n             if (!tx.wit.IsNull()) {"
      }
    ]
  },
  {
    "sha": "47095950fdf3f0bef36c1a101cdd2f2142199527",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzA5NTk1MGZkZjNmMGJlZjM2YzFhMTAxY2RkMmYyMTQyMTk5NTI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T15:19:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Witness commitment validation: revert adding of commitment in IncrementExtraNonce",
      "tree": {
        "sha": "d267972a17ec9adcb9cde86d64e02165691e59b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d267972a17ec9adcb9cde86d64e02165691e59b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47095950fdf3f0bef36c1a101cdd2f2142199527",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47095950fdf3f0bef36c1a101cdd2f2142199527",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47095950fdf3f0bef36c1a101cdd2f2142199527",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47095950fdf3f0bef36c1a101cdd2f2142199527/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c744a1ef13a6f06a8952d780bd2f4c4b24644b76"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9dcbd6e838e7bf75d490e1a394560df283aee867",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47095950fdf3f0bef36c1a101cdd2f2142199527/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47095950fdf3f0bef36c1a101cdd2f2142199527/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=47095950fdf3f0bef36c1a101cdd2f2142199527",
        "patch": "@@ -306,7 +306,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -318,7 +318,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << vchCoinbaseCommitment << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;"
      },
      {
        "sha": "525f7ca085724319d91ade363914c5aa0d156880",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47095950fdf3f0bef36c1a101cdd2f2142199527/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47095950fdf3f0bef36c1a101cdd2f2142199527/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=47095950fdf3f0bef36c1a101cdd2f2142199527",
        "patch": "@@ -30,7 +30,7 @@ struct CBlockTemplate\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "afb3f484c9178780b57ae21852053f0c19e41084",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47095950fdf3f0bef36c1a101cdd2f2142199527/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47095950fdf3f0bef36c1a101cdd2f2142199527/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=47095950fdf3f0bef36c1a101cdd2f2142199527",
        "patch": "@@ -117,7 +117,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n-            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n+            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n         while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n             ++pblock->nNonce;"
      },
      {
        "sha": "db989e393b549822dee2fc74ab93031f6dc6b93c",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47095950fdf3f0bef36c1a101cdd2f2142199527/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47095950fdf3f0bef36c1a101cdd2f2142199527/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=47095950fdf3f0bef36c1a101cdd2f2142199527",
        "patch": "@@ -109,7 +109,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(tx);\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce, pblocktemplate->vchCoinbaseCommitment);\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjJjYTgxZmM3NGVjYmVjN2ZiOTQ1YzAyNzA2ZTlkYzQ3ZjQ3YTFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T16:28:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Witness commitment validation: correct comment",
      "tree": {
        "sha": "81a178f69b2e9bc6649acde31532c881d1b306ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a178f69b2e9bc6649acde31532c881d1b306ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47095950fdf3f0bef36c1a101cdd2f2142199527",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47095950fdf3f0bef36c1a101cdd2f2142199527",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47095950fdf3f0bef36c1a101cdd2f2142199527"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "69f231cf2b68258718edf74d7208d837607dbadf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122ca81fc74ecbec7fb945c02706e9dc47f47a1d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122ca81fc74ecbec7fb945c02706e9dc47f47a1d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
        "patch": "@@ -3471,7 +3471,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n     // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n     // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n-    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (IsWitnessEnabled(pindexPrev, consensusParams)) {"
      }
    ]
  },
  {
    "sha": "5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGYzZTUxNTMwNmNmYmM4YzM5MTU3ZGI4ZGM2MTBmMWQ0OWNhNWZk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T11:00:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Witness commitment validation: add comment about witness checking in miner",
      "tree": {
        "sha": "afff6763270944053e8737a0e04478403eb7a182",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afff6763270944053e8737a0e04478403eb7a182"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/122ca81fc74ecbec7fb945c02706e9dc47f47a1d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8bfb4bc6f1772ae0c3fe9ee4828218c0506ea334",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5df3e515306cfbc8c39157db8dc610f1d49ca5fd/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5df3e515306cfbc8c39157db8dc610f1d49ca5fd/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
        "patch": "@@ -138,7 +138,12 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         if (chainparams.MineBlocksOnDemand())\n             pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n-        // Decide whether to include witness transactions (temporary)\n+        // Decide whether to include witness transactions\n+        // This is only needed in case the witness softfork activation is reverted\n+        // (which would require a very deep reorganization) or when\n+        // -promiscuousmempoolflags is used.\n+        // TODO: replace this with a call to main to assess validity of a mempool\n+        // transaction (which in most cases can be a no-op).\n         bool fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n \n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)"
      }
    ]
  },
  {
    "sha": "36e165682316c9e318d4fe0c83f6e079b0621987",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmUxNjU2ODIzMTZjOWUzMThkNGZlMGM4M2Y2ZTA3OWIwNjIxOTg3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:02:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Witness commitment validation: better validation error message",
      "tree": {
        "sha": "1dbcb53039bfa0d5bf1e4463541e6e2dbc658bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dbcb53039bfa0d5bf1e4463541e6e2dbc658bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36e165682316c9e318d4fe0c83f6e079b0621987",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e165682316c9e318d4fe0c83f6e079b0621987",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36e165682316c9e318d4fe0c83f6e079b0621987",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e165682316c9e318d4fe0c83f6e079b0621987/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5df3e515306cfbc8c39157db8dc610f1d49ca5fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f3d4b615d16341f1eb456b2c12e42df9b1165c40",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36e165682316c9e318d4fe0c83f6e079b0621987/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36e165682316c9e318d4fe0c83f6e079b0621987/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=36e165682316c9e318d4fe0c83f6e079b0621987",
        "patch": "@@ -3483,7 +3483,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);\n+                return state.DoS(100, error(\"%s : invalid witness nonce size\", __func__), REJECT_INVALID, \"bad-witness-nonce-size\", true);\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {"
      }
    ]
  },
  {
    "sha": "f7264020d7205c7f4cfbd27aa40e6cc602506322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzI2NDAyMGQ3MjA1YzdmNGNmYmQyN2FhNDBlNmNjNjAyNTA2MzIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:00:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: update comment",
      "tree": {
        "sha": "3b9b99bbe451ed18f19ed1140bf6d8a1618417a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b9b99bbe451ed18f19ed1140bf6d8a1618417a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7264020d7205c7f4cfbd27aa40e6cc602506322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36e165682316c9e318d4fe0c83f6e079b0621987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e165682316c9e318d4fe0c83f6e079b0621987",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36e165682316c9e318d4fe0c83f6e079b0621987"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f014f718b4639f298d16c8be0f0e9a9808d2cd67",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7264020d7205c7f4cfbd27aa40e6cc602506322/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7264020d7205c7f4cfbd27aa40e6cc602506322/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f7264020d7205c7f4cfbd27aa40e6cc602506322",
        "patch": "@@ -93,7 +93,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n     // Largest block you're willing to create:\n     unsigned int nBlockMaxCost = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE) * WITNESS_SCALE_FACTOR;\n-    // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n+    // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n     nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n \n     // How much of the block should be dedicated to high-priority transactions,"
      }
    ]
  },
  {
    "sha": "cf2c5311239df3b88aeea54ae8d16efde697b6ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJjNTMxMTIzOWRmM2I4OGFlZWE1NGFlOGQxNmVmZGU2OTdiNmNh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:08:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Enable SCRIPT_VERIFY_WITNESS for mempool transactions: do not reject/punish invalid witness orphans",
      "tree": {
        "sha": "30a0affb683d8fbf881f9e38b13bd255308ca4ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30a0affb683d8fbf881f9e38b13bd255308ca4ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7264020d7205c7f4cfbd27aa40e6cc602506322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7264020d7205c7f4cfbd27aa40e6cc602506322"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0911454b7a51fd85b2672da942d7c326c7ac5113",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2c5311239df3b88aeea54ae8d16efde697b6ca/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2c5311239df3b88aeea54ae8d16efde697b6ca/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cf2c5311239df3b88aeea54ae8d16efde697b6ca",
        "patch": "@@ -5253,7 +5253,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     else if (!fMissingInputs2)\n                     {\n                         int nDos = 0;\n-                        if (stateDummy.IsInvalid(nDos) && nDos > 0)\n+                        if (stateDummy.IsInvalid(nDos) && nDos > 0 && (!state.CorruptionPossible() || State(fromPeer)->fHaveWitness))\n                         {\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n@@ -5264,8 +5264,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n-                        assert(recentRejects);\n-                        recentRejects->insert(orphanHash);\n+                        if (!stateDummy.CorruptionPossible()) {\n+                            assert(recentRejects);\n+                            recentRejects->insert(orphanHash);\n+                        }\n                     }\n                     mempool.check(pcoinsTip);\n                 }"
      }
    ]
  },
  {
    "sha": "0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmI2ZTRlMjkzMGJkZjQxZDcwMjRlYTI3ZGJlZTdiMzhhZjE1MGY5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:15:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "fixup Return witness data: don't list nextblockhash twice",
      "tree": {
        "sha": "062e314c4cda607263e2d78d49d42eda1245a68d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/062e314c4cda607263e2d78d49d42eda1245a68d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2c5311239df3b88aeea54ae8d16efde697b6ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c5311239df3b88aeea54ae8d16efde697b6ca"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ee7f49888724f2fb6cdbe1bf5eb491ab8888ecc3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
        "patch": "@@ -333,7 +333,6 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n             \"}\\n\"\n             \"\\nResult (for verbose=false):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\""
      }
    ]
  },
  {
    "sha": "ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2QwZTZjZTIzZDY3ZjkzMjc0MjhiZDE2ZmFkNDRlY2YwOGI0MzM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-23T12:33:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "[qa] mininode: Use hexlify wrapper from util",
      "tree": {
        "sha": "d47a71dbfd698d8de9d35525b6b985e758edd75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d47a71dbfd698d8de9d35525b6b985e758edd75a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8f92fe49b80ed25743c09f4b5acbe3bfe2cf77d8",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd0e6ce23d67f9327428bd16fad44ecf08b4338/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd0e6ce23d67f9327428bd16fad44ecf08b4338/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
        "patch": "@@ -23,7 +23,7 @@\n import time\n import sys\n import random\n-from util import *\n+from .util import hex_str_to_bytes, bytes_to_hex_str\n from io import BytesIO\n from codecs import encode\n import hashlib\n@@ -249,12 +249,12 @@ def ser_int_vector(l):\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string.encode('ascii'))))\n+    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return bytes_to_hex_str(obj.serialize()).decode('ascii')\n+    return bytes_to_hex_str(obj.serialize())\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n@@ -408,7 +408,7 @@ def __init__(self):\n \n     def __repr__(self):\n         return \"CScriptWitness(%s)\" % \\\n-               (\",\".join([binascii.bytes_to_hex_str(x) for x in self.stack]))\n+               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n \n     def is_null(self):\n         if self.stack:"
      }
    ]
  },
  {
    "sha": "3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTYyY2I5NWU5YjczNTAwZWMwZjc1ODhhYzUyYjQwNzU1M2QwYmM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T22:00:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "Implement RecursiveDynamicUsage for witness structures",
      "tree": {
        "sha": "4f75ff34fb057191fe8938befe03912a41427bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f75ff34fb057191fe8938befe03912a41427bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd0e6ce23d67f9327428bd16fad44ecf08b4338"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d195ae344f802e58f446a5ee37c926fbe3ee8bbd",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a62cb95e9b73500ec0f7588ac52b407553d0bc4/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a62cb95e9b73500ec0f7588ac52b407553d0bc4/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
        "patch": "@@ -25,6 +25,26 @@ static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n     return RecursiveDynamicUsage(out.scriptPubKey);\n }\n \n+static inline size_t RecursiveDynamicUsage(const CScriptWitness& scriptWit) {\n+    size_t mem = memusage::DynamicUsage(scriptWit.stack);\n+    for (std::vector<std::vector<unsigned char> >::const_iterator it = scriptWit.stack.begin(); it != scriptWit.stack.end(); it++) {\n+        mem += memusage::DynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxinWitness& txinwit) {\n+    return RecursiveDynamicUsage(txinwit.scriptWitness);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n+    size_t mem = memusage::DynamicUsage(txwit.vtxinwit);\n+    for (std::vector<CTxinWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n     size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n@@ -37,7 +57,7 @@ static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }"
      }
    ]
  },
  {
    "sha": "a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTQxZjBiODZmMWE3YWY3YzI0ZTEyNWQ3ODRmODNiMmQzZTdlMTRk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:50:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "message": "Use an enum for signature versions",
      "tree": {
        "sha": "7161b6e698dbb8cd00f5ee72dff43484de7f1f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7161b6e698dbb8cd00f5ee72dff43484de7f1f5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a62cb95e9b73500ec0f7588ac52b407553d0bc4"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 54,
      "deletions": 48
    },
    "files": [
      {
        "sha": "f7613fc431e46e51bcc4f29503ffcd81d17ba416",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -137,7 +137,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), 0))\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n                 return false;\n             if (stack.empty())\n                 return false;"
      },
      {
        "sha": "691afca6ff66388a45ded9550b03aff8f5d456fe",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -229,7 +229,7 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* serror)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -869,7 +869,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     CScript scriptCode(pbegincodehash, pend);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n-                    if (sigversion == 0) {\n+                    if (sigversion == SIGVERSION_BASE) {\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n \n@@ -927,7 +927,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n-                        if (sigversion == 0) {\n+                        if (sigversion == SIGVERSION_BASE) {\n                             scriptCode.FindAndDelete(CScript(vchSig));\n                         }\n                     }\n@@ -1110,9 +1110,9 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion)\n {\n-    if (sigversion == 1) {\n+    if (sigversion == SIGVERSION_WITNESS_V0) {\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n         uint256 hashOutputs;\n@@ -1196,7 +1196,7 @@ bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned cha\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1340,7 +1340,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, 1, serror)) {\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_WITNESS_V0, serror)) {\n         return false;\n     }\n \n@@ -1367,12 +1367,12 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     }\n \n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, flags, checker, 0, serror))\n+    if (!EvalScript(stack, scriptSig, flags, checker, SIGVERSION_BASE, serror))\n         // serror is set\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, 0, serror))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_BASE, serror))\n         // serror is set\n         return false;\n     if (stack.empty())\n@@ -1418,7 +1418,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stack);\n \n-        if (!EvalScript(stack, pubKey2, flags, checker, 0, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, SIGVERSION_BASE, serror))\n             // serror is set\n             return false;\n         if (stack.empty())"
      },
      {
        "sha": "3f86610b0a03ecff62655433858cf1be31eb11ab",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -98,12 +98,18 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion);\n+enum SigVersion\n+{\n+    SIGVERSION_BASE = 0,\n+    SIGVERSION_WITNESS_V0 = 1,\n+};\n+\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion);\n \n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n     {\n         return false;\n     }\n@@ -133,7 +139,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n \n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n };\n@@ -147,7 +153,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);"
      },
      {
        "sha": "87f38d9c72565ee42e904cf194410330ea881570",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -20,7 +20,7 @@ typedef std::vector<unsigned char> valtype;\n \n TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion) const\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n@@ -33,7 +33,7 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n {\n     vector<unsigned char> vchSig;\n     if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))\n@@ -42,7 +42,7 @@ static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, co\n     return true;\n }\n \n-static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n@@ -63,7 +63,7 @@ static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreato\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     std::vector<valtype>& ret, txnouttype& whichTypeRet, int sigversion)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet, SigVersion sigversion)\n {\n     CScript scriptRet;\n     uint160 h160;\n@@ -142,7 +142,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     bool solved = true;\n     std::vector<valtype> result;\n     txnouttype whichType;\n-    solved = SignStep(creator, script, result, whichType, 0);\n+    solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n@@ -153,7 +153,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n         script = subscript = CScript(result[0].begin(), result[0].end());\n-        solved = solved && SignStep(creator, script, result, whichType, 0) && whichType != TX_SCRIPTHASH;\n+        solved = solved && SignStep(creator, script, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n \n@@ -162,15 +162,15 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         CScript witnessscript;\n         witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType, 1);\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0);\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n     }\n     else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType, 1) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n@@ -231,7 +231,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n \n static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n-                               const vector<valtype>& sigs1, const vector<valtype>& sigs2, int sigversion)\n+                               const vector<valtype>& sigs1, const vector<valtype>& sigs2, SigVersion sigversion)\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n@@ -294,7 +294,7 @@ struct Stacks\n     Stacks() {}\n     explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n     explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n-        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SIGVERSION_BASE);\n     }\n \n     SignatureData Output() const {\n@@ -308,7 +308,7 @@ struct Stacks\n \n static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 Stacks sigs1, Stacks sigs2, int sigversion)\n+                                 Stacks sigs1, Stacks sigs2, SigVersion sigversion)\n {\n     switch (txType)\n     {\n@@ -369,7 +369,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             sigs2.witness.pop_back();\n             sigs2.script = sigs2.witness;\n             sigs2.witness.clear();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, 1);\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, SIGVERSION_WITNESS_V0);\n             result.witness = result.script;\n             result.script.clear();\n             result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n@@ -387,7 +387,7 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n     vector<vector<unsigned char> > vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), 0).Output();\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), SIGVERSION_BASE).Output();\n }\n \n namespace {\n@@ -397,7 +397,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n     {\n         return true;\n     }\n@@ -410,7 +410,7 @@ const BaseSignatureChecker& DummySignatureCreator::Checker() const\n     return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const\n+bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n {\n     // Create a dummy signature that is a valid DER-encoding\n     vchSig.assign(72, '\\000');"
      },
      {
        "sha": "6404b4523ecaa03440242532608929b4b9320242",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -27,7 +27,7 @@ class BaseSignatureCreator {\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n     /** Create a singular (non-script) signature. */\n-    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const =0;\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -41,7 +41,7 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -56,7 +56,7 @@ class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n };\n \n struct SignatureData {"
      },
      {
        "sha": "581b0cee1ec876d37596b5c5be878a8fd5ad0c86",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -26,7 +26,7 @@ BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, 0);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, SIGVERSION_BASE);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "29d48c3cc7b0df2eafc58bcf31a8c7702f5b576f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -341,7 +341,7 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 0)\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_BASE)\n     {\n         uint256 hash = SignatureHash(script, spendTx, 0, nHashType, 0, sigversion);\n         std::vector<unsigned char> vchSig, r, s;\n@@ -359,7 +359,7 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushWitSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 1)\n+    TestBuilder& PushWitSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_WITNESS_V0)\n     {\n         return PushSig(key, nHashType, lenR, lenS, sigversion).AsWit();\n     }\n@@ -842,29 +842,29 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }\n \n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, 0);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n \n     CScript result;\n     //\n@@ -1060,15 +1060,15 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, 0);\n+    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, 0);\n+    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, 0);\n+    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, SIGVERSION_BASE);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n "
      },
      {
        "sha": "3a480f0df137ac3d330d6f4e488be7e3162a22a4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType, 0, 0);\n+        sh = SignatureHash(scriptCode, txTo, nIn, nHashType, 0, SIGVERSION_BASE);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, 0);\n+        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, SIGVERSION_BASE);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      },
      {
        "sha": "556101fa32afe3dff7bbfd8abfa834712cd461dd",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -413,7 +413,7 @@ static CScript PushAll(const vector<valtype>& values)\n void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     vector<valtype> stack;\n-    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SIGVERSION_BASE);\n     assert(stack.size() > 0);\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n     script = PushAll(stack);"
      },
      {
        "sha": "000eca1821e0bf7dc6ba66ebc3c0d4816f0cc99a",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n         // Sign:\n         std::vector<unsigned char> vchSig;\n-        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL, 0, 0);\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n         BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         spends[i].vin[0].scriptSig << vchSig;"
      }
    ]
  },
  {
    "sha": "f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzg2NzFmM2QwMmVjZmNiMWZmZWZlNmExMDliNTRkNGU2NGFkMWJj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:19Z"
      },
      "message": "--- [SEGWIT] begin: fixups 3 ---",
      "tree": {
        "sha": "7161b6e698dbb8cd00f5ee72dff43484de7f1f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7161b6e698dbb8cd00f5ee72dff43484de7f1f5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "ba7e292ba64f50e42a75ceadb359913a228b2def",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTdlMjkyYmE2NGY1MGU0MmE3NWNlYWRiMzU5OTEzYTIyOGIyZGVm",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-05-04T04:06:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:36Z"
      },
      "message": "test: WITNESS flag must be used with P2SH flag\n\nWITNESS flag must be used with P2SH flag. If not, and if the script passes, the test will crash.",
      "tree": {
        "sha": "595be9b2c71845bb80e8e30dbd3bcf0559692043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/595be9b2c71845bb80e8e30dbd3bcf0559692043"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7e292ba64f50e42a75ceadb359913a228b2def",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7e292ba64f50e42a75ceadb359913a228b2def",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7e292ba64f50e42a75ceadb359913a228b2def",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7e292ba64f50e42a75ceadb359913a228b2def/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "11cc908f51065a7312758e37c218675c4969b904",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7e292ba64f50e42a75ceadb359913a228b2def/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7e292ba64f50e42a75ceadb359913a228b2def/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=ba7e292ba64f50e42a75ceadb359913a228b2def",
        "patch": "@@ -1252,8 +1252,8 @@\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n \n [\"Some basic segwit checks\"],\n-[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n-[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n+[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n+[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n [[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n [[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n "
      }
    ]
  },
  {
    "sha": "e7821e910d01052418469f5a1f656e8c65b57514",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgyMWU5MTBkMDEwNTI0MTg0NjlmNWExZjY1NmU4YzY1YjU3NTE0",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-05-06T05:29:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:59Z"
      },
      "message": "BIP9 parameters for testnet",
      "tree": {
        "sha": "37761022542411f9ba070c7391470eb4c72d1561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37761022542411f9ba070c7391470eb4c72d1561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7821e910d01052418469f5a1f656e8c65b57514",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7821e910d01052418469f5a1f656e8c65b57514",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7821e910d01052418469f5a1f656e8c65b57514",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7821e910d01052418469f5a1f656e8c65b57514/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba7e292ba64f50e42a75ceadb359913a228b2def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7e292ba64f50e42a75ceadb359913a228b2def",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7e292ba64f50e42a75ceadb359913a228b2def"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7d84e80bb35c79caf2fcc0c9e1aa3124cd7c17ec",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7821e910d01052418469f5a1f656e8c65b57514/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7821e910d01052418469f5a1f656e8c65b57514/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e7821e910d01052418469f5a1f656e8c65b57514",
        "patch": "@@ -191,8 +191,8 @@ class CTestNetParams : public CChainParams {\n \n         // Deployment of SegWit (BIP141 and BIP143)\n         consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 1462060800; // May 1st 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 1493596800; // May 1st 2017\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;"
      }
    ]
  },
  {
    "sha": "76142afd289708ec9c6c9534d7070cf4dc477f37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjE0MmFmZDI4OTcwOGVjOWM2Yzk1MzRkNzA3MGNmNGRjNDc3ZjM3",
    "commit": {
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2016-05-04T00:53:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:38:19Z"
      },
      "message": "Segwit script error unit tests",
      "tree": {
        "sha": "f4d34843293e1810004ee9cd28347d323f2d9d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d34843293e1810004ee9cd28347d323f2d9d06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76142afd289708ec9c6c9534d7070cf4dc477f37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76142afd289708ec9c6c9534d7070cf4dc477f37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76142afd289708ec9c6c9534d7070cf4dc477f37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76142afd289708ec9c6c9534d7070cf4dc477f37/comments",
    "author": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasnick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7821e910d01052418469f5a1f656e8c65b57514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7821e910d01052418469f5a1f656e8c65b57514",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7821e910d01052418469f5a1f656e8c65b57514"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 128,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7ae5101c12fe6bf1b74367267b4ad966e0fc8e9c",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76142afd289708ec9c6c9534d7070cf4dc477f37/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76142afd289708ec9c6c9534d7070cf4dc477f37/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=76142afd289708ec9c6c9534d7070cf4dc477f37",
        "patch": "@@ -1957,6 +1957,90 @@\n     \"OK\",\n     \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\"\n ],\n+[\n+    [\n+        \"304402205ae57ae0534c05ca9981c8a6cdf353b505eaacb7375f96681a2d1a4ba6f02f84022056248e68643b7d8ce7c7d128c9f1f348bcab8be15d094ad5cadd24251a28df8001\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"\",\n+    \"1 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,P2SH,WITNESS\",\n+    \"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\",\n+    \"P2WPKH with future witness version\"\n+],\n+[\n+    [\n+        \"3044022064100ca0e2a33332136775a86cd83d0230e58b9aebb889c5ac952abff79a46ef02205f1bf900e022039ad3091bdaf27ac2aef3eae9ed9f190d821d3e508405b9513101\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"\",\n+    \"0 0x1f 0xb34b78da162751647974d5cb7410aa428ad339dbf7d1e16e833f68a0cbf1c3\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_PROGRAM_WRONG_LENGTH\",\n+    \"P2WPKH with wrong witness program length\"\n+],\n+[\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_PROGRAM_WITNESS_EMPTY\",\n+    \"P2WSH with empty witness\"\n+],\n+[\n+    [\n+        \"3044022039105b995a5f448639a997a5c90fda06f50b49df30c3bdb6663217bf79323db002206fecd54269dec569fcc517178880eb58bb40f381a282bb75766ff3637d5f4b4301\",\n+        \"400479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_PROGRAM_MISMATCH\",\n+    \"P2WSH with witness program mismatch\"\n+],\n+[\n+    [\n+        \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        \"\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_PROGRAM_MISMATCH\",\n+    \"P2WPKH with witness program mismatch\"\n+],\n+[\n+    [\n+        \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"11\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_MALLEATED\",\n+    \"P2WPKH with non-empty scriptSig\"\n+],\n+[\n+    [\n+        \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"11 0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_MALLEATED_P2SH\",\n+    \"P2SH(P2WPKH) with superfluous push in scriptSig\"\n+],\n+[\n+    [\n+        \"\"\n+    ],\n+    \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"P2SH,WITNESS\",\n+    \"WITNESS_UNEXPECTED\",\n+    \"P2PK with witness\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "1ea68704811ee32983fd21f0c5bdb955fba6e1a9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 3,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76142afd289708ec9c6c9534d7070cf4dc477f37/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76142afd289708ec9c6c9534d7070cf4dc477f37/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=76142afd289708ec9c6c9534d7070cf4dc477f37",
        "patch": "@@ -293,19 +293,19 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n+    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE, int witnessversion = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n     {\n         CScript scriptPubKey = script;\n         if (wm == WITNESS_PKH) {\n             uint160 hash;\n             CHash160().Write(&script[1], script.size() - 1).Finalize(hash.begin());\n             script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(hash) << OP_EQUALVERIFY << OP_CHECKSIG;\n-            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+            scriptPubKey = CScript() << witnessversion << ToByteVector(hash);\n         } else if (wm == WITNESS_SH) {\n             witscript = scriptPubKey;\n             uint256 hash;\n             CSHA256().Write(&witscript[0], witscript.size()).Finalize(hash.begin());\n-            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+            scriptPubKey = CScript() << witnessversion << ToByteVector(hash);\n         }\n         if (P2SH) {\n             redeemscript = scriptPubKey;\n@@ -341,6 +341,11 @@ class TestBuilder\n         return *this;\n     }\n \n+    TestBuilder& Push(const CScript& script) {\n+         DoPush(std::vector<unsigned char>(script.begin(), script.end()));\n+        return *this;\n+    }\n+\n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_BASE)\n     {\n         uint256 hash = SignatureHash(script, spendTx, 0, nHashType, 0, sigversion);\n@@ -762,6 +767,42 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n                                ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem());\n \n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"P2WPKH with future witness version\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH |\n+                                SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM, false, WITNESS_PKH, 1\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM));\n+    {\n+        CScript witscript = CScript() << ToByteVector(keys.pubkey0);\n+        uint256 hash;\n+        CSHA256().Write(&witscript[0], witscript.size()).Finalize(hash.begin());\n+        vector<unsigned char> hashBytes = ToByteVector(hash);\n+        hashBytes.pop_back();\n+        tests.push_back(TestBuilder(CScript() << OP_0 << hashBytes,\n+                                    \"P2WPKH with wrong witness program length\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false\n+                                   ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH));\n+    }\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2WSH with empty witness\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).ScriptError(SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY));\n+    {\n+        CScript witscript = CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG;\n+        tests.push_back(TestBuilder(witscript,\n+                                    \"P2WSH with witness program mismatch\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                                   ).PushWitSig(keys.key0).Push(witscript).DamagePush(0).AsWit().ScriptError(SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH));\n+    }\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"P2WPKH with witness program mismatch\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().Push(\"0\").AsWit().ScriptError(SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"P2WPKH with non-empty scriptSig\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().Num(11).ScriptError(SCRIPT_ERR_WITNESS_MALLEATED));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"P2SH(P2WPKH) with superfluous push in scriptSig\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().Num(11).PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_MALLEATED_P2SH));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK with witness\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH\n+                               ).PushSig(keys.key0).Push(\"0\").AsWit().ScriptError(SCRIPT_ERR_WITNESS_UNEXPECTED));\n+\n     std::set<std::string> tests_set;\n \n     {"
      }
    ]
  },
  {
    "sha": "8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzA4ZGU4YTc0YTZkOTljZDNjNzM4NDhlOGMyNTA0Y2UyZjUzMGUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:38:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:38:58Z"
      },
      "message": "--- [SEGWIT] begin: fixups 4 ---",
      "tree": {
        "sha": "f4d34843293e1810004ee9cd28347d323f2d9d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d34843293e1810004ee9cd28347d323f2d9d06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76142afd289708ec9c6c9534d7070cf4dc477f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76142afd289708ec9c6c9534d7070cf4dc477f37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76142afd289708ec9c6c9534d7070cf4dc477f37"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "b8462981632a9e3b989a28e4d1692d72616e1d68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODQ2Mjk4MTYzMmE5ZTNiOTg5YTI4ZTRkMTY5MmQ3MjYxNmUxZDY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:45:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f cb9d4d34: typo fix",
      "tree": {
        "sha": "fccee550ba31180223dabbbe910e4cfdf49cfd60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fccee550ba31180223dabbbe910e4cfdf49cfd60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8462981632a9e3b989a28e4d1692d72616e1d68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8462981632a9e3b989a28e4d1692d72616e1d68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8462981632a9e3b989a28e4d1692d72616e1d68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8462981632a9e3b989a28e4d1692d72616e1d68/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8708de8a74a6d99cd3c73848e8c2504ce2f530e1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a9fe3df9922dc21de24b9dab5bef46e694ee2de",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8462981632a9e3b989a28e4d1692d72616e1d68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8462981632a9e3b989a28e4d1692d72616e1d68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b8462981632a9e3b989a28e4d1692d72616e1d68",
        "patch": "@@ -3470,7 +3470,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     //   coinbase (where 0x0000....0000 is used instead).\n     // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n     // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n-    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    // * There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;"
      }
    ]
  },
  {
    "sha": "38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGUzZmNkMmRjZGY2ZWE0MjgwN2M4YWFmMDA0ZTVkMjBhYmVhNmZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:46:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f 3b1ff49f: remove redundant witness clean",
      "tree": {
        "sha": "3346da48664071dbc1814daed3a9ca8a5a243e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3346da48664071dbc1814daed3a9ca8a5a243e0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8462981632a9e3b989a28e4d1692d72616e1d68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8462981632a9e3b989a28e4d1692d72616e1d68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8462981632a9e3b989a28e4d1692d72616e1d68"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1dc5e7f398abf78bbec1cbf83479456d8477393a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
        "patch": "@@ -297,7 +297,6 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             /* We read a non-empty vin. Assume a normal vout follows. */\n             READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n         }\n-        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n         if ((flags & 1) && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;"
      }
    ]
  },
  {
    "sha": "fd85b774045e95e85329072ed93be0cd00d5bc28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDg1Yjc3NDA0NWU5NWU4NTMyOTA3MmVkOTNiZTBjZDAwZDViYzI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:08:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f 1b6c6f16: Cleanup mapBlocksUnlinked in RewindBlockIndex",
      "tree": {
        "sha": "688d5651603b789464157a5407d356ca18779cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/688d5651603b789464157a5407d356ca18779cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd85b774045e95e85329072ed93be0cd00d5bc28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd85b774045e95e85329072ed93be0cd00d5bc28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd85b774045e95e85329072ed93be0cd00d5bc28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd85b774045e95e85329072ed93be0cd00d5bc28/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c47fe020b2ec598f327ea214110537f1b670791b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd85b774045e95e85329072ed93be0cd00d5bc28/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd85b774045e95e85329072ed93be0cd00d5bc28/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fd85b774045e95e85329072ed93be0cd00d5bc28",
        "patch": "@@ -4104,8 +4104,16 @@ bool RewindBlockIndex(const Consensus::Params& params)\n             pindexIter->nSequenceId = 0;\n             // Make sure it gets written.\n             setDirtyBlockIndex.insert(pindexIter);\n-            // Update setBlockIndexCandidates\n+            // Update indexes\n             setBlockIndexCandidates.erase(pindexIter);\n+            std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(pindexIter->pprev);\n+            while (ret.first != ret.second) {\n+                if (ret.first->second == pindexIter) {\n+                    mapBlocksUnlinked.erase(ret.first++);\n+                } else {\n+                    ++ret.first;\n+                }\n+            }\n         } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->nChainTx) {\n             setBlockIndexCandidates.insert(pindexIter);\n         }"
      }
    ]
  },
  {
    "sha": "433daf4eef55475ccd2acce1044354cdfa0663b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzNkYWY0ZWVmNTU0NzVjY2QyYWNjZTEwNDQzNTRjZGZhMDY2M2Iy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:10:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f ac6886d3: Get rid of leftover WITNESS_VERSION",
      "tree": {
        "sha": "d23c7ac9828bcd7983152e3603d698001813d160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d23c7ac9828bcd7983152e3603d698001813d160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/433daf4eef55475ccd2acce1044354cdfa0663b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433daf4eef55475ccd2acce1044354cdfa0663b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/433daf4eef55475ccd2acce1044354cdfa0663b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433daf4eef55475ccd2acce1044354cdfa0663b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd85b774045e95e85329072ed93be0cd00d5bc28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd85b774045e95e85329072ed93be0cd00d5bc28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd85b774045e95e85329072ed93be0cd00d5bc28"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0e1d8a63ced6e9e1c85e84a8caa31205f10d898f",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433daf4eef55475ccd2acce1044354cdfa0663b2/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433daf4eef55475ccd2acce1044354cdfa0663b2/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=433daf4eef55475ccd2acce1044354cdfa0663b2",
        "patch": "@@ -39,7 +39,4 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n-//! Version after which witness support potentially exists\n-static const int WITNESS_VERSION = 70013;\n-\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "9590289f4fd802d1090afe3653bcc30a9dd06a54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTkwMjg5ZjRmZDgwMmQxMDkwYWZlMzY1M2JjYzMwYTlkZDA2YTU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:37:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f 2c87be12: fix typo",
      "tree": {
        "sha": "8aba8aaac075c11e95fec879ab6523f0854ecd22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aba8aaac075c11e95fec879ab6523f0854ecd22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9590289f4fd802d1090afe3653bcc30a9dd06a54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "433daf4eef55475ccd2acce1044354cdfa0663b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433daf4eef55475ccd2acce1044354cdfa0663b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/433daf4eef55475ccd2acce1044354cdfa0663b2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd2f21166368a98a22795b9d195b320f979d1c64",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9590289f4fd802d1090afe3653bcc30a9dd06a54/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9590289f4fd802d1090afe3653bcc30a9dd06a54/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9590289f4fd802d1090afe3653bcc30a9dd06a54",
        "patch": "@@ -91,7 +91,7 @@ enum\n     //\n     SCRIPT_VERIFY_WITNESS = (1U << 11),\n \n-    // Making v2-v16 witness program non-standard\n+    // Making v1-v16 witness program non-standard\n     //\n     SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),\n };"
      }
    ]
  },
  {
    "sha": "17277c9f8157daf5b52403aa6f93ca85ef6046a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzI3N2M5ZjgxNTdkYWY1YjUyNDAzYWE2ZjkzY2E4NWVmNjA0NmEx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-03-16T02:41:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f 39552185: GetBlockCost: Clarify comment description",
      "tree": {
        "sha": "9cb0dae8ccf5b297a39322cdcbe7de5e36f6ac6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cb0dae8ccf5b297a39322cdcbe7de5e36f6ac6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9590289f4fd802d1090afe3653bcc30a9dd06a54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9590289f4fd802d1090afe3653bcc30a9dd06a54"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f9ee0159098c20ab7fa92d3a395f6155a9a6436e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17277c9f8157daf5b52403aa6f93ca85ef6046a1/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17277c9f8157daf5b52403aa6f93ca85ef6046a1/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=17277c9f8157daf5b52403aa6f93ca85ef6046a1",
        "patch": "@@ -34,9 +34,9 @@ std::string CBlock::ToString() const\n \n int64_t GetBlockCost(const CBlock& block)\n {\n-    // This implements the cost = base_size * 4 + witness_size formula, using only\n-    // serialization with and without witness data. As witness_size is equal to\n-    // total_size - base_size, this formula is identical to:\n-    // cost = base_size * 3 + total_size.\n+    // This implements the cost = (stripped_size * 4) + witness_size formula,\n+    // using only serialization with and without witness data. As witness_size\n+    // is equal to total_size - stripped_size, this formula is identical to:\n+    // cost = (stripped_size * 3) + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n }"
      }
    ]
  },
  {
    "sha": "1e9cba2873fd25270a5d368ece46362613ade9a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTljYmEyODczZmQyNTI3MGE1ZDM2OGVjZTQ2MzYyNjEzYWRlOWE0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-03-30T02:03:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "f 39552185: provide both -maxblocksize and -maxblockcost",
      "tree": {
        "sha": "055740f305a9b3f15e2d3a8ce41a90d5acc165ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/055740f305a9b3f15e2d3a8ce41a90d5acc165ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e9cba2873fd25270a5d368ece46362613ade9a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e9cba2873fd25270a5d368ece46362613ade9a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e9cba2873fd25270a5d368ece46362613ade9a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e9cba2873fd25270a5d368ece46362613ade9a4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17277c9f8157daf5b52403aa6f93ca85ef6046a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17277c9f8157daf5b52403aa6f93ca85ef6046a1"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "928cb45a6d5ca041cb161dbb94910298c248e01b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e9cba2873fd25270a5d368ece46362613ade9a4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e9cba2873fd25270a5d368ece46362613ade9a4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1e9cba2873fd25270a5d368ece46362613ade9a4",
        "patch": "@@ -460,6 +460,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n+    strUsage += HelpMessageOpt(\"-blockmaxcost=<n>\", strprintf(_(\"Set maximum block cost (default: %d)\"), DEFAULT_BLOCK_MAX_COST));\n     strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));"
      },
      {
        "sha": "f9f8a6a10a55911017b97c45b474b26c5d797c10",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e9cba2873fd25270a5d368ece46362613ade9a4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e9cba2873fd25270a5d368ece46362613ade9a4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1e9cba2873fd25270a5d368ece46362613ade9a4",
        "patch": "@@ -144,6 +144,7 @@ extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n+extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockCost;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;"
      },
      {
        "sha": "06bef2b68c90f8011402b0a2e3296b99619afeeb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e9cba2873fd25270a5d368ece46362613ade9a4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e9cba2873fd25270a5d368ece46362613ade9a4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1e9cba2873fd25270a5d368ece46362613ade9a4",
        "patch": "@@ -43,6 +43,7 @@ using namespace std;\n // transactions that depend on transactions that aren't yet in the block.\n \n uint64_t nLastBlockTx = 0;\n+uint64_t nLastBlockSize = 0;\n uint64_t nLastBlockCost = 0;\n \n class ScoreCompare\n@@ -92,19 +93,23 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxCost = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE) * WITNESS_SCALE_FACTOR;\n+    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    // Limit to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n+\n+    unsigned int nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n     // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n     nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPriorityCost = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE) * WITNESS_SCALE_FACTOR;\n-    nBlockPriorityCost = std::min(nBlockMaxCost, nBlockPriorityCost);\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinCost = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE) * WITNESS_SCALE_FACTOR;\n-    nBlockMinCost = std::min(nBlockMaxCost, nBlockMinCost);\n+    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n+    nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n     CTxMemPool::setEntries inBlock;\n@@ -119,7 +124,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n     std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n     bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-    uint64_t nBlockCost = 4000;\n+    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockCost = nBlockSize * WITNESS_SCALE_FACTOR;\n     uint64_t nBlockTx = 0;\n     int64_t nBlockSigOpsCost = 400;\n     int lastFewTxs = 0;\n@@ -150,7 +156,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();\n \n-        bool fPriorityBlock = nBlockPriorityCost > 0;\n+        bool fPriorityBlock = nBlockPrioritySize > 0;\n         if (fPriorityBlock) {\n             vecPriority.reserve(mempool.mapTx.size());\n             for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n@@ -211,23 +217,23 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n \n             unsigned int nTxSize = iter->GetTxSize();\n-            unsigned int nTxCost = nTxSize * WITNESS_SCALE_FACTOR; /* TODO: more accurate version using GetTransactionCost */\n+            int64_t nTxCost = GetTransactionCost(tx);\n             if (fPriorityBlock &&\n-                (nBlockCost + nTxCost >= nBlockPriorityCost || !AllowFree(actualPriority))) {\n+                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n                 fPriorityBlock = false;\n                 waitPriMap.clear();\n             }\n             if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockCost >= nBlockMinCost)) {\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n                 break;\n             }\n-            if (nBlockCost + nTxCost >= nBlockMaxCost) {\n-                if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n+            if (nBlockSize + nTxSize >= nBlockMaxSize || nBlockCost + nTxCost > nBlockMaxCost) {\n+                if (nBlockSize > nBlockMaxSize - 100 || nBlockCost > nBlockMaxCost - 400 || lastFewTxs > 50) {\n                     break;\n                 }\n-                // Once we're within 1000 bytes of a full block, only look at 50 more txs\n-                // to try to fill the remaining space.\n-                if (nBlockCost > nBlockMaxCost - 4000) {\n+                // Once we're within 1000 bytes (or 4000 cost) of a full block,\n+                // only look at 50 more txs to try to fill the remaining space.\n+                if (nBlockSize > nBlockMaxSize - 1000 || nBlockCost > nBlockMaxCost - 4000) {\n                     lastFewTxs++;\n                 }\n                 continue;\n@@ -249,6 +255,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n             pblocktemplate->vTxSigOpsCost.push_back(nTxSigOpsCost);\n+            nBlockSize += nTxSize;\n             nBlockCost += nTxCost;\n             ++nBlockTx;\n             nBlockSigOpsCost += nTxSigOpsCost;\n@@ -285,8 +292,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n         }\n         nLastBlockTx = nBlockTx;\n+        nLastBlockSize = nBlockSize;\n         nLastBlockCost = nBlockCost;\n-        LogPrintf(\"CreateNewBlock(): total cost %u txs: %u fees: %ld sigopscost %d\\n\", nBlockCost, nBlockTx, nFees, nBlockSigOpsCost);\n+        LogPrintf(\"CreateNewBlock(): total size %u cost %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockCost, nBlockTx, nFees, nBlockSigOpsCost);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());"
      },
      {
        "sha": "7537f5331e0dff9712fff5599336cc3dd8492a4e",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e9cba2873fd25270a5d368ece46362613ade9a4/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e9cba2873fd25270a5d368ece46362613ade9a4/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1e9cba2873fd25270a5d368ece46362613ade9a4",
        "patch": "@@ -19,6 +19,8 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n+/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_COST = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      },
      {
        "sha": "43d455b098b89f892ed66b1dc740af6c208492b5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e9cba2873fd25270a5d368ece46362613ade9a4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e9cba2873fd25270a5d368ece46362613ade9a4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1e9cba2873fd25270a5d368ece46362613ade9a4",
        "patch": "@@ -223,6 +223,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n             \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n+            \"  \\\"currentblockcost\\\": nnn,   (numeric) The last block cost\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n@@ -240,6 +241,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n+    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n     obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));"
      }
    ]
  },
  {
    "sha": "8f50b96c82ede3f00c1ed8e524bbab54c288305d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjUwYjk2YzgyZWRlM2YwMGMxZWQ4ZTUyNGJiYWI1NGMyODgzMDVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-06T11:02:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "message": "[qa] segwit: Switch to py3",
      "tree": {
        "sha": "4ba5068f231941b526b4c8699f4bd52ea8fd3a8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ba5068f231941b526b4c8699f4bd52ea8fd3a8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e9cba2873fd25270a5d368ece46362613ade9a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e9cba2873fd25270a5d368ece46362613ade9a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e9cba2873fd25270a5d368ece46362613ade9a4"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 74,
      "deletions": 74
    },
    "files": [
      {
        "sha": "edb1b1e13ad5952fd667aaedc596a35f5a0b85a5",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -183,15 +183,15 @@ def build_next_block(self, nVersion=4):\n         return block\n \n     # Adds list of transactions to block, adds witness commitment, then solves.\n-    def update_witness_block_with_transactions(self, block, tx_list, nonce=0L):\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n         block.vtx.extend(tx_list)\n         add_witness_commitment(block, nonce)\n         block.solve()\n         return\n \n     ''' Individual tests '''\n     def test_witness_services(self):\n-        print \"\\tVerifying NODE_WITNESS service bit\"\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n         assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n \n \n@@ -200,7 +200,7 @@ def test_witness_services(self):\n     def test_non_witness_transaction(self):\n         # Mine a block with an anyone-can-spend coinbase,\n         # let it mature, then try to spend it.\n-        print \"\\tTesting non-witness transaction\"\n+        print(\"\\tTesting non-witness transaction\")\n         block = self.build_next_block(nVersion=1)\n         block.solve()\n         self.test_node.send_message(msg_block(block))\n@@ -229,7 +229,7 @@ def test_non_witness_transaction(self):\n \n     # Verify that blocks with witnesses are rejected before activation.\n     def test_unnecessary_witness_before_segwit_activation(self):\n-        print \"\\tTesting behavior of unnecessary witnesses\"\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n         # For now, rely on earlier tests to have created at least one utxo for\n         # us to use\n         assert(len(self.utxo) > 0)\n@@ -303,7 +303,7 @@ def advance_to_segwit_active(self):\n \n     # This test can only be run after segwit has activated\n     def test_witness_commitments(self):\n-        print \"\\tTesting witness commitments\"\n+        print(\"\\tTesting witness commitments\")\n \n         # First try a correct witness commitment.\n         block = self.build_next_block()\n@@ -318,7 +318,7 @@ def test_witness_commitments(self):\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n-        add_witness_commitment(block_2, nonce=28L)\n+        add_witness_commitment(block_2, nonce=28)\n         block_2.solve()\n \n         # The commitment should have changed!\n@@ -348,7 +348,7 @@ def test_witness_commitments(self):\n         tx2.rehash()\n \n         block_3 = self.build_next_block()\n-        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1L)\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n         # Add an extra OP_RETURN output that matches the witness commitment template,\n         # even though it has extra data after the incorrect commitment.\n         # This block should fail.\n@@ -364,7 +364,7 @@ def test_witness_commitments(self):\n         # right location, and with some funds burned(!).\n         # This should succeed (nValue shouldn't affect finding the\n         # witness commitment).\n-        add_witness_commitment(block_3, nonce=0L)\n+        add_witness_commitment(block_3, nonce=0)\n         block_3.vtx[0].vout[0].nValue -= 1\n         block_3.vtx[0].vout[-1].nValue += 1\n         block_3.vtx[0].rehash()\n@@ -392,7 +392,7 @@ def test_witness_commitments(self):\n \n \n     def test_block_malleability(self):\n-        print \"\\tTesting witness block malleability\"\n+        print(\"\\tTesting witness block malleability\")\n \n         # Make sure that a block that has too big a virtual size\n         # because of a too-large coinbase witness is not permanently\n@@ -424,7 +424,7 @@ def test_block_malleability(self):\n \n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n-        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1L) ]\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n         self.test_node.test_witness_block(block, accepted=False)\n \n         # Changing the witness nonce doesn't change the block hash\n@@ -433,7 +433,7 @@ def test_block_malleability(self):\n \n \n     def test_witness_block_size(self):\n-        print \"\\tTesting witness block size limit\"\n+        print(\"\\tTesting witness block size limit\")\n         # TODO: Test that non-witness carrying blocks can't exceed 1MB\n         # Skipping this test for now; this is covered in p2p-fullblocktest.py\n \n@@ -459,17 +459,17 @@ def test_witness_block_size(self):\n         parent_tx = CTransaction()\n         parent_tx.vin.append(CTxIn(prevout, b\"\"))\n         child_value = int(value/NUM_OUTPUTS)\n-        for i in xrange(NUM_OUTPUTS):\n+        for i in range(NUM_OUTPUTS):\n             parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n         parent_tx.vout[0].nValue -= 50000\n         assert(parent_tx.vout[0].nValue > 0)\n         parent_tx.rehash()\n \n         child_tx = CTransaction()\n-        for i in xrange(NUM_OUTPUTS):\n+        for i in range(NUM_OUTPUTS):\n             child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n         child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n-        for i in xrange(NUM_OUTPUTS):\n+        for i in range(NUM_OUTPUTS):\n             child_tx.wit.vtxinwit.append(CTxinWitness())\n             child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n         child_tx.rehash()\n@@ -518,14 +518,14 @@ def test_submit_block(self):\n \n         # Try using a custom nonce and then don't supply it.\n         # This shouldn't possibly work.\n-        add_witness_commitment(block, nonce=1L)\n+        add_witness_commitment(block, nonce=1)\n         block.vtx[0].wit = CTxWitness() # drop the nonce\n         block.solve()\n         self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n         assert(self.nodes[0].getbestblockhash() != block.hash)\n \n         # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n-        add_witness_commitment(block, nonce=0L)\n+        add_witness_commitment(block, nonce=0)\n         block.vtx[0].wit = CTxWitness()\n         block.solve()\n         self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n@@ -550,7 +550,7 @@ def test_submit_block(self):\n \n     # Consensus tests of extra witness data in a transaction.\n     def test_extra_witness_data(self):\n-        print \"\\tTesting extra witness data in tx\"\n+        print(\"\\tTesting extra witness data in tx\")\n \n         assert(len(self.utxo) > 0)\n         \n@@ -626,7 +626,7 @@ def test_extra_witness_data(self):\n \n     def test_max_witness_push_length(self):\n         ''' Should only allow up to 520 byte pushes in witness stack '''\n-        print \"\\tTesting maximum witness push size\"\n+        print(\"\\tTesting maximum witness push size\")\n         MAX_SCRIPT_ELEMENT_SIZE = 520\n         assert(len(self.utxo))\n \n@@ -666,7 +666,7 @@ def test_max_witness_push_length(self):\n     def test_max_witness_program_length(self):\n         # Can create witness outputs that are long, but can't be greater than\n         # 10k bytes to successfully spend\n-        print \"\\tTesting maximum witness program length\"\n+        print(\"\\tTesting maximum witness program length\")\n         assert(len(self.utxo))\n         MAX_PROGRAM_LENGTH = 10000\n \n@@ -715,7 +715,7 @@ def test_max_witness_program_length(self):\n \n     def test_witness_input_length(self):\n         ''' Ensure that vin length must match vtxinwit length '''\n-        print \"\\tTesting witness input length\"\n+        print(\"\\tTesting witness input length\")\n         assert(len(self.utxo))\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n@@ -726,7 +726,7 @@ def test_witness_input_length(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         nValue = self.utxo[0].nValue\n-        for i in xrange(10):\n+        for i in range(10):\n             tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n         tx.vout[0].nValue -= 1000\n         assert(tx.vout[0].nValue >= 0)\n@@ -757,12 +757,12 @@ def serialize_with_witness(self):\n                 return r\n \n         tx2 = BrokenCTransaction()\n-        for i in xrange(10):\n+        for i in range(10):\n             tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n         tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n \n         # First try using a too long vtxinwit\n-        for i in xrange(11):\n+        for i in range(11):\n             tx2.wit.vtxinwit.append(CTxinWitness())\n             tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n \n@@ -798,7 +798,7 @@ def serialize_with_witness(self):\n \n \n     def test_witness_tx_relay_before_segwit_activation(self):\n-        print \"\\tTesting relay of witness transactions\"\n+        print(\"\\tTesting relay of witness transactions\")\n         # Generate a transaction that doesn't require a witness, but send it\n         # with a witness.  Should be rejected for premature-witness, but should\n         # not be added to recently rejected list.\n@@ -822,7 +822,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # a witness transaction ought not result in a getdata.\n         try:\n             self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n-            print \"Error: duplicate tx getdata!\"\n+            print(\"Error: duplicate tx getdata!\")\n             assert(False)\n         except AssertionError as e:\n             pass\n@@ -858,7 +858,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n     # - accepts transactions with valid witnesses\n     # and that witness transactions are relayed to non-upgraded peers.\n     def test_tx_relay_after_segwit_activation(self):\n-        print \"\\tTesting relay of witness transactions\"\n+        print(\"\\tTesting relay of witness transactions\")\n         # Generate a transaction that doesn't require a witness, but send it\n         # with a witness.  Should be rejected because we can't use a witness\n         # when spending a non-witness output.\n@@ -921,7 +921,7 @@ def test_tx_relay_after_segwit_activation(self):\n     # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n     # This is true regardless of segwit activation.\n     def test_block_relay(self, segwit_activated):\n-        print \"\\tTesting block relay\"\n+        print(\"\\tTesting block relay\")\n \n         # test_node has set NODE_WITNESS, so all getdata requests should be for\n         # witness blocks.\n@@ -956,7 +956,7 @@ def test_block_relay(self, segwit_activated):\n             chain_height = self.nodes[0].getblockcount()\n             # Pick 10 random blocks on main chain, and verify that getdata's\n             # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n-            all_heights = range(chain_height+1)\n+            all_heights = list(range(chain_height+1))\n             random.shuffle(all_heights)\n             all_heights = all_heights[0:10]\n             for height in all_heights:\n@@ -989,21 +989,21 @@ def test_block_relay(self, segwit_activated):\n     # Verify that future segwit upgraded transactions are non-standard,\n     # but valid in blocks. Can run this before and after segwit activation.\n     def test_segwit_versions(self):\n-        print \"\\tTesting standardness/consensus for segwit versions (0-16)\"\n+        print(\"\\tTesting standardness/consensus for segwit versions (0-16)\")\n         assert(len(self.utxo))\n         NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n         if (len(self.utxo) < NUM_TESTS):\n             tx = CTransaction()\n             tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n             split_value = (self.utxo[0].nValue - 4000) // NUM_TESTS\n-            for i in xrange(NUM_TESTS):\n+            for i in range(NUM_TESTS):\n                 tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n             self.test_node.test_witness_block(block, accepted=True)\n             self.utxo.pop(0)\n-            for i in xrange(NUM_TESTS):\n+            for i in range(NUM_TESTS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n \n         sync_blocks(self.nodes)\n@@ -1013,7 +1013,7 @@ def test_segwit_versions(self):\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        for version in range(OP_1, OP_16+1) + [OP_0]:\n+        for version in list(range(OP_1, OP_16+1)) + [OP_0]:\n             count += 1\n             # First try to spend to a future version segwit scriptPubKey.\n             scriptPubKey = CScript([CScriptOp(version), witness_hash])\n@@ -1073,7 +1073,7 @@ def test_segwit_versions(self):\n \n \n     def test_premature_coinbase_witness_spend(self):\n-        print \"\\tTesting premature coinbase witness spend\"\n+        print(\"\\tTesting premature coinbase witness spend\")\n         block = self.build_next_block()\n         # Change the output of the block to be a witness output.\n         witness_program = CScript([OP_TRUE])\n@@ -1108,7 +1108,7 @@ def test_premature_coinbase_witness_spend(self):\n \n \n     def test_signature_version_1(self):\n-        print \"\\tTesting segwit signature hash version 1\"\n+        print(\"\\tTesting segwit signature hash version 1\")\n         key = CECKey()\n         key.set_secretbytes(b\"9\")\n         pubkey = CPubKey(key.get_pubkey())\n@@ -1135,7 +1135,7 @@ def test_signature_version_1(self):\n         # Add signature for a P2PK witness program.\n         def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n-            signature = key.sign(tx_hash) + chr(hashtype)\n+            signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n             txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n             txTo.rehash()\n \n@@ -1179,11 +1179,11 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n         split_value = prev_utxo.nValue // NUM_TESTS\n-        for i in xrange(NUM_TESTS):\n+        for i in range(NUM_TESTS):\n             tx.vout.append(CTxOut(split_value, scriptPubKey))\n         tx.wit.vtxinwit.append(CTxinWitness())\n         sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n-        for i in xrange(NUM_TESTS):\n+        for i in range(NUM_TESTS):\n             temp_utxos.append(UTXO(tx.sha256, i, split_value))\n \n         block = self.build_next_block()\n@@ -1192,7 +1192,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n-        for i in xrange(NUM_TESTS):\n+        for i in range(NUM_TESTS):\n             # Choose random number of inputs to use.\n             num_inputs = random.randint(1, 10)\n             # Create a slight bias for producing more utxos\n@@ -1201,14 +1201,14 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             assert(len(temp_utxos) > num_inputs)\n             tx = CTransaction()\n             total_value = 0\n-            for i in xrange(num_inputs):\n+            for i in range(num_inputs):\n                 tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), b\"\"))\n                 tx.wit.vtxinwit.append(CTxinWitness())\n                 total_value += temp_utxos[i].nValue\n             split_value = total_value // num_outputs\n-            for i in xrange(num_outputs):\n+            for i in range(num_outputs):\n                 tx.vout.append(CTxOut(split_value, scriptPubKey))\n-            for i in xrange(num_inputs):\n+            for i in range(num_inputs):\n                 # Now try to sign each input, using a random hashtype.\n                 anyonecanpay = 0\n                 if random.randint(0, 1):\n@@ -1218,7 +1218,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n                 if (hashtype == SIGHASH_SINGLE and i >= num_outputs):\n                     used_sighash_single_out_of_bounds = True\n             tx.rehash()\n-            for i in xrange(num_outputs):\n+            for i in range(num_outputs):\n                 temp_utxos.append(UTXO(tx.sha256, i, split_value))\n             temp_utxos = temp_utxos[num_inputs:]\n \n@@ -1288,13 +1288,13 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         self.update_witness_block_with_transactions(block, [tx])\n         self.test_node.test_witness_block(block, accepted=True)\n \n-        for i in xrange(len(tx.vout)):\n+        for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n \n \n     # Test P2SH wrapped witness programs.\n     def test_p2sh_witness(self, segwit_activated):\n-        print \"\\tTesting P2SH witness transactions\"\n+        print(\"\\tTesting P2SH witness transactions\")\n \n         assert(len(self.utxo))\n \n@@ -1367,7 +1367,7 @@ def test_p2sh_witness(self, segwit_activated):\n     # To enable this test, pass --oldbinary=<path-to-pre-segwit-bitcoind> to\n     # the test.\n     def test_upgrade_after_activation(self, node, node_id):\n-        print \"\\tTesting software upgrade after softfork activation\"\n+        print(\"\\tTesting software upgrade after softfork activation\")\n \n         assert(node_id != 0) # node0 is assumed to be a segwit-active bitcoind\n \n@@ -1395,7 +1395,7 @@ def test_upgrade_after_activation(self, node, node_id):\n \n     def test_witness_sigops(self):\n         '''Ensure sigop counting is correct inside witnesses.'''\n-        print \"\\tTesting sigops limit\"\n+        print(\"\\tTesting sigops limit\")\n \n         assert(len(self.utxo))\n \n@@ -1431,7 +1431,7 @@ def test_witness_sigops(self):\n         split_value = self.utxo[0].nValue // outputs\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n-        for i in xrange(outputs):\n+        for i in range(outputs):\n             tx.vout.append(CTxOut(split_value, scriptPubKey))\n         tx.vout[-2].scriptPubKey = scriptPubKey_toomany\n         tx.vout[-1].scriptPubKey = scriptPubKey_justright\n@@ -1445,7 +1445,7 @@ def test_witness_sigops(self):\n         # If we try to spend the first n-1 outputs from tx, that should be\n         # too many sigops.\n         total_value = 0\n-        for i in xrange(outputs-1):\n+        for i in range(outputs-1):\n             tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n             tx2.wit.vtxinwit.append(CTxinWitness())\n             tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program ]\n@@ -1521,7 +1521,7 @@ def run_test(self):\n         # Test logic begins here\n         self.test_node.wait_for_verack()\n \n-        print \"\\nStarting tests before segwit lock in:\"\n+        print(\"\\nStarting tests before segwit lock in:\")\n \n         self.test_witness_services() # Verifies NODE_WITNESS\n         self.test_non_witness_transaction() # non-witness tx's are accepted\n@@ -1531,7 +1531,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # At lockin, nothing should change.\n-        print \"\\nTesting behavior post lockin, pre-activation\"\n+        print(\"\\nTesting behavior post lockin, pre-activation\")\n         self.advance_to_segwit_lockin()\n \n         # Retest unnecessary witnesses\n@@ -1543,7 +1543,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # Now activate segwit\n-        print \"\\nTesting behavior after segwit activation\"\n+        print(\"\\nTesting behavior after segwit activation\")\n         self.advance_to_segwit_active()\n \n         sync_blocks(self.nodes)\n@@ -1567,7 +1567,7 @@ def run_test(self):\n         if self.test_upgrade:\n             self.test_upgrade_after_activation(self.nodes[2], 2)\n         else:\n-            print \"\\tSkipping upgrade-after-activation test (use --oldbinary to enable)\"\n+            print(\"\\tSkipping upgrade-after-activation test (use --oldbinary to enable)\")\n         self.test_witness_sigops()\n \n "
      },
      {
        "sha": "9f6cccbba36942c237fff50b323f1831e29c50dd",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -121,21 +121,21 @@ def run_test(self):\n         self.pubkey = []\n         p2sh_ids = [] # p2sh_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE embedded in p2sh\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n-        for i in xrange(3):\n+        for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n             multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n             self.nodes[i].addwitnessaddress(newaddress)\n             self.nodes[i].addwitnessaddress(multiaddress)\n             p2sh_ids.append([])\n             wit_ids.append([])\n-            for v in xrange(2):\n+            for v in range(2):\n                 p2sh_ids[i].append([])\n                 wit_ids[i].append([])\n \n-        for i in xrange(5):\n-            for n in xrange(3):\n-                for v in xrange(2):\n+        for i in range(5):\n+            for n in range(3):\n+                for v in range(2):\n                     wit_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], False, Decimal(\"49.999\")))\n                     p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], True, Decimal(\"49.999\")))\n \n@@ -150,7 +150,7 @@ def run_test(self):\n         self.nodes[0].generate(262) #block 423\n         sync_blocks(self.nodes)\n \n-        print \"Verify default node can't accept any witness format txs before fork\"\n+        print(\"Verify default node can't accept any witness format txs before fork\")\n         # unsigned, no scriptsig\n         self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], False)\n         self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], False)\n@@ -165,40 +165,40 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True)\n         self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True)\n \n-        print \"Verify witness txs are skipped for mining before the fork\"\n+        print(\"Verify witness txs are skipped for mining before the fork\")\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True) #block 424\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][0], True) #block 425\n         self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][0], True) #block 426\n         self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][0], True) #block 427\n \n         # TODO: An old node would see these txs without witnesses and be able to mine them\n \n-        print \"Verify unsigned bare witness txs in versionbits-setting blocks are valid before the fork\"\n+        print(\"Verify unsigned bare witness txs in versionbits-setting blocks are valid before the fork\")\n         self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][1], False) #block 428\n         self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][1], False) #block 429\n \n-        print \"Verify unsigned p2sh witness txs without a redeem script are invalid\"\n+        print(\"Verify unsigned p2sh witness txs without a redeem script are invalid\")\n         self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False)\n         self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False)\n \n-        print \"Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\"\n+        print(\"Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\")\n         self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False, addlength(witness_script(0, self.pubkey[2]))) #block 430\n         self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False, addlength(witness_script(1, self.pubkey[2]))) #block 431\n \n-        print \"Verify previous witness txs skipped for mining can now be mined\"\n+        print(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n         block = self.nodes[2].generate(1) #block 432 (first block with new rules; 432 = 144 * 3)\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n         assert_equal(len(self.nodes[2].getblock(block[0])[\"tx\"]), 5)\n \n-        print \"Verify witness txs without witness data are invalid after the fork\"\n+        print(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][2], False)\n         self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][2], False)\n         self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, addlength(witness_script(0, self.pubkey[2])))\n         self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, addlength(witness_script(1, self.pubkey[2])))\n \n-        print \"Verify default node can now use witness txs\"\n+        print(\"Verify default node can now use witness txs\")\n         self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True) #block 432\n         self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True) #block 433\n         self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True) #block 434"
      },
      {
        "sha": "b06a19d56c2025c68283cd1ef3e21698b2e7599d",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "patch": "@@ -27,7 +27,7 @@ def create_block(hashprev, coinbase, nTime=None):\n \n # According to BIP141, blocks with witness rules active must commit to the\n # hash of all in-block transactions including witness.\n-def add_witness_commitment(block, nonce=0L):\n+def add_witness_commitment(block, nonce=0):\n     # First calculate the merkle root of the block's\n     # transactions, with witnesses.\n     witness_nonce = nonce"
      },
      {
        "sha": "892b645a2a3f427221b2333dcf6ad63b3a6f5abf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "patch": "@@ -438,7 +438,7 @@ def __init__(self):\n         self.vtxinwit = []\n \n     def deserialize(self, f):\n-        for i in xrange(len(self.vtxinwit)):\n+        for i in range(len(self.vtxinwit)):\n             self.vtxinwit[i].deserialize(f)\n \n     def serialize(self):\n@@ -525,7 +525,7 @@ def serialize_with_witness(self):\n             if (len(self.wit.vtxinwit) != len(self.vin)):\n                 # vtxinwit must have the same length as vin\n                 self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n-                for i in xrange(len(self.wit.vtxinwit), len(self.vin)):\n+                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n                     self.wit.vtxinwit.append(CTxinWitness())\n             r += self.wit.serialize()\n         r += struct.pack(\"<I\", self.nLockTime)"
      },
      {
        "sha": "2907b0ad28c90fa16b3375ce1b916df1062fd026",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f50b96c82ede3f00c1ed8e524bbab54c288305d/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "patch": "@@ -906,9 +906,9 @@ def SignatureHash(script, txTo, inIdx, hashtype):\n # for version 0 witnesses.\n def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):\n \n-    hashPrevouts = 0L\n-    hashSequence = 0L\n-    hashOutputs = 0L\n+    hashPrevouts = 0\n+    hashSequence = 0\n+    hashOutputs = 0\n \n     if not (hashtype & SIGHASH_ANYONECANPAY):\n         serialize_prevouts = bytes()"
      }
    ]
  },
  {
    "sha": "75335ca10956037be222a2ecbc494167e8464c31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTMzNWNhMTA5NTYwMzdiZTIyMmEyZWNiYzQ5NDE2N2U4NDY0YzMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:54:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:54:59Z"
      },
      "message": "f 1b6c6f16: pass CChainParams rather than Consensus::Params to RewindBlockIndex",
      "tree": {
        "sha": "b76a28967ce304c9f6a51c7969167a9d3ccf3cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b76a28967ce304c9f6a51c7969167a9d3ccf3cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75335ca10956037be222a2ecbc494167e8464c31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75335ca10956037be222a2ecbc494167e8464c31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75335ca10956037be222a2ecbc494167e8464c31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75335ca10956037be222a2ecbc494167e8464c31/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f50b96c82ede3f00c1ed8e524bbab54c288305d"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fe7b18150b3e3c2a64e81dff783b91b8fd809b01",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75335ca10956037be222a2ecbc494167e8464c31/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75335ca10956037be222a2ecbc494167e8464c31/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=75335ca10956037be222a2ecbc494167e8464c31",
        "patch": "@@ -1284,7 +1284,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (!fReindex) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n-                    if (!RewindBlockIndex(chainparams.GetConsensus())) {\n+                    if (!RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n                         break;\n                     }"
      },
      {
        "sha": "8033dd17496a9d5e6f4b2db8be3fd0b8718eca76",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75335ca10956037be222a2ecbc494167e8464c31/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75335ca10956037be222a2ecbc494167e8464c31/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=75335ca10956037be222a2ecbc494167e8464c31",
        "patch": "@@ -4060,13 +4060,13 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n-bool RewindBlockIndex(const Consensus::Params& params)\n+bool RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n \n     int nHeight = 1;\n     while (nHeight <= chainActive.Height()) {\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n             break;\n         }\n         nHeight++;\n@@ -4076,7 +4076,7 @@ bool RewindBlockIndex(const Consensus::Params& params)\n     CValidationState state;\n     CBlockIndex* pindex = chainActive.Tip();\n     while (chainActive.Height() >= nHeight) {\n-        if (!DisconnectTip(state, params, true)) {\n+        if (!DisconnectTip(state, params.GetConsensus(), true)) {\n             return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n         }\n         // Occasionally flush state to disk.\n@@ -4089,7 +4089,7 @@ bool RewindBlockIndex(const Consensus::Params& params)\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n     for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n         CBlockIndex* pindexIter = it->second;\n-        if (IsWitnessEnabled(pindexIter->pprev, params) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n+        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n             // Reduce validity\n             pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n             // Remove have-data flags.\n@@ -4121,7 +4121,7 @@ bool RewindBlockIndex(const Consensus::Params& params)\n \n     PruneBlockIndexCandidates();\n \n-    CheckBlockIndex(params);\n+    CheckBlockIndex(params.GetConsensus());\n \n     if (!FlushStateToDisk(state, FLUSH_STATE_ALWAYS)) {\n         return false;"
      },
      {
        "sha": "a48999d8b5791a7a1e791d039c3fdf04043402c6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75335ca10956037be222a2ecbc494167e8464c31/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75335ca10956037be222a2ecbc494167e8464c31/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=75335ca10956037be222a2ecbc494167e8464c31",
        "patch": "@@ -475,7 +475,8 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n-bool RewindBlockIndex(const Consensus::Params& params);\n+/** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n+bool RewindBlockIndex(const CChainParams& params);\n \n /** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "306858f70f40377bbd24960ba563f1e2adda04ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDY4NThmNzBmNDAzNzdiYmQyNDk2MGJhNTYzZjFlMmFkZGEwNGNh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:23Z"
      },
      "message": "--- [SEGWIT] begin: fixups 5 ---",
      "tree": {
        "sha": "b76a28967ce304c9f6a51c7969167a9d3ccf3cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b76a28967ce304c9f6a51c7969167a9d3ccf3cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306858f70f40377bbd24960ba563f1e2adda04ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306858f70f40377bbd24960ba563f1e2adda04ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/306858f70f40377bbd24960ba563f1e2adda04ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306858f70f40377bbd24960ba563f1e2adda04ca/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75335ca10956037be222a2ecbc494167e8464c31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75335ca10956037be222a2ecbc494167e8464c31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75335ca10956037be222a2ecbc494167e8464c31"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "036fa47b7da096e2fa55dabf7b673491bc96b7b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzZmYTQ3YjdkYTA5NmUyZmE1NWRhYmY3YjY3MzQ5MWJjOTZiN2I2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-05-13T00:56:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:49Z"
      },
      "message": "Improve FindForkInGlobalIndex when locator contains chain tip",
      "tree": {
        "sha": "c91caea44754da79b31b7ee341bd1d71d1a916a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c91caea44754da79b31b7ee341bd1d71d1a916a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "306858f70f40377bbd24960ba563f1e2adda04ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306858f70f40377bbd24960ba563f1e2adda04ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/306858f70f40377bbd24960ba563f1e2adda04ca"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43b4eb6f03a2be6dec70668dfd1997f5488905da",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036fa47b7da096e2fa55dabf7b673491bc96b7b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036fa47b7da096e2fa55dabf7b673491bc96b7b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=036fa47b7da096e2fa55dabf7b673491bc96b7b6",
        "patch": "@@ -593,6 +593,9 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n             CBlockIndex* pindex = (*mi).second;\n             if (chain.Contains(pindex))\n                 return pindex;\n+            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n+                return chain.Tip();\n+            }\n         }\n     }\n     return chain.Genesis();"
      }
    ]
  },
  {
    "sha": "7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWIwZDc1YTc1Y2QxN2EzMGY2MGJkNDUxNDBmNzcxMGNlNGQxMTgx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-05-20T08:59:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:59:00Z"
      },
      "message": "VerifyDB: don't check blocks that have been pruned",
      "tree": {
        "sha": "f3d6d1b433d976d8a4efbba2849db83c99968b6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3d6d1b433d976d8a4efbba2849db83c99968b6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "036fa47b7da096e2fa55dabf7b673491bc96b7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/036fa47b7da096e2fa55dabf7b673491bc96b7b6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a799673ae88b99bf7f2b44217cd08d34326e4496",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb0d75a75cd17a30f60bd45140f7710ce4d1181/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb0d75a75cd17a30f60bd45140f7710ce4d1181/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
        "patch": "@@ -1292,8 +1292,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                    LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n-                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS));\n+                    LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                        MIN_BLOCKS_TO_KEEP);\n                 }\n \n                 {"
      },
      {
        "sha": "ec31cf0ba4df2432f5f5360f7ad76d8b09653de4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7eb0d75a75cd17a30f60bd45140f7710ce4d1181/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7eb0d75a75cd17a30f60bd45140f7710ce4d1181/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
        "patch": "@@ -4008,6 +4008,11 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100)))));\n         if (pindex->nHeight < chainActive.Height()-nCheckDepth)\n             break;\n+        if (fPruneMode && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // If pruning, only go back as far as we have data.\n+            LogPrintf(\"VerifyDB(): block verification stopping at height %d (pruning, no data)\\n\", pindex->nHeight);\n+            break;\n+        }\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))"
      }
    ]
  },
  {
    "sha": "8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWRiMDNhMjRkMWNlOWRiNDNjMmQxMzU0NGFlOWIwZjczODRkZTZk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-05-26T14:05:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:00:21Z"
      },
      "message": "Improve RewindBlockIndex when pruning\n\nPruning nodes that upgrade after segwit activation may not HAVE_DATA for all\nblocks back to the activation point.  Since pruning nodes won't be serving such\nblocks to peers anyway, don't try to rewind past the HAVE_DATA point, as that\nwould fail and force pruning nodes to redownload the blockchain.",
      "tree": {
        "sha": "012ae736ab1e344eabc7c3b92cd38834279b92f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/012ae736ab1e344eabc7c3b92cd38834279b92f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb0d75a75cd17a30f60bd45140f7710ce4d1181"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6d84e513d3e377507be67735d9e90b016db6981",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
        "patch": "@@ -4084,6 +4084,14 @@ bool RewindBlockIndex(const CChainParams& params)\n     CValidationState state;\n     CBlockIndex* pindex = chainActive.Tip();\n     while (chainActive.Height() >= nHeight) {\n+        if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n+            // If pruning, don't try rewinding past the HAVE_DATA point;\n+            // since older blocks can't be served anyway, there's\n+            // no need to walk further, and trying to DisconnectTip()\n+            // will fail (and require a needless reindex/redownload\n+            // of the blockchain).\n+            break;\n+        }\n         if (!DisconnectTip(state, params.GetConsensus(), true)) {\n             return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n         }\n@@ -4097,7 +4105,13 @@ bool RewindBlockIndex(const CChainParams& params)\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n     for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n         CBlockIndex* pindexIter = it->second;\n-        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n+\n+        // Note: If we encounter an insufficiently validated block that\n+        // is on chainActive, it must be because we are a pruning node, and\n+        // this block or some successor doesn't HAVE_DATA, so we were unable to\n+        // rewind all the way.  Blocks remaining on chainActive at this point\n+        // must not have their validity reduced.\n+        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter)) {\n             // Reduce validity\n             pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n             // Remove have-data flags."
      }
    ]
  },
  {
    "sha": "a1d1d0ce40d313461526f1c03362daf85b58c6a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQxZDBjZTQwZDMxMzQ2MTUyNmYxYzAzMzYyZGFmODViNThjNmE5",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-05-25T20:01:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:04:29Z"
      },
      "message": "Make sure upgraded nodes don't ask for non-wit blocks",
      "tree": {
        "sha": "0f85be38d455493d440e36b64a992bc980b8944d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f85be38d455493d440e36b64a992bc980b8944d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c2ff9730d98eefbfa74b05efa5abb9e8ca59fddd",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d1d0ce40d313461526f1c03362daf85b58c6a9/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d1d0ce40d313461526f1c03362daf85b58c6a9/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=a1d1d0ce40d313461526f1c03362daf85b58c6a9",
        "patch": "@@ -41,6 +41,7 @@ def __init__(self):\n         self.ping_counter = 1\n         self.last_pong = msg_pong(0)\n         self.sleep_time = 0.05\n+        self.getdataset = set()\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -57,6 +58,8 @@ def on_block(self, conn, message):\n         self.last_block.calc_sha256()\n \n     def on_getdata(self, conn, message):\n+        for inv in message.inv:\n+            self.getdataset.add(inv.hash)\n         self.last_getdata = message\n \n     def on_pong(self, conn, message):\n@@ -115,6 +118,16 @@ def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n         self.wait_for_getdata()\n         return\n \n+    def announce_block(self, block, use_header):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+\n     def request_block(self, blockhash, inv_type, timeout=60):\n         with mininode_lock:\n             self.last_block = None\n@@ -920,14 +933,14 @@ def test_tx_relay_after_segwit_activation(self):\n \n     # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n     # This is true regardless of segwit activation.\n+    # Also test that we don't ask for blocks from unupgraded peers\n     def test_block_relay(self, segwit_activated):\n         print(\"\\tTesting block relay\")\n \n         # test_node has set NODE_WITNESS, so all getdata requests should be for\n         # witness blocks.\n         # Test announcing a block via inv results in a getdata, and that\n         # announcing a version 4 or random VB block with a header results in a getdata\n-\n         block1 = self.build_next_block()\n         block1.solve()\n \n@@ -985,6 +998,19 @@ def test_block_relay(self, segwit_activated):\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(True), block.serialize(True))\n \n+            # Upgraded node should not ask for blocks from unupgraded\n+            block4 = self.build_next_block(nVersion=4)\n+            block4.solve()\n+            self.old_node.getdataset = set()\n+            # Blocks can be requested via direct-fetch (immediately upon processing the announcement)\n+            # or via parallel download (with an indeterminate delay from processing the announcement)\n+            # so to test that a block is NOT requested, we could guess a time period to sleep for,\n+            # and then check. We can avoid the sleep() by taking advantage of transaction getdata's\n+            # being processed after block getdata's, and announce a transaction as well,\n+            # and then check to see if that particular getdata has been received.\n+            self.old_node.announce_block(block4, use_header=False)\n+            self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n+            assert(block4.sha256 not in self.old_node.getdataset)\n \n     # Verify that future segwit upgraded transactions are non-standard,\n     # but valid in blocks. Can run this before and after segwit activation."
      }
    ]
  },
  {
    "sha": "019860e83508f6c10d8496d8c8412f5f1a7a2145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTk4NjBlODM1MDhmNmMxMGQ4NDk2ZDhjODQxMmY1ZjFhN2EyMTQ1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-05-22T11:35:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:05:47Z"
      },
      "message": "script_tests: witness tests can specify tx amount\n\nAdd tests that witness signatures cover value",
      "tree": {
        "sha": "f262e1cc2b65902c62d32813bdc7b117203901dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f262e1cc2b65902c62d32813bdc7b117203901dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/019860e83508f6c10d8496d8c8412f5f1a7a2145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d1d0ce40d313461526f1c03362daf85b58c6a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d1d0ce40d313461526f1c03362daf85b58c6a9"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 140,
      "deletions": 51
    },
    "files": [
      {
        "sha": "89b7a557981a936165af486f84803326241f8c28",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 95,
        "deletions": 28,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019860e83508f6c10d8496d8c8412f5f1a7a2145/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019860e83508f6c10d8496d8c8412f5f1a7a2145/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=019860e83508f6c10d8496d8c8412f5f1a7a2145",
        "patch": "@@ -1,5 +1,5 @@\n [\n-[\"Format is: [[wit...]?, scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n+[\"Format is: [[wit..., amount]?, scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n [\"It is evaluated as if there was a crediting coinbase transaction with two 0\"],\n [\"pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\"],\n [\"followed by a spending transaction which spends this output as only input (and\"],\n@@ -1252,10 +1252,10 @@\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n \n [\"Some basic segwit checks\"],\n-[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n-[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n-[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n-[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n+[[\"00\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n+[[\"51\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n+[[\"00\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n+[[\"51\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n \n [\"Automatically generated test cases\"],\n [\n@@ -1827,8 +1827,9 @@\n ],\n [\n     [\n-        \"3044022039105b995a5f448639a997a5c90fda06f50b49df30c3bdb6663217bf79323db002206fecd54269dec569fcc517178880eb58bb40f381a282bb75766ff3637d5f4b4301\",\n-        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+        \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n     ],\n     \"\",\n     \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n@@ -1838,8 +1839,9 @@\n ],\n [\n     [\n-        \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n-        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+        \"304402201e7216e5ccb3b61d46946ec6cc7e8c4e0117d13ac2fd4b152197e4805191c74202203e9903e33e84d9ee1dd13fb057afb7ccfb47006c23f6a067185efbc9dd780fc501\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n     ],\n     \"\",\n     \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n@@ -1849,8 +1851,9 @@\n ],\n [\n     [\n-        \"3044022061fc1a144e221ec77a58a4281936eb6a1b715b9349e446e74d106ec26c8633ba022008064a0d112e8ad514440fcdfaa1006e48305d6844f50a65873fb4b2cf9c035f01\",\n-        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+        \"3044022066e02c19a513049d49349cf5311a1b012b7c4fae023795a18ab1d91c23496c22022025e216342c8e07ce8ef51e8daee88f84306a9de66236cab230bb63067ded1ad301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n     ],\n     \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n     \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n@@ -1860,8 +1863,9 @@\n ],\n [\n     [\n-        \"3044022014e69768e174972f21d32d93002ca6fc26133cb9e819ceef7efb970798bde7b4022078b86849dbbec692ec9355aa2a763fce7ea11bf72fdd8ea5ea8083de6f8a77fe01\",\n-        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+        \"304402200929d11561cd958460371200f82e9cae64c727a495715a31828e27a7ad57b36d0220361732ced04a6f97351ecca21a56d0b8cd4932c1da1f8f569a2b68e5e48aed7801\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n     ],\n     \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n     \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n@@ -1872,7 +1876,8 @@\n [\n     [\n         \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n-        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n@@ -1883,7 +1888,8 @@\n [\n     [\n         \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n-        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n@@ -1894,7 +1900,8 @@\n [\n     [\n         \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n-        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\",\n+        0.00000000\n     ],\n     \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n     \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n@@ -1905,7 +1912,8 @@\n [\n     [\n         \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n-        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\",\n+        0.00000000\n     ],\n     \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n     \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n@@ -1916,7 +1924,8 @@\n [\n     [\n         \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n-        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n@@ -1927,7 +1936,8 @@\n [\n     [\n         \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n-        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n@@ -1938,7 +1948,8 @@\n [\n     [\n         \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n-        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\",\n+        0.00000000\n     ],\n     \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n     \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n@@ -1949,18 +1960,68 @@\n [\n     [\n         \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n-        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\",\n+        0.00000000\n     ],\n     \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n     \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\"\n ],\n+[\n+    [\n+        \"3044022066faa86e74e8b30e82691b985b373de4f9e26dc144ec399c4f066aa59308e7c202204712b86f28c32503faa051dbeabff2c238ece861abc36c5e0b40b1139ca222f001\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000000\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WSH with wrong value\"\n+],\n+[\n+    [\n+        \"304402203b3389b87448d7dfdb5e82fb854fcf92d7925f9938ea5444e36abef02c3d6a9602202410bc3265049abb07fd2e252c65ab7034d95c9d5acccabe9fadbdc63a52712601\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000000\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WPKH with wrong value\"\n+],\n+[\n+    [\n+        \"3044022000a30c4cfc10e4387be528613575434826ad3c15587475e0df8ce3b1746aa210022008149265e4f8e9dafe1f3ea50d90cb425e9e40ea7ebdd383069a7cfa2b77004701\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000000\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WSH) with wrong value\"\n+],\n+[\n+    [\n+        \"304402204fc3a2cd61a47913f2a5f9107d0ad4a504c7b31ee2d6b3b2f38c2b10ee031e940220055d58b7c3c281aaa381d8f486ac0f3e361939acfd568046cb6a311cdfa974cf01\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000000\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WPKH) with wrong value\"\n+],\n [\n     [\n         \"304402205ae57ae0534c05ca9981c8a6cdf353b505eaacb7375f96681a2d1a4ba6f02f84022056248e68643b7d8ce7c7d128c9f1f348bcab8be15d094ad5cadd24251a28df8001\",\n-        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000000\n     ],\n     \"\",\n     \"1 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n@@ -1971,7 +2032,8 @@\n [\n     [\n         \"3044022064100ca0e2a33332136775a86cd83d0230e58b9aebb889c5ac952abff79a46ef02205f1bf900e022039ad3091bdaf27ac2aef3eae9ed9f190d821d3e508405b9513101\",\n-        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x1f 0xb34b78da162751647974d5cb7410aa428ad339dbf7d1e16e833f68a0cbf1c3\",\n@@ -1989,7 +2051,8 @@\n [\n     [\n         \"3044022039105b995a5f448639a997a5c90fda06f50b49df30c3bdb6663217bf79323db002206fecd54269dec569fcc517178880eb58bb40f381a282bb75766ff3637d5f4b4301\",\n-        \"400479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+        \"400479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n@@ -2001,7 +2064,8 @@\n     [\n         \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n         \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n-        \"\"\n+        \"\",\n+        0.00000000\n     ],\n     \"\",\n     \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n@@ -2012,7 +2076,8 @@\n [\n     [\n         \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n-        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000000\n     ],\n     \"11\",\n     \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n@@ -2023,7 +2088,8 @@\n [\n     [\n         \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n-        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\",\n+        0.00000000\n     ],\n     \"11 0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n     \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n@@ -2033,7 +2099,8 @@\n ],\n [\n     [\n-        \"\"\n+        \"\",\n+        0.00000000\n     ],\n     \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\","
      },
      {
        "sha": "9825ea0eb3ef84b8607bd908cc90d2b996d651e9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 23,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019860e83508f6c10d8496d8c8412f5f1a7a2145/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019860e83508f6c10d8496d8c8412f5f1a7a2145/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=019860e83508f6c10d8496d8c8412f5f1a7a2145",
        "patch": "@@ -13,6 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"rpc/server.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\"\n@@ -118,7 +119,7 @@ ScriptError_t ParseScriptError(const std::string &name)\n \n BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n-CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)\n {\n     CMutableTransaction txCredit;\n     txCredit.nVersion = 1;\n@@ -129,7 +130,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n     txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txCredit.vout[0].scriptPubKey = scriptPubKey;\n-    txCredit.vout[0].nValue = 0;\n+    txCredit.vout[0].nValue = nValue;\n \n     return txCredit;\n }\n@@ -148,20 +149,20 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n     txSpend.vin[0].scriptSig = scriptSig;\n     txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txSpend.vout[0].scriptPubKey = CScript();\n-    txSpend.vout[0].nValue = 0;\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n \n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError, CAmount nValue = 0)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n     if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n         flags |= SCRIPT_VERIFY_P2SH;\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey, nValue);\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n@@ -276,6 +277,7 @@ class TestBuilder\n     std::string comment;\n     int flags;\n     int scriptError;\n+    CAmount nValue;\n \n     void DoPush()\n     {\n@@ -293,7 +295,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE, int witnessversion = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n+    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE, int witnessversion = 0, CAmount nValue_ = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK), nValue(nValue_)\n     {\n         CScript scriptPubKey = script;\n         if (wm == WITNESS_PKH) {\n@@ -311,7 +313,7 @@ class TestBuilder\n             redeemscript = scriptPubKey;\n             scriptPubKey = CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n         }\n-        creditTx = BuildCreditingTransaction(scriptPubKey);\n+        creditTx = BuildCreditingTransaction(scriptPubKey, nValue);\n         spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n     }\n \n@@ -346,9 +348,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_BASE)\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_BASE, CAmount amount = 0)\n     {\n-        uint256 hash = SignatureHash(script, spendTx, 0, nHashType, 0, sigversion);\n+        uint256 hash = SignatureHash(script, spendTx, 0, nHashType, amount, sigversion);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -364,9 +366,11 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushWitSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_WITNESS_V0)\n+    TestBuilder& PushWitSig(const CKey& key, CAmount amount = -1, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_WITNESS_V0)\n     {\n-        return PushSig(key, nHashType, lenR, lenS, sigversion).AsWit();\n+        if (amount == -1)\n+            amount = nValue;\n+        return PushSig(key, nHashType, lenR, lenS, sigversion, amount).AsWit();\n     }\n \n     TestBuilder& Push(const CPubKey& pubkey)\n@@ -411,7 +415,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError, nValue);\n         *this = copy;\n         return *this;\n     }\n@@ -433,6 +437,7 @@ class TestBuilder\n             for (unsigned i = 0; i < scriptWitness.stack.size(); i++) {\n                 wit.push_back(HexStr(scriptWitness.stack[i]));\n             }\n+            wit.push_back(ValueFromAmount(nValue));\n             array.push_back(wit);\n         }\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n@@ -731,17 +736,17 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                ).PushSig(keys.key0).PushRedeem());\n \n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n-                               ).PushWitSig(keys.key0).PushWitRedeem());\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem());\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n-                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n-                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit());\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit());\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n-                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n-                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n-                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem());\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem());\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                 \"Basic P2WSH with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n                                ).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n@@ -766,6 +771,18 @@ BOOST_AUTO_TEST_CASE(script_build)\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n                                 \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n                                ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH with wrong value\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 0).PushWitSig(keys.key0, 1).PushWitRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH with wrong value\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH,\n+                                0, 0).PushWitSig(keys.key0, 1).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with wrong value\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 0).PushWitSig(keys.key0, 1).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH) with wrong value\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH,\n+                                0, 0).PushWitSig(keys.key0, 1).Push(keys.pubkey0).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n                                 \"P2WPKH with future witness version\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH |\n@@ -838,20 +855,25 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n {\n     // Read tests from test/data/script_tests.json\n     // Format is an array of arrays\n-    // Inner arrays are [ [\"wit\"...]?, \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n+    // Inner arrays are [ [\"wit\"..., nValue]?, \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n+    // If a witness is given, then the last value in the array should be the\n+    // amount (nValue) to use in the crediting tx\n     UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n         CScriptWitness witness;\n+        CAmount nValue = 0;\n         unsigned int pos = 0;\n         if (test.size() > 0 && test[pos].isArray()) {\n-            for (unsigned int i = 0; i < test[pos].size(); i++) {\n+            unsigned int i=0;\n+            for (i = 0; i < test[pos].size()-1; i++) {\n                 witness.stack.push_back(ParseHex(test[pos][i].get_str()));\n             }\n+            nValue = AmountFromValue(test[pos][i]);\n             pos++;\n         }\n         if (test.size() < 4 + pos) // Allow size > 3; extra stuff ignored (useful for comments)\n@@ -868,7 +890,7 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n         unsigned int scriptflags = ParseScriptFlags(test[pos++].get_str());\n         int scriptError = ParseScriptError(test[pos++].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, witness, scriptflags, strTest, scriptError);\n+        DoTest(scriptPubKey, scriptSig, witness, scriptflags, strTest, scriptError, nValue);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODE1YzE2MDRlOWQ2YzJlZjUyODFhN2E4ZTY1MzljNGM5OGJhNDAx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-05-22T11:02:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:06:30Z"
      },
      "message": "[Qt] Add support for NODE_WITNESS in formatServicesStr",
      "tree": {
        "sha": "91a3194bb8548c84d5150fa416e4398a9fb3e2af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a3194bb8548c84d5150fa416e4398a9fb3e2af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "019860e83508f6c10d8496d8c8412f5f1a7a2145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/019860e83508f6c10d8496d8c8412f5f1a7a2145"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4327de9b0c86d5ebb8a99f6b304690020d983aba",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
        "patch": "@@ -909,6 +909,9 @@ QString formatServicesStr(quint64 mask)\n             case NODE_BLOOM:\n                 strList.append(\"BLOOM\");\n                 break;\n+            case NODE_WITNESS:\n+                strList.append(\"WITNESS\");\n+                break;\n             default:\n                 strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }"
      }
    ]
  },
  {
    "sha": "f16067fa80405caf84e4d0069b951e03e09d2659",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTYwNjdmYTgwNDA1Y2FmODRlNGQwMDY5Yjk1MWUwM2UwOWQyNjU5",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "me@thomaskerin.io",
        "date": "2016-05-21T01:59:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:07:26Z"
      },
      "message": "bitcoinconsensus.h: Accept amount as int64_t",
      "tree": {
        "sha": "654afe0fb40d9680b3a77c5b8def549d5fba89cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654afe0fb40d9680b3a77c5b8def549d5fba89cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f16067fa80405caf84e4d0069b951e03e09d2659",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16067fa80405caf84e4d0069b951e03e09d2659",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f16067fa80405caf84e4d0069b951e03e09d2659",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16067fa80405caf84e4d0069b951e03e09d2659/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "90baffbbcc486eacfc45589a4799608bfa5b3058",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f16067fa80405caf84e4d0069b951e03e09d2659/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f16067fa80405caf84e4d0069b951e03e09d2659/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f16067fa80405caf84e4d0069b951e03e09d2659",
        "patch": "@@ -91,7 +91,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n     }\n }\n \n-int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, int64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {"
      },
      {
        "sha": "6f868d0d6d6ab2a609da5c0db9c781454140267b",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f16067fa80405caf84e4d0069b951e03e09d2659/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f16067fa80405caf84e4d0069b951e03e09d2659/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=f16067fa80405caf84e4d0069b951e03e09d2659",
        "patch": "@@ -62,7 +62,7 @@ EXPORT_SYMBOL int bitcoinconsensus_verify_script(const unsigned char *scriptPubK\n                                                  const unsigned char *txTo        , unsigned int txToLen,\n                                                  unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n \n-EXPORT_SYMBOL int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+EXPORT_SYMBOL int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, int64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n "
      }
    ]
  },
  {
    "sha": "059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTlkNGQxNzU3NzhlZDViNWU1ZThkNWI5NmUwM2FlMDc1MWE2NWM5",
    "commit": {
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2016-05-28T17:22:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:08:26Z"
      },
      "message": "Add GetTransactionSigOpCost unit tests",
      "tree": {
        "sha": "0b6d5355c259fca37c292dcc44b07e75b61f5bff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b6d5355c259fca37c292dcc44b07e75b61f5bff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9/comments",
    "author": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasnick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f16067fa80405caf84e4d0069b951e03e09d2659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16067fa80405caf84e4d0069b951e03e09d2659",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f16067fa80405caf84e4d0069b951e03e09d2659"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 184,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3087f20387baae6813afd832cbfd79244d156633",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
        "patch": "@@ -350,6 +350,14 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx);\n  */\n unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+/**\n+ * Compute total signature operation cost of a transaction.\n+ * @param[in] tx     Transaction for which we are computing the cost\n+ * @param[in] inputs Map of previous transactions that have outputs we're spending\n+ * @param[out] flags Script verification flags\n+ * @return Total signature operation cost of tx\n+ */\n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n \n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)"
      },
      {
        "sha": "91120b21d8a580f198a98ed980e91336694fe140",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 176,
        "deletions": 0,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"main.h\"\n #include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n@@ -64,4 +65,179 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig2), 3U);\n }\n \n+/**\n+ * Verifies script execution of the zeroth scriptPubKey of tx output and\n+ * zeroth scriptSig and witness of tx input.\n+ */\n+ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)\n+{\n+    ScriptError error;\n+    CTransaction inputi(input);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+\n+    return error;\n+}\n+\n+/**\n+ * Builds a creationTx from scriptPubKey and a spendingTx from scriptSig\n+ * and witness such that spendingTx spends output zero of creationTx.\n+ * Also inserts creationTx's output into the coins view.\n+ */\n+void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CTxinWitness& witness)\n+{\n+    creationTx.nVersion = 1;\n+    creationTx.vin.resize(1);\n+    creationTx.vin[0].prevout.SetNull();\n+    creationTx.vin[0].scriptSig = CScript();\n+    creationTx.wit.vtxinwit.resize(1);\n+    creationTx.vout.resize(1);\n+    creationTx.vout[0].nValue = 1;\n+    creationTx.vout[0].scriptPubKey = scriptPubKey;\n+\n+    spendingTx.nVersion = 1;\n+    spendingTx.vin.resize(1);\n+    spendingTx.vin[0].prevout.hash = creationTx.GetHash();\n+    spendingTx.vin[0].prevout.n = 0;\n+    spendingTx.vin[0].scriptSig = scriptSig;\n+    spendingTx.wit.vtxinwit.resize(1);\n+    spendingTx.wit.vtxinwit[0] = witness;\n+    spendingTx.vout.resize(1);\n+    spendingTx.vout[0].nValue = 1;\n+    spendingTx.vout[0].scriptPubKey = CScript();\n+\n+    coins.ModifyCoins(creationTx.GetHash())->FromTx(creationTx, 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n+{\n+    // Transaction creates outputs\n+    CMutableTransaction creationTx;\n+    // Transaction that spends outputs and whose\n+    // sig op cost is going to be tested\n+    CMutableTransaction spendingTx;\n+\n+    // Create utxo set\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    // Create key\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+    // Default flags\n+    int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n+\n+    // Multisig script (legacy counting)\n+    {\n+        CScript scriptPubKey = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n+        // Do not use a valid signature to avoid using wallet operations.\n+        CScript scriptSig = CScript() << OP_0 << OP_0;\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxinWitness());\n+        // Legacy counting only includes signature operations in scriptSigs and scriptPubKeys\n+        // of a transaction and does not take the actual executed sig operations into account.\n+        // spendingTx in itself does not contain a signature operation.\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 0);\n+        // creationTx contains two signature operations in its scriptPubKey, but legacy counting\n+        // is not accurate.\n+        assert(GetTransactionSigOpCost(CTransaction(creationTx), coins, flags) == MAX_PUBKEYS_PER_MULTISIG * WITNESS_SCALE_FACTOR);\n+        // Sanity check: script verification fails because of an invalid signature.\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+    }\n+\n+    // Multisig nested in P2SH\n+    {\n+        CScript redeemScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n+        CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        CScript scriptSig = CScript() << OP_0 << OP_0 << ToByteVector(redeemScript);\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxinWitness());\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2 * WITNESS_SCALE_FACTOR);\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+    }\n+\n+    // P2WPKH witness program\n+    {\n+        CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+        CScript scriptPubKey = GetScriptForWitness(p2pk);\n+        CScript scriptSig = CScript();\n+        CTxinWitness witness;\n+        CScriptWitness scriptWitness;\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        witness.scriptWitness = scriptWitness;\n+\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n+        // No signature operations if we don't verify the witness.\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n+\n+        // The sig op cost for witness version != 0 is zero.\n+        assert(scriptPubKey[0] == 0x00);\n+        scriptPubKey[0] = 0x51;\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 0);\n+        scriptPubKey[0] = 0x00;\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+\n+        // The witness of a coinbase transaction is not taken into account.\n+        spendingTx.vin[0].prevout.SetNull();\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 0);\n+    }\n+\n+    // P2WPKH nested in P2SH\n+    {\n+        CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+        CScript scriptSig = GetScriptForWitness(p2pk);\n+        CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n+        scriptSig = CScript() << ToByteVector(scriptSig);\n+        CTxinWitness witness;\n+        CScriptWitness scriptWitness;\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        witness.scriptWitness = scriptWitness;\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n+    }\n+\n+    // P2WSH witness program\n+    {\n+        CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n+        CScript scriptPubKey = GetScriptForWitness(witnessScript);\n+        CScript scriptSig = CScript();\n+        CTxinWitness witness;\n+        CScriptWitness scriptWitness;\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        witness.scriptWitness = scriptWitness;\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+    }\n+\n+    // P2WSH nested in P2SH\n+    {\n+        CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n+        CScript redeemScript = GetScriptForWitness(witnessScript);\n+        CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        CScript scriptSig = CScript() << ToByteVector(redeemScript);\n+        CTxinWitness witness;\n+        CScriptWitness scriptWitness;\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(0));\n+        scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        witness.scriptWitness = scriptWitness;\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWMzOGEyMDg4YjY4M2M4YWI3YjY1NDJlYjgwM2JjY2IwNDg4ZDdl",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-18T21:40:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:09:37Z"
      },
      "message": "segwit: fix gui wallet send transaction size calculation assertion failed",
      "tree": {
        "sha": "f1a86e2093d6bc5313e7d16341196738f62a2afb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1a86e2093d6bc5313e7d16341196738f62a2afb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 19,
      "deletions": 2
    },
    "files": [
      {
        "sha": "837f8ba6c18f52f0e3482437b1b6e8de2b899268",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c38a2088b683c8ab7b6542eb803bccb0488d7e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c38a2088b683c8ab7b6542eb803bccb0488d7e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
        "patch": "@@ -485,6 +485,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     unsigned int nQuantity      = 0;\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n+    bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n     std::vector<COutput>   vOutputs;\n@@ -513,7 +514,14 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         // Bytes\n         CTxDestination address;\n-        if(ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+        if (out.tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n+        {\n+            nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n+            fWitness = true;\n+        }\n+        else if(ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n         {\n             CPubKey pubkey;\n             CKeyID *keyid = boost::get<CKeyID>(&address);\n@@ -534,6 +542,14 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     {\n         // Bytes\n         nBytes = nBytesInputs + ((CoinControlDialog::payAmounts.size() > 0 ? CoinControlDialog::payAmounts.size() + 1 : 2) * 34) + 10; // always assume +1 output for change here\n+        if (fWitness)\n+        {\n+            // there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.\n+            // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n+            // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n+            nBytes += 2; // account for the serialized marker and flag bytes\n+            nBytes += nQuantity; // account for the witness byte that holds the number of stack items for each input.\n+        }\n \n         // Priority\n         double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);"
      },
      {
        "sha": "ffadf89cc85360958f33448ba09a9d071830ba48",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c38a2088b683c8ab7b6542eb803bccb0488d7e/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c38a2088b683c8ab7b6542eb803bccb0488d7e/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"walletmodeltransaction.h\"\n \n+#include \"policy/policy.h\"\n #include \"wallet/wallet.h\"\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :\n@@ -33,7 +34,7 @@ CWalletTx *WalletModelTransaction::getTransaction()\n \n unsigned int WalletModelTransaction::getTransactionSize()\n {\n-    return (!walletTransaction ? 0 : (::GetSerializeSize(*(CTransaction*)walletTransaction, SER_NETWORK, PROTOCOL_VERSION)));\n+    return (!walletTransaction ? 0 : ::GetVirtualTransactionSize(*walletTransaction));\n }\n \n CAmount WalletModelTransaction::getTransactionFee()"
      }
    ]
  },
  {
    "sha": "0acd1dc449671963bad6e5274e3045d1476e22e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWNkMWRjNDQ5NjcxOTYzYmFkNmU1Mjc0ZTMwNDVkMTQ3NmUyMmUw",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-16T00:30:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:10:57Z"
      },
      "message": "segwit: txout dust threshold calculation update",
      "tree": {
        "sha": "3cd8427a32ffea7edc3092ab303d80bd72cac676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd8427a32ffea7edc3092ab303d80bd72cac676"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0acd1dc449671963bad6e5274e3045d1476e22e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0acd1dc449671963bad6e5274e3045d1476e22e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0acd1dc449671963bad6e5274e3045d1476e22e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0acd1dc449671963bad6e5274e3045d1476e22e0/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c38a2088b683c8ab7b6542eb803bccb0488d7e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f2bf0fa176a1d3cb9ee737aa7df5e9e4d514e76e",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acd1dc449671963bad6e5274e3045d1476e22e0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acd1dc449671963bad6e5274e3045d1476e22e0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=0acd1dc449671963bad6e5274e3045d1476e22e0",
        "patch": "@@ -169,15 +169,30 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical spendable txout is 34 bytes big, and will\n+        // A typical spendable non-segwit txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n         // so dust is a spendable txout less than\n-        // 546*minRelayTxFee/1000 (in satoshis)\n+        // 546*minRelayTxFee/1000 (in satoshis).\n+        // A typical spendable segwit txout is 31 bytes big, and will\n+        // need a CTxIn of at least 67 bytes to spend:\n+        // so dust is a spendable txout less than\n+        // 294*minRelayTxFee/1000 (in satoshis).\n         if (scriptPubKey.IsUnspendable())\n             return 0;\n \n-        size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return 3*minRelayTxFee.GetFee(nSize);\n+        size_t nSize = GetSerializeSize(SER_DISK, 0);\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            // sum the sizes of the parts of a transaction input\n+            // with 75% segwit discount applied to the script size.\n+            nSize += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n+        } else {\n+            nSize += (32 + 4 + 1 + 107 + 4); // the 148 mentioned above\n+        }\n+\n+        return 3 * minRelayTxFee.GetFee(nSize);\n     }\n \n     bool IsDust(const CFeeRate &minRelayTxFee) const"
      }
    ]
  },
  {
    "sha": "869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjlmMjZlMDI2MWFlZGZkZWMwZDdkZjJkZjU5ZGZhYWYwYWVlOTNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:14:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:14:38Z"
      },
      "message": "--- [SEGWIT] begin: fixups 6 ---",
      "tree": {
        "sha": "3cd8427a32ffea7edc3092ab303d80bd72cac676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd8427a32ffea7edc3092ab303d80bd72cac676"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0acd1dc449671963bad6e5274e3045d1476e22e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0acd1dc449671963bad6e5274e3045d1476e22e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0acd1dc449671963bad6e5274e3045d1476e22e0"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGQ0ZDFkMjNhM2NiYWE4YTMwNTFkMGRhMTBmZjdhNTM2NTE3ZWQw",
    "commit": {
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-05-29T15:39:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:26:28Z"
      },
      "message": "Extend the max witness program length to 40 bytes\n\nAmended by Pieter Wuille (max limit 40 instead of 33).",
      "tree": {
        "sha": "09baa4927c5109236943ef6bd5332564195712aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09baa4927c5109236943ef6bd5332564195712aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/869f26e0261aedfdec0d7df2df59dfaaf0aee93f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da551c23ee678570447fbd79dc7c617652b22a4e",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
        "patch": "@@ -219,10 +219,10 @@ bool CScript::IsPayToWitnessScriptHash() const\n }\n \n // A witness program is any valid CScript that consists of a 1-byte push opcode\n-// followed by a data push between 2 and 32 bytes.\n+// followed by a data push between 2 and 40 bytes.\n bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const\n {\n-    if (this->size() < 4 || this->size() > 34) {\n+    if (this->size() < 4 || this->size() > 42) {\n         return false;\n     }\n     if ((*this)[0] != OP_0 && ((*this)[0] < OP_1 || (*this)[0] > OP_16)) {"
      },
      {
        "sha": "a681c630629333587bd368c1ce49f413ff295d20",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
        "patch": "@@ -440,8 +440,8 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x01 0x01\", 1000]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n \n-[\"33 bytes push should not be considered a witness scriptPubKey\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n+[\"41 bytes push should not be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x29 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff0000000000000000\", 1000]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n \n [\"The witness version must use OP_1 to OP_16 only\"],"
      }
    ]
  },
  {
    "sha": "4840f6dc830e163e339248d3e2eaf2e29be847a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODQwZjZkYzgzMGUxNjNlMzM5MjQ4ZDNlMmVhZjJlMjliZTg0N2E4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T15:08:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T10:00:01Z"
      },
      "message": "Prevent witness addresses from being constructed before fork",
      "tree": {
        "sha": "7c2198bc4f0d0db1e2ee183f5cf4622b9aea09fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c2198bc4f0d0db1e2ee183f5cf4622b9aea09fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4840f6dc830e163e339248d3e2eaf2e29be847a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "06c9551cebae5bf4aaac785a49e967052ce267d7",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4840f6dc830e163e339248d3e2eaf2e29be847a8/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4840f6dc830e163e339248d3e2eaf2e29be847a8/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=4840f6dc830e163e339248d3e2eaf2e29be847a8",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-promiscuousmempoolflags'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "bde625aefca773d9f692c681f23f52958b940eb3",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4840f6dc830e163e339248d3e2eaf2e29be847a8/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4840f6dc830e163e339248d3e2eaf2e29be847a8/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=4840f6dc830e163e339248d3e2eaf2e29be847a8",
        "patch": "@@ -76,9 +76,9 @@ def setup_chain(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-logtimemicros\", \"-debug\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-walletprematurewitness\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 1)\n         connect_nodes(self.nodes[0], 2)"
      },
      {
        "sha": "2d5c57771d557e73ef486551e2fb85f86c2f41df",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4840f6dc830e163e339248d3e2eaf2e29be847a8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4840f6dc830e163e339248d3e2eaf2e29be847a8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4840f6dc830e163e339248d3e2eaf2e29be847a8",
        "patch": "@@ -1154,6 +1154,13 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    {\n+        LOCK(cs_main);\n+        if (!IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus()) && !GetBoolArg(\"-walletprematurewitness\", false)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Segregated witness not enabled on network\");\n+        }\n+    }\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");"
      }
    ]
  },
  {
    "sha": "3dbf852286023f876c9f3a7c557a209109cdee11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGJmODUyMjg2MDIzZjg3NmM5ZjNhN2M1NTdhMjA5MTA5Y2RlZTEx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T16:24:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T10:00:05Z"
      },
      "message": "Remove positive SERIALIZE_TRANSACTION_WITNESS flag",
      "tree": {
        "sha": "c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dbf852286023f876c9f3a7c557a209109cdee11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbf852286023f876c9f3a7c557a209109cdee11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbf852286023f876c9f3a7c557a209109cdee11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbf852286023f876c9f3a7c557a209109cdee11/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4840f6dc830e163e339248d3e2eaf2e29be847a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4840f6dc830e163e339248d3e2eaf2e29be847a8"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 81,
      "deletions": 85
    },
    "files": [
      {
        "sha": "7cfda6dd6d894cefa5e5cedc853338b0cefdcbbc",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -110,7 +110,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitne\n         }\n     }\n \n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n     }\n@@ -127,7 +127,7 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n         return false;\n \n     std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssBlock >> block;\n     }"
      },
      {
        "sha": "6f9e2266a3966edebde2f519f543239469eece09",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -118,7 +118,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n \n string EncodeHexTx(const CTransaction& tx)\n {\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n     return HexStr(ssTx.begin(), ssTx.end());\n }"
      },
      {
        "sha": "4eca93252af6d8f40f0c8d617dd6b076d28a6001",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -622,7 +622,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 10,000 orphans, each of which is at most 5,000 bytes big is\n     // at most 500 megabytes of orphans:\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n     if (sz > 5000)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n@@ -1487,7 +1487,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n     if (fTxIndex) {\n         CDiskTxPos postx;\n         if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n             if (file.IsNull())\n                 return error(\"%s: OpenBlockFile failed\", __func__);\n             CBlockHeader header;\n@@ -1546,7 +1546,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n-    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n@@ -1569,7 +1569,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n@@ -1959,7 +1959,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     fileout << blockundo;\n \n     // calculate & write checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     fileout << hasher.GetHash();\n@@ -1985,7 +1985,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     }\n \n     // Verify checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n@@ -2431,7 +2431,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n@@ -3608,7 +3608,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n@@ -4215,7 +4215,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         try {\n             CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n-            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n@@ -4246,7 +4246,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -4671,7 +4671,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n-                        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_WITNESS, NetMsgType::BLOCK, block);\n+                        pfrom->PushMessage(NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n                     {\n                         LOCK(pfrom->cs_filter);\n@@ -4714,14 +4714,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     LOCK(cs_mapRelay);\n                     map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, (*mi).second);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, (*mi).second);\n                         pushed = true;\n                     }\n                 }\n                 if (!pushed && (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n-                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, tx);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }\n@@ -5226,7 +5226,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n-        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> tx;\n+        vRecv >> tx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n@@ -5463,7 +5463,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n-        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> block;\n+        vRecv >> block;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n         LogPrint(\"net\", \"received block %s peer=%d\\n\", inv.hash.ToString(), pfrom->id);"
      },
      {
        "sha": "4e8fadfbd2de449f5a814080ee77b8177cb5dae2",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -38,5 +38,5 @@ int64_t GetBlockCost(const CBlock& block)\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n     // cost = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+    return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "e692038e2bf874c4c2f19ffa9fe8aaf49a482912",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -74,7 +74,7 @@ void CTransaction::UpdateHash() const\n \n uint256 CTransaction::GetWitnessHash() const\n {\n-    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_WITNESS);\n+    return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n@@ -151,5 +151,5 @@ std::string CTransaction::ToString() const\n \n int64_t GetTransactionCost(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+    return ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "e87ad90f0d498047743d7229ad33906daa391b55",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -11,8 +11,7 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n-static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x20000000;\n+static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n static const int WITNESS_SCALE_FACTOR = 4;\n \n@@ -293,8 +292,6 @@ template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n-    /* Verify that exactly one of SERIALIZE_TRANSACTION_WITNESS and SERIALIZE_TRANSACTION_NO_WITESS is set */\n-    assert(!(nVersion & SERIALIZE_TRANSACTION_WITNESS) ^ !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS));\n     if (ser_action.ForRead()) {\n         const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n         const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();"
      },
      {
        "sha": "ce230d6aedbceb5a9d2a5b5e742d5d65cc3dccb2",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -332,7 +332,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;\n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n         ssTx << *t;\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }"
      },
      {
        "sha": "2dff8d7daddfcf2f2481b86ea11454ad8e88c687",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -228,7 +228,7 @@ static bool rest_block(HTTPRequest* req,\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n     }\n \n-    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n     ssBlock << block;\n \n     switch (rf) {\n@@ -367,7 +367,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n \n     switch (rf) {"
      },
      {
        "sha": "afbc55e7dcfaa6f7f33b37ab3a04ef8d6f39a70e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -100,7 +100,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n@@ -430,7 +430,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     if (!fVerbose)\n     {\n-        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n         ssBlock << block;\n         std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n         return strHex;"
      },
      {
        "sha": "8ed260ed7a372b6bfcc0a14f7e92ab089c53dbb6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -63,7 +63,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n-    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n     entry.push_back(Pair(\"vsize\", (int)::GetVirtualTransactionSize(tx)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n@@ -627,7 +627,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n         try {"
      },
      {
        "sha": "62fd9031f853a85bb89f34ffb096460cacaeff3e",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -74,12 +74,12 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n         // Regardless of the verification result, the tx did not error."
      },
      {
        "sha": "9557000ddcc1119dfa5e7da3113e990f14241435",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -40,8 +40,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n     vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n     vector<char> expected(vch.size());\n@@ -72,8 +72,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n     vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n     vector<char> expected(vch.size());\n@@ -99,8 +99,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     uint160 hash = pubkey.GetID();\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n     vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n     vector<char> expected(vch.size());\n@@ -115,13 +115,13 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n {\n     // Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)\n     CTransaction tx;\n-    CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION);\n     stream >> tx;\n \n     // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n-    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);\n     CTransaction spendingTx;\n     spendStream >> spendingTx;\n \n@@ -187,7 +187,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n     // With 9 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -233,7 +233,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n     // With 4 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -288,7 +288,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n     // With 4 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n@@ -340,7 +340,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     // Random real block (000000000000dab0130bbcc991d3d7ae6b81aa6f50a798888dfe62337458dc45)\n     // With one tx\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n-    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);\n     merkleStream << merkleBlock;\n \n     vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101\");\n@@ -379,7 +379,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -425,7 +425,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_P2PUBKEY_ONLY);\n@@ -448,7 +448,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n     // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n     // With 7 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);"
      },
      {
        "sha": "fee5e57692f44dbabf6b5c680a8e55a8441718d5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -168,7 +168,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);"
      },
      {
        "sha": "44d7b7cc66e45cbc180466cbbf1cfe237c7c3ac4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           sigHashHex = test[4].get_str();\n \n           uint256 sh;\n-          CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+          CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n           stream >> tx;\n \n           CValidationState state;"
      },
      {
        "sha": "fd4f174b40c808c6ac6328a1e0db7c2c4fea55b5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n             CTransaction tx;\n             stream >> tx;\n \n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION  | SERIALIZE_TRANSACTION_WITNESS);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION );\n             CTransaction tx;\n             stream >> tx;\n \n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     // Random real transaction (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n-    CDataStream stream(vch, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n@@ -352,8 +352,8 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     outputm.vout[0].nValue = 1;\n     outputm.vout[0].scriptPubKey = outscript;\n     CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n-    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) << outputm;\n-    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) >> output;\n+    ssout << outputm;\n+    ssout >> output;\n     assert(output.vin.size() == 1);\n     assert(output.vin[0] == outputm.vin[0]);\n     assert(output.vout.size() == 1);\n@@ -372,8 +372,8 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     bool ret = SignSignature(keystore, output, inputm, 0, SIGHASH_ALL);\n     assert(ret == success);\n     CDataStream ssin(SER_NETWORK, PROTOCOL_VERSION);\n-    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) << inputm;\n-    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) >> input;\n+    ssin << inputm;\n+    ssin >> input;\n     assert(input.vin.size() == 1);\n     assert(input.vin[0] == inputm.vin[0]);\n     assert(input.vout.size() == 1);"
      },
      {
        "sha": "c906785e9e2ebf7bff0bb129491b40687da7df70",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -240,7 +240,7 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn, int nSerVersionIn) : pdb(NULL), activeTxn(NULL), nSerVersion(nSerVersionIn)\n+CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n@@ -353,7 +353,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     return (rc == 0);\n }\n \n-bool CDB::Rewrite(const string& strFile, int nSerVersion, const char* pszSkip)\n+bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n {\n     while (true) {\n         {\n@@ -385,8 +385,8 @@ bool CDB::Rewrite(const string& strFile, int nSerVersion, const char* pszSkip)\n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n                         while (fSuccess) {\n-                            CDataStream ssKey(SER_DISK, nSerVersion);\n-                            CDataStream ssValue(SER_DISK, nSerVersion);\n+                            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+                            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n                             int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n                             if (ret == DB_NOTFOUND) {\n                                 pcursor->close();"
      },
      {
        "sha": "01b8c71a04bbbeb4bd195df8267b37a22222e141",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -99,9 +99,8 @@ class CDB\n     DbTxn* activeTxn;\n     bool fReadOnly;\n     bool fFlushOnClose;\n-    int nSerVersion;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true, int nSerVersion = CLIENT_VERSION);\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n public:\n@@ -120,7 +119,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, nSerVersion);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -135,7 +134,7 @@ class CDB\n \n         // Unserialize value\n         try {\n-            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, nSerVersion);\n+            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -156,13 +155,13 @@ class CDB\n             assert(!\"Write called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, nSerVersion);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Value\n-        CDataStream ssValue(SER_DISK, nSerVersion);\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(10000);\n         ssValue << value;\n         Dbt datValue(&ssValue[0], ssValue.size());\n@@ -185,7 +184,7 @@ class CDB\n             assert(!\"Erase called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, nSerVersion);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -205,7 +204,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, nSerVersion);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -307,7 +306,7 @@ class CDB\n         return Write(std::string(\"version\"), nVersion);\n     }\n \n-    bool static Rewrite(const std::string& strFile, int nSerVersion, const char* pszSkip = NULL);\n+    bool static Rewrite(const std::string& strFile, const char* pszSkip = NULL);\n };\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "bb40cf724536a464fec3a0121f9b97372e5e3de1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -266,7 +266,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     uint256 hashTx = tx.GetHash();\n     CWalletTx wtx(pwalletMain,tx);\n \n-    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n "
      },
      {
        "sha": "515e884d00581faa6a5f0c736084695814a93397",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -602,7 +602,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n         // bits of the unencrypted private key in slack space in the database file.\n-        CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CDB::Rewrite(strWalletFile);\n \n     }\n     NotifyStatusChanged(this);\n@@ -2382,7 +2382,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2408,7 +2408,7 @@ DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOu\n     DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n     if (nZapSelectTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2434,7 +2434,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS, \"\\x04pool\"))\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();"
      },
      {
        "sha": "f2b5408e92b5d7f9d4c3e75f626a035e92b3b48e",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -640,8 +640,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, nSerVersion);\n-            CDataStream ssValue(SER_DISK, nSerVersion);\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n@@ -746,8 +746,8 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, nSerVersion);\n-            CDataStream ssValue(SER_DISK, nSerVersion);\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n@@ -998,7 +998,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n         if (fOnlyKeys)\n         {\n             CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n             string strType, strErr;\n             bool fReadOK;\n             {"
      },
      {
        "sha": "0be0c1d94f665be65d2397aef4d59592c992ab29",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -78,7 +78,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n     {\n     }\n "
      },
      {
        "sha": "f5839620ff227f682818baac028ee7bf92d52560",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbf852286023f876c9f3a7c557a209109cdee11/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbf852286023f876c9f3a7c557a209109cdee11/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=3dbf852286023f876c9f3a7c557a209109cdee11",
        "patch": "@@ -145,7 +145,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     LogPrint(\"zmq\", \"zmq: Publish rawblock %s\\n\", pindex->GetBlockHash().GetHex());\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     {\n         LOCK(cs_main);\n         CBlock block;\n@@ -166,7 +166,7 @@ bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &tr\n {\n     uint256 hash = transaction.GetHash();\n     LogPrint(\"zmq\", \"zmq: Publish rawtx %s\\n\", hash.GetHex());\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << transaction;\n     int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);\n     return rc == 0;"
      }
    ]
  },
  {
    "sha": "f98de5fe5df778823523a2c2d0e9d3610fb13703",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOThkZTVmZTVkZjc3ODgyMzUyM2EyYzJkMGU5ZDM2MTBmYjEzNzAz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:22Z"
      },
      "message": "--- [SEGWIT] begin: fixups 7 ---",
      "tree": {
        "sha": "c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f98de5fe5df778823523a2c2d0e9d3610fb13703",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dbf852286023f876c9f3a7c557a209109cdee11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbf852286023f876c9f3a7c557a209109cdee11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbf852286023f876c9f3a7c557a209109cdee11"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "c06c40b1524850fc9116b97c014a8ab236b85ca9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDZjNDBiMTUyNDg1MGZjOTExNmI5N2MwMTRhOGFiMjM2Yjg1Y2E5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-11T16:14:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:34Z"
      },
      "message": "Actually count the witness data in memusage of CTransaction",
      "tree": {
        "sha": "4c060da4d18591aa95448190977ffc9b2b4e1771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c060da4d18591aa95448190977ffc9b2b4e1771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c06c40b1524850fc9116b97c014a8ab236b85ca9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f98de5fe5df778823523a2c2d0e9d3610fb13703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f98de5fe5df778823523a2c2d0e9d3610fb13703"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd86f805fe457f7cb1f41cc84ff5376dcc6cad26",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c06c40b1524850fc9116b97c014a8ab236b85ca9/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c06c40b1524850fc9116b97c014a8ab236b85ca9/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=c06c40b1524850fc9116b97c014a8ab236b85ca9",
        "patch": "@@ -46,7 +46,7 @@ static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }"
      }
    ]
  },
  {
    "sha": "d8b5db9449ca5fd195a75574ec282891d0b189aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGI1ZGI5NDQ5Y2E1ZmQxOTVhNzU1NzRlYzI4Mjg5MWQwYjE4OWFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-11T16:26:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:40Z"
      },
      "message": "Correctly count maximum size in mining",
      "tree": {
        "sha": "dc7db9fbeaf0bff787071c341848a4449113fdf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc7db9fbeaf0bff787071c341848a4449113fdf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b5db9449ca5fd195a75574ec282891d0b189aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c06c40b1524850fc9116b97c014a8ab236b85ca9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c06c40b1524850fc9116b97c014a8ab236b85ca9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2bfa075ee584a28a2016e6d81c6622744625cc91",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b5db9449ca5fd195a75574ec282891d0b189aa/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b5db9449ca5fd195a75574ec282891d0b189aa/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d8b5db9449ca5fd195a75574ec282891d0b189aa",
        "patch": "@@ -216,7 +216,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            unsigned int nTxSize = iter->GetTxSize();\n+            unsigned int nTxSize = ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n             int64_t nTxCost = GetTransactionCost(tx);\n             if (fPriorityBlock &&\n                 (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {"
      }
    ]
  },
  {
    "sha": "57d4bd232fa43578bc167e441f779262ada645f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2Q0YmQyMzJmYTQzNTc4YmMxNjdlNDQxZjc3OTI2MmFkYTY0NWY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T16:49:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:48Z"
      },
      "message": "Rework -maxblocksize and -maxblockcost",
      "tree": {
        "sha": "5a9b18f83dc16b46de95e7fe963be5c763b1e6eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a9b18f83dc16b46de95e7fe963be5c763b1e6eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d4bd232fa43578bc167e441f779262ada645f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d4bd232fa43578bc167e441f779262ada645f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57d4bd232fa43578bc167e441f779262ada645f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d4bd232fa43578bc167e441f779262ada645f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8b5db9449ca5fd195a75574ec282891d0b189aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b5db9449ca5fd195a75574ec282891d0b189aa"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 24,
      "deletions": 7
    },
    "files": [
      {
        "sha": "54fb08f413e469b900406137fb9d23ab95c8caa8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 7,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d4bd232fa43578bc167e441f779262ada645f8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d4bd232fa43578bc167e441f779262ada645f8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=57d4bd232fa43578bc167e441f779262ada645f8",
        "patch": "@@ -92,14 +92,28 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n-    // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-    // Limit to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n-\n-    unsigned int nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n+    // Block resource limits\n+    // If neither -blockmaxsize or -blockmaxcost is given, limit to DEFAULT_BLOCK_MAX_*\n+    // If only one is given, only restrict the specified resource.\n+    // If both are given, restrict both.\n+    unsigned int nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n+    unsigned int nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n+    bool fCostSet = false;\n+    if (mapArgs.count(\"-blockmaxcost\")) {\n+        nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n+        nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n+        fCostSet = true;\n+    }\n+    if (mapArgs.count(\"-blockmaxsize\")) {\n+        nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+        if (!fCostSet) {\n+            nBlockMaxCost = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n+        }\n+    }\n     // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n     nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n+    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n@@ -111,6 +125,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n+    // Whether we need to account for byte usage (in addition to cost usage)\n+    bool fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000) || (nBlockPrioritySize > 0) || (nBlockMinSize > 0);\n+\n     // Collect memory pool transactions into the block\n     CTxMemPool::setEntries inBlock;\n     CTxMemPool::setEntries waitSet;\n@@ -216,7 +233,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            unsigned int nTxSize = ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n+            unsigned int nTxSize = fNeedSizeAccounting ? ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) : 0;\n             int64_t nTxCost = GetTransactionCost(tx);\n             if (fPriorityBlock &&\n                 (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {"
      }
    ]
  },
  {
    "sha": "0bfbf60b47164764263748952c47be8a7cdcb940",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmZiZjYwYjQ3MTY0NzY0MjYzNzQ4OTUyYzQ3YmU4YTdjZGNiOTQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T16:54:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:44:12Z"
      },
      "message": "Cache transaction cost in mempool",
      "tree": {
        "sha": "ea5e59ed6839bc25813d3afac4899c71caeb5485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea5e59ed6839bc25813d3afac4899c71caeb5485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bfbf60b47164764263748952c47be8a7cdcb940",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbf60b47164764263748952c47be8a7cdcb940",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbf60b47164764263748952c47be8a7cdcb940",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbf60b47164764263748952c47be8a7cdcb940/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57d4bd232fa43578bc167e441f779262ada645f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d4bd232fa43578bc167e441f779262ada645f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57d4bd232fa43578bc167e441f779262ada645f8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 20,
      "deletions": 8
    },
    "files": [
      {
        "sha": "87eb1b3e4510bf4f1f0ac8ebb5fd143d8ec3fec7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -234,7 +234,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n \n             unsigned int nTxSize = fNeedSizeAccounting ? ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) : 0;\n-            int64_t nTxCost = GetTransactionCost(tx);\n+            int64_t nTxCost = iter->GetTxCost();\n             if (fPriorityBlock &&\n                 (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n                 fPriorityBlock = false;"
      },
      {
        "sha": "f2148bfe1057de09c3b3bc8c27b6dc6628eebe85",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -151,7 +151,12 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+int64_t GetVirtualTransactionSize(int64_t nCost)\n+{\n+    return (nCost + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+}\n+\n int64_t GetVirtualTransactionSize(const CTransaction& tx)\n {\n-    return (GetTransactionCost(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return GetVirtualTransactionSize(GetTransactionCost(tx));\n }"
      },
      {
        "sha": "fefb562ff9318b77887aa5423e809161b3d1dcc3",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -68,6 +68,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n /** Compute the virtual transaction size (cost reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(int64_t nCost);\n int64_t GetVirtualTransactionSize(const CTransaction& tx);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "23abd0623df8877e88fec7487f616d086f40cd33",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -28,20 +28,20 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxSize = GetVirtualTransactionSize(tx);\n-    nModSize = tx.CalculateModifiedSize(nTxSize);\n+    nTxCost = GetTransactionCost(_tx);\n+    nModSize = _tx.CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(tx);\n \n     nCountWithDescendants = 1;\n-    nSizeWithDescendants = nTxSize;\n+    nSizeWithDescendants = GetTxSize();\n     nModFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n \n     feeDelta = 0;\n \n     nCountWithAncestors = 1;\n-    nSizeWithAncestors = nTxSize;\n+    nSizeWithAncestors = GetTxSize();\n     nModFeesWithAncestors = nFee;\n     nSigOpCostWithAncestors = sigOpCost;\n }\n@@ -73,6 +73,11 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n     lockPoints = lp;\n }\n \n+size_t CTxMemPoolEntry::GetTxSize() const\n+{\n+    return GetVirtualTransactionSize(nTxCost);\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants."
      },
      {
        "sha": "7ce9c747e96804f4db768d9404247b6783f28f68",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -75,7 +75,7 @@ class CTxMemPoolEntry\n private:\n     CTransaction tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n-    size_t nTxSize;            //!< ... and avoid recomputing tx size\n+    size_t nTxCost;            //!< ... and avoid recomputing tx cost (also used for GetTxSize())\n     size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n     int64_t nTime;             //!< Local time when entering the mempool\n@@ -117,7 +117,8 @@ class CTxMemPoolEntry\n      */\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n-    size_t GetTxSize() const { return nTxSize; }\n+    size_t GetTxSize() const;\n+    size_t GetTxCost() const { return nTxCost; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }"
      }
    ]
  },
  {
    "sha": "496d8c0d51dd05a40ad3014068cdfec1f5be1710",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTZkOGMwZDUxZGQwNWE0MGFkMzAxNDA2OGNkZmVjMWY1YmUxNzEw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:09:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:54Z"
      },
      "message": "Delete segnet",
      "tree": {
        "sha": "4f76d29d79d0c736c80efe6f55b869729cf45700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f76d29d79d0c736c80efe6f55b869729cf45700"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bfbf60b47164764263748952c47be8a7cdcb940",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbf60b47164764263748952c47be8a7cdcb940",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbf60b47164764263748952c47be8a7cdcb940"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 2,
      "deletions": 100
    },
    "files": [
      {
        "sha": "a3d035218789b8f74871a5c7885d4aa7a55c0b79",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -129,9 +129,6 @@ def main():\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')\n-    with open(os.path.join(indir,'nodes_seg.txt'),'r') as f:\n-        process_nodes(g, f, 'pnSeed6_seg', 28901)\n-    g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')"
      },
      {
        "sha": "0b3b4f6295cb35e4ca52723787176ad185a919b4",
        "filename": "contrib/seeds/nodes_seg.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbf60b47164764263748952c47be8a7cdcb940/contrib/seeds/nodes_seg.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbf60b47164764263748952c47be8a7cdcb940/contrib/seeds/nodes_seg.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_seg.txt?ref=0bfbf60b47164764263748952c47be8a7cdcb940",
        "patch": "@@ -1,3 +0,0 @@\n-# List of fixed seed nodes for segnet\n-\n-37.34.48.17"
      },
      {
        "sha": "445616b313045dd6f8126786837374b6e17a0fa8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 64,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -9,7 +9,6 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#include \"arith_uint256.h\"\n \n #include <assert.h>\n \n@@ -238,67 +237,6 @@ class CTestNetParams : public CChainParams {\n };\n static CTestNetParams testNetParams;\n \n-/**\n- * Segnet\n- */\n-class CSegNetParams : public CChainParams {\n-public:\n-    CSegNetParams() {\n-        strNetworkID = \"segnet4\";\n-        consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 7;\n-        consensus.nMajorityRejectBlockOutdated = 9;\n-        consensus.nMajorityWindow = 10;\n-        consensus.BIP34Height = -1;\n-        consensus.BIP34Hash = uint256();\n-        consensus.powLimit = uint256S(\"000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // 512x lower min difficulty than mainnet\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n-        consensus.fPowAllowMinDifficultyBlocks = true;\n-        consensus.fPowNoRetargeting = false;\n-        pchMessageStart[0] = 0xdc;\n-        pchMessageStart[1] = 0xab;\n-        pchMessageStart[2] = 0xa1;\n-        pchMessageStart[3] = 0xc4;\n-        nDefaultPort = 28901;\n-        nPruneAfterHeight = 1000;\n-        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n-        consensus.nMinerConfirmationWindow = 144; // Faster than normal for segnet (144 instead of 2016)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n-\n-        genesis = CreateGenesisBlock(1452831101, 0, UintToArith256(consensus.powLimit).GetCompact(), 1, 50 * COIN);\n-        consensus.hashGenesisBlock = genesis.GetHash();\n-\n-        vFixedSeeds.clear();\n-        vSeeds.clear();\n-\n-        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,30);\n-        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,50);\n-        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,158);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x05)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x05)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n-\n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_seg, pnSeed6_seg + ARRAYLEN(pnSeed6_seg));\n-\n-        fMiningRequiresPeers = true;\n-        fDefaultConsistencyChecks = false;\n-        fRequireStandard = false;\n-        fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = true;\n-\n-        // checkpointData is empty\n-    }\n-};\n-static CSegNetParams segNetParams;\n-\n /**\n  * Regression test\n  */\n@@ -379,8 +317,6 @@ CChainParams& Params(const std::string& chain)\n             return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-    else if (chain == CBaseChainParams::SEGNET)\n-            return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n     else"
      },
      {
        "sha": "cb71a8b550c7582fd87052d2c1e0576f36f9d3d1",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 23,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -13,7 +13,6 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n-const std::string CBaseChainParams::SEGNET = \"segnet\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -22,7 +21,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n-        strUsage += HelpMessageOpt(\"-segnet\", \"Enter segregated witness test mode. \");\n     }\n }\n \n@@ -53,20 +51,6 @@ class CBaseTestNetParams : public CBaseChainParams\n };\n static CBaseTestNetParams testNetParams;\n \n-/**\n- * Segnet\n- */\n-class CBaseSegNetParams : public CBaseChainParams\n-{\n-public:\n-    CBaseSegNetParams()\n-    {\n-        nRPCPort = 28902;\n-        strDataDir = \"segnet4\";\n-    }\n-};\n-static CBaseSegNetParams segNetParams;\n-\n /*\n  * Regression test\n  */\n@@ -95,8 +79,6 @@ CBaseChainParams& BaseParams(const std::string& chain)\n         return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n         return testNetParams;\n-    else if (chain == CBaseChainParams::SEGNET)\n-        return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n         return regTestParams;\n     else\n@@ -112,16 +94,13 @@ std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n-    bool fSegNet = GetBoolArg(\"-segnet\", false);\n \n-    if ((int)fRegTest + (int)fTestNet + (int)fSegNet > 1)\n-        throw std::runtime_error(\"Invalid combination of -regtest, -testnet, -segnet.\");\n+    if (fTestNet && fRegTest)\n+        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    if (fSegNet)\n-        return CBaseChainParams::SEGNET;\n     return CBaseChainParams::MAIN;\n }\n "
      },
      {
        "sha": "59493afb9b65e9b461afb825c16f09b2cd4e25b4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n-    static const std::string SEGNET;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      },
      {
        "sha": "1406e86805d67a94fecc313c48c3c12ef95fac77",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -947,10 +947,6 @@ static SeedSpec6 pnSeed6_main[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0xb3,0xd1,0xf8,0xbe,0xa7,0x6b,0x46,0xbe,0xe8,0x84}, 8333}\n };\n \n-static SeedSpec6 pnSeed6_seg[] = {\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x22,0x30,0x11}, 28901}\n-};\n-\n static SeedSpec6 pnSeed6_test[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x99,0xcb,0x26,0x31,0xba,0x48,0x51,0x31,0x39,0x0d}, 18333},\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x44,0xf4,0xf4,0xf0,0xbf,0xf7,0x7e,0x6d,0xc4,0xe8}, 18333},"
      },
      {
        "sha": "4b2c10dd48e43a4735a5bb9ebef7f6af1492631f",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -52,6 +52,5 @@ static const int MAX_URI_LENGTH = 255;\n #define QAPP_ORG_DOMAIN \"bitcoin.org\"\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n-#define QAPP_APP_NAME_SEGNET \"Bitcoin-Qt-segnet\"\n \n #endif // BITCOIN_QT_GUICONSTANTS_H"
      },
      {
        "sha": "5f31f49372724483ee1cb9f72e22488b3b5dda5f",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496d8c0d51dd05a40ad3014068cdfec1f5be1710/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "patch": "@@ -17,7 +17,6 @@ static const struct {\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n-    {\"segnet4\", QAPP_APP_NAME_SEGNET, 30, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[segnet4]\")},\n     {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);"
      }
    ]
  },
  {
    "sha": "7799a7c2d4156808de009342bdc7cc79bb7a3c83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzk5YTdjMmQ0MTU2ODA4ZGUwMDkzNDJiZGM3Y2M3OWJiN2EzYzgz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:12:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:58Z"
      },
      "message": "Do not send witnesses in response to bip37 blocks",
      "tree": {
        "sha": "9a9b03459c57a0149cf64619c41b8bd50a29ae64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9b03459c57a0149cf64619c41b8bd50a29ae64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/496d8c0d51dd05a40ad3014068cdfec1f5be1710"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87e5362d2e36c77fe4fcdf7165a3d07e57ec7f1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7799a7c2d4156808de009342bdc7cc79bb7a3c83/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7799a7c2d4156808de009342bdc7cc79bb7a3c83/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7799a7c2d4156808de009342bdc7cc79bb7a3c83",
        "patch": "@@ -4687,7 +4687,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                pfrom->PushMessage(NetMsgType::TX, block.vtx[pair.first]);\n+                                pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, block.vtx[pair.first]);\n                         }\n                         // else\n                             // no response"
      }
    ]
  },
  {
    "sha": "4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzE5YzE4ZWNiMTM5ZTFjYjU2YjNkYzA5ZjY5ZGZiNWIyMTQzNGJj",
    "commit": {
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-06T05:08:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:59Z"
      },
      "message": "33 to 40 bytes push should now be considered a witness scriptPubKey",
      "tree": {
        "sha": "345af2a2873d4f120ed6c0714639d21f28dc5446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345af2a2873d4f120ed6c0714639d21f28dc5446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7799a7c2d4156808de009342bdc7cc79bb7a3c83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7799a7c2d4156808de009342bdc7cc79bb7a3c83"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "05502a83f73b1ca8fa5145d772d795eaa76a9acb",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
        "patch": "@@ -310,5 +310,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x34b6c399093e06cf9f0f7f660a1abcfe78fcf7b576f43993208edd9518a0ae9b\", 1000]],\n \"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0001045102010100000000\", \"P2SH,WITNESS\"],\n \n+[\"33 bytes push should be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjEzYmJiZDNjNzVhYjllY2E3YTFhOTRiNjhlMjU5MjQwZjkyZWRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:09:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:09:59Z"
      },
      "message": "--- [SEGWIT] begin: fixups 8 ---",
      "tree": {
        "sha": "345af2a2873d4f120ed6c0714639d21f28dc5446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345af2a2873d4f120ed6c0714639d21f28dc5446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWJmZjA5ZDFkOGMzMmEzODU3MzA5ZGI0MmI4NjE2YTYyYjFiNmVk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-06T19:58:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:31:43Z"
      },
      "message": "Tests: add getblocktemplate/segwit test\n\nEnsure that we set the versionbit for segwit before lockin\niff the client has indicated segwit-readiness.",
      "tree": {
        "sha": "1b55469fec71cef029227e880ae85a5aac3e4f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b55469fec71cef029227e880ae85a5aac3e4f50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7613bbbd3c75ab9eca7a1a94b68e259240f92edc"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 28,
      "deletions": 4
    },
    "files": [
      {
        "sha": "447606c59c7161b9becafad5134b66ce07a05525",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9bff09d1d8c32a3857309db42b8616a62b1b6ed/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9bff09d1d8c32a3857309db42b8616a62b1b6ed/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
        "patch": "@@ -281,10 +281,8 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n \n-    # Mine enough blocks to lock in segwit, but don't activate.\n-    # TODO: we could verify that lockin only happens at the right threshold of\n-    # signalling blocks, rather than just at the right period boundary.\n-    def advance_to_segwit_lockin(self):\n+    # Mine enough blocks for segwit's vb state to be 'started'.\n+    def advance_to_segwit_started(self):\n         height = self.nodes[0].getblockcount()\n         # Will need to rewrite the tests here if we are past the first period\n         assert(height < VB_PERIOD - 1)\n@@ -293,6 +291,13 @@ def advance_to_segwit_lockin(self):\n         # Advance to end of period, status should now be 'started'\n         self.nodes[0].generate(VB_PERIOD-height-1)\n         assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n         # Advance to end of period, and verify lock-in happens at the end\n         self.nodes[0].generate(VB_PERIOD-1)\n         height = self.nodes[0].getblockcount()\n@@ -1522,6 +1527,21 @@ def test_witness_sigops(self):\n \n         # TODO: test p2sh sigop counting\n \n+    def test_getblocktemplate_before_lockin(self):\n+        print(\"\\tTesting getblocktemplate setting of segwit versionbit (before lockin)\")\n+        block_version = (self.nodes[0].getblocktemplate())['version']\n+        assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+\n+        # Workaround:\n+        # Can either change the tip, or change the mempool and wait 5 seconds\n+        # to trigger a recomputation of getblocktemplate.\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        # Using mocktime lets us avoid sleep()\n+        self.nodes[0].setmocktime(int(time.time())+10)\n+\n+        block_version = self.nodes[0].getblocktemplate({\"rules\" : [\"segwit\"]})['version']\n+        assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n+        self.nodes[0].setmocktime(0) # undo mocktime\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n@@ -1554,6 +1574,10 @@ def run_test(self):\n         self.test_unnecessary_witness_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)\n \n+        # Advance to segwit being 'started'\n+        self.advance_to_segwit_started()\n+        self.test_getblocktemplate_before_lockin()\n+\n         sync_blocks(self.nodes)\n \n         # At lockin, nothing should change."
      }
    ]
  },
  {
    "sha": "92ab64c51086369c62b7e629c31e7bf665cf6be0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmFiNjRjNTEwODYzNjljNjJiN2U2MjljMzFlN2JmNjY1Y2Y2YmUw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T18:15:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:28Z"
      },
      "message": "Add test for getrawtransaction",
      "tree": {
        "sha": "e0a4dce10ed5e7988a932ec693980a4b057b4fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0a4dce10ed5e7988a932ec693980a4b057b4fce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92ab64c51086369c62b7e629c31e7bf665cf6be0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9bff09d1d8c32a3857309db42b8616a62b1b6ed"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b813a9f231fc80d1290da632ccd91411bb6fd73a",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92ab64c51086369c62b7e629c31e7bf665cf6be0/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92ab64c51086369c62b7e629c31e7bf665cf6be0/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=92ab64c51086369c62b7e629c31e7bf665cf6be0",
        "patch": "@@ -11,6 +11,7 @@\n from test_framework.key import CECKey, CPubKey\n import time\n import random\n+from binascii import hexlify\n \n # The versionbit bit used to signal activation of SegWit\n VB_WITNESS_BIT = 1\n@@ -928,6 +929,17 @@ def test_tx_relay_after_segwit_activation(self):\n         self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n \n+        # Test that getrawtransaction returns correct witness information\n+        # hash, size, vsize\n+        raw_tx = self.nodes[0].getrawtransaction(tx3.hash, 1)\n+        assert_equal(int(raw_tx[\"hash\"], 16), tx3.calc_sha256(True))\n+        assert_equal(raw_tx[\"size\"], len(tx3.serialize_with_witness()))\n+        vsize = (len(tx3.serialize_with_witness()) + 3*len(tx3.serialize_without_witness()) + 3) / 4\n+        assert_equal(raw_tx[\"vsize\"], vsize)\n+        assert_equal(len(raw_tx[\"vin\"][0][\"txinwitness\"]), 1)\n+        assert_equal(raw_tx[\"vin\"][0][\"txinwitness\"][0], hexlify(witness_program).decode('ascii'))\n+        assert(vsize != raw_tx[\"size\"])\n+\n         # Cleanup: mine the transactions and update utxo for next test\n         self.nodes[0].generate(1)\n         assert_equal(len(self.nodes[0].getrawmempool()),  0)"
      }
    ]
  },
  {
    "sha": "40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGY3ODI5NzVlZDQwYTBjNTgwNGNiZDdhMmJmNmI0MDM2NWFjNzhj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:14:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:39Z"
      },
      "message": "p2p-segwit.py: more RPC coverage",
      "tree": {
        "sha": "7259d9a92e109b72cd34eabf85b09c1e3b1e8ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7259d9a92e109b72cd34eabf85b09c1e3b1e8ce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92ab64c51086369c62b7e629c31e7bf665cf6be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92ab64c51086369c62b7e629c31e7bf665cf6be0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6eb3e9aab60d878bbc6e3823a064a3df55bcfff9",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f782975ed40a0c5804cbd7a2bf6b40365ac78c/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f782975ed40a0c5804cbd7a2bf6b40365ac78c/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
        "patch": "@@ -1015,6 +1015,13 @@ def test_block_relay(self, segwit_activated):\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(True), block.serialize(True))\n \n+            # Test size, vsize, cost\n+            rpc_details = self.nodes[0].getblock(block.hash, True)\n+            assert_equal(rpc_details[\"size\"], len(block.serialize(True)))\n+            assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n+            cost = 3*len(block.serialize(False)) + len(block.serialize(True))\n+            assert_equal(rpc_details[\"cost\"], cost)\n+\n             # Upgraded node should not ask for blocks from unupgraded\n             block4 = self.build_next_block(nVersion=4)\n             block4.solve()"
      }
    ]
  },
  {
    "sha": "b6443393fde876fa06067d1a61fa147e0a1d8572",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ0MzM5M2ZkZTg3NmZhMDYwNjdkMWE2MWZhMTQ3ZTBhMWQ4NTcy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:23:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:49Z"
      },
      "message": "Rename deployment (witness -> segwit)",
      "tree": {
        "sha": "19e2be361c8ab4566e4cf76915596c5595d0d211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19e2be361c8ab4566e4cf76915596c5595d0d211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6443393fde876fa06067d1a61fa147e0a1d8572",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6443393fde876fa06067d1a61fa147e0a1d8572",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6443393fde876fa06067d1a61fa147e0a1d8572",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6443393fde876fa06067d1a61fa147e0a1d8572/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40f782975ed40a0c5804cbd7a2bf6b40365ac78c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1beb332a36f2df8f5f7cfb0740a9619faaf83c7f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6443393fde876fa06067d1a61fa147e0a1d8572/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6443393fde876fa06067d1a61fa147e0a1d8572/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b6443393fde876fa06067d1a61fa147e0a1d8572",
        "patch": "@@ -755,7 +755,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     bip9_softforks.push_back(Pair(\"csv\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_CSV)));\n-    bip9_softforks.push_back(Pair(\"witness\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_WITNESS)));\n+    bip9_softforks.push_back(Pair(\"segwit\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_WITNESS)));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "00bf5e1d68bc242678b1b63ced97e8260dc315be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGJmNWUxZDY4YmMyNDI2NzhiMWI2M2NlZDk3ZTgyNjBkYzMxNWJl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:24:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:34:01Z"
      },
      "message": "Update p2p-segwit.py for new deployment name",
      "tree": {
        "sha": "fa7671435e5056872f94f0ff911f782c0baf02c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa7671435e5056872f94f0ff911f782c0baf02c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00bf5e1d68bc242678b1b63ced97e8260dc315be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6443393fde876fa06067d1a61fa147e0a1d8572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6443393fde876fa06067d1a61fa147e0a1d8572",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6443393fde876fa06067d1a61fa147e0a1d8572"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c4db33468e699abec87ff5523be8dea00a240116",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00bf5e1d68bc242678b1b63ced97e8260dc315be/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00bf5e1d68bc242678b1b63ced97e8260dc315be/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=00bf5e1d68bc242678b1b63ced97e8260dc315be",
        "patch": "@@ -247,7 +247,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # For now, rely on earlier tests to have created at least one utxo for\n         # us to use\n         assert(len(self.utxo) > 0)\n-        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+        assert(get_bip9_status(self.nodes[0], 'segwit')['status'] != 'active')\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -288,36 +288,36 @@ def advance_to_segwit_started(self):\n         # Will need to rewrite the tests here if we are past the first period\n         assert(height < VB_PERIOD - 1)\n         # Genesis block is 'defined'.\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'defined')\n         # Advance to end of period, status should now be 'started'\n         self.nodes[0].generate(VB_PERIOD-height-1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n \n     # Mine enough blocks to lock in segwit, but don't activate.\n     # TODO: we could verify that lockin only happens at the right threshold of\n     # signalling blocks, rather than just at the right period boundary.\n     def advance_to_segwit_lockin(self):\n         height = self.nodes[0].getblockcount()\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n         # Advance to end of period, and verify lock-in happens at the end\n         self.nodes[0].generate(VB_PERIOD-1)\n         height = self.nodes[0].getblockcount()\n         assert((height % VB_PERIOD) == VB_PERIOD - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n \n \n     # Mine enough blocks to activate segwit.\n     # TODO: we could verify that activation only happens at the right threshold\n     # of signalling blocks, rather than just at the right period boundary.\n     def advance_to_segwit_active(self):\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         height = self.nodes[0].getblockcount()\n         self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n \n \n     # This test can only be run after segwit has activated\n@@ -1432,7 +1432,7 @@ def test_upgrade_after_activation(self, node, node_id):\n         sync_blocks(self.nodes)\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert(get_bip9_status(node, 'witness')['status'] == \"active\")\n+        assert(get_bip9_status(node, 'segwit')['status'] == \"active\")\n \n         # Make sure this peers blocks match those of node0.\n         height = node.getblockcount()"
      }
    ]
  },
  {
    "sha": "c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGYyZmIyYzBiZGUxMzFlZDFjMDI4MDk1YTkyZTI2ZjA1MzIxZjNk",
    "commit": {
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-13T18:56:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:34:29Z"
      },
      "message": "BIP143 P2WSH examples",
      "tree": {
        "sha": "075d330f3f888cdf33f88e3532e66347a5850955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/075d330f3f888cdf33f88e3532e66347a5850955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00bf5e1d68bc242678b1b63ced97e8260dc315be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00bf5e1d68bc242678b1b63ced97e8260dc315be"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06fbcfee2c8c2a367b8c9a2ba8cb4c490ddd6acd",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8f2fb2c0bde131ed1c028095a92e26f05321f3d/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8f2fb2c0bde131ed1c028095a92e26f05321f3d/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
        "patch": "@@ -467,5 +467,24 @@\n [\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n \"01000000020001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff00010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff02e8030000000000000151e903000000000000015100000000\", \"P2SH,WITNESS\"],\n \n+[\"BIP143 example: P2WSH with OP_CODESEPERATOR and out-of-range SIGHASH_SINGLE\"],\n+[[[\"6eb316926b1c5d567cd6f5e6a84fec606fc53d7b474526d1fff3948020c93dfe\", 0, \"0x21 0x036d5c20fa14fb2f635474c1dc4ef5909d4568e5569b79fc94d3448486e14685f8 CHECKSIG\", 156250000],\n+[\"f825690aee1b3dc247da796cacb12687a5e802429fd291cfd63e010f02cf1508\", 0, \"0x00 0x20 0x5d1b56b63d714eebe542309525f484b7e9d6f686b3781b6f61ef925d66d6f6a0\", 4900000000]],\n+\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac0000000047304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"BIP143 example: P2WSH with unexecuted OP_CODESEPERATOR and SINGLE|ANYONECANPAY\"],\n+[[[\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215],\n+[\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215]],\n+\"01000000000102e9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff80e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffff0280969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac80969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"BIP143 example: Same as last example with input-output paris swapped\"],\n+[[[\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215],\n+[\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215]],\n+\"0100000000010280e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffffe9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff0280969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac80969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"BIP143 example: P2SH-P2WSH 6-of-6 multisig signed with 6 different SIGHASH types\"],\n+[[[\"6eb98797a21c6c10aa74edf29d618be109f48a8e94c694f3701e08ca69186436\", 1, \"HASH160 0x14 0x9993a429037b5d912407a71c252019287b8d27a5 EQUAL\", 987654321]],\n+\"0100000000010136641869ca081e70f394c6948e8af409e18b619df2ed74aa106c1ca29787b96e0100000023220020a16b5755f7f6f96dbd65f5f0d6ab9418b89af4b1f14a1bb8a09062c35f0dcb54ffffffff0200e9a435000000001976a914389ffce9cd9ae88dcc0631e88a821ffdbe9bfe2688acc0832f05000000001976a9147480a33f950689af511e6e84c138dbbd3c3ee41588ac080047304402206ac44d672dac41f9b00e28f4df20c52eeb087207e8d758d76d92c6fab3b73e2b0220367750dbbe19290069cba53d096f44530e4f98acaa594810388cf7409a1870ce01473044022068c7946a43232757cbdf9176f009a928e1cd9a1a8c212f15c1e11ac9f2925d9002205b75f937ff2f9f3c1246e547e54f62e027f64eefa2695578cc6432cdabce271502473044022059ebf56d98010a932cf8ecfec54c48e6139ed6adb0728c09cbe1e4fa0915302e022007cd986c8fa870ff5d2b3a89139c9fe7e499259875357e20fcbb15571c76795403483045022100fbefd94bd0a488d50b79102b5dad4ab6ced30c4069f1eaa69a4b5a763414067e02203156c6a5c9cf88f91265f5a942e96213afae16d83321c8b31bb342142a14d16381483045022100a5263ea0553ba89221984bd7f0b13613db16e7a70c549a86de0cc0444141a407022005c360ef0ae5a5d4f9f2f87a56c1546cc8268cab08c73501d6b3be2e1e1a8a08824730440220525406a1482936d5a21888260dc165497a90a15669636d8edca6b9fe490d309c022032af0c646a34a44d1f4576bf6a4a74b67940f8faa84c7df9abe12a01a11e2b4783cf56210307b8ae49ac90a048e9b53357a2354b3334e9c8bee813ecb98e99a7e07e8c3ba32103b28f0c28bfab54554ae8c658ac5c3e0ce6e79ad336331f78c428dd43eea8449b21034b8113d703413d57761b8b9781957b8c0ac1dfe69f492580ca4195f50376ba4a21033400f6afecb833092a9a21cfdf1ed1376e58c5d1f47de74683123987e967a8f42103a6d48b1131e94ba04d9737d61acdaa1322008af9602b3b14862c07a1789aac162102d8b661b0b3302ee2f162b09e07a55ad5dfbe673a9f01d9f0c19617681024306b56ae00000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "f3a7ed49784bf70f1301bb1363dda4751b648173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2E3ZWQ0OTc4NGJmNzBmMTMwMWJiMTM2M2RkYTQ3NTFiNjQ4MTcz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:43:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:43:21Z"
      },
      "message": "Fix unused variable in sigopcount test",
      "tree": {
        "sha": "edf30064c610bac31915f76fb7b857b0f9becbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf30064c610bac31915f76fb7b857b0f9becbee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3a7ed49784bf70f1301bb1363dda4751b648173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a7ed49784bf70f1301bb1363dda4751b648173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a7ed49784bf70f1301bb1363dda4751b648173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a7ed49784bf70f1301bb1363dda4751b648173/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f2fb2c0bde131ed1c028095a92e26f05321f3d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8dea388332b211c362393ec9e3a5c156baf40c42",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a7ed49784bf70f1301bb1363dda4751b648173/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a7ed49784bf70f1301bb1363dda4751b648173/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=f3a7ed49784bf70f1301bb1363dda4751b648173",
        "patch": "@@ -74,6 +74,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n     ScriptError error;\n     CTransaction inputi(input);\n     bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;\n }"
      }
    ]
  },
  {
    "sha": "1b9893fb55b3b8c153c767ac5542b824b270ddc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjk4OTNmYjU1YjNiOGMxNTNjNzY3YWM1NTQyYjgyNGIyNzBkZGM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:40:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:40:42Z"
      },
      "message": "--- [SEGWIT] begin: fixups 9 ---",
      "tree": {
        "sha": "edf30064c610bac31915f76fb7b857b0f9becbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf30064c610bac31915f76fb7b857b0f9becbee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3a7ed49784bf70f1301bb1363dda4751b648173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a7ed49784bf70f1301bb1363dda4751b648173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a7ed49784bf70f1301bb1363dda4751b648173"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "3483e5cfdcec20058fb470ae564504cc17021528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDgzZTVjZmRjZWMyMDA1OGZiNDcwYWU1NjQ1MDRjYzE3MDIxNTI4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T17:11:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:42:19Z"
      },
      "message": "DEPLOYMENT_WITNESS -> DEPLOYMENT_SEGWIT",
      "tree": {
        "sha": "29fe7438408bea466274c5e039fd7526ad0c6ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29fe7438408bea466274c5e039fd7526ad0c6ae6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3483e5cfdcec20058fb470ae564504cc17021528",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3483e5cfdcec20058fb470ae564504cc17021528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3483e5cfdcec20058fb470ae564504cc17021528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3483e5cfdcec20058fb470ae564504cc17021528/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b9893fb55b3b8c153c767ac5542b824b270ddc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9893fb55b3b8c153c767ac5542b824b270ddc4"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e0f9ec4d3cad64157acfe4e855181152a788d9bc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3483e5cfdcec20058fb470ae564504cc17021528/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3483e5cfdcec20058fb470ae564504cc17021528/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3483e5cfdcec20058fb470ae564504cc17021528",
        "patch": "@@ -93,9 +93,9 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n         // Deployment of SegWit (BIP141 and BIP143)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 2000000000; // Far in the future\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 2100000000;\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -189,9 +189,9 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n         // Deployment of SegWit (BIP141 and BIP143)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 1493596800; // May 1st 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -263,9 +263,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "880752de1f239423959ca7c60a25dc5bcdd3594c",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3483e5cfdcec20058fb470ae564504cc17021528/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3483e5cfdcec20058fb470ae564504cc17021528/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=3483e5cfdcec20058fb470ae564504cc17021528",
        "patch": "@@ -16,7 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n-    DEPLOYMENT_WITNESS, // Deployment of BIP141 and BIP143\n+    DEPLOYMENT_SEGWIT, // Deployment of BIP141 and BIP143\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "a013e27dd108551e1d7ee05b99ed38602631856a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3483e5cfdcec20058fb470ae564504cc17021528/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3483e5cfdcec20058fb470ae564504cc17021528/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3483e5cfdcec20058fb470ae564504cc17021528",
        "patch": "@@ -3353,7 +3353,7 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n }\n \n // Compute at which vout of the block's coinbase transaction the witness"
      },
      {
        "sha": "a1bf0b82750cef38bfefbfc6d57fa39ce838b373",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3483e5cfdcec20058fb470ae564504cc17021528/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3483e5cfdcec20058fb470ae564504cc17021528/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3483e5cfdcec20058fb470ae564504cc17021528",
        "patch": "@@ -755,7 +755,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     bip9_softforks.push_back(Pair(\"csv\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_CSV)));\n-    bip9_softforks.push_back(Pair(\"segwit\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_WITNESS)));\n+    bip9_softforks.push_back(Pair(\"segwit\", BIP9SoftForkDesc(consensusParams, Consensus::DEPLOYMENT_SEGWIT)));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "2a6516fcf784852e468820c258a3b4c71215dc1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTY1MTZmY2Y3ODQ4NTJlNDY4ODIwYzI1OGEzYjRjNzEyMTVkYzFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T16:21:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:44:06Z"
      },
      "message": "Behave as a non-witness node when start time is far away",
      "tree": {
        "sha": "d261289edccc57b1e620708e133e6d09af039fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d261289edccc57b1e620708e133e6d09af039fc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a6516fcf784852e468820c258a3b4c71215dc1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a6516fcf784852e468820c258a3b4c71215dc1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a6516fcf784852e468820c258a3b4c71215dc1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a6516fcf784852e468820c258a3b4c71215dc1c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3483e5cfdcec20058fb470ae564504cc17021528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3483e5cfdcec20058fb470ae564504cc17021528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3483e5cfdcec20058fb470ae564504cc17021528"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 34,
      "deletions": 11
    },
    "files": [
      {
        "sha": "45bb8e17fa255418ea1d34fe48909b7c9dfbb482",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a6516fcf784852e468820c258a3b4c71215dc1c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a6516fcf784852e468820c258a3b4c71215dc1c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2a6516fcf784852e468820c258a3b4c71215dc1c",
        "patch": "@@ -94,8 +94,8 @@ class CMainParams : public CChainParams {\n \n         // Deployment of SegWit (BIP141 and BIP143)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 2000000000; // Far in the future\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 2100000000;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 0; // Never / undefined\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data."
      },
      {
        "sha": "d3e89beccac667780b3dad37da9b46ba91a63cec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a6516fcf784852e468820c258a3b4c71215dc1c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a6516fcf784852e468820c258a3b4c71215dc1c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a6516fcf784852e468820c258a3b4c71215dc1c",
        "patch": "@@ -1384,6 +1384,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n+    if (Params().GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+        // Only advertize witness capabilities if they have a reasonable start time.\n+        // This allows us to have the code merged without a defined softfork, by setting its\n+        // end time to 0.\n+        // Note that setting NODE_WITNESS is never required: the only downside from not\n+        // doing so is that after activation, no upgraded nodes will fetch from you.\n+        nLocalServices |= NODE_WITNESS;\n+    }\n+\n     // ********************************************************* Step 10: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))"
      },
      {
        "sha": "a434e72fa54adeffcb33589b95dbf3874c57b532",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a6516fcf784852e468820c258a3b4c71215dc1c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a6516fcf784852e468820c258a3b4c71215dc1c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2a6516fcf784852e468820c258a3b4c71215dc1c",
        "patch": "@@ -3134,7 +3134,10 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n-    pindexNew->nStatus |= BLOCK_HAVE_DATA | BLOCK_OPT_WITNESS;\n+    pindexNew->nStatus |= BLOCK_HAVE_DATA;\n+    if (IsWitnessEnabled(pindexNew->pprev, Params().GetConsensus())) {\n+        pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n+    }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n     setDirtyBlockIndex.insert(pindexNew);\n \n@@ -4752,6 +4755,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n     }\n }\n \n+uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params& chainparams) {\n+    uint32_t nFetchFlags = 0;\n+    if (IsWitnessEnabled(pprev, chainparams) && State(pfrom->GetId())->fHaveWitness) {\n+        nFetchFlags |= MSG_WITNESS_FLAG;\n+    }\n+    return nFetchFlags;\n+}\n+\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams)\n {\n     RandAddSeedPerfmon();\n@@ -5034,20 +5045,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n \n+        uint32_t nFetchFlags = GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus());\n+\n         std::vector<CInv> vToFetch;\n \n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             CInv &inv = vInv[nInv];\n+            inv.type |= nFetchFlags;\n \n             boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (inv.type == MSG_TX && State(pfrom->GetId())->fHaveWitness) {\n-                inv.type = MSG_WITNESS_TX;\n+            if (inv.type == MSG_TX) {\n+                inv.type |= nFetchFlags;\n             }\n \n             if (inv.type == MSG_BLOCK) {\n@@ -5066,9 +5080,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                        if (State(pfrom->GetId())->fHaveWitness) {\n-                            inv.type = MSG_WITNESS_BLOCK;\n-                        }\n+                        inv.type |= nFetchFlags;\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n@@ -5442,7 +5454,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Can't download any more from this peer\n                         break;\n                     }\n-                    vGetData.push_back(CInv(State(pfrom->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n+                    uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n                     LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n@@ -6156,7 +6169,8 @@ bool SendMessages(CNode* pto)\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 if (State(pto->GetId())->fHaveWitness || !IsWitnessEnabled(pindex->pprev, consensusParams)) {\n-                    vGetData.push_back(CInv(State(pto->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n+                    uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n                     LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                         pindex->nHeight, pto->id);"
      },
      {
        "sha": "7c7d0d1cad28c3d26533f682fba8d55c919b8ed4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a6516fcf784852e468820c258a3b4c71215dc1c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a6516fcf784852e468820c258a3b4c71215dc1c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2a6516fcf784852e468820c258a3b4c71215dc1c",
        "patch": "@@ -79,7 +79,7 @@ static const uint64_t nRelevantServices = NODE_NETWORK | NODE_WITNESS;\n //\n bool fDiscover = true;\n bool fListen = true;\n-uint64_t nLocalServices = NODE_NETWORK | NODE_WITNESS;\n+uint64_t nLocalServices = NODE_NETWORK;\n CCriticalSection cs_mapLocalHost;\n map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};"
      }
    ]
  },
  {
    "sha": "c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2I1ZGU1NWIxOTcwOTg2YTA5NzUwYWI2NmE1YTVjNWViN2M4ZDIz",
    "commit": {
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-14T15:01:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:33Z"
      },
      "message": "test: BIP143 examples fix and clarify",
      "tree": {
        "sha": "3df8effb705b99e471faaa14c1fb58ae028028ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3df8effb705b99e471faaa14c1fb58ae028028ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a6516fcf784852e468820c258a3b4c71215dc1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a6516fcf784852e468820c258a3b4c71215dc1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a6516fcf784852e468820c258a3b4c71215dc1c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c9fe4e313a2eb28c9489f18886ac3be20ecd12fd",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
        "patch": "@@ -467,17 +467,18 @@\n [\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n \"01000000020001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff00010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff02e8030000000000000151e903000000000000015100000000\", \"P2SH,WITNESS\"],\n \n-[\"BIP143 example: P2WSH with OP_CODESEPERATOR and out-of-range SIGHASH_SINGLE\"],\n+[\"BIP143 examples: details and private keys are available in BIP143\"],\n+[\"BIP143 example: P2WSH with OP_CODESEPARATOR and out-of-range SIGHASH_SINGLE.\"],\n [[[\"6eb316926b1c5d567cd6f5e6a84fec606fc53d7b474526d1fff3948020c93dfe\", 0, \"0x21 0x036d5c20fa14fb2f635474c1dc4ef5909d4568e5569b79fc94d3448486e14685f8 CHECKSIG\", 156250000],\n [\"f825690aee1b3dc247da796cacb12687a5e802429fd291cfd63e010f02cf1508\", 0, \"0x00 0x20 0x5d1b56b63d714eebe542309525f484b7e9d6f686b3781b6f61ef925d66d6f6a0\", 4900000000]],\n-\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac0000000047304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS\"],\n+\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS\"],\n \n-[\"BIP143 example: P2WSH with unexecuted OP_CODESEPERATOR and SINGLE|ANYONECANPAY\"],\n+[\"BIP143 example: P2WSH with unexecuted OP_CODESEPARATOR and SINGLE|ANYONECANPAY\"],\n [[[\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215],\n [\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215]],\n \"01000000000102e9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff80e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffff0280969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac80969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],\n \n-[\"BIP143 example: Same as last example with input-output paris swapped\"],\n+[\"BIP143 example: Same as the previous example with input-output paris swapped\"],\n [[[\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215],\n [\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215]],\n \"0100000000010280e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffffe9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff0280969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac80969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],"
      }
    ]
  },
  {
    "sha": "cc19adc86b65d69e8701660b89fdba79348fd72d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzE5YWRjODZiNjVkNjllODcwMTY2MGI4OWZkYmE3OTM0OGZkNzJk",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-06-14T15:57:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:40Z"
      },
      "message": "Remove segnet from mininode",
      "tree": {
        "sha": "dcee77abffa83870fefb8164b01a7e0686670772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcee77abffa83870fefb8164b01a7e0686670772"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc19adc86b65d69e8701660b89fdba79348fd72d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc19adc86b65d69e8701660b89fdba79348fd72d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc19adc86b65d69e8701660b89fdba79348fd72d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc19adc86b65d69e8701660b89fdba79348fd72d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "90e71210a62161f9e4428b559398a74d6e30119c",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc19adc86b65d69e8701660b89fdba79348fd72d/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc19adc86b65d69e8701660b89fdba79348fd72d/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=cc19adc86b65d69e8701660b89fdba79348fd72d",
        "patch": "@@ -1332,7 +1332,6 @@ class NodeConn(asyncore.dispatcher):\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n-        \"segnet\": b\"\\x2e\\x96\\xea\\xca\"     # segnet\n     }\n \n     def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):"
      }
    ]
  },
  {
    "sha": "efc251d1f344362c060c8c54760251c480b12b34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmMyNTFkMWYzNDQzNjJjMDYwYzhjNTQ3NjAyNTFjNDgwYjEyYjM0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T15:56:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:45Z"
      },
      "message": "Tests: ensure that signrawtransaction failures are caught in segwit.py",
      "tree": {
        "sha": "a81254e5bd6ceb7b8fd2a2c85a8327c2c47fb024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a81254e5bd6ceb7b8fd2a2c85a8327c2c47fb024"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc251d1f344362c060c8c54760251c480b12b34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc251d1f344362c060c8c54760251c480b12b34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efc251d1f344362c060c8c54760251c480b12b34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc251d1f344362c060c8c54760251c480b12b34/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc19adc86b65d69e8701660b89fdba79348fd72d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc19adc86b65d69e8701660b89fdba79348fd72d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc19adc86b65d69e8701660b89fdba79348fd72d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d4c9a8afed32cd621fad6d72ac8ea8fff0d17850",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc251d1f344362c060c8c54760251c480b12b34/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc251d1f344362c060c8c54760251c480b12b34/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=efc251d1f344362c060c8c54760251c480b12b34",
        "patch": "@@ -55,6 +55,7 @@ def send_to_witness(version, node, utxo, pubkey, encode_p2sh, amount, sign=True,\n     tx_to_witness = create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransaction(tx_to_witness)\n+        assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:\n         if (insert_redeem_script):"
      }
    ]
  },
  {
    "sha": "396f4b8828412daf6273ca9dc2399ab269507155",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTZmNGI4ODI4NDEyZGFmNjI3M2NhOWRjMjM5OWFiMjY5NTA3MTU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T16:59:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:50Z"
      },
      "message": "spelling fix: uncommited -> uncommitted",
      "tree": {
        "sha": "9bfba0101c339c6aa0ae6227e638580a3b5d0b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfba0101c339c6aa0ae6227e638580a3b5d0b00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/396f4b8828412daf6273ca9dc2399ab269507155",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/396f4b8828412daf6273ca9dc2399ab269507155",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/396f4b8828412daf6273ca9dc2399ab269507155",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/396f4b8828412daf6273ca9dc2399ab269507155/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efc251d1f344362c060c8c54760251c480b12b34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc251d1f344362c060c8c54760251c480b12b34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efc251d1f344362c060c8c54760251c480b12b34"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a04dea0b50937e767487b20d3c23e8f618e79410",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/396f4b8828412daf6273ca9dc2399ab269507155/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/396f4b8828412daf6273ca9dc2399ab269507155/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=396f4b8828412daf6273ca9dc2399ab269507155",
        "patch": "@@ -3372,7 +3372,7 @@ static int GetWitnessCommitmentIndex(const CBlock& block)\n     return commitpos;\n }\n \n-void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n@@ -3414,7 +3414,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n             block.vtx[0].UpdateHash();\n         }\n     }\n-    UpdateUncommitedBlockStructures(block, pindexPrev, consensusParams);\n+    UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);\n     return commitment;\n }\n "
      },
      {
        "sha": "dac8fa361737f789179b082d5167a51325394dc9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/396f4b8828412daf6273ca9dc2399ab269507155/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/396f4b8828412daf6273ca9dc2399ab269507155/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=396f4b8828412daf6273ca9dc2399ab269507155",
        "patch": "@@ -487,7 +487,7 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n bool RewindBlockIndex(const CChainParams& params);\n \n /** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n-void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n /** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);"
      },
      {
        "sha": "763584a2b63695dfb70326772db7e8c3c1a39925",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/396f4b8828412daf6273ca9dc2399ab269507155/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/396f4b8828412daf6273ca9dc2399ab269507155/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=396f4b8828412daf6273ca9dc2399ab269507155",
        "patch": "@@ -648,7 +648,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi != mapBlockIndex.end()) {\n-            UpdateUncommitedBlockStructures(block, mi->second, Params().GetConsensus());\n+            UpdateUncommittedBlockStructures(block, mi->second, Params().GetConsensus());\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "b508f5bde0d019bb88d671f7415f87e442c57dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTA4ZjViZGUwZDAxOWJiODhkNjcxZjc0MTVmODdlNDQyYzU3ZGFl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:33Z"
      },
      "message": "--- [SEGWIT] begin: fixups 10 ---",
      "tree": {
        "sha": "9bfba0101c339c6aa0ae6227e638580a3b5d0b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfba0101c339c6aa0ae6227e638580a3b5d0b00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b508f5bde0d019bb88d671f7415f87e442c57dae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b508f5bde0d019bb88d671f7415f87e442c57dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b508f5bde0d019bb88d671f7415f87e442c57dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b508f5bde0d019bb88d671f7415f87e442c57dae/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "396f4b8828412daf6273ca9dc2399ab269507155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/396f4b8828412daf6273ca9dc2399ab269507155",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/396f4b8828412daf6273ca9dc2399ab269507155"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "10433cfde7c2ef7082503003751fe0d5298c11f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDQzM2NmZGU3YzJlZjcwODI1MDMwMDM3NTFmZTBkNTI5OGMxMWYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T11:52:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:47Z"
      },
      "message": "Fix direct fetching of blocks after 2a6516fc",
      "tree": {
        "sha": "19fe04e49f9f4f0eb69e850080d289bb52b61da6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19fe04e49f9f4f0eb69e850080d289bb52b61da6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10433cfde7c2ef7082503003751fe0d5298c11f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10433cfde7c2ef7082503003751fe0d5298c11f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10433cfde7c2ef7082503003751fe0d5298c11f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10433cfde7c2ef7082503003751fe0d5298c11f2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b508f5bde0d019bb88d671f7415f87e442c57dae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b508f5bde0d019bb88d671f7415f87e442c57dae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b508f5bde0d019bb88d671f7415f87e442c57dae"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cf78954f286bcab6ca27c2697e1942bd0a0d2148",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10433cfde7c2ef7082503003751fe0d5298c11f2/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10433cfde7c2ef7082503003751fe0d5298c11f2/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=10433cfde7c2ef7082503003751fe0d5298c11f2",
        "patch": "@@ -856,13 +856,13 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # But eliminating the witness should fix it\n         self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n \n-        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Verify that inv's to test_node come with getdata's for non-witness tx's\n         # Just tweak the transaction, announce it, and verify we get a getdata\n-        # for a witness_tx\n+        # for a normal tx\n         tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n         tx.rehash()\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+        assert(self.test_node.last_getdata.inv[0].type == 1)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -954,6 +954,8 @@ def test_tx_relay_after_segwit_activation(self):\n     def test_block_relay(self, segwit_activated):\n         print(\"\\tTesting block relay\")\n \n+        blocktype = 2|MSG_WITNESS_FLAG if segwit_activated else 2\n+\n         # test_node has set NODE_WITNESS, so all getdata requests should be for\n         # witness blocks.\n         # Test announcing a block via inv results in a getdata, and that\n@@ -962,20 +964,20 @@ def test_block_relay(self, segwit_activated):\n         block1.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n-        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        assert(self.test_node.last_getdata.inv[0].type == blocktype)\n         self.test_node.test_witness_block(block1, True)\n \n         block2 = self.build_next_block(nVersion=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n-        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        assert(self.test_node.last_getdata.inv[0].type == blocktype)\n         self.test_node.test_witness_block(block2, True)\n \n         block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n-        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        assert(self.test_node.last_getdata.inv[0].type == blocktype)\n         self.test_node.test_witness_block(block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,"
      },
      {
        "sha": "40f0ed50435891e74eadebea6132919ab80d432d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10433cfde7c2ef7082503003751fe0d5298c11f2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10433cfde7c2ef7082503003751fe0d5298c11f2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=10433cfde7c2ef7082503003751fe0d5298c11f2",
        "patch": "@@ -5052,7 +5052,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             CInv &inv = vInv[nInv];\n-            inv.type |= nFetchFlags;\n \n             boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);"
      }
    ]
  },
  {
    "sha": "2948c022d4f680c59bd0338429704df33b477070",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ4YzAyMmQ0ZjY4MGM1OWJkMDMzODQyOTcwNGRmMzNiNDc3MDcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T11:57:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:56Z"
      },
      "message": "Consistency in serialization flags",
      "tree": {
        "sha": "cf11203aea20a8928a05ff61933f922bd484ccd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf11203aea20a8928a05ff61933f922bd484ccd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2948c022d4f680c59bd0338429704df33b477070",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948c022d4f680c59bd0338429704df33b477070",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2948c022d4f680c59bd0338429704df33b477070",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948c022d4f680c59bd0338429704df33b477070/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10433cfde7c2ef7082503003751fe0d5298c11f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10433cfde7c2ef7082503003751fe0d5298c11f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10433cfde7c2ef7082503003751fe0d5298c11f2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "df900388f2678129b5e17c78498756c46c456e43",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2948c022d4f680c59bd0338429704df33b477070/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2948c022d4f680c59bd0338429704df33b477070/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=2948c022d4f680c59bd0338429704df33b477070",
        "patch": "@@ -38,5 +38,5 @@ int64_t GetBlockCost(const CBlock& block)\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n     // cost = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "7f10409c053978f9d8ceea37e5d0e9f499b571e4",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2948c022d4f680c59bd0338429704df33b477070/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2948c022d4f680c59bd0338429704df33b477070/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=2948c022d4f680c59bd0338429704df33b477070",
        "patch": "@@ -151,5 +151,5 @@ std::string CTransaction::ToString() const\n \n int64_t GetTransactionCost(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }"
      }
    ]
  },
  {
    "sha": "d7fe873677c68de0cfed4a38900fea7ece81cb55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2ZlODczNjc3YzY4ZGUwY2ZlZDRhMzg5MDBmZWE3ZWNlODFjYjU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:37:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:37:01Z"
      },
      "message": "--- [SEGWIT] begin: fixups 11 ---",
      "tree": {
        "sha": "cf11203aea20a8928a05ff61933f922bd484ccd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf11203aea20a8928a05ff61933f922bd484ccd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fe873677c68de0cfed4a38900fea7ece81cb55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2948c022d4f680c59bd0338429704df33b477070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948c022d4f680c59bd0338429704df33b477070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2948c022d4f680c59bd0338429704df33b477070"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "0e177a2577182e91eba7cec083b1c21cc55de13c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTE3N2EyNTc3MTgyZTkxZWJhN2NlYzA4M2IxYzIxY2M1NWRlMTNj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:36:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:39:27Z"
      },
      "message": "Don't treat NODE_WITNESS as relevant before a fork is defined",
      "tree": {
        "sha": "92580d9ac3b527d696c1f6c0163bbea00596b049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92580d9ac3b527d696c1f6c0163bbea00596b049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e177a2577182e91eba7cec083b1c21cc55de13c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e177a2577182e91eba7cec083b1c21cc55de13c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e177a2577182e91eba7cec083b1c21cc55de13c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e177a2577182e91eba7cec083b1c21cc55de13c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7fe873677c68de0cfed4a38900fea7ece81cb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fe873677c68de0cfed4a38900fea7ece81cb55"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5f564ffb096b1ea0e68b88b0f6fbad9078b4bcfe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e177a2577182e91eba7cec083b1c21cc55de13c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e177a2577182e91eba7cec083b1c21cc55de13c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0e177a2577182e91eba7cec083b1c21cc55de13c",
        "patch": "@@ -1391,6 +1391,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices |= NODE_WITNESS;\n+        // Only care about others providing witness capabilities if there is a softfork\n+        // defined.\n+        nRelevantServices |= NODE_WITNESS;\n     }\n \n     // ********************************************************* Step 10: import blocks"
      },
      {
        "sha": "1d87f4b007424df632eae6c49245c91b82b105e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e177a2577182e91eba7cec083b1c21cc55de13c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e177a2577182e91eba7cec083b1c21cc55de13c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0e177a2577182e91eba7cec083b1c21cc55de13c",
        "patch": "@@ -72,7 +72,7 @@ namespace {\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n /** Services this node implementation cares about */\n-static const uint64_t nRelevantServices = NODE_NETWORK | NODE_WITNESS;\n+uint64_t nRelevantServices = NODE_NETWORK;\n \n //\n // Global state variables\n@@ -1601,8 +1601,8 @@ void ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider non-witness nodes after 40 failed attemps\n-            if (!(addr.nServices & NODE_WITNESS) && nTries < 40)\n+            // only consider nodes missing relevant services after 40 failed attemps\n+            if ((addr.nServices & nRelevantServices) != nRelevantServices && nTries < 40)\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already"
      },
      {
        "sha": "876d5423dd08038f011fca414cb80172b2d2dc16",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e177a2577182e91eba7cec083b1c21cc55de13c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e177a2577182e91eba7cec083b1c21cc55de13c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0e177a2577182e91eba7cec083b1c21cc55de13c",
        "patch": "@@ -153,6 +153,7 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n extern bool fDiscover;\n extern bool fListen;\n extern uint64_t nLocalServices;\n+extern uint64_t nRelevantServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n "
      }
    ]
  },
  {
    "sha": "c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzc5NWVlNmRiY2Y4NGMzZjIyMWQzNWIxY2EyYjQxODI2ZmU0MjI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:36:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:39:47Z"
      },
      "message": "Revert \"Don't check the genesis block PoW\" as segnet has been dropped.",
      "tree": {
        "sha": "5a68ac4ac5a6ed3f7e60570560dc10fc017e0367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a68ac4ac5a6ed3f7e60570560dc10fc017e0367"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e177a2577182e91eba7cec083b1c21cc55de13c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e177a2577182e91eba7cec083b1c21cc55de13c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e177a2577182e91eba7cec083b1c21cc55de13c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "058404f357b0b83c8e7d74532d9b185a9d0e3fb1",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
        "patch": "@@ -82,9 +82,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n-    if (hash == params.hashGenesisBlock)\n-        return true;\n-\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      }
    ]
  },
  {
    "sha": "c708c3a4cf677abf22ee88c9402f0b18282fc92f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzA4YzNhNGNmNjc3YWJmMjJlZTg4Yzk0MDJmMGIxODI4MmZjOTJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:42:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:42:32Z"
      },
      "message": "--- [SEGWIT] begin: merge ---",
      "tree": {
        "sha": "5a68ac4ac5a6ed3f7e60570560dc10fc017e0367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a68ac4ac5a6ed3f7e60570560dc10fc017e0367"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGUzYzc1NWQ3ZTQxYWFhYmU3NGM4NGFmN2U0YmYwMGE2MmM5NmZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:46:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:46:19Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master' into segwit-master",
      "tree": {
        "sha": "435e8d4b828e1bf3aced2b8f1799a315afdd05a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/435e8d4b828e1bf3aced2b8f1799a315afdd05a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c708c3a4cf677abf22ee88c9402f0b18282fc92f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c708c3a4cf677abf22ee88c9402f0b18282fc92f"
      },
      {
        "sha": "9f1807af2422e3ac2d3702242b4a47c8df0be262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f1807af2422e3ac2d3702242b4a47c8df0be262",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f1807af2422e3ac2d3702242b4a47c8df0be262"
      }
    ],
    "stats": {
      "total": 31632,
      "additions": 24639,
      "deletions": 6993
    },
    "files": [
      {
        "sha": "ce40019dc314fffd33880246f28592ebe7b58b23",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -114,3 +114,4 @@ share/BitcoindComparisonTool.jar\n /doc/doxygen/\n \n libbitcoinconsensus.pc\n+contrib/devtools/split-debug.sh"
      },
      {
        "sha": "af9c476dc1d99418cd0d975be739632a60af4d1f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 34,
        "deletions": 46,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,18 +1,17 @@\n-# errata:\n-# - A travis bug causes caches to trample eachother when using the same\n-#   compiler key (which we don't use anyway). This is worked around for now by\n-#   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n-#   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n-# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]\n-#   IPv6 support\n-\n sudo: required\n-dist: precise\n-group: legacy\n+dist: trusty\n+\n+#workaround for https://github.com/travis-ci/travis-ci/issues/5227\n+addons:\n+  hostname: bitcoin-tester\n \n os: linux\n-language: cpp\n-compiler: gcc\n+language: generic\n+cache:\n+  directories:\n+  - depends/built\n+  - depends/sdk-sources\n+  - $HOME/.ccache\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -23,37 +22,30 @@ env:\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n-    - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n+    - SDK_URL=https://bitcoin.jonasschnelli.ch/sdks\n     - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n-cache:\n-  apt: true\n-  directories:\n-  - depends/built\n-  - depends/sdk-sources\n-  - $HOME/.ccache\n-matrix:\n-  fast_finish: true\n-  include:\n-    - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n-    - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n-    - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n-  exclude:\n-    - compiler: gcc\n+  matrix:\n+# ARM\n+    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Win32\n+    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc openjdk-7-jre-headless\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# 32-bit + dash\n+    - HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python3-zmq openjdk-7-jre-headless\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+# Win64\n+    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc openjdk-7-jre-headless\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# bitcoind\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python3-zmq openjdk-7-jre-headless\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+# No wallet\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\" openjdk-7-jre-headless python3\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Cross-Mac\n+    - HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.11 GOAL=\"deploy\"\n+\n+before_install:\n+    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n-    - if [ -n \"$PACKAGES\" ]; then sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n+    - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:\n@@ -69,17 +61,13 @@ script:\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n     - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then export CCACHE_READONLY=1; fi\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n-    - ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n-    - make distdir PACKAGE=bitcoin VERSION=$HOST\n-    - cd bitcoin-$HOST\n-    - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n+    - mkdir build && cd build\n+    - ../configure $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE\n     - echo $TRAVIS_COMMIT_LOG\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "5c1138b812d471475c46874c900a3db138d6495a",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 21,
        "deletions": 7,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -17,13 +17,13 @@ To contribute a patch, the workflow is as follows:\n   - Create topic branch\n   - Commit patches\n \n-The project coding conventions in [doc/developer-notes.md](doc/developer-notes.md) must be adhered to.\n+The project coding conventions in the [developer notes](doc/developer-notes.md) must be adhered to.\n \n In general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention) and diffs should be easy to read. For this reason do not mix any formatting fixes or code moves with actual code changes.\n \n Commit messages should be verbose by default consisting of a short subject line (50 chars max), a blank line and detailed explanatory text as separate paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo in main.cpp\") then a single title line is sufficient. Commit messages should be helpful to people reading your code in the future, so explain the reasoning for your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n-If a particular commit references another issue, please add the reference, for example \"refs #1234\", or \"fixes #4321\". Using \"fixes or closes\" keywords will cause the corresponding issue to be closed when the pull request is merged.\n+If a particular commit references another issue, please add the reference, for example `refs #1234`, or `fixes #4321`. Using the `fixes` or `closes` keywords will cause the corresponding issue to be closed when the pull request is merged.\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information about Git.\n \n@@ -35,13 +35,27 @@ The title of the pull request should be prefixed by the component or area that t\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: fix typo\n+    Trivial: Fix typo in main.cpp\n \n-If a pull request is specifically not to be considered for merging (yet) please prefix the title with [WIP] or use [Tasks Lists](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) in the body of the pull request to indicate tasks are pending.\n+If a pull request is specifically not to be considered for merging (yet) please prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists) in the body of the pull request to indicate tasks are pending.\n \n The body of the pull request should contain enough description about what the patch does together with any justification/reasoning. You should include references to any discussions (for example other tickets or mailing list discussions).\n \n-At this stage one should expect comments and review from other contributors. You can add more commits to your pull request by committing them locally and pushing to your fork until you have satisfied all feedback. If your pull request is accepted for merging, you may be asked by a maintainer to squash and or rebase your commits before it will be merged. The length of time required for peer review is unpredictable and will vary from patch to patch.\n+At this stage one should expect comments and review from other contributors. You can add more commits to your pull request by committing them locally and pushing to your fork until you have satisfied all feedback.\n+\n+Squashing Commits\n+---------------------------\n+If your pull request is accepted for merging, you may be asked by a maintainer to squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits before it will be merged. The basic squashing workflow is shown below.\n+\n+    git checkout your_branch_name\n+    git rebase -i HEAD~n\n+    # n is normally the number of commits in the pull\n+    # set commits from 'pick' to 'squash', save and quit\n+    # on the next screen, edit/refine commit messages\n+    # save and quit\n+    git push -f # (force push to GitHub)\n+\n+The length of time required for peer review is unpredictable and will vary from pull request to pull request.\n \n \n Pull Request Philosophy\n@@ -61,15 +75,15 @@ Refactoring is a necessary part of any software project's evolution. The followi\n \n There are three categories of refactoring, code only moves, code style fixes, code refactoring. In general refactoring pull requests should not mix these three kinds of activity in order to make refactoring pull requests easy to review and uncontroversial. In all cases, refactoring PRs must not change the behaviour of code within the pull request (bugs must be preserved as is).\n \n-Project maintainers aim for a quick turnaround on refactoring pull requests, so where possible keep them short, uncomplex and easy to verify. \n+Project maintainers aim for a quick turnaround on refactoring pull requests, so where possible keep them short, uncomplex and easy to verify.\n \n \n \"Decision Making\" Process\n -------------------------\n \n The following applies to code changes to the Bitcoin Core project (and related projects such as libsecp256k1), and is not to be confused with overall Bitcoin Network Protocol consensus changes.\n \n-Whether a pull request is merged into Bitcoin Core rests with the project merge maintainers and ultimately the project lead. \n+Whether a pull request is merged into Bitcoin Core rests with the project merge maintainers and ultimately the project lead.\n \n Maintainers will take into consideration if a patch is in line with the general principles of the project; meets the minimum standards for inclusion; and will judge the general consensus of contributors.\n "
      },
      {
        "sha": "b10d0850664c84c6f3840e87b9dc30ee5670c214",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -28,7 +28,7 @@ OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n-OSX_PLIST=$(top_srcdir)/share/qt/Info.plist #not installed\n+OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\n@@ -53,18 +53,8 @@ COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n   leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n \n dist-hook:\n-\t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n-\t-$(MAKE) -C $(top_distdir)/src/secp256k1 distclean\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n \n-distcheck-hook:\n-\t$(MKDIR_P) $(top_distdir)/_build/src/leveldb\n-\tcp -rf $(top_srcdir)/src/leveldb/* $(top_distdir)/_build/src/leveldb/\n-\t-$(MAKE) -C $(top_distdir)/_build/src/leveldb clean\n-\n-distcleancheck:\n-\t@:\n-\n $(BITCOIN_WIN_INSTALLER): all-recursive\n \t$(MKDIR_P) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n@@ -234,7 +224,11 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n+# This file is problematic for out-of-tree builds if it exists.\n+DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n+\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n clean-local:\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ qa/tmp/ cache/ $(OSX_APP)\n+\trm -rf qa/pull-tester/__pycache__"
      },
      {
        "sha": "3c41649c1b8d94c9dae46e1a1fbb7117e4841f0a",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -8,7 +8,7 @@ https://bitcoincore.org\n What is Bitcoin?\n ----------------\n \n-Bitcoin is an experimental new digital currency that enables instant payments to\n+Bitcoin is an experimental digital currency that enables instant payments to\n anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n with no central authority: managing transactions and issuing money are carried\n out collectively by the network. Bitcoin Core is the name of open source\n@@ -57,8 +57,7 @@ There are also [regression and integration tests](/qa) of the RPC interface, wri\n in Python, that are run automatically on the build server.\n These tests can be run (if the [test dependencies](/qa) are installed) with: `qa/pull-tester/rpc-tests.py`\n \n-The Travis CI system makes sure that every pull request is built for Windows\n-and Linux, OS X, and that unit and sanity tests are automatically run.\n+The Travis CI system makes sure that every pull request is built for Windows, Linux, and OS X, and that unit/sanity tests are run automatically.\n \n ### Manual Quality Assurance (QA) Testing\n "
      },
      {
        "sha": "2c18e49c56c0bc732a4bd6534ae03f871d42c6db",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "added",
        "additions": 562,
        "deletions": 0,
        "changes": 562,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,562 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX(VERSION, [ext|noext], [mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the specified\n+#   version of the C++ standard.  If necessary, add switches to CXX and\n+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)\n+#   or '14' (for the C++14 standard).\n+#\n+#   The second argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for an extended mode.\n+#\n+#   The third argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline support for the specified C++ standard is\n+#   required and that the macro should error out if no mode with that\n+#   support is found.  If specified 'optional', then configuration proceeds\n+#   regardless, after defining HAVE_CXX${VERSION} if and only if a\n+#   supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n+#   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n+#   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 4\n+\n+dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n+dnl  (serial version number 13).\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n+  m4_if([$1], [11], [],\n+        [$1], [14], [],\n+        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$2], [], [],\n+        [$2], [ext], [],\n+        [$2], [noext], [],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n+        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+  ax_cv_cxx_compile_cxx$1,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+    [ax_cv_cxx_compile_cxx$1=yes],\n+    [ax_cv_cxx_compile_cxx$1=no])])\n+  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+    ac_success=yes\n+  fi\n+\n+  m4_if([$2], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=gnu++$1 -std=gnu++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$2], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    dnl HP's aCC needs +std=c++11 according to:\n+    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n+    dnl Cray's crayCC needs \"-h std=c++11\"\n+    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx$1_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n+    fi\n+  fi\n+  if test x$ac_success = xno; then\n+    HAVE_CXX$1=0\n+    AC_MSG_NOTICE([No compiler with C++$1 support was found])\n+  else\n+    HAVE_CXX$1=1\n+    AC_DEFINE(HAVE_CXX$1,1,\n+              [define if the compiler supports basic C++$1 syntax])\n+  fi\n+  AC_SUBST(HAVE_CXX$1)\n+])\n+\n+\n+dnl  Test body for checking C++11 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+)\n+\n+\n+dnl  Test body for checking C++14 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+)\n+\n+\n+dnl  Tests for new features in C++11\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[\n+\n+// If the compiler admits that it is not ready for C++11, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201103L\n+\n+#error \"This is not a C++11 compiler\"\n+\n+#else\n+\n+namespace cxx11\n+{\n+\n+  namespace test_static_assert\n+  {\n+\n+    template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+  }\n+\n+  namespace test_final_override\n+  {\n+\n+    struct Base\n+    {\n+      virtual void f() {}\n+    };\n+\n+    struct Derived : public Base\n+    {\n+      virtual void f() override {}\n+    };\n+\n+  }\n+\n+  namespace test_double_right_angle_brackets\n+  {\n+\n+    template < typename T >\n+    struct check {};\n+\n+    typedef check<void> single_type;\n+    typedef check<check<void>> double_type;\n+    typedef check<check<check<void>>> triple_type;\n+    typedef check<check<check<check<void>>>> quadruple_type;\n+\n+  }\n+\n+  namespace test_decltype\n+  {\n+\n+    int\n+    f()\n+    {\n+      int a = 1;\n+      decltype(a) b = 2;\n+      return a + b;\n+    }\n+\n+  }\n+\n+  namespace test_type_deduction\n+  {\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static const bool value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static const bool value = true;\n+    };\n+\n+    template < typename T1, typename T2 >\n+    auto\n+    add(T1 a1, T2 a2) -> decltype(a1 + a2)\n+    {\n+      return a1 + a2;\n+    }\n+\n+    int\n+    test(const int c, volatile int v)\n+    {\n+      static_assert(is_same<int, decltype(0)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(c)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(v)>::value == false, \"\");\n+      auto ac = c;\n+      auto av = v;\n+      auto sumi = ac + av + 'x';\n+      auto sumf = ac + av + 1.0;\n+      static_assert(is_same<int, decltype(ac)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(av)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumi)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumf)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(add(c, v))>::value == true, \"\");\n+      return (sumf > 0.0) ? sumi : add(c, v);\n+    }\n+\n+  }\n+\n+  namespace test_noexcept\n+  {\n+\n+    int f() { return 0; }\n+    int g() noexcept { return 0; }\n+\n+    static_assert(noexcept(f()) == false, \"\");\n+    static_assert(noexcept(g()) == true, \"\");\n+\n+  }\n+\n+  namespace test_constexpr\n+  {\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c_r(const CharT *const s, const unsigned long acc) noexcept\n+    {\n+      return *s ? strlen_c_r(s + 1, acc + 1) : acc;\n+    }\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      return strlen_c_r(s, 0UL);\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"1\") == 1UL, \"\");\n+    static_assert(strlen_c(\"example\") == 7UL, \"\");\n+    static_assert(strlen_c(\"another\\0example\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_rvalue_references\n+  {\n+\n+    template < int N >\n+    struct answer\n+    {\n+      static constexpr int value = N;\n+    };\n+\n+    answer<1> f(int&)       { return answer<1>(); }\n+    answer<2> f(const int&) { return answer<2>(); }\n+    answer<3> f(int&&)      { return answer<3>(); }\n+\n+    void\n+    test()\n+    {\n+      int i = 0;\n+      const int c = 0;\n+      static_assert(decltype(f(i))::value == 1, \"\");\n+      static_assert(decltype(f(c))::value == 2, \"\");\n+      static_assert(decltype(f(0))::value == 3, \"\");\n+    }\n+\n+  }\n+\n+  namespace test_uniform_initialization\n+  {\n+\n+    struct test\n+    {\n+      static const int zero {};\n+      static const int one {1};\n+    };\n+\n+    static_assert(test::zero == 0, \"\");\n+    static_assert(test::one == 1, \"\");\n+\n+  }\n+\n+  namespace test_lambdas\n+  {\n+\n+    void\n+    test1()\n+    {\n+      auto lambda1 = [](){};\n+      auto lambda2 = lambda1;\n+      lambda1();\n+      lambda2();\n+    }\n+\n+    int\n+    test2()\n+    {\n+      auto a = [](int i, int j){ return i + j; }(1, 2);\n+      auto b = []() -> int { return '0'; }();\n+      auto c = [=](){ return a + b; }();\n+      auto d = [&](){ return c; }();\n+      auto e = [a, &b](int x) mutable {\n+        const auto identity = [](int y){ return y; };\n+        for (auto i = 0; i < a; ++i)\n+          a += b--;\n+        return x + identity(a + b);\n+      }(0);\n+      return a + b + c + d + e;\n+    }\n+\n+    int\n+    test3()\n+    {\n+      const auto nullary = [](){ return 0; };\n+      const auto unary = [](int x){ return x; };\n+      using nullary_t = decltype(nullary);\n+      using unary_t = decltype(unary);\n+      const auto higher1st = [](nullary_t f){ return f(); };\n+      const auto higher2nd = [unary](nullary_t f1){\n+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };\n+      };\n+      return higher1st(nullary) + higher2nd(nullary)(unary);\n+    }\n+\n+  }\n+\n+  namespace test_variadic_templates\n+  {\n+\n+    template <int...>\n+    struct sum;\n+\n+    template <int N0, int... N1toN>\n+    struct sum<N0, N1toN...>\n+    {\n+      static constexpr auto value = N0 + sum<N1toN...>::value;\n+    };\n+\n+    template <>\n+    struct sum<>\n+    {\n+      static constexpr auto value = 0;\n+    };\n+\n+    static_assert(sum<>::value == 0, \"\");\n+    static_assert(sum<1>::value == 1, \"\");\n+    static_assert(sum<23>::value == 23, \"\");\n+    static_assert(sum<1, 2>::value == 3, \"\");\n+    static_assert(sum<5, 5, 11>::value == 21, \"\");\n+    static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, \"\");\n+\n+  }\n+\n+  // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae\n+  // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function\n+  // because of this.\n+  namespace test_template_alias_sfinae\n+  {\n+\n+    struct foo {};\n+\n+    template<typename T>\n+    using member = typename T::member_type;\n+\n+    template<typename T>\n+    void func(...) {}\n+\n+    template<typename T>\n+    void func(member<T>*) {}\n+\n+    void test();\n+\n+    void test() { func<foo>(0); }\n+\n+  }\n+\n+}  // namespace cxx11\n+\n+#endif  // __cplusplus >= 201103L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++14\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_14], [[\n+\n+// If the compiler admits that it is not ready for C++14, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201402L\n+\n+#error \"This is not a C++14 compiler\"\n+\n+#else\n+\n+namespace cxx14\n+{\n+\n+  namespace test_polymorphic_lambdas\n+  {\n+\n+    int\n+    test()\n+    {\n+      const auto lambda = [](auto&&... args){\n+        const auto istiny = [](auto x){\n+          return (sizeof(x) == 1UL) ? 1 : 0;\n+        };\n+        const int aretiny[] = { istiny(args)... };\n+        return aretiny[0];\n+      };\n+      return lambda(1, 1L, 1.0f, '1');\n+    }\n+\n+  }\n+\n+  namespace test_binary_literals\n+  {\n+\n+    constexpr auto ivii = 0b0000000000101010;\n+    static_assert(ivii == 42, \"wrong value\");\n+\n+  }\n+\n+  namespace test_generalized_constexpr\n+  {\n+\n+    template < typename CharT >\n+    constexpr unsigned long\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      auto length = 0UL;\n+      for (auto p = s; *p; ++p)\n+        ++length;\n+      return length;\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"x\") == 1UL, \"\");\n+    static_assert(strlen_c(\"test\") == 4UL, \"\");\n+    static_assert(strlen_c(\"another\\0test\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_lambda_init_capture\n+  {\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      const auto lambda1 = [a = x](int b){ return a + b; };\n+      const auto lambda2 = [a = lambda1(x)](){ return a; };\n+      return lambda2();\n+    }\n+\n+  }\n+\n+  namespace test_digit_seperators\n+  {\n+\n+    constexpr auto ten_million = 100'000'000;\n+    static_assert(ten_million == 100000000, \"\");\n+\n+  }\n+\n+  namespace test_return_type_deduction\n+  {\n+\n+    auto f(int& x) { return x; }\n+    decltype(auto) g(int& x) { return x; }\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static constexpr auto value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static constexpr auto value = true;\n+    };\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      static_assert(is_same<int, decltype(f(x))>::value, \"\");\n+      static_assert(is_same<int&, decltype(g(x))>::value, \"\");\n+      return x;\n+    }\n+\n+  }\n+\n+}  // namespace cxx14\n+\n+#endif  // __cplusplus >= 201402L\n+\n+]])"
      },
      {
        "sha": "4c4051ea376f720faf21a4705c66604fe444c958",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 275,
        "deletions": 275,
        "changes": 550,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -82,7 +82,7 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 22\n+#serial 23\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n@@ -100,22 +100,22 @@ ax_pthread_ok=no\n # etcetera environment variables, and if threads linking works using\n # them:\n if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n-\tax_pthread_save_CC=\"$CC\"\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tAS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\tAC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n-\tAC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n-\tAC_MSG_RESULT([$ax_pthread_ok])\n-\tif test \"x$ax_pthread_ok\" = \"xno\"; then\n-\t\tPTHREAD_LIBS=\"\"\n-\t\tPTHREAD_CFLAGS=\"\"\n-\tfi\n-\tCC=\"$ax_pthread_save_CC\"\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n+        ax_pthread_save_CC=\"$CC\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        AS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        if test \"x$ax_pthread_ok\" = \"xno\"; then\n+                PTHREAD_LIBS=\"\"\n+                PTHREAD_CFLAGS=\"\"\n+        fi\n+        CC=\"$ax_pthread_save_CC\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n fi\n \n # We must check for the threads library under a number of different\n@@ -152,50 +152,50 @@ ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --\n \n case $host_os in\n \n-\tfreebsd*)\n+        freebsd*)\n \n-\t# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n-\t# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n \n-\tax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+        ;;\n \n-\thpux*)\n+        hpux*)\n \n-\t# From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n-\t# multi-threading and also sets -lpthread.\"\n+        # From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+        # multi-threading and also sets -lpthread.\"\n \n-\tax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+        ;;\n \n-\topenedition*)\n+        openedition*)\n \n-\t# IBM z/OS requires a feature-test macro to be defined in order to\n-\t# enable POSIX threads at all, so give the user a hint if this is\n-\t# not set. (We don't define these ourselves, as they can affect\n-\t# other portions of the system API in unpredictable ways.)\n+        # IBM z/OS requires a feature-test macro to be defined in order to\n+        # enable POSIX threads at all, so give the user a hint if this is\n+        # not set. (We don't define these ourselves, as they can affect\n+        # other portions of the system API in unpredictable ways.)\n \n-\tAC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n-\t    [\n-#\t     if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n-\t     AX_PTHREAD_ZOS_MISSING\n-#\t     endif\n-\t    ],\n-\t    [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n-\t;;\n+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+            [\n+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+             AX_PTHREAD_ZOS_MISSING\n+#            endif\n+            ],\n+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+        ;;\n \n-\tsolaris*)\n+        solaris*)\n \n-\t# On Solaris (at least, for some versions), libc contains stubbed\n-\t# (non-functional) versions of the pthreads routines, so link-based\n-\t# tests will erroneously succeed. (N.B.: The stubs are missing\n-\t# pthread_cleanup_push, or rather a function called by this macro,\n-\t# so we could check for that, but who knows whether they'll stub\n-\t# that too in a future libc.)  So we'll check first for the\n-\t# standard Solaris way of linking pthreads (-mt -lpthread).\n+        # On Solaris (at least, for some versions), libc contains stubbed\n+        # (non-functional) versions of the pthreads routines, so link-based\n+        # tests will erroneously succeed. (N.B.: The stubs are missing\n+        # pthread_cleanup_push, or rather a function called by this macro,\n+        # so we could check for that, but who knows whether they'll stub\n+        # that too in a future libc.)  So we'll check first for the\n+        # standard Solaris way of linking pthreads (-mt -lpthread).\n \n-\tax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ;;\n esac\n \n # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n@@ -208,17 +208,17 @@ AS_IF([test \"x$GCC\" = \"xyes\"],\n # correctly enabled\n \n case $host_os in\n-\tdarwin* | hpux* | linux* | osf* | solaris*)\n-\tax_pthread_check_macro=\"_REENTRANT\"\n-\t;;\n+        darwin* | hpux* | linux* | osf* | solaris*)\n+        ax_pthread_check_macro=\"_REENTRANT\"\n+        ;;\n \n-\taix* | freebsd*)\n-\tax_pthread_check_macro=\"_THREAD_SAFE\"\n-\t;;\n+        aix*)\n+        ax_pthread_check_macro=\"_THREAD_SAFE\"\n+        ;;\n \n-\t*)\n-\tax_pthread_check_macro=\"--\"\n-\t;;\n+        *)\n+        ax_pthread_check_macro=\"--\"\n+        ;;\n esac\n AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n       [ax_pthread_check_cond=0],\n@@ -231,13 +231,13 @@ AC_CACHE_CHECK([whether $CC is Clang],\n     [ax_cv_PTHREAD_CLANG=no\n      # Note that Autoconf sets GCC=yes for Clang as well as GCC\n      if test \"x$GCC\" = \"xyes\"; then\n-\tAC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n-\t    [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n-#\t     if defined(__clang__) && defined(__llvm__)\n-\t     AX_PTHREAD_CC_IS_CLANG\n-#\t     endif\n-\t    ],\n-\t    [ax_cv_PTHREAD_CLANG=yes])\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n      fi\n     ])\n ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n@@ -249,222 +249,222 @@ ax_pthread_clang_warning=no\n \n if test \"x$ax_pthread_clang\" = \"xyes\"; then\n \n-\t# Clang takes -pthread; it has never supported any other flag\n-\n-\t# (Note 1: This will need to be revisited if a system that Clang\n-\t# supports has POSIX threads in a separate library.  This tends not\n-\t# to be the way of modern systems, but it's conceivable.)\n-\n-\t# (Note 2: On some systems, notably Darwin, -pthread is not needed\n-\t# to get POSIX threads support; the API is always present and\n-\t# active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n-\t# -pthread does define _REENTRANT, and while the Darwin headers\n-\t# ignore this macro, third-party headers might not.)\n-\n-\tPTHREAD_CFLAGS=\"-pthread\"\n-\tPTHREAD_LIBS=\n-\n-\tax_pthread_ok=yes\n-\n-\t# However, older versions of Clang make a point of warning the user\n-\t# that, in an invocation where only linking and no compilation is\n-\t# taking place, the -pthread option has no effect (\"argument unused\n-\t# during compilation\").  They expect -pthread to be passed in only\n-\t# when source code is being compiled.\n-\t#\n-\t# Problem is, this is at odds with the way Automake and most other\n-\t# C build frameworks function, which is that the same flags used in\n-\t# compilation (CFLAGS) are also used in linking.  Many systems\n-\t# supported by AX_PTHREAD require exactly this for POSIX threads\n-\t# support, and in fact it is often not straightforward to specify a\n-\t# flag that is used only in the compilation phase and not in\n-\t# linking.  Such a scenario is extremely rare in practice.\n-\t#\n-\t# Even though use of the -pthread flag in linking would only print\n-\t# a warning, this can be a nuisance for well-run software projects\n-\t# that build with -Werror.  So if the active version of Clang has\n-\t# this misfeature, we search for an option to squash it.\n-\n-\tAC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n-\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n-\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n-\t     # Create an alternate version of $ac_link that compiles and\n-\t     # links in two steps (.c -> .o, .o -> exe) instead of one\n-\t     # (.c -> exe), because the warning occurs only in the second\n-\t     # step\n-\t     ax_pthread_save_ac_link=\"$ac_link\"\n-\t     ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n-\t     ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n-\t     ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n-\t     ax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\t     for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n-\t\tAS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n-\t\tCFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n-\t\tac_link=\"$ax_pthread_save_ac_link\"\n-\t\tAC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n-\t\t    [ac_link=\"$ax_pthread_2step_ac_link\"\n-\t\t     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n-\t\t\t [break])\n-\t\t    ])\n-\t     done\n-\t     ac_link=\"$ax_pthread_save_ac_link\"\n-\t     CFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\t     AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n-\t     ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n-\t    ])\n-\n-\tcase \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n-\t\tno | unknown) ;;\n-\t\t*) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n-\tesac\n+        # Clang takes -pthread; it has never supported any other flag\n+\n+        # (Note 1: This will need to be revisited if a system that Clang\n+        # supports has POSIX threads in a separate library.  This tends not\n+        # to be the way of modern systems, but it's conceivable.)\n+\n+        # (Note 2: On some systems, notably Darwin, -pthread is not needed\n+        # to get POSIX threads support; the API is always present and\n+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+        # -pthread does define _REENTRANT, and while the Darwin headers\n+        # ignore this macro, third-party headers might not.)\n+\n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n+        # However, older versions of Clang make a point of warning the user\n+        # that, in an invocation where only linking and no compilation is\n+        # taking place, the -pthread option has no effect (\"argument unused\n+        # during compilation\").  They expect -pthread to be passed in only\n+        # when source code is being compiled.\n+        #\n+        # Problem is, this is at odds with the way Automake and most other\n+        # C build frameworks function, which is that the same flags used in\n+        # compilation (CFLAGS) are also used in linking.  Many systems\n+        # supported by AX_PTHREAD require exactly this for POSIX threads\n+        # support, and in fact it is often not straightforward to specify a\n+        # flag that is used only in the compilation phase and not in\n+        # linking.  Such a scenario is extremely rare in practice.\n+        #\n+        # Even though use of the -pthread flag in linking would only print\n+        # a warning, this can be a nuisance for well-run software projects\n+        # that build with -Werror.  So if the active version of Clang has\n+        # this misfeature, we search for an option to squash it.\n+\n+        AC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+             # Create an alternate version of $ac_link that compiles and\n+             # links in two steps (.c -> .o, .o -> exe) instead of one\n+             # (.c -> exe), because the warning occurs only in the second\n+             # step\n+             ax_pthread_save_ac_link=\"$ac_link\"\n+             ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+             ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+             ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+             ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+                AS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+                CFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+                ac_link=\"$ax_pthread_save_ac_link\"\n+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                    [ac_link=\"$ax_pthread_2step_ac_link\"\n+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                         [break])\n+                    ])\n+             done\n+             ac_link=\"$ax_pthread_save_ac_link\"\n+             CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+             AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+            ])\n+\n+        case \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+                no | unknown) ;;\n+                *) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+        esac\n \n fi # $ax_pthread_clang = yes\n \n if test \"x$ax_pthread_ok\" = \"xno\"; then\n for ax_pthread_try_flag in $ax_pthread_flags; do\n \n-\tcase $ax_pthread_try_flag in\n-\t\tnone)\n-\t\tAC_MSG_CHECKING([whether pthreads work without any flags])\n-\t\t;;\n-\n-\t\t-mt,pthread)\n-\t\tAC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n-\t\tPTHREAD_CFLAGS=\"-mt\"\n-\t\tPTHREAD_LIBS=\"-lpthread\"\n-\t\t;;\n-\n-\t\t-*)\n-\t\tAC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n-\t\tPTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n-\t\t;;\n-\n-\t\tpthread-config)\n-\t\tAC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-\t\tAS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n-\t\tPTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n-\t\tPTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n-\t\t;;\n-\n-\t\t*)\n-\t\tAC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n-\t\tPTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n-\t\t;;\n-\tesac\n-\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-\t# Check for various functions.  We must include pthread.h,\n-\t# since some functions may be macros.  (On the Sequent, we\n-\t# need a special flag -Kthread to make this header compile.)\n-\t# We check for pthread_join because it is in -lpthread on IRIX\n-\t# while pthread_create is in libc.  We check for pthread_attr_init\n-\t# due to DEC craziness with -lpthreads.  We check for\n-\t# pthread_cleanup_push because it is one of the few pthread\n-\t# functions on Solaris that doesn't have a non-functional libc stub.\n-\t# We try pthread_create on general principles.\n-\n-\tAC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n-#\t\t\tif $ax_pthread_check_cond\n-#\t\t\t error \"$ax_pthread_check_macro must be defined\"\n-#\t\t\tendif\n-\t\t\tstatic void routine(void *a) { a = 0; }\n-\t\t\tstatic void *start_routine(void *a) { return a; }],\n-\t\t       [pthread_t th; pthread_attr_t attr;\n-\t\t\tpthread_create(&th, 0, start_routine, 0);\n-\t\t\tpthread_join(th, 0);\n-\t\t\tpthread_attr_init(&attr);\n-\t\t\tpthread_cleanup_push(routine, 0);\n-\t\t\tpthread_cleanup_pop(0) /* ; */])],\n-\t    [ax_pthread_ok=yes],\n-\t    [])\n-\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n-\n-\tAC_MSG_RESULT([$ax_pthread_ok])\n-\tAS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n-\n-\tPTHREAD_LIBS=\"\"\n-\tPTHREAD_CFLAGS=\"\"\n+        case $ax_pthread_try_flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n+\n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+                ;;\n+        esac\n+\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n+                        static void routine(void *a) { a = 0; }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+            [ax_pthread_ok=yes],\n+            [])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n done\n fi\n \n # Various other checks:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-\t# Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n-\tAC_CACHE_CHECK([for joinable pthread attribute],\n-\t    [ax_cv_PTHREAD_JOINABLE_ATTR],\n-\t    [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n-\t     for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n-\t\t AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n-\t\t\t\t\t\t [int attr = $ax_pthread_attr; return attr /* ; */])],\n-\t\t\t\t[ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n-\t\t\t\t[])\n-\t     done\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n-\t       test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n-\t       test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n-\t      [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n-\t\t\t\t  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n-\t\t\t\t  [Define to necessary symbol if this constant\n-\t\t\t\t   uses a non-standard name on your system.])\n-\t       ax_pthread_joinable_attr_defined=yes\n-\t      ])\n-\n-\tAC_CACHE_CHECK([whether more special flags are required for pthreads],\n-\t    [ax_cv_PTHREAD_SPECIAL_FLAGS],\n-\t    [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n-\t     case $host_os in\n-\t     solaris*)\n-\t     ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n-\t     ;;\n-\t     esac\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n-\t       test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n-\t      [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n-\t       ax_pthread_special_flags_added=yes])\n-\n-\tAC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n-\t    [ax_cv_PTHREAD_PRIO_INHERIT],\n-\t    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-\t\t\t\t\t     [[int i = PTHREAD_PRIO_INHERIT;]])],\n-\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n-\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n-\t       test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n-\t      [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n-\t       ax_pthread_prio_inherit_defined=yes\n-\t      ])\n-\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n-\n-\t# More AIX lossage: compile with *_r variant\n-\tif test \"x$GCC\" != \"xyes\"; then\n-\t    case $host_os in\n-\t\taix*)\n-\t\tAS_CASE([\"x/$CC\"],\n-\t\t    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n-\t\t    [#handle absolute path differently from PATH based program lookup\n-\t\t     AS_CASE([\"x$CC\"],\n-\t\t\t [x/*],\n-\t\t\t [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n-\t\t\t [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n-\t\t;;\n-\t    esac\n-\tfi\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n+        AC_CACHE_CHECK([for joinable pthread attribute],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],\n+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+                                [])\n+             done\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+               test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+               test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+                                  [Define to necessary symbol if this constant\n+                                   uses a non-standard name on your system.])\n+               ax_pthread_joinable_attr_defined=yes\n+              ])\n+\n+        AC_CACHE_CHECK([whether more special flags are required for pthreads],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+             case $host_os in\n+             solaris*)\n+             ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+             ;;\n+             esac\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+               test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+              [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+               ax_pthread_special_flags_added=yes])\n+\n+        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n+            [ax_cv_PTHREAD_PRIO_INHERIT],\n+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+               test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+               ax_pthread_prio_inherit_defined=yes\n+              ])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        # More AIX lossage: compile with *_r variant\n+        if test \"x$GCC\" != \"xyes\"; then\n+            case $host_os in\n+                aix*)\n+                AS_CASE([\"x/$CC\"],\n+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                    [#handle absolute path differently from PATH based program lookup\n+                     AS_CASE([\"x$CC\"],\n+                         [x/*],\n+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                ;;\n+            esac\n+        fi\n fi\n \n test -n \"$PTHREAD_CC\" || PTHREAD_CC=\"$CC\"\n@@ -475,11 +475,11 @@ AC_SUBST([PTHREAD_CC])\n \n # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n-\tifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n-\t:\n+        ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n+        :\n else\n-\tax_pthread_ok=no\n-\t$2\n+        ax_pthread_ok=no\n+        $2\n fi\n AC_LANG_POP\n ])dnl AX_PTHREAD"
      },
      {
        "sha": "74d910267462e4f10a01e12b82f006a796fb7d13",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -342,6 +342,10 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n        elif test x$TARGET_OS = xdarwin; then\n          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n        fi\n+     else\n+       if ${PKG_CONFIG} --exists \"Qt5Core >= 5.6\" 2>/dev/null; then\n+         QT_LIBS=\"-lQt5PlatformSupport $QT_LIBS\"\n+       fi\n      fi\n      ])\n   else"
      },
      {
        "sha": "97af58bd7cd851eaa597361ac44b0f014a9ea8ed",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -55,6 +55,8 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n dnl Libtool init checks.\n LT_INIT([pic-only])\n \n@@ -73,6 +75,7 @@ AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n+AC_PATH_TOOL(OBJCOPY, objcopy)\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n@@ -185,6 +188,9 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+AC_LANG_PUSH([C++])\n+AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n+\n if test \"x$enable_debug\" = xyes; then\n     CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n@@ -196,11 +202,19 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n-## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n-##       compatibility with the legacy buildsystem.\n-##\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign\"\n+  AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n+  ## set the -Wno-foo case if it works.\n+  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wself-assign],[CXXFLAGS=\"$CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n fi\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n@@ -222,8 +236,6 @@ AC_ARG_WITH([daemon],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n-AC_LANG_PUSH([C++])\n-\n use_pkgconfig=yes\n case $host in\n   *mingw*)\n@@ -267,7 +279,7 @@ case $host in\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_WINDOWS\"\n      if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n        CXXFLAGS=\"$CXXFLAGS -w\"\n      fi\n@@ -289,7 +301,7 @@ case $host in\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_MACOSX\"\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n        AC_CHECK_PROG([PORT],port, port)\n@@ -355,8 +367,11 @@ case $host in\n      ;;\n    *linux*)\n      TARGET_OS=linux\n+     LEVELDB_TARGET_FLAGS=\"-DOS_LINUX\"\n      ;;\n    *)\n+     OTHER_OS=`echo ${host_os} | awk '{print toupper($0)}'`\n+     LEVELDB_TARGET_FLAGS=\"-DOS_${OTHER_OS}\"\n      ;;\n esac\n \n@@ -1046,6 +1061,8 @@ AC_SUBST(MINIUPNPC_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n+AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen."
      },
      {
        "sha": "a23b197cc61220842acd971b429807d7ac92a83e",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -51,5 +51,5 @@ Test and Verify Tools\n ### [TestGen](/contrib/testgen) ###\n Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n-### [Verify SF Binaries](/contrib/verifysfbinaries) ###\n-This script attempts to download and verify the signature file SHA256SUMS.asc from SourceForge.\n+### [Verify Binaries](/contrib/verifybinaries) ###\n+This script attempts to download and verify the signature file SHA256SUMS.asc from bitcoin.org."
      },
      {
        "sha": "bb8b9246b87815a988a6290a94ee4214c74467c2",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -48,9 +48,9 @@ the commit it claims to have been updated to.\n \n To use, make sure that you have fetched the upstream repository branch in which the subtree is\n maintained:\n-* for `src/secp256k1`: https://github.com/bitcoin/secp256k1.git (branch master)\n-* for `src/leveldb`: https://github.com/bitcoin/leveldb.git (branch bitcoin-fork)\n-* for `src/univalue`: https://github.com/bitcoin/univalue.git (branch master)\n+* for `src/secp256k1`: https://github.com/bitcoin-core/secp256k1.git (branch master)\n+* for `src/leveldb`: https://github.com/bitcoin-core/leveldb.git (branch bitcoin-fork)\n+* for `src/univalue`: https://github.com/bitcoin-core/univalue.git (branch master)\n \n Usage: `git-subtree-check.sh DIR COMMIT`\n "
      },
      {
        "sha": "deda49cc541043d0a05aee05038c69ee1dee51b3",
        "filename": "contrib/devtools/split-debug.sh.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/devtools/split-debug.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/devtools/split-debug.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/split-debug.sh.in?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,10 @@\n+#!/bin/sh\n+\n+if [ $# -ne 3 ];\n+    then echo \"usage: $0 <input> <stripped-binary> <debug-binary>\"\n+fi\n+\n+@OBJCOPY@ --enable-deterministic-archives -p --only-keep-debug $1 $3\n+@OBJCOPY@ --enable-deterministic-archives -p --strip-debug $1 $2\n+@STRIP@ --enable-deterministic-archives -p -s $2\n+@OBJCOPY@ --enable-deterministic-archives -p --add-gnu-debuglink=$3 $2"
      },
      {
        "sha": "a2788c9d761690bde12c2d1f3220a1283d0e7b5e",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 61,
        "deletions": 19,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,30 +5,48 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n+packages:\n - \"curl\"\n-- \"g++-multilib\"\n+- \"g++-aarch64-linux-gnu\"\n+- \"g++-4.8-aarch64-linux-gnu\"\n+- \"gcc-4.8-aarch64-linux-gnu\"\n+- \"binutils-aarch64-linux-gnu\"\n+- \"g++-arm-linux-gnueabihf\"\n+- \"g++-4.8-arm-linux-gnueabihf\"\n+- \"gcc-4.8-arm-linux-gnueabihf\"\n+- \"binutils-arm-linux-gnueabihf\"\n+- \"g++-4.8-multilib\"\n+- \"gcc-4.8-multilib\"\n+- \"binutils-gold\"\n - \"git-core\"\n - \"pkg-config\"\n - \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n-- \"binutils-gold\"\n - \"ca-certificates\"\n - \"python\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+\n+  #unlock sudo\n+  echo \"ubuntu\" | sudo -S true\n+\n+  sudo mkdir -p /usr/include/i386-linux-gnu/\n+  sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/i386-linux-gnu/asm\n+\n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests LDFLAGS=-static-libstdc++\"\n+  HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n   FAKETIME_HOST_PROGS=\"\"\n-  FAKETIME_PROGS=\"date ar ranlib nm strip\"\n+  FAKETIME_PROGS=\"date ar ranlib nm\"\n+  HOST_CFLAGS=\"-O2 -g\"\n+  HOST_CXXFLAGS=\"-O2 -g\"\n+  HOST_LDFLAGS=-static-libstdc++\n \n   export QT_RCC_TEST=1\n   export GZIP=\"-9n\"\n@@ -42,27 +60,34 @@ script: |\n     mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n   fi\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n@@ -72,9 +97,15 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -95,20 +126,31 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n-    make ${MAKEOPTS} -C src check-symbols\n-    make install-strip\n+\n+    #TODO: This is a quick hack that disables symbol checking for arm.\n+    #      Instead, we should investigate why these are popping up.\n+    #      For aarch64, we'll need to bump up the min GLIBC version, as the abi\n+    #      support wasn't introduced until 2.17.\n+    case $i in\n+       aarch64-*) : ;;\n+       arm-*) : ;;\n+       *) make ${MAKEOPTS} -C src check-symbols ;;\n+    esac\n+\n+    make install DESTDIR=${INSTALLPATH}\n     cd installed\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     cd ../../\n+    rm -rf distsrc-${i}\n   done\n   mkdir -p $OUTDIR/src\n   mv $SOURCEDIST $OUTDIR/src\n-  mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-linux64.tar.gz\n-  mv ${OUTDIR}/${DISTNAME}-i686-*.tar.gz ${OUTDIR}/${DISTNAME}-linux32.tar.gz\n-"
      },
      {
        "sha": "f6e9414ab1bf2ec0fa0f098fa62972bb06281f43",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -6,9 +6,8 @@ architectures:\n - \"amd64\"\n packages:\n - \"faketime\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n@@ -34,5 +33,5 @@ script: |\n   tar -xf ${UNSIGNED}\n   OSX_VOLNAME=\"$(cat osx_volname)\"\n   ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n-  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -apple -o uncompressed.dmg signed-app\n+  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -apple -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "991976d59eaa067143af065830859e63aaf92488",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,7 +5,7 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n+packages:\n - \"ca-certificates\"\n - \"curl\"\n - \"g++\"\n@@ -27,12 +27,11 @@ packages:\n - \"python-dev\"\n - \"python-setuptools\"\n - \"fonts-tuffy\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.9.sdk.tar.gz\"\n+- \"MacOSX10.11.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n@@ -54,43 +53,56 @@ script: |\n \n   export ZERO_AR_DATE=1\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.11.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -112,9 +124,9 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n-    make install-strip\n+    make install-strip DESTDIR=${INSTALLPATH}\n \n     make osx_volname\n     make deploydir"
      },
      {
        "sha": "3c1e0214a0aa6bfd31c54fabfdc444aad705c0b0",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -7,9 +7,8 @@ architectures:\n packages:\n - \"libssl-dev\"\n - \"autoconf\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n files:\n - \"osslsigncode-1.7.1.tar.gz\""
      },
      {
        "sha": "32b57b3160bd34013bf4fb99e340301c9314066e",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 37,
        "deletions": 15,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,7 +5,7 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n+packages:\n - \"curl\"\n - \"g++\"\n - \"git-core\"\n@@ -21,17 +21,18 @@ packages:\n - \"zip\"\n - \"ca-certificates\"\n - \"python\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-gui-tests\"\n-  FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip objcopy\"\n   FAKETIME_PROGS=\"date makensis zip\"\n+  HOST_CFLAGS=\"-O2 -g\"\n+  HOST_CXXFLAGS=\"-O2 -g\"\n \n   export QT_RCC_TEST=1\n   export GZIP=\"-9n\"\n@@ -45,29 +46,31 @@ script: |\n     mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n   fi\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n \n-  # Create per-host linker wrapper\n+  function create_per-host_linker_wrapper {\n   # This is only needed for trusty, as the mingw linker leaks a few bytes of\n   # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900\n   for i in $HOSTS; do\n@@ -83,13 +86,19 @@ script: |\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n \n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_linker_wrapper \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n@@ -99,9 +108,16 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_linker_wrapper \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -125,22 +141,28 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n     make deploy\n-    make install-strip\n+    make install DESTDIR=${INSTALLPATH}\n     cp -f bitcoin-*setup*.exe $OUTDIR/\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n-    cd ../..\n+    find ${DISTNAME}/bin -type f -executable -exec ${i}-objcopy --only-keep-debug {} {}.dbg \\; -exec ${i}-strip -s {} \\; -exec ${i}-objcopy --add-gnu-debuglink={}.dbg {} \\;\n+    find ${DISTNAME}/lib -type f -exec ${i}-objcopy --only-keep-debug {} {}.dbg \\; -exec ${i}-strip -s {} \\; -exec ${i}-objcopy --add-gnu-debuglink={}.dbg {} \\;\n+    find ${DISTNAME} -not -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip\n+    cd ../../\n+    rm -rf distsrc-${i}\n   done\n   cd $OUTDIR\n   rename 's/-setup\\.exe$/-setup-unsigned.exe/' *-setup.exe\n   find . -name \"*-setup-unsigned.exe\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n+  mv ${OUTDIR}/${DISTNAME}-x86_64-*-debug.zip ${OUTDIR}/${DISTNAME}-win64-debug.zip\n+  mv ${OUTDIR}/${DISTNAME}-i686-*-debug.zip ${OUTDIR}/${DISTNAME}-win32-debug.zip\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n   mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip"
      },
      {
        "sha": "a2d34e75e1c16c17cb721633038813800dbe45b3",
        "filename": "contrib/gitian-keys/luke-jr-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-keys/luke-jr-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/gitian-keys/luke-jr-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/luke-jr-key.pgp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "f8201e72c649dd6f2f111ed136436c3c5d770762",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -210,8 +210,8 @@ def getFrameworks(binaryPath, verbose):\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n             raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n-    \n-    otoolLines = o_stdout.split(\"\\n\")\n+\n+    otoolLines = o_stdout.decode().split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -676,7 +676,7 @@ if verbose >= 2:\n     print(\"+ Installing qt.conf +\")\n \n f = open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\")\n-f.write(qt_conf)\n+f.write(qt_conf.encode())\n f.close()\n \n # ------------------------------------------------"
      },
      {
        "sha": "e9e3f65da292a5bd80377f43cbc21cdb9e7f2c37",
        "filename": "contrib/verify-commits/README.md",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,26 @@\n+Tooling for verification of PGP signed commits\n+----------------------------------------------\n+\n+This is an incomplete work in progress, but currently includes a pre-push hook\n+script (`pre-push-hook.sh`) for maintainers to ensure that their own commits\n+are PGP signed (nearly always merge commits), as well as a script to verify\n+commits against a trusted keys list.\n+\n+\n+Using verify-commits.sh safely\n+------------------------------\n+\n+Remember that you can't use an untrusted script to verify itself. This means\n+that checking out code, then running `verify-commits.sh` against `HEAD` is\n+_not_ safe, because the version of `verify-commits.sh` that you just ran could\n+be backdoored. Instead, you need to use a trusted version of verify-commits\n+prior to checkout to make sure you're checking out only code signed by trusted\n+keys:\n+\n+    git fetch origin && \\\n+      ./contrib/verify-commits/verify-commits.sh origin/master && \\\n+      git checkout origin/master\n+\n+Note that the above isn't a good UI/UX yet, and needs significant improvements\n+to make it more convenient and reduce the chance of errors; pull-reqs\n+improving this process would be much appreciated."
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,2 +0,0 @@\n-586a29253dabec3ca0f1ccba9091daabd16b8411\n-eddaba7b5692288087a926da5733e86b47274e4e"
      },
      {
        "sha": "375d71172570773c38647c2f58bdbfa5aa41384f",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,9 @@\n #!/bin/sh\n-INPUT=$(</dev/stdin)\n+INPUT=$(cat /dev/stdin)\n VALID=false\n REVSIG=false\n-IFS=$'\\n'\n+IFS='\n+'\n for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n \tcase \"$LINE\" in\n \t\"[GNUPG:] VALIDSIG \"*)\n@@ -13,10 +14,9 @@ for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n \t\"[GNUPG:] REVKEYSIG \"*)\n \t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n \t\twhile read KEY; do\n-\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY:24:40} \"*)\n+\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY#????????????????????????} \"*)\n \t\t\t\tREVSIG=true\n-\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY:24:40} \"\n-\t\t\t\t;;\n+\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY#????????????????????????} \"\n \t\t\tesac\n \t\tdone < ./contrib/verify-commits/trusted-keys\n \t\t;;"
      },
      {
        "sha": "c60f8ab695e9c0fb01feafb1c28074cb98ab122d",
        "filename": "contrib/verify-commits/trusted-git-root",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/trusted-git-root",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/trusted-git-root",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-git-root?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1 +1 @@\n-165e323d851cc87213c7673c6f278e87a6f2e752\n+82bcf405f6db1d55b684a1f63a4aabad376cdad7"
      },
      {
        "sha": "75242c2a9760b6c500a38ff62ccacd89c766cb0a",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,7 +1,4 @@\n 71A3B16735405025D447E8F274810B012346C9A6\n-1F4410F6A89268CE3197A84C57896D2FF8F0B657\n-01CDF4627A3B88AAE4A571C87588242FBE38D3A8\n-AF8BE07C7049F3A26B239D5325B3083201782B2F\n-81291FA67D2C379A006A053FEAB5AF94D9E9ABE7\n 3F1888C6DCA92A6499C4911FDBA1A67379A1A931\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC\n+FE09B823E6D83A3BC7983EAA2D7F2372E50FE137"
      },
      {
        "sha": "5219331e2e5bc7da41ac1175662ba0800bfea62a",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,33 +1,28 @@\n #!/bin/sh\n+# Not technically POSIX-compliant due to use of \"local\", but almost every\n+# shell anyone uses today supports it, so its probably fine\n \n DIR=$(dirname \"$0\")\n-\n-echo \"Please verify all commits in the following list are not evil:\"\n-git log \"$DIR\"\n+[ \"/${DIR#/}\" != \"$DIR\" ] && DIR=$(dirname \"$(pwd)/$0\")\n \n VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n-\n-IS_REVSIG_ALLOWED () {\n-\twhile read LINE; do\n-\t\t[ \"$LINE\" = \"$1\" ] && return 0\n-\tdone < \"${DIR}/allow-revsig-commits\"\n-\treturn 1\n-}\n+REVSIG_ALLOWED=$(cat \"${DIR}/allow-revsig-commits\")\n \n HAVE_FAILED=false\n IS_SIGNED () {\n \tif [ $1 = $VERIFIED_ROOT ]; then\n \t\treturn 0;\n \tfi\n-\tif IS_REVSIG_ALLOWED \"$1\"; then\n+\tif [ \"${REVSIG_ALLOWED#*$1}\" != \"$REVSIG_ALLOWED\" ]; then\n \t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=1\n \telse\n \t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=0\n \tfi\n \tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit $1 > /dev/null 2>&1; then\n \t\treturn 1;\n \tfi\n-\tlocal PARENTS=$(git show -s --format=format:%P $1)\n+\tlocal PARENTS\n+\tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n \t\tif IS_SIGNED $PARENT > /dev/null; then\n \t\t\treturn 0;"
      },
      {
        "sha": "8970f3daa406ad19a5d1d029346b22826efe6917",
        "filename": "contrib/verifybinaries/README.md",
        "status": "renamed",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,6 +1,13 @@\n-### Verify Binaries ###\n+### Verify Binaries\n This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n \n It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n \n The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+\n+Usage:\n+\n+```sh\n+./verify.sh bitcoin-core-0.11.2\n+./verify.sh bitcoin-core-0.12.0\n+```",
        "previous_filename": "contrib/verifysfbinaries/README.md"
      },
      {
        "sha": "657c3bd33c2e26f150733b2146c066d5e45ee06d",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "renamed",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -23,9 +23,6 @@ BASEDIR=\"https://bitcoin.org/bin/\"\n VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n-#this URL is used if a version number is not specified as an argument to the script\n-SIGNATUREFILE=\"$BASEDIR\"\"$VERSIONPREFIX\"\"0.10.4/\"\"$RCSUBDIR\"\"$SIGNATUREFILENAME\"\n-\n if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n@@ -53,7 +50,8 @@ if [ -n \"$1\" ]; then\n \n    SIGNATUREFILE=\"$BASEDIR$SIGNATUREFILENAME\"\n else\n-   BASEDIR=\"${SIGNATUREFILE%/*}/\"\n+   echo \"Error: need to specify a version on the command line\"\n+   exit 2\n fi\n \n #first we fetch the file containing the signature",
        "previous_filename": "contrib/verifysfbinaries/verify.sh"
      },
      {
        "sha": "6268123dd8e5302917ce1d7e2bc7de8efd2c9b5d",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -3,6 +3,7 @@\n import array\n import binascii\n import zmq\n+import struct\n \n port = 28332\n \n@@ -19,18 +20,21 @@\n         msg = zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]\n-\n+        sequence = \"Unknown\";\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n         if topic == \"hashblock\":\n-            print \"- HASH BLOCK -\"\n+            print '- HASH BLOCK ('+sequence+') -'\n             print binascii.hexlify(body)\n         elif topic == \"hashtx\":\n-            print '- HASH TX -'\n+            print '- HASH TX  ('+sequence+') -'\n             print binascii.hexlify(body)\n         elif topic == \"rawblock\":\n-            print \"- RAW BLOCK HEADER -\"\n+            print '- RAW BLOCK HEADER ('+sequence+') -'\n             print binascii.hexlify(body[:80])\n         elif topic == \"rawtx\":\n-            print '- RAW TX -'\n+            print '- RAW TX ('+sequence+') -'\n             print binascii.hexlify(body)\n \n except KeyboardInterrupt:"
      },
      {
        "sha": "dedb0674cf14974702cefc520b4ad0da309a940b",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -89,13 +89,17 @@ $(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n \n-qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages)\n-qt_native_packages_$(NO_QT) = $(qt_native_packages)\n+qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages)\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n-native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages) $(qt_native_packages_)\n+native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n+\n+ifneq ($(qt_packages_),)\n+native_packages += $(qt_native_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk"
      },
      {
        "sha": "6053c531b46a7130fbc0f5b308d1e7258ecbbe80",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -23,7 +23,8 @@ Common `host-platform-triplets` for cross compilation are:\n - `i686-w64-mingw32` for Win32\n - `x86_64-w64-mingw32` for Win64\n - `x86_64-apple-darwin11` for MacOSX\n-- `arm-linux-gnueabihf` for Linux ARM\n+- `arm-linux-gnueabihf` for Linux ARM 32 bit\n+- `aarch64-linux-gnu` for Linux ARM 64 bit\n \n No other options are needed, the paths are automatically configured.\n "
      },
      {
        "sha": "27f550ab036aeea9ced0a003d40aceaff5e3dc9c",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -11,7 +11,7 @@ build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONN\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)\n-darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION)\n+darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++\n darwin_AR:=$(shell xcrun -f ar)\n darwin_RANLIB:=$(shell xcrun -f ranlib)\n darwin_STRIP:=$(shell xcrun -f strip)"
      },
      {
        "sha": "c4bd827a7bedcf6f78866a27bf01d896c047b516",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2016 Free Software Foundation, Inc.\n \n-timestamp='2016-02-11'\n+timestamp='2016-05-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -186,9 +186,12 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n-\t# to ELF recently, or will in the future.\n+\t# to ELF recently (or will in the future) and ABI.\n \tcase \"${UNAME_MACHINE_ARCH}\" in\n-\t    arm*|earm*|i386|m68k|ns32k|sh3*|sparc|vax)\n+\t    earm*)\n+\t\tos=netbsdelf\n+\t\t;;\n+\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n \t\teval $set_cc_for_build\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n@@ -386,7 +389,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# This test works for both compilers.\n \tif [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t(CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\tgrep IS_64BIT_ARCH >/dev/null\n \t    then\n \t\tSUN_ARCH=x86_64\n@@ -684,7 +687,7 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n@@ -701,7 +704,7 @@ EOF\n \t    # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess\n \t    # => hppa64-hp-hpux11.23\n \n-\t    if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |\n+\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n \t\tgrep -q __LP64__\n \t    then\n \t\tHP_ARCH=hppa2.0w\n@@ -900,7 +903,7 @@ EOF\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n \texit ;;\n     i*86:Minix:*:*)\n \techo ${UNAME_MACHINE}-pc-minix\n@@ -1276,6 +1279,9 @@ EOF\n     SX-8R:SUPER-UX:*:*)\n \techo sx8r-nec-superux${UNAME_RELEASE}\n \texit ;;\n+    SX-ACE:SUPER-UX:*:*)\n+\techo sxace-nec-superux${UNAME_RELEASE}\n+\texit ;;\n     Power*:Rhapsody:*:*)\n \techo powerpc-apple-rhapsody${UNAME_RELEASE}\n \texit ;;\n@@ -1291,7 +1297,7 @@ EOF\n \tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n \t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\t    grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n@@ -1386,7 +1392,7 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'\n+\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n \texit ;;\n     i*86:rdos:*:*)\n \techo ${UNAME_MACHINE}-pc-rdos\n@@ -1405,18 +1411,17 @@ esac\n cat >&2 <<EOF\n $0: unable to guess system type\n \n-This script, last modified $timestamp, has failed to recognize\n-the operating system you are using. It is advised that you\n-download the most up to date version of the config scripts from\n+This script (version $timestamp), has failed to recognize the\n+operating system you are using. If your script is old, overwrite\n+config.guess and config.sub with the latest versions from:\n \n   http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n   http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n-If the version you run ($0) is already up to date, please\n-send the following data and any information you think might be\n-pertinent to <config-patches@gnu.org> in order to provide the needed\n-information to handle your system.\n+If $0 has already been updated, send the following data and any\n+information you think might be pertinent to config-patches@gnu.org to\n+provide the necessary information to handle your system.\n \n config.guess timestamp = $timestamp\n "
      },
      {
        "sha": "e731537bf76bde92e429612dcffa5044ca743f88",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,24 +1,26 @@\n+depends_prefix=\"`dirname ${ac_site_file}`/..\"\n+\n cross_compiling=maybe\n host_alias=@HOST@\n ac_tool_prefix=${host_alias}-\n \n if test -z $with_boost; then\n-  with_boost=$prefix\n+  with_boost=$depends_prefix\n fi\n if test -z $with_qt_plugindir; then\n-  with_qt_plugindir=$prefix/plugins\n+  with_qt_plugindir=$depends_prefix/plugins\n fi\n if test -z $with_qt_translationdir; then\n-  with_qt_translationdir=$prefix/translations\n+  with_qt_translationdir=$depends_prefix/translations\n fi\n if test -z $with_qt_bindir; then\n-  with_qt_bindir=$prefix/native/bin\n+  with_qt_bindir=$depends_prefix/native/bin\n fi\n if test -z $with_protoc_bindir; then\n-  with_protoc_bindir=$prefix/native/bin\n+  with_protoc_bindir=$depends_prefix/native/bin\n fi\n if test -z $with_comparison_tool; then\n-  with_comparison_tool=$prefix/native/share/BitcoindComparisonTool_jar/BitcoindComparisonTool.jar\n+  with_comparison_tool=$depends_prefix/native/share/BitcoindComparisonTool_jar/BitcoindComparisonTool.jar\n fi\n \n \n@@ -41,32 +43,32 @@ fi\n \n if test x@host_os@ = xmingw32; then\n   if test -z $with_qt_incdir; then\n-    with_qt_incdir=$prefix/include\n+    with_qt_incdir=$depends_prefix/include\n   fi\n   if test -z $with_qt_libdir; then\n-    with_qt_libdir=$prefix/lib\n+    with_qt_libdir=$depends_prefix/lib\n   fi\n fi\n \n-PATH=$prefix/native/bin:$PATH\n+PATH=$depends_prefix/native/bin:$PATH\n PKG_CONFIG=\"`which pkg-config` --static\"\n \n # These two need to remain exported because pkg-config does not see them\n # otherwise. That means they must be unexported at the end of configure.ac to\n # avoid ruining the cache. Sigh.\n \n-export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n-export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n+export PKG_CONFIG_LIBDIR=$depends_prefix/lib/pkgconfig\n+export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig\n \n-CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n-LDFLAGS=\"-L$prefix/lib $LDFLAGS\"\n+CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n+LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n \n CC=\"@CC@\"\n CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n OBJCXX=\"${CXX}\"\n-CCACHE=$prefix/native/bin/ccache\n-PYTHONPATH=$prefix/native/lib/python/dist-packages:$PYTHONPATH\n+CCACHE=$depends_prefix/native/bin/ccache\n+PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then\n   AR=@AR@"
      },
      {
        "sha": "6d86a1e2f77b3f89d0ce8efa7741c611aa2d6edf",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -2,7 +2,7 @@\n # Configuration validation subroutine script.\n #   Copyright 1992-2016 Free Software Foundation, Inc.\n \n-timestamp='2016-01-01'\n+timestamp='2016-05-10'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -1399,7 +1399,7 @@ case $os in\n \t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos*)\n+\t      | -onefs* | -tirtos* | -phoenix*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1531,6 +1531,8 @@ case $os in\n \t\t;;\n \t-nacl*)\n \t\t;;\n+\t-ios)\n+\t\t;;\n \t-none)\n \t\t;;\n \t*)"
      },
      {
        "sha": "985649619ffec384ea55f076ff56fba43fd6c2e8",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,9 +1,9 @@\n OSX_MIN_VERSION=10.7\n-OSX_SDK_VERSION=10.9\n+OSX_SDK_VERSION=10.11\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n-LD64_VERSION=241.9\n+LD64_VERSION=253.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n-darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n+darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION) -stdlib=libc++\n \n darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)"
      },
      {
        "sha": "6c9876c2c7c7c0d884f49dd00de58b5a12d42a31",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -9,11 +9,13 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n+$(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_preprocess_cmds\n   sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \\\n-  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c\n+  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c && \\\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub dist\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "ef1307c241b6619f53fc38a68a0d0a93d19fa3f2",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -20,7 +20,7 @@ $(package)_archiver_$(host_os)=$($(package)_ar)\n $(package)_toolset_darwin=darwin\n $(package)_archiver_darwin=$($(package)_libtool)\n $(package)_config_libraries=chrono,filesystem,program_options,system,thread,test\n-$(package)_cxxflags=-fvisibility=hidden\n+$(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n endef\n "
      },
      {
        "sha": "bd2927563850b4c3e45bace08a15af56db4750da",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.1.0\n-$(package)_download_path=http://sourceforge.net/projects/expat/files/expat/$($(package)_version)\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86\n+$(package)_version=2.1.1\n+$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=aff584e5a2f759dcfc6d48671e9529f6afe1e30b0cd6a4cec200cbe3f793de67\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "7cea28ff0bbf926f207745a8710fac3f5fd63041",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,8 @@\n package=freetype\n-$(package)_version=2.5.3\n-$(package)_download_path=http://downloads.sourceforge.net/$(package)\n+$(package)_version=2.6.3\n+$(package)_download_path=http://download.savannah.gnu.org/releases/$(package)\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=c0848b29d52ef3ca27ad92e08351f023c5e24ce8cea7d8fe69fc96358e65f75e\n+$(package)_sha256_hash=371e707aa522acf5b15ce93f11183c725b8ed1ee8546d7b3af549863045863a2\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-zlib --without-png --disable-static"
      },
      {
        "sha": "e34cf7be2f1bf42606c5d6549c1f8022f1780cbe",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20160209\n+$(package)_version=2.0\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=572171eacc1d72537ce47b6f4571260757ab7bcfdaf54c3a55c7f88594d94b6f\n+$(package)_sha256_hash=d434ceb8986efbe199c5ca53f90ed53eab290b1e6d0530b717eb6fa49d61f93b\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "9216e175983a9b8555778d731aa0110ff64ac364",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.2.4\n+$(package)_version=3.2.5\n $(package)_download_path=http://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ffeb967edb549e67da0bd5f44f729a2022de9fdde65dfd80d2a7204d7f75332e\n+$(package)_sha256_hash=7a553809e90faf9de3a23ee9c5b5f786cfd4836bf502744bedb824a24bee1097\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "797480c25eb2f3ff4fd559cb92b4e7a3aae75300",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,14 +1,14 @@\n package=native_cctools\n-$(package)_version=ee31ae567931c426136c94aad457c7b51d844beb\n+$(package)_version=807d6fd1be5d2224872e381870c0a75387fe05e6\n $(package)_download_path=https://github.com/theuni/cctools-port/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=ef107e6ab1b3994cb22e14f4f5c59ea0c0b5a988e6b21d42ed9616b018bbcbf9\n+$(package)_sha256_hash=a09c9ba4684670a0375e42d9d67e7f12c1f62581a27f28f7c825d6d7032ccc6a\n $(package)_build_subdir=cctools\n-$(package)_clang_version=3.3\n+$(package)_clang_version=3.7.1\n $(package)_clang_download_path=http://llvm.org/releases/$($(package)_clang_version)\n-$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_sha256_hash=60d8f69f032d62ef61bf527857ebb933741ec3352d4d328c5516aa520662dab7\n+$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_sha256_hash=99b28a6b48e793705228a390471991386daa33a9717cd9ca007fcdde69608fd9\n $(package)_extra_sources=$($(package)_clang_file_name)\n \n define $(package)_fetch_cmds\n@@ -23,14 +23,15 @@ define $(package)_extract_cmds\n   $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir -p toolchain/bin toolchain/lib/clang/3.5/include && \\\n   tar --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n+  rm -f toolchain/lib/libc++abi.so* && \\\n   echo \"#!/bin/sh\" > toolchain/bin/$(host)-dsymutil && \\\n   echo \"exit 0\" >> toolchain/bin/$(host)-dsymutil && \\\n   chmod +x toolchain/bin/$(host)-dsymutil && \\\n   tar --strip-components=1 -xf $($(package)_source)\n endef\n \n define $(package)_set_vars\n-$(package)_config_opts=--target=$(host) --disable-libuuid\n+$(package)_config_opts=--target=$(host) --disable-lto-support\n $(package)_ldflags+=-Wl,-rpath=\\\\$$$$$$$$\\$$$$$$$$ORIGIN/../lib\n $(package)_cc=$($(package)_extract_dir)/toolchain/bin/clang\n $(package)_cxx=$($(package)_extract_dir)/toolchain/bin/clang++\n@@ -53,10 +54,11 @@ define $(package)_stage_cmds\n   cd $($(package)_extract_dir)/toolchain && \\\n   mkdir -p $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include && \\\n   mkdir -p $($(package)_staging_prefix_dir)/bin $($(package)_staging_prefix_dir)/include && \\\n-  cp -P bin/clang bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp bin/clang $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n   cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n   cp -rf lib/clang/$($(package)_clang_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include/ && \\\n-  cp bin/$(host)-dsymutil $($(package)_staging_prefix_dir)/bin && \\\n+  cp bin/llvm-dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil && \\\n   if `test -d include/c++/`; then cp -rf include/c++/ $($(package)_staging_prefix_dir)/include/; fi && \\\n   if `test -d lib/c++/`; then cp -rf lib/c++/ $($(package)_staging_prefix_dir)/lib/; fi\n endef"
      },
      {
        "sha": "85a8a402bf92cefb0b406a6d8ddefa87984157cc",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,6 +5,11 @@ $(package)_download_file=v$($(package)_version).tar.bz2\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=python3.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/python3.patch\n+endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "5ee9f17a63235a9d68f74389566f1f257c182d3c",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -6,9 +6,42 @@ $(package)_sha256_hash=8f9faeaebad088e772f4ef5e38252d472be4d878c6b3a2718c10a4fce\n \n define $(package)_set_vars\n $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$($(package)_cc)\"\n-$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl no-zlib no-shared no-dso\n-$(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n-$(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3\n+$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl\n+$(package)_config_opts+=no-camellia\n+$(package)_config_opts+=no-capieng\n+$(package)_config_opts+=no-cast\n+$(package)_config_opts+=no-comp\n+$(package)_config_opts+=no-dso\n+$(package)_config_opts+=no-dtls1\n+$(package)_config_opts+=no-ec_nistp_64_gcc_128\n+$(package)_config_opts+=no-gost\n+$(package)_config_opts+=no-gmp\n+$(package)_config_opts+=no-heartbeats\n+$(package)_config_opts+=no-idea\n+$(package)_config_opts+=no-jpake\n+$(package)_config_opts+=no-krb5\n+$(package)_config_opts+=no-libunbound\n+$(package)_config_opts+=no-md2\n+$(package)_config_opts+=no-mdc2\n+$(package)_config_opts+=no-rc4\n+$(package)_config_opts+=no-rc5\n+$(package)_config_opts+=no-rdrand\n+$(package)_config_opts+=no-rfc3779\n+$(package)_config_opts+=no-rsax\n+$(package)_config_opts+=no-sctp\n+$(package)_config_opts+=no-seed\n+$(package)_config_opts+=no-sha0\n+$(package)_config_opts+=no-shared\n+$(package)_config_opts+=no-ssl-trace\n+$(package)_config_opts+=no-ssl2\n+$(package)_config_opts+=no-ssl3\n+$(package)_config_opts+=no-static_engine\n+$(package)_config_opts+=no-store\n+$(package)_config_opts+=no-unit-test\n+$(package)_config_opts+=no-weak-ssl-ciphers\n+$(package)_config_opts+=no-whirlpool\n+$(package)_config_opts+=no-zlib\n+$(package)_config_opts+=no-zlib-dynamic\n $(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64"
      },
      {
        "sha": "ac43ef4a2e304ec166b8b2bc8a8d6c7f492c8a86",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -6,7 +6,9 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n+\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n "
      },
      {
        "sha": "54d3fd924519be2ed612830e24c3baf25629c7fa",
        "filename": "depends/packages/protobuf.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -4,6 +4,7 @@ $(package)_download_path=$(native_$(package)_download_path)\n $(package)_file_name=$(native_$(package)_file_name)\n $(package)_sha256_hash=$(native_$(package)_sha256_hash)\n $(package)_dependencies=native_$(package)\n+$(package)_cxxflags=-std=c++11\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --with-protoc=$(build_prefix)/bin/protoc"
      },
      {
        "sha": "d41d0b9ea5b15cce2685bd96d4d028d2ff423d5e",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 47,
        "deletions": 41,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,42 +1,56 @@\n PACKAGE=qt\n-$(package)_version=5.5.0\n-$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_version=5.6.1\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.6/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n+$(package)_sha256_hash=0ac67cf8d66d52b995f96c31c4b48117a1afb3db99eaa93e20ccd8f7f55f7fde\n $(package)_dependencies=openssl\n-$(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n+$(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch pidlist_absolute.patch\n+$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+$(package)_qttranslations_sha256_hash=dcc1534d247babca1840cb6d0a000671801a341ea352d0535474f86adadaf028\n+\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+$(package)_qttools_sha256_hash=e0f845de28c31230dfa428f0190ccb3b91d1fc02481b1f064698ae4ef8376aa1\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -c++11\n+$(package)_config_opts += -confirm-license\n+$(package)_config_opts += -dbus-runtime\n+$(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -no-alsa\n $(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-gif\n $(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-gstreamer\n $(package)_config_opts += -no-icu\n-$(package)_config_opts += -no-cups\n $(package)_config_opts += -no-iconv\n-$(package)_config_opts += -no-gif\n-$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-nis\n-$(package)_config_opts += -no-pch\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n-$(package)_config_opts += -nomake examples\n-$(package)_config_opts += -nomake tests\n-$(package)_config_opts += -no-feature-style-windowsmobile\n-$(package)_config_opts += -no-feature-style-windowsce\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n $(package)_config_opts += -no-sql-oci\n@@ -46,36 +60,25 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n-$(package)_config_opts += -prefix $(host_prefix)\n-$(package)_config_opts += -hostprefix $(build_prefix)\n-$(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -opensource\n $(package)_config_opts += -openssl-linked\n-$(package)_config_opts += -v\n-$(package)_config_opts += -static\n-$(package)_config_opts += -silent\n+$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n+$(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n-$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -no-pulseaudio\n-$(package)_config_opts += -no-openvg\n-$(package)_config_opts += -no-xrender\n-$(package)_config_opts += -no-alsa\n-$(package)_config_opts += -no-mtdev\n-$(package)_config_opts += -no-gstreamer\n-$(package)_config_opts += -no-mitshm\n-$(package)_config_opts += -no-kms\n-$(package)_config_opts += -no-reduce-relocations\n-$(package)_config_opts += -no-egl\n-$(package)_config_opts += -no-eglfs\n-$(package)_config_opts += -no-linuxfb\n-$(package)_config_opts += -no-xinput2\n-$(package)_config_opts += -no-libudev\n-$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -reduce-exports\n-$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -v\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux\n@@ -119,19 +122,22 @@ define $(package)_extract_cmds\n   tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n endef\n \n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n+  sed -i.old 's/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0)/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft)/' qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n-  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "f8901f72c26c632ab2757cd7def64fbb67e65061",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,24 +1,25 @@\n package=zeromq\n-$(package)_version=4.0.7\n+$(package)_version=4.1.4\n $(package)_download_path=http://download.zeromq.org\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=e00b2967e074990d0538361cc79084a0a92892df2c6e7585da34e4c61ee47b03\n+$(package)_sha256_hash=e99f44fde25c2e4cb84ce440f87ca7d3fe3271c2b8cfbc67d55e4de25e6fe378\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared\n+  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C src\n+  $(MAKE) libzmq.la\n endef\n \n define $(package)_stage_cmds\n-  $(MAKE) -C src DESTDIR=$($(package)_staging_dir) install\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n endef\n \n define $(package)_postprocess_cmds"
      },
      {
        "sha": "1a32340be5b13ae1d5be3e775462c3052c12953a",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,72 @@\n+diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n+--- a/mac_alias/alias.py\t2015-10-19 12:12:48.000000000 +0200\n++++ b/mac_alias/alias.py\t2016-04-03 12:13:12.037159417 +0200\n+@@ -243,10 +243,10 @@\n+         alias = Alias()\n+         alias.appinfo = appinfo\n+             \n+-        alias.volume = VolumeInfo (volname.replace('/',':'),\n++        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n+                                    voldate, fstype, disktype,\n+                                    volattrs, volfsid)\n+-        alias.target = TargetInfo (kind, filename.replace('/',':'),\n++        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n+                                    folder_cnid, cnid,\n+                                    crdate, creator_code, type_code)\n+         alias.target.levels_from = levels_from\n+@@ -261,9 +261,9 @@\n+                 b.read(1)\n+ \n+             if tag == TAG_CARBON_FOLDER_NAME:\n+-                alias.target.folder_name = value.replace('/',':')\n++                alias.target.folder_name = value.decode().replace('/',':')\n+             elif tag == TAG_CNID_PATH:\n+-                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n++                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n+                                                            value)\n+             elif tag == TAG_CARBON_PATH:\n+                 alias.target.carbon_path = value\n+@@ -298,9 +298,9 @@\n+                 alias.target.creation_date \\\n+                     = mac_epoch + datetime.timedelta(seconds=seconds)\n+             elif tag == TAG_POSIX_PATH:\n+-                alias.target.posix_path = value\n++                alias.target.posix_path = value.decode()\n+             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n+-                alias.volume.posix_path = value\n++                alias.volume.posix_path = value.decode()\n+             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n+                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n+             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n+@@ -422,13 +422,13 @@\n+         #       (so doing so is ridiculous, and nothing could rely on it).\n+         b.write(struct.pack(b'>h28pI2shI64pII4s4shhI2s10s',\n+                             self.target.kind,\n+-                            carbon_volname, voldate,\n++                            carbon_volname, int(voldate),\n+                             self.volume.fs_type,\n+                             self.volume.disk_type,\n+                             self.target.folder_cnid,\n+                             carbon_filename,\n+                             self.target.cnid,\n+-                            crdate,\n++                            int(crdate),\n+                             self.target.creator_code,\n+                             self.target.type_code,\n+                             self.target.levels_from,\n+@@ -449,12 +449,12 @@\n+ \n+         b.write(struct.pack(b'>hhQhhQ',\n+                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n+-                8, long(voldate * 65536),\n++                8, int(voldate * 65536),\n+                 TAG_HIGH_RES_CREATION_DATE,\n+-                8, long(crdate * 65536)))\n++                8, int(crdate * 65536)))\n+ \n+         if self.target.cnid_path:\n+-            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n++            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n+                                     *self.target.cnid_path)\n+             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n+                                  len(cnid_path)))"
      },
      {
        "sha": "c7dbebedce831edba990aeecc2dd9c2a5941430e",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,15 +1,15 @@\n --- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -94,8 +94,6 @@\n-\n+@@ -74,8 +74,6 @@\n+ \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n -QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n-\n+ \n  CONFIG += qpa/genericunixfontdatabase\n-\n-@@ -104,7 +102,8 @@\n+ \n+@@ -87,7 +85,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n@@ -18,28 +18,32 @@\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n      LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms -lxcb-xinerama\n --- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,8 @@\n-\n+@@ -9,7 +9,8 @@\n+ \n  XCB_DIR = ../../../../3rdparty/xcb\n-\n+ \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n +QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n +QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n-\n+ \n  QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n  QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n --- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n-@@ -11,3 +11,9 @@\n+@@ -6,6 +6,13 @@\n      qxcbmain.cpp\n  OTHER_FILES += xcb.json README\n-\n+ \n +contains(QT_CONFIG, xcb-qt) {\n +    DEFINES += XCB_USE_RENDER\n +    XCB_DIR = ../../../3rdparty/xcb\n +    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +}\n++\n+ PLUGIN_TYPE = platforms\n+ PLUGIN_CLASS_NAME = QXcbIntegrationPlugin\n+ !equals(TARGET, $$QT_DEFAULT_QPA_PLUGIN): PLUGIN_EXTENDS = -"
      },
      {
        "sha": "3772db4f8b804766d7d1b6eb7a1705609a2cc368",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,11 @@\n+--- old/qtbase/mkspecs/features/qt_module.prf 2016-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/mkspecs/features/qt_module.prf 2016-03-17 02:06:42.705930685 +0000\n+@@ -244,7 +244,7 @@\n+ load(qt_targets)\n+ \n+ # this builds on top of qt_common\n+-!internal_module:!lib_bundle:if(unix|mingw) {\n++unix|mingw {\n+     CONFIG += create_pc\n+     QMAKE_PKGCONFIG_DESTDIR = pkgconfig\n+     host_build: \\"
      },
      {
        "sha": "c30f29452b78652cfe4facca8c4a0024ce63ed3d",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -11,16 +11,10 @@ The following are some helpful notes on how to run Bitcoin on your native platfo\n \n ### Unix\n \n-You need the Qt4 run-time libraries to run Bitcoin-Qt. On Debian or Ubuntu:\n-\n-\tsudo apt-get install libqtgui4\n-\n Unpack the files into a directory and run:\n \n-- bin/32/bitcoin-qt (GUI, 32-bit) or bin/32/bitcoind (headless, 32-bit)\n-- bin/64/bitcoin-qt (GUI, 64-bit) or bin/64/bitcoind (headless, 64-bit)\n-\n-\n+- `bin/bitcoin-qt` (GUI) or\n+- `bin/bitcoind` (headless)\n \n ### Windows\n \n@@ -63,6 +57,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n+- [Benchmarking](benchmarking.md)\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0)."
      },
      {
        "sha": "aed3cd97e1ecd45d5f74046f6bc0cf8524dbd771",
        "filename": "doc/README_osx.md",
        "status": "renamed",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,21 +1,19 @@\n Deterministic OS X Dmg Notes.\n \n Working OS X DMGs are created in Linux by combining a recent clang,\n-the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n+the Apple binutils (ld, ar, etc) and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use\n of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for OS X. A pre-compiled version of 3.2 is used because it was not\n-available in the Precise repositories at the time this work was started. In the\n-future, it can be switched to use system packages instead.\n+when building for OS X.\n \n Apple's version of binutils (called cctools) contains lots of functionality\n missing in the FSF's binutils. In addition to extra linker options for\n frameworks and sysroots, several other tools are needed as well such as\n install_name_tool, lipo, and nmedit. These do not build under linux, so they\n have been patched to do so. The work here was used as a starting point:\n-https://github.com/mingwandroid/toolchain4\n+[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n \n In order to build a working toolchain, the following source packages are needed\n from Apple: cctools, dyld, and ld64.\n@@ -29,16 +27,19 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the Xcode 6.1.1 dmg:\n-https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n \n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n+needed:\n+```\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n+```\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n To create a tarball suitable for Gitian input, mount the dmg in OS X, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n-\n+```\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+```\n \n The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n which are created using these tools. The build process has been designed to\n@@ -48,15 +49,14 @@ fully deterministic and may be freely redistributed.\n genisoimage is used to create the initial DMG. It is not deterministic as-is,\n so it has been patched. A system genisoimage will work fine, but it will not\n be deterministic because the file-order will change between invocations.\n-The patch can be seen here:\n-https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff\n+The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n No effort was made to fix this cleanly, so it likely leaks memory badly. But\n it's only used for a single invocation, so that's no real concern.\n \n genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n libdmg-hfsplus project is used to compress it. There are several bugs in this\n tool and its maintainer has seemingly abandoned the project. It has been forked\n-and is available (with fixes) here: https://github.com/theuni/libdmg-hfsplus .\n+and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n \n The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n functionality is broken. Only the compression feature is currently used.\n@@ -77,6 +77,6 @@ build process to remain somewhat deterministic. Here's how it works:\n   that have been previously (deterministically) built in order to create a\n   final dmg.\n - The Apple keyholder uses this unsigned app to create a detached signature,\n-  using the script that is also included there.\n+  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n - Builders feed the unsigned app + detached signature back into Gitian. It\n   uses the pre-built tools to recombine the pieces into a deterministic dmg.",
        "previous_filename": "doc/README_osx.txt"
      },
      {
        "sha": "0ba75afcda3cbcef4c024c9acec21e35f40017c9",
        "filename": "doc/benchmarking.md",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,30 @@\n+Benchmarking\n+============\n+\n+Bitcoin Core has an internal benchmarking framework, with benchmarks\n+for cryptographic algorithms such as SHA1, SHA256, SHA512 and RIPEMD160. As well as the rolling bloom filter.\n+\n+After compiling bitcoin-core, the benchmarks can be run with:\n+`src/bench/bench_bitcoin`\n+\n+The output will look similar to:\n+```\n+#Benchmark,count,min,max,average\n+RIPEMD160,448,0.001245033173334,0.002638196945190,0.002461894814457\n+RollingBloom-refresh,1,0.000635000000000,0.000635000000000,0.000635000000000\n+RollingBloom-refresh,1,0.000108000000000,0.000108000000000,0.000108000000000\n+RollingBloom-refresh,1,0.000107000000000,0.000107000000000,0.000107000000000\n+RollingBloom-refresh,1,0.000204000000000,0.000204000000000,0.000204000000000\n+SHA1,640,0.000909024336207,0.001938136418660,0.001843086257577\n+SHA256,256,0.002209486499909,0.008500099182129,0.004300644621253\n+SHA512,384,0.001319904176016,0.002813005447388,0.002615700786312\n+Sleep100ms,10,0.205592155456543,0.210056066513062,0.104166316986084\n+Trig,67108864,0.000000014997003,0.000000015448112,0.000000015188842\n+```\n+\n+More benchmarks are needed for, in no particular order:\n+- Script Validation\n+- CCoinDBView caching\n+- Coins database\n+- Memory pool\n+- Wallet coin selection"
      },
      {
        "sha": "62bde20d944f4ea010341f31e80a1e279f976ede",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,6 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n \n+* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -9,15 +10,20 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n * [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n * [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 32`](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets has been implemented since **v0.13.0** ([PR #8035](https://github.com/bitcoin/bitcoin/pull/8035)).\n * [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)).\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n+* [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)).\n+* [`BIP 113`](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki): Median time past lock-time calculations have been implemented since **v0.12.1** ([PR #6566](https://github.com/bitcoin/bitcoin/pull/6566)).\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n+* [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      },
      {
        "sha": "c9eb4225abb5c3af074e1282ccad17bc4100119a",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 51,
        "deletions": 85,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,129 +1,95 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build Bitcoin Core for OS X.\n-\n-Notes\n------\n-\n-* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n-\n-* All of the commands should be executed in a Terminal application. The\n-built-in one is located in `/Applications/Utilities`.\n+The commands in this guide should be executed in a Terminal application.\n+The built-in one is located in `/Applications/Utilities/Terminal.app`.\n \n Preparation\n -----------\n+Install the OS X command line tools:\n \n-You need to install Xcode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. Xcode should be\n-available on your OS X installation media, but if not, you can get the\n-current version from https://developer.apple.com/xcode/. If you install\n-Xcode 4.3 or later, you'll need to install its command line tools. This can\n-be done in `Xcode > Preferences > Downloads > Components` and generally must\n-be re-done or updated every time Xcode is updated.\n+`xcode-select --install`\n \n-You will also need to install [Homebrew](http://brew.sh) in order to install library\n-dependencies.\n+When the popup appears, click `Install`.\n \n-The installation of the actual dependencies is covered in the instructions\n-sections below.\n+Then install [Homebrew](http://brew.sh).\n \n-Instructions: Homebrew\n+Dependencies\n ----------------------\n \n-#### Install dependencies using Homebrew\n-\n-    brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent\n+    brew install automake berkeley-db4 libtool boost --c++11 miniupnpc openssl pkg-config protobuf --c++11 qt5 libevent\n \n-NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n \n-### Building `bitcoin`\n+Build Bitcoin Core\n+------------------------\n \n-1. Clone the GitHub tree to get the source code and go into the directory.\n+1. Clone the bitcoin source code and cd into `bitcoin`\n \n-        git clone https://github.com/bitcoin/bitcoin.git\n+        git clone https://github.com/bitcoin/bitcoin\n         cd bitcoin\n \n 2.  Build bitcoin-core:\n-    This will configure and build the headless bitcoin binaries as well as the gui (if Qt is found).\n-    You can disable the gui build by passing `--without-gui` to configure.\n+\n+    Configure and build the headless bitcoin binaries as well as the GUI (if Qt is found).\n+\n+    You can disable the GUI build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n         ./configure\n         make\n \n-3.  It is also a good idea to build and run the unit tests:\n+3.  It is recommended to build and run the unit tests:\n \n         make check\n \n-4.  (Optional) You can also install bitcoind to your path:\n-\n-        make install\n-\n-Use Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n-Download Qt Creator from https://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n+4.  You can also create a .dmg that contains the .app bundle (optional):\n \n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n-\n-Creating a release build\n-------------------------\n-You can ignore this section if you are building `bitcoind` for your own use.\n-\n-bitcoind/bitcoin-cli binaries are not included in the Bitcoin-Qt.app bundle.\n-\n-If you are building `bitcoind` or `Bitcoin Core` for others, your build machine should be set up\n-as follows for maximum compatibility:\n-\n-All dependencies should be compiled with these flags:\n-\n- -mmacosx-version-min=10.7\n- -arch x86_64\n- -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n-\n-Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin Core\n-bundle is packaged and signed to create the .dmg disk image that is distributed.\n+        make deploy\n \n Running\n -------\n \n-It's now available at `./bitcoind`, provided that you are still in the `src`\n-directory. We have to first create the RPC configuration file, though.\n+Bitcoin Core is now available at `./src/bitcoind`\n \n-Run `./bitcoind` to get the filename where it should be put, or just try these\n-commands:\n+Before running, it's recommended you create an RPC configuration file.\n \n     echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+\n     chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-The next time you run it, it will start downloading the blockchain, but it won't\n-output anything while it's doing this. This process may take several hours;\n-you can monitor its process by looking at the debug.log file, like this:\n+The first time you run bitcoind, it will start downloading the blockchain. This process could take several hours.\n+\n+You can monitor the download process by looking at the debug.log file:\n \n     tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n \n Other commands:\n -------\n \n-    ./bitcoind -daemon    # to start the bitcoin daemon.\n-    ./bitcoin-cli --help  # for a list of command-line options.\n-    ./bitcoin-cli help    # When the daemon is running, to get a list of RPC commands\n+    ./src/bitcoind -daemon # Starts the bitcoin daemon.\n+    ./src/bitcoin-cli --help # Outputs a list of command-line options.\n+    ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n+\n+Using Qt Creator as IDE\n+------------------------\n+You can use Qt Creator as an IDE, for bitcoin development.\n+Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n+Uncheck everything except Qt Creator during the installation process.\n+\n+1. Make sure you installed everything through Homebrew mentioned above\n+2. Do a proper ./configure --enable-debug\n+3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n+4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n+5. Leave the file selection as it is\n+6. Confirm the \"summary page\"\n+7. In the \"Projects\" tab select \"Manage Kits...\"\n+8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n+10. Start debugging with Qt Creator\n+\n+Notes\n+-----\n \n-Using Qt official installer while building\n-------------------------------------------\n+* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n \n-If you prefer to use the latest Qt installed from the official binary\n-installer over the brew version, you have to make several changes to\n-the installed tree and its binaries (all these changes are contained\n-in the brew version already). The changes needed are described in\n-[#7714](https://github.com/bitcoin/bitcoin/issues/7714). We do not\n-support building Bitcoin Core this way though.\n+* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      },
      {
        "sha": "bd89978cc2a74270808eb95cc24d42618021e62d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -124,6 +124,24 @@ libqrencode (optional) can be installed with:\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n+Dependency Build Instructions: Fedora\n+-------------------------------------\n+Build requirements:\n+\n+    sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel\n+\n+Optional:\n+\n+    sudo dnf install miniupnpc-devel\n+\n+To build with Qt 5 (recommended) you need the following:\n+\n+    sudo dnf install qt5-qttools-devel qt5-qtbase-devel protobuf-devel\n+\n+libqrencode (optional) can be installed with:\n+\n+    sudo dnf install qrencode-devel\n+\n Notes\n -----\n The release is built with GCC and then \"strip bitcoind\" to strip the debug"
      },
      {
        "sha": "95c46b05fe203e06bcbd089da482d1a00bae802d",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 56,
        "deletions": 7,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,7 +5,9 @@ Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n gradually.\n-- Basic rules specified in src/.clang-format. Use a recent clang-format-3.5 to format automatically.\n+- Basic rules specified in [src/.clang-format](/src/.clang-format).\n+  Use a recent clang-format to format automatically using one of the [dev scripts]\n+  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces.\n@@ -263,7 +265,7 @@ General C++\n       the `.h` to the `.cpp` should not result in build errors\n \n - Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n-  `scoped_pointer` for allocations in a function.\n+  `unique_ptr` for allocations in a function.\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n@@ -282,10 +284,9 @@ C++ data structures\n   - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n     the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n \n-- Watch out for vector out-of-bounds exceptions. `&vch[0]` is illegal for an\n-  empty vector, `&vch[vch.size()]` is always illegal. Use `begin_ptr(vch)` and\n-  `end_ptr(vch)` to get the begin and end pointer instead (defined in\n-  `serialize.h`)\n+- Watch out for out-of-bounds vector access. `&vch[vch.size()]` is illegal,\n+  including `&vch[0]` for an empty vector. Use `vch.data()` and `vch.data() +\n+  vch.size()` instead.\n \n - Vector bounds checking is only enabled in debug mode. Do not rely on it\n \n@@ -321,7 +322,7 @@ Strings and formatting\n     buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n     tend to act differently depending on platform, or even the user locale\n \n-- Use `ParseInt32`, `ParseInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n \n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n \n@@ -379,3 +380,51 @@ GUI\n   - *Rationale*: Model classes pass through events and data from the core, they\n     should not interact with the user. That's where View classes come in. The converse also\n     holds: try to not directly access core data structures from Views.\n+\n+Git and github tips\n+---------------------\n+\n+- For resolving merge/rebase conflicts, it can be useful to enable diff3 style using\n+  `git config merge.conflictstyle diff3`. Instead of\n+\n+        <<<\n+        yours\n+        ===\n+        theirs\n+        >>>\n+\n+  you will see\n+\n+        <<<\n+        yours\n+        |||\n+        original\n+        ===\n+        theirs\n+        >>>\n+\n+  This may make it much clearer what caused the conflict. In this style, you can often just look\n+  at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n+\n+- When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes\n+  the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1`\n+  at the end of any URL which shows a diff.\n+\n+- When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead\n+  of showing the patch as deleted/added *lines*, show deleted/added *words*.\n+\n+- When reviewing patches that move code around, try using\n+  `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the\n+  moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may\n+  even work when combined with the `-w` or `--word-diff` options described above.\n+\n+- When looking at other's pull requests, it may make sense to add the following section to your `.git/config`\n+  file:\n+\n+        [remote \"upstream-pull\"]\n+                fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n+                url = git@github.com:bitcoin/bitcoin.git\n+\n+  This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n+  or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n+  `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER."
      },
      {
        "sha": "7796a5fc9c151e884863c7b555ba1bb72b64ede7",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,7 +1,7 @@\n Gitian building\n ================\n \n-*Setup instructions for a Gitian build of Bitcoin using a Debian VM or physical system.*\n+*Setup instructions for a Gitian build of Bitcoin Core using a Debian VM or physical system.*\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n@@ -26,7 +26,7 @@ Table of Contents\n - [Installing Gitian](#installing-gitian)\n - [Setting up the Gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n-- [Building Bitcoin](#building-bitcoin)\n+- [Building Bitcoin Core](#building-bitcoin-core)\n - [Building an alternative repository](#building-an-alternative-repository)\n - [Signing externally](#signing-externally)\n - [Uploading signatures](#uploading-signatures)\n@@ -95,11 +95,11 @@ After creating the VM, we need to configure it.\n \n - Click `Ok` twice to save.\n \n-Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.4.0/amd64/iso-cd/debian-8.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.5.0/amd64/iso-cd/debian-8.5.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"7a6b418e6a4ee3ca75dda04d79ed96c9e2c33bb0c703ca7e40c6374ab4590748  debian-8.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"ad4e8c27c561ad8248d5ebc1d36eb172f884057bfeb2c22ead823f59fa8c3dff  debian-8.5.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n Then start the VM. On the first launch you will be asked for a CD or DVD image. Choose the downloaded iso.\n@@ -310,7 +310,7 @@ Clone the git repositories for bitcoin and Gitian.\n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-git clone https://github.com/bitcoin/gitian.sigs.git\n+git clone https://github.com/bitcoin-core/gitian.sigs.git\n ```\n \n Setting up the Gitian image\n@@ -342,10 +342,10 @@ manual intervention. Also optionally follow the next step: 'Seed the Gitian sour\n and offline git repositories' which will fetch the remaining files required for building\n offline.\n \n-Building Bitcoin\n+Building Bitcoin Core\n ----------------\n \n-To build Bitcoin (for Linux, OS X and Windows) just follow the steps under 'perform\n+To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n@@ -441,10 +441,10 @@ Then when building, override the remote URLs that gbuild would otherwise pull fr\n ```bash\n \n cd /some/root/path/\n-git clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n+git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n \n-BTCPATH=/some/root/path/bitcoin.git\n-SIGPATH=/some/root/path/bitcoin-detached-sigs.git\n+BTCPATH=/some/root/path/bitcoin\n+SIGPATH=/some/root/path/bitcoin-detached-sigs\n \n ./bin/gbuild --url bitcoin=${BTCPATH},signature=${SIGPATH} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n ```\n@@ -473,5 +473,5 @@ Uploading signatures\n ---------------------\n \n After building and signing you can push your signatures (both the `.assert` and `.assert.sig` files) to the\n-[bitcoin/gitian.sigs](https://github.com/bitcoin/gitian.sigs/) repository, or if that's not possible create a pull\n+[bitcoin-core/gitian.sigs](https://github.com/bitcoin-core/gitian.sigs/) repository, or if that's not possible create a pull\n request. You can also mail the files to Wladimir (laanwj@gmail.com) and he will commit them."
      },
      {
        "sha": "df3c265dcdbd28123ddfd2fe868f5809bc2986a2",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,6 +1,21 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n+Bitcoin Core version *version* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-*version*/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n Notable changes\n ===============\n \n@@ -28,6 +43,44 @@ RPC low-level changes\n   32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been\n   fixed, but this means that the output will be different than from previous versions.\n \n+- Full UTF-8 support in the RPC API. Non-ASCII characters in, for example,\n+  wallet labels have always been malformed because they weren't taken into account\n+  properly in JSON RPC processing. This is no longer the case. This also affects\n+  the GUI debug console.\n+\n+C++11 and Python 3\n+-------------------\n+\n+Various code modernizations have been done. The Bitcoin Core code base has\n+started using C++11. This means that a C++11-capable compiler is now needed for\n+building. Effectively this means GCC 4.7 or higher, or Clang 3.3 or higher.\n+\n+When cross-compiling for a target that doesn't have C++11 libraries, configure with\n+`./configure --enable-glibc-back-compat ... LDFLAGS=-static-libstdc++`.\n+\n+For running the functional tests in `qa/rpc-tests`, Python3.4 or higher is now\n+required.\n+\n+Linux ARM builds\n+------------------\n+\n+Due to popular request, Linux ARM builds have been added to the uploaded\n+executables.\n+\n+The following extra files can be found in the download directory or torrent:\n+\n+- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries for the most\n+  common 32-bit ARM architecture.\n+- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries for the most\n+  common 64-bit ARM architecture.\n+\n+ARM builds are still experimental. If you have problems on a certain device or\n+Linux distribution combination please report them on the bug tracker, it may be\n+possible to resolve them.\n+\n+Note that Android is not considered ARM Linux in this context. The executables\n+are not expected to work out of the box on Android.\n+\n 0.13.0 Change log\n =================\n \n@@ -52,6 +105,22 @@ The following outputs are affected by this change:\n - REST `/rest/block/` (JSON format when including extended tx details)\n - `bitcoin-tx -json`\n \n+New mempool information RPC calls\n+---------------------------------\n+\n+RPC calls have been added to output detailed statistics for individual mempool\n+entries, as well as to calculate the in-mempool ancestors or descendants of a\n+transaction: see `getmempoolentry`, `getmempoolancestors`, `getmempooldescendants`.\n+\n+### ZMQ\n+\n+Each ZMQ notification now contains an up-counting sequence number that allows\n+listeners to detect lost notifications.\n+The sequence number is always the last element in a multi-part ZMQ notification and\n+therefore backward compatible.\n+Each message type has its own counter.\n+(https://github.com/bitcoin/bitcoin/pull/7762)\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling\n@@ -75,6 +144,24 @@ feerate. [BIP 133](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawik\n \n ### Wallet\n \n+Hierarchical Deterministic Key Generation\n+-----------------------------------------\n+Newly created wallets will use hierarchical deterministic key generation\n+according to BIP32 (keypath m/0'/0'/k').\n+Existing wallets will still use traditional key generation.\n+\n+Backups of HD wallets, regardless of when they have been created, can\n+therefore be used to re-generate all possible private keys, even the\n+ones which haven't already been generated during the time of the backup.\n+\n+HD key generation for new wallets can be disabled by `-usehd=0`. Keep in\n+mind that this flag only has affect on newly created wallets.\n+You can't disable HD key generation once you have created a HD wallet.\n+\n+There is no distinction between internal (change) and external keys.\n+\n+[Pull request](https://github.com/bitcoin/bitcoin/pull/8035/files), [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n+\n ### GUI\n \n ### Tests"
      },
      {
        "sha": "1b7bd06ece6a29a822fbf88ee31e86cc9ad152df",
        "filename": "doc/release-notes/release-notes-0.12.0.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-notes/release-notes-0.12.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-notes/release-notes-0.12.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.12.0.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -61,7 +61,7 @@ Signature validation using libsecp256k1\n ---------------------------------------\n \n ECDSA signatures inside Bitcoin transactions now use validation using\n-[libsecp256k1](https://github.com/bitcoin/secp256k1) instead of OpenSSL.\n+[libsecp256k1](https://github.com/bitcoin-core/secp256k1) instead of OpenSSL.\n \n Depending on the platform, this means a significant speedup for raw signature\n validation speed. The advantage is largest on x86_64, where validation is over"
      },
      {
        "sha": "35ee1edae1175338b8a564932c7eb68c99b4954e",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 177,
        "deletions": 118,
        "changes": 295,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,181 +1,229 @@\n Release Process\n ====================\n \n-* Update translations (ping wumpus, Diapolo or tcatm on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n+Before every release candidate:\n+\n+* Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n+\n+Before every minor and major release:\n+\n * Update [bips.md](bips.md) to account for changes since the last release.\n-* Update hardcoded [seeds](/contrib/seeds)\n+* Update version in sources (see below)\n+* Write release notes (see below)\n+\n+Before every major release:\n \n-* * *\n+* Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n+\n+### First time / New builders\n \n-###First time / New builders\n Check out the source code in the following directory hierarchy.\n \n-\tcd /path/to/your/toplevel/build\n-\tgit clone https://github.com/bitcoin/gitian.sigs.git\n-\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n-\tgit clone https://github.com/devrandom/gitian-builder.git\n-\tgit clone https://github.com/bitcoin/bitcoin.git\n+    cd /path/to/your/toplevel/build\n+    git clone https://github.com/bitcoin-core/gitian.sigs.git\n+    git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n+    git clone https://github.com/devrandom/gitian-builder.git\n+    git clone https://github.com/bitcoin/bitcoin.git\n \n-###Bitcoin maintainers/release engineers, update (commit) version in sources\n+### Bitcoin maintainers/release engineers, update version in sources\n \n-\tpushd ./bitcoin\n-\tcontrib/verifysfbinaries/verify.sh\n-\tconfigure.ac\n-\tdoc/README*\n-\tdoc/Doxyfile\n-\tcontrib/gitian-descriptors/*.yml\n-\tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n+Update the following:\n \n-\t# tag version in git\n+- `configure.ac`:\n+    - `_CLIENT_VERSION_MAJOR`\n+    - `_CLIENT_VERSION_MINOR`\n+    - `_CLIENT_VERSION_REVISION`\n+    - Don't forget to set `_CLIENT_VERSION_IS_RELEASE` to `true`\n+- `src/clientversion.h`: (this mirrors `configure.ac` - see issue #3539)\n+    - `CLIENT_VERSION_MAJOR`\n+    - `CLIENT_VERSION_MINOR`\n+    - `CLIENT_VERSION_REVISION`\n+    - Don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`\n+- `doc/README.md` and `doc/README_windows.txt`\n+- `doc/Doxyfile`: `PROJECT_NUMBER` contains the full version\n+- `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n-\tgit tag -s v(new version, e.g. 0.8.0)\n+Write release notes. git shortlog helps a lot, for example:\n \n-\t# write release notes. git shortlog helps a lot, for example:\n+    git shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n \n-\tgit shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n-\tpopd\n+(or ping @wumpus on IRC, he has specific tooling to generate the list of merged pulls\n+and sort them into categories based on labels)\n \n-* * *\n+Generate list of authors:\n \n-###Setup and perform Gitian builds\n+    git log --format='%aN' \"$*\" | sort -ui | sed -e 's/^/- /'\n \n- Setup Gitian descriptors:\n+Tag version (or release candidate) in git\n \n-\tpushd ./bitcoin\n-\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n-\texport VERSION=(new version, e.g. 0.8.0)\n-\tgit fetch\n-\tgit checkout v${VERSION}\n-\tpopd\n+    git tag -s v(new version, e.g. 0.8.0)\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n+### Setup and perform Gitian builds\n \n-\tpushd ./gitian.sigs\n-\tgit pull\n-\tpopd\n+Setup Gitian descriptors:\n \n-  Ensure gitian-builder is up-to-date to take advantage of new caching features (`e9741525c` or later is recommended).\n+    pushd ./bitcoin\n+    export SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n+    export VERSION=(new version, e.g. 0.8.0)\n+    git fetch\n+    git checkout v${VERSION}\n+    popd\n \n-\tpushd ./gitian-builder\n-\tgit pull\n+Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n-###Fetch and create inputs: (first time, or when dependency versions change)\n+    pushd ./gitian.sigs\n+    git pull\n+    popd\n \n-\tmkdir -p inputs\n-\twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-\twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+Ensure gitian-builder is up-to-date:\n \n- Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+    pushd ./gitian-builder\n+    git pull\n+    popd\n \n- https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+### Fetch and create inputs: (first time, or when dependency versions change)\n \n- Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n+    pushd ./gitian-builder\n+    mkdir -p inputs\n+    wget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+    wget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    popd\n \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n+Create the OS X SDK tarball, see the [OS X readme](README_osx.md) for details, and copy it into the inputs directory.\n \n-###Optional: Seed the Gitian sources cache and offline git repositories\n+### Optional: Seed the Gitian sources cache and offline git repositories\n \n By default, Gitian will fetch source files as needed. To cache them ahead of time:\n \n-\tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+    pushd ./gitian-builder\n+    make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+    popd\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n-```\n-./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-```\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+    popd\n+\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n-###Build and sign Bitcoin Core for Linux, Windows, and OS X:\n+### Build and sign Bitcoin Core for Linux, Windows, and OS X:\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    pushd ./gitian-builder\n+    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n     mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n     mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n+    popd\n \n-  Build output expected:\n+Build output expected:\n \n-  1. source tarball (bitcoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OS X unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n+  1. source tarball (`bitcoin-${VERSION}.tar.gz`)\n+  2. linux 32-bit and 64-bit dist tarballs (`bitcoin-${VERSION}-linux[32|64].tar.gz`)\n+  3. windows 32-bit and 64-bit unsigned installers and dist zips (`bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe`, `bitcoin-${VERSION}-win[32|64].zip`)\n+  4. OS X unsigned installer and dist tarball (`bitcoin-${VERSION}-osx-unsigned.dmg`, `bitcoin-${VERSION}-osx64.tar.gz`)\n+  5. Gitian signatures (in `gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/`)\n \n-###Verify other gitian builders signatures to your own. (Optional)\n+### Verify other gitian builders signatures to your own. (Optional)\n \n-  Add other gitian builders keys to your gpg keyring\n+Add other gitian builders keys to your gpg keyring\n \n-\tgpg --import ../bitcoin/contrib/gitian-keys/*.pgp\n+    gpg --import bitcoin/contrib/gitian-keys/*.pgp\n \n-  Verify the signatures\n+Verify the signatures\n \n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    pushd ./gitian-builder\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    popd\n \n-\tpopd\n-\n-###Next steps:\n+### Next steps:\n \n Commit your signature to gitian.sigs:\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win-unsigned/${SIGNER}\n-\tgit add ${VERSION}-osx-unsigned/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n-\n-  Wait for Windows/OS X detached signatures:\n-\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n-\n-  Create (and optionally verify) the signed OS X binary:\n-\n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\tmv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-\tpopd\n-\n-  Create (and optionally verify) the signed Windows binaries:\n-\n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\tmv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-\tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n-\tpopd\n+    pushd gitian.sigs\n+    git add ${VERSION}-linux/${SIGNER}\n+    git add ${VERSION}-win-unsigned/${SIGNER}\n+    git add ${VERSION}-osx-unsigned/${SIGNER}\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n \n-Commit your signature for the signed OS X/Windows binaries:\n+Wait for Windows/OS X detached signatures:\n+\n+- Once the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n+- Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n+\n+Create (and optionally verify) the signed OS X binary:\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n+    popd\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-osx-signed/${SIGNER}\n-\tgit add ${VERSION}-win-signed/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n+Create (and optionally verify) the signed Windows binaries:\n \n--------------------------------------------------------------------------\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n+    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n+    popd\n+\n+Commit your signature for the signed OS X/Windows binaries:\n+\n+    pushd gitian.sigs\n+    git add ${VERSION}-osx-signed/${SIGNER}\n+    git add ${VERSION}-win-signed/${SIGNER}\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n \n ### After 3 or more people have gitian-built and their results match:\n \n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+\n ```bash\n sha256sum * > SHA256SUMS\n+```\n+\n+The list of files should be:\n+```\n+bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n+bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n+bitcoin-${VERSION}-i686-pc-linux-gnu.tar.gz\n+bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n+bitcoin-${VERSION}-osx64.tar.gz\n+bitcoin-${VERSION}-osx.dmg\n+bitcoin-${VERSION}.tar.gz\n+bitcoin-${VERSION}-win32-setup.exe\n+bitcoin-${VERSION}-win32.zip\n+bitcoin-${VERSION}-win64-setup.exe\n+bitcoin-${VERSION}-win64.zip\n+```\n+The `*-debug*` files generated by the gitian build contain debug symbols\n+for troubleshooting by developers. It is assumed that anyone that is interested\n+in debugging can run gitian to generate the files for themselves. To avoid\n+end-user confusion about which file to pick, as well as save storage\n+space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+\n+- GPG-sign it, delete the unsigned file:\n+```\n gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n@@ -185,6 +233,15 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n   into `/var/www/bin/bitcoin-core-${VERSION}`\n \n+- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n+```bash\n+transmission-show -m <torrent file>\n+```\n+Insert the magnet URI into the announcement sent to mailing lists. This permits\n+people without access to `bitcoin.org` to download the binary distribution.\n+Also put it into the `optional_magnetlink:` slot in the YAML file for\n+bitcoin.org (see below for bitcoin.org update instructions).\n+\n - Update bitcoin.org version\n \n   - First, check to see if the Bitcoin.org maintainers have prepared a\n@@ -202,16 +259,18 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n \n - Announce the release:\n \n-  - Release sticky on bitcointalk: https://bitcointalk.org/index.php?board=1.0\n+  - bitcoin-dev and bitcoin-core-dev mailing list\n+\n+  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n \n-  - Bitcoin-development mailing list\n+  - bitcoincore.org blog post\n \n   - Update title of #bitcoin on Freenode IRC\n \n-  - Optionally reddit /r/Bitcoin, ... but this will usually sort out itself\n+  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n \n-- Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n \n-- Add release notes for the new version to the directory `doc/release-notes` in git master\n+  - Add release notes for the new version to the directory `doc/release-notes` in git master\n \n-- Celebrate\n+  - Celebrate"
      },
      {
        "sha": "79f1563021094ba01d8efc944472554d0c8f6fc7",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -95,12 +95,22 @@ Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n API, to create and destroy 'ephemeral' hidden services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n-This means that if Tor is running (and proper authorization is available),\n-Bitcoin Core automatically creates a hidden service to listen on, without\n-manual configuration. This will positively affect the number of available\n-.onion nodes.\n+This means that if Tor is running (and proper authentication has been configured),\n+Bitcoin Core automatically creates a hidden service to listen on. This will positively \n+affect the number of available .onion nodes.\n \n This new feature is enabled by default if Bitcoin Core is listening, and\n a connection to Tor can be made. It can be configured with the `-listenonion`,\n `-torcontrol` and `-torpassword` settings. To show verbose debugging\n information, pass `-debug=tor`.\n+\n+Connecting to Tor's control socket API requires one of two authentication methods to be \n+configured. For cookie authentication the user running bitcoind must have write access \n+to the `CookieAuthFile` specified in Tor configuration. In some cases this is \n+preconfigured and the creation of a hidden service is automatic. If permission problems \n+are seen with `-debug=tor` they can be resolved by adding both the user running tor and \n+the user running bitcoind to the same group and setting permissions appropriately. On \n+Debian-based systems the user running bitcoind can be added to the debian-tor group, \n+which has the appropriate permissions. An alternative authentication method is the use \n+of the `-torpassword` flag and a `hash-password` which can be enabled and specified in \n+Tor configuration.\n\\ No newline at end of file"
      },
      {
        "sha": "6079e3254f783e4b9df6e3994869a454d10aaf7c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -38,7 +38,7 @@ newer. Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n-also install *python-zmq*, though this is not necessary for daemon\n+also install *python3-zmq*, though this is not necessary for daemon\n operation.\n \n ## Enabling\n@@ -99,3 +99,8 @@ using other means such as firewalling.\n Note that when the block chain tip changes, a reorganisation may occur\n and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n+\n+There are several possibilities that ZMQ notification can get lost\n+during transmission depending on the communication type your are\n+using. Bitcoind appends an up-counting sequence number to each\n+notification which allows listeners to detect lost notifications."
      },
      {
        "sha": "7489eb5130ac090658051ef17b98a7296a19293e",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -11,23 +11,36 @@ Before running the tests, the following must be installed.\n \n Unix\n ----\n-The python-zmq library is required. On Ubuntu or Debian it can be installed via: \n+The python3-zmq library is required. On Ubuntu or Debian it can be installed via:\n ```\n-sudo apt-get install python-zmq\n+sudo apt-get install python3-zmq\n ```\n \n Running tests\n =============\n \n-You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n+You can run any single test by calling\n \n-Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+    qa/pull-tester/rpc-tests.py <testname>\n \n-Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n+Or you can run any combination of tests by calling\n \n-Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n+    qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...\n \n-Possible options:\n+Run the regression test suite with\n+\n+    qa/pull-tester/rpc-tests.py\n+\n+Run all possible tests with\n+\n+    qa/pull-tester/rpc-tests.py -extended\n+\n+By default, tests will be run in parallel if you want to specify how many\n+tests should be run in parallel, append `-paralell=n` (default n=4).\n+\n+If you want to create a basic coverage report for the rpc test suite, append `--coverage`.\n+\n+Possible options, which apply to each individual test run:\n \n ```\n   -h, --help            show this help message and exit"
      },
      {
        "sha": "37979a933fc29bdd0a39b2c4d36291c2543e2caf",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 120,
        "deletions": 56,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -29,8 +29,17 @@\n import tempfile\n import re\n \n+sys.path.append(\"qa/pull-tester/\")\n from tests_config import *\n \n+BOLD = (\"\",\"\")\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+\n+RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+\n #If imported values are not defined then set to zero (or disabled)\n if 'ENABLE_WALLET' not in vars():\n     ENABLE_WALLET=0\n@@ -43,51 +52,58 @@\n \n ENABLE_COVERAGE=0\n \n-#Create a set to store arguments and create the passOn string\n+#Create a set to store arguments and create the passon string\n opts = set()\n-passOn = \"\"\n-p = re.compile(\"^--\")\n+passon_args = []\n+PASSON_REGEX = re.compile(\"^--\")\n+PARALLEL_REGEX = re.compile('^-parallel=')\n \n-bold = (\"\",\"\")\n-if (os.name == 'posix'):\n-    bold = ('\\033[0m', '\\033[1m')\n+print_help = False\n+run_parallel = 4\n \n for arg in sys.argv[1:]:\n+    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n+        print_help = True\n+        break\n     if arg == '--coverage':\n         ENABLE_COVERAGE = 1\n-    elif (p.match(arg) or arg == \"-h\"):\n-        passOn += \" \" + arg\n+    elif PASSON_REGEX.match(arg):\n+        passon_args.append(arg)\n+    elif PARALLEL_REGEX.match(arg):\n+        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n     else:\n         opts.add(arg)\n \n #Set env vars\n-buildDir = BUILDDIR\n if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n+    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n if \"BITCOINCLI\" not in os.environ:\n-    os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n+    os.environ[\"BITCOINCLI\"] = BUILDDIR + '/src/bitcoin-cli' + EXEEXT\n \n if EXEEXT == \".exe\" and \"-win\" not in opts:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print \"Win tests currently disabled by default.  Use -win option to enable\"\n+    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n     sys.exit(0)\n \n if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n-# python-zmq may not be installed. Handle this gracefully and with some helpful info\n+# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n if ENABLE_ZMQ:\n     try:\n         import zmq\n     except ImportError as e:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \" \\\n+        print(\"WARNING: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \" \\\n             \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        raise e\n+        ENABLE_ZMQ=0\n \n #Tests\n testScripts = [\n+    # longest test should go first, to favor running tests in parallel\n+    'p2p-fullblocktest.py',\n+    'walletbackup.py',\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n     'listtransactions.py',\n@@ -108,11 +124,9 @@\n     'merkle_blocks.py',\n     'fundrawtransaction.py',\n     'signrawtransactions.py',\n-    'walletbackup.py',\n     'nodehandling.py',\n     'reindex.py',\n     'decodescript.py',\n-    'p2p-fullblocktest.py',\n     'blockchain.py',\n     'disablewallet.py',\n     'sendheaders.py',\n@@ -125,6 +139,7 @@\n     'p2p-segwit.py',\n     'segwit.py',\n     'importprunedfunds.py',\n+    'signmessages.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')\n@@ -153,57 +168,106 @@\n     'pruning.py', # leave pruning last as it takes a REALLY long time\n ]\n \n+\n def runtests():\n+    test_list = []\n+    if '-extended' in opts:\n+        test_list = testScripts + testScriptsExt\n+    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n+        test_list = testScripts\n+    else:\n+        for t in testScripts + testScriptsExt:\n+            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n+                test_list.append(t)\n+\n+    if print_help:\n+        # Only print help of the first script and exit\n+        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        sys.exit(0)\n+\n     coverage = None\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n+    if coverage:\n+        flags.append(coverage.flag)\n \n-    rpcTestDir = buildDir + '/qa/rpc-tests/'\n-    run_extended = '-extended' in opts\n-    cov_flag = coverage.flag if coverage else ''\n-    flags = \" --srcdir %s/src %s %s\" % (buildDir, cov_flag, passOn)\n+    if len(test_list) > 1 and run_parallel > 1:\n+        # Populate cache\n+        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    for i in range(len(testScripts)):\n-        if (len(opts) == 0\n-                or (len(opts) == 1 and \"-win\" in opts )\n-                or run_extended\n-                or testScripts[i] in opts\n-                or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-\n-            print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n-            time0 = time.time()\n-            subprocess.check_call(\n-                rpcTestDir + testScripts[i] + flags, shell=True)\n-            print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n-\n-            # exit if help is called so we print just one set of\n-            # instructions\n-            p = re.compile(\" -h| --help\")\n-            if p.match(passOn):\n-                sys.exit(0)\n-\n-    # Run Extended Tests\n-    for i in range(len(testScriptsExt)):\n-        if (run_extended or testScriptsExt[i] in opts\n-                or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-\n-            print(\n-                \"Running 2nd level testscript \"\n-                + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n-            time0 = time.time()\n-            subprocess.check_call(\n-                rpcTestDir + testScriptsExt[i] + flags, shell=True)\n-            print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n+    max_len_name = len(max(test_list, key=len))\n+    time_sum = 0\n+    time0 = time.time()\n+    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n+    all_passed = True\n+    for _ in range(len(test_list)):\n+        (name, stdout, stderr, passed, duration) = job_queue.get_next()\n+        all_passed = all_passed and passed\n+        time_sum += duration\n+\n+        print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n+        print(stdout)\n+        print('stderr:\\n' if not stderr == '' else '', stderr)\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+        print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n+    print(results)\n+    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n \n         print(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    sys.exit(not all_passed)\n+\n+\n+class RPCTestHandler:\n+    \"\"\"\n+    Trigger the testscrips passed in via the list.\n+    \"\"\"\n+\n+    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+        assert(num_tests_parallel >= 1)\n+        self.num_jobs = num_tests_parallel\n+        self.test_list = test_list\n+        self.flags = flags\n+        self.num_running = 0\n+        self.jobs = []\n+\n+    def get_next(self):\n+        while self.num_running < self.num_jobs and self.test_list:\n+            # Add tests\n+            self.num_running += 1\n+            t = self.test_list.pop(0)\n+            port_seed = [\"--portseed=%s\" % len(self.test_list)]\n+            self.jobs.append((t,\n+                              time.time(),\n+                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                                               universal_newlines=True,\n+                                               stdout=subprocess.PIPE,\n+                                               stderr=subprocess.PIPE)))\n+        if not self.jobs:\n+            raise IndexError('pop from empty list')\n+        while True:\n+            # Return first proc that finishes\n+            time.sleep(.5)\n+            for j in self.jobs:\n+                (name, time0, proc) = j\n+                if proc.poll() is not None:\n+                    (stdout, stderr) = proc.communicate(timeout=3)\n+                    passed = stderr == \"\" and proc.returncode == 0\n+                    self.num_running -= 1\n+                    self.jobs.remove(j)\n+                    return name, stdout, stderr, passed, int(time.time() - time0)\n+            print('.', end='', flush=True)\n+\n \n class RPCCoverage(object):\n     \"\"\"\n@@ -222,7 +286,7 @@ class RPCCoverage(object):\n     \"\"\"\n     def __init__(self):\n         self.dir = tempfile.mkdtemp(prefix=\"coverage\")\n-        self.flag = '--coveragedir %s' % self.dir\n+        self.flag = '--coveragedir=%s' % self.dir\n \n     def report_rpc_coverage(self):\n         \"\"\""
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,9 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2013-2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+SRCDIR=\"@abs_top_srcdir@\"\n BUILDDIR=\"@abs_top_builddir@\"\n EXEEXT=\"@EXEEXT@\"\n \n@@ -11,5 +12,3 @@ EXEEXT=\"@EXEEXT@\"\n @BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n-\n-"
      },
      {
        "sha": "c50c3cc562e5f60811da8bc66e9d3359e954f821",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,17 +1,18 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import urllib.parse\n \n class AbandonConflictTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -34,7 +35,7 @@ def run_test(self):\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost\n         balance = newbalance\n \n-        url = urlparse.urlparse(self.nodes[1].url)\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n \n         # Identify the 10btc outputs\n@@ -151,9 +152,9 @@ def run_test(self):\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         newbalance = self.nodes[0].getbalance()\n         #assert(newbalance == balance - Decimal(\"10\"))\n-        print \"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\"\n-        print \"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\"\n-        print balance , \" -> \" , newbalance , \" ?\"\n+        print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n+        print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n+        print(str(balance) + \" -> \" + str(newbalance) + \" ?\")\n \n if __name__ == '__main__':\n     AbandonConflictTest().main()"
      },
      {
        "sha": "754b6873b71ff7098535a3822ac04e273959dfe5",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -38,11 +37,12 @@ def cltv_invalidate(tx):\n class BIP65Test(ComparisonTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir,\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n                                  binary=[self.options.testbinary])\n \n@@ -67,13 +67,13 @@ def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -86,7 +86,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n@@ -138,7 +138,7 @@ def get_tests(self):\n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()"
      },
      {
        "sha": "abba7fc20e7d9296210f6d77a723a37b8046e8cd",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,6 +11,10 @@\n from test_framework.util import *\n \n class BIP65Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -32,7 +36,7 @@ def run_test(self):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -49,7 +53,7 @@ def run_test(self):\n         # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "8ba07043849a6fd346f4caf7c001b73a41054535",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 56,
        "deletions": 56,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -63,13 +62,13 @@\n # b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n # relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n relative_locktimes = []\n-for b31 in xrange(2):\n+for b31 in range(2):\n     b25times = []\n-    for b25 in xrange(2):\n+    for b25 in range(2):\n         b22times = []\n-        for b22 in xrange(2):\n+        for b22 in range(2):\n             b18times = []\n-            for b18 in xrange(2):\n+            for b18 in range(2):\n                 rlt = base_relative_locktime\n                 if (b31):\n                     rlt = rlt | seq_disable_flag\n@@ -86,20 +85,21 @@\n \n def all_rlt_txs(txarray):\n     txs = []\n-    for b31 in xrange(2):\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+    for b31 in range(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     txs.append(txarray[b31][b25][b22][b18])\n     return txs\n \n class BIP68_112_113Test(ComparisonTestFramework):\n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir,\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n                                  binary=[self.options.testbinary])\n \n@@ -131,7 +131,7 @@ def sign_transaction(self, node, unsignedtx):\n         return tx\n \n     def generate_blocks(self, number, version, test_blocks = []):\n-        for i in xrange(number):\n+        for i in range(number):\n             block = self.create_test_block([], version)\n             test_blocks.append([block, True])\n             self.last_block_time += 600\n@@ -152,13 +152,13 @@ def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n         txs = []\n         assert(len(bip68inputs) >= 16)\n         i = 0\n-        for b31 in xrange(2):\n+        for b31 in range(2):\n             b25txs = []\n-            for b25 in xrange(2):\n+            for b25 in range(2):\n                 b22txs = []\n-                for b22 in xrange(2):\n+                for b22 in range(2):\n                     b18txs = []\n-                    for b18 in xrange(2):\n+                    for b18 in range(2):\n                         tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n                         i += 1\n                         tx.nVersion = txversion\n@@ -180,13 +180,13 @@ def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta =\n         txs = []\n         assert(len(bip112inputs) >= 16)\n         i = 0\n-        for b31 in xrange(2):\n+        for b31 in range(2):\n             b25txs = []\n-            for b25 in xrange(2):\n+            for b25 in range(2):\n                 b22txs = []\n-                for b22 in xrange(2):\n+                for b22 in range(2):\n                     b18txs = []\n-                    for b18 in xrange(2):\n+                    for b18 in range(2):\n                         tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n                         i += 1\n                         if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n@@ -212,7 +212,7 @@ def get_tests(self):\n         self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n         self.tipheight = 82 # height of the next block to build\n         self.last_block_time = long_past_time\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n@@ -250,20 +250,20 @@ def get_tests(self):\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n-        for i in xrange(16):\n+        for i in range(16):\n             bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n         # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112basicinputs = []\n-        for j in xrange(2):\n+        for j in range(2):\n             inputs = []\n-            for i in xrange(16):\n+            for i in range(16):\n                 inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n             bip112basicinputs.append(inputs)\n         # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112diverseinputs = []\n-        for j in xrange(2):\n+        for j in range(2):\n             inputs = []\n-            for i in xrange(16):\n+            for i in range(16):\n                 inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n             bip112diverseinputs.append(inputs)\n         # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n@@ -274,7 +274,7 @@ def get_tests(self):\n         self.nodes[0].setmocktime(self.last_block_time + 600)\n         inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n         self.nodes[0].setmocktime(0)\n-        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tip = int(\"0x\" + inputblockhash, 0)\n         self.tipheight += 1\n         self.last_block_time += 600\n         assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n@@ -398,22 +398,22 @@ def get_tests(self):\n         ### Version 2 txs ###\n         bip68success_txs = []\n         # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n         yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n         bip68timetxs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n         for tx in bip68timetxs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n         bip68heighttxs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n         for tx in bip68heighttxs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n@@ -445,9 +445,9 @@ def get_tests(self):\n         yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n         yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n@@ -457,9 +457,9 @@ def get_tests(self):\n         fail_txs = []\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n \n@@ -472,9 +472,9 @@ def get_tests(self):\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n \n@@ -485,45 +485,45 @@ def get_tests(self):\n         # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n         fail_txs = []\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n \n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n         fail_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n \n         # If sequencelock types mismatch, tx should fail\n         fail_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n                 fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n \n         # Remaining txs should pass, just test masking works properly\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n                 success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n         yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Additional test, of checking that comparison of two time types works properly\n         time_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n                 tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n                 signtx = self.sign_transaction(self.nodes[0], tx)"
      },
      {
        "sha": "a12bf10ebd75895e31e369572517150a002f6f97",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,6 +22,10 @@\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n class BIP68Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -35,28 +39,28 @@ def run_test(self):\n         # Generate some coins\n         self.nodes[0].generate(110)\n \n-        print \"Running test disable flag\"\n+        print(\"Running test disable flag\")\n         self.test_disable_flag()\n \n-        print \"Running test sequence-lock-confirmed-inputs\"\n+        print(\"Running test sequence-lock-confirmed-inputs\")\n         self.test_sequence_lock_confirmed_inputs()\n \n-        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        print(\"Running test sequence-lock-unconfirmed-inputs\")\n         self.test_sequence_lock_unconfirmed_inputs()\n \n-        print \"Running test BIP68 not consensus before versionbits activation\"\n+        print(\"Running test BIP68 not consensus before versionbits activation\")\n         self.test_bip68_not_consensus()\n \n-        print \"Verifying nVersion=2 transactions aren't standard\"\n+        print(\"Verifying nVersion=2 transactions aren't standard\")\n         self.test_version2_relay(before_activation=True)\n \n-        print \"Activating BIP68 (and 112/113)\"\n+        print(\"Activating BIP68 (and 112/113)\")\n         self.activateCSV()\n \n-        print \"Verifying nVersion=2 transactions are now standard\"\n+        print(\"Verifying nVersion=2 transactions are now standard\")\n         self.test_version2_relay(before_activation=False)\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     # Test that BIP68 is not in effect if tx version is 1, or if\n     # the first sequence bit is set.\n@@ -125,7 +129,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             random.shuffle(addresses)\n             num_outputs = random.randint(1, max_outputs)\n             outputs = {}\n-            for i in xrange(num_outputs):\n+            for i in range(num_outputs):\n                 outputs[addresses[i]] = random.randint(1, 20)*0.01\n             self.nodes[0].sendmany(\"\", outputs)\n             self.nodes[0].generate(1)\n@@ -137,7 +141,7 @@ def test_sequence_lock_confirmed_inputs(self):\n         # some of those inputs to be sequence locked (and randomly choose\n         # between height/time locking). Small random chance of making the locks\n         # all pass.\n-        for i in xrange(400):\n+        for i in range(400):\n             # Randomly choose up to 10 inputs\n             num_inputs = random.randint(1, 10)\n             random.shuffle(utxos)\n@@ -151,7 +155,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             tx = CTransaction()\n             tx.nVersion = 2\n             value = 0\n-            for j in xrange(num_inputs):\n+            for j in range(num_inputs):\n                 sequence_value = 0xfffffffe # this disables sequence locks\n \n                 # 50% chance we enable sequence locks\n@@ -259,7 +263,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Use prioritisetransaction to lower the effective feerate to 0\n         self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n         cur_time = int(time.time())\n-        for i in xrange(10):\n+        for i in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.nodes[0].generate(1)\n             cur_time += 600\n@@ -324,7 +328,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # tx3 to be removed.\n         tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n         height = self.nodes[0].getblockcount()\n-        for i in xrange(2):\n+        for i in range(2):\n             block = create_block(tip, create_coinbase(height), cur_time)\n             block.nVersion = 3\n             block.rehash()"
      },
      {
        "sha": "d7e8e5e5a5588114e1e70e6386574f79fe85397c",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 37,
        "deletions": 10,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,9 +1,9 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n+from test_framework.blockstore import BlockStore\n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, NetworkThread\n@@ -32,10 +32,11 @@\n class BIP9SoftForksTest(ComparisonTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(1, self.options.tmpdir,\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                  binary=[self.options.testbinary])\n \n@@ -64,7 +65,7 @@ def sign_transaction(self, node, tx):\n         return tx\n \n     def generate_blocks(self, number, version, test_blocks = []):\n-        for i in xrange(number):\n+        for i in range(number):\n             block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n             block.nVersion = version\n             block.rehash()\n@@ -79,22 +80,32 @@ def get_bip9_status(self, key):\n         info = self.nodes[0].getblockchaininfo()\n         return info['bip9_softforks'][key]\n \n-    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert_equal(tmpl['version'], 0x20000000)\n \n         # Test 1\n         # Advance from DEFINED to STARTED\n         test_blocks = self.generate_blocks(141, 4)\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n \n         # Test 2\n         # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n@@ -106,6 +117,11 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n \n         # Test 3\n         # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n@@ -117,13 +133,17 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n \n         # Test 4\n         # 143 more version 536870913 blocks (waiting period-1)\n         test_blocks = self.generate_blocks(143, 4)\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n \n         # Test 5\n         # Check that the new rule is enforced\n@@ -147,6 +167,11 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(not (tmpl['version'] & (1 << bitno)))\n \n         # Test 6\n         # Check that the new sequence lock rules are enforced\n@@ -168,21 +193,23 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, False]])\n \n         # Restart all\n+        self.test.block_store.close()\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n         shutil.rmtree(self.options.tmpdir)\n         self.setup_chain()\n         self.setup_network()\n+        self.test.block_store = BlockStore(self.options.tmpdir)\n         self.test.clear_all_connections()\n         self.test.add_all_connections(self.nodes)\n         NetworkThread().start() # Start up network handling in another thread\n \n \n     def get_tests(self):\n         for test in itertools.chain(\n-                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n-                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n-                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n+                self.test_BIP('csv', 0x20000001, self.sequence_lock_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.mtp_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.donothing, self.csv_invalidate, 0)\n         ):\n             yield test\n "
      },
      {
        "sha": "4e4936a4ae6de0f532154c021779bcc1f14a0f91",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -46,11 +45,12 @@ def unDERify(tx):\n class BIP66Test(ComparisonTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir, \n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2']],\n                                  binary=[self.options.testbinary])\n \n@@ -75,13 +75,13 @@ def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -94,7 +94,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -146,7 +146,7 @@ def get_tests(self):\n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()"
      },
      {
        "sha": "17c2ced79ac1ec6c985e61059bb965331eaddebb",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,6 +11,10 @@\n from test_framework.util import *\n \n class BIP66Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -32,7 +36,7 @@ def run_test(self):\n             raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -49,7 +53,7 @@ def run_test(self):\n         # TODO: check that new DERSIG rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "410b85d15e35f04a31834bf3b492f9164dbce67a",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,7 +13,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n-    initialize_chain,\n     assert_equal,\n     assert_raises,\n     assert_is_hex_string,\n@@ -32,12 +31,13 @@ class BlockchainTest(BitcoinTestFramework):\n \n     \"\"\"\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \" + self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.is_network_split = False\n         self.sync_all()\n@@ -51,13 +51,13 @@ def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()\n \n-        assert_equal(res[u'total_amount'], Decimal('8725.00000000'))\n-        assert_equal(res[u'transactions'], 200)\n-        assert_equal(res[u'height'], 200)\n-        assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13924),\n-        assert_equal(len(res[u'bestblock']), 64)\n-        assert_equal(len(res[u'hash_serialized']), 64)\n+        assert_equal(res['total_amount'], Decimal('8725.00000000'))\n+        assert_equal(res['transactions'], 200)\n+        assert_equal(res['height'], 200)\n+        assert_equal(res['txouts'], 200)\n+        assert_equal(res['bytes_serialized'], 13924),\n+        assert_equal(len(res['bestblock']), 64)\n+        assert_equal(len(res['hash_serialized']), 64)\n \n     def _test_getblockheader(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "b6161e0917d07593b2ffad50dcaea56b1fd77854",
        "filename": "qa/rpc-tests/create_cache.py",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/create_cache.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Helper script to create the cache\n+# (see BitcoinTestFramework.setup_chain)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class CreateCache(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        # Don't setup any test nodes\n+        self.options.noshutdown = True\n+\n+    def run_test(self):\n+        pass\n+\n+if __name__ == '__main__':\n+    CreateCache().main()"
      },
      {
        "sha": "24768c265577a49367b9c7c67d8d79059f37e3c2",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,12 +11,13 @@\n class DecodeScriptTest(BitcoinTestFramework):\n     \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n \n-    def setup_chain(self):\n-        print('Initializing test directory ' + self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def decodescript_script_sig(self):"
      },
      {
        "sha": "36c147edad3a6f9c94c16e744432ba337e654ce0",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,12 +13,13 @@\n \n class DisableWalletTest (BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir, [['-disablewallet']])\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n         self.is_network_split = False\n         self.sync_all()\n "
      },
      {
        "sha": "5a3f75c8087410b0a8e18990f13b60db26eeeb23",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,6 +12,11 @@\n \n class ForkNotifyTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n     alert_filename = None  # Set by setup_network\n \n     def setup_network(self):"
      },
      {
        "sha": "eeb8476634fcb99dae9b8d010a30a98d95100b8b",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 54,
        "deletions": 88,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,20 +1,28 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-# Create one-input, one-output, no-fee transaction:\n+\n+def get_unspent(listunspent, amount):\n+    for utx in listunspent:\n+        if utx['amount'] == amount:\n+            return utx\n+    raise AssertionError('Could not find unspent with amount={}'.format(amount))\n+\n+\n class RawTransactionsTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(4, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -25,7 +33,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like\n@@ -57,7 +65,6 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n \n-        self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n@@ -71,7 +78,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert(len(dec_tx['vin']) > 0) #test if we have enought inputs\n+        assert(len(dec_tx['vin']) > 0) #test that we have enough inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -123,14 +130,7 @@ def run_test(self):\n         #########################################################################\n         # test a fundrawtransaction with a VIN greater than the required amount #\n         #########################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break\n-\n-        assert(utx!=False)\n+        utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -151,14 +151,7 @@ def run_test(self):\n         #####################################################################\n         # test a fundrawtransaction with which will not get a change output #\n         #####################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break\n-\n-        assert(utx!=False)\n+        utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n@@ -180,14 +173,7 @@ def run_test(self):\n         ####################################################\n         # test a fundrawtransaction with an invalid option #\n         ####################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break\n-\n-        assert_equal(utx!=False, True)\n+        utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n@@ -198,21 +184,14 @@ def run_test(self):\n         try:\n             self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n             raise AssertionError(\"Accepted invalid option foo\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Unexpected key foo\" in e.error['message'])\n \n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break\n-\n-        assert_equal(utx!=False, True)\n+        utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n@@ -223,22 +202,14 @@ def run_test(self):\n         try:\n             self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n             raise AssertionError(\"Accepted invalid bitcoin address\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n \n \n-\n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n         ############################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break\n-\n-        assert_equal(utx!=False, True)\n+        utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n@@ -247,24 +218,22 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n+        try:\n+            rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 2})\n+        except JSONRPCException as e:\n+            assert('changePosition out of bounds' == e.error['message'])\n+        else:\n+            assert(False)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0];\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n \n-\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-                break\n-\n-        assert(utx!=False)\n+        utx = get_unspent(self.nodes[2].listunspent(), 1)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -299,17 +268,8 @@ def run_test(self):\n         ###########################################\n         # test a fundrawtransaction with two VINs #\n         ###########################################\n-        utx  = False\n-        utx2 = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-            if aUtx['amount'] == 5.0:\n-                utx2 = aUtx\n-\n-\n-        assert(utx!=False)\n+        utx = get_unspent(self.nodes[2].listunspent(), 1)\n+        utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0 }\n@@ -341,17 +301,8 @@ def run_test(self):\n         #########################################################\n         # test a fundrawtransaction with two VINs and two vOUTs #\n         #########################################################\n-        utx  = False\n-        utx2 = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-            if aUtx['amount'] == 5.0:\n-                utx2 = aUtx\n-\n-\n-        assert(utx!=False)\n+        utx = get_unspent(self.nodes[2].listunspent(), 1)\n+        utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n@@ -521,7 +472,7 @@ def run_test(self):\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n \n-        self.nodes = start_nodes(4, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:\n@@ -551,7 +502,6 @@ def run_test(self):\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n-        self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n@@ -571,7 +521,6 @@ def run_test(self):\n \n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n-        self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n@@ -602,7 +551,6 @@ def run_test(self):\n \n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n-        self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n@@ -676,7 +624,25 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n \n+        #######################\n+        # Test feeRate option #\n+        #######################\n+\n+        # Make sure there is exactly one input so coin selection can't skew the result\n+        assert_equal(len(self.nodes[3].listunspent(1)), 1)\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : 1}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n+        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10*min_relay_tx_fee})\n+        result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n+        assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "3cddf4046aaf6eed75634c4ef2161a0a607ebc09",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,33 +1,11 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n import threading\n \n class LongpollThread(threading.Thread):\n@@ -48,8 +26,13 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     Test longpolling with getblocktemplate.\n     '''\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n     def run_test(self):\n-        print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n+        print(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n         templat = self.nodes[0].getblocktemplate()\n         longpollid = templat['longpollid']"
      },
      {
        "sha": "7a4f8f8fdc3c2a3cc50e3c71030c3578d3919c1e",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 15,
        "deletions": 28,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,28 +10,6 @@\n from hashlib import sha256\n from struct import pack\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n \n@@ -68,7 +46,7 @@ def genmrklroot(leaflist):\n         cur = n\n     return cur[0]\n \n-def template_to_bytes(tmpl, txlist):\n+def template_to_bytearray(tmpl, txlist):\n     blkver = pack('<L', tmpl['version'])\n     mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n     timestamp = pack('<L', tmpl['curtime'])\n@@ -77,10 +55,10 @@ def template_to_bytes(tmpl, txlist):\n     blk += varlenEncode(len(txlist))\n     for tx in txlist:\n         blk += tx\n-    return blk\n+    return bytearray(blk)\n \n def template_to_hex(tmpl, txlist):\n-    return b2x(template_to_bytes(tmpl, txlist))\n+    return b2x(template_to_bytearray(tmpl, txlist))\n \n def assert_template(node, tmpl, txlist, expect):\n     rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n@@ -92,6 +70,15 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n     Test block proposals with getblocktemplate.\n     '''\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n     def run_test(self):\n         node = self.nodes[0]\n         node.generate(1) # Mine a block to leave initial block download\n@@ -151,7 +138,7 @@ def run_test(self):\n         tmpl['bits'] = realbits\n \n         # Test 9: Bad merkle root\n-        rawtmpl = template_to_bytes(tmpl, txlist)\n+        rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n         if rsp != 'bad-txnmrklroot':"
      },
      {
        "sha": "1c66b8c28927d110947e6430f04787bb9bd2bb0d",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,9 +11,12 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n \n     def run_test (self):\n-        BitcoinTestFramework.run_test (self)\n \n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "10bc927e1a51a6ea1aefa2bbc1b89f374c61a3bd",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,29 +10,28 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir)\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n+\n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n \n     def run_test(self):\n \n         #################################################\n         # lowlevel check for http persistent connection #\n         #################################################\n-        url = urlparse.urlparse(self.nodes[0].url)\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n@@ -49,7 +48,7 @@ def run_test(self):\n         #same should be if we add keep-alive because this should be the std. behaviour\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\": \"keep-alive\"}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n@@ -66,48 +65,48 @@ def run_test(self):\n         #now do the same with \"Connection: close\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\":\"close\"}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n         assert(conn.sock==None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n-        urlNode1 = urlparse.urlparse(self.nodes[1].url)\n+        urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n+        conn = http.client.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n-        urlNode2 = urlparse.urlparse(self.nodes[2].url)\n+        urlNode2 = urllib.parse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n         assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('GET', '/' + ('x'*1000), '', headers)\n         out1 = conn.getresponse()\n-        assert_equal(out1.status, httplib.NOT_FOUND)\n+        assert_equal(out1.status, http.client.NOT_FOUND)\n \n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('GET', '/' + ('x'*10000), '', headers)\n         out1 = conn.getresponse()\n-        assert_equal(out1.status, httplib.BAD_REQUEST)\n+        assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "d86f51b7f3aaf691b721a5f906ca1f3008b51666",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -9,12 +9,13 @@\n \n class ImportPrunedFundsTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         self.is_network_split=False\n         self.sync_all()\n@@ -23,7 +24,7 @@ def run_test (self):\n         import time\n         begintime = int(time.time())\n \n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(101)\n \n         # sync"
      },
      {
        "sha": "0faadd33ab35a55cf68b1e3b20ad71286ca9c2f9",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,10 +13,11 @@\n class InvalidateTest(BitcoinTestFramework):\n     \n         \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n-                 \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n@@ -25,46 +26,46 @@ def setup_network(self):\n         self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n-        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n-        print \"Mine 4 blocks on Node 0\"\n+        print(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n+        print(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generate(4)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n-        print \"Mine competing 6 blocks on Node 1\"\n+        print(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generate(6)\n         assert(self.nodes[1].getblockcount() == 6)\n \n-        print \"Connect nodes to force a reorg\"\n+        print(\"Connect nodes to force a reorg\")\n         connect_nodes_bi(self.nodes,0,1)\n         sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n-        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        print(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n         newheight = self.nodes[0].getblockcount()\n         newhash = self.nodes[0].getbestblockhash()\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n-        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        print(\"\\nMake sure we won't reorg to a lower work chain:\")\n         connect_nodes_bi(self.nodes,1,2)\n-        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        print(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n         assert(self.nodes[2].getblockcount() == 6)\n-        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        print(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n         assert(self.nodes[1].getblockcount() == 4)\n-        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        print(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n-        print \"..and then mine a block\"\n+        print(\"..and then mine a block\")\n         self.nodes[2].generate(1)\n-        print \"Verify all nodes are at the right height\"\n+        print(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n-        for i in xrange(3):\n-            print i,self.nodes[i].getblockcount()\n+        for i in range(3):\n+            print(i,self.nodes[i].getblockcount())\n         assert(self.nodes[2].getblockcount() == 3)\n         assert(self.nodes[0].getblockcount() == 4)\n         node1height = self.nodes[1].getblockcount()"
      },
      {
        "sha": "3d8107a76c661a7890ee9a3abbd5f360291791eb",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -26,6 +25,7 @@ class InvalidBlockRequestTest(ComparisonTestFramework):\n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def run_test(self):\n@@ -38,7 +38,7 @@ def run_test(self):\n \n     def get_tests(self):\n         if self.tip is None:\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.block_time = int(time.time())+1\n \n         '''\n@@ -58,7 +58,7 @@ def get_tests(self):\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n-        for i in xrange(100):\n+        for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256"
      },
      {
        "sha": "93205d79dee5bddd8e5e3d0862374dd72d1fdcb1",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n@@ -20,6 +19,7 @@ class InvalidTxRequestTest(ComparisonTestFramework):\n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def run_test(self):\n@@ -32,7 +32,7 @@ def run_test(self):\n \n     def get_tests(self):\n         if self.tip is None:\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.block_time = int(time.time())+1\n \n         '''\n@@ -52,7 +52,7 @@ def get_tests(self):\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n-        for i in xrange(100):\n+        for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256"
      },
      {
        "sha": "c75303ecbfc31b571b9825fb675df119627f0890",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 7,
        "deletions": 30,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,37 +1,13 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Exercise the wallet keypool, and interaction with wallet encryption/locking\n \n-# Add python-bitcoinrpc to module search path:\n-\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class KeyPoolTest(BitcoinTestFramework):\n \n     def run_test(self):\n@@ -87,12 +63,13 @@ def run_test(self):\n         except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.nodes = self.setup_nodes()\n \n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "5ec6ce17e01e8aae3ad4a513b4eaafdf1127edc7",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 32,
        "deletions": 49,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,60 +16,43 @@ def txFromHex(hexstring):\n     tx.deserialize(f)\n     return tx\n \n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class ListTransactionsTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n \n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(4, self.options.tmpdir)\n+        return start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n         # mine a block, confirmations should change:\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n \n         # send-to-self:\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"send\"},\n                            {\"amount\":Decimal(\"-0.2\")})\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"receive\"},\n                            {\"amount\":Decimal(\"0.2\")})\n \n@@ -80,28 +63,28 @@ def run_test(self):\n                     self.nodes[1].getaccountaddress(\"toself\") : 0.44 }\n         txid = self.nodes[1].sendmany(\"\", send_to)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n                            {\"txid\":txid, \"account\" : \"from1\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n                            {\"txid\":txid, \"account\" : \"\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n@@ -111,7 +94,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n         assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n-        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+        assert_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n                            {\"txid\":txid, \"account\" : \"watchonly\"} )\n \n@@ -139,9 +122,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # 1. Chain a few transactions that don't opt-in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert(not is_opt_in(self.nodes[0], txid_1))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx2 will build off txid_1, still not opting in to RBF.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n@@ -155,9 +138,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # ...and check the result\n         assert(not is_opt_in(self.nodes[1], txid_2))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx3 will opt-in to RBF\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n@@ -171,9 +154,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n         # that does.\n@@ -185,9 +168,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n@@ -197,9 +180,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n \n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n \n         # Check gettransaction as well:\n         for n in self.nodes[0:2]:"
      },
      {
        "sha": "1df1c484bea1205ac3f8ec51f5c87830bc505a94",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -65,7 +64,7 @@ def run(self):\n                         raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n             if total_requests > MAX_REQUESTS:\n                 raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-            print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n+            print(\"Round %d: success (total requests: %d)\" % (count, total_requests))\n \n         self.disconnectOkay = True\n         self.connection.disconnect_node()\n@@ -77,12 +76,13 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"Binary to test max block requests behavior\")\n \n-    def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(1, self.options.tmpdir,\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                  binary=[self.options.testbinary])\n "
      },
      {
        "sha": "125d4eb275190238baa2355e93b0a05f7bc6e4ea",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -81,17 +80,19 @@ def received_pong():\n         return success\n \n class MaxUploadTest(BitcoinTestFramework):\n-    def __init__(self):\n-        self.utxo = []\n-        self.txouts = gen_return_txouts()\n  \n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def setup_chain(self):\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n \n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n@@ -101,7 +102,7 @@ def setup_network(self):\n     def mine_full_block(self, node, address):\n         # Want to create a full block\n         # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n-        for j in xrange(14):\n+        for j in range(14):\n             if len(self.utxo) < 14:\n                 self.utxo = node.listunspent()\n             inputs=[]\n@@ -139,7 +140,7 @@ def run_test(self):\n         test_nodes = []\n         connections = []\n \n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes.append(TestNode())\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n@@ -181,40 +182,40 @@ def run_test(self):\n \n         # 576MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~235 tries.\n-        for i in xrange(success_count):\n+        for i in range(success_count):\n             test_nodes[0].send_message(getdata_request)\n             test_nodes[0].sync_with_ping()\n             assert_equal(test_nodes[0].block_receive_map[big_old_block], i+1)\n \n         assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n         # At most a couple more tries should succeed (depending on how long \n         # the test has been running so far).\n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes[0].send_message(getdata_request)\n         test_nodes[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n-        print \"Peer 0 disconnected after downloading old block too many times\"\n+        print(\"Peer 0 disconnected after downloading old block too many times\")\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n         # We'll try 800 times\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(800):\n+        for i in range(800):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n \n-        print \"Peer 1 able to repeatedly download new block\"\n+        print(\"Peer 1 able to repeatedly download new block\")\n \n         # But if test_nodes[1] tries for an old block, it gets disconnected too.\n         getdata_request.inv = [CInv(2, big_old_block)]\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n \n-        print \"Peer 1 disconnected after trying to download old block\"\n+        print(\"Peer 1 disconnected after trying to download old block\")\n \n-        print \"Advancing system time on node to clear counters...\"\n+        print(\"Advancing system time on node to clear counters...\")\n \n         # If we advance the time by 24 hours, then the counters should reset,\n         # and test_nodes[2] should be able to retrieve the old block.\n@@ -224,20 +225,20 @@ def run_test(self):\n         test_nodes[2].sync_with_ping()\n         assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n \n-        print \"Peer 2 able to download old block\"\n+        print(\"Peer 2 able to download old block\")\n \n         [c.disconnect_node() for c in connections]\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n-        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        print(\"Restarting nodes with -whitelist=127.0.0.1\")\n         stop_node(self.nodes[0], 0)\n         self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect 3 test nodes\n         test_nodes = []\n         connections = []\n \n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes.append(TestNode())\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n@@ -247,7 +248,7 @@ def run_test(self):\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(20):\n+        for i in range(20):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n@@ -257,7 +258,7 @@ def run_test(self):\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n \n-        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+        print(\"Peer 1 still connected after trying to download old block (whitelisted)\")\n \n         [c.disconnect_node() for c in connections]\n "
      },
      {
        "sha": "4438c152df10a077c6654e598c63ea19017eaae4",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,19 +10,19 @@\n \n class MempoolLimitTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        self.txouts = gen_return_txouts()\n-\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\", \"-debug\"]))\n         self.is_network_split = False\n         self.sync_all()\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+        self.txouts = gen_return_txouts()\n \n     def run_test(self):\n         txids = []\n@@ -41,7 +41,7 @@ def run_test(self):\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n-        for i in xrange (4):\n+        for i in range (4):\n             txids.append([])\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n "
      },
      {
        "sha": "45dc0e65c43c20cb58f82cdf5beb015b87b273ab",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 44,
        "deletions": 12,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,6 +13,10 @@\n MAX_DESCENDANTS = 25\n \n class MempoolPackagesTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -28,7 +32,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         send_value = satoshi_round((value - fee)/num_outputs)\n         inputs = [ {'txid' : parent_txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in xrange(num_outputs):\n+        for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signedtx = node.signrawtransaction(rawtx)\n@@ -48,7 +52,7 @@ def run_test(self):\n         fee = Decimal(\"0.0001\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n-        for i in xrange(MAX_ANCESTORS):\n+        for i in range(MAX_ANCESTORS):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n@@ -61,7 +65,14 @@ def run_test(self):\n         descendant_fees = 0\n         descendant_size = 0\n \n+        descendants = []\n+        ancestors = list(chain)\n         for x in reversed(chain):\n+            # Check that getmempoolentry is consistent with getrawmempool\n+            entry = self.nodes[0].getmempoolentry(x)\n+            assert_equal(entry, mempool[x])\n+\n+            # Check that the descendant calculations are correct\n             assert_equal(mempool[x]['descendantcount'], descendant_count)\n             descendant_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee'])\n@@ -70,6 +81,27 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n \n+            # Check that getmempooldescendants is correct\n+            assert_equal(sorted(descendants), sorted(self.nodes[0].getmempooldescendants(x)))\n+            descendants.append(x)\n+\n+            # Check that getmempoolancestors is correct\n+            ancestors.remove(x)\n+            assert_equal(sorted(ancestors), sorted(self.nodes[0].getmempoolancestors(x)))\n+\n+        # Check that getmempoolancestors/getmempooldescendants correctly handle verbose=true\n+        v_ancestors = self.nodes[0].getmempoolancestors(chain[-1], True)\n+        assert_equal(len(v_ancestors), len(chain)-1)\n+        for x in v_ancestors.keys():\n+            assert_equal(mempool[x], v_ancestors[x])\n+        assert(chain[-1] not in v_ancestors.keys())\n+\n+        v_descendants = self.nodes[0].getmempooldescendants(chain[0], True)\n+        assert_equal(len(v_descendants), len(chain)-1)\n+        for x in v_descendants.keys():\n+            assert_equal(mempool[x], v_descendants[x])\n+        assert(chain[0] not in v_descendants.keys())\n+\n         # Check that descendant modified fees includes fee deltas from\n         # prioritisetransaction\n         self.nodes[0].prioritisetransaction(chain[-1], 0, 1000)\n@@ -84,7 +116,7 @@ def run_test(self):\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n-            print \"too-long-ancestor-chain successfully rejected\"\n+            print(\"too-long-ancestor-chain successfully rejected\")\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -121,22 +153,22 @@ def run_test(self):\n         # First create one parent tx with 10 children\n         (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n         parent_transaction = txid\n-        for i in xrange(10):\n+        for i in range(10):\n             transaction_package.append({'txid': txid, 'vout': i, 'amount': sent_value})\n \n-        for i in xrange(MAX_DESCENDANTS):\n+        for i in range(MAX_DESCENDANTS):\n             utxo = transaction_package.pop(0)\n             try:\n                 (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n-                for j in xrange(10):\n+                for j in range(10):\n                     transaction_package.append({'txid': txid, 'vout': j, 'amount': sent_value})\n                 if i == MAX_DESCENDANTS - 2:\n                     mempool = self.nodes[0].getrawmempool(True)\n                     assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n             except JSONRPCException as e:\n-                print e.error['message']\n+                print(e.error['message'])\n                 assert_equal(i, MAX_DESCENDANTS - 1)\n-                print \"tx that would create too large descendant package successfully rejected\"\n+                print(\"tx that would create too large descendant package successfully rejected\")\n \n         # TODO: check that node1's mempool is as expected\n \n@@ -171,7 +203,7 @@ def run_test(self):\n         send_value = satoshi_round((value - fee)/2)\n         inputs = [ {'txid' : txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in xrange(2):\n+        for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n@@ -185,7 +217,7 @@ def run_test(self):\n         # Create tx2-7\n         vout = 1\n         txid = tx0_id\n-        for i in xrange(6):\n+        for i in range(6):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n             vout = 0\n             value = sent_value"
      },
      {
        "sha": "301b094eb08ca6326d64cf8ae9c4ca77303e32ad",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,6 +13,10 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n \n     alert_filename = None  # Set by setup_network\n "
      },
      {
        "sha": "3db12cbf76a68f2ba1098f58224c9a7343716c7d",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,6 +14,11 @@\n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.setup_clean_chain = False\n+\n     def setup_network(self):\n         # Just need one node for this test\n         args = [\"-checkmempool\", \"-debug=mempool\"]"
      },
      {
        "sha": "d5e4bf52d26ce5b8ce8580cd28f4673a62666f83",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +19,11 @@\n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.setup_clean_chain = False\n+\n     def setup_network(self):\n         # Just need one node for this test\n         args = [\"-checkmempool\", \"-debug=mempool\"]"
      },
      {
        "sha": "b2155d7fc33c31b10642dccf2e8e13dbdf10ff7c",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,9 +12,10 @@\n \n class MerkleBlockTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n \n     def setup_network(self):\n         self.nodes = []\n@@ -32,7 +33,7 @@ def setup_network(self):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(105)\n         self.sync_all()\n "
      },
      {
        "sha": "24373b257d7e602b1ff6255b75a1ea328ba00604",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,38 +8,37 @@\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import base64\n-\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+from test_framework.util import str_to_b64str, assert_equal\n+\n+import os\n+import http.client\n+import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir)\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n \n     def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+        super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n         rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n         with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a') as f:\n             f.write(rpcauth+\"\\n\")\n             f.write(rpcauth2+\"\\n\")\n \n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n+\n     def run_test(self):\n \n         ##################################################\n         # Check correctness of the rpcauth config option #\n         ##################################################\n-        url = urlparse.urlparse(self.nodes[0].url)\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n         #Old authpair\n         authpair = url.username + ':' + url.password\n@@ -55,7 +54,7 @@ def run_test(self):\n \n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -65,7 +64,7 @@ def run_test(self):\n         #Use new authpair to confirm both work\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -76,7 +75,7 @@ def run_test(self):\n         authpairnew = \"rtwrong:\"+password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -87,7 +86,7 @@ def run_test(self):\n         authpairnew = \"rt:\"+password+\"wrong\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -98,7 +97,7 @@ def run_test(self):\n         authpairnew = \"rt2:\"+password2\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -109,7 +108,7 @@ def run_test(self):\n         authpairnew = \"rt2:\"+password2+\"wrong\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()"
      },
      {
        "sha": "e9682c4908f651366b8b554ab74ab45004975a0d",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,16 +10,16 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class NodeHandlingTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n     def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n@@ -69,7 +69,7 @@ def run_test(self):\n         ###########################\n         # RPC disconnectnode test #\n         ###########################\n-        url = urlparse.urlparse(self.nodes[1].url)\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n         time.sleep(2) #disconnecting a node needs a little bit of time\n         for node in self.nodes[0].getpeerinfo():"
      },
      {
        "sha": "015ec34effabe7f6db1099a0512ad979c4073a83",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -112,8 +111,10 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def setup_chain(self):\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n@@ -145,13 +146,13 @@ def run_test(self):\n \n         # 1. Have both nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n-        tips = [ int (\"0x\" + n.getbestblockhash() + \"L\", 0) for n in self.nodes ]\n+        tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n@@ -161,11 +162,11 @@ def run_test(self):\n         [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        print \"First height 2 block accepted by both nodes\"\n+        print(\"First height 2 block accepted by both nodes\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n             blocks_h2f[i].solve()\n         test_node.send_message(msg_block(blocks_h2f[0]))\n@@ -180,11 +181,11 @@ def run_test(self):\n             if x['hash'] == blocks_h2f[1].hash:\n                 assert_equal(x['status'], \"valid-headers\")\n \n-        print \"Second height 2 block accepted only from whitelisted peer\"\n+        print(\"Second height 2 block accepted only from whitelisted peer\")\n \n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n             blocks_h3[i].solve()\n         test_node.send_message(msg_block(blocks_h3[0]))\n@@ -200,22 +201,22 @@ def run_test(self):\n         # But this block should be accepted by node0 since it has more work.\n         try:\n             self.nodes[0].getblock(blocks_h3[0].hash)\n-            print \"Unrequested more-work block accepted from non-whitelisted peer\"\n+            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested more work block was not processed\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from whitelisted peer\"\n+        print(\"Successfully reorged to length 3 chain from whitelisted peer\")\n \n         # 4b. Now mine 288 more blocks and deliver; all should be processed but\n         # the last (height-too-high) on node0.  Node1 should process the tip if\n         # we give it the headers chain leading to the tip.\n         tips = blocks_h3\n         headers_message = msg_headers()\n         all_blocks = []   # node0's blocks\n-        for j in xrange(2):\n-            for i in xrange(288):\n+        for j in range(2):\n+            for i in range(288):\n                 next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n                 next_block.solve()\n                 if j==0:\n@@ -233,7 +234,7 @@ def run_test(self):\n                     raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n             except:\n                 if x == all_blocks[287]:\n-                    print \"Unrequested block too far-ahead not processed\"\n+                    print(\"Unrequested block too far-ahead not processed\")\n                 else:\n                     raise AssertionError(\"Unrequested block with more work should have been accepted\")\n \n@@ -243,7 +244,7 @@ def run_test(self):\n         try:\n             white_node.sync_with_ping()\n             self.nodes[1].getblock(tips[1].hash)\n-            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n \n@@ -259,7 +260,7 @@ def run_test(self):\n         # a getdata request for this block.\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        print \"Unrequested block that would complete more-work chain was ignored\"\n+        print(\"Unrequested block that would complete more-work chain was ignored\")\n \n         # 6. Try to get node to request the missing block.\n         # Poke the node with an inv for block at height 3 and see if that\n@@ -275,14 +276,14 @@ def run_test(self):\n \n         # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n-        print \"Inv at tip triggered getdata for unprocessed block\"\n+        print(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n-        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n+        print(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "cd0501a3140c33a9932f9d3c14b3c7c4ac5750dd",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,6 +1,6 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n@@ -18,7 +18,7 @@ def hashToHex(hash):\n \n # Wait up to 60 secs to see if the testnode has received all the expected invs\n def allInvsMatch(invsExpected, testnode):\n-    for x in xrange(60):\n+    for x in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n                 return True;\n@@ -46,6 +46,12 @@ def send_filter(self, feerate):\n         self.sync_with_ping()\n \n class FeeFilterTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n     def setup_network(self):\n         # Node1 will be used to generate txs which should be relayed from Node0\n         # to our test node\n@@ -69,29 +75,29 @@ def run_test(self):\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Set a filter of 15 sat/byte\n         test_node.send_filter(15000)\n \n         # Test that txs are still being received (paying 20 sat/byte)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Change tx fee rate to 10 sat/byte and test they are no longer received\n         node1.settxfee(Decimal(\"0.00010000\"))\n-        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         sync_mempools(self.nodes) # must be sure node 0 has received all txs \n         time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n         assert(allInvsMatch([], test_node))\n         test_node.clear_invs()\n \n         # Remove fee filter and check that txs are received again\n         test_node.send_filter(0)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n "
      },
      {
        "sha": "17fd40ef1dffd824ba5581bb60126c6d1504a5e1",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1003,
        "deletions": 110,
        "changes": 1113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,16 +1,16 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n import time\n from test_framework.key import CECKey\n-from test_framework.script import CScript, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_FALSE\n+from test_framework.script import *\n+import struct\n \n class PreviousSpendableOutput(object):\n     def __init__(self, tx = CTransaction(), n = -1):\n@@ -25,76 +25,107 @@ def __init__(self, tx = CTransaction(), n = -1):\n each test.\n '''\n \n+def hash160(s):\n+    return hashlib.new('ripemd160', sha256(s)).digest()\n+\n+#  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n+#  For now, it is used to serialize a bloated varint (b64).\n+class CBrokenBlock(CBlock):\n+    def __init__(self, header=None):\n+        super(CBrokenBlock, self).__init__(header)\n+\n+    def initialize(self, base_block):\n+        self.vtx = copy.deepcopy(base_block.vtx)\n+        self.hashMerkleRoot = self.calc_merkle_root()\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += super(CBlock, self).serialize()\n+        r += struct.pack(\"<BQ\", 255, len(self.vtx))\n+        for tx in self.vtx:\n+            r += tx.serialize()\n+        return r\n+\n+    def normal_serialize(self):\n+        r = b\"\"\n+        r += super(CBrokenBlock, self).serialize()\n+        return r\n+\n class FullBlockTest(ComparisonTestFramework):\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    # Can either run this test as 1 node with expected answers, or two and compare them.\n+    # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n         self.coinbase_key.set_secretbytes(b\"horsebattery\")\n         self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n-        self.block_time = int(time.time())+1\n         self.tip = None\n         self.blocks = {}\n \n+    def add_options(self, parser):\n+        super().add_options(parser)\n+        parser.add_option(\"--runbarelyexpensive\", dest=\"runbarelyexpensive\", default=True)\n+\n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n+        self.test = TestManager(self, self.options.tmpdir)\n+        self.test.add_all_connections(self.nodes)\n         NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n+        self.test.run()\n \n     def add_transactions_to_block(self, block, tx_list):\n         [ tx.rehash() for tx in tx_list ]\n         block.vtx.extend(tx_list)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        return block\n-    \n-    # Create a block on top of self.tip, and advance self.tip to point to the new block\n-    # if spend is specified, then 1 satoshi will be spent from that to an anyone-can-spend output,\n-    # and rest will go to fees.\n-    def next_block(self, number, spend=None, additional_coinbase_value=0, script=None):\n+\n+    # this is a little handier to use than the version in blocktools.py\n+    def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE])):\n+        tx = create_transaction(spend_tx, n, b\"\", value, script)\n+        return tx\n+\n+    # sign a transaction, using the key we know about\n+    # this signs input 0 in tx, which is assumed to be spending output n in spend_tx\n+    def sign_tx(self, tx, spend_tx, n):\n+        scriptPubKey = bytearray(spend_tx.vout[n].scriptPubKey)\n+        if (scriptPubKey[0] == OP_TRUE):  # an anyone-can-spend\n+            tx.vin[0].scriptSig = CScript()\n+            return\n+        (sighash, err) = SignatureHash(spend_tx.vout[n].scriptPubKey, tx, 0, SIGHASH_ALL)\n+        tx.vin[0].scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+\n+    def create_and_sign_transaction(self, spend_tx, n, value, script=CScript([OP_TRUE])):\n+        tx = self.create_tx(spend_tx, n, value, script)\n+        self.sign_tx(tx, spend_tx, n)\n+        tx.rehash()\n+        return tx\n+\n+    def next_block(self, number, spend=None, additional_coinbase_value=0, script=CScript([OP_TRUE]), solve=True):\n         if self.tip == None:\n             base_block_hash = self.genesis_hash\n+            block_time = int(time.time())+1\n         else:\n             base_block_hash = self.tip.sha256\n+            block_time = self.tip.nTime + 1\n         # First create the coinbase\n         height = self.block_heights[base_block_hash] + 1\n         coinbase = create_coinbase(height, self.coinbase_pubkey)\n         coinbase.vout[0].nValue += additional_coinbase_value\n-        if (spend != None):\n-            coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1 # all but one satoshi to fees\n         coinbase.rehash()\n-        block = create_block(base_block_hash, coinbase, self.block_time)\n-        if (spend != None):\n-            tx = CTransaction()\n-            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), b\"\", 0xffffffff))  # no signature yet\n-            # This copies the java comparison tool testing behavior: the first\n-            # txout has a garbage scriptPubKey, \"to make sure we're not\n-            # pre-verifying too much\" (?)\n-            tx.vout.append(CTxOut(0, CScript([random.randint(0,255), height & 255])))\n-            if script == None:\n-                tx.vout.append(CTxOut(1, CScript([OP_TRUE])))\n-            else:\n-                tx.vout.append(CTxOut(1, script))\n-            # Now sign it if necessary\n-            scriptSig = b\"\"\n-            scriptPubKey = bytearray(spend.tx.vout[spend.n].scriptPubKey)\n-            if (scriptPubKey[0] == OP_TRUE):  # looks like an anyone-can-spend\n-                scriptSig = CScript([OP_TRUE])\n-            else:\n-                # We have to actually sign it\n-                (sighash, err) = SignatureHash(spend.tx.vout[spend.n].scriptPubKey, tx, 0, SIGHASH_ALL)\n-                scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n-            tx.vin[0].scriptSig = scriptSig\n-            # Now add the transaction to the block\n-            block = self.add_transactions_to_block(block, [tx])\n-        block.solve()\n+        if spend == None:\n+            block = create_block(base_block_hash, coinbase, block_time)\n+        else:\n+            coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1 # all but one satoshi to fees\n+            coinbase.rehash()\n+            block = create_block(base_block_hash, coinbase, block_time)\n+            tx = create_transaction(spend.tx, spend.n, b\"\", 1, script)  # spend 1 satoshi\n+            self.sign_tx(tx, spend.tx, spend.n)\n+            self.add_transactions_to_block(block, [tx])\n+            block.hashMerkleRoot = block.calc_merkle_root()\n+        if solve:\n+            block.solve()\n         self.tip = block\n         self.block_heights[block.sha256] = height\n-        self.block_time += 1\n         assert number not in self.blocks\n         self.blocks[number] = block\n         return block\n@@ -108,7 +139,7 @@ def get_tests(self):\n         def save_spendable_output():\n             spendable_outputs.append(self.tip)\n \n-        # get an output that we previous marked as spendable\n+        # get an output that we previously marked as spendable\n         def get_spendable_output():\n             return PreviousSpendableOutput(spendable_outputs.pop(0).vtx[0], 0)\n \n@@ -122,26 +153,33 @@ def rejected(reject = None):\n                 return TestInstance([[self.tip, False]])\n             else:\n                 return TestInstance([[self.tip, reject]])\n-       \n+\n         # move the tip back to a previous block\n         def tip(number):\n             self.tip = self.blocks[number]\n \n-        # add transactions to a block produced by next_block\n+        # adds transactions to the block and updates state\n         def update_block(block_number, new_transactions):\n             block = self.blocks[block_number]\n-            old_hash = block.sha256\n             self.add_transactions_to_block(block, new_transactions)\n+            old_sha256 = block.sha256\n+            block.hashMerkleRoot = block.calc_merkle_root()\n             block.solve()\n             # Update the internal state just like in next_block\n             self.tip = block\n-            self.block_heights[block.sha256] = self.block_heights[old_hash]\n-            del self.block_heights[old_hash]\n+            if block.sha256 != old_sha256:\n+                self.block_heights[block.sha256] = self.block_heights[old_sha256]\n+                del self.block_heights[old_sha256]\n             self.blocks[block_number] = block\n             return block\n \n-        # creates a new block and advances the tip to that block\n+        # shorthand for functions\n         block = self.next_block\n+        create_tx = self.create_tx\n+        create_and_sign_tx = self.create_and_sign_transaction\n+\n+        # these must be updated if consensus changes\n+        MAX_BLOCK_SIGOPS = 20000\n \n \n         # Create a new block\n@@ -153,90 +191,86 @@ def update_block(block_number, new_transactions):\n         # Now we need that block to mature so we can spend the coinbase.\n         test = TestInstance(sync_every_block=False)\n         for i in range(99):\n-            block(1000 + i)\n+            block(5000 + i)\n             test.blocks_and_transactions.append([self.tip, True])\n             save_spendable_output()\n         yield test\n \n+        # collect spendable outputs now to avoid cluttering the code later on\n+        out = []\n+        for i in range(33):\n+            out.append(get_spendable_output())\n \n         # Start by building a couple of blocks on top (which output is spent is\n         # in parentheses):\n         #     genesis -> b1 (0) -> b2 (1)\n-        out0 = get_spendable_output()\n-        block(1, spend=out0)\n+        block(1, spend=out[0])\n         save_spendable_output()\n         yield accepted()\n \n-        out1 = get_spendable_output()\n-        b2 = block(2, spend=out1)\n+        block(2, spend=out[1])\n         yield accepted()\n-\n+        save_spendable_output()\n \n         # so fork like this:\n-        # \n+        #\n         #     genesis -> b1 (0) -> b2 (1)\n         #                      \\-> b3 (1)\n-        # \n+        #\n         # Nothing should happen at this point. We saw b2 first so it takes priority.\n         tip(1)\n-        b3 = block(3, spend=out1)\n-        txout_b3 = PreviousSpendableOutput(b3.vtx[1], 1)\n+        b3 = block(3, spend=out[1])\n+        txout_b3 = PreviousSpendableOutput(b3.vtx[1], 0)\n         yield rejected()\n \n \n         # Now we add another block to make the alternative chain longer.\n-        # \n+        #\n         #     genesis -> b1 (0) -> b2 (1)\n         #                      \\-> b3 (1) -> b4 (2)\n-        out2 = get_spendable_output()\n-        block(4, spend=out2)\n+        block(4, spend=out[2])\n         yield accepted()\n \n \n         # ... and back to the first chain.\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(2)\n-        block(5, spend=out2)\n+        block(5, spend=out[2])\n         save_spendable_output()\n         yield rejected()\n \n-        out3 = get_spendable_output()\n-        block(6, spend=out3)\n+        block(6, spend=out[3])\n         yield accepted()\n \n-\n         # Try to create a fork that double-spends\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n         #                                          \\-> b7 (2) -> b8 (4)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(5)\n-        block(7, spend=out2)\n+        block(7, spend=out[2])\n         yield rejected()\n \n-        out4 = get_spendable_output()\n-        block(8, spend=out4)\n+        block(8, spend=out[4])\n         yield rejected()\n \n-\n         # Try to create a block that has too much fee\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n         #                                                    \\-> b9 (4)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(6)\n-        block(9, spend=out4, additional_coinbase_value=1)\n+        block(9, spend=out[4], additional_coinbase_value=1)\n         yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n-        \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n         #                                          \\-> b10 (3) -> b11 (4)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(5)\n-        block(10, spend=out3)\n+        block(10, spend=out[3])\n         yield rejected()\n \n-        block(11, spend=out4, additional_coinbase_value=1)\n+        block(11, spend=out[4], additional_coinbase_value=1)\n         yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n \n@@ -246,19 +280,17 @@ def update_block(block_number, new_transactions):\n         #                                              (b12 added last)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(5)\n-        b12 = block(12, spend=out3)\n+        b12 = block(12, spend=out[3])\n         save_spendable_output()\n-        #yield TestInstance([[b12, False]])\n-        b13 = block(13, spend=out4)\n+        b13 = block(13, spend=out[4])\n         # Deliver the block header for b12, and the block b13.\n         # b13 should be accepted but the tip won't advance until b12 is delivered.\n         yield TestInstance([[CBlockHeader(b12), None], [b13, False]])\n \n         save_spendable_output()\n-        out5 = get_spendable_output()\n         # b14 is invalid, but the node won't know that until it tries to connect\n         # Tip still can't advance because b12 is missing\n-        block(14, spend=out5, additional_coinbase_value=1)\n+        block(14, spend=out[5], additional_coinbase_value=1)\n         yield rejected()\n \n         yield TestInstance([[b12, True, b13.sha256]]) # New tip should be b13.\n@@ -267,18 +299,18 @@ def update_block(block_number, new_transactions):\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n         #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b16 (6)\n         #                      \\-> b3 (1) -> b4 (2)\n-        \n+\n         # Test that a block with a lot of checksigs is okay\n-        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50 - 1))\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS - 1))\n         tip(13)\n-        block(15, spend=out5, script=lots_of_checksigs)\n+        block(15, spend=out[5], script=lots_of_checksigs)\n         yield accepted()\n+        save_spendable_output()\n \n \n         # Test that a block with too many checksigs is rejected\n-        out6 = get_spendable_output()\n-        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n-        block(16, spend=out6, script=too_many_checksigs)\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n+        block(16, spend=out[6], script=too_many_checksigs)\n         yield rejected(RejectResult(16, b'bad-blk-sigops'))\n \n \n@@ -299,16 +331,15 @@ def update_block(block_number, new_transactions):\n         block(18, spend=txout_b3)\n         yield rejected()\n \n-        block(19, spend=out6)\n+        block(19, spend=out[6])\n         yield rejected()\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n         #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b20 (7)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n-        out7 = get_spendable_output()\n-        block(20, spend=out7)\n+        block(20, spend=out[7])\n         yield rejected(RejectResult(16, b'bad-txns-premature-spend-of-coinbase'))\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n@@ -317,10 +348,10 @@ def update_block(block_number, new_transactions):\n         #                                                                \\-> b21 (6) -> b22 (5)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(13)\n-        block(21, spend=out6)\n+        block(21, spend=out[6])\n         yield rejected()\n \n-        block(22, spend=out5)\n+        block(22, spend=out[5])\n         yield rejected()\n \n         # Create a block on either side of MAX_BLOCK_SIZE and make sure its accepted/rejected\n@@ -329,29 +360,29 @@ def update_block(block_number, new_transactions):\n         #                                                                           \\-> b24 (6) -> b25 (7)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n-        b23 = block(23, spend=out6)\n-        old_hash = b23.sha256\n+        b23 = block(23, spend=out[6])\n         tx = CTransaction()\n         script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n         script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n-        tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 1)))\n+        tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 0)))\n         b23 = update_block(23, [tx])\n         # Make sure the math above worked out to produce a max-sized block\n         assert_equal(len(b23.serialize()), MAX_BLOCK_SIZE)\n         yield accepted()\n+        save_spendable_output()\n \n         # Make the next block one byte bigger and check that it fails\n         tip(15)\n-        b24 = block(24, spend=out6)\n+        b24 = block(24, spend=out[6])\n         script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n         script_output = CScript([b'\\x00' * (script_length+1)])\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n         yield rejected(RejectResult(16, b'bad-blk-length'))\n \n-        b25 = block(25, spend=out7)\n+        block(25, spend=out[7])\n         yield rejected()\n \n         # Create blocks with a coinbase input script size out of range\n@@ -360,7 +391,7 @@ def update_block(block_number, new_transactions):\n         #                                                                           \\-> ... (6) -> ... (7)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n-        b26 = block(26, spend=out6)\n+        b26 = block(26, spend=out[6])\n         b26.vtx[0].vin[0].scriptSig = b'\\x00'\n         b26.vtx[0].rehash()\n         # update_block causes the merkle root to get updated, even with no new\n@@ -369,23 +400,20 @@ def update_block(block_number, new_transactions):\n         yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n-        b27 = block(27, spend=out7)\n-        yield rejected()\n+        b27 = block(27, spend=out[7])\n+        yield rejected(RejectResult(16, b'bad-prevblk'))\n \n         # Now try a too-large-coinbase script\n         tip(15)\n-        b28 = block(28, spend=out6)\n+        b28 = block(28, spend=out[6])\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = update_block(28, [])\n         yield rejected(RejectResult(16, b'bad-cb-length'))\n \n-        # Extend the b28 chain to make sure bitcoind isn't accepted b28\n-        b29 = block(29, spend=out7)\n-        # TODO: Should get a reject message back with \"bad-prevblk\", except\n-        # there's a bug that prevents this from being detected.  Just note\n-        # failure for now, and add the reject result later.\n-        yield rejected()\n+        # Extend the b28 chain to make sure bitcoind isn't accepting b28\n+        b29 = block(29, spend=out[7])\n+        yield rejected(RejectResult(16, b'bad-prevblk'))\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)\n@@ -394,6 +422,871 @@ def update_block(block_number, new_transactions):\n         b30.vtx[0].rehash()\n         b30 = update_block(30, [])\n         yield accepted()\n+        save_spendable_output()\n+\n+        # b31 - b35 - check sigops of OP_CHECKMULTISIG / OP_CHECKMULTISIGVERIFY / OP_CHECKSIGVERIFY\n+        #\n+        #     genesis -> ... -> b30 (7) -> b31 (8) -> b33 (9) -> b35 (10)\n+        #                                                                \\-> b36 (11)\n+        #                                                    \\-> b34 (10)\n+        #                                         \\-> b32 (9)\n+        #\n+\n+        # MULTISIG: each op code counts as 20 sigops.  To create the edge case, pack another 19 sigops at the end.\n+        lots_of_multisigs = CScript([OP_CHECKMULTISIG] * ((MAX_BLOCK_SIGOPS-1) // 20) + [OP_CHECKSIG] * 19)\n+        b31 = block(31, spend=out[8], script=lots_of_multisigs)\n+        assert_equal(get_legacy_sigopcount_block(b31), MAX_BLOCK_SIGOPS)\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # this goes over the limit because the coinbase has one sigop\n+        too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n+        b32 = block(32, spend=out[9], script=too_many_multisigs)\n+        assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+\n+        # CHECKMULTISIGVERIFY\n+        tip(31)\n+        lots_of_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * ((MAX_BLOCK_SIGOPS-1) // 20) + [OP_CHECKSIG] * 19)\n+        block(33, spend=out[9], script=lots_of_multisigs)\n+        yield accepted()\n+        save_spendable_output()\n+\n+        too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n+        block(34, spend=out[10], script=too_many_multisigs)\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+\n+        # CHECKSIGVERIFY\n+        tip(33)\n+        lots_of_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS - 1))\n+        b35 = block(35, spend=out[10], script=lots_of_checksigs)\n+        yield accepted()\n+        save_spendable_output()\n+\n+        too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n+        block(36, spend=out[11], script=too_many_checksigs)\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+\n+        # Check spending of a transaction in a block which failed to connect\n+        #\n+        # b6  (3)\n+        # b12 (3) -> b13 (4) -> b15 (5) -> b23 (6) -> b30 (7) -> b31 (8) -> b33 (9) -> b35 (10)\n+        #                                                                                     \\-> b37 (11)\n+        #                                                                                     \\-> b38 (11/37)\n+        #\n+\n+        # save 37's spendable output, but then double-spend out11 to invalidate the block\n+        tip(35)\n+        b37 = block(37, spend=out[11])\n+        txout_b37 = PreviousSpendableOutput(b37.vtx[1], 0)\n+        tx = create_and_sign_tx(out[11].tx, out[11].n, 0)\n+        b37 = update_block(37, [tx])\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+        # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n+        tip(35)\n+        block(38, spend=txout_b37)\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+        # Check P2SH SigOp counting\n+        #\n+        #\n+        #   13 (4) -> b15 (5) -> b23 (6) -> b30 (7) -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b41 (12)\n+        #                                                                                        \\-> b40 (12)\n+        #\n+        # b39 - create some P2SH outputs that will require 6 sigops to spend:\n+        #\n+        #           redeem_script = COINBASE_PUBKEY, (OP_2DUP+OP_CHECKSIGVERIFY) * 5, OP_CHECKSIG\n+        #           p2sh_script = OP_HASH160, ripemd160(sha256(script)), OP_EQUAL\n+        #\n+        tip(35)\n+        b39 = block(39)\n+        b39_outputs = 0\n+        b39_sigops_per_output = 6\n+\n+        # Build the redeem script, hash it, use hash to create the p2sh script\n+        redeem_script = CScript([self.coinbase_pubkey] + [OP_2DUP, OP_CHECKSIGVERIFY]*5 + [OP_CHECKSIG])\n+        redeem_script_hash = hash160(redeem_script)\n+        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n+\n+        # Create a transaction that spends one satoshi to the p2sh_script, the rest to OP_TRUE\n+        # This must be signed because it is spending a coinbase\n+        spend = out[11]\n+        tx = create_tx(spend.tx, spend.n, 1, p2sh_script)\n+        tx.vout.append(CTxOut(spend.tx.vout[spend.n].nValue - 1, CScript([OP_TRUE])))\n+        self.sign_tx(tx, spend.tx, spend.n)\n+        tx.rehash()\n+        b39 = update_block(39, [tx])\n+        b39_outputs += 1\n+\n+        # Until block is full, add tx's with 1 satoshi to p2sh_script, the rest to OP_TRUE\n+        tx_new = None\n+        tx_last = tx\n+        total_size=len(b39.serialize())\n+        while(total_size < MAX_BLOCK_SIZE):\n+            tx_new = create_tx(tx_last, 1, 1, p2sh_script)\n+            tx_new.vout.append(CTxOut(tx_last.vout[1].nValue - 1, CScript([OP_TRUE])))\n+            tx_new.rehash()\n+            total_size += len(tx_new.serialize())\n+            if total_size >= MAX_BLOCK_SIZE:\n+                break\n+            b39.vtx.append(tx_new) # add tx to block\n+            tx_last = tx_new\n+            b39_outputs += 1\n+\n+        b39 = update_block(39, [])\n+        yield accepted()\n+        save_spendable_output()\n+\n+\n+        # Test sigops in P2SH redeem scripts\n+        #\n+        # b40 creates 3333 tx's spending the 6-sigop P2SH outputs from b39 for a total of 19998 sigops.\n+        # The first tx has one sigop and then at the end we add 2 more to put us just over the max.\n+        #\n+        # b41 does the same, less one, so it has the maximum sigops permitted.\n+        #\n+        tip(39)\n+        b40 = block(40, spend=out[12])\n+        sigops = get_legacy_sigopcount_block(b40)\n+        numTxes = (MAX_BLOCK_SIGOPS - sigops) // b39_sigops_per_output\n+        assert_equal(numTxes <= b39_outputs, True)\n+\n+        lastOutpoint = COutPoint(b40.vtx[1].sha256, 0)\n+        new_txs = []\n+        for i in range(1, numTxes+1):\n+            tx = CTransaction()\n+            tx.vout.append(CTxOut(1, CScript([OP_TRUE])))\n+            tx.vin.append(CTxIn(lastOutpoint, b''))\n+            # second input is corresponding P2SH output from b39\n+            tx.vin.append(CTxIn(COutPoint(b39.vtx[i].sha256, 0), b''))\n+            # Note: must pass the redeem_script (not p2sh_script) to the signature hash function\n+            (sighash, err) = SignatureHash(redeem_script, tx, 1, SIGHASH_ALL)\n+            sig = self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))\n+            scriptSig = CScript([sig, redeem_script])\n+\n+            tx.vin[1].scriptSig = scriptSig\n+            tx.rehash()\n+            new_txs.append(tx)\n+            lastOutpoint = COutPoint(tx.sha256, 0)\n+\n+        b40_sigops_to_fill = MAX_BLOCK_SIGOPS - (numTxes * b39_sigops_per_output + sigops) + 1\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(lastOutpoint, b''))\n+        tx.vout.append(CTxOut(1, CScript([OP_CHECKSIG] * b40_sigops_to_fill)))\n+        tx.rehash()\n+        new_txs.append(tx)\n+        update_block(40, new_txs)\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+        # same as b40, but one less sigop\n+        tip(39)\n+        b41 = block(41, spend=None)\n+        update_block(41, b40.vtx[1:-1])\n+        b41_sigops_to_fill = b40_sigops_to_fill - 1\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(lastOutpoint, b''))\n+        tx.vout.append(CTxOut(1, CScript([OP_CHECKSIG] * b41_sigops_to_fill)))\n+        tx.rehash()\n+        update_block(41, [tx])\n+        yield accepted()\n+\n+        # Fork off of b39 to create a constant base again\n+        #\n+        # b23 (6) -> b30 (7) -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13)\n+        #                                                                  \\-> b41 (12)\n+        #\n+        tip(39)\n+        block(42, spend=out[12])\n+        yield rejected()\n+        save_spendable_output()\n+\n+        block(43, spend=out[13])\n+        yield accepted()\n+        save_spendable_output()\n+\n+\n+        # Test a number of really invalid scenarios\n+        #\n+        #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b44 (14)\n+        #                                                                                   \\-> ??? (15)\n+\n+        # The next few blocks are going to be created \"by hand\" since they'll do funky things, such as having\n+        # the first transaction be non-coinbase, etc.  The purpose of b44 is to make sure this works.\n+        height = self.block_heights[self.tip.sha256] + 1\n+        coinbase = create_coinbase(height, self.coinbase_pubkey)\n+        b44 = CBlock()\n+        b44.nTime = self.tip.nTime + 1\n+        b44.hashPrevBlock = self.tip.sha256\n+        b44.nBits = 0x207fffff\n+        b44.vtx.append(coinbase)\n+        b44.hashMerkleRoot = b44.calc_merkle_root()\n+        b44.solve()\n+        self.tip = b44\n+        self.block_heights[b44.sha256] = height\n+        self.blocks[44] = b44\n+        yield accepted()\n+\n+        # A block with a non-coinbase as the first tx\n+        non_coinbase = create_tx(out[15].tx, out[15].n, 1)\n+        b45 = CBlock()\n+        b45.nTime = self.tip.nTime + 1\n+        b45.hashPrevBlock = self.tip.sha256\n+        b45.nBits = 0x207fffff\n+        b45.vtx.append(non_coinbase)\n+        b45.hashMerkleRoot = b45.calc_merkle_root()\n+        b45.calc_sha256()\n+        b45.solve()\n+        self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256]+1\n+        self.tip = b45\n+        self.blocks[45] = b45\n+        yield rejected(RejectResult(16, b'bad-cb-missing'))\n+\n+        # A block with no txns\n+        tip(44)\n+        b46 = CBlock()\n+        b46.nTime = b44.nTime+1\n+        b46.hashPrevBlock = b44.sha256\n+        b46.nBits = 0x207fffff\n+        b46.vtx = []\n+        b46.hashMerkleRoot = 0\n+        b46.solve()\n+        self.block_heights[b46.sha256] = self.block_heights[b44.sha256]+1\n+        self.tip = b46\n+        assert 46 not in self.blocks\n+        self.blocks[46] = b46\n+        s = ser_uint256(b46.hashMerkleRoot)\n+        yield rejected(RejectResult(16, b'bad-blk-length'))\n+\n+        # A block with invalid work\n+        tip(44)\n+        b47 = block(47, solve=False)\n+        target = uint256_from_compact(b47.nBits)\n+        while b47.sha256 < target: #changed > to <\n+            b47.nNonce += 1\n+            b47.rehash()\n+        yield rejected(RejectResult(16, b'high-hash'))\n+\n+        # A block with timestamp > 2 hrs in the future\n+        tip(44)\n+        b48 = block(48, solve=False)\n+        b48.nTime = int(time.time()) + 60 * 60 * 3\n+        b48.solve()\n+        yield rejected(RejectResult(16, b'time-too-new'))\n+\n+        # A block with an invalid merkle hash\n+        tip(44)\n+        b49 = block(49)\n+        b49.hashMerkleRoot += 1\n+        b49.solve()\n+        yield rejected(RejectResult(16, b'bad-txnmrklroot'))\n+\n+        # A block with an incorrect POW limit\n+        tip(44)\n+        b50 = block(50)\n+        b50.nBits = b50.nBits - 1\n+        b50.solve()\n+        yield rejected(RejectResult(16, b'bad-diffbits'))\n+\n+        # A block with two coinbase txns\n+        tip(44)\n+        b51 = block(51)\n+        cb2 = create_coinbase(51, self.coinbase_pubkey)\n+        b51 = update_block(51, [cb2])\n+        yield rejected(RejectResult(16, b'bad-cb-multiple'))\n+\n+        # A block w/ duplicate txns\n+        # Note: txns have to be in the right position in the merkle tree to trigger this error\n+        tip(44)\n+        b52 = block(52, spend=out[15])\n+        tx = create_tx(b52.vtx[1], 0, 1)\n+        b52 = update_block(52, [tx, tx])\n+        yield rejected(RejectResult(16, b'bad-txns-duplicate'))\n+\n+        # Test block timestamps\n+        #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n+        #                                                                                   \\-> b54 (15)\n+        #\n+        tip(43)\n+        block(53, spend=out[14])\n+        yield rejected() # rejected since b44 is at same height\n+        save_spendable_output()\n+\n+        # invalid timestamp (b35 is 5 blocks back, so its time is MedianTimePast)\n+        b54 = block(54, spend=out[15])\n+        b54.nTime = b35.nTime - 1\n+        b54.solve()\n+        yield rejected(RejectResult(16, b'time-too-old'))\n+\n+        # valid timestamp\n+        tip(53)\n+        b55 = block(55, spend=out[15])\n+        b55.nTime = b35.nTime\n+        update_block(55, [])\n+        yield accepted()\n+        save_spendable_output()\n+\n+\n+        # Test CVE-2012-2459\n+        #\n+        # -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57p2 (16)\n+        #                                                \\-> b57   (16)\n+        #                                                \\-> b56p2 (16)\n+        #                                                \\-> b56   (16)\n+        #\n+        # Merkle tree malleability (CVE-2012-2459): repeating sequences of transactions in a block without \n+        #                           affecting the merkle root of a block, while still invalidating it.\n+        #                           See:  src/consensus/merkle.h\n+        #\n+        #  b57 has three txns:  coinbase, tx, tx1.  The merkle root computation will duplicate tx.\n+        #  Result:  OK\n+        #\n+        #  b56 copies b57 but duplicates tx1 and does not recalculate the block hash.  So it has a valid merkle\n+        #  root but duplicate transactions.\n+        #  Result:  Fails\n+        #\n+        #  b57p2 has six transactions in its merkle tree:\n+        #       - coinbase, tx, tx1, tx2, tx3, tx4\n+        #  Merkle root calculation will duplicate as necessary.\n+        #  Result:  OK.\n+        #\n+        #  b56p2 copies b57p2 but adds both tx3 and tx4.  The purpose of the test is to make sure the code catches\n+        #  duplicate txns that are not next to one another with the \"bad-txns-duplicate\" error (which indicates\n+        #  that the error was caught early, avoiding a DOS vulnerability.)\n+\n+        # b57 - a good block with 2 txs, don't submit until end\n+        tip(55)\n+        b57 = block(57)\n+        tx = create_and_sign_tx(out[16].tx, out[16].n, 1)\n+        tx1 = create_tx(tx, 0, 1)\n+        b57 = update_block(57, [tx, tx1])\n+\n+        # b56 - copy b57, add a duplicate tx\n+        tip(55)\n+        b56 = copy.deepcopy(b57)\n+        self.blocks[56] = b56\n+        assert_equal(len(b56.vtx),3)\n+        b56 = update_block(56, [tx1])\n+        assert_equal(b56.hash, b57.hash)\n+        yield rejected(RejectResult(16, b'bad-txns-duplicate'))\n+\n+        # b57p2 - a good block with 6 tx'es, don't submit until end\n+        tip(55)\n+        b57p2 = block(\"57p2\")\n+        tx = create_and_sign_tx(out[16].tx, out[16].n, 1)\n+        tx1 = create_tx(tx, 0, 1)\n+        tx2 = create_tx(tx1, 0, 1)\n+        tx3 = create_tx(tx2, 0, 1)\n+        tx4 = create_tx(tx3, 0, 1)\n+        b57p2 = update_block(\"57p2\", [tx, tx1, tx2, tx3, tx4])\n+\n+        # b56p2 - copy b57p2, duplicate two non-consecutive tx's\n+        tip(55)\n+        b56p2 = copy.deepcopy(b57p2)\n+        self.blocks[\"b56p2\"] = b56p2\n+        assert_equal(b56p2.hash, b57p2.hash)\n+        assert_equal(len(b56p2.vtx),6)\n+        b56p2 = update_block(\"b56p2\", [tx3, tx4])\n+        yield rejected(RejectResult(16, b'bad-txns-duplicate'))\n+\n+        tip(\"57p2\")\n+        yield accepted()\n+\n+        tip(57)\n+        yield rejected()  #rejected because 57p2 seen first\n+        save_spendable_output()\n+\n+        # Test a few invalid tx types\n+        #\n+        # -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n+        #                                                                                    \\-> ??? (17)\n+        #\n+\n+        # tx with prevout.n out of range\n+        tip(57)\n+        b58 = block(58, spend=out[17])\n+        tx = CTransaction()\n+        assert(len(out[17].tx.vout) < 42)\n+        tx.vin.append(CTxIn(COutPoint(out[17].tx.sha256, 42), CScript([OP_TRUE]), 0xffffffff))\n+        tx.vout.append(CTxOut(0, b\"\"))\n+        tx.calc_sha256()\n+        b58 = update_block(58, [tx])\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+        # tx with output value > input value out of range\n+        tip(57)\n+        b59 = block(59)\n+        tx = create_and_sign_tx(out[17].tx, out[17].n, 51*COIN)\n+        b59 = update_block(59, [tx])\n+        yield rejected(RejectResult(16, b'bad-txns-in-belowout'))\n+\n+        # reset to good chain\n+        tip(57)\n+        b60 = block(60, spend=out[17])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Test BIP30\n+        #\n+        # -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n+        #                                                                                    \\-> b61 (18)\n+        #\n+        # Blocks are not allowed to contain a transaction whose id matches that of an earlier,\n+        # not-fully-spent transaction in the same chain. To test, make identical coinbases;\n+        # the second one should be rejected.\n+        #\n+        tip(60)\n+        b61 = block(61, spend=out[18])\n+        b61.vtx[0].vin[0].scriptSig = b60.vtx[0].vin[0].scriptSig  #equalize the coinbases\n+        b61.vtx[0].rehash()\n+        b61 = update_block(61, [])\n+        assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n+        yield rejected(RejectResult(16, b'bad-txns-BIP30'))\n+\n+\n+        # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n+        #\n+        #   -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n+        #                                                                                     \\-> b62 (18)\n+        #\n+        tip(60)\n+        b62 = block(62)\n+        tx = CTransaction()\n+        tx.nLockTime = 0xffffffff  #this locktime is non-final\n+        assert(out[18].n < len(out[18].tx.vout))\n+        tx.vin.append(CTxIn(COutPoint(out[18].tx.sha256, out[18].n))) # don't set nSequence\n+        tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        assert(tx.vin[0].nSequence < 0xffffffff)\n+        tx.calc_sha256()\n+        b62 = update_block(62, [tx])\n+        yield rejected(RejectResult(16, b'bad-txns-nonfinal'))\n+\n+\n+        # Test a non-final coinbase is also rejected\n+        #\n+        #   -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n+        #                                                                                     \\-> b63 (-)\n+        #\n+        tip(60)\n+        b63 = block(63)\n+        b63.vtx[0].nLockTime = 0xffffffff\n+        b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n+        b63.vtx[0].rehash()\n+        b63 = update_block(63, [])\n+        yield rejected(RejectResult(16, b'bad-txns-nonfinal'))\n+\n+\n+        #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n+        #  the block is > MAX_BLOCK_SIZE with the bloated varint, but <= MAX_BLOCK_SIZE without the bloated varint,\n+        #  does not cause a subsequent, identical block with canonical encoding to be rejected.  The test does not\n+        #  care whether the bloated block is accepted or rejected; it only cares that the second block is accepted.\n+        #\n+        #  What matters is that the receiving node should not reject the bloated block, and then reject the canonical\n+        #  block on the basis that it's the same as an already-rejected block (which would be a consensus failure.)\n+        #\n+        #  -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18)\n+        #                                                                                        \\\n+        #                                                                                         b64a (18)\n+        #  b64a is a bloated block (non-canonical varint)\n+        #  b64 is a good block (same as b64 but w/ canonical varint)\n+        #\n+        tip(60)\n+        regular_block = block(\"64a\", spend=out[18])\n+\n+        # make it a \"broken_block,\" with non-canonical serialization\n+        b64a = CBrokenBlock(regular_block)\n+        b64a.initialize(regular_block)\n+        self.blocks[\"64a\"] = b64a\n+        self.tip = b64a\n+        tx = CTransaction()\n+\n+        # use canonical serialization to calculate size\n+        script_length = MAX_BLOCK_SIZE - len(b64a.normal_serialize()) - 69\n+        script_output = CScript([b'\\x00' * script_length])\n+        tx.vout.append(CTxOut(0, script_output))\n+        tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n+        b64a = update_block(\"64a\", [tx])\n+        assert_equal(len(b64a.serialize()), MAX_BLOCK_SIZE + 8)\n+        yield TestInstance([[self.tip, None]])\n+\n+        # comptool workaround: to make sure b64 is delivered, manually erase b64a from blockstore\n+        self.test.block_store.erase(b64a.sha256)\n+\n+        tip(60)\n+        b64 = CBlock(b64a)\n+        b64.vtx = copy.deepcopy(b64a.vtx)\n+        assert_equal(b64.hash, b64a.hash)\n+        assert_equal(len(b64.serialize()), MAX_BLOCK_SIZE)\n+        self.blocks[64] = b64\n+        update_block(64, [])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Spend an output created in the block itself\n+        #\n+        # -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n+        #\n+        tip(64)\n+        b65 = block(65)\n+        tx1 = create_and_sign_tx(out[19].tx, out[19].n, out[19].tx.vout[0].nValue)\n+        tx2 = create_and_sign_tx(tx1, 0, 0)\n+        update_block(65, [tx1, tx2])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Attempt to spend an output created later in the same block\n+        #\n+        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n+        #                                                                                    \\-> b66 (20)\n+        tip(65)\n+        b66 = block(66)\n+        tx1 = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n+        tx2 = create_and_sign_tx(tx1, 0, 1)\n+        update_block(66, [tx2, tx1])\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+        # Attempt to double-spend a transaction created in a block\n+        #\n+        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n+        #                                                                                    \\-> b67 (20)\n+        #\n+        #\n+        tip(65)\n+        b67 = block(67)\n+        tx1 = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n+        tx2 = create_and_sign_tx(tx1, 0, 1)\n+        tx3 = create_and_sign_tx(tx1, 0, 2)\n+        update_block(67, [tx1, tx2, tx3])\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+        # More tests of block subsidy\n+        #\n+        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20)\n+        #                                                                                    \\-> b68 (20)\n+        #\n+        # b68 - coinbase with an extra 10 satoshis,\n+        #       creates a tx that has 9 satoshis from out[20] go to fees\n+        #       this fails because the coinbase is trying to claim 1 satoshi too much in fees\n+        #\n+        # b69 - coinbase with extra 10 satoshis, and a tx that gives a 10 satoshi fee\n+        #       this succeeds\n+        #\n+        tip(65)\n+        b68 = block(68, additional_coinbase_value=10)\n+        tx = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue-9)\n+        update_block(68, [tx])\n+        yield rejected(RejectResult(16, b'bad-cb-amount'))\n+\n+        tip(65)\n+        b69 = block(69, additional_coinbase_value=10)\n+        tx = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue-10)\n+        update_block(69, [tx])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Test spending the outpoint of a non-existent transaction\n+        #\n+        # -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20)\n+        #                                                                                    \\-> b70 (21)\n+        #\n+        tip(69)\n+        block(70, spend=out[21])\n+        bogus_tx = CTransaction()\n+        bogus_tx.sha256 = uint256_from_str(b\"23c70ed7c0506e9178fc1a987f40a33946d4ad4c962b5ae3a52546da53af0c5c\")\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n+        tx.vout.append(CTxOut(1, b\"\"))\n+        update_block(70, [tx])\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n+\n+\n+        # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n+        #\n+        #  -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20) -> b72 (21)\n+        #                                                                                      \\-> b71 (21)\n+        #\n+        # b72 is a good block.\n+        # b71 is a copy of 72, but re-adds one of its transactions.  However, it has the same hash as b71.\n+        #\n+        tip(69)\n+        b72 = block(72)\n+        tx1 = create_and_sign_tx(out[21].tx, out[21].n, 2)\n+        tx2 = create_and_sign_tx(tx1, 0, 1)\n+        b72 = update_block(72, [tx1, tx2])  # now tip is 72\n+        b71 = copy.deepcopy(b72)\n+        b71.vtx.append(tx2)   # add duplicate tx2\n+        self.block_heights[b71.sha256] = self.block_heights[b69.sha256] + 1  # b71 builds off b69\n+        self.blocks[71] = b71\n+\n+        assert_equal(len(b71.vtx), 4)\n+        assert_equal(len(b72.vtx), 3)\n+        assert_equal(b72.sha256, b71.sha256)\n+\n+        tip(71)\n+        yield rejected(RejectResult(16, b'bad-txns-duplicate'))\n+        tip(72)\n+        yield accepted()\n+        save_spendable_output()\n+\n+\n+        # Test some invalid scripts and MAX_BLOCK_SIGOPS\n+        #\n+        # -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20) -> b72 (21)\n+        #                                                                                    \\-> b** (22)\n+        #\n+\n+        # b73 - tx with excessive sigops that are placed after an excessively large script element.\n+        #       The purpose of the test is to make sure those sigops are counted.\n+        #\n+        #       script is a bytearray of size 20,526\n+        #\n+        #       bytearray[0-19,998]     : OP_CHECKSIG\n+        #       bytearray[19,999]       : OP_PUSHDATA4\n+        #       bytearray[20,000-20,003]: 521  (max_script_element_size+1, in little-endian format)\n+        #       bytearray[20,004-20,525]: unread data (script_element)\n+        #       bytearray[20,526]       : OP_CHECKSIG (this puts us over the limit)\n+        #\n+        tip(72)\n+        b73 = block(73)\n+        size = MAX_BLOCK_SIGOPS - 1 + MAX_SCRIPT_ELEMENT_SIZE + 1 + 5 + 1\n+        a = bytearray([OP_CHECKSIG] * size)\n+        a[MAX_BLOCK_SIGOPS - 1] = int(\"4e\",16) # OP_PUSHDATA4\n+\n+        element_size = MAX_SCRIPT_ELEMENT_SIZE + 1\n+        a[MAX_BLOCK_SIGOPS] = element_size % 256\n+        a[MAX_BLOCK_SIGOPS+1] = element_size // 256\n+        a[MAX_BLOCK_SIGOPS+2] = 0\n+        a[MAX_BLOCK_SIGOPS+3] = 0\n+\n+        tx = create_and_sign_tx(out[22].tx, 0, 1, CScript(a))\n+        b73 = update_block(73, [tx])\n+        assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS+1)\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+        # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n+        #          but sigops after the element are not counted.\n+        #\n+        #       The invalid script element is that the push_data indicates that\n+        #       there will be a large amount of data (0xffffff bytes), but we only\n+        #       provide a much smaller number.  These bytes are CHECKSIGS so they would\n+        #       cause b75 to fail for excessive sigops, if those bytes were counted.\n+        #\n+        #       b74 fails because we put MAX_BLOCK_SIGOPS+1 before the element\n+        #       b75 succeeds because we put MAX_BLOCK_SIGOPS before the element\n+        #\n+        #\n+        tip(72)\n+        b74 = block(74)\n+        size = MAX_BLOCK_SIGOPS - 1 + MAX_SCRIPT_ELEMENT_SIZE + 42 # total = 20,561\n+        a = bytearray([OP_CHECKSIG] * size)\n+        a[MAX_BLOCK_SIGOPS] = 0x4e\n+        a[MAX_BLOCK_SIGOPS+1] = 0xfe\n+        a[MAX_BLOCK_SIGOPS+2] = 0xff\n+        a[MAX_BLOCK_SIGOPS+3] = 0xff\n+        a[MAX_BLOCK_SIGOPS+4] = 0xff\n+        tx = create_and_sign_tx(out[22].tx, 0, 1, CScript(a))\n+        b74 = update_block(74, [tx])\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n+\n+        tip(72)\n+        b75 = block(75)\n+        size = MAX_BLOCK_SIGOPS - 1 + MAX_SCRIPT_ELEMENT_SIZE + 42\n+        a = bytearray([OP_CHECKSIG] * size)\n+        a[MAX_BLOCK_SIGOPS-1] = 0x4e\n+        a[MAX_BLOCK_SIGOPS] = 0xff\n+        a[MAX_BLOCK_SIGOPS+1] = 0xff\n+        a[MAX_BLOCK_SIGOPS+2] = 0xff\n+        a[MAX_BLOCK_SIGOPS+3] = 0xff\n+        tx = create_and_sign_tx(out[22].tx, 0, 1, CScript(a))\n+        b75 = update_block(75, [tx])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Check that if we push an element filled with CHECKSIGs, they are not counted\n+        tip(75)\n+        b76 = block(76)\n+        size = MAX_BLOCK_SIGOPS - 1 + MAX_SCRIPT_ELEMENT_SIZE + 1 + 5\n+        a = bytearray([OP_CHECKSIG] * size)\n+        a[MAX_BLOCK_SIGOPS-1] = 0x4e # PUSHDATA4, but leave the following bytes as just checksigs\n+        tx = create_and_sign_tx(out[23].tx, 0, 1, CScript(a))\n+        b76 = update_block(76, [tx])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # Test transaction resurrection\n+        #\n+        # -> b77 (24) -> b78 (25) -> b79 (26)\n+        #            \\-> b80 (25) -> b81 (26) -> b82 (27)\n+        #\n+        #    b78 creates a tx, which is spent in b79. After b82, both should be in mempool\n+        #\n+        #    The tx'es must be unsigned and pass the node's mempool policy.  It is unsigned for the\n+        #    rather obscure reason that the Python signature code does not distinguish between\n+        #    Low-S and High-S values (whereas the bitcoin code has custom code which does so);\n+        #    as a result of which, the odds are 50% that the python code will use the right\n+        #    value and the transaction will be accepted into the mempool. Until we modify the\n+        #    test framework to support low-S signing, we are out of luck.\n+        #\n+        #    To get around this issue, we construct transactions which are not signed and which\n+        #    spend to OP_TRUE.  If the standard-ness rules change, this test would need to be\n+        #    updated.  (Perhaps to spend to a P2SH OP_TRUE script)\n+        #\n+        tip(76)\n+        block(77)\n+        tx77 = create_and_sign_tx(out[24].tx, out[24].n, 10*COIN)\n+        update_block(77, [tx77])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        block(78)\n+        tx78 = create_tx(tx77, 0, 9*COIN)\n+        update_block(78, [tx78])\n+        yield accepted()\n+\n+        block(79)\n+        tx79 = create_tx(tx78, 0, 8*COIN)\n+        update_block(79, [tx79])\n+        yield accepted()\n+\n+        # mempool should be empty\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        tip(77)\n+        block(80, spend=out[25])\n+        yield rejected()\n+        save_spendable_output()\n+\n+        block(81, spend=out[26])\n+        yield rejected() # other chain is same length\n+        save_spendable_output()\n+\n+        block(82, spend=out[27])\n+        yield accepted()  # now this chain is longer, triggers re-org\n+        save_spendable_output()\n+\n+        # now check that tx78 and tx79 have been put back into the peer's mempool\n+        mempool = self.nodes[0].getrawmempool()\n+        assert_equal(len(mempool), 2)\n+        assert(tx78.hash in mempool)\n+        assert(tx79.hash in mempool)\n+\n+\n+        # Test invalid opcodes in dead execution paths.\n+        #\n+        #  -> b81 (26) -> b82 (27) -> b83 (28)\n+        #\n+        b83 = block(83)\n+        op_codes = [OP_IF, OP_INVALIDOPCODE, OP_ELSE, OP_TRUE, OP_ENDIF]\n+        script = CScript(op_codes)\n+        tx1 = create_and_sign_tx(out[28].tx, out[28].n, out[28].tx.vout[0].nValue, script)\n+\n+        tx2 = create_and_sign_tx(tx1, 0, 0, CScript([OP_TRUE]))\n+        tx2.vin[0].scriptSig = CScript([OP_FALSE])\n+        tx2.rehash()\n+\n+        update_block(83, [tx1, tx2])\n+        yield accepted()\n+        save_spendable_output()\n+\n+\n+        # Reorg on/off blocks that have OP_RETURN in them (and try to spend them)\n+        #\n+        #  -> b81 (26) -> b82 (27) -> b83 (28) -> b84 (29) -> b87 (30) -> b88 (31)\n+        #                                    \\-> b85 (29) -> b86 (30)            \\-> b89a (32)\n+        #\n+        #\n+        b84 = block(84)\n+        tx1 = create_tx(out[29].tx, out[29].n, 0, CScript([OP_RETURN]))\n+        tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        tx1.calc_sha256()\n+        self.sign_tx(tx1, out[29].tx, out[29].n)\n+        tx1.rehash()\n+        tx2 = create_tx(tx1, 1, 0, CScript([OP_RETURN]))\n+        tx2.vout.append(CTxOut(0, CScript([OP_RETURN])))\n+        tx3 = create_tx(tx1, 2, 0, CScript([OP_RETURN]))\n+        tx3.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        tx4 = create_tx(tx1, 3, 0, CScript([OP_TRUE]))\n+        tx4.vout.append(CTxOut(0, CScript([OP_RETURN])))\n+        tx5 = create_tx(tx1, 4, 0, CScript([OP_RETURN]))\n+\n+        update_block(84, [tx1,tx2,tx3,tx4,tx5])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        tip(83)\n+        block(85, spend=out[29])\n+        yield rejected()\n+\n+        block(86, spend=out[30])\n+        yield accepted()\n+\n+        tip(84)\n+        block(87, spend=out[30])\n+        yield rejected()\n+        save_spendable_output()\n+\n+        block(88, spend=out[31])\n+        yield accepted()\n+        save_spendable_output()\n+\n+        # trying to spend the OP_RETURN output is rejected\n+        block(\"89a\", spend=out[32])\n+        tx = create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n+        update_block(\"89a\", [tx])\n+        yield rejected()\n+\n+\n+        #  Test re-org of a week's worth of blocks (1088 blocks)\n+        #  This test takes a minute or two and can be accomplished in memory\n+        #\n+        if self.options.runbarelyexpensive:\n+            tip(88)\n+            LARGE_REORG_SIZE = 1088\n+            test1 = TestInstance(sync_every_block=False)\n+            spend=out[32]\n+            for i in range(89, LARGE_REORG_SIZE + 89):\n+                b = block(i, spend)\n+                tx = CTransaction()\n+                script_length = MAX_BLOCK_SIZE - len(b.serialize()) - 69\n+                script_output = CScript([b'\\x00' * script_length])\n+                tx.vout.append(CTxOut(0, script_output))\n+                tx.vin.append(CTxIn(COutPoint(b.vtx[1].sha256, 0)))\n+                b = update_block(i, [tx])\n+                assert_equal(len(b.serialize()), MAX_BLOCK_SIZE)\n+                test1.blocks_and_transactions.append([self.tip, True])\n+                save_spendable_output()\n+                spend = get_spendable_output()\n+\n+            yield test1\n+            chain1_tip = i\n+\n+            # now create alt chain of same length\n+            tip(88)\n+            test2 = TestInstance(sync_every_block=False)\n+            for i in range(89, LARGE_REORG_SIZE + 89):\n+                block(\"alt\"+str(i))\n+                test2.blocks_and_transactions.append([self.tip, False])\n+            yield test2\n+\n+            # extend alt chain to trigger re-org\n+            block(\"alt\" + str(chain1_tip + 1))\n+            yield accepted()\n+\n+            # ... and re-org back to the first chain\n+            tip(chain1_tip)\n+            block(chain1_tip + 1)\n+            yield rejected()\n+            block(chain1_tip + 2)\n+            yield accepted()\n+\n+            chain1_tip += 2\n+\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "5d2daf39f828803906ce374e3e9b3c0992bcde3a",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+        self.block_receive_map = {}\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+        self.peer_disconnected = False\n+\n+    def on_inv(self, conn, message):\n+        pass\n+\n+    # Track the last getdata message we receive (used in the test)\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_block(self, conn, message):\n+        message.block.calc_sha256()\n+        try:\n+            self.block_receive_map[message.block.sha256] += 1\n+        except KeyError as e:\n+            self.block_receive_map[message.block.sha256] = 1\n+\n+    # Spin until verack message is received from the node.\n+    # We use this to signal that our test can begin. This\n+    # is called from the testing thread, so it needs to acquire\n+    # the global lock.\n+    def wait_for_verack(self):\n+        def veracked():\n+            return self.verack_received\n+        return wait_until(veracked, timeout=10)\n+\n+    def wait_for_disconnect(self):\n+        def disconnected():\n+            return self.peer_disconnected\n+        return wait_until(disconnected, timeout=10)\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_close(self, conn):\n+        self.peer_disconnected = True\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        def received_pong():\n+            return (self.last_pong.nonce == self.ping_counter)\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        success = wait_until(received_pong, timeout)\n+        self.ping_counter += 1\n+        return success\n+\n+    def send_mempool(self):\n+        self.lastInv = []\n+        self.send_message(msg_mempool())\n+\n+class P2PMempoolTests(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self):\n+        # Start a node with maxuploadtarget of 200 MB (/24h)\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-peerbloomfilters=0\"]))\n+\n+    def run_test(self):\n+        #connect a mininode\n+        aTestNode = TestNode()\n+        node = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], aTestNode)\n+        aTestNode.add_connection(node)\n+        NetworkThread().start()\n+        aTestNode.wait_for_verack()\n+\n+        #request mempool\n+        aTestNode.send_mempool()\n+        aTestNode.wait_for_disconnect()\n+\n+        #mininode must be disconnected at this point\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n+    \n+if __name__ == '__main__':\n+    P2PMempoolTests().main()"
      },
      {
        "sha": "962cafef0b17b27b3335f15acda08b372d71e7e0",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -60,8 +59,10 @@ def sync_with_ping(self, timeout=30):\n \n \n class VersionBitsWarningTest(BitcoinTestFramework):\n-    def setup_chain(self):\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self):\n         self.nodes = []\n@@ -82,7 +83,7 @@ def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n         block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n         tip = int(tip, 16)\n \n-        for i in xrange(numblocks):\n+        for i in range(numblocks):\n             block = create_block(tip, create_coinbase(height+1), block_time)\n             block.nVersion = nVersionToUse\n             block.solve()"
      },
      {
        "sha": "e1771231c066e97b432ebb23768663e371fecb25",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,11 +14,11 @@\n class PrioritiseTransactionTest(BitcoinTestFramework):\n \n     def __init__(self):\n-        self.txouts = gen_return_txouts()\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+        self.txouts = gen_return_txouts()\n \n     def setup_network(self):\n         self.nodes = []\n@@ -35,7 +35,7 @@ def run_test(self):\n \n         # Create 3 batches of transactions at 3 different fee rate levels\n         range_size = utxo_count // 3\n-        for i in xrange(3):\n+        for i in range(3):\n             txids.append([])\n             start_range = i * range_size\n             end_range = start_range + range_size\n@@ -46,7 +46,7 @@ def run_test(self):\n         # more transactions.\n         mempool = self.nodes[0].getrawmempool(True)\n         sizes = [0, 0, 0]\n-        for i in xrange(3):\n+        for i in range(3):\n             for j in txids[i]:\n                 assert(j in mempool)\n                 sizes[i] += mempool[j]['size']\n@@ -61,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transaction was mined\"\n+        print(\"Assert that prioritised transaction was mined\")\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -93,7 +93,7 @@ def run_test(self):\n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been.\n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that de-prioritised transaction is still in mempool\"\n+        print(\"Assert that de-prioritised transaction is still in mempool\")\n         assert(high_fee_tx in mempool)\n         for x in txids[2]:\n             if (x != high_fee_tx):\n@@ -135,7 +135,7 @@ def run_test(self):\n         # accepted.\n         self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n \n-        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        print(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n "
      },
      {
        "sha": "27160cae077621fff229a23e3f665ab35bfa22b1",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,7 +1,8 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n import socket\n \n from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n@@ -35,6 +36,10 @@\n \n class ProxyTest(BitcoinTestFramework):\n     def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports\n         # ... one unauthenticated\n@@ -55,7 +60,7 @@ def __init__(self):\n             self.conf3.unauth = True\n             self.conf3.auth = True\n         else:\n-            print \"Warning: testing without local IPv6 support\"\n+            print(\"Warning: testing without local IPv6 support\")\n \n         self.serv1 = Socks5Server(self.conf1)\n         self.serv1.start()\n@@ -76,7 +81,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        return start_nodes(4, self.options.tmpdir, extra_args=args)\n+        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "d225e29b500f225892fc5f82771cc202fb396849",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 39,
        "deletions": 39,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,14 +20,14 @@ def calc_usage(blockdir):\n class PruneTest(BitcoinTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n         self.utxo = []\n         self.address = [\"\",\"\"]\n         self.txouts = gen_return_txouts()\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n-\n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False\n@@ -57,62 +57,62 @@ def create_big_chain(self):\n         sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n         # Then mine enough full blocks to create more than 550MiB of data\n-        for i in xrange(645):\n+        for i in range(645):\n             self.mine_full_block(self.nodes[0], self.address[0])\n \n         sync_blocks(self.nodes[0:3])\n \n     def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n-        print \"Success\"\n-        print \"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir)\n-        print \"Mining 25 more blocks should cause the first block file to be pruned\"\n+        print(\"Success\")\n+        print(\"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir))\n+        print(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n-        for i in xrange(25):\n+        for i in range(25):\n             self.mine_full_block(self.nodes[0],self.address[0])\n \n         waitstart = time.time()\n         while os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             time.sleep(0.1)\n-            if time.time() - waitstart > 10:\n+            if time.time() - waitstart > 30:\n                 raise AssertionError(\"blk00000.dat not pruned when it should be\")\n \n-        print \"Success\"\n+        print(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n     def create_chain_with_staleblocks(self):\n         # Create stale blocks in manageable sized chunks\n-        print \"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\"\n+        print(\"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\")\n \n-        for j in xrange(12):\n+        for j in range(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             stop_node(self.nodes[0],0)\n             self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             self.utxo = self.nodes[1].listunspent()\n-            for i in xrange(24):\n+            for i in range(24):\n                 if j == 0:\n                     self.mine_full_block(self.nodes[1],self.address[1])\n                 else:\n                     self.nodes[1].generate(1) #tx's already in mempool from previous disconnects\n \n             # Reorg back with 25 block chain from node 0\n             self.utxo = self.nodes[0].listunspent()\n-            for i in xrange(25): \n+            for i in range(25):\n                 self.mine_full_block(self.nodes[0],self.address[0])\n \n             # Create connections in the order so both nodes can see the reorg at the same time\n             connect_nodes(self.nodes[1], 0)\n             connect_nodes(self.nodes[2], 0)\n             sync_blocks(self.nodes[0:3])\n \n-        print \"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir)\n+        print(\"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir))\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n@@ -123,11 +123,11 @@ def reorg_test(self):\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n-        print \"Current block height:\", height\n+        print(\"Current block height:\", height)\n \n         invalidheight = height-287\n         badhash = self.nodes[1].getblockhash(invalidheight)\n-        print \"Invalidating block at height:\",invalidheight,badhash\n+        print(\"Invalidating block at height:\",invalidheight,badhash)\n         self.nodes[1].invalidateblock(badhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n@@ -139,29 +139,29 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n         assert(self.nodes[1].getblockcount() == invalidheight - 1)\n-        print \"New best height\", self.nodes[1].getblockcount()\n+        print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n         stop_node(self.nodes[1],1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n-        print \"Generating new longer chain of 300 more blocks\"\n+        print(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n \n-        print \"Reconnect nodes\"\n+        print(\"Reconnect nodes\")\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[2], 1)\n         sync_blocks(self.nodes[0:3])\n \n-        print \"Verify height on node 2:\",self.nodes[2].getblockcount()\n-        print \"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir)\n+        print(\"Verify height on node 2:\",self.nodes[2].getblockcount())\n+        print(\"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir))\n \n-        print \"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\"\n+        print(\"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\")\n         self.nodes[0].generate(220) #node 0 has many large tx's in its mempool from the disconnects\n         sync_blocks(self.nodes[0:3])\n \n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -173,7 +173,7 @@ def reorg_back(self):\n             self.nodes[2].getblock(self.forkhash)\n             raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n         except JSONRPCException as e:\n-            print \"Will need to redownload block\",self.forkheight\n+            print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -197,14 +197,14 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            print \"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine\n+            print(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n             assert(self.nodes[0].getblockcount() == self.mainchainheight)\n             assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)\n             goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n-        print \"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\"\n+        print(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n         waitstart = time.time()\n         while self.nodes[2].getblockcount() < goalbestheight:\n             time.sleep(0.1)\n@@ -217,7 +217,7 @@ def reorg_back(self):\n     def mine_full_block(self, node, address):\n         # Want to create a full block\n         # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n-        for j in xrange(14):\n+        for j in range(14):\n             if len(self.utxo) < 14:\n                 self.utxo = node.listunspent()\n             inputs=[]\n@@ -241,8 +241,8 @@ def mine_full_block(self, node, address):\n \n \n     def run_test(self):\n-        print \"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\"\n-        print \"Mining a big blockchain of 995 blocks\"\n+        print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")\n+        print(\"Mining a big blockchain of 995 blocks\")\n         self.create_big_chain()\n         # Chain diagram key:\n         # *   blocks on main chain\n@@ -253,12 +253,12 @@ def run_test(self):\n         # Start by mining a simple chain that all nodes have\n         # N0=N1=N2 **...*(995)\n \n-        print \"Check that we haven't started pruning yet because we're below PruneAfterHeight\"\n+        print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()\n         # Extend this chain past the PruneAfterHeight\n         # N0=N1=N2 **...*(1020)\n \n-        print \"Check that we'll exceed disk space target if we have a very high stale block rate\"\n+        print(\"Check that we'll exceed disk space target if we have a very high stale block rate\")\n         self.create_chain_with_staleblocks()\n         # Disconnect N0\n         # And mine a 24 block chain on N1 and a separate 25 block chain on N0\n@@ -282,7 +282,7 @@ def run_test(self):\n         self.mainchainheight = self.nodes[2].getblockcount()   #1320\n         self.mainchainhash2 = self.nodes[2].getblockhash(self.mainchainheight)\n \n-        print \"Check that we can survive a 288 block reorg still\"\n+        print(\"Check that we can survive a 288 block reorg still\")\n         (self.forkheight,self.forkhash) = self.reorg_test() #(1033, )\n         # Now create a 288 block reorg by mining a longer chain on N1\n         # First disconnect N1\n@@ -315,7 +315,7 @@ def run_test(self):\n         #                                 \\\n         #                                  *...**(1320)\n \n-        print \"Test that we can rerequest a block we previously pruned if needed for a reorg\"\n+        print(\"Test that we can rerequest a block we previously pruned if needed for a reorg\")\n         self.reorg_back()\n         # Verify that N2 still has block 1033 on current chain (@), but not on main chain (*)\n         # Invalidate 1033 on current chain (@) on N2 and we should be able to reorg to\n@@ -335,7 +335,7 @@ def run_test(self):\n         #\n         # N1 doesn't change because 1033 on main chain (*) is invalid\n \n-        print \"Done\"\n+        print(\"Done\")\n \n if __name__ == '__main__':\n     PruneTest().main()"
      },
      {
        "sha": "ab6d2e8def14891f25d607f8214540cd5263d47c",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 27,
        "deletions": 6,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,12 +14,13 @@\n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n         #connect to a local machine for debugging\n         #url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n@@ -137,5 +138,25 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n+        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n+        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n+        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n+        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "4f17b661cb28d78123632b69efe42a57b1faa7c5",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 15,
        "deletions": 36,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -25,38 +25,17 @@ def get_sub_array_from_array(object_array, to_match):\n         return item\n     return []\n \n-def check_array_result(object_array, to_match, expected, should_not_find = False):\n-    \"\"\"\n-        Pass in array of JSON objects, a dictionary with key/value pairs\n-        to match against, and another dictionary with expected key/value\n-        pairs.\n-        If the should_not_find flag is true, to_match should not be found in object_array\n-        \"\"\"\n-    if should_not_find == True:\n-        expected = { }\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0 and should_not_find != True:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-    if num_matched > 0 and should_not_find == True:\n-        raise AssertionError(\"Objects was matched %s\"%(str(to_match)))\n-\n class ReceivedByTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(4, self.options.tmpdir)\n+        return start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''\n@@ -68,26 +47,26 @@ def run_test(self):\n         self.sync_all()\n \n         #Check not listed in listreceivedbyaddress because has 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            { },\n                            True)\n         #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence < 10\n-        check_array_result(self.nodes[1].listreceivedbyaddress(5),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence > 10, should not find Tx\n-        check_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n \n         #Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n \n@@ -131,7 +110,7 @@ def run_test(self):\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            received_by_account_json)\n \n@@ -143,7 +122,7 @@ def run_test(self):\n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n "
      },
      {
        "sha": "abbbb1033693b3285e29dbd2a124959f693e2e3e",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 21,
        "deletions": 10,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,32 +1,43 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test -reindex with CheckBlockIndex\n+# Test -reindex and -reindex-chainstate with CheckBlockIndex\n #\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+import time\n \n class ReindexTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False\n         self.nodes.append(start_node(0, self.options.tmpdir))\n \n-    def run_test(self):\n+    def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n+        blockcount = self.nodes[0].getblockcount()\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])\n-        assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Success\"\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"])\n+        while self.nodes[0].getblockcount() < blockcount:\n+            time.sleep(0.1)\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        print(\"Success\")\n+\n+    def run_test(self):\n+        self.reindex(False)\n+        self.reindex(True)\n+        self.reindex(False)\n+        self.reindex(True)\n \n if __name__ == '__main__':\n     ReindexTest().main()"
      },
      {
        "sha": "34c0f9d7957c71257e2d5d5a49e97b116dd5e02e",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -68,6 +68,11 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.setup_clean_chain = False\n+\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\", \"-debug\",\n@@ -82,34 +87,34 @@ def setup_network(self):\n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n \n-        print \"Running test simple doublespend...\"\n+        print(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n-        print \"Running test doublespend chain...\"\n+        print(\"Running test doublespend chain...\")\n         self.test_doublespend_chain()\n \n-        print \"Running test doublespend tree...\"\n+        print(\"Running test doublespend tree...\")\n         self.test_doublespend_tree()\n \n-        print \"Running test replacement feeperkb...\"\n+        print(\"Running test replacement feeperkb...\")\n         self.test_replacement_feeperkb()\n \n-        print \"Running test spends of conflicting outputs...\"\n+        print(\"Running test spends of conflicting outputs...\")\n         self.test_spends_of_conflicting_outputs()\n \n-        print \"Running test new unconfirmed inputs...\"\n+        print(\"Running test new unconfirmed inputs...\")\n         self.test_new_unconfirmed_inputs()\n \n-        print \"Running test too many replacements...\"\n+        print(\"Running test too many replacements...\")\n         self.test_too_many_replacements()\n \n-        print \"Running test opt-in...\"\n+        print(\"Running test opt-in...\")\n         self.test_opt_in()\n \n-        print \"Running test prioritised transactions...\"\n+        print(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n@@ -459,7 +464,7 @@ def test_opt_in(self):\n         except JSONRPCException as exp:\n             assert_equal(exp.error['code'], -26)\n         else:\n-            print tx1b_txid\n+            print(tx1b_txid)\n             assert(False)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))"
      },
      {
        "sha": "c9c2eaf7f37b96bf4bf2b2c63e56ef419063dfb0",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,16 +13,9 @@\n from struct import *\n from io import BytesIO\n from codecs import encode\n-import binascii\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n def deser_uint256(f):\n     r = 0\n@@ -33,7 +26,7 @@ def deser_uint256(f):\n \n #allows simple http get calls\n def http_get_call(host, port, path, response_object = 0):\n-    conn = httplib.HTTPConnection(host, port)\n+    conn = http.client.HTTPConnection(host, port)\n     conn.request('GET', path)\n \n     if response_object:\n@@ -43,7 +36,7 @@ def http_get_call(host, port, path, response_object = 0):\n \n #allows simple http post calls with a request body\n def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = httplib.HTTPConnection(host, port)\n+    conn = http.client.HTTPConnection(host, port)\n     conn.request('POST', path, requestdata)\n \n     if response_object:\n@@ -54,21 +47,22 @@ def http_post_call(host, port, path, requestdata = '', response_object = 0):\n class RESTTest (BitcoinTestFramework):\n     FORMAT_SEPARATOR = \".\"\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         self.is_network_split=False\n         self.sync_all()\n \n     def run_test(self):\n-        url = urlparse.urlparse(self.nodes[0].url)\n-        print \"Mining blocks...\"\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -151,7 +145,7 @@ def run_test(self):\n         output.write(bin_response)\n         output.seek(0)\n         chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(65).rstrip(\"L\")\n+        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n \n         assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n         assert_equal(chainHeight, 102) #chain height must be 102"
      },
      {
        "sha": "572273566b63a0f1bab34ed0ad8fb23a1f63672c",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -24,7 +24,7 @@ def run_bind_test(tmpdir, allow_ips, connect_to, addresses, expected):\n     if allow_ips:\n         base_args += ['-rpcallowip=' + x for x in allow_ips]\n     binds = ['-rpcbind='+addr for addr in addresses]\n-    nodes = start_nodes(1, tmpdir, [base_args + binds], connect_to)\n+    nodes = start_nodes(self.num_nodes, tmpdir, [base_args + binds], connect_to)\n     try:\n         pid = bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n@@ -38,7 +38,7 @@ def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n     at a non-localhost IP.\n     '''\n     base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-    nodes = start_nodes(1, tmpdir, [base_args])\n+    nodes = start_nodes(self.num_nodes, tmpdir, [base_args])\n     try:\n         # connect to node through non-loopback interface\n         url = \"http://rt:rt@%s:%d\" % (rpchost, rpcport,)\n@@ -51,7 +51,7 @@ def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n \n \n def run_test(tmpdir):\n-    assert(sys.platform == 'linux2') # due to OS-specific network stats queries, this test works only on Linux\n+    assert(sys.platform.startswith('linux')) # due to OS-specific network stats queries, this test works only on Linux\n     # find the first non-loopback interface for testing\n     non_loopback_ip = None\n     for name,ip in all_interfaces():"
      },
      {
        "sha": "6ab17d59b387834f14445e4165ed401650cc0545",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -209,12 +208,14 @@ def __init__(self):\n         BaseNode.__init__(self)\n \n class SendHeadersTest(BitcoinTestFramework):\n-    def setup_chain(self):\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes = start_nodes(2, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\"]]*2)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\"]]*2)\n         connect_nodes(self.nodes[0], 1)\n \n     # mine count blocks and return the new tip\n@@ -266,8 +267,8 @@ def run_test(self):\n \n         # PART 1\n         # 1. Mine a block; expect inv announcements each time\n-        print \"Part 1: headers don't start before sendheaders message...\"\n-        for i in xrange(4):\n+        print(\"Part 1: headers don't start before sendheaders message...\")\n+        for i in range(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n@@ -297,14 +298,14 @@ def run_test(self):\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n-        print \"Part 1: success!\"\n-        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        print(\"Part 1: success!\")\n+        print(\"Part 2: announce blocks with headers after sendheaders message...\")\n         # PART 2\n         # 2. Send a sendheaders message and test that headers announcements\n         # commence and keep working.\n         test_node.send_message(msg_sendheaders())\n         prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n-        test_node.get_headers(locator=[prev_tip], hashstop=0L)\n+        test_node.get_headers(locator=[prev_tip], hashstop=0)\n         test_node.sync_with_ping()\n \n         # Now that we've synced headers, headers announcements should work\n@@ -314,14 +315,14 @@ def run_test(self):\n \n         height = self.nodes[0].getblockcount()+1\n         block_time += 10  # Advance far enough ahead\n-        for i in xrange(10):\n+        for i in range(10):\n             # Mine i blocks, and alternate announcing either via\n             # inv (of tip) or via headers. After each, new blocks\n             # mined by the node should successfully be announced\n             # with block header, even though the blocks are never requested\n-            for j in xrange(2):\n+            for j in range(2):\n                 blocks = []\n-                for b in xrange(i+1):\n+                for b in range(i+1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n                     blocks[-1].solve()\n                     tip = blocks[-1].sha256\n@@ -360,13 +361,13 @@ def run_test(self):\n                 height += 1\n                 block_time += 1\n \n-        print \"Part 2: success!\"\n+        print(\"Part 2: success!\")\n \n-        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+        print(\"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\")\n \n         # PART 3.  Headers announcements can stop after large reorg, and resume after\n         # getheaders or inv from peer.\n-        for j in xrange(2):\n+        for j in range(2):\n             # First try mining a reorg that can propagate with header announcement\n             new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n@@ -392,7 +393,7 @@ def run_test(self):\n             test_node.get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n \n-            for i in xrange(3):\n+            for i in range(3):\n                 # Mine another block, still should get only an inv\n                 tip = self.mine_blocks(1)\n                 assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n@@ -414,7 +415,7 @@ def run_test(self):\n                     # of headers announcements, or mine a new block and inv it, also \n                     # triggering resumption of headers announcements.\n                     if j == 0:\n-                        test_node.get_headers(locator=[tip], hashstop=0L)\n+                        test_node.get_headers(locator=[tip], hashstop=0)\n                         test_node.sync_with_ping()\n                     else:\n                         test_node.send_block_inv(tip)\n@@ -424,17 +425,17 @@ def run_test(self):\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n \n-        print \"Part 3: success!\"\n+        print(\"Part 3: success!\")\n \n-        print \"Part 4: Testing direct fetch behavior...\"\n+        print(\"Part 4: Testing direct fetch behavior...\")\n         tip = self.mine_blocks(1)\n         height = self.nodes[0].getblockcount() + 1\n         last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n         block_time = last_time + 1\n \n         # Create 2 blocks.  Send the blocks, then send the headers.\n         blocks = []\n-        for b in xrange(2):\n+        for b in range(2):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -452,7 +453,7 @@ def run_test(self):\n \n         # This time, direct fetch should work\n         blocks = []\n-        for b in xrange(3):\n+        for b in range(3):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -473,7 +474,7 @@ def run_test(self):\n         blocks = []\n \n         # Create extra blocks for later\n-        for b in xrange(20):\n+        for b in range(20):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -507,7 +508,7 @@ def run_test(self):\n         with mininode_lock:\n             assert_equal(test_node.last_getdata, None)\n \n-        print \"Part 4: success!\"\n+        print(\"Part 4: success!\")\n \n         # Finally, check that the inv node never received a getdata request,\n         # throughout the test"
      },
      {
        "sha": "31b6f14a26562fbdb251cefb432fbf5a183e99bd",
        "filename": "qa/rpc-tests/signmessages.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signmessages.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+\n+class SignMessagesTest(BitcoinTestFramework):\n+    \"\"\"Tests RPC commands for signing and verifying messages.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def run_test(self):\n+        message = 'This is just a test message'\n+\n+        # Test the signing with a privkey\n+        privKey = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n+        address = 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB'\n+        signature = self.nodes[0].signmessagewithprivkey(privKey, message)\n+\n+        # Verify the message\n+        assert(self.nodes[0].verifymessage(address, signature, message))\n+\n+        # Test the signing with an address with wallet\n+        address = self.nodes[0].getnewaddress()\n+        signature = self.nodes[0].signmessage(address, message)\n+\n+        # Verify the message\n+        assert(self.nodes[0].verifymessage(address, signature, message))\n+\n+if __name__ == '__main__':\n+    SignMessagesTest().main()"
      },
      {
        "sha": "c61a280616cf7194a4bca1ba23ca842dc2b6aced",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,12 +10,13 @@\n class SignRawTransactionsTest(BitcoinTestFramework):\n     \"\"\"Tests transaction signing via RPC command \"signrawtransaction\".\"\"\"\n \n-    def setup_chain(self):\n-        print('Initializing test directory ' + self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def successful_signing_test(self):"
      },
      {
        "sha": "d76fba4b075ce0176990ab9140e4bede577e2bd6",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,12 +1,13 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n # Test fee estimation code\n #\n \n+from collections import OrderedDict\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -22,7 +23,7 @@\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     '''\n     Create and send a transaction with a random fee.\n-    The transaction pays to a trival P2SH script, and assumes that its inputs\n+    The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n@@ -49,10 +50,10 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n         if total_in <= amount + fee:\n             raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n     outputs = {}\n-    outputs[P2SH_1] = total_in - amount - fee\n-    outputs[P2SH_2] = amount\n+    outputs = OrderedDict([(P2SH_1, total_in - amount - fee),\n+                           (P2SH_2, amount)])\n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    # Createrawtransaction constructions a transaction that is ready to be signed\n+    # createrawtransaction constructs a transaction that is ready to be signed.\n     # These transactions don't need to be signed, but we still have to insert the ScriptSig\n     # that will satisfy the ScriptPubKey.\n     completetx = rawtx[0:10]\n@@ -78,12 +79,10 @@ def split_inputs(from_node, txins, txouts, initial_split = False):\n     '''\n     prevtxout = txins.pop()\n     inputs = []\n-    outputs = {}\n     inputs.append({ \"txid\" : prevtxout[\"txid\"], \"vout\" : prevtxout[\"vout\"] })\n     half_change = satoshi_round(prevtxout[\"amount\"]/2)\n     rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    outputs[P2SH_1] = half_change\n-    outputs[P2SH_2] = rem_change\n+    outputs = OrderedDict([(P2SH_1, half_change), (P2SH_2, rem_change)])\n     rawtx = from_node.createrawtransaction(inputs, outputs)\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the property ScriptSig\n@@ -146,6 +145,11 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n \n class EstimateFeeTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n+\n     def setup_network(self):\n         '''\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n@@ -224,7 +228,7 @@ def transact_and_mine(self, numblocks, mining_node):\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n             sync_blocks(self.nodes[0:3],.1)\n-            #update which txouts are confirmed\n+            # update which txouts are confirmed\n             newmem = []\n             for utx in self.memutxo:\n                 if utx[\"txid\"] in mined:\n@@ -239,7 +243,7 @@ def run_test(self):\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n         print(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        for i in xrange(2):\n+        for i in range(2):\n             print(\"Creating transactions and mining them with a block size that can't keep up\")\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])"
      },
      {
        "sha": "d095a56ce75e3529ffe2a8773d7e8ea5bf1bd0db",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -67,9 +67,11 @@ def EncodeDecimal(o):\n class AuthServiceProxy(object):\n     __id_count = 0\n \n-    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):\n+    # ensure_ascii: escape unicode as \\uXXXX, passed to json.dumps\n+    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):\n         self.__service_url = service_url\n         self._service_name = service_name\n+        self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n         self.__url = urlparse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n@@ -124,17 +126,22 @@ def _request(self, method, path, postdata):\n                 return self._get_response()\n             else:\n                 raise\n+        except BrokenPipeError:\n+            # Python 3.5+ raises this instead of BadStatusLine when the connection was reset\n+            self.__conn.close()\n+            self.__conn.request(method, path, postdata, headers)\n+            return self._get_response()\n \n     def __call__(self, *args):\n         AuthServiceProxy.__id_count += 1\n \n         log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n-                                 json.dumps(args, default=EncodeDecimal)))\n+                                 json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         postdata = json.dumps({'version': '1.1',\n                                'method': self._service_name,\n                                'params': args,\n-                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal)\n-        response = self._request('POST', self.__url.path, postdata)\n+                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n+        response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n             raise JSONRPCException(response['error'])\n         elif 'result' not in response:\n@@ -144,9 +151,9 @@ def __call__(self, *args):\n             return response['result']\n \n     def _batch(self, rpc_call_list):\n-        postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal)\n+        postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \"+postdata)\n-        return self._request('POST', self.__url.path, postdata)\n+        return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n \n     def _get_response(self):\n         http_response = self.__conn.getresponse()\n@@ -162,7 +169,7 @@ def _get_response(self):\n         responsedata = http_response.read().decode('utf8')\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         if \"error\" in response and response[\"error\"] is None:\n-            log.debug(\"<-%s- %s\"%(response[\"id\"], json.dumps(response[\"result\"], default=EncodeDecimal)))\n+            log.debug(\"<-%s- %s\"%(response[\"id\"], json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n             log.debug(\"<-- \"+responsedata)\n         return response"
      },
      {
        "sha": "ef800e4d5736956b68f8d963347eeb6b03745fd7",
        "filename": "qa/rpc-tests/test_framework/bignum.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/bignum.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,16 +1,15 @@\n-#\n+#!/usr/bin/env python3\n #\n # bignum.py\n #\n # This file is copied from python-bitcoinlib.\n #\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n \"\"\"Bignum routines\"\"\"\n \n-from __future__ import absolute_import, division, print_function, unicode_literals\n \n import struct\n "
      },
      {
        "sha": "6120dd574b5dda7d81bb3776413ed7cf14d4cd22",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 47,
        "deletions": 25,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,31 +1,43 @@\n+#!/usr/bin/env python3\n # BlockStore: a helper class that keeps a map of blocks and implements\n #             helper functions for responding to getheaders and getdata,\n #             and for constructing a getheaders message\n #\n \n from .mininode import *\n-import dbm\n from io import BytesIO\n+import dbm.ndbm\n \n class BlockStore(object):\n     def __init__(self, datadir):\n-        self.blockDB = dbm.open(datadir + \"/blocks\", 'c')\n-        self.currentBlock = 0L\n+        self.blockDB = dbm.ndbm.open(datadir + \"/blocks\", 'c')\n+        self.currentBlock = 0\n         self.headers_map = dict()\n-    \n+\n     def close(self):\n         self.blockDB.close()\n \n+    def erase(self, blockhash):\n+        del self.blockDB[repr(blockhash)]\n+\n+    # lookup an entry and return the item as raw bytes\n     def get(self, blockhash):\n-        serialized_block = None\n+        value = None\n         try:\n-            serialized_block = self.blockDB[repr(blockhash)]\n+            value = self.blockDB[repr(blockhash)]\n         except KeyError:\n             return None\n-        f = BytesIO(serialized_block)\n-        ret = CBlock()\n-        ret.deserialize(f)\n-        ret.calc_sha256()\n+        return value\n+\n+    # lookup an entry and return it as a CBlock\n+    def get_block(self, blockhash):\n+        ret = None\n+        serialized_block = self.get(blockhash)\n+        if serialized_block is not None:\n+            f = BytesIO(serialized_block)\n+            ret = CBlock()\n+            ret.deserialize(f)\n+            ret.calc_sha256()\n         return ret\n \n     def get_header(self, blockhash):\n@@ -67,20 +79,23 @@ def add_block(self, block):\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n \n     def add_header(self, header):\n         self.headers_map[header.sha256] = header\n \n+    # lookup the hashes in \"inv\", and return p2p messages for delivering\n+    # blocks found.\n     def get_blocks(self, inv):\n         responses = []\n         for i in inv:\n             if (i.type == 2): # MSG_BLOCK\n-                block = self.get(i.hash)\n-                if block is not None:\n-                    responses.append(msg_block(block))\n+                data = self.get(i.hash)\n+                if data is not None:\n+                    # Use msg_generic to avoid re-serialization\n+                    responses.append(msg_generic(b\"block\", data))\n         return responses\n \n     def get_locator(self, current_tip=None):\n@@ -89,11 +104,11 @@ def get_locator(self, current_tip=None):\n         r = []\n         counter = 0\n         step = 1\n-        lastBlock = self.get(current_tip)\n+        lastBlock = self.get_block(current_tip)\n         while lastBlock is not None:\n             r.append(lastBlock.hashPrevBlock)\n             for i in range(step):\n-                lastBlock = self.get(lastBlock.hashPrevBlock)\n+                lastBlock = self.get_block(lastBlock.hashPrevBlock)\n                 if lastBlock is None:\n                     break\n             counter += 1\n@@ -105,35 +120,42 @@ def get_locator(self, current_tip=None):\n \n class TxStore(object):\n     def __init__(self, datadir):\n-        self.txDB = dbm.open(datadir + \"/transactions\", 'c')\n+        self.txDB = dbm.ndbm.open(datadir + \"/transactions\", 'c')\n \n     def close(self):\n         self.txDB.close()\n \n+    # lookup an entry and return the item as raw bytes\n     def get(self, txhash):\n-        serialized_tx = None\n+        value = None\n         try:\n-            serialized_tx = self.txDB[repr(txhash)]\n+            value = self.txDB[repr(txhash)]\n         except KeyError:\n             return None\n-        f = BytesIO(serialized_tx)\n-        ret = CTransaction()\n-        ret.deserialize(f)\n-        ret.calc_sha256()\n+        return value\n+\n+    def get_transaction(self, txhash):\n+        ret = None\n+        serialized_tx = self.get(txhash)\n+        if serialized_tx is not None:\n+            f = BytesIO(serialized_tx)\n+            ret = CTransaction()\n+            ret.deserialize(f)\n+            ret.calc_sha256()\n         return ret\n \n     def add_transaction(self, tx):\n         tx.calc_sha256()\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n \n     def get_transactions(self, inv):\n         responses = []\n         for i in inv:\n             if (i.type == 1): # MSG_TX\n                 tx = self.get(i.hash)\n                 if tx is not None:\n-                    responses.append(msg_tx(tx))\n+                    responses.append(msg_generic(b\"tx\", tx))\n         return responses"
      },
      {
        "sha": "df4fe13e5c1c6ede900cefd307629c70210dc234",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,8 @@\n+#!/usr/bin/env python3\n # blocktools.py - utilities for manipulating blocks and transactions\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN\n@@ -79,12 +79,27 @@ def create_coinbase(height, pubkey = None):\n     coinbase.calc_sha256()\n     return coinbase\n \n-# Create a transaction with an anyone-can-spend output, that spends the\n-# nth output of prevtx.\n-def create_transaction(prevtx, n, sig, value):\n+# Create a transaction.\n+# If the scriptPubKey is not specified, make it anyone-can-spend.\n+def create_transaction(prevtx, n, sig, value, scriptPubKey=CScript()):\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n-    tx.vout.append(CTxOut(value, b\"\"))\n+    tx.vout.append(CTxOut(value, scriptPubKey))\n     tx.calc_sha256()\n     return tx\n+\n+def get_legacy_sigopcount_block(block, fAccurate=True):\n+    count = 0\n+    for tx in block.vtx:\n+        count += get_legacy_sigopcount_tx(tx, fAccurate)\n+    return count\n+\n+def get_legacy_sigopcount_tx(tx, fAccurate=True):\n+    count = 0\n+    for i in tx.vout:\n+        count += i.scriptPubKey.GetSigOpCount(fAccurate)\n+    for j in tx.vin:\n+        # scriptSig might be of type bytes, so convert to CScript for the moment\n+        count += CScript(j.scriptSig).GetSigOpCount(fAccurate)\n+    return count"
      },
      {
        "sha": "7c92d3f8289171701f282efe5fe221cd125876bb",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore\n@@ -259,10 +258,10 @@ def check_results(self, blockhash, outcome):\n                     if c.cb.bestblockhash == blockhash:\n                         return False\n                     if blockhash not in c.cb.block_reject_map:\n-                        print 'Block not in reject map: %064x' % (blockhash)\n+                        print('Block not in reject map: %064x' % (blockhash))\n                         return False\n                     if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        print('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n@@ -287,10 +286,10 @@ def check_mempool(self, txhash, outcome):\n                     if txhash in c.cb.lastInv:\n                         return False\n                     if txhash not in c.cb.tx_reject_map:\n-                        print 'Tx not in reject map: %064x' % (txhash)\n+                        print('Tx not in reject map: %064x' % (txhash))\n                         return False\n                     if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        print('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n                         return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n@@ -393,7 +392,7 @@ def run(self):\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-            print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n+            print(\"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ])\n             test_number += 1\n \n         [ c.disconnect_node() for c in self.connections ]"
      },
      {
        "sha": "23fce61014040e871446156f465fa5037066e61f",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n \"\"\"\n This module contains utilities for doing coverage analysis on the RPC"
      },
      {
        "sha": "4548e2e7c080f391c82e1bdae705d161f16935a6",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 64,
        "deletions": 44,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,7 +1,12 @@\n-# mininode.py - Bitcoin P2P network half-a-node\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# mininode.py - Bitcoin P2P network half-a-node\n #\n # This python code was modified from ArtForz' public domain  half-a-node, as\n # found in the mini-node branch of http://github.com/jgarzik/pynode.\n@@ -34,12 +39,12 @@\n \n BIP0031_VERSION = 60000\n MY_VERSION = 60001  # past bip-31 for ping/pong\n-MY_SUBVERSION = b\"/python-mininode-tester:0.0.2/\"\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n \n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n \n-COIN = 100000000L # 1 btc in satoshis\n+COIN = 100000000 # 1 btc in satoshis\n \n NODE_NETWORK = (1 << 0)\n NODE_GETUTXO = (1 << 1)\n@@ -80,44 +85,42 @@ def deser_string(f):\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     return f.read(nit)\n \n-\n def ser_string(s):\n     if len(s) < 253:\n         return struct.pack(\"B\", len(s)) + s\n     elif len(s) < 0x10000:\n         return struct.pack(\"<BH\", 253, len(s)) + s\n-    elif len(s) < 0x100000000L:\n+    elif len(s) < 0x100000000:\n         return struct.pack(\"<BI\", 254, len(s)) + s\n     return struct.pack(\"<BQ\", 255, len(s)) + s\n \n-\n def deser_uint256(f):\n-    r = 0L\n-    for i in xrange(8):\n+    r = 0\n+    for i in range(8):\n         t = struct.unpack(\"<I\", f.read(4))[0]\n         r += t << (i * 32)\n     return r\n \n \n def ser_uint256(u):\n-    rs = \"\"\n-    for i in xrange(8):\n-        rs += struct.pack(\"<I\", u & 0xFFFFFFFFL)\n+    rs = b\"\"\n+    for i in range(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n         u >>= 32\n     return rs\n \n \n def uint256_from_str(s):\n-    r = 0L\n+    r = 0\n     t = struct.unpack(\"<IIIIIIII\", s[:32])\n-    for i in xrange(8):\n+    for i in range(8):\n         r += t[i] << (i * 32)\n     return r\n \n \n def uint256_from_compact(c):\n     nbytes = (c >> 24) & 0xFF\n-    v = (c & 0xFFFFFFL) << (8 * (nbytes - 3))\n+    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n     return v\n \n \n@@ -130,7 +133,7 @@ def deser_vector(f, c):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = c()\n         t.deserialize(f)\n         r.append(t)\n@@ -146,7 +149,7 @@ def ser_vector(l, ser_function_name=None):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -167,7 +170,7 @@ def deser_uint256_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = deser_uint256(f)\n         r.append(t)\n     return r\n@@ -179,7 +182,7 @@ def ser_uint256_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -197,19 +200,19 @@ def deser_string_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = deser_string(f)\n         r.append(t)\n     return r\n \n \n def ser_string_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -227,7 +230,7 @@ def deser_int_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = struct.unpack(\"<i\", f.read(4))[0]\n         r.append(t)\n     return r\n@@ -239,7 +242,7 @@ def ser_int_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -294,7 +297,7 @@ class CInv(object):\n         2|MSG_WITNESS_FLAG : \"WitnessBlock\"\n     }\n \n-    def __init__(self, t=0, h=0L):\n+    def __init__(self, t=0, h=0):\n         self.type = t\n         self.hash = h\n \n@@ -654,7 +657,7 @@ def serialize(self, with_witness=False):\n     def get_merkle_root(self, hashes):\n         while len(hashes) > 1:\n             newhashes = []\n-            for i in xrange(0, len(hashes), 2):\n+            for i in range(0, len(hashes), 2):\n                 i2 = min(i+1, len(hashes)-1)\n                 newhashes.append(hash256(hashes[i] + hashes[i2]))\n             hashes = newhashes\n@@ -768,7 +771,7 @@ def deserialize(self, f):\n         self.vchSig = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += ser_string(self.vchMsg)\n         r += ser_string(self.vchSig)\n         return r\n@@ -925,7 +928,7 @@ class msg_getblocks(object):\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n-        self.hashstop = 0L\n+        self.hashstop = 0\n \n     def deserialize(self, f):\n         self.locator = CBlockLocator()\n@@ -982,13 +985,25 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n \n+# for cases where a user needs tighter control over what is sent over the wire\n+# note that the user must supply the name of the command, and the data\n+class msg_generic(object):\n+    def __init__(self, command, data=None):\n+        self.command = command\n+        self.data = data\n+\n+    def serialize(self):\n+        return self.data\n+\n+    def __repr__(self):\n+        return \"msg_generic()\"\n+\n class msg_witness_block(msg_block):\n \n     def serialize(self):\n         r = self.block.serialize(with_witness=True)\n         return r\n \n-\n class msg_getaddr(object):\n     command = b\"getaddr\"\n \n@@ -1024,7 +1039,7 @@ def __repr__(self):\n class msg_ping(object):\n     command = b\"ping\"\n \n-    def __init__(self, nonce=0L):\n+    def __init__(self, nonce=0):\n         self.nonce = nonce\n \n     def deserialize(self, f):\n@@ -1097,7 +1112,7 @@ class msg_getheaders(object):\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n-        self.hashstop = 0L\n+        self.hashstop = 0\n \n     def deserialize(self, f):\n         self.locator = CBlockLocator()\n@@ -1139,25 +1154,28 @@ def __repr__(self):\n \n class msg_reject(object):\n     command = b\"reject\"\n+    REJECT_MALFORMED = 1\n \n     def __init__(self):\n         self.message = b\"\"\n         self.code = 0\n-        self.reason = \"\"\n-        self.data = 0L\n+        self.reason = b\"\"\n+        self.data = 0\n \n     def deserialize(self, f):\n         self.message = deser_string(f)\n         self.code = struct.unpack(\"<B\", f.read(1))[0]\n         self.reason = deser_string(f)\n-        if (self.message == \"block\" or self.message == \"tx\"):\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n             self.data = deser_uint256(f)\n \n     def serialize(self):\n         r = ser_string(self.message)\n         r += struct.pack(\"<B\", self.code)\n         r += ser_string(self.reason)\n-        if (self.message == \"block\" or self.message == \"tx\"):\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n             r += ser_uint256(self.data)\n         return r\n \n@@ -1183,7 +1201,7 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n class msg_feefilter(object):\n     command = b\"feefilter\"\n \n-    def __init__(self, feerate=0L):\n+    def __init__(self, feerate=0):\n         self.feerate = feerate\n \n     def deserialize(self, f):\n@@ -1234,10 +1252,10 @@ def deliver(self, conn, message):\n             time.sleep(deliver_sleep)\n         with mininode_lock:\n             try:\n-                getattr(self, 'on_' + message.command)(conn, message)\n+                getattr(self, 'on_' + message.command.decode('ascii'))(conn, message)\n             except:\n-                print \"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0])\n+                print(\"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0]))\n \n     def on_version(self, conn, message):\n         if message.nVersion >= 209:\n@@ -1359,8 +1377,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         vt.addrFrom.ip = \"0.0.0.0\"\n         vt.addrFrom.port = 0\n         self.send_message(vt, True)\n-        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n-            + str(dstport)\n+        print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport))\n \n         try:\n             self.connect((dstaddr, dstport))\n@@ -1453,11 +1471,13 @@ def got_data(self):\n                     self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n                                         repr(msg))\n         except Exception as e:\n-            print 'got_data:', repr(e)\n+            print('got_data:', repr(e))\n+            # import  traceback\n+            # traceback.print_tb(sys.exc_info()[2])\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n-            return\n+            raise IOError('Not connected, no pushbuf')\n         self.show_debug_msg(\"Send %s\" % repr(message))\n         command = message.command\n         data = message.serialize()"
      },
      {
        "sha": "573b06772d7b33a3cad9df6ccf122f8370bd950c",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7678228c42bb5722f4479e6a77ae474d54e021ad",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,18 +1,19 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #\n # script.py\n #\n # This file is modified from python-bitcoinlib.\n #\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n \"\"\"Scripts\n \n Functionality to build scripts, as well as SignatureHash().\n \"\"\"\n \n-from __future__ import absolute_import, division, print_function, unicode_literals\n \n from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n@@ -663,7 +664,7 @@ def __coerce_instance(cls, other):\n                 other = bchr(CScriptOp(OP_0))\n             else:\n                 other = CScriptNum.encode(other)\n-        elif isinstance(other, (int, long)):\n+        elif isinstance(other, int):\n             if 0 <= other <= 16:\n                 other = bytes(bchr(CScriptOp.encode_op_n(other)))\n             elif other == -1:"
      },
      {
        "sha": "372f5ed605e4ab87f8eff1e3e8ac522bef56d5cf",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,11 +1,12 @@\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Dummy Socks5 server for testing.\n '''\n-from __future__ import print_function, division, unicode_literals\n-import socket, threading, Queue\n+\n+import socket, threading, queue\n import traceback, sys\n \n ### Protocol constants\n@@ -132,7 +133,7 @@ def __init__(self, conf):\n         self.s.listen(5)\n         self.running = False\n         self.thread = None\n-        self.queue = Queue.Queue() # report connections and exceptions to client\n+        self.queue = queue.Queue() # report connections and exceptions to client\n \n     def run(self):\n         while self.running:"
      },
      {
        "sha": "30e8b5755de39138a84a9e3ee2893a84afa3a657",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 34,
        "deletions": 24,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,21 +1,20 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Base class for RPC testing\n \n-# Add python-bitcoinrpc to module search path:\n+import logging\n+import optparse\n import os\n import sys\n-\n import shutil\n import tempfile\n import traceback\n \n from .util import (\n     initialize_chain,\n-    assert_equal,\n     start_nodes,\n     connect_nodes_bi,\n     sync_blocks,\n@@ -25,27 +24,33 @@\n     enable_coverage,\n     check_json_precision,\n     initialize_chain_clean,\n+    PortSeed,\n )\n-from .authproxy import AuthServiceProxy, JSONRPCException\n+from .authproxy import JSONRPCException\n \n \n class BitcoinTestFramework(object):\n \n-    # These may be over-ridden by subclasses:\n+    def __init__(self):\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+        self.nodes = None\n+\n     def run_test(self):\n-        for node in self.nodes:\n-            assert_equal(node.getblockcount(), 200)\n-            assert_equal(node.getbalance(), 25*50)\n+        raise NotImplementedError\n \n     def add_options(self, parser):\n         pass\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+        if self.setup_clean_chain:\n+            initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+        else:\n+            initialize_chain(self.options.tmpdir, self.num_nodes)\n \n     def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir)\n+        return start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def setup_network(self, split = False):\n         self.nodes = self.setup_nodes()\n@@ -95,31 +100,35 @@ def join_network(self):\n         self.setup_network(False)\n \n     def main(self):\n-        import optparse\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")\n         parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                           help=\"Don't stop bitcoinds after the test execution\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../../src\"),\n                           help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n         parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n                           help=\"Root directory for datadirs\")\n         parser.add_option(\"--tracerpc\", dest=\"trace_rpc\", default=False, action=\"store_true\",\n                           help=\"Print out all RPC calls as they are made\")\n+        parser.add_option(\"--portseed\", dest=\"port_seed\", default=os.getpid(), type='int',\n+                          help=\"The seed to use for assigning port numbers (default: current process id)\")\n         parser.add_option(\"--coveragedir\", dest=\"coveragedir\",\n                           help=\"Write tested RPC commands into this directory\")\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n+        self.options.tmpdir += '/' + str(self.options.port_seed)\n+\n         if self.options.trace_rpc:\n-            import logging\n-            logging.basicConfig(level=logging.DEBUG)\n+            logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)\n \n         if self.options.coveragedir:\n             enable_coverage(self.options.coveragedir)\n \n+        PortSeed.n = self.options.port_seed\n+\n         os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n \n         check_json_precision()\n@@ -140,14 +149,16 @@ def main(self):\n             print(\"JSONRPC error: \"+e.error['message'])\n             traceback.print_tb(sys.exc_info()[2])\n         except AssertionError as e:\n-            print(\"Assertion failed: \"+ str(e))\n+            print(\"Assertion failed: \" + str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except KeyError as e:\n             print(\"key not found: \"+ str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except Exception as e:\n-            print(\"Unexpected exception caught during testing: \"+str(e))\n+            print(\"Unexpected exception caught during testing: \" + repr(e))\n             traceback.print_tb(sys.exc_info()[2])\n+        except KeyboardInterrupt as e:\n+            print(\"Exiting after \" + repr(e))\n \n         if not self.options.noshutdown:\n             print(\"Stopping nodes\")\n@@ -156,9 +167,11 @@ def main(self):\n         else:\n             print(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown:\n+        if not self.options.nocleanup and not self.options.noshutdown and success:\n             print(\"Cleaning up\")\n             shutil.rmtree(self.options.tmpdir)\n+        else:\n+            print(\"Not cleaning up dir %s\" % self.options.tmpdir)\n \n         if success:\n             print(\"Tests successful\")\n@@ -176,9 +189,10 @@ def main(self):\n \n class ComparisonTestFramework(BitcoinTestFramework):\n \n-    # Can override the num_nodes variable to indicate how many nodes to run.\n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 2\n+        self.setup_clean_chain = True\n \n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n@@ -188,10 +202,6 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n-    def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n-        initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n-\n     def setup_network(self):\n         self.nodes = start_nodes(\n             self.num_nodes, self.options.tmpdir,"
      },
      {
        "sha": "32fe79efc38be15100c973dcaeb9bf80c95f2394",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 121,
        "deletions": 44,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,4 +1,5 @@\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,14 +8,14 @@\n # Helpful routines for regression testing\n #\n \n-# Add python-bitcoinrpc to module search path:\n import os\n import sys\n \n from binascii import hexlify, unhexlify\n from base64 import b64encode\n from decimal import Decimal, ROUND_DOWN\n import json\n+import http.client\n import random\n import shutil\n import subprocess\n@@ -27,6 +28,20 @@\n \n COVERAGE_DIR = None\n \n+# The maximum number of nodes a single test can spawn\n+MAX_NODES = 8\n+# Don't assign rpc or p2p ports lower than this\n+PORT_MIN = 11000\n+# The number of ports to \"reserve\" for p2p and rpc, each\n+PORT_RANGE = 5000\n+\n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n+\n+class PortSeed:\n+    # Must be initialized with a unique integer for each process\n+    n = None\n+\n #Set Mocktime default to OFF.\n #MOCKTIME is only needed for scripts that use the\n #cached version of the blockchain.  If the cached\n@@ -81,9 +96,11 @@ def get_rpc_proxy(url, node_number, timeout=None):\n \n \n def p2p_port(n):\n-    return 11000 + n + os.getpid()%999\n+    assert(n <= MAX_NODES)\n+    return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n+\n def rpc_port(n):\n-    return 12000 + n + os.getpid()%999\n+    return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def check_json_precision():\n     \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n@@ -104,48 +121,57 @@ def hex_str_to_bytes(hex_str):\n def str_to_b64str(string):\n     return b64encode(string.encode('utf-8')).decode('ascii')\n \n-def sync_blocks(rpc_connections, wait=1):\n+def sync_blocks(rpc_connections, wait=1, timeout=60):\n     \"\"\"\n-    Wait until everybody has the same block count\n+    Wait until everybody has the same tip\n     \"\"\"\n-    while True:\n-        counts = [ x.getblockcount() for x in rpc_connections ]\n-        if counts == [ counts[0] ]*len(counts):\n-            break\n+    while timeout > 0:\n+        tips = [ x.getbestblockhash() for x in rpc_connections ]\n+        if tips == [ tips[0] ]*len(tips):\n+            return True\n         time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Block sync failed\")\n \n-def sync_mempools(rpc_connections, wait=1):\n+def sync_mempools(rpc_connections, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n-    while True:\n+    while timeout > 0:\n         pool = set(rpc_connections[0].getrawmempool())\n         num_match = 1\n         for i in range(1, len(rpc_connections)):\n             if set(rpc_connections[i].getrawmempool()) == pool:\n                 num_match = num_match+1\n         if num_match == len(rpc_connections):\n-            break\n+            return True\n         time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Mempool sync failed\")\n \n bitcoind_processes = {}\n \n def initialize_datadir(dirname, n):\n     datadir = os.path.join(dirname, \"node\"+str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n+    rpc_u, rpc_p = rpc_auth_pair(n)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w') as f:\n         f.write(\"regtest=1\\n\")\n-        f.write(\"rpcuser=rt\\n\")\n-        f.write(\"rpcpassword=rt\\n\")\n+        f.write(\"rpcuser=\" + rpc_u + \"\\n\")\n+        f.write(\"rpcpassword=\" + rpc_p + \"\\n\")\n         f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n         f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n \n+def rpc_auth_pair(n):\n+    return 'rpcuser\ud83d\udcbb' + str(n), 'rpcpass\ud83d\udd11' + str(n)\n+\n def rpc_url(i, rpchost=None):\n-    return \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n+    rpc_u, rpc_p = rpc_auth_pair(i)\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, rpchost or '127.0.0.1', rpc_port(i))\n \n def wait_for_bitcoind_start(process, url, i):\n     '''\n@@ -167,45 +193,52 @@ def wait_for_bitcoind_start(process, url, i):\n                 raise # unkown JSON RPC exception\n         time.sleep(0.25)\n \n-def initialize_chain(test_dir):\n+def initialize_chain(test_dir, num_nodes):\n     \"\"\"\n-    Create (or copy from cache) a 200-block-long chain and\n-    4 wallets.\n+    Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+    Afterward, create num_nodes copies from the cache\n     \"\"\"\n \n-    if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n-        or not os.path.isdir(os.path.join(\"cache\",\"node1\"))\n-        or not os.path.isdir(os.path.join(\"cache\",\"node2\"))\n-        or not os.path.isdir(os.path.join(\"cache\",\"node3\"))):\n+    assert num_nodes <= MAX_NODES\n+    create_cache = False\n+    for i in range(MAX_NODES):\n+        if not os.path.isdir(os.path.join('cache', 'node'+str(i))):\n+            create_cache = True\n+            break\n+\n+    if create_cache:\n \n         #find and delete old cache directories if any exist\n-        for i in range(4):\n+        for i in range(MAX_NODES):\n             if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))):\n                 shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n \n         # Create cache directories, run bitcoinds:\n-        for i in range(4):\n+        for i in range(MAX_NODES):\n             datadir=initialize_datadir(\"cache\", i)\n             args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, waiting for RPC to come up\"\n+                print(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n             wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: RPC succesfully started\"\n+                print(\"initialize_chain: RPC succesfully started\")\n \n         rpcs = []\n-        for i in range(4):\n+        for i in range(MAX_NODES):\n             try:\n                 rpcs.append(get_rpc_proxy(rpc_url(i), i))\n             except:\n                 sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n                 sys.exit(1)\n \n-        # Create a 200-block-long chain; each of the 4 nodes\n+        # Create a 200-block-long chain; each of the 4 first nodes\n         # gets 25 mature blocks and 25 immature.\n+        # Note: To preserve compatibility with older versions of\n+        # initialize_chain, only 4 nodes will generate coins.\n+        #\n         # blocks are created with timestamps 10 minutes apart\n         # starting from 2010 minutes in the past\n         enable_mocktime()\n@@ -223,13 +256,13 @@ def initialize_chain(test_dir):\n         stop_nodes(rpcs)\n         wait_bitcoinds()\n         disable_mocktime()\n-        for i in range(4):\n+        for i in range(MAX_NODES):\n             os.remove(log_filename(\"cache\", i, \"debug.log\"))\n             os.remove(log_filename(\"cache\", i, \"db.log\"))\n             os.remove(log_filename(\"cache\", i, \"peers.dat\"))\n             os.remove(log_filename(\"cache\", i, \"fee_estimates.dat\"))\n \n-    for i in range(4):\n+    for i in range(num_nodes):\n         from_dir = os.path.join(\"cache\", \"node\"+str(i))\n         to_dir = os.path.join(test_dir,  \"node\"+str(i))\n         shutil.copytree(from_dir, to_dir)\n@@ -275,11 +308,11 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, waiting for RPC to come up\"\n+        print(\"start_node: bitcoind started, waiting for RPC to come up\")\n     url = rpc_url(i, rpchost)\n     wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: RPC succesfully started\"\n+        print(\"start_node: RPC succesfully started\")\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:\n@@ -291,8 +324,8 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):\n     \"\"\"\n     Start multiple bitcoinds, return RPC connections to them\n     \"\"\"\n-    if extra_args is None: extra_args = [ None for i in range(num_nodes) ]\n-    if binary is None: binary = [ None for i in range(num_nodes) ]\n+    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n+    if binary is None: binary = [ None for _ in range(num_nodes) ]\n     rpcs = []\n     try:\n         for i in range(num_nodes):\n@@ -306,13 +339,19 @@ def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n \n def stop_node(node, i):\n-    node.stop()\n-    bitcoind_processes[i].wait()\n+    try:\n+        node.stop()\n+    except http.client.CannotSendRequest as e:\n+        print(\"WARN: Unable to stop node: \" + repr(e))\n+    bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n     del bitcoind_processes[i]\n \n def stop_nodes(nodes):\n     for node in nodes:\n-        node.stop()\n+        try:\n+            node.stop()\n+        except http.client.CannotSendRequest as e:\n+            print(\"WARN: Unable to stop node: \" + repr(e))\n     del nodes[:] # Emptying array closes connections as a side effect\n \n def set_node_times(nodes, t):\n@@ -322,7 +361,7 @@ def set_node_times(nodes, t):\n def wait_bitcoinds():\n     # Wait for all bitcoinds to cleanly exit\n     for bitcoind in bitcoind_processes.values():\n-        bitcoind.wait()\n+        bitcoind.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n     bitcoind_processes.clear()\n \n def connect_nodes(from_connection, node_num):\n@@ -443,6 +482,15 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n \n     return (txid, signresult[\"hex\"], fee)\n \n+def assert_fee_amount(fee, tx_size, fee_per_kB):\n+    \"\"\"Assert the fee was in range\"\"\"\n+    target_fee = tx_size * fee_per_kB / 1000\n+    if fee < target_fee:\n+        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+    # allow the wallet's estimation to be at most 2 bytes off\n+    if fee > (tx_size + 2) * fee_per_kB / 1000:\n+        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+\n def assert_equal(thing1, thing2):\n     if thing1 != thing2:\n         raise AssertionError(\"%s != %s\"%(str(thing1),str(thing2)))\n@@ -469,7 +517,7 @@ def assert_is_hex_string(string):\n             \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n \n def assert_is_hash_string(string, length=64):\n-    if not isinstance(string, basestring):\n+    if not isinstance(string, str):\n         raise AssertionError(\"Expected a string, got type %r\" % type(string))\n     elif length and len(string) != length:\n         raise AssertionError(\n@@ -478,6 +526,35 @@ def assert_is_hash_string(string, length=64):\n         raise AssertionError(\n             \"String %r contains invalid characters for a hash.\" % string)\n \n+def assert_array_result(object_array, to_match, expected, should_not_find = False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found\n+        in object_array\n+        \"\"\"\n+    if should_not_find == True:\n+        assert_equal(expected, { })\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        elif should_not_find == True:\n+            num_matched = num_matched+1\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0 and should_not_find != True:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+    if num_matched > 0 and should_not_find == True:\n+        raise AssertionError(\"Objects were found %s\"%(str(to_match)))\n+\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n@@ -491,7 +568,7 @@ def create_confirmed_utxos(fee, node, count):\n     addr2 = node.getnewaddress()\n     if iterations <= 0:\n         return utxos\n-    for i in xrange(iterations):\n+    for i in range(iterations):\n         t = utxos.pop()\n         inputs = []\n         inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n@@ -517,11 +594,11 @@ def gen_return_txouts():\n     # So we have big transactions (and therefore can't fit very many into each block)\n     # create one script_pubkey\n     script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-    for i in xrange (512):\n+    for i in range (512):\n         script_pubkey = script_pubkey + \"01\"\n     # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n     txouts = \"81\"\n-    for k in xrange(128):\n+    for k in range(128):\n         # add txout value\n         txouts = txouts + \"0000000000000000\"\n         # add length of script_pubkey\n@@ -543,7 +620,7 @@ def create_tx(node, coinbase, to_address, amount):\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []\n-    for i in xrange(len(utxos)):\n+    for i in range(len(utxos)):\n         t = utxos.pop()\n         inputs = []\n         inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})"
      },
      {
        "sha": "22f850ece64a2ce22112323e72cdaf63e5132c80",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,6 +12,11 @@\n \n class TxnMallTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "84944c3c1943aaf8c9b1c759eb6cacfdd5198019",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,6 +12,11 @@\n \n class TxnMallTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "5d96e7a6e5becb377d93f864eac1f37979250ef7",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 64,
        "deletions": 16,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,17 +11,13 @@ class WalletTest (BitcoinTestFramework):\n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n         fee = balance_with_fee - curr_balance\n-        target_fee = fee_per_byte * tx_size\n-        if fee < target_fee:\n-            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n-        # allow the node's estimation to be at most 2 bytes off\n-        if fee > fee_per_byte * (tx_size + 2):\n-            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n         return curr_balance\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n \n     def setup_network(self, split=False):\n         self.nodes = start_nodes(3, self.options.tmpdir)\n@@ -32,7 +28,13 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+\n+        # Check that there's no UTXO on none of the nodes\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n \n@@ -48,6 +50,11 @@ def run_test (self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n+        # Check that only first and second nodes have UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 1)\n+        assert_equal(len(self.nodes[1].listunspent()), 1)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n@@ -259,6 +266,32 @@ def run_test (self):\n         except JSONRPCException as e:\n             assert(\"not an integer\" in e.error['message'])\n \n+        # Import address and private key to check correct behavior of spendable unspents\n+        # 1. Send some coins to generate new UTXO\n+        address_to_import = self.nodes[2].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # 2. Import address from node2 to node1\n+        self.nodes[1].importaddress(address_to_import)\n+\n+        # 3. Validate that the imported address is watch-only on node1\n+        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+\n+        # 4. Check that the unspents after import are not spendable\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": False})\n+\n+        # 5. Import private key of the previously imported address on node1\n+        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+        self.nodes[1].importprivkey(priv_key)\n+\n+        # 6. Check that the unspents are now spendable on node1\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": True})\n \n         # Mine a block from node0 to an address from node1\n         cbAddr = self.nodes[1].getnewaddress()\n@@ -269,22 +302,37 @@ def run_test (self):\n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(cbTxId)\n \n-        #check if wallet or blochchain maintenance changes the balance\n+        # check if wallet or blockchain maintenance changes the balance\n         self.sync_all()\n         blocks = self.nodes[0].generate(2)\n         self.sync_all()\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n+        # Check modes:\n+        #   - True: unicode escaped as \\u....\n+        #   - False: unicode directly as UTF-8\n+        for mode in [True, False]:\n+            self.nodes[0].ensure_ascii = mode\n+            # unicode check: Basic Multilingual Plane, Supplementary Plane respectively\n+            for s in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n+                addr = self.nodes[0].getaccountaddress(s)\n+                label = self.nodes[0].getaccount(addr)\n+                assert_equal(label, s)\n+                assert(s in self.nodes[0].listaccounts().keys())\n+        self.nodes[0].ensure_ascii = True # restore to default\n+\n+        # maintenance tests\n         maintenance = [\n             '-rescan',\n             '-reindex',\n             '-zapwallettxes=1',\n             '-zapwallettxes=2',\n-            '-salvagewallet',\n+            # disabled until issue is fixed: https://github.com/bitcoin/bitcoin/issues/7463\n+            # '-salvagewallet',\n         ]\n         for m in maintenance:\n-            print \"check \" + m\n+            print(\"check \" + m)\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n@@ -301,4 +349,4 @@ def run_test (self):\n         assert_equal(len(self.nodes[0].listsinceblock(blocks[1])[\"transactions\"]), 0)\n \n if __name__ == '__main__':\n-    WalletTest ().main ()\n+    WalletTest().main()"
      },
      {
        "sha": "b991d5c7618621a28c60385787c1f26449680bc5",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -37,19 +37,20 @@\n from test_framework.util import *\n from random import randint\n import logging\n-logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.INFO)\n+logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO, stream=sys.stdout)\n \n class WalletBackupTest(BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        logging.info(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n \n     # This mirrors how the network was setup in the bash test\n     def setup_network(self, split=False):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n-        self.nodes = start_nodes(4, self.options.tmpdir, extra_args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "17ba53a844b4fa78a9072c20be882e95c8d3cc2c",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,20 +9,21 @@\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         self.is_network_split=False\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)"
      },
      {
        "sha": "3a116317fed969f0d948e664b94a1a80d826327e",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,19 +10,17 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import zmq\n-import binascii\n+import struct\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class ZMQTest (BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+\n     port = 28332\n \n     def setup_nodes(self):\n@@ -31,7 +29,7 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        return start_nodes(4, self.options.tmpdir, extra_args=[\n+        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],\n             [],\n@@ -44,14 +42,20 @@ def run_test(self):\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        print \"listen...\"\n+        print(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n+        nseq = msg[2]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n \n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n         assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n@@ -61,12 +65,16 @@ def run_test(self):\n         self.sync_all()\n \n         zmqHashes = []\n+        blockcount = 0\n         for x in range(0,n*2):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount+1)\n+                blockcount += 1\n \n         for x in range(0,n):\n             assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n@@ -82,6 +90,8 @@ def run_test(self):\n         hashZMQ = \"\"\n         if topic == b\"hashtx\":\n             hashZMQ = bytes_to_hex_str(body)\n+            msgSequence = struct.unpack('<I', msg[-1])[-1]\n+            assert_equal(msgSequence, blockcount+1)\n \n         assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n "
      },
      {
        "sha": "1ef77d706f7aa35316bf498326b6c9ac09d27bf4",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -15,7 +15,6 @@ fi\n \n DESC=\"\"\n SUFFIX=\"\"\n-LAST_COMMIT_DATE=\"\"\n if [ -e \"$(which git 2>/dev/null)\" -a \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null \n@@ -29,9 +28,6 @@ if [ -e \"$(which git 2>/dev/null)\" -a \"$(git rev-parse --is-inside-work-tree 2>/\n     # otherwise generate suffix from git, i.e. string like \"59887e8-dirty\"\n     SUFFIX=$(git rev-parse --short HEAD)\n     git diff-index --quiet HEAD -- || SUFFIX=\"$SUFFIX-dirty\"\n-\n-    # get a string like \"2012-04-10 16:27:19 +0200\"\n-    LAST_COMMIT_DATE=\"$(git log -n 1 --format=\"%ci\")\"\n fi\n \n if [ -n \"$DESC\" ]; then\n@@ -45,7 +41,4 @@ fi\n # only update build.h if necessary\n if [ \"$INFO\" != \"$NEWINFO\" ]; then\n     echo \"$NEWINFO\" >\"$FILE\"\n-    if [ -n \"$LAST_COMMIT_DATE\" ]; then\n-        echo \"#define BUILD_DATE \\\"$LAST_COMMIT_DATE\\\"\" >> \"$FILE\"\n-    fi\n fi"
      },
      {
        "sha": "2ba8bb9b3acb7bd8ee3eac34f073b2e738d9fed6",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -32,7 +32,7 @@ def parse_po(text):\n                 in_msgstr = False\n             # message start\n             in_msgid = True\n-            \n+\n             msgid = [line[6:]]\n         elif line.startswith('msgstr '):\n             in_msgid = False\n@@ -67,7 +67,7 @@ def parse_po(text):\n \n #include <QtGlobal>\n \n-// Automatically generated by extract_strings.py\n+// Automatically generated by extract_strings_qt.py\n #ifdef __GNUC__\n #define UNUSED __attribute__((unused))\n #else"
      },
      {
        "sha": "e3eaacdb4c983153611f428041217e18ed8707a1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 47,
        "deletions": 53,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -3,6 +3,7 @@ DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n+EXTRA_LIBRARIES =\n \n if EMBEDDED_UNIVALUE\n LIBUNIVALUE = univalue/libunivalue.la\n@@ -13,29 +14,13 @@ else\n LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n-if EMBEDDED_LEVELDB\n-LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n-LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv\n-LIBLEVELDB += $(builddir)/leveldb/libleveldb.a\n-LIBMEMENV  += $(builddir)/leveldb/libmemenv.a\n-\n-# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race\n-$(LIBLEVELDB): $(LIBMEMENV)\n-\n-$(LIBLEVELDB) $(LIBMEMENV):\n-\t@echo \"Building LevelDB ...\" && $(MAKE) -C $(@D) $(@F) CXX=\"$(CXX)\" \\\n-\t  CC=\"$(CC)\" PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(LEVELDB_TARGET_FLAGS) \\\n-          OPT=\"$(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) -D__STDC_LIMIT_MACROS\"\n-endif\n-\n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n-LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n@@ -44,32 +29,32 @@ LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n+if ENABLE_ZMQ\n+LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n+endif\n+if BUILD_BITCOIN_LIBS\n+LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n+endif\n+if ENABLE_WALLET\n+LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+endif\n+\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n-EXTRA_LIBRARIES = \\\n-  crypto/libbitcoin_crypto.a \\\n-  libbitcoin_util.a \\\n-  libbitcoin_common.a \\\n-  libbitcoin_consensus.a \\\n-  libbitcoin_server.a \\\n-  libbitcoin_cli.a\n-if ENABLE_WALLET\n-BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n-EXTRA_LIBRARIES += libbitcoin_wallet.a\n-endif\n-if ENABLE_ZMQ\n-EXTRA_LIBRARIES += libbitcoin_zmq.a\n-endif\n+EXTRA_LIBRARIES += \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_ZMQ)\n \n-if BUILD_BITCOIN_LIBS\n-lib_LTLIBRARIES = libbitcoinconsensus.la\n-LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n-else\n-LIBBITCOINCONSENSUS=\n-endif\n+lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n \n bin_PROGRAMS =\n TESTS =\n@@ -89,6 +74,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   base58.h \\\n   bloom.h \\\n+  blockencodings.h \\\n   chain.h \\\n   chainparams.h \\\n   chainparamsbase.h \\\n@@ -108,6 +94,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   httprpc.h \\\n   httpserver.h \\\n+  indirectmap.h \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n@@ -177,6 +164,7 @@ libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   bloom.cpp \\\n+  blockencodings.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   httprpc.cpp \\\n@@ -204,13 +192,12 @@ libbitcoin_server_a_SOURCES = \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  ui_interface.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_ZMQ\n-LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n-\n libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_zmq_a_SOURCES = \\\n@@ -238,6 +225,8 @@ libbitcoin_wallet_a_SOURCES = \\\n crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)\n crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n+  crypto/aes.cpp \\\n+  crypto/aes.h \\\n   crypto/common.h \\\n   crypto/hmac_sha256.cpp \\\n   crypto/hmac_sha256.h \\\n@@ -358,21 +347,15 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-if ENABLE_ZMQ\n-bitcoind_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n-endif\n-\n-if ENABLE_WALLET\n-bitcoind_LDADD += libbitcoin_wallet.a\n-endif\n-\n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -387,7 +370,8 @@ endif\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBUNIVALUE) \\\n-  $(LIBBITCOIN_UTIL)\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n@@ -430,8 +414,14 @@ libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n endif\n #\n \n-CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a\n-CLEANFILES += $(EXTRA_LIBRARIES)\n+CTAES_DIST =  crypto/ctaes/bench.c\n+CTAES_DIST += crypto/ctaes/ctaes.c\n+CTAES_DIST += crypto/ctaes/ctaes.h\n+CTAES_DIST += crypto/ctaes/README.md\n+CTAES_DIST += crypto/ctaes/test.c\n+\n+CLEANFILES = $(EXTRA_LIBRARIES)\n+\n CLEANFILES += *.gcda *.gcno\n CLEANFILES += compat/*.gcda compat/*.gcno\n CLEANFILES += consensus/*.gcda consensus/*.gcno\n@@ -447,14 +437,14 @@ CLEANFILES += zmq/*.gcda zmq/*.gcno\n \n DISTCLEANFILES = obj/build.h\n \n-EXTRA_DIST = leveldb\n+EXTRA_DIST = $(CTAES_DIST)\n \n clean-local:\n-\t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n \t-$(MAKE) -C univalue clean\n \t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n+\t-rm -rf test/__pycache__\n \n .rc.o:\n \t@test -f $(WINDRES)\n@@ -481,6 +471,10 @@ endif\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n \n+if EMBEDDED_LEVELDB\n+include Makefile.leveldb.include\n+endif\n+\n if ENABLE_TESTS\n include Makefile.test.include\n endif"
      },
      {
        "sha": "4067ceb3993e879849f2e2645690bc222c36e7ff",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -7,7 +7,10 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n-  bench/Examples.cpp\n+  bench/Examples.cpp \\\n+  bench/rollingbloom.cpp \\\n+  bench/crypto_hash.cpp \\\n+  bench/base58.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "4b3cd6364a29b31ad111868f0acd65ba10408e39",
        "filename": "src/Makefile.leveldb.include",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,134 @@\n+LIBLEVELDB_INT = leveldb/libleveldb.a\n+LIBMEMENV_INT  = leveldb/libmemenv.a\n+\n+EXTRA_LIBRARIES += $(LIBLEVELDB_INT)\n+EXTRA_LIBRARIES += $(LIBMEMENV_INT)\n+\n+LIBLEVELDB += $(LIBLEVELDB_INT)\n+LIBMEMENV += $(LIBMEMENV_INT)\n+\n+LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n+LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv\n+\n+LEVELDB_CPPFLAGS_INT =\n+LEVELDB_CPPFLAGS_INT += -I$(srcdir)/leveldb\n+LEVELDB_CPPFLAGS_INT += $(LEVELDB_TARGET_FLAGS)\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_ATOMIC_PRESENT\n+LEVELDB_CPPFLAGS_INT += -D__STDC_LIMIT_MACROS\n+\n+if TARGET_WINDOWS\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_WINDOWS -DWINVER=0x0500 -D__USE_MINGW_ANSI_STDIO=1\n+else\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_POSIX\n+endif\n+\n+leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)\n+leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+\n+leveldb_libleveldb_a_SOURCES=\n+leveldb_libleveldb_a_SOURCES += leveldb/port/atomic_pointer.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_example.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_posix.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/win/stdint.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_win.h\n+leveldb_libleveldb_a_SOURCES += leveldb/port/thread_annotations.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/db.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/options.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/comparator.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/filter_policy.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/slice.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/table_builder.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/env.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/c.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/iterator.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/cache.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/dumpfile.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/table.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/write_batch.h\n+leveldb_libleveldb_a_SOURCES += leveldb/include/leveldb/status.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_format.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/memtable.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_set.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/write_batch_internal.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/filename.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_edit.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/dbformat.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/builder.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_writer.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_iter.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/skiplist.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_impl.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/table_cache.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/snapshot.h\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_reader.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/filter_block.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block_builder.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/two_level_iterator.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/merger.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/format.h\n+leveldb_libleveldb_a_SOURCES += leveldb/table/iterator_wrapper.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/crc32c.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/arena.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/random.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/posix_logger.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/hash.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/histogram.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/coding.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/testutil.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/mutexlock.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/logging.h\n+leveldb_libleveldb_a_SOURCES += leveldb/util/testharness.h\n+\n+leveldb_libleveldb_a_SOURCES += leveldb/db/builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/c.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/dbformat.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_impl.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_iter.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/dumpfile.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/filename.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_reader.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_writer.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/memtable.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/repair.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/table_cache.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_edit.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_set.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/write_batch.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block_builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/filter_block.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/format.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/iterator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/merger.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/table_builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/table.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/two_level_iterator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/arena.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/bloom.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/cache.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/coding.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/comparator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/crc32c.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_posix.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_win.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/filter_policy.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/hash.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/histogram.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/logging.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/options.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/status.cc\n+\n+if TARGET_WINDOWS\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_win.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_win.cc\n+else\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_posix.cc\n+endif\n+\n+leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)\n+leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)\n+leveldb_libmemenv_a_SOURCES =  leveldb/helpers/memenv/memenv.cc\n+leveldb_libmemenv_a_SOURCES += leveldb/helpers/memenv/memenv.h"
      },
      {
        "sha": "dc775a3568d783c21f749149b070fb63f4a5fb93",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -3,6 +3,7 @@ EXTRA_LIBRARIES += qt/libbitcoinqt.a\n \n # bitcoin qt core #\n QT_TS = \\\n+  qt/locale/bitcoin_af.ts \\\n   qt/locale/bitcoin_af_ZA.ts \\\n   qt/locale/bitcoin_ar.ts \\\n   qt/locale/bitcoin_be_BY.ts \\\n@@ -22,7 +23,10 @@ QT_TS = \\\n   qt/locale/bitcoin_en_GB.ts \\\n   qt/locale/bitcoin_en.ts \\\n   qt/locale/bitcoin_eo.ts \\\n+  qt/locale/bitcoin_es_419.ts \\\n+  qt/locale/bitcoin_es_AR.ts \\\n   qt/locale/bitcoin_es_CL.ts \\\n+  qt/locale/bitcoin_es_CO.ts \\\n   qt/locale/bitcoin_es_DO.ts \\\n   qt/locale/bitcoin_es_ES.ts \\\n   qt/locale/bitcoin_es_MX.ts \\\n@@ -33,6 +37,7 @@ QT_TS = \\\n   qt/locale/bitcoin_eu_ES.ts \\\n   qt/locale/bitcoin_fa_IR.ts \\\n   qt/locale/bitcoin_fa.ts \\\n+  qt/locale/bitcoin_fil.ts \\\n   qt/locale/bitcoin_fi.ts \\\n   qt/locale/bitcoin_fr_CA.ts \\\n   qt/locale/bitcoin_fr_FR.ts \\\n@@ -43,6 +48,7 @@ QT_TS = \\\n   qt/locale/bitcoin_hr.ts \\\n   qt/locale/bitcoin_hu.ts \\\n   qt/locale/bitcoin_id_ID.ts \\\n+  qt/locale/bitcoin_it_IT.ts \\\n   qt/locale/bitcoin_it.ts \\\n   qt/locale/bitcoin_ja.ts \\\n   qt/locale/bitcoin_ka.ts \\\n@@ -62,22 +68,27 @@ QT_TS = \\\n   qt/locale/bitcoin_pt_BR.ts \\\n   qt/locale/bitcoin_pt_PT.ts \\\n   qt/locale/bitcoin_ro_RO.ts \\\n+  qt/locale/bitcoin_ro.ts \\\n   qt/locale/bitcoin_ru_RU.ts \\\n   qt/locale/bitcoin_ru.ts \\\n   qt/locale/bitcoin_sk.ts \\\n   qt/locale/bitcoin_sl_SI.ts \\\n   qt/locale/bitcoin_sq.ts \\\n+  qt/locale/bitcoin_sr@latin.ts \\\n   qt/locale/bitcoin_sr.ts \\\n   qt/locale/bitcoin_sv.ts \\\n+  qt/locale/bitcoin_ta.ts \\\n   qt/locale/bitcoin_th_TH.ts \\\n   qt/locale/bitcoin_tr_TR.ts \\\n   qt/locale/bitcoin_tr.ts \\\n   qt/locale/bitcoin_uk.ts \\\n   qt/locale/bitcoin_ur_PK.ts \\\n   qt/locale/bitcoin_uz@Cyrl.ts \\\n+  qt/locale/bitcoin_uz@Latn.ts \\\n   qt/locale/bitcoin_vi.ts \\\n   qt/locale/bitcoin_vi_VN.ts \\\n   qt/locale/bitcoin_zh_CN.ts \\\n+  qt/locale/bitcoin_zh_HK.ts \\\n   qt/locale/bitcoin_zh.ts \\\n   qt/locale/bitcoin_zh_TW.ts\n \n@@ -390,19 +401,20 @@ QT_QM=$(QT_TS:.ts=.qm)\n \n SECONDARY: $(QT_QM)\n \n-qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wallet_a_SOURCES)\n+$(srcdir)/qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wallet_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n-translate: qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n+translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\"\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts qt/locale/bitcoin_en.ts\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/bitcoin_en.ts\n \n $(QT_QRC_LOCALE_CPP): $(QT_QRC_LOCALE) $(QT_QM)\n \t@test -f $(RCC)\n-\t@test -f $(@D)/$(<F) || cp -f $< $(@D)\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin_locale $(@D)/$(<F) | \\\n+\t@cp -f $< $(@D)/temp_$(<F)\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin_locale $(@D)/temp_$(<F) | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n+\t@rm $(@D)/temp_$(<F)\n \n $(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES) $(PROTOBUF_H)\n \t@test -f $(RCC)\n@@ -424,11 +436,11 @@ ui_%.h: %.ui\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(UIC) -o $@ $< || (echo \"Error creating $@\"; false)\n \n %.moc: %.cpp\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n moc_%.cpp: %.h\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n %.qm: %.ts"
      },
      {
        "sha": "c8918eb53f82fe3c5da8f9d84de4acb174a6c195",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -17,7 +17,9 @@ EXTRA_DIST += \\\n \ttest/data/txcreate2.hex \\\n \ttest/data/txcreatedata1.hex \\\n \ttest/data/txcreatedata2.hex \\\n-\ttest/data/txcreatesign.hex\n+\ttest/data/txcreatesign.hex \\\n+\ttest/data/txcreatedata_seq0.hex \\\n+\ttest/data/txcreatedata_seq1.hex\n \n JSON_TEST_FILES = \\\n   test/data/script_tests.json \\\n@@ -43,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n+  test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\\n@@ -59,6 +62,7 @@ BITCOIN_TESTS =\\\n   test/merkle_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/multisig_tests.cpp \\\n+  test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n@@ -94,6 +98,7 @@ BITCOIN_TESTS += \\\n   wallet/test/wallet_test_fixture.h \\\n   wallet/test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n+  wallet/test/crypto_tests.cpp \\\n   wallet/test/rpc_wallet_tests.cpp\n endif\n \n@@ -121,6 +126,9 @@ CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_TEST)\n \n+# This file is problematic for out-of-tree builds if it exists.\n+DISTCLEANFILES += test/buildenv.pyc\n+\n bitcoin_test: $(TEST_BINARY)\n \n bitcoin_test_check: $(TEST_BINARY) FORCE"
      },
      {
        "sha": "cebb1c8e5e70803baa2a43ca2ef2c581b3c7db89",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -197,6 +197,9 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n void CAddrMan::Good_(const CService& addr, int64_t nTime)\n {\n     int nId;\n+\n+    nLastGood = nTime;\n+\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n     // if not found, bail out\n@@ -260,7 +263,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n             pinfo->nTime = std::max((int64_t)0, addr.nTime - nTimePenalty);\n \n         // add services\n-        pinfo->nServices |= addr.nServices;\n+        pinfo->nServices = ServiceFlags(pinfo->nServices | addr.nServices);\n \n         // do not update if no new information is present\n         if (!addr.nTime || (pinfo->nTime && addr.nTime <= pinfo->nTime))\n@@ -311,7 +314,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n+void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n {\n     CAddrInfo* pinfo = Find(addr);\n \n@@ -327,7 +330,10 @@ void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n \n     // update info\n     info.nLastTry = nTime;\n-    info.nAttempts++;\n+    if (fCountFailure && info.nLastCountAttempt < nLastGood) {\n+        info.nLastCountAttempt = nTime;\n+        info.nAttempts++;\n+    }\n }\n \n CAddrInfo CAddrMan::Select_(bool newOnly)\n@@ -496,11 +502,7 @@ void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n         info.nTime = nTime;\n }\n \n-int CAddrMan::RandomInt(int nMax){\n-    return GetRandInt(nMax);\n-}\n-\n-void CAddrMan::SetServices_(const CService& addr, uint64_t nServices)\n+void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n {\n     CAddrInfo* pinfo = Find(addr);\n \n@@ -517,3 +519,7 @@ void CAddrMan::SetServices_(const CService& addr, uint64_t nServices)\n     // update info\n     info.nServices = nServices;\n }\n+\n+int CAddrMan::RandomInt(int nMax){\n+    return GetRandInt(nMax);\n+}"
      },
      {
        "sha": "1caf5407587975733bc3c4984dcc60a1bd2d5c18",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -29,6 +29,9 @@ class CAddrInfo : public CAddress\n     //! last try whatsoever by us (memory only)\n     int64_t nLastTry;\n \n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt;\n+\n private:\n     //! where knowledge about this address first came from\n     CNetAddr source;\n@@ -66,6 +69,7 @@ class CAddrInfo : public CAddress\n     {\n         nLastSuccess = 0;\n         nLastTry = 0;\n+        nLastCountAttempt = 0;\n         nAttempts = 0;\n         nRefCount = 0;\n         fInTried = false;\n@@ -200,6 +204,9 @@ class CAddrMan\n     //! list of \"new\" buckets\n     int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n \n+    //! last time Good was called (memory only)\n+    int64_t nLastGood;\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -230,7 +237,7 @@ class CAddrMan\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, int64_t nTime);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n     CAddrInfo Select_(bool newOnly);\n@@ -250,7 +257,7 @@ class CAddrMan\n     void Connected_(const CService &addr, int64_t nTime);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, uint64_t nServices);\n+    void SetServices_(const CService &addr, ServiceFlags nServices);\n \n public:\n     /**\n@@ -353,6 +360,14 @@ class CAddrMan\n             nUBuckets ^= (1 << 30);\n         }\n \n+        if (nNew > ADDRMAN_NEW_BUCKET_COUNT * ADDRMAN_BUCKET_SIZE) {\n+            throw std::ios_base::failure(\"Corrupt CAddrMan serialization, nNew exceeds limit.\");\n+        }\n+\n+        if (nTried > ADDRMAN_TRIED_BUCKET_COUNT * ADDRMAN_BUCKET_SIZE) {\n+            throw std::ios_base::failure(\"Corrupt CAddrMan serialization, nTried exceeds limit.\");\n+        }\n+\n         // Deserialize entries from the new table.\n         for (int n = 0; n < nNew; n++) {\n             CAddrInfo &info = mapInfo[n];\n@@ -453,6 +468,7 @@ class CAddrMan\n         nIdCount = 0;\n         nTried = 0;\n         nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n     }\n \n     CAddrMan()\n@@ -527,12 +543,12 @@ class CAddrMan\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n     {\n         {\n             LOCK(cs);\n             Check();\n-            Attempt_(addr, nTime);\n+            Attempt_(addr, fCountFailure, nTime);\n             Check();\n         }\n     }\n@@ -576,7 +592,7 @@ class CAddrMan\n         }\n     }\n \n-    void SetServices(const CService &addr, uint64_t nServices)\n+    void SetServices(const CService &addr, ServiceFlags nServices)\n     {\n         LOCK(cs);\n         Check();"
      },
      {
        "sha": "d1d60a6f1dcf59b15ee100eab66884f7c8fc4d24",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -177,7 +177,7 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n         memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    memory_cleanse(&vchTemp[0], vchData.size());\n+    memory_cleanse(&vchTemp[0], vchTemp.size());\n     return true;\n }\n "
      },
      {
        "sha": "1279c3e7df5ddc26cd4aea7dbc38dc9d1b568050",
        "filename": "src/bench/base58.cpp",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2016 the Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"main.h\"\n+#include \"base58.h\"\n+\n+#include <vector>\n+#include <string>\n+\n+\n+static void Base58Encode(benchmark::State& state)\n+{\n+    unsigned char buff[32] = {\n+        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+        200, 24\n+    };\n+    unsigned char* b = buff;\n+    while (state.KeepRunning()) {\n+        EncodeBase58(b, b + 32);\n+    }\n+}\n+\n+\n+static void Base58CheckEncode(benchmark::State& state)\n+{\n+    unsigned char buff[32] = {\n+        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+        200, 24\n+    };\n+    unsigned char* b = buff;\n+    std::vector<unsigned char> vch;\n+    vch.assign(b, b + 32);\n+    while (state.KeepRunning()) {\n+        EncodeBase58Check(vch);\n+    }\n+}\n+\n+\n+static void Base58Decode(benchmark::State& state)\n+{\n+    const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n+    std::vector<unsigned char> vch;\n+    while (state.KeepRunning()) {\n+        DecodeBase58(addr, vch);\n+    }\n+}\n+\n+\n+BENCHMARK(Base58Encode);\n+BENCHMARK(Base58CheckEncode);\n+BENCHMARK(Base58Decode);"
      },
      {
        "sha": "227546a7a78a3a8d5c78f98659b079ab7f273564",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bench.h\"\n \n #include <iostream>\n+#include <iomanip>\n #include <sys/time.h>\n \n using namespace benchmark;\n@@ -25,7 +26,7 @@ BenchRunner::BenchRunner(std::string name, BenchFunction func)\n void\n BenchRunner::RunAll(double elapsedTimeForOne)\n {\n-    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n \n     for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n          it != benchmarks.end(); ++it) {\n@@ -38,22 +39,34 @@ BenchRunner::RunAll(double elapsedTimeForOne)\n \n bool State::KeepRunning()\n {\n+    if (count & countMask) {\n+      ++count;\n+      return true;\n+    }\n     double now;\n     if (count == 0) {\n-        beginTime = now = gettimedouble();\n+        lastTime = beginTime = now = gettimedouble();\n     }\n     else {\n-        // timeCheckCount is used to avoid calling gettime most of the time,\n-        // so benchmarks that run very quickly get consistent results.\n-        if ((count+1)%timeCheckCount != 0) {\n-            ++count;\n-            return true; // keep going\n-        }\n         now = gettimedouble();\n-        double elapsedOne = (now - lastTime)/timeCheckCount;\n+        double elapsed = now - lastTime;\n+        double elapsedOne = elapsed * countMaskInv;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n-        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n+        if (elapsed*128 < maxElapsed) {\n+          // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n+          // The restart avoids including the overhead of this code in the measurement.\n+          countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n+          countMaskInv = 1./(countMask+1);\n+          count = 0;\n+          minTime = std::numeric_limits<double>::max();\n+          maxTime = std::numeric_limits<double>::min();\n+          return true;\n+        }\n+        if (elapsed*16 < maxElapsed) {\n+          countMask = ((countMask<<1)|1) & ((1LL<<60)-1);\n+          countMaskInv = 1./(countMask+1);\n+        }\n     }\n     lastTime = now;\n     ++count;\n@@ -64,7 +77,7 @@ bool State::KeepRunning()\n \n     // Output results\n     double average = (now-beginTime)/count;\n-    std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n \n     return false;\n }"
      },
      {
        "sha": "f13b145aaf0c78788c311e6dff1a034a95ace45e",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -40,14 +40,15 @@ namespace benchmark {\n         std::string name;\n         double maxElapsed;\n         double beginTime;\n-        double lastTime, minTime, maxTime;\n+        double lastTime, minTime, maxTime, countMaskInv;\n         int64_t count;\n-        int64_t timeCheckCount;\n+        int64_t countMask;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n-            timeCheckCount = 1;\n+            countMask = 1;\n+            countMaskInv = 1./(countMask + 1);\n         }\n         bool KeepRunning();\n     };"
      },
      {
        "sha": "168006154f8fe883bc3c73f2580de27bd9297f65",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include \"bench.h\"\n+#include \"bloom.h\"\n+#include \"hash.h\"\n+#include \"uint256.h\"\n+#include \"utiltime.h\"\n+#include \"crypto/ripemd160.h\"\n+#include \"crypto/sha1.h\"\n+#include \"crypto/sha256.h\"\n+#include \"crypto/sha512.h\"\n+\n+/* Number of bytes to hash per iteration */\n+static const uint64_t BUFFER_SIZE = 1000*1000;\n+\n+static void RIPEMD160(benchmark::State& state)\n+{\n+    uint8_t hash[CRIPEMD160::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CRIPEMD160().Write(begin_ptr(in), in.size()).Finalize(hash);\n+}\n+\n+static void SHA1(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA1::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA1().Write(begin_ptr(in), in.size()).Finalize(hash);\n+}\n+\n+static void SHA256(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA256().Write(begin_ptr(in), in.size()).Finalize(hash);\n+}\n+\n+static void SHA256_32b(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(32,0);\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000000; i++) {\n+            CSHA256().Write(begin_ptr(in), in.size()).Finalize(&in[0]);\n+        }\n+    }\n+}\n+\n+static void SHA512(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA512::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA512().Write(begin_ptr(in), in.size()).Finalize(hash);\n+}\n+\n+static void SipHash_32b(benchmark::State& state)\n+{\n+    uint256 x;\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000000; i++) {\n+            *((uint64_t*)x.begin()) = SipHashUint256(0, i, x);\n+        }\n+    }\n+}\n+\n+BENCHMARK(RIPEMD160);\n+BENCHMARK(SHA1);\n+BENCHMARK(SHA256);\n+BENCHMARK(SHA512);\n+\n+BENCHMARK(SHA256_32b);\n+BENCHMARK(SipHash_32b);"
      },
      {
        "sha": "73c02cf7189eb1b0514b1bcf8e4cdd61a09e3bd5",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include \"bench.h\"\n+#include \"bloom.h\"\n+#include \"utiltime.h\"\n+\n+static void RollingBloom(benchmark::State& state)\n+{\n+    CRollingBloomFilter filter(120000, 0.000001);\n+    std::vector<unsigned char> data(32);\n+    uint32_t count = 0;\n+    uint32_t nEntriesPerGeneration = (120000 + 1) / 2;\n+    uint32_t countnow = 0;\n+    uint64_t match = 0;\n+    while (state.KeepRunning()) {\n+        count++;\n+        data[0] = count;\n+        data[1] = count >> 8;\n+        data[2] = count >> 16;\n+        data[3] = count >> 24;\n+        if (countnow == nEntriesPerGeneration) {\n+            int64_t b = GetTimeMicros();\n+            filter.insert(data);\n+            int64_t e = GetTimeMicros();\n+            std::cout << \"RollingBloom-refresh,1,\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \"\\n\";\n+            countnow = 0;\n+        } else {\n+            filter.insert(data);\n+        }\n+        countnow++;\n+        data[0] = count >> 24;\n+        data[1] = count >> 16;\n+        data[2] = count >> 8;\n+        data[3] = count;\n+        match += filter.contains(data);\n+    }\n+}\n+\n+BENCHMARK(RollingBloom);"
      },
      {
        "sha": "a04101d3ed8475ca1b1f62125ce99193ae9f9793",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -314,7 +314,7 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n         fprintf(stderr, \"Error: Initializing networking failed\\n\");\n-        exit(1);\n+        return EXIT_FAILURE;\n     }\n \n     try {"
      },
      {
        "sha": "8e8ac47455cbe8211f2bf5bffa7de979c1b0264f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -71,7 +71,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage = HelpMessageGroup(_(\"Commands:\"));\n         strUsage += HelpMessageOpt(\"delin=N\", _(\"Delete input N from TX\"));\n         strUsage += HelpMessageOpt(\"delout=N\", _(\"Delete output N from TX\"));\n-        strUsage += HelpMessageOpt(\"in=TXID:VOUT\", _(\"Add input to TX\"));\n+        strUsage += HelpMessageOpt(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"));\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n@@ -181,15 +181,15 @@ static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n \n static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n {\n+    std::vector<std::string> vStrInputParts;\n+    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+\n     // separate TXID:VOUT in string\n-    size_t pos = strInput.find(':');\n-    if ((pos == string::npos) ||\n-        (pos == 0) ||\n-        (pos == (strInput.size() - 1)))\n+    if (vStrInputParts.size()<2)\n         throw runtime_error(\"TX input missing separator\");\n \n     // extract and validate TXID\n-    string strTxid = strInput.substr(0, pos);\n+    string strTxid = vStrInputParts[0];\n     if ((strTxid.size() != 64) || !IsHex(strTxid))\n         throw runtime_error(\"invalid TX input txid\");\n     uint256 txid(uint256S(strTxid));\n@@ -198,13 +198,18 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n \n     // extract and validate vout\n-    string strVout = strInput.substr(pos + 1, string::npos);\n+    string strVout = vStrInputParts[1];\n     int vout = atoi(strVout);\n     if ((vout < 0) || (vout > (int)maxVout))\n         throw runtime_error(\"invalid TX input vout\");\n \n+    // extract the optional sequence number\n+    uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max();\n+    if (vStrInputParts.size() > 2)\n+        nSequenceIn = std::stoul(vStrInputParts[2]);\n+\n     // append to transaction input list\n-    CTxIn txin(txid, vout);\n+    CTxIn txin(txid, vout, CScript(), nSequenceIn);\n     tx.vin.push_back(txin);\n }\n "
      },
      {
        "sha": "5c4c3bd27487cceb502dbe4d05363a24cce5ab65",
        "filename": "src/blockencodings.cpp",
        "status": "added",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockencodings.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n+#include \"chainparams.h\"\n+#include \"hash.h\"\n+#include \"random.h\"\n+#include \"streams.h\"\n+#include \"txmempool.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+#include <unordered_map>\n+\n+#define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n+\n+CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block) :\n+        nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n+        shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n+    FillShortTxIDSelector();\n+    //TODO: Use our mempool prior to block acceptance to predictively fill more than just the coinbase\n+    prefilledtxn[0] = {0, block.vtx[0]};\n+    for (size_t i = 1; i < block.vtx.size(); i++) {\n+        const CTransaction& tx = block.vtx[i];\n+        shorttxids[i - 1] = GetShortID(tx.GetHash());\n+    }\n+}\n+\n+void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << header << nonce;\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*stream.begin()), stream.end() - stream.begin());\n+    uint256 shorttxidhash;\n+    hasher.Finalize(shorttxidhash.begin());\n+    shorttxidk0 = shorttxidhash.GetUint64(0);\n+    shorttxidk1 = shorttxidhash.GetUint64(1);\n+}\n+\n+uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n+    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids calculation assumes 6-byte shorttxids\");\n+    return SipHashUint256(shorttxidk0, shorttxidk1, txhash) & 0xffffffffffffL;\n+}\n+\n+\n+\n+ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock) {\n+    if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n+        return READ_STATUS_INVALID;\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+        return READ_STATUS_INVALID;\n+\n+    assert(header.IsNull() && txn_available.empty());\n+    header = cmpctblock.header;\n+    txn_available.resize(cmpctblock.BlockTxCount());\n+\n+    int32_t lastprefilledindex = -1;\n+    for (size_t i = 0; i < cmpctblock.prefilledtxn.size(); i++) {\n+        if (cmpctblock.prefilledtxn[i].tx.IsNull())\n+            return READ_STATUS_INVALID;\n+\n+        lastprefilledindex += cmpctblock.prefilledtxn[i].index + 1; //index is a uint16_t, so cant overflow here\n+        if (lastprefilledindex > std::numeric_limits<uint16_t>::max())\n+            return READ_STATUS_INVALID;\n+        if ((uint32_t)lastprefilledindex > cmpctblock.shorttxids.size() + i) {\n+            // If we are inserting a tx at an index greater than our full list of shorttxids\n+            // plus the number of prefilled txn we've inserted, then we have txn for which we\n+            // have neither a prefilled txn or a shorttxid!\n+            return READ_STATUS_INVALID;\n+        }\n+        txn_available[lastprefilledindex] = std::make_shared<CTransaction>(cmpctblock.prefilledtxn[i].tx);\n+    }\n+    prefilled_count = cmpctblock.prefilledtxn.size();\n+\n+    // Calculate map of txids -> positions and check mempool to see what we have (or dont)\n+    // Because well-formed cmpctblock messages will have a (relatively) uniform distribution\n+    // of short IDs, any highly-uneven distribution of elements can be safely treated as a\n+    // READ_STATUS_FAILED.\n+    std::unordered_map<uint64_t, uint16_t> shorttxids(cmpctblock.shorttxids.size());\n+    uint16_t index_offset = 0;\n+    for (size_t i = 0; i < cmpctblock.shorttxids.size(); i++) {\n+        while (txn_available[i + index_offset])\n+            index_offset++;\n+        shorttxids[cmpctblock.shorttxids[i]] = i + index_offset;\n+        // To determine the chance that the number of entries in a bucket exceeds N,\n+        // we use the fact that the number of elements in a single bucket is\n+        // binomially distributed (with n = the number of shorttxids S, and p =\n+        // 1 / the number of buckets), that in the worst case the number of buckets is\n+        // equal to S (due to std::unordered_map having a default load factor of 1.0),\n+        // and that the chance for any bucket to exceed N elements is at most\n+        // buckets * (the chance that any given bucket is above N elements).\n+        // Thus: P(max_elements_per_bucket > N) <= S * (1 - cdf(binomial(n=S,p=1/S), N)).\n+        // If we assume blocks of up to 16000, allowing 12 elements per bucket should\n+        // only fail once per ~1 million block transfers (per peer and connection).\n+        if (shorttxids.bucket_size(shorttxids.bucket(cmpctblock.shorttxids[i])) > 12)\n+            return READ_STATUS_FAILED;\n+    }\n+    // TODO: in the shortid-collision case, we should instead request both transactions\n+    // which collided. Falling back to full-block-request here is overkill.\n+    if (shorttxids.size() != cmpctblock.shorttxids.size())\n+        return READ_STATUS_FAILED; // Short ID collision\n+\n+    std::vector<bool> have_txn(txn_available.size());\n+    LOCK(pool->cs);\n+    const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n+    for (size_t i = 0; i < vTxHashes.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n+        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        if (idit != shorttxids.end()) {\n+            if (!have_txn[idit->second]) {\n+                txn_available[idit->second] = vTxHashes[i].second->GetSharedTx();\n+                have_txn[idit->second]  = true;\n+                mempool_count++;\n+            } else {\n+                // If we find two mempool txn that match the short id, just request it.\n+                // This should be rare enough that the extra bandwidth doesn't matter,\n+                // but eating a round-trip due to FillBlock failure would be annoying\n+                if (txn_available[idit->second]) {\n+                    txn_available[idit->second].reset();\n+                    mempool_count--;\n+                }\n+            }\n+        }\n+        // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n+        // the performance win of an early exit here is too good to pass up and worth\n+        // the extra risk.\n+        if (mempool_count == shorttxids.size())\n+            break;\n+    }\n+\n+    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), cmpctblock.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+\n+    return READ_STATUS_OK;\n+}\n+\n+bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {\n+    assert(!header.IsNull());\n+    assert(index < txn_available.size());\n+    return txn_available[index] ? true : false;\n+}\n+\n+ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransaction>& vtx_missing) const {\n+    assert(!header.IsNull());\n+    block = header;\n+    block.vtx.resize(txn_available.size());\n+\n+    size_t tx_missing_offset = 0;\n+    for (size_t i = 0; i < txn_available.size(); i++) {\n+        if (!txn_available[i]) {\n+            if (vtx_missing.size() <= tx_missing_offset)\n+                return READ_STATUS_INVALID;\n+            block.vtx[i] = vtx_missing[tx_missing_offset++];\n+        } else\n+            block.vtx[i] = *txn_available[i];\n+    }\n+    if (vtx_missing.size() != tx_missing_offset)\n+        return READ_STATUS_INVALID;\n+\n+    CValidationState state;\n+    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+        // TODO: We really want to just check merkle tree manually here,\n+        // but that is expensive, and CheckBlock caches a block's\n+        // \"checked-status\" (in the CBlock?). CBlock should be able to\n+        // check its own merkle root and cache that check.\n+        if (state.CorruptionPossible())\n+            return READ_STATUS_FAILED; // Possible Short ID collision\n+        return READ_STATUS_INVALID;\n+    }\n+\n+    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", header.GetHash().ToString(), prefilled_count, mempool_count, vtx_missing.size());\n+    if (vtx_missing.size() < 5) {\n+        for(const CTransaction& tx : vtx_missing)\n+            LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", header.GetHash().ToString(), tx.GetHash().ToString());\n+    }\n+\n+    return READ_STATUS_OK;\n+}"
      },
      {
        "sha": "b980e9e28660fb1d5a4bae68dfc04761db8af0a0",
        "filename": "src/blockencodings.h",
        "status": "added",
        "additions": 206,
        "deletions": 0,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCK_ENCODINGS_H\n+#define BITCOIN_BLOCK_ENCODINGS_H\n+\n+#include \"primitives/block.h\"\n+\n+#include <memory>\n+\n+class CTxMemPool;\n+\n+// Dumb helper to handle CTransaction compression at serialize-time\n+struct TransactionCompressor {\n+private:\n+    CTransaction& tx;\n+public:\n+    TransactionCompressor(CTransaction& txIn) : tx(txIn) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(tx); //TODO: Compress tx encoding\n+    }\n+};\n+\n+class BlockTransactionsRequest {\n+public:\n+    // A BlockTransactionsRequest message\n+    uint256 blockhash;\n+    std::vector<uint16_t> indexes;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(blockhash);\n+        uint64_t indexes_size = (uint64_t)indexes.size();\n+        READWRITE(COMPACTSIZE(indexes_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (indexes.size() < indexes_size) {\n+                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n+                for (; i < indexes.size(); i++) {\n+                    uint64_t index = 0;\n+                    READWRITE(COMPACTSIZE(index));\n+                    if (index > std::numeric_limits<uint16_t>::max())\n+                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n+                    indexes[i] = index;\n+                }\n+            }\n+\n+            uint16_t offset = 0;\n+            for (size_t i = 0; i < indexes.size(); i++) {\n+                if (uint64_t(indexes[i]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n+                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n+                indexes[i] = indexes[i] + offset;\n+                offset = indexes[i] + 1;\n+            }\n+        } else {\n+            for (size_t i = 0; i < indexes.size(); i++) {\n+                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n+                READWRITE(COMPACTSIZE(index));\n+            }\n+        }\n+    }\n+};\n+\n+class BlockTransactions {\n+public:\n+    // A BlockTransactions message\n+    uint256 blockhash;\n+    std::vector<CTransaction> txn;\n+\n+    BlockTransactions() {}\n+    BlockTransactions(const BlockTransactionsRequest& req) :\n+        blockhash(req.blockhash), txn(req.indexes.size()) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(blockhash);\n+        uint64_t txn_size = (uint64_t)txn.size();\n+        READWRITE(COMPACTSIZE(txn_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (txn.size() < txn_size) {\n+                txn.resize(std::min((uint64_t)(1000 + txn.size()), txn_size));\n+                for (; i < txn.size(); i++)\n+                    READWRITE(REF(TransactionCompressor(txn[i])));\n+            }\n+        } else {\n+            for (size_t i = 0; i < txn.size(); i++)\n+                READWRITE(REF(TransactionCompressor(txn[i])));\n+        }\n+    }\n+};\n+\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownlaodedBlock\n+struct PrefilledTransaction {\n+    // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n+    // as a proper transaction-in-block-index in PartiallyDownloadedBlock\n+    uint16_t index;\n+    CTransaction tx;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        uint64_t idx = index;\n+        READWRITE(COMPACTSIZE(idx));\n+        if (idx > std::numeric_limits<uint16_t>::max())\n+            throw std::ios_base::failure(\"index overflowed 16-bits\");\n+        index = idx;\n+        READWRITE(REF(TransactionCompressor(tx)));\n+    }\n+};\n+\n+typedef enum ReadStatus_t\n+{\n+    READ_STATUS_OK,\n+    READ_STATUS_INVALID, // Invalid object, peer is sending bogus crap\n+    READ_STATUS_FAILED, // Failed to process object\n+} ReadStatus;\n+\n+class CBlockHeaderAndShortTxIDs {\n+private:\n+    mutable uint64_t shorttxidk0, shorttxidk1;\n+    uint64_t nonce;\n+\n+    void FillShortTxIDSelector() const;\n+\n+    friend class PartiallyDownloadedBlock;\n+\n+    static const int SHORTTXIDS_LENGTH = 6;\n+protected:\n+    std::vector<uint64_t> shorttxids;\n+    std::vector<PrefilledTransaction> prefilledtxn;\n+\n+public:\n+    CBlockHeader header;\n+\n+    // Dummy for deserialization\n+    CBlockHeaderAndShortTxIDs() {}\n+\n+    CBlockHeaderAndShortTxIDs(const CBlock& block);\n+\n+    uint64_t GetShortID(const uint256& txhash) const;\n+\n+    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(header);\n+        READWRITE(nonce);\n+\n+        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n+        READWRITE(COMPACTSIZE(shorttxids_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (shorttxids.size() < shorttxids_size) {\n+                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n+                for (; i < shorttxids.size(); i++) {\n+                    uint32_t lsb = 0; uint16_t msb = 0;\n+                    READWRITE(lsb);\n+                    READWRITE(msb);\n+                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n+                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+                }\n+            }\n+        } else {\n+            for (size_t i = 0; i < shorttxids.size(); i++) {\n+                uint32_t lsb = shorttxids[i] & 0xffffffff;\n+                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n+                READWRITE(lsb);\n+                READWRITE(msb);\n+            }\n+        }\n+\n+        READWRITE(prefilledtxn);\n+\n+        if (ser_action.ForRead())\n+            FillShortTxIDSelector();\n+    }\n+};\n+\n+class PartiallyDownloadedBlock {\n+protected:\n+    std::vector<std::shared_ptr<const CTransaction> > txn_available;\n+    size_t prefilled_count = 0, mempool_count = 0;\n+    CTxMemPool* pool;\n+public:\n+    CBlockHeader header;\n+    PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n+\n+    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock);\n+    bool IsTxAvailable(size_t index) const;\n+    ReadStatus FillBlock(CBlock& block, const std::vector<CTransaction>& vtx_missing) const;\n+};\n+\n+#endif"
      },
      {
        "sha": "fd328e8e96e5376ce4f0bec0664bca0ecebbb95f",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -234,14 +234,18 @@ CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate)\n      */\n     uint32_t nFilterBits = (uint32_t)ceil(-1.0 * nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs)));\n     data.clear();\n-    /* We store up to 16 'bits' per data element. */\n-    data.resize((nFilterBits + 15) / 16);\n+    /* For each data element we need to store 2 bits. If both bits are 0, the\n+     * bit is treated as unset. If the bits are (01), (10), or (11), the bit is\n+     * treated as set in generation 1, 2, or 3 respectively.\n+     * These bits are stored in separate integers: position P corresponds to bit\n+     * (P & 63) of the integers data[(P >> 6) * 2] and data[(P >> 6) * 2 + 1]. */\n+    data.resize(((nFilterBits + 63) / 64) << 1);\n     reset();\n }\n \n /* Similar to CBloomFilter::Hash */\n-inline unsigned int CRollingBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const {\n-    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (data.size() * 16);\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -252,18 +256,25 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n         if (nGeneration == 4) {\n             nGeneration = 1;\n         }\n+        uint64_t nGenerationMask1 = -(uint64_t)(nGeneration & 1);\n+        uint64_t nGenerationMask2 = -(uint64_t)(nGeneration >> 1);\n         /* Wipe old entries that used this generation number. */\n-        for (uint32_t p = 0; p < data.size() * 16; p++) {\n-            if (get(p) == nGeneration) {\n-                put(p, 0);\n-            }\n+        for (uint32_t p = 0; p < data.size(); p += 2) {\n+            uint64_t p1 = data[p], p2 = data[p + 1];\n+            uint64_t mask = (p1 ^ nGenerationMask1) | (p2 ^ nGenerationMask2);\n+            data[p] = p1 & mask;\n+            data[p + 1] = p2 & mask;\n         }\n     }\n     nEntriesThisGeneration++;\n \n     for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = Hash(n, vKey);\n-        put(h, nGeneration);\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* The lowest bit of pos is ignored, and set to zero for the first bit, and to one for the second. */\n+        data[pos & ~1] = (data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration & 1)) << bit;\n+        data[pos | 1] = (data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration >> 1)) << bit;\n     }\n }\n \n@@ -276,8 +287,11 @@ void CRollingBloomFilter::insert(const uint256& hash)\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = Hash(n, vKey);\n-        if (get(h) == 0) {\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* If the relevant bit is not set in either data[pos & ~1] or data[pos | 1], the filter does not contain vKey */\n+        if (!(((data[pos & ~1] | data[pos | 1]) >> bit) & 1)) {\n             return false;\n         }\n     }\n@@ -295,7 +309,7 @@ void CRollingBloomFilter::reset()\n     nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n     nEntriesThisGeneration = 0;\n     nGeneration = 1;\n-    for (std::vector<uint32_t>::iterator it = data.begin(); it != data.end(); it++) {\n+    for (std::vector<uint64_t>::iterator it = data.begin(); it != data.end(); it++) {\n         *it = 0;\n     }\n }"
      },
      {
        "sha": "ad6de625d8f8aa0653dc1cceb27d327ab20d8900",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -135,20 +135,9 @@ class CRollingBloomFilter\n     int nEntriesPerGeneration;\n     int nEntriesThisGeneration;\n     int nGeneration;\n-    std::vector<uint32_t> data;\n+    std::vector<uint64_t> data;\n     unsigned int nTweak;\n     int nHashFuncs;\n-\n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n-\n-    inline int get(uint32_t position) const {\n-        return (data[(position >> 4) % data.size()] >> (2 * (position & 0xF))) & 0x3;\n-    }\n-\n-    inline void put(uint32_t position, uint32_t val) {\n-        uint32_t& cell = data[(position >> 4) % data.size()];\n-        cell = (cell & ~(((uint32_t)3) << (2 * (position & 0xF)))) | (val << (2 * (position & 0xF)));\n-    }\n };\n \n #endif // BITCOIN_BLOOM_H"
      },
      {
        "sha": "77e924e7030436168ac5a19fa8643bd4267b994d",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -93,6 +93,7 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n             pindexWalk = pindexWalk->pskip;\n             heightWalk = heightSkip;\n         } else {\n+            assert(pindexWalk->pprev);\n             pindexWalk = pindexWalk->pprev;\n             heightWalk--;\n         }"
      },
      {
        "sha": "76a774c1238f17d9aecb0a829c2bd32628b00a02",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -14,6 +14,60 @@\n \n #include <vector>\n \n+class CBlockFileInfo\n+{\n+public:\n+    unsigned int nBlocks;      //!< number of blocks stored in file\n+    unsigned int nSize;        //!< number of used bytes of block file\n+    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n+    unsigned int nHeightFirst; //!< lowest height of block in file\n+    unsigned int nHeightLast;  //!< highest height of block in file\n+    uint64_t nTimeFirst;       //!< earliest time of block in file\n+    uint64_t nTimeLast;        //!< latest time of block in file\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(VARINT(nBlocks));\n+        READWRITE(VARINT(nSize));\n+        READWRITE(VARINT(nUndoSize));\n+        READWRITE(VARINT(nHeightFirst));\n+        READWRITE(VARINT(nHeightLast));\n+        READWRITE(VARINT(nTimeFirst));\n+        READWRITE(VARINT(nTimeLast));\n+    }\n+\n+     void SetNull() {\n+         nBlocks = 0;\n+         nSize = 0;\n+         nUndoSize = 0;\n+         nHeightFirst = 0;\n+         nHeightLast = 0;\n+         nTimeFirst = 0;\n+         nTimeLast = 0;\n+     }\n+\n+     CBlockFileInfo() {\n+         SetNull();\n+     }\n+\n+     std::string ToString() const;\n+\n+     /** update statistics (does not update nSize) */\n+     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n+         if (nBlocks==0 || nHeightFirst > nHeightIn)\n+             nHeightFirst = nHeightIn;\n+         if (nBlocks==0 || nTimeFirst > nTimeIn)\n+             nTimeFirst = nTimeIn;\n+         nBlocks++;\n+         if (nHeightIn > nHeightLast)\n+             nHeightLast = nHeightIn;\n+         if (nTimeIn > nTimeLast)\n+             nTimeLast = nTimeIn;\n+     }\n+};\n+\n struct CDiskBlockPos\n {\n     int nFile;\n@@ -54,7 +108,7 @@ struct CDiskBlockPos\n \n };\n \n-enum BlockStatus {\n+enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n "
      },
      {
        "sha": "69d4a9ecbeb6eb3a6144f6a16fd3d5ef29e6e23d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -207,6 +207,8 @@ class CTestNetParams : public CChainParams {\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n+        // nodes with support for servicebits filtering should be at the top\n+        vSeeds.push_back(CDNSSeedData(\"testnetbitcoin.jonasschnelli.ch\", \"testnet-seed.bitcoin.jonasschnelli.ch\", true));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));"
      },
      {
        "sha": "638893e9ad9b4ab46d263f5d64dea4bfa4bbc22a",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -15,7 +15,8 @@\n \n struct CDNSSeedData {\n     std::string name, host;\n-    CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n+    bool supportsServiceBitsFiltering;\n+    CDNSSeedData(const std::string &strName, const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : name(strName), host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {"
      },
      {
        "sha": "bfe9e16f80ee79233a28d4d0035846c65a60c527",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -67,16 +67,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n #endif\n #endif\n \n-#ifndef BUILD_DATE\n-#ifdef GIT_COMMIT_DATE\n-#define BUILD_DATE GIT_COMMIT_DATE\n-#else\n-#define BUILD_DATE __DATE__ \", \" __TIME__\n-#endif\n-#endif\n-\n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n-const std::string CLIENT_DATE(BUILD_DATE);\n \n static std::string FormatVersion(int nVersion)\n {"
      },
      {
        "sha": "47263d5344f3c5844be628a9ed3bf5b8f2ccf52d",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -59,7 +59,6 @@ static const int CLIENT_VERSION =\n \n extern const std::string CLIENT_NAME;\n extern const std::string CLIENT_BUILD;\n-extern const std::string CLIENT_DATE;\n \n \n std::string FormatFullVersion();"
      },
      {
        "sha": "e33adc4d2b00c480555edac9d590167e2ef2f075",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -18,6 +18,10 @@ class CCoinControl\n     bool fAllowWatchOnly;\n     //! Minimum absolute fee (not per kilobyte)\n     CAmount nMinimumTotalFee;\n+    //! Override estimated feerate\n+    bool fOverrideFeeRate;\n+    //! Feerate to use if overrideFeeRate is true\n+    CFeeRate nFeeRate;\n \n     CCoinControl()\n     {\n@@ -31,6 +35,8 @@ class CCoinControl\n         fAllowWatchOnly = false;\n         setSelected.clear();\n         nMinimumTotalFee = 0;\n+        nFeeRate = CFeeRate(0);\n+        fOverrideFeeRate = false;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "39db7dedfbbe1b1db28fb74b85c2499be9e10cca",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -56,7 +56,7 @@ void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n \n-CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n+SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n "
      },
      {
        "sha": "033651a435c04c839bf3b4e3558471fa46ae7a3d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"compressor.h\"\n #include \"core_memusage.h\"\n+#include \"hash.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -264,21 +265,22 @@ class CCoins\n     }\n };\n \n-class CCoinsKeyHasher\n+class SaltedTxidHasher\n {\n private:\n-    uint256 salt;\n+    /** Salt */\n+    const uint64_t k0, k1;\n \n public:\n-    CCoinsKeyHasher();\n+    SaltedTxidHasher();\n \n     /**\n      * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n      */\n-    size_t operator()(const uint256& key) const {\n-        return key.GetHash(salt);\n+    size_t operator()(const uint256& txid) const {\n+        return SipHashUint256(k0, k1, txid);\n     }\n };\n \n@@ -295,7 +297,7 @@ struct CCoinsCacheEntry\n     CCoinsCacheEntry() : coins(), flags(0) {}\n };\n \n-typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n+typedef boost::unordered_map<uint256, CCoinsCacheEntry, SaltedTxidHasher> CCoinsMap;\n \n /** Cursor for iterating over CoinsView state */\n class CCoinsViewCursor"
      },
      {
        "sha": "79a297e5e4010ee76bd8c8c5a48858c50f0c659a",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -78,17 +78,6 @@ typedef u_int SOCKET;\n #define MSG_NOSIGNAL 0\n #endif\n \n-#ifndef WIN32\n-// PRIO_MAX is not defined on Solaris\n-#ifndef PRIO_MAX\n-#define PRIO_MAX 20\n-#endif\n-#define THREAD_PRIORITY_LOWEST          PRIO_MAX\n-#define THREAD_PRIORITY_BELOW_NORMAL    2\n-#define THREAD_PRIORITY_NORMAL          0\n-#define THREAD_PRIORITY_ABOVE_NORMAL    (-2)\n-#endif\n-\n #if HAVE_DECL_STRNLEN == 0\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN"
      },
      {
        "sha": "fa702f0dfa900fb5e695555d911b3ae10479c267",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -86,8 +86,14 @@ class CScriptCompressor\n             return;\n         }\n         nSize -= nSpecialScripts;\n-        script.resize(nSize);\n-        s >> REF(CFlatData(script));\n+        if (nSize > MAX_SCRIPT_SIZE) {\n+            // Overly long script, replace with a short invalid one\n+            script << OP_RETURN;\n+            s.ignore(nSize);\n+        } else {\n+            script.resize(nSize);\n+            s >> REF(CFlatData(script));\n+        }\n     }\n };\n "
      },
      {
        "sha": "822ec87d69e86e62e99bfb3f44606c9ac129df46",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -17,6 +17,7 @@ enum DeploymentPos\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141 and BIP143\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "1d469d0fb4622c3072227d2c41ef46618a502bb8",
        "filename": "src/crypto/aes.cpp",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"aes.h\"\n+#include \"crypto/common.h\"\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+extern \"C\" {\n+#include \"crypto/ctaes/ctaes.c\"\n+}\n+\n+AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Encrypt::~AES128Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES128_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Decrypt::~AES128Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    AES128_decrypt(&ctx, 1, plaintext, ciphertext);\n+}\n+\n+AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Encrypt::~AES256Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES256_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES256Decrypt::AES256Decrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Decrypt::~AES256Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    AES256_decrypt(&ctx, 1, plaintext, ciphertext);\n+}\n+\n+\n+template <typename T>\n+static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)\n+{\n+    int written = 0;\n+    int padsize = size % AES_BLOCKSIZE;\n+    unsigned char mixed[AES_BLOCKSIZE];\n+\n+    if (!data || !size || !out)\n+        return 0;\n+\n+    if (!pad && padsize != 0)\n+        return 0;\n+\n+    memcpy(mixed, iv, AES_BLOCKSIZE);\n+\n+    // Write all but the last block\n+    while (written + AES_BLOCKSIZE <= size) {\n+        for (int i = 0; i != AES_BLOCKSIZE; i++)\n+            mixed[i] ^= *data++;\n+        enc.Encrypt(out + written, mixed);\n+        memcpy(mixed, out + written, AES_BLOCKSIZE);\n+        written += AES_BLOCKSIZE;\n+    }\n+    if (pad) {\n+        // For all that remains, pad each byte with the value of the remaining\n+        // space. If there is none, pad by a full block.\n+        for (int i = 0; i != padsize; i++)\n+            mixed[i] ^= *data++;\n+        for (int i = padsize; i != AES_BLOCKSIZE; i++)\n+            mixed[i] ^= AES_BLOCKSIZE - padsize;\n+        enc.Encrypt(out + written, mixed);\n+        written += AES_BLOCKSIZE;\n+    }\n+    return written;\n+}\n+\n+template <typename T>\n+static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)\n+{\n+    unsigned char padsize = 0;\n+    int written = 0;\n+    bool fail = false;\n+    const unsigned char* prev = iv;\n+\n+    if (!data || !size || !out)\n+        return 0;\n+\n+    if (size % AES_BLOCKSIZE != 0)\n+        return 0;\n+\n+    // Decrypt all data. Padding will be checked in the output.\n+    while (written != size) {\n+        dec.Decrypt(out, data + written);\n+        for (int i = 0; i != AES_BLOCKSIZE; i++)\n+            *out++ ^= prev[i];\n+        prev = data + written;\n+        written += AES_BLOCKSIZE;\n+    }\n+\n+    // When decrypting padding, attempt to run in constant-time\n+    if (pad) {\n+        // If used, padding size is the value of the last decrypted byte. For\n+        // it to be valid, It must be between 1 and AES_BLOCKSIZE.\n+        padsize = *--out;\n+        fail = !padsize | (padsize > AES_BLOCKSIZE);\n+\n+        // If not well-formed, treat it as though there's no padding.\n+        padsize *= !fail;\n+\n+        // All padding must equal the last byte otherwise it's not well-formed\n+        for (int i = AES_BLOCKSIZE; i != 0; i--)\n+            fail |= ((i > AES_BLOCKSIZE - padsize) & (*out-- != padsize));\n+\n+        written -= padsize;\n+    }\n+    return written * !fail;\n+}\n+\n+AES256CBCEncrypt::AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : enc(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+int AES256CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCEncrypt(enc, iv, data, size, pad, out);\n+}\n+\n+AES256CBCEncrypt::~AES256CBCEncrypt()\n+{\n+    memset(iv, 0, sizeof(iv));\n+}\n+\n+AES256CBCDecrypt::AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : dec(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+\n+int AES256CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCDecrypt(dec, iv, data, size, pad, out);\n+}\n+\n+AES256CBCDecrypt::~AES256CBCDecrypt()\n+{\n+    memset(iv, 0, sizeof(iv));\n+}\n+\n+AES128CBCEncrypt::AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : enc(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+AES128CBCEncrypt::~AES128CBCEncrypt()\n+{\n+    memset(iv, 0, AES_BLOCKSIZE);\n+}\n+\n+int AES128CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCEncrypt(enc, iv, data, size, pad, out);\n+}\n+\n+AES128CBCDecrypt::AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : dec(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+AES128CBCDecrypt::~AES128CBCDecrypt()\n+{\n+    memset(iv, 0, AES_BLOCKSIZE);\n+}\n+\n+int AES128CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCDecrypt(dec, iv, data, size, pad, out);\n+}"
      },
      {
        "sha": "8cae357c1287e6af0b21e891a3e7f7d685364547",
        "filename": "src/crypto/aes.h",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// C++ wrapper around ctaes, a constant-time AES implementation\n+\n+#ifndef BITCOIN_CRYPTO_AES_H\n+#define BITCOIN_CRYPTO_AES_H\n+\n+extern \"C\" {\n+#include \"crypto/ctaes/ctaes.h\"\n+}\n+\n+static const int AES_BLOCKSIZE = 16;\n+static const int AES128_KEYSIZE = 16;\n+static const int AES256_KEYSIZE = 32;\n+\n+/** An encryption class for AES-128. */\n+class AES128Encrypt\n+{\n+private:\n+    AES128_ctx ctx;\n+\n+public:\n+    AES128Encrypt(const unsigned char key[16]);\n+    ~AES128Encrypt();\n+    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n+};\n+\n+/** A decryption class for AES-128. */\n+class AES128Decrypt\n+{\n+private:\n+    AES128_ctx ctx;\n+\n+public:\n+    AES128Decrypt(const unsigned char key[16]);\n+    ~AES128Decrypt();\n+    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n+};\n+\n+/** An encryption class for AES-256. */\n+class AES256Encrypt\n+{\n+private:\n+    AES256_ctx ctx;\n+\n+public:\n+    AES256Encrypt(const unsigned char key[32]);\n+    ~AES256Encrypt();\n+    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n+};\n+\n+/** A decryption class for AES-256. */\n+class AES256Decrypt\n+{\n+private:\n+    AES256_ctx ctx;\n+\n+public:\n+    AES256Decrypt(const unsigned char key[32]);\n+    ~AES256Decrypt();\n+    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n+};\n+\n+class AES256CBCEncrypt\n+{\n+public:\n+    AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES256CBCEncrypt();\n+    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES256Encrypt enc;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES256CBCDecrypt\n+{\n+public:\n+    AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES256CBCDecrypt();\n+    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES256Decrypt dec;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES128CBCEncrypt\n+{\n+public:\n+    AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES128CBCEncrypt();\n+    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES128Encrypt enc;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES128CBCDecrypt\n+{\n+public:\n+    AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES128CBCDecrypt();\n+    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES128Decrypt dec;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+#endif // BITCOIN_CRYPTO_AES_H"
      },
      {
        "sha": "415b202a2a54eb92e6283f4c6b3e40667cedc341",
        "filename": "src/crypto/ctaes/COPYING",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/COPYING?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2016 Pieter Wuille\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE."
      },
      {
        "sha": "0e7fe1775153e2f14f976fa8826d5f73927cc6e1",
        "filename": "src/crypto/ctaes/README.md",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/README.md?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,41 @@\n+ctaes\n+=====\n+\n+Simple C module for constant-time AES encryption and decryption.\n+\n+Features:\n+* Simple, pure C code without any dependencies.\n+* No tables or data-dependent branches whatsoever, but using bit sliced approach from https://eprint.iacr.org/2009/129.pdf.\n+* Very small object code: slightly over 4k of executable code when compiled with -Os.\n+* Slower than implementations based on precomputed tables or specialized instructions, but can do ~15 MB/s on modern CPUs.\n+\n+Performance\n+-----------\n+\n+Compiled with GCC 5.3.1 with -O3, on an Intel(R) Core(TM) i7-4800MQ CPU, numbers in CPU cycles:\n+\n+| Algorithm | Key schedule | Encryption per byte | Decryption per byte |\n+| --------- | ------------:| -------------------:| -------------------:|\n+| AES-128   |         2.8k |                 154 |                 161 |\n+| AES-192   |         3.1k |                 169 |                 181 |\n+| AES-256   |         4.0k |                 191 |                 203 |\n+\n+Build steps\n+-----------\n+\n+Object code:\n+\n+    $ gcc -O3 ctaes.c -c -o ctaes.o\n+\n+Tests:\n+\n+    $ gcc -O3 ctaes.c test.c -o test\n+\n+Benchmark:\n+\n+    $ gcc -O3 ctaes.c bench.c -o bench\n+\n+Review\n+------\n+\n+Results of a formal review of the code can be found in http://bitcoin.sipa.be/ctaes/review.zip"
      },
      {
        "sha": "a86df496c830083be2d4e007137897900e201a0f",
        "filename": "src/crypto/ctaes/bench.c",
        "status": "added",
        "additions": 170,
        "deletions": 0,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/bench.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/bench.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/bench.c?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,170 @@\n+#include <stdio.h>\n+#include <math.h>\n+#include \"sys/time.h\"\n+\n+#include \"ctaes.h\"\n+\n+static double gettimedouble(void) {\n+    struct timeval tv;\n+    gettimeofday(&tv, NULL);\n+    return tv.tv_usec * 0.000001 + tv.tv_sec;\n+}\n+\n+static void print_number(double x) {\n+    double y = x;\n+    int c = 0;\n+    if (y < 0.0) {\n+        y = -y;\n+    }\n+    while (y < 100.0) {\n+        y *= 10.0;\n+        c++;\n+    }\n+    printf(\"%.*f\", c, x);\n+}\n+\n+static void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {\n+    int i;\n+    double min = HUGE_VAL;\n+    double sum = 0.0;\n+    double max = 0.0;\n+    for (i = 0; i < count; i++) {\n+        double begin, total;\n+        if (setup != NULL) {\n+            setup(data);\n+        }\n+        begin = gettimedouble();\n+        benchmark(data);\n+        total = gettimedouble() - begin;\n+        if (teardown != NULL) {\n+            teardown(data);\n+        }\n+        if (total < min) {\n+            min = total;\n+        }\n+        if (total > max) {\n+            max = total;\n+        }\n+        sum += total;\n+    }\n+    printf(\"%s: min \", name);\n+    print_number(min * 1000000000.0 / iter);\n+    printf(\"ns / avg \");\n+    print_number((sum / count) * 1000000000.0 / iter);\n+    printf(\"ns / max \");\n+    print_number(max * 1000000000.0 / iter);\n+    printf(\"ns\\n\");\n+}\n+\n+static void bench_AES128_init(void* data) {\n+    AES128_ctx* ctx = (AES128_ctx*)data;\n+    int i;\n+    for (i = 0; i < 50000; i++) {\n+        AES128_init(ctx, (unsigned char*)ctx);\n+    }\n+}\n+\n+static void bench_AES128_encrypt_setup(void* data) {\n+    AES128_ctx* ctx = (AES128_ctx*)data;\n+    static const unsigned char key[16] = {0};\n+    AES128_init(ctx, key);\n+}\n+\n+static void bench_AES128_encrypt(void* data) {\n+    const AES128_ctx* ctx = (const AES128_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES128_encrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+static void bench_AES128_decrypt(void* data) {\n+    const AES128_ctx* ctx = (const AES128_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES128_decrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+static void bench_AES192_init(void* data) {\n+    AES192_ctx* ctx = (AES192_ctx*)data;\n+    int i;\n+    for (i = 0; i < 50000; i++) {\n+        AES192_init(ctx, (unsigned char*)ctx);\n+    }\n+}\n+\n+static void bench_AES192_encrypt_setup(void* data) {\n+    AES192_ctx* ctx = (AES192_ctx*)data;\n+    static const unsigned char key[16] = {0};\n+    AES192_init(ctx, key);\n+}\n+\n+static void bench_AES192_encrypt(void* data) {\n+    const AES192_ctx* ctx = (const AES192_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES192_encrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+static void bench_AES192_decrypt(void* data) {\n+    const AES192_ctx* ctx = (const AES192_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES192_decrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+static void bench_AES256_init(void* data) {\n+    AES256_ctx* ctx = (AES256_ctx*)data;\n+    int i;\n+    for (i = 0; i < 50000; i++) {\n+        AES256_init(ctx, (unsigned char*)ctx);\n+    }\n+}\n+\n+\n+static void bench_AES256_encrypt_setup(void* data) {\n+    AES256_ctx* ctx = (AES256_ctx*)data;\n+    static const unsigned char key[16] = {0};\n+    AES256_init(ctx, key);\n+}\n+\n+static void bench_AES256_encrypt(void* data) {\n+    const AES256_ctx* ctx = (const AES256_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES256_encrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+static void bench_AES256_decrypt(void* data) {\n+    const AES256_ctx* ctx = (const AES256_ctx*)data;\n+    unsigned char scratch[16] = {0};\n+    int i;\n+    for (i = 0; i < 4000000 / 16; i++) {\n+        AES256_decrypt(ctx, 1, scratch, scratch);\n+    }\n+}\n+\n+int main(void) {\n+    AES128_ctx ctx128;\n+    AES192_ctx ctx192;\n+    AES256_ctx ctx256;\n+    run_benchmark(\"aes128_init\", bench_AES128_init, NULL, NULL, &ctx128, 20, 50000);\n+    run_benchmark(\"aes128_encrypt_byte\", bench_AES128_encrypt, bench_AES128_encrypt_setup, NULL, &ctx128, 20, 4000000);\n+    run_benchmark(\"aes128_decrypt_byte\", bench_AES128_decrypt, bench_AES128_encrypt_setup, NULL, &ctx128, 20, 4000000);\n+    run_benchmark(\"aes192_init\", bench_AES192_init, NULL, NULL, &ctx192, 20, 50000);\n+    run_benchmark(\"aes192_encrypt_byte\", bench_AES192_encrypt, bench_AES192_encrypt_setup, NULL, &ctx192, 20, 4000000);\n+    run_benchmark(\"aes192_decrypt_byte\", bench_AES192_decrypt, bench_AES192_encrypt_setup, NULL, &ctx192, 20, 4000000);\n+    run_benchmark(\"aes256_init\", bench_AES256_init, NULL, NULL, &ctx256, 20, 50000);\n+    run_benchmark(\"aes256_encrypt_byte\", bench_AES256_encrypt, bench_AES256_encrypt_setup, NULL, &ctx256, 20, 4000000);\n+    run_benchmark(\"aes256_decrypt_byte\", bench_AES256_decrypt, bench_AES256_encrypt_setup, NULL, &ctx256, 20, 4000000);\n+    return 0;\n+}"
      },
      {
        "sha": "2389fc0bb254f70c0be4863fa8cc2273210b9442",
        "filename": "src/crypto/ctaes/ctaes.c",
        "status": "added",
        "additions": 556,
        "deletions": 0,
        "changes": 556,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/ctaes.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/ctaes.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/ctaes.c?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,556 @@\n+ /*********************************************************************\n+ * Copyright (c) 2016 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/* Constant time, unoptimized, concise, plain C, AES implementation\n+ * Based On:\n+ *   Emilia Kasper and Peter Schwabe, Faster and Timing-Attack Resistant AES-GCM\n+ *   http://www.iacr.org/archive/ches2009/57470001/57470001.pdf\n+ * But using 8 16-bit integers representing a single AES state rather than 8 128-bit\n+ * integers representing 8 AES states.\n+ */\n+\n+#include \"ctaes.h\"\n+\n+/* Slice variable slice_i contains the i'th bit of the 16 state variables in this order:\n+ *  0  1  2  3\n+ *  4  5  6  7\n+ *  8  9 10 11\n+ * 12 13 14 15\n+ */\n+\n+/** Convert a byte to sliced form, storing it corresponding to given row and column in s */\n+static void LoadByte(AES_state* s, unsigned char byte, int r, int c) {\n+    int i;\n+    for (i = 0; i < 8; i++) {\n+        s->slice[i] |= (byte & 1) << (r * 4 + c);\n+        byte >>= 1;\n+    }\n+}\n+\n+/** Load 16 bytes of data into 8 sliced integers */\n+static void LoadBytes(AES_state *s, const unsigned char* data16) {\n+    int c;\n+    for (c = 0; c < 4; c++) {\n+        int r;\n+        for (r = 0; r < 4; r++) {\n+            LoadByte(s, *(data16++), r, c);\n+        }\n+    }\n+}\n+\n+/** Convert 8 sliced integers into 16 bytes of data */\n+static void SaveBytes(unsigned char* data16, const AES_state *s) {\n+    int c;\n+    for (c = 0; c < 4; c++) {\n+        int r;\n+        for (r = 0; r < 4; r++) {\n+            int b;\n+            uint8_t v = 0;\n+            for (b = 0; b < 8; b++) {\n+                v |= ((s->slice[b] >> (r * 4 + c)) & 1) << b;\n+            }\n+            *(data16++) = v;\n+        }\n+    }\n+}\n+\n+/* S-box implementation based on the gate logic from:\n+ *   Joan Boyar and Rene Peralta, A depth-16 circuit for the AES S-box.\n+ *   https://eprint.iacr.org/2011/332.pdf\n+*/\n+static void SubBytes(AES_state *s, int inv) {\n+    /* Load the bit slices */\n+    uint16_t U0 = s->slice[7], U1 = s->slice[6], U2 = s->slice[5], U3 = s->slice[4];\n+    uint16_t U4 = s->slice[3], U5 = s->slice[2], U6 = s->slice[1], U7 = s->slice[0];\n+\n+    uint16_t T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16;\n+    uint16_t T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, D;\n+    uint16_t M1, M6, M11, M13, M15, M20, M21, M22, M23, M25, M37, M38, M39, M40;\n+    uint16_t M41, M42, M43, M44, M45, M46, M47, M48, M49, M50, M51, M52, M53, M54;\n+    uint16_t M55, M56, M57, M58, M59, M60, M61, M62, M63;\n+\n+    if (inv) {\n+        uint16_t R5, R13, R17, R18, R19;\n+        /* Undo linear postprocessing */\n+        T23 = U0 ^ U3;\n+        T22 = ~(U1 ^ U3);\n+        T2 = ~(U0 ^ U1);\n+        T1 = U3 ^ U4;\n+        T24 = ~(U4 ^ U7);\n+        R5 = U6 ^ U7;\n+        T8 = ~(U1 ^ T23);\n+        T19 = T22 ^ R5;\n+        T9 = ~(U7 ^ T1);\n+        T10 = T2 ^ T24;\n+        T13 = T2 ^ R5;\n+        T3 = T1 ^ R5;\n+        T25 = ~(U2 ^ T1);\n+        R13 = U1 ^ U6;\n+        T17 = ~(U2 ^ T19);\n+        T20 = T24 ^ R13;\n+        T4 = U4 ^ T8;\n+        R17 = ~(U2 ^ U5);\n+        R18 = ~(U5 ^ U6);\n+        R19 = ~(U2 ^ U4);\n+        D = U0 ^ R17;\n+        T6 = T22 ^ R17;\n+        T16 = R13 ^ R19;\n+        T27 = T1 ^ R18;\n+        T15 = T10 ^ T27;\n+        T14 = T10 ^ R18;\n+        T26 = T3 ^ T16;\n+    } else {\n+        /* Linear preprocessing. */\n+        T1 = U0 ^ U3;\n+        T2 = U0 ^ U5;\n+        T3 = U0 ^ U6;\n+        T4 = U3 ^ U5;\n+        T5 = U4 ^ U6;\n+        T6 = T1 ^ T5;\n+        T7 = U1 ^ U2;\n+        T8 = U7 ^ T6;\n+        T9 = U7 ^ T7;\n+        T10 = T6 ^ T7;\n+        T11 = U1 ^ U5;\n+        T12 = U2 ^ U5;\n+        T13 = T3 ^ T4;\n+        T14 = T6 ^ T11;\n+        T15 = T5 ^ T11;\n+        T16 = T5 ^ T12;\n+        T17 = T9 ^ T16;\n+        T18 = U3 ^ U7;\n+        T19 = T7 ^ T18;\n+        T20 = T1 ^ T19;\n+        T21 = U6 ^ U7;\n+        T22 = T7 ^ T21;\n+        T23 = T2 ^ T22;\n+        T24 = T2 ^ T10;\n+        T25 = T20 ^ T17;\n+        T26 = T3 ^ T16;\n+        T27 = T1 ^ T12;\n+        D = U7;\n+    }\n+\n+    /* Non-linear transformation (identical to the code in SubBytes) */\n+    M1 = T13 & T6;\n+    M6 = T3 & T16;\n+    M11 = T1 & T15;\n+    M13 = (T4 & T27) ^ M11;\n+    M15 = (T2 & T10) ^ M11;\n+    M20 = T14 ^ M1 ^ (T23 & T8) ^ M13;\n+    M21 = (T19 & D) ^ M1 ^ T24 ^ M15;\n+    M22 = T26 ^ M6 ^ (T22 & T9) ^ M13;\n+    M23 = (T20 & T17) ^ M6 ^ M15 ^ T25;\n+    M25 = M22 & M20;\n+    M37 = M21 ^ ((M20 ^ M21) & (M23 ^ M25));\n+    M38 = M20 ^ M25 ^ (M21 | (M20 & M23));\n+    M39 = M23 ^ ((M22 ^ M23) & (M21 ^ M25));\n+    M40 = M22 ^ M25 ^ (M23 | (M21 & M22));\n+    M41 = M38 ^ M40;\n+    M42 = M37 ^ M39;\n+    M43 = M37 ^ M38;\n+    M44 = M39 ^ M40;\n+    M45 = M42 ^ M41;\n+    M46 = M44 & T6;\n+    M47 = M40 & T8;\n+    M48 = M39 & D;\n+    M49 = M43 & T16;\n+    M50 = M38 & T9;\n+    M51 = M37 & T17;\n+    M52 = M42 & T15;\n+    M53 = M45 & T27;\n+    M54 = M41 & T10;\n+    M55 = M44 & T13;\n+    M56 = M40 & T23;\n+    M57 = M39 & T19;\n+    M58 = M43 & T3;\n+    M59 = M38 & T22;\n+    M60 = M37 & T20;\n+    M61 = M42 & T1;\n+    M62 = M45 & T4;\n+    M63 = M41 & T2;\n+\n+    if (inv){\n+        /* Undo linear preprocessing */\n+        uint16_t P0 = M52 ^ M61;\n+        uint16_t P1 = M58 ^ M59;\n+        uint16_t P2 = M54 ^ M62;\n+        uint16_t P3 = M47 ^ M50;\n+        uint16_t P4 = M48 ^ M56;\n+        uint16_t P5 = M46 ^ M51;\n+        uint16_t P6 = M49 ^ M60;\n+        uint16_t P7 = P0 ^ P1;\n+        uint16_t P8 = M50 ^ M53;\n+        uint16_t P9 = M55 ^ M63;\n+        uint16_t P10 = M57 ^ P4;\n+        uint16_t P11 = P0 ^ P3;\n+        uint16_t P12 = M46 ^ M48;\n+        uint16_t P13 = M49 ^ M51;\n+        uint16_t P14 = M49 ^ M62;\n+        uint16_t P15 = M54 ^ M59;\n+        uint16_t P16 = M57 ^ M61;\n+        uint16_t P17 = M58 ^ P2;\n+        uint16_t P18 = M63 ^ P5;\n+        uint16_t P19 = P2 ^ P3;\n+        uint16_t P20 = P4 ^ P6;\n+        uint16_t P22 = P2 ^ P7;\n+        uint16_t P23 = P7 ^ P8;\n+        uint16_t P24 = P5 ^ P7;\n+        uint16_t P25 = P6 ^ P10;\n+        uint16_t P26 = P9 ^ P11;\n+        uint16_t P27 = P10 ^ P18;\n+        uint16_t P28 = P11 ^ P25;\n+        uint16_t P29 = P15 ^ P20;\n+        s->slice[7] = P13 ^ P22;\n+        s->slice[6] = P26 ^ P29;\n+        s->slice[5] = P17 ^ P28;\n+        s->slice[4] = P12 ^ P22;\n+        s->slice[3] = P23 ^ P27;\n+        s->slice[2] = P19 ^ P24;\n+        s->slice[1] = P14 ^ P23;\n+        s->slice[0] = P9 ^ P16;\n+    } else {\n+        /* Linear postprocessing */\n+        uint16_t L0 = M61 ^ M62;\n+        uint16_t L1 = M50 ^ M56;\n+        uint16_t L2 = M46 ^ M48;\n+        uint16_t L3 = M47 ^ M55;\n+        uint16_t L4 = M54 ^ M58;\n+        uint16_t L5 = M49 ^ M61;\n+        uint16_t L6 = M62 ^ L5;\n+        uint16_t L7 = M46 ^ L3;\n+        uint16_t L8 = M51 ^ M59;\n+        uint16_t L9 = M52 ^ M53;\n+        uint16_t L10 = M53 ^ L4;\n+        uint16_t L11 = M60 ^ L2;\n+        uint16_t L12 = M48 ^ M51;\n+        uint16_t L13 = M50 ^ L0;\n+        uint16_t L14 = M52 ^ M61;\n+        uint16_t L15 = M55 ^ L1;\n+        uint16_t L16 = M56 ^ L0;\n+        uint16_t L17 = M57 ^ L1;\n+        uint16_t L18 = M58 ^ L8;\n+        uint16_t L19 = M63 ^ L4;\n+        uint16_t L20 = L0 ^ L1;\n+        uint16_t L21 = L1 ^ L7;\n+        uint16_t L22 = L3 ^ L12;\n+        uint16_t L23 = L18 ^ L2;\n+        uint16_t L24 = L15 ^ L9;\n+        uint16_t L25 = L6 ^ L10;\n+        uint16_t L26 = L7 ^ L9;\n+        uint16_t L27 = L8 ^ L10;\n+        uint16_t L28 = L11 ^ L14;\n+        uint16_t L29 = L11 ^ L17;\n+        s->slice[7] = L6 ^ L24;\n+        s->slice[6] = ~(L16 ^ L26);\n+        s->slice[5] = ~(L19 ^ L28);\n+        s->slice[4] = L6 ^ L21;\n+        s->slice[3] = L20 ^ L22;\n+        s->slice[2] = L25 ^ L29;\n+        s->slice[1] = ~(L13 ^ L27);\n+        s->slice[0] = ~(L6 ^ L23);\n+    }\n+}\n+\n+#define BIT_RANGE(from,to) (((1 << ((to) - (from))) - 1) << (from))\n+\n+#define BIT_RANGE_LEFT(x,from,to,shift) (((x) & BIT_RANGE((from), (to))) << (shift))\n+#define BIT_RANGE_RIGHT(x,from,to,shift) (((x) & BIT_RANGE((from), (to))) >> (shift))\n+\n+static void ShiftRows(AES_state* s) {\n+    int i;\n+    for (i = 0; i < 8; i++) {\n+        uint16_t v = s->slice[i];\n+        s->slice[i] =\n+            (v & BIT_RANGE(0, 4)) |\n+            BIT_RANGE_LEFT(v, 4, 5, 3) | BIT_RANGE_RIGHT(v, 5, 8, 1) |\n+            BIT_RANGE_LEFT(v, 8, 10, 2) | BIT_RANGE_RIGHT(v, 10, 12, 2) |\n+            BIT_RANGE_LEFT(v, 12, 15, 1) | BIT_RANGE_RIGHT(v, 15, 16, 3);\n+    }\n+}\n+\n+static void InvShiftRows(AES_state* s) {\n+    int i;\n+    for (i = 0; i < 8; i++) {\n+        uint16_t v = s->slice[i];\n+        s->slice[i] =\n+            (v & BIT_RANGE(0, 4)) |\n+            BIT_RANGE_LEFT(v, 4, 7, 1) | BIT_RANGE_RIGHT(v, 7, 8, 3) |\n+            BIT_RANGE_LEFT(v, 8, 10, 2) | BIT_RANGE_RIGHT(v, 10, 12, 2) |\n+            BIT_RANGE_LEFT(v, 12, 13, 3) | BIT_RANGE_RIGHT(v, 13, 16, 1);\n+    }\n+}\n+\n+#define ROT(x,b) (((x) >> ((b) * 4)) | ((x) << ((4-(b)) * 4)))\n+\n+static void MixColumns(AES_state* s, int inv) {\n+    /* The MixColumns transform treats the bytes of the columns of the state as\n+     * coefficients of a 3rd degree polynomial over GF(2^8) and multiplies them\n+     * by the fixed polynomial a(x) = {03}x^3 + {01}x^2 + {01}x + {02}, modulo\n+     * x^4 + {01}.\n+     *\n+     * In the inverse transform, we multiply by the inverse of a(x),\n+     * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}. This is equal to\n+     * a(x) * ({04}x^2 + {05}), so we can reuse the forward transform's code\n+     * (found in OpenSSL's bsaes-x86_64.pl, attributed to Jussi Kivilinna)\n+     *\n+     * In the bitsliced representation, a multiplication of every column by x\n+     * mod x^4 + 1 is simply a right rotation.\n+     */\n+\n+    /* Shared for both directions is a multiplication by a(x), which can be\n+     * rewritten as (x^3 + x^2 + x) + {02}*(x^3 + {01}).\n+     *\n+     * First compute s into the s? variables, (x^3 + {01}) * s into the s?_01\n+     * variables and (x^3 + x^2 + x)*s into the s?_123 variables.\n+     */\n+    uint16_t s0 = s->slice[0], s1 = s->slice[1], s2 = s->slice[2], s3 = s->slice[3];\n+    uint16_t s4 = s->slice[4], s5 = s->slice[5], s6 = s->slice[6], s7 = s->slice[7];\n+    uint16_t s0_01 = s0 ^ ROT(s0, 1), s0_123 = ROT(s0_01, 1) ^ ROT(s0, 3);\n+    uint16_t s1_01 = s1 ^ ROT(s1, 1), s1_123 = ROT(s1_01, 1) ^ ROT(s1, 3);\n+    uint16_t s2_01 = s2 ^ ROT(s2, 1), s2_123 = ROT(s2_01, 1) ^ ROT(s2, 3);\n+    uint16_t s3_01 = s3 ^ ROT(s3, 1), s3_123 = ROT(s3_01, 1) ^ ROT(s3, 3);\n+    uint16_t s4_01 = s4 ^ ROT(s4, 1), s4_123 = ROT(s4_01, 1) ^ ROT(s4, 3);\n+    uint16_t s5_01 = s5 ^ ROT(s5, 1), s5_123 = ROT(s5_01, 1) ^ ROT(s5, 3);\n+    uint16_t s6_01 = s6 ^ ROT(s6, 1), s6_123 = ROT(s6_01, 1) ^ ROT(s6, 3);\n+    uint16_t s7_01 = s7 ^ ROT(s7, 1), s7_123 = ROT(s7_01, 1) ^ ROT(s7, 3);\n+    /* Now compute s = s?_123 + {02} * s?_01. */\n+    s->slice[0] = s7_01 ^ s0_123;\n+    s->slice[1] = s7_01 ^ s0_01 ^ s1_123;\n+    s->slice[2] = s1_01 ^ s2_123;\n+    s->slice[3] = s7_01 ^ s2_01 ^ s3_123;\n+    s->slice[4] = s7_01 ^ s3_01 ^ s4_123;\n+    s->slice[5] = s4_01 ^ s5_123;\n+    s->slice[6] = s5_01 ^ s6_123;\n+    s->slice[7] = s6_01 ^ s7_123;\n+    if (inv) {\n+        /* In the reverse direction, we further need to multiply by\n+         * {04}x^2 + {05}, which can be written as {04} * (x^2 + {01}) + {01}.\n+         *\n+         * First compute (x^2 + {01}) * s into the t?_02 variables: */\n+        uint16_t t0_02 = s->slice[0] ^ ROT(s->slice[0], 2);\n+        uint16_t t1_02 = s->slice[1] ^ ROT(s->slice[1], 2);\n+        uint16_t t2_02 = s->slice[2] ^ ROT(s->slice[2], 2);\n+        uint16_t t3_02 = s->slice[3] ^ ROT(s->slice[3], 2);\n+        uint16_t t4_02 = s->slice[4] ^ ROT(s->slice[4], 2);\n+        uint16_t t5_02 = s->slice[5] ^ ROT(s->slice[5], 2);\n+        uint16_t t6_02 = s->slice[6] ^ ROT(s->slice[6], 2);\n+        uint16_t t7_02 = s->slice[7] ^ ROT(s->slice[7], 2);\n+        /* And then update s += {04} * t?_02 */\n+        s->slice[0] ^= t6_02;\n+        s->slice[1] ^= t6_02 ^ t7_02;\n+        s->slice[2] ^= t0_02 ^ t7_02;\n+        s->slice[3] ^= t1_02 ^ t6_02;\n+        s->slice[4] ^= t2_02 ^ t6_02 ^ t7_02;\n+        s->slice[5] ^= t3_02 ^ t7_02;\n+        s->slice[6] ^= t4_02;\n+        s->slice[7] ^= t5_02;\n+    }\n+}\n+\n+static void AddRoundKey(AES_state* s, const AES_state* round) {\n+    int b;\n+    for (b = 0; b < 8; b++) {\n+        s->slice[b] ^= round->slice[b];\n+    }\n+}\n+\n+/** column_0(s) = column_c(a) */\n+static void GetOneColumn(AES_state* s, const AES_state* a, int c) {\n+    int b;\n+    for (b = 0; b < 8; b++) {\n+        s->slice[b] = (a->slice[b] >> c) & 0x1111;\n+    }\n+}\n+\n+/** column_c1(r) |= (column_0(s) ^= column_c2(a)) */\n+static void KeySetupColumnMix(AES_state* s, AES_state* r, const AES_state* a, int c1, int c2) {\n+    int b;\n+    for (b = 0; b < 8; b++) {\n+        r->slice[b] |= ((s->slice[b] ^= ((a->slice[b] >> c2) & 0x1111)) & 0x1111) << c1;\n+    }\n+}\n+\n+/** Rotate the rows in s one position upwards, and xor in r */\n+static void KeySetupTransform(AES_state* s, const AES_state* r) {\n+    int b;\n+    for (b = 0; b < 8; b++) {\n+        s->slice[b] = ((s->slice[b] >> 4) | (s->slice[b] << 12)) ^ r->slice[b];\n+    }\n+}\n+\n+/* Multiply the cells in s by x, as polynomials over GF(2) mod x^8 + x^4 + x^3 + x + 1 */\n+static void MultX(AES_state* s) {\n+    uint16_t top = s->slice[7];\n+    s->slice[7] = s->slice[6];\n+    s->slice[6] = s->slice[5];\n+    s->slice[5] = s->slice[4];\n+    s->slice[4] = s->slice[3] ^ top;\n+    s->slice[3] = s->slice[2] ^ top;\n+    s->slice[2] = s->slice[1];\n+    s->slice[1] = s->slice[0] ^ top;\n+    s->slice[0] = top;\n+}\n+\n+/** Expand the cipher key into the key schedule.\n+ *\n+ *  state must be a pointer to an array of size nrounds + 1.\n+ *  key must be a pointer to 4 * nkeywords bytes.\n+ *\n+ *  AES128 uses nkeywords = 4, nrounds = 10\n+ *  AES192 uses nkeywords = 6, nrounds = 12\n+ *  AES256 uses nkeywords = 8, nrounds = 14\n+ */\n+static void AES_setup(AES_state* rounds, const uint8_t* key, int nkeywords, int nrounds)\n+{\n+    int i;\n+\n+    /* The one-byte round constant */\n+    AES_state rcon = {{1,0,0,0,0,0,0,0}};\n+    /* The number of the word being generated, modulo nkeywords */\n+    int pos = 0;\n+    /* The column representing the word currently being processed */\n+    AES_state column;\n+\n+    for (i = 0; i < nrounds + 1; i++) {\n+        int b;\n+        for (b = 0; b < 8; b++) {\n+            rounds[i].slice[b] = 0;\n+        }\n+    }\n+\n+    /* The first nkeywords round columns are just taken from the key directly. */\n+    for (i = 0; i < nkeywords; i++) {\n+        int r;\n+        for (r = 0; r < 4; r++) {\n+            LoadByte(&rounds[i >> 2], *(key++), r, i & 3);\n+        }\n+    }\n+\n+    GetOneColumn(&column, &rounds[(nkeywords - 1) >> 2], (nkeywords - 1) & 3);\n+\n+    for (i = nkeywords; i < 4 * (nrounds + 1); i++) {\n+        /* Transform column */\n+        if (pos == 0) {\n+            SubBytes(&column, 0);\n+            KeySetupTransform(&column, &rcon);\n+            MultX(&rcon);\n+        } else if (nkeywords > 6 && pos == 4) {\n+            SubBytes(&column, 0);\n+        }\n+        if (++pos == nkeywords) pos = 0;\n+        KeySetupColumnMix(&column, &rounds[i >> 2], &rounds[(i - nkeywords) >> 2], i & 3, (i - nkeywords) & 3);\n+    }\n+}\n+\n+static void AES_encrypt(const AES_state* rounds, int nrounds, unsigned char* cipher16, const unsigned char* plain16) {\n+    AES_state s = {{0}};\n+    int round;\n+\n+    LoadBytes(&s, plain16);\n+    AddRoundKey(&s, rounds++);\n+\n+    for (round = 1; round < nrounds; round++) {\n+        SubBytes(&s, 0);\n+        ShiftRows(&s);\n+        MixColumns(&s, 0);\n+        AddRoundKey(&s, rounds++);\n+    }\n+\n+    SubBytes(&s, 0);\n+    ShiftRows(&s);\n+    AddRoundKey(&s, rounds);\n+\n+    SaveBytes(cipher16, &s);\n+}\n+\n+static void AES_decrypt(const AES_state* rounds, int nrounds, unsigned char* plain16, const unsigned char* cipher16) {\n+    /* Most AES decryption implementations use the alternate scheme\n+     * (the Equivalent Inverse Cipher), which looks more like encryption, but\n+     * needs different round constants. We can't reuse any code here anyway, so\n+     * don't bother. */\n+    AES_state s = {{0}};\n+    int round;\n+\n+    rounds += nrounds;\n+\n+    LoadBytes(&s, cipher16);\n+    AddRoundKey(&s, rounds--);\n+\n+    for (round = 1; round < nrounds; round++) {\n+        InvShiftRows(&s);\n+        SubBytes(&s, 1);\n+        AddRoundKey(&s, rounds--);\n+        MixColumns(&s, 1);\n+    }\n+\n+    InvShiftRows(&s);\n+    SubBytes(&s, 1);\n+    AddRoundKey(&s, rounds);\n+\n+    SaveBytes(plain16, &s);\n+}\n+\n+void AES128_init(AES128_ctx* ctx, const unsigned char* key16) {\n+    AES_setup(ctx->rk, key16, 4, 10);\n+}\n+\n+void AES128_encrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {\n+    while (blocks--) {\n+        AES_encrypt(ctx->rk, 10, cipher16, plain16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+}\n+\n+void AES128_decrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {\n+    while (blocks--) {\n+        AES_decrypt(ctx->rk, 10, plain16, cipher16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+}\n+\n+void AES192_init(AES192_ctx* ctx, const unsigned char* key24) {\n+    AES_setup(ctx->rk, key24, 6, 12);\n+}\n+\n+void AES192_encrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {\n+    while (blocks--) {\n+        AES_encrypt(ctx->rk, 12, cipher16, plain16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+\n+}\n+\n+void AES192_decrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {\n+    while (blocks--) {\n+        AES_decrypt(ctx->rk, 12, plain16, cipher16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+}\n+\n+void AES256_init(AES256_ctx* ctx, const unsigned char* key32) {\n+    AES_setup(ctx->rk, key32, 8, 14);\n+}\n+\n+void AES256_encrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {\n+    while (blocks--) {\n+        AES_encrypt(ctx->rk, 14, cipher16, plain16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+}\n+\n+void AES256_decrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {\n+    while (blocks--) {\n+        AES_decrypt(ctx->rk, 14, plain16, cipher16);\n+        cipher16 += 16;\n+        plain16 += 16;\n+    }\n+}"
      },
      {
        "sha": "2f0af042160536beda0f35da4e76b98cd654fc9b",
        "filename": "src/crypto/ctaes/ctaes.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/ctaes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/ctaes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/ctaes.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,41 @@\n+ /*********************************************************************\n+ * Copyright (c) 2016 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _CTAES_H_\n+#define _CTAES_H_ 1\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+typedef struct {\n+    uint16_t slice[8];\n+} AES_state;\n+\n+typedef struct {\n+    AES_state rk[11];\n+} AES128_ctx;\n+\n+typedef struct {\n+    AES_state rk[13];\n+} AES192_ctx;\n+\n+typedef struct {\n+    AES_state rk[15];\n+} AES256_ctx;\n+\n+void AES128_init(AES128_ctx* ctx, const unsigned char* key16);\n+void AES128_encrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16);\n+void AES128_decrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16);\n+\n+void AES192_init(AES192_ctx* ctx, const unsigned char* key24);\n+void AES192_encrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16);\n+void AES192_decrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16);\n+\n+void AES256_init(AES256_ctx* ctx, const unsigned char* key32);\n+void AES256_encrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16);\n+void AES256_decrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16);\n+\n+#endif"
      },
      {
        "sha": "fce1696acdc2db618cc88c288b190a567d8f9e1c",
        "filename": "src/crypto/ctaes/test.c",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/test.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/crypto/ctaes/test.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/test.c?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,110 @@\n+ /*********************************************************************\n+ * Copyright (c) 2016 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ctaes.h\"\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include <assert.h>\n+\n+typedef struct {\n+    int keysize;\n+    const char* key;\n+    const char* plain;\n+    const char* cipher;\n+} ctaes_test;\n+\n+static const ctaes_test ctaes_tests[] = {\n+    /* AES test vectors from FIPS 197. */\n+    {128, \"000102030405060708090a0b0c0d0e0f\", \"00112233445566778899aabbccddeeff\", \"69c4e0d86a7b0430d8cdb78070b4c55a\"},\n+    {192, \"000102030405060708090a0b0c0d0e0f1011121314151617\", \"00112233445566778899aabbccddeeff\", \"dda97ca4864cdfe06eaf70a0ec0d7191\"},\n+    {256, \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\", \"00112233445566778899aabbccddeeff\", \"8ea2b7ca516745bfeafc49904b496089\"},\n+\n+    /* AES-ECB test vectors from NIST sp800-38a. */\n+    {128, \"2b7e151628aed2a6abf7158809cf4f3c\", \"6bc1bee22e409f96e93d7e117393172a\", \"3ad77bb40d7a3660a89ecaf32466ef97\"},\n+    {128, \"2b7e151628aed2a6abf7158809cf4f3c\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"f5d3d58503b9699de785895a96fdbaaf\"},\n+    {128, \"2b7e151628aed2a6abf7158809cf4f3c\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"43b1cd7f598ece23881b00e3ed030688\"},\n+    {128, \"2b7e151628aed2a6abf7158809cf4f3c\", \"f69f2445df4f9b17ad2b417be66c3710\", \"7b0c785e27e8ad3f8223207104725dd4\"},\n+    {192, \"8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b\", \"6bc1bee22e409f96e93d7e117393172a\", \"bd334f1d6e45f25ff712a214571fa5cc\"},\n+    {192, \"8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"974104846d0ad3ad7734ecb3ecee4eef\"},\n+    {192, \"8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"ef7afd2270e2e60adce0ba2face6444e\"},\n+    {192, \"8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b\", \"f69f2445df4f9b17ad2b417be66c3710\", \"9a4b41ba738d6c72fb16691603c18e0e\"},\n+    {256, \"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"6bc1bee22e409f96e93d7e117393172a\", \"f3eed1bdb5d2a03c064b5a7e3db181f8\"},\n+    {256, \"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"591ccb10d410ed26dc5ba74a31362870\"},\n+    {256, \"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"b6ed21b99ca6f4f9f153e7b1beafed1d\"},\n+    {256, \"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"f69f2445df4f9b17ad2b417be66c3710\", \"23304b7a39f9f3ff067d8d8f9e24ecc7\"}\n+};\n+\n+static void from_hex(unsigned char* data, int len, const char* hex) {\n+    int p;\n+    for (p = 0; p < len; p++) {\n+        int v = 0;\n+        int n;\n+        for (n = 0; n < 2; n++) {\n+            assert((*hex >= '0' && *hex <= '9') || (*hex >= 'a' && *hex <= 'f'));\n+            if (*hex >= '0' && *hex <= '9') {\n+                v |= (*hex - '0') << (4 * (1 - n));\n+            } else {\n+                v |= (*hex - 'a' + 10) << (4 * (1 - n));\n+            }\n+            hex++;\n+        }\n+        *(data++) = v;\n+    }\n+    assert(*hex == 0);\n+}\n+\n+int main(void) {\n+    int i;\n+    int fail = 0;\n+    for (i = 0; i < sizeof(ctaes_tests) / sizeof(ctaes_tests[0]); i++) {\n+        unsigned char key[32], plain[16], cipher[16], ciphered[16], deciphered[16];\n+        const ctaes_test* test = &ctaes_tests[i];\n+        assert(test->keysize == 128 || test->keysize == 192 || test->keysize == 256);\n+        from_hex(plain, 16, test->plain);\n+        from_hex(cipher, 16, test->cipher);\n+        switch (test->keysize) {\n+            case 128: {\n+                AES128_ctx ctx;\n+                from_hex(key, 16, test->key);\n+                AES128_init(&ctx, key);\n+                AES128_encrypt(&ctx, 1, ciphered, plain);\n+                AES128_decrypt(&ctx, 1, deciphered, cipher);\n+                break;\n+            }\n+            case 192: {\n+                AES192_ctx ctx;\n+                from_hex(key, 24, test->key);\n+                AES192_init(&ctx, key);\n+                AES192_encrypt(&ctx, 1, ciphered, plain);\n+                AES192_decrypt(&ctx, 1, deciphered, cipher);\n+                break;\n+            }\n+            case 256: {\n+                AES256_ctx ctx;\n+                from_hex(key, 32, test->key);\n+                AES256_init(&ctx, key);\n+                AES256_encrypt(&ctx, 1, ciphered, plain);\n+                AES256_decrypt(&ctx, 1, deciphered, cipher);\n+                break;\n+            }\n+        }\n+        if (memcmp(cipher, ciphered, 16)) {\n+            fprintf(stderr, \"E(key=\\\"%s\\\", plain=\\\"%s\\\") != \\\"%s\\\"\\n\", test->key, test->plain, test->cipher);\n+            fail++;\n+        }\n+        if (memcmp(plain, deciphered, 16)) {\n+            fprintf(stderr, \"D(key=\\\"%s\\\", cipher=\\\"%s\\\") != \\\"%s\\\"\\n\", test->key, test->cipher, test->plain);\n+            fail++;\n+        }\n+    }\n+    if (fail == 0) {\n+        fprintf(stderr, \"All tests succesful\\n\");\n+    } else {\n+        fprintf(stderr, \"%i tests failed\\n\", fail);\n+    }\n+    return (fail != 0);\n+}"
      },
      {
        "sha": "09c68fbe550c822ad30e575785563c896091f1ca",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 28,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -15,20 +15,6 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n-{\n-    if (status.ok())\n-        return;\n-    LogPrintf(\"%s\\n\", status.ToString());\n-    if (status.IsCorruption())\n-        throw dbwrapper_error(\"Database corrupted\");\n-    if (status.IsIOError())\n-        throw dbwrapper_error(\"Database I/O error\");\n-    if (status.IsNotFound())\n-        throw dbwrapper_error(\"Database entry missing\");\n-    throw dbwrapper_error(\"Unknown database error\");\n-}\n-\n static leveldb::Options GetOptions(size_t nCacheSize)\n {\n     leveldb::Options options;\n@@ -61,13 +47,13 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n             leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n-            HandleError(result);\n+            dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n     // The base-case obfuscation key, which is a noop.\n@@ -84,10 +70,10 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()\n@@ -102,10 +88,10 @@ CDBWrapper::~CDBWrapper()\n     options.env = NULL;\n }\n \n-bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     return true;\n }\n \n@@ -136,17 +122,30 @@ bool CDBWrapper::IsEmpty()\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n+CDBIterator::~CDBIterator() { delete piter; }\n+bool CDBIterator::Valid() { return piter->Valid(); }\n+void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CDBIterator::Next() { piter->Next(); }\n+\n+namespace dbwrapper_private {\n+\n+void HandleError(const leveldb::Status& status)\n {\n-    return obfuscate_key;\n+    if (status.ok())\n+        return;\n+    LogPrintf(\"%s\\n\", status.ToString());\n+    if (status.IsCorruption())\n+        throw dbwrapper_error(\"Database corrupted\");\n+    if (status.IsIOError())\n+        throw dbwrapper_error(\"Database I/O error\");\n+    if (status.IsNotFound())\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n }\n \n-std::string CDBWrapper::GetObfuscateKeyHex() const\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)\n {\n-    return HexStr(obfuscate_key);\n+    return w.obfuscate_key;\n }\n \n-CDBIterator::~CDBIterator() { delete piter; }\n-bool CDBIterator::Valid() { return piter->Valid(); }\n-void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CDBIterator::Next() { piter->Next(); }\n+};"
      },
      {
        "sha": "a0779d3ab99189740d59782e508db261130669ad",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 39,
        "deletions": 33,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -23,22 +23,38 @@ class dbwrapper_error : public std::runtime_error\n     dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n+class CDBWrapper;\n+\n+/** These should be considered an implementation detail of the specific database.\n+ */\n+namespace dbwrapper_private {\n+\n+/** Handle database error by throwing dbwrapper_error exception.\n+ */\n+void HandleError(const leveldb::Status& status);\n+\n+/** Work around circular dependency, as well as for testing in dbwrapper_tests.\n+ * Database obfuscation should be considered an implementation detail of the\n+ * specific database.\n+ */\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w);\n+\n+};\n \n /** Batch of changes queued to be written to a CDBWrapper */\n class CDBBatch\n {\n     friend class CDBWrapper;\n \n private:\n+    const CDBWrapper &parent;\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     * @param[in] parent    CDBWrapper that this batch is to be submitted to\n      */\n-    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const CDBWrapper &parent) : parent(parent) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +67,7 @@ class CDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(*obfuscate_key);\n+        ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -72,17 +88,17 @@ class CDBBatch\n class CDBIterator\n {\n private:\n+    const CDBWrapper &parent;\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n+     * @param[in] parent           Parent CDBWrapper instance.\n      * @param[in] piterIn          The original leveldb iterator.\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n-        piter(piterIn), obfuscate_key(obfuscate_key) { };\n+    CDBIterator(const CDBWrapper &parent, leveldb::Iterator *piterIn) :\n+        parent(parent), piter(piterIn) { };\n     ~CDBIterator();\n \n     bool Valid();\n@@ -118,7 +134,7 @@ class CDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(*obfuscate_key);\n+            ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -134,6 +150,7 @@ class CDBIterator\n \n class CDBWrapper\n {\n+    friend const std::vector<unsigned char>& dbwrapper_private::GetObfuscateKey(const CDBWrapper &w);\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n     leveldb::Env* penv;\n@@ -180,7 +197,7 @@ class CDBWrapper\n     ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n+    bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -193,7 +210,7 @@ class CDBWrapper\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n@@ -206,15 +223,15 @@ class CDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n+    bool Write(const K& key, const V& value, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(dbwrapper_error)\n+    bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -227,53 +244,42 @@ class CDBWrapper\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         return true;\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n+    bool Erase(const K& key, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(dbwrapper_error)\n+    bool Sync()\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         return WriteBatch(batch, true);\n     }\n \n     CDBIterator *NewIterator()\n     {\n-        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(*this, pdb->NewIterator(iteroptions));\n     }\n \n     /**\n      * Return true if the database managed by this class contains no entries.\n      */\n     bool IsEmpty();\n-\n-    /**\n-     * Accessor for obfuscate_key.\n-     */\n-    const std::vector<unsigned char>& GetObfuscateKey() const;\n-\n-    /**\n-     * Return the obfuscate_key as a hex-formatted string.\n-     */\n-    std::string GetObfuscateKeyHex() const;\n-\n };\n \n #endif // BITCOIN_DBWRAPPER_H"
      },
      {
        "sha": "20a83342db4c9ffcf010396d0cd881a8027c0b2b",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -81,3 +81,130 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define SIPROUND do { \\\n+    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n+    v0 = ROTL(v0, 32); \\\n+    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n+    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n+    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n+    v2 = ROTL(v2, 32); \\\n+} while (0)\n+\n+CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n+{\n+    v[0] = 0x736f6d6570736575ULL ^ k0;\n+    v[1] = 0x646f72616e646f6dULL ^ k1;\n+    v[2] = 0x6c7967656e657261ULL ^ k0;\n+    v[3] = 0x7465646279746573ULL ^ k1;\n+    count = 0;\n+    tmp = 0;\n+}\n+\n+CSipHasher& CSipHasher::Write(uint64_t data)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    assert(count % 8 == 0);\n+\n+    v3 ^= data;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= data;\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n+    return *this;\n+}\n+\n+uint64_t CSipHasher::Finalize() const\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= t;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v3 ^= ((uint64_t)4) << 59;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= ((uint64_t)4) << 59;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}"
      },
      {
        "sha": "db4e130ae7fec8032d8e5638b30d8b89d60e4471",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -171,4 +171,38 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n+/** SipHash-2-4 */\n+class CSipHasher\n+{\n+private:\n+    uint64_t v[4];\n+    uint64_t tmp;\n+    int count;\n+\n+public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n+    CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n+    CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n+    uint64_t Finalize() const;\n+};\n+\n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n+\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "812940eaf9861305dc7f2bfc4e385740411ccd34",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -36,7 +36,6 @@\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/foreach.hpp>\n-#include <boost/scoped_ptr.hpp>\n \n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n@@ -45,16 +44,16 @@ static const size_t MAX_HEADERS_SIZE = 8192;\n class HTTPWorkItem : public HTTPClosure\n {\n public:\n-    HTTPWorkItem(HTTPRequest* req, const std::string &path, const HTTPRequestHandler& func):\n-        req(req), path(path), func(func)\n+    HTTPWorkItem(std::unique_ptr<HTTPRequest> req, const std::string &path, const HTTPRequestHandler& func):\n+        req(std::move(req)), path(path), func(func)\n     {\n     }\n     void operator()()\n     {\n         func(req.get(), path);\n     }\n \n-    boost::scoped_ptr<HTTPRequest> req;\n+    std::unique_ptr<HTTPRequest> req;\n \n private:\n     std::string path;\n@@ -71,8 +70,7 @@ class WorkQueue\n     /** Mutex protects entire object */\n     CWaitableCriticalSection cs;\n     CConditionVariable cond;\n-    /* XXX in C++11 we can use std::unique_ptr here and avoid manual cleanup */\n-    std::deque<WorkItem*> queue;\n+    std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n     int numThreads;\n@@ -101,15 +99,11 @@ class WorkQueue\n                                  numThreads(0)\n     {\n     }\n-    /*( Precondition: worker threads have all stopped\n+    /** Precondition: worker threads have all stopped\n      * (call WaitExit)\n      */\n     ~WorkQueue()\n     {\n-        while (!queue.empty()) {\n-            delete queue.front();\n-            queue.pop_front();\n-        }\n     }\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n@@ -118,7 +112,7 @@ class WorkQueue\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n-        queue.push_back(item);\n+        queue.emplace_back(std::unique_ptr<WorkItem>(item));\n         cond.notify_one();\n         return true;\n     }\n@@ -127,18 +121,17 @@ class WorkQueue\n     {\n         ThreadCounter count(*this);\n         while (running) {\n-            WorkItem* i = 0;\n+            std::unique_ptr<WorkItem> i;\n             {\n                 boost::unique_lock<boost::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n                     break;\n-                i = queue.front();\n+                i = std::move(queue.front());\n                 queue.pop_front();\n             }\n             (*i)();\n-            delete i;\n         }\n     }\n     /** Interrupt and exit loops */\n@@ -252,7 +245,7 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n-    std::auto_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n+    std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(\"http\", \"Received a %s request for %s from %s\\n\",\n              RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n@@ -288,12 +281,14 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n \n     // Dispatch to worker thread\n     if (i != iend) {\n-        std::auto_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n+        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n         assert(workQueue);\n         if (workQueue->Enqueue(item.get()))\n             item.release(); /* if true, queue took ownership */\n-        else\n+        else {\n+            LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+        }\n     } else {\n         hreq->WriteReply(HTTP_NOTFOUND);\n     }"
      },
      {
        "sha": "28e1e8deddbde938aa3c73d6bbdaeedf710a95fd",
        "filename": "src/indirectmap.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,52 @@\n+#ifndef BITCOIN_INDIRECTMAP_H\n+#define BITCOIN_INDIRECTMAP_H\n+\n+template <class T>\n+struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };\n+\n+/* Map whose keys are pointers, but are compared by their dereferenced values.\n+ *\n+ * Differs from a plain std::map<const K*, T, DereferencingComparator<K*> > in\n+ * that methods that take a key for comparison take a K rather than taking a K*\n+ * (taking a K* would be confusing, since it's the value rather than the address\n+ * of the object for comparison that matters due to the dereferencing comparator).\n+ *\n+ * Objects pointed to by keys must not be modified in any way that changes the\n+ * result of DereferencingComparator.\n+ */\n+template <class K, class T>\n+class indirectmap {\n+private:\n+    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;\n+    base m;\n+public:\n+    typedef typename base::iterator iterator;\n+    typedef typename base::const_iterator const_iterator;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::value_type value_type;\n+\n+    // passthrough (pointer interface)\n+    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }\n+\n+    // pass address (value interface)\n+    iterator find(const K& key)                     { return m.find(&key); }\n+    const_iterator find(const K& key) const         { return m.find(&key); }\n+    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }\n+    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }\n+    size_type erase(const K& key)                   { return m.erase(&key); }\n+    size_type count(const K& key) const             { return m.count(&key); }\n+\n+    // passthrough\n+    bool empty() const              { return m.empty(); }\n+    size_type size() const          { return m.size(); }\n+    size_type max_size() const      { return m.max_size(); }\n+    void clear()                    { m.clear(); }\n+    iterator begin()                { return m.begin(); }\n+    iterator end()                  { return m.end(); }\n+    const_iterator begin() const    { return m.begin(); }\n+    const_iterator end() const      { return m.end(); }\n+    const_iterator cbegin() const   { return m.cbegin(); }\n+    const_iterator cend() const     { return m.cend(); }\n+};\n+\n+#endif // BITCOIN_INDIRECTMAP_H"
      },
      {
        "sha": "5d29f14eb88219e222ab966ce79d856870a19e53",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 52,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -37,9 +37,7 @@\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n #endif\n #include <stdint.h>\n #include <stdio.h>\n@@ -94,7 +92,6 @@ enum BindFlags {\n };\n \n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n-CClientUIInterface uiInterface; // Declared but not defined in ui_interface.h\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -126,7 +123,7 @@ CClientUIInterface uiInterface; // Declared but not defined in ui_interface.h\n // shutdown thing.\n //\n \n-volatile bool fRequestShutdown = false;\n+std::atomic<bool> fRequestShutdown(false);\n \n void StartShutdown()\n {\n@@ -137,6 +134,11 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n+/**\n+ * This is a minimally invasive approach to shutdown on LevelDB read errors from the\n+ * chainstate, while keeping user interface out of the common library, which is shared\n+ * between bitcoind, and bitcoin-qt and non-server tools.\n+*/\n class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n@@ -266,18 +268,6 @@ void HandleSIGHUP(int)\n     fReopenDebugLog = true;\n }\n \n-bool static InitError(const std::string &str)\n-{\n-    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n-    return false;\n-}\n-\n-bool static InitWarning(const std::string &str)\n-{\n-    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n-    return true;\n-}\n-\n bool static Bind(const CService &addr, unsigned int flags) {\n     if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n@@ -329,7 +319,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-feefilter\", strprintf(_(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\"), DEFAULT_FEEFILTER));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n@@ -342,7 +333,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, >%u = target size in MiB to use for block files)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files on startup\"));\n+    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n@@ -419,7 +411,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -488,11 +480,20 @@ std::string HelpMessage(HelpMessageMode mode)\n \n std::string LicenseInfo()\n {\n+    const std::string URL_SOURCE_CODE = \"<https://github.com/bitcoin/bitcoin>\";\n+    const std::string URL_WEBSITE = \"<https://bitcoincore.org>\";\n     // todo: remove urls from translations on next change\n     return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\"), 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n            \"\\n\" +\n-           _(\"This is experimental software.\") + \"\\n\" +\n+           strprintf(_(\"Please contribute if you find %s useful. \"\n+                       \"Visit %s for further information about the software.\"),\n+               PACKAGE_NAME, URL_WEBSITE) +\n+           \"\\n\" +\n+           strprintf(_(\"The source code is available from %s.\"),\n+               URL_SOURCE_CODE) +\n            \"\\n\" +\n+           \"\\n\" +\n+           _(\"This is experimental software.\") + \"\\n\" +\n            _(\"Distributed under the MIT software license, see the accompanying file COPYING or <http://www.opensource.org/licenses/mit-license.php>.\") + \"\\n\" +\n            \"\\n\" +\n            _(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\") +\n@@ -570,9 +571,10 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n+    CImportingNow imp;\n+\n     // -reindex\n     if (fReindex) {\n-        CImportingNow imp;\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n@@ -597,7 +599,6 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     if (boost::filesystem::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n-            CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n@@ -611,14 +612,20 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n-            CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n \n+    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+    CValidationState state;\n+    if (!ActivateBestChain(state, chainparams)) {\n+        LogPrintf(\"Failed to connect best block\");\n+        StartShutdown();\n+    }\n+\n     if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n@@ -743,11 +750,6 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n     return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n }\n \n-static std::string AmountErrMsg(const char * const optname, const std::string& strValue)\n-{\n-    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n-}\n-\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n@@ -756,7 +758,7 @@ void InitLogging()\n     fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+    LogPrintf(\"Bitcoin version %s\\n\", FormatFullVersion());\n }\n \n /** Initialize bitcoin.\n@@ -958,7 +960,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n-        nLocalServices |= NODE_BLOOM;\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     nMaxTipAge = GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1005,9 +1007,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fPrintToDebugLog)\n         OpenDebugLog();\n \n-#ifdef ENABLE_WALLET\n-    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n-#endif\n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n@@ -1126,6 +1125,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n+    fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     bool fBound = false;\n     if (fListen) {\n@@ -1157,10 +1157,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (mapArgs.count(\"-externalip\")) {\n         BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n-            CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n-            if (!addrLocal.IsValid())\n+            CService addrLocal;\n+            if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+                AddLocal(addrLocal, LOCAL_MANUAL);\n+            else\n                 return InitError(ResolveErrMsg(\"externalip\", strAddr));\n-            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n         }\n     }\n \n@@ -1181,6 +1182,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 7: load block chain\n \n     fReindex = GetBoolArg(\"-reindex\", false);\n+    bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n     // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n     boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n@@ -1242,7 +1244,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n@@ -1271,7 +1273,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // Check for changed -txindex state\n                 if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n+                    strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n                     break;\n                 }\n \n@@ -1377,7 +1379,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // after any wallet rescanning has taken place.\n     if (fPruneMode) {\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n-        nLocalServices &= ~NODE_NETWORK;\n+        nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {\n             uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n             PruneAndFlush();\n@@ -1390,34 +1392,36 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         // end time to 0.\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n-        nLocalServices |= NODE_WITNESS;\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n         // Only care about others providing witness capabilities if there is a softfork\n         // defined.\n-        nRelevantServices |= NODE_WITNESS;\n+        nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS);\n     }\n \n     // ********************************************************* Step 10: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    uiInterface.InitMessage(_(\"Activating best chain...\"));\n-    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    CValidationState state;\n-    if (!ActivateBestChain(state, chainparams))\n-        strErrors << \"Failed to connect best block\";\n-\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n-    if (chainActive.Tip() == NULL) {\n-        LogPrintf(\"Waiting for genesis block to be imported...\\n\");\n-        while (!fRequestShutdown && chainActive.Tip() == NULL)\n+\n+    // Wait for genesis block to be processed\n+    bool fHaveGenesis = false;\n+    while (!fHaveGenesis && !fRequestShutdown) {\n+        {\n+            LOCK(cs_main);\n+            fHaveGenesis = (chainActive.Tip() != NULL);\n+        }\n+\n+        if (!fHaveGenesis) {\n             MilliSleep(10);\n+        }\n     }\n \n     // ********************************************************* Step 11: start node\n@@ -1428,8 +1432,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (!strErrors.str().empty())\n         return InitError(strErrors.str());\n \n-    RandAddSeedPerfmon();\n-\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());"
      },
      {
        "sha": "79023566c3e61fb6e1f1ef1f01c52cfec6273bd6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -124,9 +124,8 @@ bool CKey::Check(const unsigned char *vch) {\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n-    RandAddSeedPerfmon();\n     do {\n-        GetRandBytes(vch, sizeof(vch));\n+        GetStrongRandBytes(vch, sizeof(vch));\n     } while (!Check(vch));\n     fValid = true;\n     fCompressed = fCompressedIn;"
      },
      {
        "sha": "d568a7435098adba6596ee0b93535c28e2eac524",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -19,6 +19,7 @@ bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) con\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n+        LOCK(cs_KeyStore);\n         WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n         if (it != mapWatchKeys.end()) {\n             vchPubKeyOut = it->second;"
      },
      {
        "sha": "6cdd55e3979dfb528f6b67a9c8a5d865b36e63e4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 845,
        "deletions": 262,
        "changes": 1107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "2ffe5770dccb031556cfb86d13053cf4c858a296",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 23,
        "deletions": 92,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -56,6 +56,10 @@ static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Expiration time for orphan transactions in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */\n@@ -99,9 +103,12 @@ static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;\n /** Average delay between peer address broadcasts in seconds. */\n static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n-/** Average delay between trickled inventory broadcasts in seconds.\n- *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n-static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventory items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n /** Average delay between feefilter broadcasts in seconds. */\n static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n@@ -210,10 +217,10 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n+ * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -293,7 +300,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n@@ -308,30 +315,6 @@ struct CNodeStateStats {\n     std::vector<int> vHeightInFlight;\n };\n \n-struct CDiskTxPos : public CDiskBlockPos\n-{\n-    unsigned int nTxOffset; // after header\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CDiskBlockPos*)this);\n-        READWRITE(VARINT(nTxOffset));\n-    }\n-\n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n-    }\n-\n-    CDiskTxPos() {\n-        SetNull();\n-    }\n-\n-    void SetNull() {\n-        CDiskBlockPos::SetNull();\n-        nTxOffset = 0;\n-    }\n-};\n \n \n /** \n@@ -368,7 +351,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                  unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n-void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n+void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n@@ -457,19 +440,20 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins,\n+                  const CChainParams& chainparams, bool fJustCheck = false);\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n@@ -492,61 +476,6 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n /** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n-\n-class CBlockFileInfo\n-{\n-public:\n-    unsigned int nBlocks;      //!< number of blocks stored in file\n-    unsigned int nSize;        //!< number of used bytes of block file\n-    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n-    unsigned int nHeightFirst; //!< lowest height of block in file\n-    unsigned int nHeightLast;  //!< highest height of block in file\n-    uint64_t nTimeFirst;       //!< earliest time of block in file\n-    uint64_t nTimeLast;        //!< latest time of block in file\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n-    }\n-\n-     void SetNull() {\n-         nBlocks = 0;\n-         nSize = 0;\n-         nUndoSize = 0;\n-         nHeightFirst = 0;\n-         nHeightLast = 0;\n-         nTimeFirst = 0;\n-         nTimeLast = 0;\n-     }\n-\n-     CBlockFileInfo() {\n-         SetNull();\n-     }\n-\n-     std::string ToString() const;\n-\n-     /** update statistics (does not update nSize) */\n-     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n-         if (nBlocks==0 || nHeightFirst > nHeightIn)\n-             nHeightFirst = nHeightIn;\n-         if (nBlocks==0 || nTimeFirst > nTimeIn)\n-             nTimeFirst = nTimeIn;\n-         nBlocks++;\n-         if (nHeightIn > nHeightLast)\n-             nHeightLast = nHeightIn;\n-         if (nTimeIn > nTimeLast)\n-             nTimeLast = nTimeIn;\n-     }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:\n@@ -559,10 +488,10 @@ class CVerifyDB {\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n@@ -580,6 +509,8 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+extern VersionBitsCache versionbitscache;\n+\n /**\n  * Determine what nVersion a new block should use.\n  */"
      },
      {
        "sha": "3810bfad07a919083ce60f61eb2f75ee5ac0d778",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_MEMUSAGE_H\n #define BITCOIN_MEMUSAGE_H\n \n+#include \"indirectmap.h\"\n+\n #include <stdlib.h>\n \n #include <map>\n@@ -70,6 +72,15 @@ struct stl_tree_node\n     X x;\n };\n \n+struct stl_shared_counter\n+{\n+    /* Various platforms use different sized counters here.\n+     * Conservatively assume that they won't be larger than size_t. */\n+    void* class_type;\n+    size_t use_count;\n+    size_t weak_count;\n+};\n+\n template<typename X>\n static inline size_t DynamicUsage(const std::vector<X>& v)\n {\n@@ -106,6 +117,35 @@ static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n }\n \n+// indirectmap has underlying map with pointer as key\n+\n+template<typename X, typename Y>\n+static inline size_t DynamicUsage(const indirectmap<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >)) * m.size();\n+}\n+\n+template<typename X, typename Y>\n+static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n+}\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::unique_ptr<X>& p)\n+{\n+    return p ? MallocUsage(sizeof(X)) : 0;\n+}\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n+{\n+    // A shared_ptr can either use a single continuous memory block for both\n+    // the counter and the storage (when using std::make_shared), or separate.\n+    // We can't observe the difference, however, so assume the worst.\n+    return p ? MallocUsage(sizeof(X)) + MallocUsage(sizeof(stl_shared_counter)) : 0;\n+}\n+\n // Boost data structures\n \n template<typename X>"
      },
      {
        "sha": "cfc2dae56ee4975ca3774f0c4aa5d8aaf6de804e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 508,
        "deletions": 202,
        "changes": 710,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -25,6 +25,7 @@\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n \n+#include <algorithm>\n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <queue>\n@@ -72,32 +73,15 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n+BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n+    : chainparams(_chainparams)\n {\n-    // Create new block\n-    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n-    if(!pblocktemplate.get())\n-        return NULL;\n-    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n-\n-    // Create coinbase tx\n-    CMutableTransaction txNew;\n-    txNew.vin.resize(1);\n-    txNew.vin[0].prevout.SetNull();\n-    txNew.vout.resize(1);\n-    txNew.vout[0].scriptPubKey = scriptPubKeyIn;\n-\n-    // Add dummy coinbase tx as first transaction\n-    pblock->vtx.push_back(CTransaction());\n-    pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n-\n     // Block resource limits\n     // If neither -blockmaxsize or -blockmaxcost is given, limit to DEFAULT_BLOCK_MAX_*\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n-    unsigned int nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n-    unsigned int nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n+    nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n+    nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n     bool fCostSet = false;\n     if (mapArgs.count(\"-blockmaxcost\")) {\n         nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n@@ -115,225 +99,547 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n \n-    // How much of the block should be dedicated to high-priority transactions,\n-    // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n-    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n-\n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n+    nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Whether we need to account for byte usage (in addition to cost usage)\n-    bool fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000) || (nBlockPrioritySize > 0) || (nBlockMinSize > 0);\n+    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000) || (nBlockMinSize > 0);\n+}\n \n-    // Collect memory pool transactions into the block\n-    CTxMemPool::setEntries inBlock;\n-    CTxMemPool::setEntries waitSet;\n+void BlockAssembler::resetBlock()\n+{\n+    inBlock.clear();\n \n-    // This vector will be sorted into a priority queue:\n-    vector<TxCoinAgePriority> vecPriority;\n-    TxCoinAgePriorityCompare pricomparer;\n-    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n-    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n-    double actualPriority = -1;\n+    // Reserve space for coinbase tx\n+    nBlockSize = 1000;\n+    nBlockCost = 4000;\n+    nBlockSigOpsCost = 400;\n+    fIncludeWitness = false;\n \n-    std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n-    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-    uint64_t nBlockSize = 1000;\n-    uint64_t nBlockCost = nBlockSize * WITNESS_SCALE_FACTOR;\n-    uint64_t nBlockTx = 0;\n-    int64_t nBlockSigOpsCost = 400;\n-    int lastFewTxs = 0;\n-    CAmount nFees = 0;\n+    // These counters do not include coinbase tx\n+    nBlockTx = 0;\n+    nFees = 0;\n+\n+    lastFewTxs = 0;\n+    blockFinished = false;\n+}\n+\n+CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+{\n+    resetBlock();\n+\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get())\n+        return NULL;\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.push_back(CTransaction());\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    LOCK2(cs_main, mempool.cs);\n+    CBlockIndex* pindexPrev = chainActive.Tip();\n+    nHeight = pindexPrev->nHeight + 1;\n+\n+    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    // -regtest only: allow overriding block.nVersion with\n+    // -blockversion=N to test forking scenarios\n+    if (chainparams.MineBlocksOnDemand())\n+        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                       ? nMedianTimePast\n+                       : pblock->GetBlockTime();\n+\n+    // Decide whether to include witness transactions\n+    // This is only needed in case the witness softfork activation is reverted\n+    // (which would require a very deep reorganization) or when\n+    // -promiscuousmempoolflags is used.\n+    // TODO: replace this with a call to main to assess validity of a mempool\n+    // transaction (which in most cases can be a no-op).\n+    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+\n+    addPriorityTxs();\n+    if (fNeedSizeAccounting) {\n+        // addPackageTxs (the CPFP-based algorithm) cannot deal with size based\n+        // accounting, so fall back to the old algorithm.\n+        addScoreTxs();\n+    } else {\n+        addPackageTxs();\n+    }\n+\n+    nLastBlockTx = nBlockTx;\n+    nLastBlockSize = nBlockSize;\n+    nLastBlockCost = nBlockCost;\n+    LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOpsCost);\n+\n+    // Create coinbase transaction.\n+    CMutableTransaction coinbaseTx;\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n+    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+    pblock->vtx[0] = coinbaseTx;\n+    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n+    pblocktemplate->vTxFees[0] = -nFees;\n+\n+    // Fill in header\n+    pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n+    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n+    pblock->nNonce         = 0;\n+    pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+\n+    CValidationState state;\n+    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+    }\n \n+    return pblocktemplate.release();\n+}\n+\n+bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n+{\n+    BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n     {\n-        LOCK2(cs_main, mempool.cs);\n-        CBlockIndex* pindexPrev = chainActive.Tip();\n-        const int nHeight = pindexPrev->nHeight + 1;\n-        pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n-\n-        pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n-        // -regtest only: allow overriding block.nVersion with\n-        // -blockversion=N to test forking scenarios\n-        if (chainparams.MineBlocksOnDemand())\n-            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n-        // Decide whether to include witness transactions\n-        // This is only needed in case the witness softfork activation is reverted\n-        // (which would require a very deep reorganization) or when\n-        // -promiscuousmempoolflags is used.\n-        // TODO: replace this with a call to main to assess validity of a mempool\n-        // transaction (which in most cases can be a no-op).\n-        bool fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n-\n-        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? nMedianTimePast\n-                                : pblock->GetBlockTime();\n-\n-        bool fPriorityBlock = nBlockPrioritySize > 0;\n-        if (fPriorityBlock) {\n-            vecPriority.reserve(mempool.mapTx.size());\n-            for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-                 mi != mempool.mapTx.end(); ++mi)\n-            {\n-                double dPriority = mi->GetPriority(nHeight);\n-                CAmount dummy;\n-                mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n-                vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n-            }\n-            std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+        if (!inBlock.count(parent)) {\n+            return true;\n         }\n+    }\n+    return false;\n+}\n \n-        CTxMemPool::indexed_transaction_set::index<mining_score>::type::iterator mi = mempool.mapTx.get<mining_score>().begin();\n-        CTxMemPool::txiter iter;\n-\n-        while (mi != mempool.mapTx.get<mining_score>().end() || !clearedTxs.empty())\n-        {\n-            bool priorityTx = false;\n-            if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n-                priorityTx = true;\n-                iter = vecPriority.front().second;\n-                actualPriority = vecPriority.front().first;\n-                std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-                vecPriority.pop_back();\n-            }\n-            else if (clearedTxs.empty()) { // add tx with next highest score\n-                iter = mempool.mapTx.project<0>(mi);\n-                mi++;\n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}\n+\n+bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)\n+{\n+    // TODO: switch to cost-based accounting for packages instead of vsize-based accounting.\n+    if (nBlockCost + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxCost)\n+        return false;\n+    if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n+        return false;\n+    return true;\n+}\n+\n+// Block size and sigops have already been tested.  Check that all transactions\n+// are final.\n+bool BlockAssembler::TestPackageFinality(const CTxMemPool::setEntries& package)\n+{\n+    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+        if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n+{\n+    if (nBlockCost + iter->GetTxCost() >= nBlockMaxCost) {\n+        // If the block is so close to full that no more txs will fit\n+        // or if we've tried more than 50 times to fill remaining space\n+        // then flag that the block is finished\n+        if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n+             blockFinished = true;\n+             return false;\n+        }\n+        // Once we're within 4000 cost of a full block, only look at 50 more txs\n+        // to try to fill the remaining space.\n+        if (nBlockCost > nBlockMaxCost - 4000) {\n+            lastFewTxs++;\n+        }\n+        return false;\n+    }\n+\n+    if (fNeedSizeAccounting) {\n+        if (nBlockSize + ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) >= nBlockMaxSize) {\n+            if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                 blockFinished = true;\n+                 return false;\n             }\n-            else {  // try to add a previously postponed child tx\n-                iter = clearedTxs.top();\n-                clearedTxs.pop();\n+            if (nBlockSize > nBlockMaxSize - 1000) {\n+                lastFewTxs++;\n             }\n+            return false;\n+        }\n+    }\n \n-            if (inBlock.count(iter))\n-                continue; // could have been added to the priorityBlock\n+    if (nBlockSigOpsCost + iter->GetSigOpCost() >= MAX_BLOCK_SIGOPS_COST) {\n+        // If the block has room for no more sig ops then\n+        // flag that the block is finished\n+        if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n+            blockFinished = true;\n+            return false;\n+        }\n+        // Otherwise attempt to find another tx with fewer sigops\n+        // to put in the block.\n+        return false;\n+    }\n \n-            const CTransaction& tx = iter->GetTx();\n+    // Must check that lock times are still valid\n+    // This can be removed once MTP is always enforced\n+    // as long as reorgs keep the mempool consistent.\n+    if (!IsFinalTx(iter->GetTx(), nHeight, nLockTimeCutoff))\n+        return false;\n \n-            if (!fIncludeWitness && !tx.wit.IsNull())\n-                continue; // cannot accept witness transactions into a non-witness block\n+    return true;\n+}\n \n-            bool fOrphan = false;\n-            BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n+void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+{\n+    pblock->vtx.push_back(iter->GetTx());\n+    pblocktemplate->vTxFees.push_back(iter->GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n+    if (fNeedSizeAccounting) {\n+        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n+    }\n+    nBlockCost += iter->GetTxCost();\n+    ++nBlockTx;\n+    nBlockSigOpsCost += iter->GetSigOpCost();\n+    nFees += iter->GetFee();\n+    inBlock.insert(iter);\n+\n+    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    if (fPrintPriority) {\n+        double dPriority = iter->GetPriority(nHeight);\n+        CAmount dummy;\n+        mempool.ApplyDeltas(iter->GetTx().GetHash(), dPriority, dummy);\n+        LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n+                  dPriority,\n+                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n+                  iter->GetTx().GetHash().ToString());\n+    }\n+}\n+\n+void BlockAssembler::addScoreTxs()\n+{\n+    std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n+    CTxMemPool::setEntries waitSet;\n+    CTxMemPool::indexed_transaction_set::index<mining_score>::type::iterator mi = mempool.mapTx.get<mining_score>().begin();\n+    CTxMemPool::txiter iter;\n+    while (!blockFinished && (mi != mempool.mapTx.get<mining_score>().end() || !clearedTxs.empty()))\n+    {\n+        // If no txs that were previously postponed are available to try\n+        // again, then try the next highest score tx\n+        if (clearedTxs.empty()) {\n+            iter = mempool.mapTx.project<0>(mi);\n+            mi++;\n+        }\n+        // If a previously postponed tx is available to try again, then it\n+        // has higher score than all untried so far txs\n+        else {\n+            iter = clearedTxs.top();\n+            clearedTxs.pop();\n+        }\n+\n+        // If tx already in block, skip  (added by addPriorityTxs)\n+        if (inBlock.count(iter)) {\n+            continue;\n+        }\n+\n+        // cannot accept witness transactions into a non-witness block\n+        if (!fIncludeWitness && !iter->GetTx().wit.IsNull())\n+            continue;\n+\n+        // If tx is dependent on other mempool txs which haven't yet been included\n+        // then put it in the waitSet\n+        if (isStillDependent(iter)) {\n+            waitSet.insert(iter);\n+            continue;\n+        }\n+\n+        // If the fee rate is below the min fee rate for mining, then we're done\n+        // adding txs based on score (fee rate)\n+        if (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(iter->GetTxSize()) && nBlockSize >= nBlockMinSize) {\n+            return;\n+        }\n+\n+        // If this tx fits in the block add it, otherwise keep looping\n+        if (TestForBlock(iter)) {\n+            AddToBlock(iter);\n+\n+            // This tx was successfully added, so\n+            // add transactions that depend on this one to the priority queue to try again\n+            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n             {\n-                if (!inBlock.count(parent)) {\n-                    fOrphan = true;\n-                    break;\n+                if (waitSet.count(child)) {\n+                    clearedTxs.push(child);\n+                    waitSet.erase(child);\n                 }\n             }\n-            if (fOrphan) {\n-                if (priorityTx)\n-                    waitPriMap.insert(std::make_pair(iter,actualPriority));\n-                else\n-                    waitSet.insert(iter);\n+        }\n+    }\n+}\n+\n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n+        indexed_modified_transaction_set &mapModifiedTx)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n                 continue;\n+            modtxiter mit = mapModifiedTx.find(desc);\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCostWithAncestors -= it->GetSigOpCost();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n             }\n+        }\n+    }\n+}\n \n-            unsigned int nTxSize = fNeedSizeAccounting ? ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) : 0;\n-            int64_t nTxCost = iter->GetTxCost();\n-            if (fPriorityBlock &&\n-                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n-                fPriorityBlock = false;\n-                waitPriMap.clear();\n-            }\n-            if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n-                break;\n-            }\n-            if (nBlockSize + nTxSize >= nBlockMaxSize || nBlockCost + nTxCost > nBlockMaxCost) {\n-                if (nBlockSize > nBlockMaxSize - 100 || nBlockCost > nBlockMaxCost - 400 || lastFewTxs > 50) {\n-                    break;\n-                }\n-                // Once we're within 1000 bytes (or 4000 cost) of a full block,\n-                // only look at 50 more txs to try to fill the remaining space.\n-                if (nBlockSize > nBlockMaxSize - 1000 || nBlockCost > nBlockMaxCost - 4000) {\n-                    lastFewTxs++;\n-                }\n-                continue;\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // mapModifiedTx will store sorted packages after they are modified\n+    // because some of their txs are already in the block\n+    indexed_modified_transaction_set mapModifiedTx;\n+    // Keep track of entries that failed inclusion, to avoid duplicate work\n+    CTxMemPool::setEntries failedTx;\n+\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock, mapModifiedTx);\n+\n+    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n+    CTxMemPool::txiter iter;\n+    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n+    {\n+        // First try to find a new transaction in mapTx to evaluate.\n+        if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n+                SkipMapTxEntry(mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n+            ++mi;\n+            continue;\n+        }\n+\n+        // Now that mi is not stale, determine which transaction to evaluate:\n+        // the next entry from mapTx, or the best from mapModifiedTx?\n+        bool fUsingModified = false;\n+\n+        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n+        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n+            // We're out of entries in mapTx; use the entry from mapModifiedTx\n+            iter = modit->iter;\n+            fUsingModified = true;\n+        } else {\n+            // Try to compare the mapTx entry to the mapModifiedTx entry\n+            iter = mempool.mapTx.project<0>(mi);\n+            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n+                    CompareModifiedEntry()(*modit, CTxMemPoolModifiedEntry(iter))) {\n+                // The best entry in mapModifiedTx has higher score\n+                // than the one from mapTx.\n+                // Switch which transaction (package) to consider\n+                iter = modit->iter;\n+                fUsingModified = true;\n+            } else {\n+                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n+                // Increment mi for the next loop iteration.\n+                ++mi;\n             }\n+        }\n \n-            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n-                continue;\n+        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n+        // contain anything that is inBlock.\n+        assert(!inBlock.count(iter));\n+\n+        uint64_t packageSize = iter->GetSizeWithAncestors();\n+        CAmount packageFees = iter->GetModFeesWithAncestors();\n+        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n+        if (fUsingModified) {\n+            packageSize = modit->nSizeWithAncestors;\n+            packageFees = modit->nModFeesWithAncestors;\n+            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n+        }\n \n-            int64_t nTxSigOpsCost = iter->GetSigOpCost();\n-            if (nBlockSigOpsCost + nTxSigOpsCost >= MAX_BLOCK_SIGOPS_COST) {\n-                if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n-                    break;\n-                }\n-                continue;\n+        if (packageFees < ::minRelayTxFee.GetFee(packageSize)) {\n+            // Everything else we might consider has a lower fee rate\n+            return;\n+        }\n+\n+        if (!TestPackage(packageSize, packageSigOpsCost)) {\n+            if (fUsingModified) {\n+                // Since we always look at the best entry in mapModifiedTx,\n+                // we must erase failed entries so that we can consider the\n+                // next best entry on the next loop iteration\n+                mapModifiedTx.get<ancestor_score>().erase(modit);\n+                failedTx.insert(iter);\n             }\n+            continue;\n+        }\n \n-            CAmount nTxFees = iter->GetFee();\n-            // Added\n-            pblock->vtx.push_back(tx);\n-            pblocktemplate->vTxFees.push_back(nTxFees);\n-            pblocktemplate->vTxSigOpsCost.push_back(nTxSigOpsCost);\n-            nBlockSize += nTxSize;\n-            nBlockCost += nTxCost;\n-            ++nBlockTx;\n-            nBlockSigOpsCost += nTxSigOpsCost;\n-            nFees += nTxFees;\n-\n-            if (fPrintPriority)\n-            {\n-                double dPriority = iter->GetPriority(nHeight);\n-                CAmount dummy;\n-                mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n-                LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                          dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n+        CTxMemPool::setEntries ancestors;\n+        uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+        std::string dummy;\n+        mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+\n+        onlyUnconfirmed(ancestors);\n+        ancestors.insert(iter);\n+\n+        // Test if all tx's are Final\n+        if (!TestPackageFinality(ancestors)) {\n+            if (fUsingModified) {\n+                mapModifiedTx.get<ancestor_score>().erase(modit);\n+                failedTx.insert(iter);\n             }\n+            continue;\n+        }\n \n-            inBlock.insert(iter);\n+        // Package can be added. Sort the entries in a valid order.\n+        vector<CTxMemPool::txiter> sortedEntries;\n+        SortForBlock(ancestors, iter, sortedEntries);\n+\n+        for (size_t i=0; i<sortedEntries.size(); ++i) {\n+            AddToBlock(sortedEntries[i]);\n+            // Erase from the modified set, if present\n+            mapModifiedTx.erase(sortedEntries[i]);\n+        }\n+\n+        // Update transactions that depend on each of these\n+        UpdatePackagesForAdded(ancestors, mapModifiedTx);\n+    }\n+}\n \n-            // Add transactions that depend on this one to the priority queue\n+void BlockAssembler::addPriorityTxs()\n+{\n+    // How much of the block should be dedicated to high-priority transactions,\n+    // included regardless of the fees they pay\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n+\n+    if (nBlockPrioritySize == 0) {\n+        return;\n+    }\n+\n+    fNeedSizeAccounting = true;\n+\n+    // This vector will be sorted into a priority queue:\n+    vector<TxCoinAgePriority> vecPriority;\n+    TxCoinAgePriorityCompare pricomparer;\n+    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n+    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n+    double actualPriority = -1;\n+\n+    vecPriority.reserve(mempool.mapTx.size());\n+    for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n+         mi != mempool.mapTx.end(); ++mi)\n+    {\n+        double dPriority = mi->GetPriority(nHeight);\n+        CAmount dummy;\n+        mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+        vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n+    }\n+    std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+\n+    CTxMemPool::txiter iter;\n+    while (!vecPriority.empty() && !blockFinished) { // add a tx from priority queue to fill the blockprioritysize\n+        iter = vecPriority.front().second;\n+        actualPriority = vecPriority.front().first;\n+        std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+        vecPriority.pop_back();\n+\n+        // If tx already in block, skip\n+        if (inBlock.count(iter)) {\n+            assert(false); // shouldn't happen for priority txs\n+            continue;\n+        }\n+\n+        // cannot accept witness transactions into a non-witness block\n+        if (!fIncludeWitness && !iter->GetTx().wit.IsNull())\n+            continue;\n+\n+        // If tx is dependent on other mempool txs which haven't yet been included\n+        // then put it in the waitSet\n+        if (isStillDependent(iter)) {\n+            waitPriMap.insert(std::make_pair(iter, actualPriority));\n+            continue;\n+        }\n+\n+        // If this tx fits in the block add it, otherwise keep looping\n+        if (TestForBlock(iter)) {\n+            AddToBlock(iter);\n+\n+            // If now that this txs is added we've surpassed our desired priority size\n+            // or have dropped below the AllowFreeThreshold, then we're done adding priority txs\n+            if (nBlockSize >= nBlockPrioritySize || !AllowFree(actualPriority)) {\n+                return;\n+            }\n+\n+            // This tx was successfully added, so\n+            // add transactions that depend on this one to the priority queue to try again\n             BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n             {\n-                if (fPriorityBlock) {\n-                    waitPriIter wpiter = waitPriMap.find(child);\n-                    if (wpiter != waitPriMap.end()) {\n-                        vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n-                        std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-                        waitPriMap.erase(wpiter);\n-                    }\n-                }\n-                else {\n-                    if (waitSet.count(child)) {\n-                        clearedTxs.push(child);\n-                        waitSet.erase(child);\n-                    }\n+                waitPriIter wpiter = waitPriMap.find(child);\n+                if (wpiter != waitPriMap.end()) {\n+                    vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n+                    std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                    waitPriMap.erase(wpiter);\n                 }\n             }\n         }\n-        nLastBlockTx = nBlockTx;\n-        nLastBlockSize = nBlockSize;\n-        nLastBlockCost = nBlockCost;\n-        LogPrintf(\"CreateNewBlock(): total size %u cost %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockCost, nBlockTx, nFees, nBlockSigOpsCost);\n-\n-        // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n-        txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-        pblock->vtx[0] = txNew;\n-        pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n-        pblocktemplate->vTxFees[0] = -nFees;\n-\n-        // Fill in header\n-        pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n-        pblock->nNonce         = 0;\n-        pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]) * WITNESS_SCALE_FACTOR;\n-\n-        CValidationState state;\n-        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n-            throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n-        }\n     }\n-\n-    return pblocktemplate.release();\n }\n \n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)"
      },
      {
        "sha": "b303a8fa3ceb7dcf7d891116adab0c96e5dbb881",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 176,
        "deletions": 1,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -7,14 +7,19 @@\n #define BITCOIN_MINER_H\n \n #include \"primitives/block.h\"\n+#include \"txmempool.h\"\n \n #include <stdint.h>\n+#include <memory>\n+#include \"boost/multi_index_container.hpp\"\n+#include \"boost/multi_index/ordered_index.hpp\"\n \n class CBlockIndex;\n class CChainParams;\n class CReserveKey;\n class CScript;\n class CWallet;\n+\n namespace Consensus { struct Params; };\n \n static const bool DEFAULT_PRINTPRIORITY = false;\n@@ -27,8 +32,178 @@ struct CBlockTemplate\n     std::vector<unsigned char> vchCoinbaseCommitment;\n };\n \n+// Container for tracking updates to ancestor feerate as we include (parent)\n+// transactions in a block\n+struct CTxMemPoolModifiedEntry {\n+    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    {\n+        iter = entry;\n+        nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n+        nSigOpCostWithAncestors = entry->GetSigOpCostWithAncestors();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    int64_t nSigOpCostWithAncestors;\n+};\n+\n+/** Comparator for CTxMemPool::txiter objects.\n+ *  It simply compares the internal memory address of the CTxMemPoolEntry object\n+ *  pointed to. This means it has no meaning, and is only useful for using them\n+ *  as key in other indexes.\n+ */\n+struct CompareCTxMemPoolIter {\n+    bool operator()(const CTxMemPool::txiter& a, const CTxMemPool::txiter& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+struct modifiedentry_iter {\n+    typedef CTxMemPool::txiter result_type;\n+    result_type operator() (const CTxMemPoolModifiedEntry &entry) const\n+    {\n+        return entry.iter;\n+    }\n+};\n+\n+// This matches the calculation in CompareTxMemPoolEntryByAncestorFee,\n+// except operating on CTxMemPoolModifiedEntry.\n+// TODO: refactor to avoid duplication of this logic.\n+struct CompareModifiedEntry {\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    {\n+        double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n+        double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n+        if (f1 == f2) {\n+            return CTxMemPool::CompareIteratorByHash()(a.iter, b.iter);\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n+// A comparator that sorts transactions based on number of ancestors.\n+// This is sufficient to sort an ancestor package in an order that is valid\n+// to appear in a block.\n+struct CompareTxIterByAncestorCount {\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    {\n+        if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n+            return a->GetCountWithAncestors() < b->GetCountWithAncestors();\n+        return CTxMemPool::CompareIteratorByHash()(a, b);\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolModifiedEntry,\n+    boost::multi_index::indexed_by<\n+        boost::multi_index::ordered_unique<\n+            modifiedentry_iter,\n+            CompareCTxMemPoolIter\n+        >,\n+        // sorted by modified ancestor fee rate\n+        boost::multi_index::ordered_non_unique<\n+            // Reuse same tag from CTxMemPool's similar index\n+            boost::multi_index::tag<ancestor_score>,\n+            boost::multi_index::identity<CTxMemPoolModifiedEntry>,\n+            CompareModifiedEntry\n+        >\n+    >\n+> indexed_modified_transaction_set;\n+\n+typedef indexed_modified_transaction_set::nth_index<0>::type::iterator modtxiter;\n+typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator modtxscoreiter;\n+\n+struct update_for_parent_inclusion\n+{\n+    update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}\n+\n+    void operator() (CTxMemPoolModifiedEntry &e)\n+    {\n+        e.nModFeesWithAncestors -= iter->GetFee();\n+        e.nSizeWithAncestors -= iter->GetTxSize();\n+        e.nSigOpCostWithAncestors -= iter->GetSigOpCost();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+};\n+\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n+class BlockAssembler\n+{\n+private:\n+    // The constructed block template\n+    std::unique_ptr<CBlockTemplate> pblocktemplate;\n+    // A convenience pointer that always refers to the CBlock in pblocktemplate\n+    CBlock* pblock;\n+\n+    // Configuration parameters for the block size\n+    bool fIncludeWitness;\n+    unsigned int nBlockMaxCost, nBlockMaxSize, nBlockMinSize;\n+    bool fNeedSizeAccounting;\n+\n+    // Information on the current status of the block\n+    uint64_t nBlockCost;\n+    uint64_t nBlockSize;\n+    uint64_t nBlockTx;\n+    uint64_t nBlockSigOpsCost;\n+    CAmount nFees;\n+    CTxMemPool::setEntries inBlock;\n+\n+    // Chain context for the block\n+    int nHeight;\n+    int64_t nLockTimeCutoff;\n+    const CChainParams& chainparams;\n+\n+    // Variables used for addScoreTxs and addPriorityTxs\n+    int lastFewTxs;\n+    bool blockFinished;\n+\n+public:\n+    BlockAssembler(const CChainParams& chainparams);\n+    /** Construct a new block template with coinbase to scriptPubKeyIn */\n+    CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+\n+private:\n+    // utility functions\n+    /** Clear the block's state and prepare for assembling a new block */\n+    void resetBlock();\n+    /** Add a tx to the block */\n+    void AddToBlock(CTxMemPool::txiter iter);\n+\n+    // Methods for how to add transactions to a block.\n+    /** Add transactions based on modified feerate */\n+    void addScoreTxs();\n+    /** Add transactions based on tx \"priority\" */\n+    void addPriorityTxs();\n+    /** Add transactions based on feerate including unconfirmed ancestors */\n+    void addPackageTxs();\n+\n+    // helper function for addScoreTxs and addPriorityTxs\n+    /** Test if tx will still \"fit\" in the block */\n+    bool TestForBlock(CTxMemPool::txiter iter);\n+    /** Test if tx still has unconfirmed parents not yet in block */\n+    bool isStillDependent(CTxMemPool::txiter iter);\n+\n+    // helper functions for addPackageTxs()\n+    /** Remove confirmed (inBlock) entries from given set */\n+    void onlyUnconfirmed(CTxMemPool::setEntries& testSet);\n+    /** Test if a new package would \"fit\" in the block */\n+    bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost);\n+    /** Test if a set of transactions are all final */\n+    bool TestPackageFinality(const CTxMemPool::setEntries& package);\n+    /** Return true if given transaction from mapTx has already been evaluated,\n+      * or if the transaction's cached data in mapTx is incorrect. */\n+    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n+    /** Sort the package in an order that is valid to appear in a block */\n+    void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries);\n+    /** Add descendants of given transactions to mapModifiedTx with ancestor\n+      * state updated assuming given transactions are inBlock. */\n+    void UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx);\n+};\n+\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "4cbc43e4d842587f5013be33a14783308640ce6c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 323,
        "deletions": 264,
        "changes": 587,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"crypto/common.h\"\n+#include \"crypto/sha256.h\"\n #include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n@@ -56,7 +57,6 @@\n #endif\n #endif\n \n-using namespace std;\n \n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n@@ -72,16 +72,17 @@ namespace {\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n /** Services this node implementation cares about */\n-uint64_t nRelevantServices = NODE_NETWORK;\n+ServiceFlags nRelevantServices = NODE_NETWORK;\n \n //\n // Global state variables\n //\n bool fDiscover = true;\n bool fListen = true;\n-uint64_t nLocalServices = NODE_NETWORK;\n+ServiceFlags nLocalServices = NODE_NETWORK;\n+bool fRelayTxes = true;\n CCriticalSection cs_mapLocalHost;\n-map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n@@ -91,20 +92,14 @@ int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n bool fAddressesInitialized = false;\n std::string strSubVersion;\n \n-vector<CNode*> vNodes;\n+std::vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n-map<uint256, CTransaction> mapRelay;\n-deque<pair<int64_t, uint256> > vRelayExpiration;\n-CCriticalSection cs_mapRelay;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-static deque<string> vOneShots;\n+static std::deque<std::string> vOneShots;\n CCriticalSection cs_vOneShots;\n \n-set<CNetAddr> setservAddNodeAddresses;\n-CCriticalSection cs_setservAddNodeAddresses;\n-\n-vector<std::string> vAddedNodes;\n+std::vector<std::string> vAddedNodes;\n CCriticalSection cs_vAddedNodes;\n \n NodeId nLastNodeId = 0;\n@@ -138,7 +133,7 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n         {\n             int nScore = (*it).second.nScore;\n             int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n@@ -167,7 +162,7 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n     {\n         struct in6_addr ip;\n         memcpy(&ip, i->addr, sizeof(ip));\n-        CAddress addr(CService(ip, i->port));\n+        CAddress addr(CService(ip, i->port), NODE_NETWORK);\n         addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n         vSeedsOut.push_back(addr);\n     }\n@@ -180,13 +175,12 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n // one by discovery.\n CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n {\n-    CAddress ret(CService(\"0.0.0.0\",GetListenPort()),0);\n+    CAddress ret(CService(\"0.0.0.0\",GetListenPort()), NODE_NONE);\n     CService addr;\n     if (GetLocal(addr, paddrPeer))\n     {\n-        ret = CAddress(addr);\n+        ret = CAddress(addr, nLocalServices);\n     }\n-    ret.nServices = nLocalServices;\n     ret.nTime = GetAdjustedTime();\n     return ret;\n }\n@@ -374,7 +368,17 @@ CNode* FindNode(const CService& addr)\n     return NULL;\n }\n \n-CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n+//TODO: This is used in only one place in main, and should be removed\n+CNode* FindNode(const NodeId nodeid)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+        if (pnode->GetId() == nodeid)\n+            return (pnode);\n+    return NULL;\n+}\n+\n+CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n@@ -406,7 +410,27 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n             return NULL;\n         }\n \n-        addrman.Attempt(addrConnect);\n+        if (pszDest && addrConnect.IsValid()) {\n+            // It is possible that we already have a connection to the IP/port pszDest resolved to.\n+            // In that case, drop the connection that was just created, and return the existing CNode instead.\n+            // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n+            // name catch this early.\n+            CNode* pnode = FindNode((CService)addrConnect);\n+            if (pnode)\n+            {\n+                pnode->AddRef();\n+                {\n+                    LOCK(cs_vNodes);\n+                    if (pnode->addrName.empty()) {\n+                        pnode->addrName = std::string(pszDest);\n+                    }\n+                }\n+                CloseSocket(hSocket);\n+                return pnode;\n+            }\n+        }\n+\n+        addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n         CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n@@ -417,19 +441,39 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n             vNodes.push_back(pnode);\n         }\n \n-        pnode->nServicesExpected = addrConnect.nServices & nRelevantServices;\n+        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->nTimeConnected = GetTime();\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n         // If connecting to the node failed, and failure is not caused by a problem connecting to\n         // the proxy, mark this as an attempt.\n-        addrman.Attempt(addrConnect);\n+        addrman.Attempt(addrConnect, fCountFailure);\n     }\n \n     return NULL;\n }\n \n+static void DumpBanlist()\n+{\n+    CNode::SweepBanned(); // clean unused entries (if bantime has expired)\n+\n+    if (!CNode::BannedSetIsDirty())\n+        return;\n+\n+    int64_t nStart = GetTimeMillis();\n+\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    CNode::SetBannedSetDirty(false);\n+    CNode::GetBanned(banmap);\n+    if (!bandb.Write(banmap))\n+        CNode::SetBannedSetDirty(true);\n+\n+    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+        banmap.size(), GetTimeMillis() - nStart);\n+}\n+\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n@@ -447,18 +491,18 @@ void CNode::CloseSocketDisconnect()\n \n void CNode::PushVersion()\n {\n-    int nBestHeight = g_signals.GetHeight().get_value_or(0);\n+    int nBestHeight = GetNodeSignals().GetHeight().get_value_or(0);\n \n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n-    CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(\"0.0.0.0\",0)));\n+    CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(\"0.0.0.0\", 0), addr.nServices));\n     CAddress addrMe = GetLocalAddress(&addr);\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     if (fLogIPs)\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n-    PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY));\n+    PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalServices, nTime, addrYou, addrMe,\n+                nLocalHostNonce, strSubVersion, nBestHeight, ::fRelayTxes);\n }\n \n \n@@ -471,9 +515,13 @@ bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n-    LOCK(cs_setBanned);\n-    setBanned.clear();\n-    setBannedIsDirty = true;\n+    {\n+        LOCK(cs_setBanned);\n+        setBanned.clear();\n+        setBannedIsDirty = true;\n+    }\n+    DumpBanlist(); //store banlist to disk\n+    uiInterface.BannedListChanged();\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n@@ -524,11 +572,25 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-    LOCK(cs_setBanned);\n-    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n-        setBanned[subNet] = banEntry;\n-\n-    setBannedIsDirty = true;\n+    {\n+        LOCK(cs_setBanned);\n+        if (setBanned[subNet].nBanUntil < banEntry.nBanUntil) {\n+            setBanned[subNet] = banEntry;\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            return;\n+    }\n+    uiInterface.BannedListChanged();\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes) {\n+            if (subNet.Match((CNetAddr)pnode->addr))\n+                pnode->fDisconnect = true;\n+        }\n+    }\n+    if(banReason == BanReasonManuallyAdded)\n+        DumpBanlist(); //store banlist to disk immediately if user requested ban\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n@@ -537,13 +599,15 @@ bool CNode::Unban(const CNetAddr &addr) {\n }\n \n bool CNode::Unban(const CSubNet &subNet) {\n-    LOCK(cs_setBanned);\n-    if (setBanned.erase(subNet))\n     {\n+        LOCK(cs_setBanned);\n+        if (!setBanned.erase(subNet))\n+            return false;\n         setBannedIsDirty = true;\n-        return true;\n     }\n-    return false;\n+    uiInterface.BannedListChanged();\n+    DumpBanlist(); //store banlist to disk immediately\n+    return true;\n }\n \n void CNode::GetBanned(banmap_t &banMap)\n@@ -800,89 +864,63 @@ void SocketSendData(CNode *pnode)\n     pnode->vSendMsg.erase(pnode->vSendMsg.begin(), it);\n }\n \n-static list<CNode*> vNodesDisconnected;\n-\n-class CNodeRef {\n-public:\n-    CNodeRef(CNode *pnode) : _pnode(pnode) {\n-        LOCK(cs_vNodes);\n-        _pnode->AddRef();\n-    }\n-\n-    ~CNodeRef() {\n-        LOCK(cs_vNodes);\n-        _pnode->Release();\n-    }\n-\n-    CNode& operator *() const {return *_pnode;};\n-    CNode* operator ->() const {return _pnode;};\n-\n-    CNodeRef& operator =(const CNodeRef& other)\n-    {\n-        if (this != &other) {\n-            LOCK(cs_vNodes);\n-\n-            _pnode->Release();\n-            _pnode = other._pnode;\n-            _pnode->AddRef();\n-        }\n-        return *this;\n-    }\n+static std::list<CNode*> vNodesDisconnected;\n \n-    CNodeRef(const CNodeRef& other):\n-        _pnode(other._pnode)\n-    {\n-        LOCK(cs_vNodes);\n-        _pnode->AddRef();\n-    }\n-private:\n-    CNode *_pnode;\n+struct NodeEvictionCandidate\n+{\n+    NodeId id;\n+    int64_t nTimeConnected;\n+    int64_t nMinPingUsecTime;\n+    int64_t nLastBlockTime;\n+    int64_t nLastTXTime;\n+    bool fNetworkNode;\n+    bool fRelayTxes;\n+    bool fBloomFilter;\n+    CAddress addr;\n+    uint64_t nKeyedNetGroup;\n };\n \n-static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n+static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n {\n-    return a->nMinPingUsecTime > b->nMinPingUsecTime;\n+    return a.nMinPingUsecTime > b.nMinPingUsecTime;\n }\n \n-static bool ReverseCompareNodeTimeConnected(const CNodeRef &a, const CNodeRef &b)\n+static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n {\n-    return a->nTimeConnected > b->nTimeConnected;\n+    return a.nTimeConnected > b.nTimeConnected;\n }\n \n-class CompareNetGroupKeyed\n-{\n-    std::vector<unsigned char> vchSecretKey;\n-public:\n-    CompareNetGroupKeyed()\n-    {\n-        vchSecretKey.resize(32, 0);\n-        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n-    }\n-\n-    bool operator()(const CNodeRef &a, const CNodeRef &b)\n-    {\n-        std::vector<unsigned char> vchGroupA, vchGroupB;\n-        CSHA256 hashA, hashB;\n-        std::vector<unsigned char> vchA(32), vchB(32);\n-\n-        vchGroupA = a->addr.GetGroup();\n-        vchGroupB = b->addr.GetGroup();\n-\n-        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n-        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n-\n-        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n+    return a.nKeyedNetGroup < b.nKeyedNetGroup;\n+}\n \n-        hashA.Finalize(begin_ptr(vchA));\n-        hashB.Finalize(begin_ptr(vchB));\n+static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n+{\n+    // There is a fall-through here because it is common for a node to have many peers which have not yet relayed a block.\n+    if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\n+    if (a.fNetworkNode != b.fNetworkNode) return b.fNetworkNode;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n \n-        return vchA < vchB;\n-    }\n-};\n+static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n+{\n+    // There is a fall-through here because it is common for a node to have more than a few peers that have not yet relayed txn.\n+    if (a.nLastTXTime != b.nLastTXTime) return a.nLastTXTime < b.nLastTXTime;\n+    if (a.fRelayTxes != b.fRelayTxes) return b.fRelayTxes;\n+    if (a.fBloomFilter != b.fBloomFilter) return a.fBloomFilter;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n \n-static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n-    std::vector<CNodeRef> vEvictionCandidates;\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+static bool AttemptToEvictConnection() {\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n \n@@ -893,7 +931,10 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            vEvictionCandidates.push_back(CNodeRef(node));\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime, node->fNetworkNode,\n+                                               node->fRelayTxes, node->pfilter != NULL, node->addr, node->nKeyedNetGroup};\n+            vEvictionCandidates.push_back(candidate);\n         }\n     }\n \n@@ -902,58 +943,71 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Protect connections with certain characteristics\n \n     // Deterministically select 4 peers to protect by netgroup.\n-    // An attacker cannot predict which netgroups will be protected.\n-    static CompareNetGroupKeyed comparerNetGroupKeyed;\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    // An attacker cannot predict which netgroups will be protected\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNetGroupKeyed);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Protect the 8 nodes with the best ping times.\n+    // Protect the 8 nodes with the lowest minimum ping time.\n     // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n \n+    // Protect 4 nodes that most recently sent us transactions.\n+    // An attacker cannot manipulate this metric without performing useful work.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeTXTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect 4 nodes that most recently sent us blocks.\n+    // An attacker cannot manipulate this metric without performing useful work.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeBlockTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n-    // This replicates the existing implicit behavior.\n+    // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n \n     // Identify the network group with the most connections and youngest member.\n     // (vEvictionCandidates is already sorted by reverse connect time)\n-    std::vector<unsigned char> naMostConnections;\n+    uint64_t naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n-    BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n-        mapAddrCounts[node->addr.GetGroup()].push_back(node);\n-        int64_t grouptime = mapAddrCounts[node->addr.GetGroup()][0]->nTimeConnected;\n-        size_t groupsize = mapAddrCounts[node->addr.GetGroup()].size();\n+    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n+    BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n+        mapAddrCounts[node.nKeyedNetGroup].push_back(node);\n+        int64_t grouptime = mapAddrCounts[node.nKeyedNetGroup][0].nTimeConnected;\n+        size_t groupsize = mapAddrCounts[node.nKeyedNetGroup].size();\n \n         if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = groupsize;\n             nMostConnectionsTime = grouptime;\n-            naMostConnections = node->addr.GetGroup();\n+            naMostConnections = node.nKeyedNetGroup;\n         }\n     }\n \n     // Reduce to the network group with the most connections\n-    vEvictionCandidates = mapAddrCounts[naMostConnections];\n-\n-    // Do not disconnect peers if there is only one unprotected connection from their network group.\n-    if (vEvictionCandidates.size() <= 1)\n-        // unless we prefer the new connection (for whitelisted peers)\n-        if (!fPreferNewConnection)\n-            return false;\n+    vEvictionCandidates = std::move(mapAddrCounts[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    vEvictionCandidates[0]->fDisconnect = true;\n-\n-    return true;\n+    NodeId evicted = vEvictionCandidates.front().id;\n+    LOCK(cs_vNodes);\n+    for(std::vector<CNode*>::const_iterator it(vNodes.begin()); it != vNodes.end(); ++it) {\n+        if ((*it)->GetId() == evicted) {\n+            (*it)->fDisconnect = true;\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n static void AcceptConnection(const ListenSocket& hListenSocket) {\n@@ -1009,7 +1063,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (nInbound >= nMaxInbound)\n     {\n-        if (!AttemptToEvictConnection(whitelisted)) {\n+        if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n             CloseSocket(hSocket);\n@@ -1040,7 +1094,7 @@ void ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n-            vector<CNode*> vNodesCopy = vNodes;\n+            std::vector<CNode*> vNodesCopy = vNodes;\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n@@ -1064,7 +1118,7 @@ void ThreadSocketHandler()\n         }\n         {\n             // Delete disconnected nodes\n-            list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n@@ -1115,7 +1169,7 @@ void ThreadSocketHandler()\n \n         BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n             FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = max(hSocketMax, hListenSocket.socket);\n+            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n@@ -1126,7 +1180,7 @@ void ThreadSocketHandler()\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n                 FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = max(hSocketMax, pnode->hSocket);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n                 have_fds = true;\n \n                 // Implement the following logic:\n@@ -1193,7 +1247,7 @@ void ThreadSocketHandler()\n         //\n         // Service each socket\n         //\n-        vector<CNode*> vNodesCopy;\n+        std::vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n@@ -1350,7 +1404,7 @@ void ThreadMapPort()\n             }\n         }\n \n-        string strDesc = \"Bitcoin \" + FormatFullVersion();\n+        std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n         try {\n             while (true) {\n@@ -1422,6 +1476,18 @@ void MapPort(bool)\n \n \n \n+static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredServiceBits)\n+{\n+    //use default host for non-filter-capable seeds or if we use the default service bits (NODE_NETWORK)\n+    if (!data.supportsServiceBitsFiltering || *requiredServiceBits == NODE_NETWORK) {\n+        *requiredServiceBits = NODE_NETWORK;\n+        return data.host;\n+    }\n+\n+    return strprintf(\"x%x.%s\", *requiredServiceBits, data.host);\n+}\n+\n+\n void ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n@@ -1436,7 +1502,7 @@ void ThreadDNSAddressSeed()\n         }\n     }\n \n-    const vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n+    const std::vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n     int found = 0;\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n@@ -1445,20 +1511,29 @@ void ThreadDNSAddressSeed()\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n-            vector<CNetAddr> vIPs;\n-            vector<CAddress> vAdd;\n-            if (LookupHost(seed.host.c_str(), vIPs))\n+            std::vector<CNetAddr> vIPs;\n+            std::vector<CAddress> vAdd;\n+            ServiceFlags requiredServiceBits = nRelevantServices;\n+            if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n             {\n                 BOOST_FOREACH(const CNetAddr& ip, vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()));\n+                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n             }\n-            addrman.Add(vAdd, CNetAddr(seed.name, true));\n+            // TODO: The seed name resolve may fail, yielding an IP of [::], which results in\n+            // addrman assigning the same source to results from different seeds.\n+            // This should switch to a hard-coded stable dummy IP for each seed name, so that the\n+            // resolve is not required at all.\n+            if (!vIPs.empty()) {\n+                CService seedSource;\n+                Lookup(seed.name.c_str(), seedSource, 0, true);\n+                addrman.Add(vAdd, seedSource);\n+            }\n         }\n     }\n \n@@ -1495,7 +1570,7 @@ void DumpData()\n \n void static ProcessOneShot()\n {\n-    string strDest;\n+    std::string strDest;\n     {\n         LOCK(cs_vOneShots);\n         if (vOneShots.empty())\n@@ -1506,7 +1581,7 @@ void static ProcessOneShot()\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n     if (grant) {\n-        if (!OpenNetworkConnection(addr, &grant, strDest.c_str(), true))\n+        if (!OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true))\n             AddOneShot(strDest);\n     }\n }\n@@ -1521,8 +1596,8 @@ void ThreadOpenConnections()\n             ProcessOneShot();\n             BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-connect\"])\n             {\n-                CAddress addr;\n-                OpenNetworkConnection(addr, NULL, strAddr.c_str());\n+                CAddress addr(CService(), NODE_NONE);\n+                OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     MilliSleep(500);\n@@ -1561,7 +1636,7 @@ void ThreadOpenConnections()\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n-        set<vector<unsigned char> > setConnected;\n+        std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes) {\n@@ -1594,7 +1669,7 @@ void ThreadOpenConnections()\n                 continue;\n \n             // only connect to full nodes\n-            if (!(addr.nServices & NODE_NETWORK))\n+            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n                 continue;\n \n             // only consider very recently tried nodes after 30 failed attempts\n@@ -1614,83 +1689,89 @@ void ThreadOpenConnections()\n         }\n \n         if (addrConnect.IsValid())\n-            OpenNetworkConnection(addrConnect, &grant);\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant);\n     }\n }\n \n-void ThreadOpenAddedConnections()\n+std::vector<AddedNodeInfo> GetAddedNodeInfo()\n {\n+    std::vector<AddedNodeInfo> ret;\n+\n+    std::list<std::string> lAddresses(0);\n     {\n         LOCK(cs_vAddedNodes);\n-        vAddedNodes = mapMultiArgs[\"-addnode\"];\n+        ret.reserve(vAddedNodes.size());\n+        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n+            lAddresses.push_back(strAddNode);\n     }\n \n-    if (HaveNameProxy()) {\n-        while(true) {\n-            list<string> lAddresses(0);\n-            {\n-                LOCK(cs_vAddedNodes);\n-                BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n-                    lAddresses.push_back(strAddNode);\n+\n+    // Build a map of all already connected addresses (by IP:port and by name) to inbound/outbound and resolved CService\n+    std::map<CService, bool> mapConnected;\n+    std::map<std::string, std::pair<bool, CService>> mapConnectedByName;\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->addr.IsValid()) {\n+                mapConnected[pnode->addr] = pnode->fInbound;\n             }\n-            BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n-                CAddress addr;\n-                CSemaphoreGrant grant(*semOutbound);\n-                OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n-                MilliSleep(500);\n+            if (!pnode->addrName.empty()) {\n+                mapConnectedByName[pnode->addrName] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n             }\n-            MilliSleep(120000); // Retry every 2 minutes\n         }\n     }\n \n-    for (unsigned int i = 0; true; i++)\n-    {\n-        list<string> lAddresses(0);\n-        {\n-            LOCK(cs_vAddedNodes);\n-            BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n-                lAddresses.push_back(strAddNode);\n+    BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n+        CService service(strAddNode, Params().GetDefaultPort());\n+        if (service.IsValid()) {\n+            // strAddNode is an IP:port\n+            auto it = mapConnected.find(service);\n+            if (it != mapConnected.end()) {\n+                ret.push_back(AddedNodeInfo{strAddNode, service, true, it->second});\n+            } else {\n+                ret.push_back(AddedNodeInfo{strAddNode, CService(), false, false});\n+            }\n+        } else {\n+            // strAddNode is a name\n+            auto it = mapConnectedByName.find(strAddNode);\n+            if (it != mapConnectedByName.end()) {\n+                ret.push_back(AddedNodeInfo{strAddNode, it->second.second, true, it->second.first});\n+            } else {\n+                ret.push_back(AddedNodeInfo{strAddNode, CService(), false, false});\n+            }\n         }\n+    }\n \n-        list<vector<CService> > lservAddressesToAdd(0);\n-        BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n-            vector<CService> vservNode(0);\n-            if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n-            {\n-                lservAddressesToAdd.push_back(vservNode);\n-                {\n-                    LOCK(cs_setservAddNodeAddresses);\n-                    BOOST_FOREACH(const CService& serv, vservNode)\n-                        setservAddNodeAddresses.insert(serv);\n-                }\n+    return ret;\n+}\n+\n+void ThreadOpenAddedConnections()\n+{\n+    {\n+        LOCK(cs_vAddedNodes);\n+        vAddedNodes = mapMultiArgs[\"-addnode\"];\n+    }\n+\n+    for (unsigned int i = 0; true; i++)\n+    {\n+        std::vector<AddedNodeInfo> vInfo = GetAddedNodeInfo();\n+        for (const AddedNodeInfo& info : vInfo) {\n+            if (!info.fConnected) {\n+                CSemaphoreGrant grant(*semOutbound);\n+                // If strAddedNode is an IP/port, decode it immediately, so\n+                // OpenNetworkConnection can detect existing connections to that IP/port.\n+                CService service(info.strAddedNode, Params().GetDefaultPort());\n+                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false);\n+                MilliSleep(500);\n             }\n         }\n-        // Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry\n-        // (keeping in mind that addnode entries can have many IPs if fNameLookup)\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n-                    BOOST_FOREACH(const CService& addrNode, *(it))\n-                        if (pnode->addr == addrNode)\n-                        {\n-                            it = lservAddressesToAdd.erase(it);\n-                            it--;\n-                            break;\n-                        }\n-        }\n-        BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n-        {\n-            CSemaphoreGrant grant(*semOutbound);\n-            OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n-            MilliSleep(500);\n-        }\n+\n         MilliSleep(120000); // Retry every 2 minutes\n     }\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)\n {\n     //\n     // Initiate outbound network connection\n@@ -1704,7 +1785,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n     } else if (FindNode(std::string(pszDest)))\n         return false;\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest);\n+    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n     boost::this_thread::interruption_point();\n \n     if (!pnode)\n@@ -1724,10 +1805,9 @@ void ThreadMessageHandler()\n     boost::mutex condition_mutex;\n     boost::unique_lock<boost::mutex> lock(condition_mutex);\n \n-    SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL);\n     while (true)\n     {\n-        vector<CNode*> vNodesCopy;\n+        std::vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n@@ -1748,7 +1828,7 @@ void ThreadMessageHandler()\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n                 {\n-                    if (!g_signals.ProcessMessages(pnode))\n+                    if (!GetNodeSignals().ProcessMessages(pnode))\n                         pnode->CloseSocketDisconnect();\n \n                     if (pnode->nSendSize < SendBufferSize())\n@@ -1766,7 +1846,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode);\n+                    GetNodeSignals().SendMessages(pnode);\n             }\n             boost::this_thread::interruption_point();\n         }\n@@ -1787,7 +1867,7 @@ void ThreadMessageHandler()\n \n \n \n-bool BindListenPort(const CService &addrBind, string& strError, bool fWhitelisted)\n+bool BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)\n {\n     strError = \"\";\n     int nOne = 1;\n@@ -1895,8 +1975,8 @@ void static Discover(boost::thread_group& threadGroup)\n     char pszHostName[256] = \"\";\n     if (gethostname(pszHostName, sizeof(pszHostName)) != SOCKET_ERROR)\n     {\n-        vector<CNetAddr> vaddr;\n-        if (LookupHost(pszHostName, vaddr))\n+        std::vector<CNetAddr> vaddr;\n+        if (LookupHost(pszHostName, vaddr, 0, true))\n         {\n             BOOST_FOREACH (const CNetAddr &addr, vaddr)\n             {\n@@ -1946,6 +2026,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (adb.Read(addrman))\n             LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman.size(), GetTimeMillis() - nStart);\n         else {\n+            addrman.Clear(); // Addrman can be in an inconsistent state after failure, reset it\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n             DumpAddresses();\n         }\n@@ -2065,38 +2146,13 @@ class CNetCleanup\n instance_of_cnetcleanup;\n \n \n-void RelayTransaction(const CTransaction& tx, CFeeRate feerate)\n+void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n-    {\n-        LOCK(cs_mapRelay);\n-        // Expire old relay messages\n-        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n-        {\n-            mapRelay.erase(vRelayExpiration.front().second);\n-            vRelayExpiration.pop_front();\n-        }\n-\n-        mapRelay.insert(std::make_pair(inv.hash, tx));\n-        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv.hash));\n-    }\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {\n-        if(!pnode->fRelayTxes)\n-            continue;\n-        {\n-            LOCK(pnode->cs_feeFilter);\n-            if (feerate.GetFeePerK() < pnode->minFeeFilter)\n-                continue;\n-        }\n-        LOCK(pnode->cs_filter);\n-        if (pnode->pfilter)\n-        {\n-            if (pnode->pfilter->IsRelevantAndUpdate(tx))\n-                pnode->PushInventory(inv);\n-        } else\n-            pnode->PushInventory(inv);\n+        pnode->PushInventory(inv);\n     }\n }\n \n@@ -2308,7 +2364,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n         dataSize = fileSize - sizeof(uint256);\n-    vector<unsigned char> vchData;\n+    std::vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n \n@@ -2329,6 +2385,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n     if (hashIn != hashTmp)\n         return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n+    return Read(addr, ssPeers);\n+}\n+\n+bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n+{\n     unsigned char pchMsgTmp[4];\n     try {\n         // de-serialize file header (network specific magic number) and ..\n@@ -2342,6 +2403,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n+        // de-serialization has failed, ensure addrman is left in a clean state\n+        addr.Clear();\n         return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n@@ -2353,11 +2416,13 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAX\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n+    addr(addrIn),\n+    nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001)\n {\n-    nServices = 0;\n-    nServicesExpected = 0;\n+    nServices = NODE_NONE;\n+    nServicesExpected = NODE_NONE;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;\n@@ -2366,7 +2431,6 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nRecvBytes = 0;\n     nTimeConnected = GetTime();\n     nTimeOffset = 0;\n-    addr = addrIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;\n     strSubVer = \"\";\n@@ -2383,13 +2447,17 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     hashContinue = uint256();\n     nStartingHeight = -1;\n     filterInventoryKnown.reset();\n+    fSendMempool = false;\n     fGetAddr = false;\n     nNextLocalAddrSend = 0;\n     nNextAddrSend = 0;\n     nNextInvSend = 0;\n     fRelayTxes = false;\n     fSentAddr = false;\n     pfilter = new CBloomFilter();\n+    timeLastMempoolReq = 0;\n+    nLastBlockTime = 0;\n+    nLastTXTime = 0;\n     nPingNonceSent = 0;\n     nPingUsecStart = 0;\n     nPingUsecTime = 0;\n@@ -2588,7 +2656,7 @@ bool CBanDB::Read(banmap_t& banSet)\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n         dataSize = fileSize - sizeof(uint256);\n-    vector<unsigned char> vchData;\n+    std::vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n \n@@ -2628,25 +2696,16 @@ bool CBanDB::Read(banmap_t& banSet)\n     return true;\n }\n \n-void DumpBanlist()\n-{\n-    CNode::SweepBanned(); // clean unused entries (if bantime has expired)\n-\n-    if (!CNode::BannedSetIsDirty())\n-        return;\n-\n-    int64_t nStart = GetTimeMillis();\n+int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n+    return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+}\n \n-    CBanDB bandb;\n-    banmap_t banmap;\n-    CNode::GetBanned(banmap);\n-    if (bandb.Write(banmap))\n-        CNode::SetBannedSetDirty(false);\n+/* static */ uint64_t CNode::CalculateKeyedNetGroup(const CAddress& ad)\n+{\n+    static const uint64_t k0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    static const uint64_t k1 = GetRand(std::numeric_limits<uint64_t>::max());\n \n-    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - nStart);\n-}\n+    std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n \n-int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n-    return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+    return CSipHasher(k0, k1).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n }"
      },
      {
        "sha": "41315fc9b9fcc7af818f44cd16f6b6712e981c73",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 54,
        "deletions": 23,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -17,6 +17,7 @@\n #include \"sync.h\"\n #include \"uint256.h\"\n \n+#include <atomic>\n #include <deque>\n #include <stdint.h>\n \n@@ -71,29 +72,31 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n+static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n+\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n \n+typedef int NodeId;\n+\n void AddOneShot(const std::string& strDest);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n-CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n-bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n+CNode* FindNode(const NodeId id); //TODO: Remove this\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n \n-typedef int NodeId;\n-\n struct CombinerAll\n {\n     typedef bool result_type;\n@@ -152,8 +155,9 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n extern bool fDiscover;\n extern bool fListen;\n-extern uint64_t nLocalServices;\n-extern uint64_t nRelevantServices;\n+extern ServiceFlags nLocalServices;\n+extern ServiceFlags nRelevantServices;\n+extern bool fRelayTxes;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n \n@@ -162,9 +166,6 @@ extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n-extern std::map<uint256, CTransaction> mapRelay;\n-extern std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n-extern CCriticalSection cs_mapRelay;\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n@@ -189,7 +190,7 @@ class CNodeStats\n {\n public:\n     NodeId nodeid;\n-    uint64_t nServices;\n+    ServiceFlags nServices;\n     bool fRelayTxes;\n     int64_t nLastSend;\n     int64_t nLastRecv;\n@@ -319,8 +320,8 @@ class CNode\n {\n public:\n     // socket\n-    uint64_t nServices;\n-    uint64_t nServicesExpected;\n+    ServiceFlags nServices;\n+    ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries\n@@ -339,7 +340,7 @@ class CNode\n     int64_t nLastRecv;\n     int64_t nTimeConnected;\n     int64_t nTimeOffset;\n-    CAddress addr;\n+    const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n     int nVersion;\n@@ -359,13 +360,15 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes;\n+    bool fRelayTxes; //protected by cs_filter\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;\n     NodeId id;\n+\n+    const uint64_t nKeyedNetGroup;\n protected:\n \n     // Denial-of-service detection/prevention\n@@ -399,14 +402,29 @@ class CNode\n \n     // inventory based relay\n     CRollingBloomFilter filterInventoryKnown;\n-    std::vector<CInv> vInventoryToSend;\n+    // Set of transaction ids we still have to announce.\n+    // They are sorted by the mempool before relay, so the order is not important.\n+    std::set<uint256> setInventoryTxToSend;\n+    // List of block ids we still have announce.\n+    // There is no final sorting before sending, as they are always sent immediately\n+    // and in the order requested.\n+    std::vector<uint256> vInventoryBlockToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n     std::vector<uint256> vBlockHashesToAnnounce;\n+    // Used for BIP35 mempool sending, also protected by cs_inventory\n+    bool fSendMempool;\n+\n+    // Last time a \"MEMPOOL\" request was serviced.\n+    std::atomic<int64_t> timeLastMempoolReq;\n+\n+    // Block and TXN accept times\n+    std::atomic<int64_t> nLastBlockTime;\n+    std::atomic<int64_t> nLastTXTime;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n@@ -444,6 +462,8 @@ class CNode\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n+    static uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+\n public:\n \n     NodeId GetId() const {\n@@ -519,11 +539,13 @@ class CNode\n \n     void PushInventory(const CInv& inv)\n     {\n-        {\n-            LOCK(cs_inventory);\n-            if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && filterInventoryKnown.contains(inv.hash))\n-                return;\n-            vInventoryToSend.push_back(inv);\n+        LOCK(cs_inventory);\n+        if (inv.type == MSG_TX) {\n+            if (!filterInventoryKnown.contains(inv.hash)) {\n+                setInventoryTxToSend.insert(inv.hash);\n+            }\n+        } else if (inv.type == MSG_BLOCK) {\n+            vInventoryBlockToSend.push_back(inv.hash);\n         }\n     }\n \n@@ -792,7 +814,7 @@ class CNode\n \n \n class CTransaction;\n-void RelayTransaction(const CTransaction& tx, CFeeRate feerate);\n+void RelayTransaction(const CTransaction& tx);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB\n@@ -803,6 +825,7 @@ class CAddrDB\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n+    bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n /** Access to the banlist database (banlist.dat) */\n@@ -816,9 +839,17 @@ class CBanDB\n     bool Read(banmap_t& banSet);\n };\n \n-void DumpBanlist();\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n \n+struct AddedNodeInfo\n+{\n+    std::string strAddedNode;\n+    CService resolvedAddress;\n+    bool fConnected;\n+    bool fInbound;\n+};\n+\n+std::vector<AddedNodeInfo> GetAddedNodeInfo();\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "e2a516986c11682ae66aac7e754680637bd35872",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 33,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -291,10 +291,25 @@ struct ProxyCredentials\n     std::string password;\n };\n \n+std::string Socks5ErrorString(int err)\n+{\n+    switch(err) {\n+        case 0x01: return \"general failure\";\n+        case 0x02: return \"connection not allowed\";\n+        case 0x03: return \"network unreachable\";\n+        case 0x04: return \"host unreachable\";\n+        case 0x05: return \"connection refused\";\n+        case 0x06: return \"TTL expired\";\n+        case 0x07: return \"protocol error\";\n+        case 0x08: return \"address type not supported\";\n+        default:   return \"unknown\";\n+    }\n+}\n+\n /** Connect using SOCKS5 (as described in RFC1928) */\n static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n-    LogPrintf(\"SOCKS5 connecting %s\\n\", strDest);\n+    LogPrint(\"net\", \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n         CloseSocket(hSocket);\n         return error(\"Hostname too long\");\n@@ -318,7 +333,8 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet1[2];\n     if (!InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n         CloseSocket(hSocket);\n-        return error(\"Error reading proxy response\");\n+        LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n+        return false;\n     }\n     if (pchRet1[0] != 0x05) {\n         CloseSocket(hSocket);\n@@ -379,19 +395,10 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Proxy failed to accept request\");\n     }\n     if (pchRet2[1] != 0x00) {\n+        // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n-        switch (pchRet2[1])\n-        {\n-            case 0x01: return error(\"Proxy error: general failure\");\n-            case 0x02: return error(\"Proxy error: connection not allowed\");\n-            case 0x03: return error(\"Proxy error: network unreachable\");\n-            case 0x04: return error(\"Proxy error: host unreachable\");\n-            case 0x05: return error(\"Proxy error: connection refused\");\n-            case 0x06: return error(\"Proxy error: TTL expired\");\n-            case 0x07: return error(\"Proxy error: protocol error\");\n-            case 0x08: return error(\"Proxy error: address type not supported\");\n-            default:   return error(\"Proxy error: unknown\");\n-        }\n+        LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n+        return false;\n     }\n     if (pchRet2[2] != 0x00) {\n         CloseSocket(hSocket);\n@@ -423,7 +430,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n-    LogPrintf(\"SOCKS5 connected %s\\n\", strDest);\n+    LogPrint(\"net\", \"SOCKS5 connected %s\\n\", strDest);\n     return true;\n }\n \n@@ -614,10 +621,12 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n     proxyType nameProxy;\n     GetNameProxy(nameProxy);\n \n-    CService addrResolved(CNetAddr(strDest, fNameLookup && !HaveNameProxy()), port);\n-    if (addrResolved.IsValid()) {\n-        addr = addrResolved;\n-        return ConnectSocket(addr, hSocketRet, nTimeout);\n+    std::vector<CService> addrResolved;\n+    if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n+        if (addrResolved.size() > 0) {\n+            addr = addrResolved[GetRand(addrResolved.size())];\n+            return ConnectSocket(addr, hSocketRet, nTimeout);\n+        }\n     }\n \n     addr = CService(\"0.0.0.0:0\");\n@@ -686,19 +695,19 @@ CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)\n     scopeId = scope;\n }\n \n-CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)\n+CNetAddr::CNetAddr(const char *pszIp)\n {\n     Init();\n     std::vector<CNetAddr> vIP;\n-    if (LookupHost(pszIp, vIP, 1, fAllowLookup))\n+    if (LookupHost(pszIp, vIP, 1, false))\n         *this = vIP[0];\n }\n \n-CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)\n+CNetAddr::CNetAddr(const std::string &strIp)\n {\n     Init();\n     std::vector<CNetAddr> vIP;\n-    if (LookupHost(strIp.c_str(), vIP, 1, fAllowLookup))\n+    if (LookupHost(strIp.c_str(), vIP, 1, false))\n         *this = vIP[0];\n }\n \n@@ -1121,35 +1130,35 @@ bool CService::SetSockAddr(const struct sockaddr *paddr)\n     }\n }\n \n-CService::CService(const char *pszIpPort, bool fAllowLookup)\n+CService::CService(const char *pszIpPort)\n {\n     Init();\n     CService ip;\n-    if (Lookup(pszIpPort, ip, 0, fAllowLookup))\n+    if (Lookup(pszIpPort, ip, 0, false))\n         *this = ip;\n }\n \n-CService::CService(const char *pszIpPort, int portDefault, bool fAllowLookup)\n+CService::CService(const char *pszIpPort, int portDefault)\n {\n     Init();\n     CService ip;\n-    if (Lookup(pszIpPort, ip, portDefault, fAllowLookup))\n+    if (Lookup(pszIpPort, ip, portDefault, false))\n         *this = ip;\n }\n \n-CService::CService(const std::string &strIpPort, bool fAllowLookup)\n+CService::CService(const std::string &strIpPort)\n {\n     Init();\n     CService ip;\n-    if (Lookup(strIpPort.c_str(), ip, 0, fAllowLookup))\n+    if (Lookup(strIpPort.c_str(), ip, 0, false))\n         *this = ip;\n }\n \n-CService::CService(const std::string &strIpPort, int portDefault, bool fAllowLookup)\n+CService::CService(const std::string &strIpPort, int portDefault)\n {\n     Init();\n     CService ip;\n-    if (Lookup(strIpPort.c_str(), ip, portDefault, fAllowLookup))\n+    if (Lookup(strIpPort.c_str(), ip, portDefault, false))\n         *this = ip;\n }\n \n@@ -1243,7 +1252,7 @@ CSubNet::CSubNet():\n     memset(netmask, 0, sizeof(netmask));\n }\n \n-CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n+CSubNet::CSubNet(const std::string &strSubnet)\n {\n     size_t slash = strSubnet.find_last_of('/');\n     std::vector<CNetAddr> vIP;\n@@ -1253,7 +1262,7 @@ CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n     memset(netmask, 255, sizeof(netmask));\n \n     std::string strAddress = strSubnet.substr(0, slash);\n-    if (LookupHost(strAddress.c_str(), vIP, 1, fAllowLookup))\n+    if (LookupHost(strAddress.c_str(), vIP, 1, false))\n     {\n         network = vIP[0];\n         if (slash != strSubnet.npos)"
      },
      {
        "sha": "65187a17cfd54f951a7e8e959da4323136c9891a",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -49,8 +49,8 @@ class CNetAddr\n     public:\n         CNetAddr();\n         CNetAddr(const struct in_addr& ipv4Addr);\n-        explicit CNetAddr(const char *pszIp, bool fAllowLookup = false);\n-        explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n+        explicit CNetAddr(const char *pszIp);\n+        explicit CNetAddr(const std::string &strIp);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n \n@@ -119,7 +119,7 @@ class CSubNet\n \n     public:\n         CSubNet();\n-        explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n+        explicit CSubNet(const std::string &strSubnet);\n \n         //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n         explicit CSubNet(const CNetAddr &addr);\n@@ -154,10 +154,10 @@ class CService : public CNetAddr\n         CService(const CNetAddr& ip, unsigned short port);\n         CService(const struct in_addr& ipv4Addr, unsigned short port);\n         CService(const struct sockaddr_in& addr);\n-        explicit CService(const char *pszIpPort, int portDefault, bool fAllowLookup = false);\n-        explicit CService(const char *pszIpPort, bool fAllowLookup = false);\n-        explicit CService(const std::string& strIpPort, int portDefault, bool fAllowLookup = false);\n-        explicit CService(const std::string& strIpPort, bool fAllowLookup = false);\n+        explicit CService(const char *pszIpPort, int portDefault);\n+        explicit CService(const char *pszIpPort);\n+        explicit CService(const std::string& strIpPort, int portDefault);\n+        explicit CService(const std::string& strIpPort);\n         void Init();\n         void SetPort(unsigned short portIn);\n         unsigned short GetPort() const;\n@@ -206,9 +206,9 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0, bool fAllowLookup = true);\n-bool Lookup(const char *pszName, CService& addr, int portDefault = 0, bool fAllowLookup = true);\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault = 0, bool fAllowLookup = true, unsigned int nMaxSolutions = 0);\n+bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n+bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n+bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n bool LookupNumeric(const char *pszName, CService& addr, int portDefault = 0);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = 0);\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);"
      },
      {
        "sha": "1db3b692932fefc9461088a5faf38d92ea548b9a",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -64,9 +64,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     // Retarget\n     const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n     arith_uint256 bnNew;\n-    arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n-    bnOld = bnNew;\n     bnNew *= nActualTimespan;\n     bnNew /= params.nPowTargetTimespan;\n "
      },
      {
        "sha": "247c6c212073e201007dab7d87509b7bb64ae932",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -35,6 +35,10 @@ const char *FILTERCLEAR=\"filterclear\";\n const char *REJECT=\"reject\";\n const char *SENDHEADERS=\"sendheaders\";\n const char *FEEFILTER=\"feefilter\";\n+const char *SENDCMPCT=\"sendcmpct\";\n+const char *CMPCTBLOCK=\"cmpctblock\";\n+const char *GETBLOCKTXN=\"getblocktxn\";\n+const char *BLOCKTXN=\"blocktxn\";\n };\n \n /** All known message types. Keep this in the same order as the list of\n@@ -62,7 +66,11 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::FILTERCLEAR,\n     NetMsgType::REJECT,\n     NetMsgType::SENDHEADERS,\n-    NetMsgType::FEEFILTER\n+    NetMsgType::FEEFILTER,\n+    NetMsgType::SENDCMPCT,\n+    NetMsgType::CMPCTBLOCK,\n+    NetMsgType::GETBLOCKTXN,\n+    NetMsgType::BLOCKTXN,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n \n@@ -125,15 +133,15 @@ CAddress::CAddress() : CService()\n     Init();\n }\n \n-CAddress::CAddress(CService ipIn, uint64_t nServicesIn) : CService(ipIn)\n+CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)\n {\n     Init();\n     nServices = nServicesIn;\n }\n \n void CAddress::Init()\n {\n-    nServices = NODE_NETWORK;\n+    nServices = NODE_NONE;\n     nTime = 100000000;\n }\n \n@@ -165,6 +173,7 @@ std::string CInv::GetCommand() const\n     case MSG_TX:             return cmd.append(NetMsgType::TX);\n     case MSG_BLOCK:          return cmd.append(NetMsgType::BLOCK);\n     case MSG_FILTERED_BLOCK: return cmd.append(NetMsgType::MERKLEBLOCK);\n+    case MSG_CMPCT_BLOCK:    return cmd.append(NetMsgType::CMPCTBLOCK);\n     default:\n         throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     }"
      },
      {
        "sha": "15f27e2d2fbcb3d5e88ddd4e6fee3b04a236ac9f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -217,13 +217,41 @@ extern const char *SENDHEADERS;\n  * @since protocol version 70013 as described by BIP133\n  */\n extern const char *FEEFILTER;\n+/**\n+ * Contains a 1-byte bool and 8-byte LE version number.\n+ * Indicates that a node is willing to provide blocks via \"cmpctblock\" messages.\n+ * May indicate that a node prefers to receive new block announcements via a\n+ * \"cmpctblock\" message rather than an \"inv\", depending on message contents.\n+ * @since protocol version 70014 as described by BIP 152\n+ */\n+extern const char *SENDCMPCT;\n+/**\n+ * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n+ * list of \"short txids\".\n+ * @since protocol version 70014 as described by BIP 152\n+ */\n+extern const char *CMPCTBLOCK;\n+/**\n+ * Contains a BlockTransactionsRequest\n+ * Peer should respond with \"blocktxn\" message.\n+ * @since protocol version 70014 as described by BIP 152\n+ */\n+extern const char *GETBLOCKTXN;\n+/**\n+ * Contains a BlockTransactions.\n+ * Sent in response to a \"getblocktxn\" message.\n+ * @since protocol version 70014 as described by BIP 152\n+ */\n+extern const char *BLOCKTXN;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n /** nServices flags */\n-enum {\n+enum ServiceFlags : uint64_t {\n+    // Nothing\n+    NODE_NONE = 0,\n     // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n     // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n     // network services but don't provide them.\n@@ -254,7 +282,7 @@ class CAddress : public CService\n {\n public:\n     CAddress();\n-    explicit CAddress(CService ipIn, uint64_t nServicesIn = NODE_NETWORK);\n+    explicit CAddress(CService ipIn, ServiceFlags nServicesIn);\n \n     void Init();\n \n@@ -270,13 +298,15 @@ class CAddress : public CService\n         if ((nType & SER_DISK) ||\n             (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n             READWRITE(nTime);\n-        READWRITE(nServices);\n+        uint64_t nServicesInt = nServices;\n+        READWRITE(nServicesInt);\n+        nServices = (ServiceFlags)nServicesInt;\n         READWRITE(*(CService*)this);\n     }\n \n     // TODO: make private (improves encapsulation)\n public:\n-    uint64_t nServices;\n+    ServiceFlags nServices;\n \n     // disk and network only\n     unsigned int nTime;\n@@ -293,6 +323,7 @@ enum GetDataMsg\n     MSG_TYPE_MAX = MSG_BLOCK,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n+    MSG_CMPCT_BLOCK,\n     MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n     MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,"
      },
      {
        "sha": "e8aa79679c04a2866a427f0ac0eb1d54d802ae67",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -77,10 +77,7 @@ AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :\n \n AskPassphraseDialog::~AskPassphraseDialog()\n {\n-    // Attempt to overwrite text so that they do not linger around in memory\n-    ui->passEdit1->setText(QString(\" \").repeated(ui->passEdit1->text().size()));\n-    ui->passEdit2->setText(QString(\" \").repeated(ui->passEdit2->text().size()));\n-    ui->passEdit3->setText(QString(\" \").repeated(ui->passEdit3->text().size()));\n+    secureClearPassFields();\n     delete ui;\n }\n \n@@ -103,6 +100,8 @@ void AskPassphraseDialog::accept()\n     newpass1.assign(ui->passEdit2->text().toStdString().c_str());\n     newpass2.assign(ui->passEdit3->text().toStdString().c_str());\n \n+    secureClearPassFields();\n+\n     switch(mode)\n     {\n     case Encrypt: {\n@@ -260,3 +259,17 @@ bool AskPassphraseDialog::eventFilter(QObject *object, QEvent *event)\n     }\n     return QDialog::eventFilter(object, event);\n }\n+\n+static void SecureClearQLineEdit(QLineEdit* edit)\n+{\n+    // Attempt to overwrite text so that they do not linger around in memory\n+    edit->setText(QString(\" \").repeated(edit->text().size()));\n+    edit->clear();\n+}\n+\n+void AskPassphraseDialog::secureClearPassFields()\n+{\n+    SecureClearQLineEdit(ui->passEdit1);\n+    SecureClearQLineEdit(ui->passEdit2);\n+    SecureClearQLineEdit(ui->passEdit3);\n+}"
      },
      {
        "sha": "34bf7ccb31f6fb215506182bee4401fd79a1fc42",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -42,6 +42,7 @@ class AskPassphraseDialog : public QDialog\n \n private Q_SLOTS:\n     void textChanged();\n+    void secureClearPassFields();\n \n protected:\n     bool event(QEvent *event);"
      },
      {
        "sha": "64b5c83d72a0071b584871c83bcfcfee53b1889c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -370,6 +370,7 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     splash->setAttribute(Qt::WA_DeleteOnClose);\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n+    connect(this, SIGNAL(requestedShutdown()), splash, SLOT(close()));\n }\n \n void BitcoinApplication::startThread()\n@@ -532,6 +533,9 @@ int main(int argc, char *argv[])\n     // Generate high-dpi pixmaps\n     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n #endif\n+#if QT_VERSION >= 0x050600\n+    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n+#endif\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif"
      },
      {
        "sha": "1acda7f28caaf7e903e213003b2cf687f63dc748",
        "filename": "src/qt/bitcoin_locale.qrc",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoin_locale.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoin_locale.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin_locale.qrc?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,5 +1,6 @@\n <!DOCTYPE RCC><RCC version=\"1.0\">\n     <qresource prefix=\"/translations\">\n+        <file alias=\"af\">locale/bitcoin_af.qm</file>\n         <file alias=\"af_ZA\">locale/bitcoin_af_ZA.qm</file>\n         <file alias=\"ar\">locale/bitcoin_ar.qm</file>\n         <file alias=\"be_BY\">locale/bitcoin_be_BY.qm</file>\n@@ -19,7 +20,10 @@\n         <file alias=\"en_GB\">locale/bitcoin_en_GB.qm</file>\n         <file alias=\"en\">locale/bitcoin_en.qm</file>\n         <file alias=\"eo\">locale/bitcoin_eo.qm</file>\n+        <file alias=\"es_419\">locale/bitcoin_es_419.qm</file>\n+        <file alias=\"es_AR\">locale/bitcoin_es_AR.qm</file>\n         <file alias=\"es_CL\">locale/bitcoin_es_CL.qm</file>\n+        <file alias=\"es_CO\">locale/bitcoin_es_CO.qm</file>\n         <file alias=\"es_DO\">locale/bitcoin_es_DO.qm</file>\n         <file alias=\"es_ES\">locale/bitcoin_es_ES.qm</file>\n         <file alias=\"es_MX\">locale/bitcoin_es_MX.qm</file>\n@@ -30,6 +34,7 @@\n         <file alias=\"eu_ES\">locale/bitcoin_eu_ES.qm</file>\n         <file alias=\"fa_IR\">locale/bitcoin_fa_IR.qm</file>\n         <file alias=\"fa\">locale/bitcoin_fa.qm</file>\n+        <file alias=\"fil\">locale/bitcoin_fil.qm</file>\n         <file alias=\"fi\">locale/bitcoin_fi.qm</file>\n         <file alias=\"fr_CA\">locale/bitcoin_fr_CA.qm</file>\n         <file alias=\"fr_FR\">locale/bitcoin_fr_FR.qm</file>\n@@ -40,6 +45,7 @@\n         <file alias=\"hr\">locale/bitcoin_hr.qm</file>\n         <file alias=\"hu\">locale/bitcoin_hu.qm</file>\n         <file alias=\"id_ID\">locale/bitcoin_id_ID.qm</file>\n+        <file alias=\"it_IT\">locale/bitcoin_it_IT.qm</file>\n         <file alias=\"it\">locale/bitcoin_it.qm</file>\n         <file alias=\"ja\">locale/bitcoin_ja.qm</file>\n         <file alias=\"ka\">locale/bitcoin_ka.qm</file>\n@@ -59,22 +65,27 @@\n         <file alias=\"pt_BR\">locale/bitcoin_pt_BR.qm</file>\n         <file alias=\"pt_PT\">locale/bitcoin_pt_PT.qm</file>\n         <file alias=\"ro_RO\">locale/bitcoin_ro_RO.qm</file>\n+        <file alias=\"ro\">locale/bitcoin_ro.qm</file>\n         <file alias=\"ru_RU\">locale/bitcoin_ru_RU.qm</file>\n         <file alias=\"ru\">locale/bitcoin_ru.qm</file>\n         <file alias=\"sk\">locale/bitcoin_sk.qm</file>\n         <file alias=\"sl_SI\">locale/bitcoin_sl_SI.qm</file>\n         <file alias=\"sq\">locale/bitcoin_sq.qm</file>\n+        <file alias=\"sr@latin\">locale/bitcoin_sr@latin.qm</file>\n         <file alias=\"sr\">locale/bitcoin_sr.qm</file>\n         <file alias=\"sv\">locale/bitcoin_sv.qm</file>\n+        <file alias=\"ta\">locale/bitcoin_ta.qm</file>\n         <file alias=\"th_TH\">locale/bitcoin_th_TH.qm</file>\n         <file alias=\"tr_TR\">locale/bitcoin_tr_TR.qm</file>\n         <file alias=\"tr\">locale/bitcoin_tr.qm</file>\n         <file alias=\"uk\">locale/bitcoin_uk.qm</file>\n         <file alias=\"ur_PK\">locale/bitcoin_ur_PK.qm</file>\n         <file alias=\"uz@Cyrl\">locale/bitcoin_uz@Cyrl.qm</file>\n+        <file alias=\"uz@Latn\">locale/bitcoin_uz@Latn.qm</file>\n         <file alias=\"vi\">locale/bitcoin_vi.qm</file>\n         <file alias=\"vi_VN\">locale/bitcoin_vi_VN.qm</file>\n         <file alias=\"zh_CN\">locale/bitcoin_zh_CN.qm</file>\n+        <file alias=\"zh_HK\">locale/bitcoin_zh_HK.qm</file>\n         <file alias=\"zh\">locale/bitcoin_zh.qm</file>\n         <file alias=\"zh_TW\">locale/bitcoin_zh_TW.qm</file>\n     </qresource>"
      },
      {
        "sha": "50c19c38480461e8ac54a9e3a59272cde3fe4a2c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 5,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -320,12 +320,14 @@ void BitcoinGUI::createActions()\n     aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About %1\").arg(tr(PACKAGE_NAME)), this);\n     aboutAction->setStatusTip(tr(\"Show information about %1\").arg(tr(PACKAGE_NAME)));\n     aboutAction->setMenuRole(QAction::AboutRole);\n+    aboutAction->setEnabled(false);\n     aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n     optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for %1\").arg(tr(PACKAGE_NAME)));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n+    optionsAction->setEnabled(false);\n     toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n@@ -343,6 +345,8 @@ void BitcoinGUI::createActions()\n \n     openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n+    // initially disable the debug window menu item\n+    openRPCConsoleAction->setEnabled(false);\n \n     usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n@@ -457,8 +461,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL));\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL), false);\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -474,6 +478,16 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         }\n #endif // ENABLE_WALLET\n         unitDisplayControl->setOptionsModel(clientModel->getOptionsModel());\n+        \n+        OptionsModel* optionsModel = clientModel->getOptionsModel();\n+        if(optionsModel)\n+        {\n+            // be aware of the tray icon disable state change reported by the OptionsModel object.\n+            connect(optionsModel,SIGNAL(hideTrayIconChanged(bool)),this,SLOT(setTrayIconVisible(bool)));\n+        \n+            // initialize the disable state of the tray icon with the current value in the model.\n+            setTrayIconVisible(optionsModel->getHideTrayIcon());\n+        }\n     } else {\n         // Disable possibility to show main window via action\n         toggleHideAction->setEnabled(false);\n@@ -535,7 +549,7 @@ void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n     QString toolTip = tr(\"%1 client\").arg(tr(PACKAGE_NAME)) + \" \" + networkStyle->getTitleAddText();\n     trayIcon->setToolTip(toolTip);\n     trayIcon->setIcon(networkStyle->getTrayAndWindowIcon());\n-    trayIcon->show();\n+    trayIcon->hide();\n #endif\n \n     notificator = new Notificator(QApplication::applicationName(), trayIcon, this);\n@@ -686,7 +700,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n {\n     if(!clientModel)\n         return;\n@@ -698,15 +712,25 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     enum BlockSource blockSource = clientModel->getBlockSource();\n     switch (blockSource) {\n         case BLOCK_SOURCE_NETWORK:\n+            if (header) {\n+                return;\n+            }\n             progressBarLabel->setText(tr(\"Synchronizing with network...\"));\n             break;\n         case BLOCK_SOURCE_DISK:\n-            progressBarLabel->setText(tr(\"Importing blocks from disk...\"));\n+            if (header) {\n+                progressBarLabel->setText(tr(\"Indexing blocks on disk...\"));\n+            } else {\n+                progressBarLabel->setText(tr(\"Processing blocks on disk...\"));\n+            }\n             break;\n         case BLOCK_SOURCE_REINDEX:\n             progressBarLabel->setText(tr(\"Reindexing blocks on disk...\"));\n             break;\n         case BLOCK_SOURCE_NONE:\n+            if (header) {\n+                return;\n+            }\n             // Case: not Importing, not Reindexing and no network connection\n             progressBarLabel->setText(tr(\"No block source available...\"));\n             break;\n@@ -891,6 +915,14 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n     QMainWindow::closeEvent(event);\n }\n \n+void BitcoinGUI::showEvent(QShowEvent *event)\n+{\n+    // enable the debug window when the main window shows up\n+    openRPCConsoleAction->setEnabled(true);\n+    aboutAction->setEnabled(true);\n+    optionsAction->setEnabled(true);\n+}\n+\n #ifdef ENABLE_WALLET\n void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label)\n {\n@@ -1044,6 +1076,14 @@ void BitcoinGUI::showProgress(const QString &title, int nProgress)\n         progressDialog->setValue(nProgress);\n }\n \n+void BitcoinGUI::setTrayIconVisible(bool fHideTrayIcon)\n+{\n+    if (trayIcon)\n+    {\n+        trayIcon->setVisible(!fHideTrayIcon);\n+    }\n+}\n+\n static bool ThreadSafeMessageBox(BitcoinGUI *gui, const std::string& message, const std::string& caption, unsigned int style)\n {\n     bool modal = (style & CClientUIInterface::MODAL);"
      },
      {
        "sha": "12e7702ed82d66654a07b62ba912d465adf43c4e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -72,6 +72,7 @@ class BitcoinGUI : public QMainWindow\n protected:\n     void changeEvent(QEvent *e);\n     void closeEvent(QCloseEvent *event);\n+    void showEvent(QShowEvent *event);\n     void dragEnterEvent(QDragEnterEvent *event);\n     void dropEvent(QDropEvent *event);\n     bool eventFilter(QObject *object, QEvent *event);\n@@ -150,7 +151,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title\n@@ -218,6 +219,9 @@ private Q_SLOTS:\n \n     /** Show progress dialog e.g. for verifychain */\n     void showProgress(const QString &title, int nProgress);\n+    \n+    /** When hideTrayIcon setting is changed in OptionsModel hide or show the icon accordingly. */\n+    void setTrayIconVisible(bool);\n };\n \n class UnitDisplayStatusBarControl : public QLabel"
      },
      {
        "sha": "ce8753fc7ddc6a97870e9f96c49f4e13e34a6b6e",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 44,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1,26 +1,35 @@\n-// Copyright (c) 2013-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n \n #include <QtGlobal>\n \n-// Automatically generated by extract_strings.py\n+// Automatically generated by extract_strings_qt.py\n #ifdef __GNUC__\n #define UNUSED __attribute__((unused))\n #else\n #define UNUSED\n #endif\n static const char UNUSED *bitcoin_strings[] = {\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Bitcoin Core\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The %s developers\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"(1 = keep tx meta data e.g. account owner and payment request information, 2 \"\n \"= drop tx meta data)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"-fallbackfee is set very high! This is the transaction fee you may pay when \"\n+\"fee estimates are not available.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"-maxtxfee is set very high! Fees this large could be paid on a single \"\n \"transaction.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"-paytxfee is set very high! This is the transaction fee you will pay if you \"\n \"send a transaction.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient \"\n+\"data (default: %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Accept relayed transactions received from whitelisted peers even when not \"\n+\"relaying transactions (default: %d)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Allow JSON-RPC connections from specified source. Valid for <ip> are a \"\n \"single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or \"\n \"a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"),\n@@ -35,8 +44,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"notation for IPv6. This option can be specified multiple times (default: \"\n \"bind to all interfaces)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Cannot obtain a lock on data directory %s. Bitcoin Core is probably already \"\n-\"running.\"),\n+\"Cannot obtain a lock on data directory %s. %s is probably already running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Create new files with system default permissions, instead of umask 077 (only \"\n \"effective with disabled wallet functionality)\"),\n@@ -52,8 +60,10 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Error reading wallet.dat! All keys read correctly, but transaction data or \"\n-\"address book entries might be missing or incorrect.\"),\n+\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Error reading %s! All keys read correctly, but transaction data or address \"\n+\"book entries might be missing or incorrect.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -72,6 +82,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fees (in %s/kB) smaller than this are considered zero fee for transaction \"\n \"creation (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Force relay of transactions from whitelisted peers even they violate local \"\n+\"relay policy (default: %d)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"How thorough the block verification of -checkblocks is (0-4, default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"If <category> is not supplied or if <category> = 1, output all debugging \"\n@@ -86,18 +99,25 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Maintain a full transaction index, used by the getrawtransaction rpc call \"\n \"(default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Maximum allowed median peer time offset adjustment. Local perspective of \"\n+\"time may be influenced by peers forward or backward by this amount. \"\n+\"(default: %u seconds)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Maximum size of data in data carrier transactions we relay and mine \"\n \"(default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Maximum total fees (in %s) to use in a single wallet transaction; setting \"\n-\"this too low may abort large transactions (default: %s)\"),\n+\"Maximum total fees (in %s) to use in a single wallet transaction or raw \"\n+\"transaction; setting this too low may abort large transactions (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Output debugging information (default: %u, supplying <category> is optional)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Please check that your computer's date and time are correct! If your clock \"\n-\"is wrong Bitcoin Core will not work properly.\"),\n+\"is wrong, %s will not work properly.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Please contribute if you find %s useful. Visit %s for further information \"\n+\"about the software.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Prune configured below the minimum of %d MiB.  Please use a higher number.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -123,9 +143,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of script verification threads (%u to %d, 0 = auto, <0 = \"\n \"leave that many cores free, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Set the number of threads for coin generation if enabled (-1 = all cores, \"\n-\"default: %d)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Support filtering of blocks and transaction with bloom filters (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"The block database contains a block which appears to be from the future. \"\n@@ -148,14 +165,17 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = \"\n \"no limit (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Unable to bind to %s on this computer. Bitcoin Core is probably already \"\n-\"running.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unsupported argument -socks found. Setting SOCKS version isn't possible \"\n \"anymore, only SOCKS5 proxies are supported.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Unsupported argument -whitelistalwaysrelay ignored, use -whitelistrelay and/\"\n+\"or -whitelistforcerelay.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Use hierarchical deterministic key generation (HD) after bip32. Only has \"\n+\"effect during wallet creation/first start\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: \"\n \"%s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -172,13 +192,16 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: The network does not appear to fully agree! Some miners appear to \"\n \"be experiencing issues.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Warning: Unknown block versions being mined! It's possible unknown rules are \"\n+\"in effect\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Warning: Wallet file corrupt, data salvaged! Original %s saved as %s in %s; \"\n+\"if your balance or transactions are incorrect you should restore from a \"\n+\"backup.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: We do not appear to fully agree with our peers! You may need to \"\n \"upgrade, or other nodes may need to upgrade.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as \"\n-\"wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect \"\n-\"you should restore from a backup.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Whitelist peers connecting from the given netmask or IP address. Can be \"\n \"specified multiple times.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -187,31 +210,32 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"You need to rebuild the database using -reindex to go back to unpruned \"\n \"mode.  This will redownload the entire blockchain\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"You need to rebuild the database using -reindex-chainstate to change -txindex\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s corrupt, salvage failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-maxmempool must be at least %d MB\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"<category> can be:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept command line and JSON-RPC commands\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept public REST requests (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Activating best chain...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Add a node to connect to and attempt to keep the connection open\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Allow DNS lookups for -addnode, -seednode and -connect\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Always query for peer addresses via DNS lookup (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Always relay transactions received from whitelisted peers (default: %d)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Attempt to recover private keys from a corrupt wallet.dat on startup\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Append comment to the user agent string\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Attempt to recover private keys from a corrupt wallet on startup\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Automatically create Tor hidden service (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Block creation options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot downgrade wallet\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -bind address: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -externalip address: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -whitebind address: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -%s address: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot write default address\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Change index out of range\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect only to the specified node(s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect through SOCKS5 proxy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect to a node to retrieve peer addresses, and disconnect\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connection options:\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Copyright (C) 2009-%i The Bitcoin Core Developers\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Copyright (C) %i-%i\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Corrupted block database detected\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Debugging/Testing options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Do not load the wallet and disable wallet RPC calls\"),\n@@ -221,60 +245,64 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Enable publish hash block in <address>\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Enable publish hash transaction in <address>\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Enable publish raw block in <address>\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Enable publish raw transaction in <address>\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Enable transaction replacement in the memory pool (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error initializing block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error initializing wallet database environment %s!\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet corrupted\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet requires newer version of %s\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: You can't disable HD on a already existing HD wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading block database\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet corrupted\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error reading from database, shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Generate coins (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"How many blocks to check at startup (default: %u, 0 = all)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Importing...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Imports blocks from external blk000??.dat file on startup\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Include IP addresses in debug output (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Incorrect or no genesis block found. Wrong datadir for network?\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Information\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. Bitcoin Core is shutting down.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. %s is shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -maxtxfee=<amount>: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -minrelaytxfee=<amount>: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -mintxfee=<amount>: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -%s=<amount>: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -fallbackfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep the transaction memory pool below <n> megabytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading banlist...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading block index...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading wallet...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Location of the auth cookie (default: data dir)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Maintain at most <n> connections to peers (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Make the wallet broadcast transactions\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Minimum bytes per sigop in transactions we relay and mine (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Need to specify a port with -whitebind: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Node relay options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Not enough file descriptors available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Password for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prepend debug output with timestamp (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Print this help message and exit\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Print version and exit\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prune cannot be configured with a negative value.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prune mode is incompatible with -txindex.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Pruning blockstore...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"RPC server options:\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rebuild block chain index from current blk000??.dat files on startup\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Receive and display P2P network alerts (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rebuild chain state and block index from the blk*.dat files on disk\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rebuild chain state from the currently indexed blocks\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Reducing -maxconnections from %d to %d, because of system limitations.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay and mine data carrier transactions (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay non-P2SH multisig (default: %u)\"),\n@@ -298,8 +326,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify pid file (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify wallet file (within data directory)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify your own public address\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Spend unconfirmed change when sending transactions (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The source code is available from %s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The transaction amount is too small to pay the fee\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is experimental software.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Threshold for disconnecting misbehaving peers (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Tor control port password (default: empty)\"),\n@@ -309,6 +337,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must be positive\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large for fee policy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to start HTTP server. See debug log for details.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -benchmark ignored, use -debug=bench.\"),\n@@ -321,13 +350,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart Bitcoin Core to complete\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet debugging/testing options:\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete; upgrade required!\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Whether to operate in a blocks only mode (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"You need to rebuild the database using -reindex to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Zapping all transactions from wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"ZeroMQ notification options:\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"wallet.dat corrupt, salvage failed\"),\n };"
      },
      {
        "sha": "108500654b2da8e8238549484fae4a5fbd4d1146",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -24,6 +24,7 @@\n class CBlockIndex;\n \n static const int64_t nClientStartupTime = GetTime();\n+static int64_t nLastHeaderTipUpdateNotification = 0;\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n@@ -226,7 +227,7 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n-static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex)\n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex, bool fHeader)\n {\n     // lock free async UI updates in case we have a new block tip\n     // during initial sync, only update the UI if the last update\n@@ -235,14 +236,17 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     if (initialSync)\n         now = GetTimeMillis();\n \n+    int64_t& nLastUpdateNotification = fHeader ? nLastHeaderTipUpdateNotification : nLastBlockTipUpdateNotification;\n+\n     // if we are in-sync, update the UI regardless of last update time\n-    if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n+    if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),\n-                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)));\n-        nLastBlockTipUpdateNotification = now;\n+                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)),\n+                                  Q_ARG(bool, fHeader));\n+        nLastUpdateNotification = now;\n     }\n }\n \n@@ -253,7 +257,8 @@ void ClientModel::subscribeToCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n+    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n+    uiInterface.NotifyHeaderTip.connect(boost::bind(BlockTipChanged, this, _1, _2, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -263,5 +268,6 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n+    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));\n+    uiInterface.NotifyHeaderTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, true));\n }"
      },
      {
        "sha": "439680431963e8b27ac4b37541edc329f7b35ee9",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -89,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress, bool header);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "0b292018727edc1d7dbd1869936705ffae89b2bb",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -504,6 +504,16 @@\n        <string>&amp;Window</string>\n       </attribute>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_Window\">\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"hideTrayIcon\">\n+         <property name=\"toolTip\">\n+          <string>&amp;Hide the icon from the system tray.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Hide tray icon</string>\n+         </property>\n+        </widget>\n+       </item>\n        <item>\n         <widget class=\"QCheckBox\" name=\"minimizeToTray\">\n          <property name=\"toolTip\">"
      },
      {
        "sha": "4163f4189c5e9ef87afdb894731dcf8010966a31",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -22,7 +22,7 @@\n      <property name=\"minimumSize\">\n       <size>\n        <width>300</width>\n-       <height>300</height>\n+       <height>320</height>\n       </size>\n      </property>\n      <property name=\"toolTip\">"
      },
      {
        "sha": "3a698cfd1d40816a2d1491c99243f3c2deaacc34",
        "filename": "src/qt/forms/transactiondescdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/transactiondescdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/forms/transactiondescdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/transactiondescdialog.ui?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -11,7 +11,7 @@\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n-   <string>Transaction details</string>\n+   <string notr=\"true\">Transaction details</string>\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n    <item>"
      },
      {
        "sha": "bab9923d20d4985cb0d8c647bba10cf53baaf56f",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -43,7 +43,7 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n static const int MAX_URI_LENGTH = 255;\n \n /* QRCodeDialog -- size of exported QR Code image */\n-#define EXPORT_IMAGE_SIZE 256\n+#define QR_IMAGE_SIZE 300\n \n /* Number of frames in spinner animation */\n #define SPINNER_FRAMES 36"
      },
      {
        "sha": "492c7bccd4e1b25af26edfd78e22f8f845707b3f",
        "filename": "src/qt/locale/bitcoin_af.ts",
        "status": "added",
        "additions": 509,
        "deletions": 0,
        "changes": 509,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_af.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_af.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -0,0 +1,509 @@\n+<TS language=\"af\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Regs-kliek om die adres of etiket te verander</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Skep 'n nuwe adres</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;Nuut</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Dupliseer die geselekteerde adres na die sisteem se geheuebord</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Dupliseer</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Dupliseer Adres</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Verwyder die adres wat u gekies het van die lys</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Voer die inligting op hierdie bladsy uit na 'n leer</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Voer uit</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;Vee uit</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Kies die adres waarheen u munte wil stuur</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Kies die adres wat die munte moet ontvang</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Stuurders adresse</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Ontvanger adresse</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Hierdie is die adresse vanwaar u Bitcoin betalings stuur. U moet altyd die bedrag en die adres van die ontvanger nagaan voordat u enige munte stuur.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Hierdie is die adresse waar u Bitcoins sal ontvang. Ons beveel aan dat u 'n nuwe adres kies vir elke transaksie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Verander</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Voer adreslys uit</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Comma separated file (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Uitvoer was onsuksesvol</translation>\n+    </message>\n+    <message>\n+        <source>There was an error trying to save the address list to %1. Please try again.</source>\n+        <translation>Die adreslys kon nie in %1  gestoor word nie.  Probeer asseblief weer.</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(geen etiket)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>Wagwoord Dialoog</translation>\n+    </message>\n+    <message>\n+        <source>Enter passphrase</source>\n+        <translation>Tik u wagwoord in</translation>\n+    </message>\n+    <message>\n+        <source>New passphrase</source>\n+        <translation>Nuwe wagwoord</translation>\n+    </message>\n+    <message>\n+        <source>Repeat new passphrase</source>\n+        <translation>Herhaal nuwe wagwoord</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>Kodifiseer beursie</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>U het u beursie se wagwoord nodig om toegang tot u beursie te verkry.</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>Sluit beursie oop</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to decrypt the wallet.</source>\n+        <translation>U het u beursie se wagwoord nodig om u beursie se kode te ontsyfer.</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>Ontsleutel beursie</translation>\n+    </message>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Verander wagwoord</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Bevestig dat die beursie gekodifiseer is</translation>\n+    </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Waarskuwing: Indien u die beursie kodifiseer en u vergeet u wagwoord &lt;b&gt;VERLOOR U AL U BITCOINS&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Is u seker dat u die beursie wil kodifiseer?</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin Core will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>Bitcoin Kern gaan nou toemaak om die kodifikasie af te handel. Onthou dat die kodifikasie van u beursie nie altyd u munte kan beskerm teen diefstal deur kwaadwillige sagteware op u rekenaar nie.</translation>\n+    </message>\n+    <message>\n+        <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n+        <translation>BELANGRIK:  Alle vorige kopie\u00eb en rugsteun-weergawes wat u tevore van die gemaak het, moet vervang word met die jongste weergawe van u nuutste gekodifiseerde beursie.  Alle vorige weergawes en rugsteun-kopie\u00eb van u beursie sal nutteloos raak die oomblik wat u die nuut-gekodifiseerde beursie begin gebruik.</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The Caps Lock key is on!</source>\n+        <translation>WAARSKUWING:  Outomatiese Kapitalisering is aktief op u sleutelbord!</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>Beursie gekodifiseer</translation>\n+    </message>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>Tik die nuwe wagwoord vir u beursie.&lt;br/&gt;Gerbuik asseblief 'n wagwoord met &lt;b&gt;tien of meer lukrake karakters&lt;/b&gt;, of &lt;b&gt;agt of meer woorde&lt;/b&gt;.</translation>\n+    </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>Tik die ou en die nuwe wagwoorde vir die beursie.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>Kodifikasie was onsuksesvol</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n+        <translation>Weens 'n interne fout het kodifikasie het nie geslaag nie.  U beursie is nie gekodifiseer nie</translation>\n+    </message>\n+    <message>\n+        <source>The supplied passphrases do not match.</source>\n+        <translation>Die wagwoorde stem nie ooreen nie.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>Die beursie is nie oopgesluit nie</translation>\n+    </message>\n+    <message>\n+        <source>The passphrase entered for the wallet decryption was incorrect.</source>\n+        <translation>U het die verkeerde wagwoord ingetik.</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Verban tot</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Synchronizing with network...</source>\n+        <translation>Netwerk-sinkronisasie...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Overview</source>\n+        <translation>&amp;Oorsig</translation>\n+    </message>\n+    <message>\n+        <source>Node</source>\n+        <translation>Node</translation>\n+    </message>\n+    <message>\n+        <source>Show general overview of wallet</source>\n+        <translation>Vertoon 'n algemene oorsig van die beursie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Transactions</source>\n+        <translation>&amp;Transaksies</translation>\n+    </message>\n+    <message>\n+        <source>Quit application</source>\n+        <translation>Stop en verlaat die applikasie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Options...</source>\n+        <translation>&amp;Opsies</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Encrypt Wallet...</source>\n+        <translation>&amp;Kodifiseer Beursie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Backup Wallet...</source>\n+        <translation>&amp;Rugsteun-kopie van Beursie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Change Passphrase...</source>\n+        <translation>&amp;Verander Wagwoord</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Sending addresses...</source>\n+        <translation>&amp;Versending adresse...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receiving addresses...</source>\n+        <translation>&amp;Ontvanger adresse</translation>\n+    </message>\n+    <message>\n+        <source>Open &amp;URI...</source>\n+        <translation>Oop &amp; URI...</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin Core client</source>\n+        <translation>Bitcoin Kern klient</translation>\n+    </message>\n+    <message>\n+        <source>Importing blocks from disk...</source>\n+        <translation>Besig om blokke vanaf die hardeskyf in te voer...</translation>\n+    </message>\n+    <message>\n+        <source>Reindexing blocks on disk...</source>\n+        <translation>Besig met herindeksering van blokke op hardeskyf...</translation>\n+    </message>\n+    <message>\n+        <source>Send coins to a Bitcoin address</source>\n+        <translation>Stuur munte na 'n Bitcoin adres</translation>\n+    </message>\n+    <message>\n+        <source>Backup wallet to another location</source>\n+        <translation>Maak 'n rugsteun-kopi\u00e9 van beursie na 'n ander stoorplek</translation>\n+    </message>\n+    <message>\n+        <source>Change the passphrase used for wallet encryption</source>\n+        <translation>Verander die wagwoord wat ek vir kodifikasie van my beursie gebruik</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin</source>\n+        <translation>Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Wallet</source>\n+        <translation>Beursie</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Send</source>\n+        <translation>&amp;Stuur</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receive</source>\n+        <translation>&amp;Ontvang</translation>\n+    </message>\n+    <message>\n+        <source>Show information about Bitcoin Core</source>\n+        <translation>Vertoon inligting oor Bitcoin Kern</translation>\n+    </message>\n+    <message>\n+        <source>Show or hide the main Window</source>\n+        <translation>Wys of versteek die hoofbladsy</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt the private keys that belong to your wallet</source>\n+        <translation>Kodifiseer die private sleutes wat aan jou beursie gekoppel is.</translation>\n+    </message>\n+    <message>\n+        <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n+        <translation>Onderteken boodskappe met u Bitcoin adresse om u eienaarskap te bewys</translation>\n+    </message>\n+    <message>\n+        <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n+        <translation>Verifie\u00ebr boodskappe om seker te maak dat dit met die gespesifiseerde Bitcoin adresse</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Help</source>\n+        <translation>&amp;Help</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin Core</source>\n+        <translation>Bitcoin Kern</translation>\n+    </message>\n+    <message>\n+        <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n+        <translation>Versoek betalings (genereer QR-kodes en bitcoin: URI's)</translation>\n+    </message>\n+    <message>\n+        <source>&amp;About Bitcoin Core</source>\n+        <translation>&amp;Omtrent Bitcoin Kern</translation>\n+    </message>\n+    <message>\n+        <source>Modify configuration options for Bitcoin Core</source>\n+        <translation>Verander konfigurasie-opsies vir Bitcoin Kern</translation>\n+    </message>\n+    <message>\n+        <source>Show the list of used sending addresses and labels</source>\n+        <translation>Vertoon die lys van gebruikte versendingsadresse en etikette</translation>\n+    </message>\n+    <message>\n+        <source>Show the list of used receiving addresses and labels</source>\n+        <translation>Vertoon die lys van gebruikte ontvangers-adresse en etikette</translation>\n+    </message>\n+    <message>\n+        <source>Open a bitcoin: URI or payment request</source>\n+        <translation>Skep 'n bitcoin: URI of betalingsversoek</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>ClientModel</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(geen etiket)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    <message>\n+        <source>Bitcoin Core</source>\n+        <translation>Bitcoin Kern</translation>\n+    </message>\n+    <message>\n+        <source>Reset all settings changes made over the GUI</source>\n+        <translation>Herstel al my veranderinge aan die stellings terug na die verstek-opsies</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>Intro</name>\n+    <message>\n+        <source>Bitcoin Core</source>\n+        <translation>Bitcoin Kern</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(geen etiket)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(geen etiket)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    <message>\n+        <source>Bitcoin Core</source>\n+        <translation>Bitcoin Kern</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Uitvoer was onsuksesvol</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Comma separated file (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Voer uit</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Voer die inligting op hierdie bladsy uit na 'n leer</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)</source>\n+        <translation>WAARSKUWING:  toets die status van u netwerk, %d blokke ontvang in die laaste %d ure (%d verwag)</translation>\n+    </message>\n+    <message>\n+        <source>Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)</source>\n+        <translation>Moenie transaksies vir langer as &lt;n&gt; ure in die geheuepoel hou nie (verstek: %u)</translation>\n+    </message>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "12ac21eb80dcf9034c3487f493bb245bc84e014e",
        "filename": "src/qt/locale/bitcoin_af_ZA.ts",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_af_ZA.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_af_ZA.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af_ZA.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -31,17 +31,21 @@\n </context>\n <context>\n     <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>Wagfrase Dialoog</translation>\n+    </message>\n     <message>\n         <source>Enter passphrase</source>\n-        <translation>Tik Wagwoord in</translation>\n+        <translation>Tik wagfrase in</translation>\n     </message>\n     <message>\n         <source>New passphrase</source>\n-        <translation>Nuwe wagwoord</translation>\n+        <translation>Nuwe wagfrase</translation>\n     </message>\n     <message>\n         <source>Repeat new passphrase</source>\n-        <translation>Herhaal nuwe wagwoord</translation>\n+        <translation>Herhaal nuwe wagfrase</translation>\n     </message>\n     <message>\n         <source>Encrypt wallet</source>\n@@ -65,7 +69,7 @@\n     </message>\n     <message>\n         <source>Change passphrase</source>\n-        <translation>Verander wagwoord</translation>\n+        <translation>Verander wagfrase</translation>\n     </message>\n     <message>\n         <source>Confirm wallet encryption</source>\n@@ -75,6 +79,10 @@\n         <source>Wallet encrypted</source>\n         <translation>Die beursie is nou bewaak</translation>\n     </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>Tik in die ou wagfrase en die nuwe wagfrase vir die beursie.</translation>\n+    </message>\n     <message>\n         <source>Wallet encryption failed</source>\n         <translation>Die beursie kon nie bewaak word nie</translation>\n@@ -85,21 +93,25 @@\n     </message>\n     <message>\n         <source>The supplied passphrases do not match.</source>\n-        <translation>Die wagwoord stem nie ooreen nie</translation>\n+        <translation>Die wagfrase stem nie ooreen nie</translation>\n     </message>\n     <message>\n         <source>Wallet unlock failed</source>\n         <translation>Beursie oopsluiting het misluk</translation>\n     </message>\n     <message>\n         <source>The passphrase entered for the wallet decryption was incorrect.</source>\n-        <translation>Die wagwoord wat ingetik was om die beursie oop te sluit, was verkeerd.</translation>\n+        <translation>Die wagfrase wat ingetik was om die beursie oop te sluit, was verkeerd.</translation>\n     </message>\n     <message>\n         <source>Wallet decryption failed</source>\n         <translation>Beursie dekripsie het misluk</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Wallet passphrase was successfully changed.</source>\n+        <translation>Die beursie se wagfrase verandering was suksesvol.</translation>\n+    </message>\n+</context>\n <context>\n     <name>BanTableModel</name>\n     </context>"
      },
      {
        "sha": "1e74564ed3eadde36c02e265e18581dabe29278d",
        "filename": "src/qt/locale/bitcoin_ar.ts",
        "status": "modified",
        "additions": 150,
        "deletions": 2,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ar.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ar.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ar.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -222,7 +222,15 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644/\u0642\u0646\u0627\u0639</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>\u0645\u062d\u0638\u0648\u0631 \u062d\u062a\u0649</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -325,6 +333,10 @@\n         <source>&amp;Debug window</source>\n         <translation>&amp;\u0646\u0627\u0641\u0630\u0629 \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0629</translation>\n     </message>\n+    <message>\n+        <source>Open debugging and diagnostic console</source>\n+        <translation>\u0625\u0641\u062a\u062d \u0648\u062d\u062f\u0629 \u0627\u0644\u062a\u0635\u062d\u064a\u062d \u0648 \u0627\u0644\u062a\u0634\u062e\u064a\u0635</translation>\n+    </message>\n     <message>\n         <source>&amp;Verify message...</source>\n         <translation>&amp;\u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0631\u0633\u0627\u0644\u0629...</translation>\n@@ -361,6 +373,14 @@\n         <source>Encrypt the private keys that belong to your wallet</source>\n         <translation>\u062a\u0634\u0641\u064a\u0631 \u0627\u0644\u0645\u0641\u062a\u0627\u062d \u0627\u0644\u062e\u0627\u0635 \u0628\u0645\u062d\u0641\u0638\u062a\u0643</translation>\n     </message>\n+    <message>\n+        <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n+        <translation>\u0648\u0642\u064e\u0639 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644: Bitcoin \u0627\u0644\u062e\u0627\u0635 \u0628\u0643 \u0644\u0625\u062b\u0628\u0627\u062a \u0627\u0645\u062a\u0644\u0627\u0643\u0643 \u0644\u0647\u0645</translation>\n+    </message>\n+    <message>\n+        <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n+        <translation>\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0644\u0644\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646\u064e\u0647\u0627 \u0648\u064f\u0642\u0639\u062a \u0628\u0631\u0633\u0627\u0626\u0644 Bitcoin \u0645\u062d\u062f\u064e\u062f\u0629</translation>\n+    </message>\n     <message>\n         <source>&amp;File</source>\n         <translation>&amp;\u0645\u0644\u0641</translation>\n@@ -381,14 +401,58 @@\n         <source>Bitcoin Core</source>\n         <translation>\u062c\u0648\u0647\u0631 \u0627\u0644\u0628\u064a\u062a \u0643\u0648\u064a\u0646</translation>\n     </message>\n+    <message>\n+        <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n+        <translation>\u0623\u0637\u0644\u0628 \u062f\u0641\u0639\u0627\u062a (\u064a\u0648\u0644\u062f \u0643\u0648\u062f\u0627\u062a \u0627\u0644\u0631\u0645\u0632 \u0627\u0644\u0645\u0631\u0628\u0639 \u0648\u0628\u064a\u062a \u0643\u0648\u064a\u0646: \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0645\u0639\u0637\u0627\u0629)</translation>\n+    </message>\n     <message>\n         <source>&amp;About Bitcoin Core</source>\n         <translation>\u062d\u0648\u0644 bitcoin core</translation>\n     </message>\n+    <message>\n+        <source>Modify configuration options for Bitcoin Core</source>\n+        <translation>\u062a\u063a\u064a\u064a\u0631 \u062e\u064a\u0627\u0631\u0627\u062a \u0627\u0644\u0625\u0639\u062f\u0627\u062f \u0644\u0623\u0633\u0627\u0633 Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Show the list of used sending addresses and labels</source>\n+        <translation>\u0639\u0631\u0636 \u0642\u0627\u0626\u0645\u0629 \u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0648\u0627\u0644\u0645\u0644\u0635\u0642\u0627\u062a</translation>\n+    </message>\n+    <message>\n+        <source>Show the list of used receiving addresses and labels</source>\n+        <translation>\u0639\u0631\u0636 \u0642\u0627\u0626\u0645\u0629 \u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0625\u0633\u062a\u0642\u0628\u0627\u0644 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0629 \u0648\u0627\u0644\u0645\u0644\u0635\u0642\u0627\u062a</translation>\n+    </message>\n+    <message>\n+        <source>Open a bitcoin: URI or payment request</source>\n+        <translation>\u0641\u062a\u062d URI : Bitcoin \u0623\u0648 \u0637\u0644\u0628 \u062f\u0641\u0639</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Command-line options</source>\n+        <translation>&amp;\u062e\u064a\u0627\u0631\u0627\u062a \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631</translation>\n+    </message>\n+    <message>\n+        <source>No block source available...</source>\n+        <translation>\u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u0645\u0635\u062f\u0631 \u0627\u0644\u0643\u062a\u0644\u0629</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>Processed %n block(s) of transaction history.</source>\n+        <translation><numerusform>\u0644\u0645 \u064a\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 \u0623\u064a \u0643\u062a\u0644\u0629 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform><numerusform>\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 \u0643\u062a\u0644\u0629 \u0648\u0627\u062d\u062f\u0629 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform><numerusform>\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 \u0643\u062a\u0644\u062a\u064a\u0646 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform><numerusform>\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 %n \u0643\u062a\u0644 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform><numerusform>\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 %n \u0643\u062a\u0644\u0629 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform><numerusform>\u062a\u0645 \u0645\u0639\u0627\u0644\u062c\u0629 %n \u0643\u062a\u0644\u0629 \u0633\u062c\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>0 \u0633\u0627\u0639\u0629</numerusform><numerusform>%n \u0633\u0627\u0639\u0629</numerusform><numerusform>%n \u0633\u0627\u0639\u062a\u064a\u0646</numerusform><numerusform>%n \u0633\u0627\u0639\u0627\u062a</numerusform><numerusform>%n \u0633\u0627\u0639\u0629</numerusform><numerusform>%n \u0633\u0627\u0639\u0627\u062a</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 \u0648 %2</translation>\n     </message>\n+    <message>\n+        <source>Last received block was generated %1 ago.</source>\n+        <translation>\u062a\u0645 \u062a\u0648\u0644\u064a\u062f \u0627\u0644\u0643\u062a\u0644\u0629 \u0627\u0644\u0645\u0633\u062a\u0642\u0628\u0644\u0629 \u0627\u0644\u0623\u062e\u064a\u0631\u0629 \u0645\u0646\u0630 %1.</translation>\n+    </message>\n+    <message>\n+        <source>Transactions after this will not yet be visible.</source>\n+        <translation>\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0628\u0639\u062f \u0630\u0644\u0643 \u0644\u0646 \u062a\u0643\u0648\u0646 \u0645\u0631\u064a\u0626\u0629 \u0628\u0639\u062f.</translation>\n+    </message>\n     <message>\n         <source>Error</source>\n         <translation>\u062e\u0637\u0623</translation>\n@@ -463,6 +527,14 @@\n         <source>Amount</source>\n         <translation>\u0627\u0644\u0645\u0628\u0644\u063a</translation>\n     </message>\n+    <message>\n+        <source>Received with label</source>\n+        <translation>\u0645\u0633\u062a\u0642\u0628\u0644 \u0645\u0639 \u0645\u0644\u0635\u0642</translation>\n+    </message>\n+    <message>\n+        <source>Received with address</source>\n+        <translation>\u0645\u0633\u062a\u0642\u0628\u0644 \u0645\u0639 \u0639\u0646\u0648\u0627\u0646</translation>\n+    </message>\n     <message>\n         <source>Date</source>\n         <translation>\u0627\u0644\u062a\u0627\u0631\u064a\u062e</translation>\n@@ -531,6 +603,14 @@\n         <source>medium-high</source>\n         <translation>\u0645\u062a\u0648\u0633\u0637-\u0645\u0631\u062a\u0641\u0639</translation>\n     </message>\n+    <message>\n+        <source>medium</source>\n+        <translation>\u0645\u062a\u0648\u0633\u0637</translation>\n+    </message>\n+    <message>\n+        <source>low-medium</source>\n+        <translation>\u0645\u062a\u0648\u0633\u0637-\u0645\u0646\u062e\u0641\u0636</translation>\n+    </message>\n     <message>\n         <source>low</source>\n         <translation>\u0645\u0646\u062e\u0641\u0636</translation>\n@@ -547,6 +627,10 @@\n         <source>none</source>\n         <translation>\u0644\u0627 \u0634\u064a\u0621</translation>\n     </message>\n+    <message>\n+        <source>This label turns red if the transaction size is greater than 1000 bytes.</source>\n+        <translation>\u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0635\u0642 \u064a\u0635\u0628\u062d \u0623\u062e\u0645\u0631\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u062d\u062c\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u0623\u0643\u0628\u0631 \u0645\u0646 1000 \u0628\u0627\u064a\u062a.</translation>\n+    </message>\n     <message>\n         <source>yes</source>\n         <translation>\u0646\u0639\u0645</translation>\n@@ -555,6 +639,18 @@\n         <source>no</source>\n         <translation>\u0644\u0627</translation>\n     </message>\n+    <message>\n+        <source>This means a fee of at least %1 per kB is required.</source>\n+        <translation>\u0647\u0630\u0627 \u064a\u0639\u0646\u064a \u0623\u0646 \u0645\u0646 \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0627\u0644\u0631\u0633\u0645 \u0623\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 %1 \u0644\u0643\u0644 \u0643\u064a\u0644\u0648\u0628\u0627\u064a\u062a.</translation>\n+    </message>\n+    <message>\n+        <source>Can vary +/- 1 byte per input.</source>\n+        <translation>\u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u062a\u0641\u0627\u0648\u062a \u0628\u0640 1 \u0628\u0627\u064a\u062a \u0644\u0643\u0644 \u0645\u0633\u0627\u0647\u0645\u0629.</translation>\n+    </message>\n+    <message>\n+        <source>Transactions with higher priority are more likely to get included into a block.</source>\n+        <translation>\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0647\u0627 \u0623\u0648\u0644\u0648\u064a\u0629 \u0623\u0639\u0644\u0649 \u0639\u0644\u0649 \u0627\u0644\u0623\u0631\u062c\u062d \u0633\u064a\u062a\u0645 \u0625\u0646\u0636\u0645\u0627\u0645\u0647\u0627 \u0641\u064a \u0627\u0644\u0643\u062a\u0644\u0629.</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u0644\u0627 \u0648\u0635\u0641)</translation>\n@@ -598,6 +694,10 @@\n         <source>The entered address \"%1\" is already in the address book.</source>\n         <translation>\u0647\u062f\u0627 \u0627\u0644\u0639\u0646\u0648\u0627\u0646 \"%1\" \u0645\u0648\u062c\u0648\u062f \u0645\u0633\u0628\u0642\u0627 \u0641\u064a \u062f\u0641\u062a\u0631 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646</translation>\n     </message>\n+    <message>\n+        <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n+        <translation>\u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0645\u062f\u062e\u0644 \"%1\" \u0644\u064a\u0633 \u0639\u0646\u0648\u0627\u0646 \u0628\u064a\u062a \u0643\u0648\u064a\u0646 \u0635\u062d\u064a\u062d.</translation>\n+    </message>\n     <message>\n         <source>Could not unlock wallet.</source>\n         <translation> \u064a\u0645\u0643\u0646 \u0641\u062a\u062d \u0627\u0644\u0645\u062d\u0641\u0638\u0629.</translation>\n@@ -617,6 +717,14 @@\n         <source>name</source>\n         <translation>\u0627\u0644\u0627\u0633\u0645</translation>\n     </message>\n+    <message>\n+        <source>Directory already exists. Add %1 if you intend to create a new directory here.</source>\n+        <translation>\u0627\u0644\u062f\u0644\u064a\u0644 \u0645\u0648\u062c\u0648\u062c \u0628\u0627\u0644\u0641\u0639\u0644. \u0623\u0636\u0641 %1 \u0644\u0648 \u0646\u0648\u064a\u062a \u0625\u0646\u0634\u0627\u0621 \u062f\u0644\u064a\u0644 \u062c\u062f\u064a\u062f \u0647\u0646\u0627.</translation>\n+    </message>\n+    <message>\n+        <source>Path already exists, and is not a directory.</source>\n+        <translation>\u0627\u0644\u0645\u0633\u0627\u0631 \u0645\u0648\u062c\u0648\u062f \u0628\u0627\u0644\u0641\u0639\u0644\u060c \u0648\u0647\u0648 \u0644\u064a\u0633 \u062f\u0644\u064a\u0644\u0627\u064b.</translation>\n+    </message>\n     <message>\n         <source>Cannot create data directory here.</source>\n         <translation>\u0644\u0627 \u064a\u0645\u0643\u0646 \u0627\u0646\u0634\u0627\u0621 \u062f\u0644\u064a\u0644 \u0628\u064a\u0627\u0646\u0627\u062a \u0647\u0646\u0627 .</translation>\n@@ -636,11 +744,39 @@\n         <source>About Bitcoin Core</source>\n         <translation>\u0639\u0646 \u062c\u0648\u0647\u0631 \u0627\u0644\u0628\u064a\u062a \u0643\u0648\u064a\u0646</translation>\n     </message>\n+    <message>\n+        <source>Command-line options</source>\n+        <translation>\u062e\u064a\u0627\u0631\u0627\u062a \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631</translation>\n+    </message>\n     <message>\n         <source>Usage:</source>\n         <translation>\u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>command-line options</source>\n+        <translation>\u062e\u064a\u0627\u0631\u0627\u062a \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631</translation>\n+    </message>\n+    <message>\n+        <source>UI Options:</source>\n+        <translation>\u062e\u064a\u0627\u0631\u0627\u062a \u0648\u0627\u062c\u0647\u0629 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645</translation>\n+    </message>\n+    <message>\n+        <source>Choose data directory on startup (default: %u)</source>\n+        <translation>\u0627\u062e\u062a\u0631 \u062f\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0646\u062f \u0628\u062f\u0621 \u0627\u0644\u062a\u0634\u063a\u064a\u0631 (\u0627\u0641\u062a\u0631\u0627\u0636\u064a: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Set SSL root certificates for payment request (default: -system-)</source>\n+        <translation>\u0623\u0636\u0639 \u0634\u0647\u0627\u062f\u0629 \u0628\u0631\u0648\u062a\u0648\u0643\u0648\u0644 \u0627\u0644\u0634\u0628\u0642\u0629 \u0627\u0644\u0623\u0645\u0646\u064a\u0629 \u0644\u0637\u0644\u0628 \u0627\u0644\u0645\u062f\u0641\u0648\u0639 (\u0627\u0641\u062a\u0631\u0627\u0636\u064a: -\u0646\u0638\u0627\u0645-)</translation>\n+    </message>\n+    <message>\n+        <source>Show splash screen on startup (default: %u)</source>\n+        <translation>\u0623\u0638\u0647\u0631 \u0634\u0627\u0634\u0629 \u0627\u0644\u0628\u062f\u0627\u064a\u0629 \u0639\u0646\u062f \u0628\u062f\u0621 \u0627\u0644\u062a\u0634\u063a\u064a\u0644 (\u0627\u0641\u062a\u0631\u0627\u0636\u064a: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Reset all settings changes made over the GUI</source>\n+        <translation>\u0625\u0639\u0627\u062f\u0629 \u062a\u0639\u064a\u064a\u0646 \u0643\u0644 \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u062a\u0645 \u062a\u063a\u064a\u064a\u0631\u0647\u0627 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0627\u0644\u0648\u0627\u062c\u0647\u0629 \u0627\u0644\u0631\u0633\u0648\u0645\u064a\u0629</translation>\n+    </message>\n+</context>\n <context>\n     <name>Intro</name>\n     <message>\n@@ -1793,14 +1929,26 @@\n         <source>Invalid -proxy address: '%s'</source>\n         <translation>\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0628\u0631\u0648\u0643\u0633\u064a \u063a\u064a\u0631 \u0635\u062d\u064a\u062d : '%s'</translation>\n     </message>\n+    <message>\n+        <source>Make the wallet broadcast transactions</source>\n+        <translation>\u0625\u0646\u062a\u0627\u062c \u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0628\u062b \u0627\u0644\u0645\u062d\u0641\u0638\u0629</translation>\n+    </message>\n     <message>\n         <source>Insufficient funds</source>\n         <translation>\u0627\u0645\u0648\u0627\u0644 \u063a\u064a\u0631 \u0643\u0627\u0641\u064a\u0629</translation>\n     </message>\n+    <message>\n+        <source>Loading block index...</source>\n+        <translation>\u062a\u062d\u0645\u064a\u0644 \u0645\u0624\u0634\u0631 \u0627\u0644\u0643\u062a\u0644\u0629</translation>\n+    </message>\n     <message>\n         <source>Loading wallet...</source>\n         <translation>\u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0645\u062d\u0641\u0638\u0647</translation>\n     </message>\n+    <message>\n+        <source>Cannot downgrade wallet</source>\n+        <translation>\u0644\u0627 \u064a\u0645\u0643\u0646 \u062a\u062e\u0641\u064a\u0636 \u0642\u064a\u0645\u0629 \u0627\u0644\u0645\u062d\u0641\u0638\u0629</translation>\n+    </message>\n     <message>\n         <source>Cannot write default address</source>\n         <translation>\u0644\u0627\u064a\u0645\u0643\u0646 \u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a</translation>"
      },
      {
        "sha": "54bf8136a60b48038c9cef3c984bc26e5af04061",
        "filename": "src/qt/locale/bitcoin_bg.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bg.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -214,7 +214,11 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>\u0421\u044a\u0441 \u0437\u0430\u0431\u0440\u0430\u043d\u0435\u043d \u0434\u043e\u0441\u0442\u044a\u043f \u0434\u043e</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -1229,10 +1233,6 @@\n         <source>General</source>\n         <translation>\u041e\u0441\u043d\u043e\u0432\u043d\u0438</translation>\n     </message>\n-    <message>\n-        <source>Using OpenSSL version</source>\n-        <translation>\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 OpenSSL \u0432\u0435\u0440\u0441\u0438\u044f</translation>\n-    </message>\n     <message>\n         <source>Using BerkeleyDB version</source>\n         <translation>\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u0438 BerkeleyDB </translation>"
      },
      {
        "sha": "8bc9281f1daaabcb45f93b23c3104ec4984eab95",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 72,
        "deletions": 8,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1115,6 +1115,22 @@\n         <source>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n         <translation>Mostra si el proxy SOCKS5 per defecte proporcionat s'utilitza per arribar als iguals mitjan\u00e7ant aquest tipus de xarxa.</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n+        <translation>Conectar a la red de Bitcoin a trav\u00e9s de un proxy SOCKS5 per als serveis ocults de Tor</translation>\n+    </message>\n     <message>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n         <translation>Utilitza un proxy SOCKS4 apart per a arribar als iguals a trav\u00e9s de serveis ocults de Tor:</translation>\n@@ -1457,10 +1473,6 @@\n         <source>General</source>\n         <translation>General</translation>\n     </message>\n-    <message>\n-        <source>Using OpenSSL version</source>\n-        <translation>Utilitzant OpenSSL versi\u00f3</translation>\n-    </message>\n     <message>\n         <source>Using BerkeleyDB version</source>\n         <translation>Utilitzant BerkeleyDB versi\u00f3</translation>\n@@ -1489,6 +1501,18 @@\n         <source>Current number of blocks</source>\n         <translation>Nombre de blocs actuals</translation>\n     </message>\n+    <message>\n+        <source>Memory Pool</source>\n+        <translation>Reserva de mem\u00f2ria</translation>\n+    </message>\n+    <message>\n+        <source>Current number of transactions</source>\n+        <translation>Nombre actual de transaccions</translation>\n+    </message>\n+    <message>\n+        <source>Memory usage</source>\n+        <translation>Us de memoria</translation>\n+    </message>\n     <message>\n         <source>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</source>\n         <translation>Obre el fitxer de registre de depuraci\u00f3 del Bitcoin Core del directori de dades actual. Pot portar uns quants segons per a fitxers de registre grans.</translation>\n@@ -2748,6 +2772,10 @@\n         <source>Copy transaction ID</source>\n         <translation>Copiar ID de transacci\u00f3</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Copia la transacci\u00f3 crua</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Editar etiqueta</translation>\n@@ -2895,22 +2923,62 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accepta la l\u00ednia d'ordres i ordres JSON-RPC </translation>\n     </message>\n+    <message>\n+        <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n+        <translation>Si no es proporciona &lt;category&gt; o si &lt;category&gt; = 1, treu a la sortida tota la informaci\u00f3 de depuraci\u00f3.</translation>\n+    </message>\n     <message>\n         <source>Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)</source>\n         <translation>Comissions totals m\u00e0ximes (en %s) per utilitzar en una \u00fanica transacci\u00f3 de moneder; definir-ne una massa baixa pot interrompre les transaccions m\u00e9s grans (per defecte: %s)</translation>\n     </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong Bitcoin Core will not work properly.</source>\n+        <translation>Comproveu que la data i hora de l'ordinador s\u00f3n correctes! Si el vostre rellotge no t\u00e9 l'hora correcta, el Bitcoin Core no funcionar\u00e0 adequadament.</translation>\n+    </message>\n+    <message>\n+        <source>Prune configured below the minimum of %d MiB.  Please use a higher number.</source>\n+        <translation>Poda configurada per sota el m\u00ednim de %d MiB. Utilitzeu un nombre superior.</translation>\n+    </message>\n+    <message>\n+        <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n+        <translation>Poda: la darrera sincronitzaci\u00f3 del moneder va m\u00e9s enll\u00e0 de les dades podades. Cal que activeu -reindex (baixeu tota la cadena de blocs de nou en cas de node podat)</translation>\n+    </message>\n+    <message>\n+        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n+        <translation>Redu\u00efu els requisits d'emmagatzematge podant (suprimint) els blocs antics. Aquest mode \u00e9s incompatible amb -txindex i -rescan. Av\u00eds: la reversi\u00f3 d'aquest par\u00e0metre implica haver de tornar a baixar la cadena de blocs sencera. (per defecte: 0 = inhabilita la poda de blocs, &gt;%u = mida objectiu en MiB per utilitzar en els fitxers de blocs)</translation>\n+    </message>\n+    <message>\n+        <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n+        <translation>Els rescanejos no s\u00f3n possible en el mode de poda. Caldr\u00e0 que utilitzeu -reindex, que tornar\u00e0 a baixar la cadena de blocs sencera.</translation>\n+    </message>\n+    <message>\n+        <source>Error: A fatal internal error occurred, see debug.log for details</source>\n+        <translation>Error: s'ha produ\u00eft un error intern fatal. Vegeu debug.log per a m\u00e9s detalls</translation>\n+    </message>\n     <message>\n         <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n         <translation>Comissi\u00f3 (en %s/kB) per afegir a les transaccions que envieu (per defecte: %s)</translation>\n     </message>\n+    <message>\n+        <source>Pruning blockstore...</source>\n+        <translation>S'est\u00e0 podant la cadena de blocs...</translation>\n+    </message>\n     <message>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Executa en segon pla com a programa dimoni i accepta ordres</translation>\n     </message>\n+    <message>\n+        <source>Unable to start HTTP server. See debug log for details.</source>\n+        <translation>No s'ha pogut iniciar el servidor HTTP. Vegeu debug.log per a m\u00e9s detalls.</translation>\n+    </message>\n     <message>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accepta connexions de fora (per defecte: 1 si no -proxy o -connect)</translation>\n     </message>\n+    <message>\n+        <source>-fallbackfee is set very high! This is the transaction fee you may pay when fee estimates are not available.</source>\n+        <translation>-fallbackfee \u00e9s molt elevat. Aquesta \u00e9s la comissi\u00f3 de transacci\u00f3 que podeu pagar quan les estimacions de comissions no estan disponibles.</translation>\n+    </message>\n     <message>\n         <source>Bind to given address and always listen on it. Use [host]:port notation for IPv6</source>\n         <translation>Vincula a una adre\u00e7a espec\u00edfica i sempre escolta-hi. Utilitza la notaci\u00f3 [host]:port per IPv6</translation>\n@@ -3079,10 +3147,6 @@\n         <source>Wallet options:</source>\n         <translation>Opcions de moneder:</translation>\n     </message>\n-    <message>\n-        <source>Warning: This version is obsolete; upgrade required!</source>\n-        <translation>Av\u00eds: aquesta versi\u00f3 \u00e9s obsoleta; cal actualitzar-la!</translation>\n-    </message>\n     <message>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>"
      },
      {
        "sha": "e5744fcbbf9b42a8cca75586073020fd51ee28bb",
        "filename": "src/qt/locale/bitcoin_ca@valencia.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca@valencia.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca@valencia.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca@valencia.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1413,10 +1413,6 @@\n         <source>General</source>\n         <translation>General</translation>\n     </message>\n-    <message>\n-        <source>Using OpenSSL version</source>\n-        <translation>Utilitzant OpenSSL versi\u00f3</translation>\n-    </message>\n     <message>\n         <source>Using BerkeleyDB version</source>\n         <translation>Utilitzant BerkeleyDB versi\u00f3</translation>\n@@ -2959,10 +2955,6 @@\n         <source>Wallet options:</source>\n         <translation>Opcions de moneder:</translation>\n     </message>\n-    <message>\n-        <source>Warning: This version is obsolete; upgrade required!</source>\n-        <translation>Av\u00eds: esta versi\u00f3 \u00e9s obsoleta; cal actualitzar-la!</translation>\n-    </message>\n     <message>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>"
      },
      {
        "sha": "2c238bb44f34a6f9e715d8de2935c3709e67decb",
        "filename": "src/qt/locale/bitcoin_ca_ES.ts",
        "status": "modified",
        "additions": 68,
        "deletions": 8,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ca_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca_ES.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
        "patch": "@@ -1115,6 +1115,22 @@\n         <source>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n         <translation>Mostra si el proxy SOCKS5 per defecte proporcionat s'utilitza per arribar als iguals mitjan\u00e7ant aquest tipus de xarxa.</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n+        <translation>Conectar a la red de Bitcoin a trav\u00e9s de un proxy SOCKS5 per als serveis ocults de Tor</translation>\n+    </message>\n     <message>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n         <translation>Utilitza un proxy SOCKS4 apart per a arribar als iguals a trav\u00e9s de serveis ocults de Tor:</translation>\n@@ -1457,10 +1473,6 @@\n         <source>General</source>\n         <translation>General</translation>\n     </message>\n-    <message>\n-        <source>Using OpenSSL version</source>\n-        <translation>Utilitzant OpenSSL versi\u00f3</translation>\n-    </message>\n     <message>\n         <source>Using BerkeleyDB version</source>\n         <translation>Utilitzant BerkeleyDB versi\u00f3</translation>\n@@ -1489,6 +1501,18 @@\n         <source>Current number of blocks</source>\n         <translation>Nombre de blocs actuals</translation>\n     </message>\n+    <message>\n+        <source>Memory Pool</source>\n+        <translation>Reserva de mem\u00f2ria</translation>\n+    </message>\n+    <message>\n+        <source>Current number of transactions</source>\n+        <translation>Nombre actual de transaccions</translation>\n+    </message>\n+    <message>\n+        <source>Memory usage</source>\n+        <translation>Us de memoria</translation>\n+    </message>\n     <message>\n         <source>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</source>\n         <translation>Obre el fitxer de registre de depuraci\u00f3 del Bitcoin Core del directori de dades actual. Pot portar uns quants segons per a fitxers de registre grans.</translation>\n@@ -2748,6 +2772,10 @@\n         <source>Copy transaction ID</source>\n         <translation>Copiar ID de transacci\u00f3</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Copia la transacci\u00f3 crua</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Editar etiqueta</translation>\n@@ -2895,18 +2923,54 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accepta la l\u00ednia d'ordres i ordres JSON-RPC </translation>\n     </message>\n+    <message>\n+        <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n+        <translation>Si no es proporciona &lt;category&gt; o si &lt;category&gt; = 1, treu a la sortida tota la informaci\u00f3 de depuraci\u00f3.</translation>\n+    </message>\n     <message>\n         <source>Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)</source>\n         <translation>Comissions totals m\u00e0ximes (en %s) per utilitzar en una \u00fanica transacci\u00f3 de moneder; definir-ne una massa baixa pot interrompre les transaccions m\u00e9s grans (per defecte: %s)</translation>\n     </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong Bitcoin Core will not work properly.</source>\n+        <translation>Comproveu que la data i hora de l'ordinador s\u00f3n correctes! Si el vostre rellotge no t\u00e9 l'hora correcta, el Bitcoin Core no funcionar\u00e0 adequadament.</translation>\n+    </message>\n+    <message>\n+        <source>Prune configured below the minimum of %d MiB.  Please use a higher number.</source>\n+        <translation>Poda configurada per sota el m\u00ednim de %d MiB. Utilitzeu un nombre superior.</translation>\n+    </message>\n+    <message>\n+        <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n+        <translation>Poda: la darrera sincronitzaci\u00f3 del moneder va m\u00e9s enll\u00e0 de les dades podades. Cal que activeu -reindex (baixeu tota la cadena de blocs de nou en cas de node podat)</translation>\n+    </message>\n+    <message>\n+        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n+        <translation>Redu\u00efu els requisits d'emmagatzematge podant (suprimint) els blocs antics. Aquest mode \u00e9s incompatible amb -txindex i -rescan. Av\u00eds: la reversi\u00f3 d'aquest par\u00e0metre implica haver de tornar a baixar la cadena de blocs sencera. (per defecte: 0 = inhabilita la poda de blocs, &gt;%u = mida objectiu en MiB per utilitzar en els fitxers de blocs)</translation>\n+    </message>\n+    <message>\n+        <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n+        <translation>Els rescanejos no s\u00f3n possible en el mode de poda. Caldr\u00e0 que utilitzeu -reindex, que tornar\u00e0 a baixar la cadena de blocs sencera.</translation>\n+    </message>\n+    <message>\n+        <source>Error: A fatal internal error occurred, see debug.log for details</source>\n+        <translation>Error: s'ha produ\u00eft un error intern fatal. Vegeu debug.log per a m\u00e9s detalls</translation>\n+    </message>\n     <message>\n         <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n         <translation>Comissi\u00f3 (en %s/kB) per afegir a les transaccions que envieu (per defecte: %s)</translation>\n     </message>\n+    <message>\n+        <source>Pruning blockstore...</source>\n+        <translation>S'est\u00e0 podant la cadena de blocs...</translation>\n+    </message>\n     <message>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Executa en segon pla com a programa dimoni i accepta ordres</translation>\n     </message>\n+    <message>\n+        <source>Unable to start HTTP server. See debug log for details.</source>\n+        <translation>No s'ha pogut iniciar el servidor HTTP. Vegeu debug.log per a m\u00e9s detalls.</translation>\n+    </message>\n     <message>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accepta connexions de fora (per defecte: 1 si no -proxy o -connect)</translation>\n@@ -3079,10 +3143,6 @@\n         <source>Wallet options:</source>\n         <translation>Opcions de moneder:</translation>\n     </message>\n-    <message>\n-        <source>Warning: This version is obsolete; upgrade required!</source>\n-        <translation>Av\u00eds: aquesta versi\u00f3 \u00e9s obsoleta; cal actualitzar-la!</translation>\n-    </message>\n     <message>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>"
      },
      {
        "sha": "d3ff5c1f57d64af23a922fb65dce957aa028a6f6",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "34d7b4b4a1644bf3173a3f18cae65223b84ae2cb",
        "filename": "src/qt/locale/bitcoin_cs_CZ.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_cs_CZ.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_cs_CZ.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs_CZ.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "7d11825a618a7fab6f7e46553aad052254d4bf44",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 57,
        "deletions": 17,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "947a471acd1dc5ae4363152f43dcf5964aae87cb",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 97,
        "deletions": 9,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b5fb22f9739bf3226fe8cdfd8e594c3229abd269",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "f122273a3521603582d4b7fe8fbf0f824c8d0ded",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 555,
        "deletions": 2008,
        "changes": 2563,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b9c0c82814a54305687297bcb003392eb1875c4a",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 53,
        "deletions": 13,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "2095db34bf32e03a1a359446bd0361a31e79cd4f",
        "filename": "src/qt/locale/bitcoin_eo.ts",
        "status": "modified",
        "additions": 38,
        "deletions": 4,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_eo.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_eo.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eo.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "5322634c5db982a99b42d30a565104695677545b",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 233,
        "deletions": 9,
        "changes": 242,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b76915662c114420dfc44ed58812a317720e832c",
        "filename": "src/qt/locale/bitcoin_es_419.ts",
        "status": "added",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_419.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_419.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_419.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "fb9ac895be8304aaa76d3e4d57d73ef6fda79d04",
        "filename": "src/qt/locale/bitcoin_es_AR.ts",
        "status": "added",
        "additions": 373,
        "deletions": 0,
        "changes": 373,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_AR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_AR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_AR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "742dee29d037406b3a64723284ee5959a37c5920",
        "filename": "src/qt/locale/bitcoin_es_CL.ts",
        "status": "modified",
        "additions": 119,
        "deletions": 1,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_CL.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_CL.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_CL.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "ea0664636d2d64916cb9092d4437a1d65bd65836",
        "filename": "src/qt/locale/bitcoin_es_CO.ts",
        "status": "added",
        "additions": 542,
        "deletions": 0,
        "changes": 542,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_CO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_CO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_CO.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b4841ca9b8682779bf6106061b30f4417c0942b3",
        "filename": "src/qt/locale/bitcoin_es_DO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_DO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_DO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_DO.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b0dfa4ab7c54cbb56a568d918baab89aaed2af43",
        "filename": "src/qt/locale/bitcoin_es_MX.ts",
        "status": "modified",
        "additions": 98,
        "deletions": 2,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_MX.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_es_MX.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_MX.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "089f01035d89de9a21e1362b571d8f837d817e3e",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "02c216765ce83fc17dbc6adc5e2dc819c8e25d19",
        "filename": "src/qt/locale/bitcoin_fa.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fa.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fa.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "0fb6aebb9fe9ae3ac44ef46c550af0826a75ef6c",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 84,
        "deletions": 8,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "fba823837112b810baecb1109a1c8af8b110b4e0",
        "filename": "src/qt/locale/bitcoin_fil.ts",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fil.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fil.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fil.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "65808c77406b77c017ae006e5fbb7a9106996fa7",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 46,
        "deletions": 14,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "9a2ac551c63ebbfc7b78635722065e561044e18a",
        "filename": "src/qt/locale/bitcoin_fr_FR.ts",
        "status": "modified",
        "additions": 1629,
        "deletions": 33,
        "changes": 1662,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fr_FR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_fr_FR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr_FR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "50b081d20562aadbb5a30e810ff2cc36e09d630a",
        "filename": "src/qt/locale/bitcoin_gl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_gl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_gl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_gl.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "d937e211b0f1a41b40a9699095dce0a692b9df68",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "f9d744aa3ec37ab72a1331d152dbf2a20abf5a40",
        "filename": "src/qt/locale/bitcoin_hr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_hr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_hr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hr.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "839ee883bd356f36f8b39016fbfe7b958481c3d3",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "e1ec7ae7fa24a3d94d277ac2e3e3fb3cca09585f",
        "filename": "src/qt/locale/bitcoin_id_ID.ts",
        "status": "modified",
        "additions": 233,
        "deletions": 69,
        "changes": 302,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_id_ID.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_id_ID.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id_ID.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "2f14c420146c6e1654a97e54f89cc7353a272227",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "46ad0e9339df0472c4feae389c64b47e5b3e2c74",
        "filename": "src/qt/locale/bitcoin_it_IT.ts",
        "status": "added",
        "additions": 325,
        "deletions": 0,
        "changes": 325,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_it_IT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_it_IT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it_IT.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "06fd27fa161a56087c77acf12177a95a19e14d82",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 52,
        "deletions": 12,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "1a072d1df116bafbd466a84989938a6e7a554feb",
        "filename": "src/qt/locale/bitcoin_ka.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ka.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ka.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ka.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "34aeafcd5ca94e50ed48f05deb8806c5c52fa439",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 1214,
        "deletions": 122,
        "changes": 1336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b11027d1ee275196193dd6a0a36bb26b51ad3f8d",
        "filename": "src/qt/locale/bitcoin_la.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_la.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_la.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_la.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "873a6939b7a5ca8a30a1161a2700d1532b56ca01",
        "filename": "src/qt/locale/bitcoin_lt.ts",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_lt.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_lt.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lt.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "5a59184b0cef8e12f2e93cd4e4514f6bf164b17c",
        "filename": "src/qt/locale/bitcoin_lv_LV.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_lv_LV.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_lv_LV.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lv_LV.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "94e02f8900ed109eb4a51d2f4f174fd998329437",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "fe29959abf5ba487f9cd8703078e9685eef4312b",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 54,
        "deletions": 14,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "c5a0b17e801fededbe323f31cf4ddb5026284df6",
        "filename": "src/qt/locale/bitcoin_pam.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pam.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pam.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pam.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "ffbacfd4929f44f29743de4cda72213cfbfeb433",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 169,
        "deletions": 52,
        "changes": 221,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "1b92395c7980948ade58774f70a9e2771a25762d",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 155,
        "deletions": 19,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "362769138a842182ed2467ff72381948d8a91b27",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 763,
        "deletions": 131,
        "changes": 894,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "11ac69f0f2dd1c8a2769320a6729885aab085c26",
        "filename": "src/qt/locale/bitcoin_ro.ts",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ro.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ro.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "502052dffb2963e99fa228a1e7f132522773a908",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 125,
        "deletions": 13,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b4546a21578f41cedc5900a72d623c3a62d4c689",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "41e467e496e82b460c4a352ee184147ccb70d514",
        "filename": "src/qt/locale/bitcoin_ru_RU.ts",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ru_RU.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ru_RU.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru_RU.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "9addbdaa8a10eb58810ad2bc0e3216b9f7a73278",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 276,
        "deletions": 11,
        "changes": 287,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "1b540a7310f08dee4d830176aeb94ac1daba12de",
        "filename": "src/qt/locale/bitcoin_sl_SI.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 14,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sl_SI.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sl_SI.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sl_SI.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "d87bd9db5811adf5420afcf758bf2775fb64afa6",
        "filename": "src/qt/locale/bitcoin_sq.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sq.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sq.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sq.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "c836c8ddbaedb326872fce80850512c39f65bb72",
        "filename": "src/qt/locale/bitcoin_sr@latin.ts",
        "status": "added",
        "additions": 653,
        "deletions": 0,
        "changes": 653,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sr@latin.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sr@latin.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sr@latin.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "acf37bd1d4eee24449d6eee313e16a567df37c2e",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 52,
        "deletions": 12,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "c93524cdacc2fd71242c278fd9a5a311fe7b655b",
        "filename": "src/qt/locale/bitcoin_ta.ts",
        "status": "added",
        "additions": 1029,
        "deletions": 0,
        "changes": 1029,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ta.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_ta.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ta.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "ba3b1e8741baa23c726141b751867c9004348b36",
        "filename": "src/qt/locale/bitcoin_th_TH.ts",
        "status": "modified",
        "additions": 181,
        "deletions": 1,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_th_TH.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_th_TH.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_th_TH.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "240677677362490dd1821722f6dc93c41ca1966d",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 56,
        "deletions": 16,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "979aeea03811f6732d41f7df9d5bd2e2bc0ccec6",
        "filename": "src/qt/locale/bitcoin_tr_TR.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_tr_TR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_tr_TR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr_TR.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "64df7b5ba5780d3728fdf99376bae1766c75e838",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "a9f9af6683e50368aabad08a4843b83fd92bf108",
        "filename": "src/qt/locale/bitcoin_uz@Cyrl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uz@Cyrl.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "2e4dabb59fb78df3b2b6142c49bcdd6b10ceff1f",
        "filename": "src/qt/locale/bitcoin_uz@Latn.ts",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uz@Latn.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_uz@Latn.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uz@Latn.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "cc1b03356480e1747b5f01ac5a26704748b18cb5",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 72,
        "deletions": 8,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "740a86e11702469d5f13c3e5d8d5e61942d4a1a9",
        "filename": "src/qt/locale/bitcoin_zh_HK.ts",
        "status": "added",
        "additions": 521,
        "deletions": 0,
        "changes": 521,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_HK.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_HK.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_HK.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "107e7034e5bc960b831a0091109fca64e8f3e1a6",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 109,
        "deletions": 69,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "f2db3988991a062e473358286a6f2a891f7bd43e",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "41b56d138625703ab7587bb303ce17fdf0341f29",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "cc2cbc0e66419f09434791061fc9255f68a70c02",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "3b491ceac2cde419c0cfcf03a8514b50de902e8f",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "6a0404cbf702f0c3bb0a050f8493e0b62edec77a",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "b13ea3df709bb926c3a5e1127d6a2d99a5ee1a8b",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "676745a858f6cdd59db033736aeac8cf77b31a85",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "11f3e49a06d9be74f87ccebebe41525b53d256fa",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 12,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "28affa954dca2a484760b317ba1e9fc2d77b464e",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "6d50be56ecba7962a5971c4f9129c4442bf398cb",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 5,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "be4f2ee44ba03c3324f80e5b13dcba2708f6d832",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "e36d86fdddaa040d63f8f74039baccdfd9c00454",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "65adcc4f023e33642136278e0fbb3b23082179c8",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "199a7b2d77b1baefe7b263366e0a56315990a4db",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "3867310cd68572471ac1a90309d8f919f45259df",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "a11da50588262149ac10b4a1104ef47538d7102a",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "d9a8cc145ea918c5162bba68922c42bcaf86b936",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 3,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "31b80bd565bdc2ce0b11d3ee648b49a56b6fa5b9",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "43ba4edd78c19a18ed467a22356be8810e04eee1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 225,
        "deletions": 45,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "d0675fdb49506c41271998d73dc4698809feeb6c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "4c4e5997818ef11dd7b47020264e4ff2b7f97d63",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 12,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      },
      {
        "sha": "f2a29416e675dd0f715d19c257903fbc43a57247",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
      }
    ]
  }
]