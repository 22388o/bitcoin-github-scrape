DrahtBot,2020-01-24 10:03:05,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-578065964,578065964,
kallewoof,2020-01-26 11:38:18,"Synced two datadirs (master and this branch) to block 484516, which resulted in 995 rev files, master using 38277312 bytes, and this branch 35573680 bytes. The average wasted space per rev file comes out at 2717 bytes (~3kb), which is quite a bit lower than my assumptions (if it was completely random, it should be ~500kb per rev file).\n\nCopying blocks/rev* into a separate dir reveals a few kb ",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-578493533,578493533,
fjahr,2020-02-17 16:54:48,"utACK 48081229c10969ac5993c826c8bd7687cd0503e5\n\nAgree, looks cleaner than #17892!",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-587082534,587082534,
vasild,2020-03-14 09:07:46,"I reproduced the bug in a controlled, deterministic environment with a [unit test + tweaks](https://gist.github.com/vasild/8c06b3dbc493522f683a671d71b4c122). The current patch in this PR (4808122) indeed fixes it, but it introduces another problem - it would wrongly skip finalizing of the undo files in case the blocks are downloaded in-height-order.\n\nThere are two cases when we should finalize",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-599031098,599031098,
kallewoof,2020-03-19 14:01:18,"@vasild Tremendous work. Thank you very much. I will look closer at your patch, and also evaluate my solution over the next few days to see if it does what I want. (And compare it to yours.)\n\nMy solution was to patch this in two places; one for the case ""rev file lags behind"", and one for ""rev file is up to date"". This was very little code (note that the last commit is a NOMERGE to demonstrate",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-601195517,601195517,
vasild,2020-03-23 19:43:05,"ACK ed34e00da. Code review and manual testing.\n\nI tested this by applying the patch folded below which introduces a unit test and lowers the max size of blk files so that they can accommodate just 4 test blocks. It also adds some printouts which I manually analyzed after running the unit test as described at the bottom of https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-599031098. I ",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-602816183,602816183,
kallewoof,2020-03-24 02:56:26,"@vasild Thanks a lot for testing and for helping get this into shape!\n\nI've squashed the commits into one, and also updated the commit description. I am going to post updated results from the node running this in a bit.",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-602982538,602982538,
vasild,2020-03-24 08:11:20,ACK ac94141af (no changes in the code since ed34e00da).,https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-603091411,603091411,
kallewoof,2020-03-30 08:24:57,"Updated https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-601195517 with more logs. They're not very exciting, but they indicate things are working as they should.",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-605855801,605855801,
fjahr,2020-04-20 18:56:52,"Code review re-ACK ac94141af0c16161afa68de1c3720f254ae4e12c\n\nOnly changes since my last review is the introduction of the `finalize_undo` parameter and another comments change.",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-616745685,616745685,
kallewoof,2020-04-28 09:07:56,Will address @jonatack points if I need to rebase or modify in other ways.,https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-620480196,620480196,
whitslack,2020-05-20 14:37:05,"> benchmark how much the pre-allocation actually helps nowadays (to maybe remove it entirely).\n\nYou could be letting the operating system handle your speculative preallocation. On Linux you can even set the allocation extent size manually if you really want to maintain your 16MB-at-a-time behavior. See the [`XFS_IOC_FSSETXATTR`](http://man7.org/linux/man-pages/man2/ioctl_xfs_fsgetxattr.2.html)",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-631514635,631514635,
laanwj,2020-06-04 14:32:00,"> See the XFS_IOC_FSSETXATTR ioctl and the fsx_extsize structure member. (Note, this API was introduced by XFS but is now implemented by several popular Linux file systems.)\n\nTIL! Looks like the generic name is `FS_IOC_FSSETXATTR`, searching for that gives hits in btrfs, ext4, f2fs (besides xfs itself ofc.).\n\nWill leave this to a follow-up PR though.",https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-638887016,638887016,
Sjors,2020-01-24 09:05:55,"The last height, or the maximum height?",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370530478,370530478,src/validation.cpp
kallewoof,2020-01-24 09:18:34,"They are the same:\n\nhttps://github.com/bitcoin/bitcoin/blob/28fbe68fdcac2a06f359b1e48555a3d23015c2b7/src/chain.h#L85-L86",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370535220,370535220,src/validation.cpp
vasild,2020-03-11 20:19:13,"We want to flush the rev file along with the block file, but we are not going to do that if `fFinalize` is `true`. What about calling `FlushUndoFile(nLastBlockFile)` unconditionally here?",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391244966,391244966,src/validation.cpp
vasild,2020-03-11 20:29:18,"Maybe I am missing something, but it looks to me that if blocks are being downloaded in-order, then the `_pos.nFile < nLastBlockFile` condition will never be true because those will always be equal?",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391249970,391249970,src/validation.cpp
kallewoof,2020-03-12 06:04:01,"There's basically no reason to do a non-final flush of the undo file, except on shutdown (which happens now). This is the same for the block file (since the case you are arguing is for a finalized flush).",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416459,391416459,src/validation.cpp
kallewoof,2020-03-12 06:04:41,I am pretty sure I tested this but I can't convince myself that you're wrong by looking at the code so I will test this again.,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416617,391416617,src/validation.cpp
vasild,2020-03-12 08:01:23,"Ok, then this turns into a nit, feel free to ignore: maybe update the comment to be in line with the code: ""we do want to flush it along with the block file _in non-finalizing flushes_"".",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391452419,391452419,src/validation.cpp
vasild,2020-03-12 08:07:03,"The way I see it is that `_pos.nFile < nLastBlockFile && ` can (should) be dropped and the second condition suffices - if we are writing the last (highest) block in the rev file, then also finalize it because we are not going to touch it again.",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391454552,391454552,src/validation.cpp
kallewoof,2020-03-14 05:23:56,"Sorry for tardiness, work kept me busy, but I managed to verify that this is *not* working as it should. I will fix soon.",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392558570,392558570,src/validation.cpp
vasild,2020-03-14 09:11:51,"No worries. I started at this problem long enough and finally it cracked.\n\nIndeed `_pos.nFile < nLastBlockFile` is never true if blocks come in-height-order and this needs to be adjusted. However, just removing that condition, as I suggest above, is not ok because then the second condition will be true for every in-height-order write and this will cause excessive flushing and finalizing. See t",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392570411,392570411,src/validation.cpp
kallewoof,2020-03-19 10:09:51,I've got something but testing takes time (I don't wanna have to wait days each time so I'm juggling 300 GB full node dirs around).,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r394916198,394916198,src/validation.cpp
kallewoof,2020-03-19 14:21:17,I didn't see this comment until now. I'll update the code in the next push.,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395061642,395061642,src/validation.cpp
vasild,2020-03-19 20:29:34,"This will flush the undo file before the corresponding block file which is flushed a [few lines below](https://github.com/bitcoin/bitcoin/pull/17994/files#diff-24efdb00bfbe56b140fb006b562cc70bR3279). Also visible in the log you pasted where `finalize undo 2005` appears before `Leaving block file 2005`.\n\nI am not sure but I think we want to always flush the block file first and the undo file af",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395301371,395301371,src/validation.cpp
vasild,2020-03-19 20:34:29,"I find this `while` extremely confusing - it looks to me that it will never iterate more than once. We need a block size of more than 128MB (blk file size limit) to get this execute 2 or more times, so that one block spans multiple blk files (!?).\n\nMaybe out of the scope of this PR, but I think we should `s/while/if/`. Is my understanding correct? If not then we will end up finalizing an empty",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395303817,395303817,src/validation.cpp
kallewoof,2020-03-20 05:40:53,"I *think* the way it works now is fine; the ""unflushed undo files"" output is consistently showing the current opened one only, so it indicates the same.\n\nLet me go through the steps:\n\n* Sync state: HEIGHT = 100, BLK = 100, UNDO = 100, block file 0\n* Block 101 comes in (we assume it does not fit into the current block file, so we will move to block file 1)\n* First we want to store it to",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395446941,395446941,src/validation.cpp
kallewoof,2020-03-20 05:47:50,"I dug into this. Apparently, the system is supposed to support multiple files *per block*. This was a change made 8 years ago in 5382bcf8cd23c36a435c29080770a79b5e28af42 by @sipa. It doesn't look like it is actually working, though, but I could be wrong.",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395448123,395448123,src/validation.cpp
sipa,2020-03-20 05:56:48,"@kallewoof No, that commit adds support for multiple *blocks per file*, which is definitely used. There has never been support for multiple files per block.",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395449720,395449720,src/validation.cpp
kallewoof,2020-03-20 06:20:03,"Oh, yeah you're right. But this while loop makes no sense to me still.",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395454053,395454053,src/validation.cpp
sipa,2020-03-20 06:36:10,I think it's just iterating to find the first block file with space for the new block.,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395457390,395457390,src/validation.cpp
kallewoof,2020-03-20 06:53:25,"Okay, so assuming we one day decided to stop writing block files sequentially, we may have a situation where we try to `find block pos` for `nFile = 2007` where the last block file in existence is actually `nFile = 2010` or something `>2008`, in which case this while loop becomes necessary.\n\nI don't really see that ever happening though, and it feels like someone mixed up ""block file writing o",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395461388,395461388,src/validation.cpp
vasild,2020-03-20 13:28:31,"Yes, the above is correct (or at least coincides with my understanding for this elusive code!) - I think the code will do what you describe and that it is the correct behavior wrt finalizing the undo.\n\nHowever, one piece is missing from the above - when do we flush block file 0?\n> We go find a position and end up in the next block file (1), at which point we flush the undo file (0)\n\n... ",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395635091,395635091,src/validation.cpp
vasild,2020-03-20 13:57:42,"Ok, for the purposes of this PR we just need to agree that this `while` loop will never iterate more than once (if it is possible that it iterates 2 or more times then I am wrong and this PR will have to be adjusted).\n\nObservation: before the loop condition is evaluated for the first time `nFile` equals `nLastBlockFile`. I.e. we start the search at the end.\n\nSo two things can happen:\n1. ",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395653474,395653474,src/validation.cpp
sipa,2020-03-20 18:46:45,I think in the original version of this code the loop was there so that after a restart a good file number would be found (even if it always reset to 0). I don't know if that's still needed.,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395828475,395828475,src/validation.cpp
kallewoof,2020-03-21 04:17:19,"Oh wait, I see what you mean -- you're concerned about the non-finalized undo flush happening after the finalized undo flush (called from within the finalized block flush), right?\n\nI don't think this it's a problem to flush twice. The only difference between a finalized=true flush and a finalized=false flush is L87 in\n\nhttps://github.com/bitcoin/bitcoin/blob/a3abe25f720104e4abf0d3f01f0b847",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395959750,395959750,src/validation.cpp
vasild,2020-03-23 13:32:00,"No, sorry, I mentioned my concern (order of flushing of blk and undo files), but did not mention why is that a concern. Previously the code always flushed blkN before flushing revN (finalizing is not relevant for this):\n\nhttps://github.com/bitcoin/bitcoin/blob/97b0687501cee77a9170f9e288755a5d268e9bd4/src/validation.cpp#L1747-L1748\n\nIn case of a crash (or power failure) between the two, we ",https://github.com/bitcoin/bitcoin/pull/17994#discussion_r396451804,396451804,src/validation.cpp
jonatack,2020-04-22 16:43:33,`finalize_undo` is clear but it might be good to comment on the `fFinalize` meaning and logic,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413142088,413142088,src/validation.cpp
jonatack,2020-04-22 16:47:00,It did take a couple of readings to parse this paragraph as two sentences rather than one. I think that adding the missing punctuation would be more clear.,https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413145289,413145289,src/validation.cpp
