DrahtBot,2019-05-31 05:21:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18731 (refactor: Make CCheckQueue RAII-styled by hebasto)\n* #18710 (Add local thread pool to CCheckQueue by hebasto)\n* ",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-497579493,497579493,
practicalswift,2019-05-31 06:59:16,Strong concept ACK: thanks for fixing this!,https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-497599196,497599196,
promag,2019-05-31 07:07:38,"> In a few cases we need to use `std::mutex` rather than the sync.h primitives.\n\nCan you explain why?",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-497601104,497601104,
sipa,2019-05-31 10:31:21,"@promag Our ""default"" mutexes are recursive mutexes (which you can enter multiple times from the same thread). They're easier to work with as you don't need to worry about whether to call a lock-grabbing function from either inside or outside the lock. However, recursive mutexes can't be used for condition variable waiting, so for those, we use std::mutex (which is not recursive) directly.\n\nLong",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-497661895,497661895,
MarcoFalke,2019-05-31 14:42:34,"How is this different from using `Mutex` and `Lock`?\n\nE.g.\n\n```cpp\nMutex m;\nLOCK(m);",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-497733944,497733944,
promag,2019-06-02 19:36:37,"@sipa thanks, I was aware of that. I wasn't sure _why_ ""In a few cases we need to use `std::mutex`"".",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-498059158,498059158,
ajtowns,2019-06-03 01:22:35,"> How is this different from using `Mutex` and `Lock`?\n\nIf you do `Mutex cs;` instead of `std::mutex cs;` then you can do `LOCK(cs);` or `WAIT_LOCK(cs, g);` instead of `MutexGuard g(cs);`. In that case the type of `g` changes from a trivial subclass of `std::lock_guard` to `UniqueLock` which is a subclass of `std::unique_lock` that supports `DEBUG_LOCKCONTENTION` in which case it uses `LogPrin",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-498083950,498083950,
ryanofsky,2019-06-05 12:48:12,"> We can't use Mutex for locking for the logging API, because that is a circular dependency.\n\nI don't think this is true (that we can't allow a circular dependency), but maybe you can explain more. I think ideally, we would just use `Mutex` and `RecursiveMutex` everywhere, since they fully support LOCK macros, lock assertions, lock annotations, deadlock detection, and so on. What exactly is th",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-499068336,499068336,
ajtowns,2019-06-05 13:54:05,"> > We can't use Mutex for locking for the logging API, because that is a circular dependency.\n> \n> I don't think this is true (that we can't allow a circular dependency), but maybe you can explain more. \n\nMaybe; `LOCK(m);` becomes a call to `UniqueLock` contstructor, which calls `Enter()` (or `TryEnter()`), which calls `EnterCritical()`, which calls `push_lock()` which may call `potential",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-499092691,499092691,
ajtowns,2020-02-11 07:31:43,"Rebased; updated to only use `MutexGuard` for logging.h.\n\nRemaining uses of `std::mutex` and `lock_guard` are sync.h (duh), logging.h (which is used by sync.h), support/lockedpool.h (could be changed to Mutex, but I'm not confident the overhead wouldn't cause problems), tests/checkqueue_tests.cpp (complicated, and just a test) and leveldb.",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-584508080,584508080,
ajtowns,2020-03-13 08:24:22,Rebased to master to avoid #18111 and updated with @sipa's suggestions.,https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-598605665,598605665,
ajtowns,2020-03-26 03:21:55,Rebased for the ToString changes,https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-604205991,604205991,
ajtowns,2020-05-06 11:58:18,Rebased,https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-624606896,624606896,
hebasto,2020-05-09 04:52:46,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-626105963,626105963,
ajtowns,2020-05-26 15:48:07,"Renamed MutexGuard to LockGuard, and dropped util_threadnames_tests changes.",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-634110415,634110415,
MarcoFalke,2020-05-27 23:29:59,"ACK 5478d6c099e76fe070703cc5383cba7b91468b0f ðŸ—¾\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 5478d6c099e76fe070703cc5383cba7b91468b0f ðŸ—¾\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiM+Qv/bctxRqxjmwEq2xf4FSS7ej1ao6ni8G8tnk9+sB1QniYItq56EO",https://github.com/bitcoin/bitcoin/pull/16127#issuecomment-634997490,634997490,
sipa,2020-03-13 02:23:02,"Nit: if you're reflowing this code anyway, can you put { } around the then branch?",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r391997044,391997044,src/test/checkqueue_tests.cpp
sipa,2020-03-13 02:27:50,"Maybe move MutexGuard to sync.h, as it's more generally useful?",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r391998012,391998012,src/logging.h
ajtowns,2020-03-13 08:22:12,"There are a bunch of places that include logging.h but not sync.h, so doing it via threadsafety.h might keep things a little more minimal? I've done this.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r392085444,392085444,src/logging.h
ajtowns,2020-03-13 08:22:18,Done,https://github.com/bitcoin/bitcoin/pull/16127#discussion_r392085481,392085481,src/test/checkqueue_tests.cpp
hebasto,2020-05-09 05:00:33,"c3cf2f55013c4ea1c1ef4a878fc7ff8e92f2c42d\nIt seems this changes behavior as `m_could_reserve = true;` is also guarded by mutex currently.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r422453441,422453441,src/rpc/blockchain.cpp
hebasto,2020-05-09 05:03:14,"960d64d326c501dbe22b80094171d7fe3e86bd69\nIt seems this changes behavior as the whole block is guarded by mutex currently.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r422453632,422453632,src/wallet/wallet.h
ajtowns,2020-05-09 05:31:33,"`m_could_reserve` isn't a global, and instances of `CoinsViewScanReserver` aren't shared across threads either.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r422455250,422455250,src/rpc/blockchain.cpp
ajtowns,2020-05-09 05:33:44,Same reasoning as previous; except that this one sets `fScanningWallet` to `true` twice :(,https://github.com/bitcoin/bitcoin/pull/16127#discussion_r422455355,422455355,src/wallet/wallet.h
hebasto,2020-05-09 05:47:28,"Oh, I see that all instances of `CoinsViewScanReserver` are local in the `scantxoutset()` function.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r422456173,422456173,src/rpc/blockchain.cpp
hebasto,2020-05-16 08:44:20,So why not dropping the following `m_wallet.fScanningWallet = true;` ?,https://github.com/bitcoin/bitcoin/pull/16127#discussion_r426133811,426133811,src/wallet/wallet.h
hebasto,2020-05-16 09:29:07,"~As `WalletRescanReserver.m_wallet` is a reference, the object being referenced to could be shared among different threads. So not using the `mutexScanning` mutex here is not thread-safe, IMO.~",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r426136962,426136962,src/wallet/wallet.h
hebasto,2020-05-16 10:46:37,"bbe87c91a8594e33542bae3d738499324cd06906\n\nIt seems nothing to capture now:\n```suggestion\n    auto RenameThisThread = [](int i) {\n        util::ThreadRename(TEST_THREAD_NAME_BASE + ToString(i));\n        std::lock_guard<std::mutex> guard(lock);\n        LOCK(lock);\n        names.insert(util::ThreadGetInternalName());\n    };\n```",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r426142357,426142357,src/test/util_threadnames_tests.cpp
ajtowns,2020-05-19 07:12:28,dropped redundant `fScanningWallet = true`,https://github.com/bitcoin/bitcoin/pull/16127#discussion_r427077866,427077866,src/wallet/wallet.h
ajtowns,2020-05-19 07:13:40,Dropped redundant capture,https://github.com/bitcoin/bitcoin/pull/16127#discussion_r427078489,427078489,src/test/util_threadnames_tests.cpp
ryanofsky,2020-05-19 15:08:22,"In commit ""test/util_threadnames_tests: add thread safety annotations"" (d53072ec730d8eec5a5b72f7e65a54b141e62b19)\n\nAssuming the reason these need to be global is lock annotations not working on local variables (didn't check), better IMO to simply not to use lock annotations here than to introduce global variables and make it unsafe to call RenameEnMasse from different threads itself. \n\nOth",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r427378681,427378681,src/test/util_threadnames_tests.cpp
ajtowns,2020-05-26 15:47:51,"It's not unsafe to call RenameEnMasse from different threads with the global lock, just inefficient. I tried the class approach but it seemed like overkill, so I've dropped the commit instead.",https://github.com/bitcoin/bitcoin/pull/16127#discussion_r430517879,430517879,src/test/util_threadnames_tests.cpp
