hebasto,2020-05-11 14:46:14,"The needless of `setParent()` was pointed already:\n- @ryanofsky's [comment](https://github.com/bitcoin/bitcoin/pull/16349#discussion_r301644943):\n> Curious: Is this `setParent` call actually necessary for anything? Maybe consider dropping it or adding a comment that says why it's useful.\n\n- @promag's [comment](https://github.com/bitcoin/bitcoin/pull/16349#discussion_r301679192):\n> `setPa",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626749432,626749432,
promag,2020-05-11 14:51:12,"Concept ACK, but now it must destroy wallet models on quit, or am I wrong?",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626753321,626753321,
hebasto,2020-05-11 14:54:40,"> Concept ACK, but now it must destroy wallet models on quit, or am I wrong?\n\nCorrect. Aren't they destroyed now?",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626755416,626755416,
promag,2020-05-11 15:04:55,"> > Concept ACK, but now it must destroy wallet models on quit, or am I wrong?\n> \n> Correct. Aren't they destroyed now?\n\nWhere?",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626761622,626761622,
hebasto,2020-05-11 15:57:29,"> > > Concept ACK, but now it must destroy wallet models on quit, or am I wrong?\n> > \n> > \n> > Correct. Aren't they destroyed now?\n> \n> Where?\n\nIt seems the procedure starts in this destructor:\nhttps://github.com/bitcoin/bitcoin/blob/f71a3a8829746cb17fc42c7475cf03229ad6c08e/src/interfaces/wallet.cpp#L507\n\nand through the `WalletModel::unload()` signal\nhttps://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626792259,626792259,
promag,2020-05-11 17:23:57,"Yes, but it should also delete when wallet controller is deleted.",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626839709,626839709,
hebasto,2020-05-11 17:39:42,"> Yes, but it should also delete when wallet controller is deleted.\n\nFrom the `WalletController` interface does not follow that its instance takes the ownership of `WalletModel` objects. What are cases when `WalletModel` objects could live until `WalletController` destructor is called?",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626848508,626848508,
promag,2020-05-11 18:35:36,"> What are cases when WalletModel objects could live until WalletController destructor is called?\n\nNone. But before this change wallet models were owned and managed by wallet controller. I just think that it shouldn't depend on whether or not wallets are unloaded before destroying the window on exit. Suppose that with multiprocess you want to just restart the GUI process, in that case you want",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-626880133,626880133,
tarboss,2020-05-12 09:27:18,"seems to work(quick check), but i still like the solution from branch 18.\n(auto delete of walletmodel from walletcontroller if u forget to delete & if u want send msgs from walletcontroller to three open walletmodels for example (future). Just on my mind atm.\nChecking l8ter a bit more.",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-627224250,627224250,
DrahtBot,2020-05-12 22:09:37,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-627625384,627625384,
hebasto,2020-05-13 06:14:56,"@promag \n> Yes, but it should also delete when wallet controller is deleted.\n\nI agree this is important for robustness and safety. Now I can see the following ways to move on:\n1) drop this PR in favor of #18961 \n2) use wrapped `setParent()`\n```diff\n--- a/src/qt/walletcontroller.cpp\n+++ b/src/qt/walletcontroller.cpp\n@@ -110,7 +110,7 @@ WalletModel* WalletController::getOrCreateWal",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-627769457,627769457,
tarboss,2020-05-13 15:21:07,"let promag decide what he prefers.\n\nsidenote:\nif u breakpoint after:\nQTimer::singleShot(0, this, [wallet_model, this] () { wallet_model->setParent(this); });\nwallet_model parent is ""null""!!!\n \nwalletmodel's parent is set later - i hope - Queued Connection",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-628062520,628062520,
tryphe,2020-05-17 06:08:33,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-629748891,629748891,
hebasto,2020-05-20 06:34:37,"Updated d6afd1ca6477a1d2f80e0ead6015af67c5b62a9b -> 679b548504d2a541eecb41986629967c51650f61 ([pr18948.01](https://github.com/hebasto/bitcoin/commits/pr18948.01) -> [pr18948.02](https://github.com/hebasto/bitcoin/commits/pr18948.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18948.01..pr18948.02)):\n\n- addressed @promag's [comment](https://github.com/bitcoin/bitcoin/pull/18948#issueco",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-631267466,631267466,
hebasto,2020-07-04 18:15:28,"@promag \n> With lambda slots we could make this more elegant, something like:\n> \n> ```c++\n> WalletModel* wallet_model;\n> QMetaObject::invokeMethod(this, [this, &wallet_model] {\n>     wallet_model = new WalletModel(this);\n>     // ...\n> }, GUIUtil::blockingGUIThreadConnection());\n> ```\n\nUnfortunately, [`QMetaObject::invokeMethod(QObject*, Functor, Qt::ConnectionType, FunctorRe",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-653796202,653796202,
promag,2020-07-05 22:31:42,"Ah yes, too soon then ðŸ˜… ",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-653947121,653947121,
ryanofsky,2020-07-22 10:46:44,"> Unfortunately, [`QMetaObject::invokeMethod(QObject*, Functor, Qt::ConnectionType, FunctorReturnType*)`](https://doc.qt.io/qt-5/qmetaobject.html#invokeMethod-4) was introduced in Qt 5.10 only.\n\nNot sure about the context, but it's trivial to replace this method. You can write a 2-line function that just connects the lambda to a temporary object slot and triggers the object. e.g. [`ObjectInvok",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-662383746,662383746,
hebasto,2020-07-24 12:00:49,"Reworked.\n\nThe previous implementation was broken due to the fact the `QTimer` requires an event loop, that is not the case when a wallet is loaded in the RPC thread.\n\n@ryanofsky \n> > Unfortunately, [`QMetaObject::invokeMethod(QObject*, Functor, Qt::ConnectionType, FunctorReturnType*)`](https://doc.qt.io/qt-5/qmetaobject.html#invokeMethod-4) was introduced in Qt 5.10 only.\n> \n> Not s",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-663504773,663504773,
hebasto,2020-08-14 18:36:02,"Updated 2d6672ebd3095fb99e8b0fe0227697916665bb95 -> 34b83a1d9015ceea97d0f46376256710cb23fe0a ([pr18948.03](https://github.com/hebasto/bitcoin/commits/pr18948.03) -> [pr18948.04](https://github.com/hebasto/bitcoin/commits/pr18948.04), [diff](https://github.com/hebasto/bitcoin/compare/pr18948.03..pr18948.04)):\n\n- addressed @ryanofsky's comments\n- updated OP",https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-674209091,674209091,
fanquake,2020-10-03 01:45:31,@promag can you take a look here again?,https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-703026114,703026114,
jonasschnelli,2020-11-10 10:08:54,utACK 34b83a1d9015ceea97d0f46376256710cb23fe0a,https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-724602353,724602353,
hebasto,2020-11-25 14:19:37,Rebased 34b83a1d9015ceea97d0f46376256710cb23fe0a -> 8963b2c71f120b2746396c4987392f0105c8dd60 ([pr18948.04](https://github.com/hebasto/bitcoin/commits/pr18948.04) -> [pr18948.05](https://github.com/hebasto/bitcoin/commits/pr18948.05)) due to the conflict with https://github.com/bitcoin-core/gui/pull/46.,https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-733735091,733735091,
ryanofsky,2020-08-12 21:57:26,"In commit ""qt: Call setParent() in the parent's context"" (3200c4492eafa462a0195c2320ba6b7acfc0b6ae)\n\nI don't think we can toggle behavior with a macro based on qt version without test coverage, or without even comment explaining how to test the disabled case. Otherwise it seems too easy for code to be broken without anybody noticing.\n\nDoes the code in the #else block below not work in newe",https://github.com/bitcoin/bitcoin/pull/18948#discussion_r469569819,469569819,src/qt/walletcontroller.cpp
ryanofsky,2020-08-12 22:07:20,"In commit ""qt: Call setParent() in the parent's context"" (3200c4492eafa462a0195c2320ba6b7acfc0b6ae)\n\nThis workaround is confusing and I think should have some kind of comment explaining what it is doing and how it works. I think the goal is to get setParent to run in the the GUI thread rather than the calling thread, and to have the calling thread block until setParent returns. But it's unclea",https://github.com/bitcoin/bitcoin/pull/18948#discussion_r469573847,469573847,src/qt/walletcontroller.cpp
ryanofsky,2020-08-12 22:12:54,"In commit ""qt: Improve comments in WalletController::getOrCreateWallet()"" (2d6672ebd3095fb99e8b0fe0227697916665bb95)\n\nNice comments, these do a good job of explaining the context",https://github.com/bitcoin/bitcoin/pull/18948#discussion_r469575944,469575944,src/qt/walletcontroller.cpp
hebasto,2020-08-14 18:36:40,[Updated](https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-674209091).,https://github.com/bitcoin/bitcoin/pull/18948#discussion_r470799526,470799526,src/qt/walletcontroller.cpp
hebasto,2020-08-14 18:36:48,[Updated](https://github.com/bitcoin/bitcoin/pull/18948#issuecomment-674209091).,https://github.com/bitcoin/bitcoin/pull/18948#discussion_r470799656,470799656,src/qt/walletcontroller.cpp
