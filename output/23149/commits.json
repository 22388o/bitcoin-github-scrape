[
  {
    "sha": "38fd709fa5b7a01f149a65efdfe1a6b463477e4e",
    "node_id": "C_kwDOABII59oAKDM4ZmQ3MDlmYTViN2EwMWYxNDlhNjVlZmRmZTFhNmI0NjM0NzdlNGU",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-30T06:23:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-01T03:20:53Z"
      },
      "message": "build: make --enable-werror just -Werror\n\nNo longer special case a set of warnings, to make up our own -Werror,\njust use -Werror outright. This shouldn't really have any effect on\nexisting builders, who were already using --enable-werror, and is more\ninline with what they would expect --enable-werror to be, which is\nerroring on any/all warnings.\n\nWe keep -Wno-error=return-type because we know that is broken when using\nmingw-w64. It should only be applied when cross-compiling for Windows.\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>",
      "tree": {
        "sha": "56209bbdfd1c21f4ab0e2c54fbc824bf7aa0bc59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56209bbdfd1c21f4ab0e2c54fbc824bf7aa0bc59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38fd709fa5b7a01f149a65efdfe1a6b463477e4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFWfp8ACgkQLuufXMCV\nJsEn0g/+KWbt5tCmkOIJo4XtZlOKq91LmfuDt+a1pkgFv8oj4qGm3G/B1imDOOM0\nz/ooXY/VWRiZewzacnkrJlGe/h01kmdgNO8vU8yBba6TUoVDsFuih/iaF+4Bavc1\nT/2TgKBFf/ebYLWq6W3uhiSE7JLQ4oaTRRz5ItlF2d4JP85wuyjUwC3yuHRl+khj\nJQbqnEygi1R/deuAlqZ6ncxfjAZZIR3Ykv+Nv5y2cPvIoBMf6zWwZfKEX1QR1Wpv\nuKXXgCOUa82eB5aoTZSuUgv+7w5GxJ20Ma8wjztizog29tM1QDdLPZorBx1KVYzl\n29ueJ+AOOGDg7wHJxQ3dd6+cvOC1FVcTwl2NBvwq58SxMuc876dBQrWqHpzaBPD4\nwhtYzrfEN0a7R/A9GrPHFBHiYWmUaTASmfBVC8p/UyhMdmpJ5Do5hvKuh74y2HSI\nUlJanSzQdFsZ9dqkLuV5PrSDvG7Hog8gdvLHLQIP+Cxlcm8lhVXYcao0II4RbcEX\ndimsJaG1kT0Rewsvw8OTG6sw8Z182onr0yEd9km0l4Zj1p6Yj8AAo7hKhqKeHsiD\nR/bt59iEFhBWGTBW4QQEk3lVH8h24ojC1KPj9MIG1+RUs+00oVoCURy28tyZ3JE7\nILsWiStbNXRDKQpoeCwlC9vzMlEnIK/MQc/NHr2bEThTS1cK5zU=\n=QD/u\n-----END PGP SIGNATURE-----",
        "payload": "tree 56209bbdfd1c21f4ab0e2c54fbc824bf7aa0bc59\nparent 33b0696d3106646d5251ceebbeaee53bc8765e3a\nauthor fanquake <fanquake@gmail.com> 1632982996 +0800\ncommitter fanquake <fanquake@gmail.com> 1633058453 +0800\n\nbuild: make --enable-werror just -Werror\n\nNo longer special case a set of warnings, to make up our own -Werror,\njust use -Werror outright. This shouldn't really have any effect on\nexisting builders, who were already using --enable-werror, and is more\ninline with what they would expect --enable-werror to be, which is\nerroring on any/all warnings.\n\nWe keep -Wno-error=return-type because we know that is broken when using\nmingw-w64. It should only be applied when cross-compiling for Windows.\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38fd709fa5b7a01f149a65efdfe1a6b463477e4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38fd709fa5b7a01f149a65efdfe1a6b463477e4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38fd709fa5b7a01f149a65efdfe1a6b463477e4e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33b0696d3106646d5251ceebbeaee53bc8765e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b0696d3106646d5251ceebbeaee53bc8765e3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33b0696d3106646d5251ceebbeaee53bc8765e3a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 5,
      "deletions": 24
    },
    "files": [
      {
        "sha": "0daeae59ebcd456ec2ba21371d597b31ebeb910e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 5,
        "deletions": 24,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38fd709fa5b7a01f149a65efdfe1a6b463477e4e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38fd709fa5b7a01f149a65efdfe1a6b463477e4e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=38fd709fa5b7a01f149a65efdfe1a6b463477e4e",
        "patch": "@@ -315,7 +315,7 @@ AC_ARG_ENABLE([gprof],\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n-                    [Treat certain compiler warnings as errors (default is no)])],\n+                    [Treat compiler warnings as errors (default is no)])],\n     [enable_werror=$enableval],\n     [enable_werror=no])\n \n@@ -403,34 +403,13 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n-  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=shadow-field],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=shadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=range-loop-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=range-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n+  ERROR_CXXFLAGS=$CXXFLAG_WERROR\n \n   dnl -Wreturn-type is broken in GCC for MinGW-w64.\n   dnl https://sourceforge.net/p/mingw-w64/bugs/306/\n-  AX_CHECK_COMPILE_FLAG([-Werror=return-type], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"], [], [$CXXFLAG_WERROR],\n+  AX_CHECK_COMPILE_FLAG([-Werror=return-type], [], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Wno-error=return-type\"], [$CXXFLAG_WERROR],\n                         [AC_LANG_SOURCE([[#include <cassert>\n                                           int f(){ assert(false); }]])])\n-\n-  AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n-  dnl -Wsuggest-override is broken with GCC before 9.2\n-  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n-  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n-  AX_CHECK_COMPILE_FLAG([-Werror=implicit-fallthrough], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=implicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n-\n-  if test x$suppress_external_warnings != xno ; then\n-    AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n-  fi\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -454,6 +433,8 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wduplicated-cond],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wlogical-op],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"],,[[$CXXFLAG_WERROR]])\n+  dnl -Wsuggest-override is broken with GCC before 9.2\n+  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n   AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])"
      }
    ]
  }
]