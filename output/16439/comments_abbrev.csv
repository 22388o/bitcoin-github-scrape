ajtowns,2019-07-23 03:25:48,"This is an alternate approach to #16345 . It may solve #15412 and remove the desire to drop client-side arg validation per #15448 . Previous discussion (as pointed out in 16345) is in #16317, #14858 and #8457.\n\nThere's a bunch of other ways of doing this:\n\n * just keep requiring a call to `getblockhash N` first -- this is less convenient and [slower](https://github.com/bitcoin/bitcoin/pull",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514038924,514038924,
DrahtBot,2019-07-23 06:39:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#19949](https://github.com/bitcoin/bitcoin/pull/19949) (cli: Parse and allow hash value by fjahr)\n* [#19762](https://git",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514075082,514075082,
laanwj,2019-07-24 13:34:52,"I still don't like overloading the meaning of the parameter, but I'll stop repeating myself … \n\n(also theoretically this could mess with software that assumes that only valid block hashes would be accepted by the RPC, though passing unchecked user input directly to RPC is arguably a bad idea…)",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514634389,514634389,
ajtowns,2019-07-24 14:42:55,"> I still don't like overloading the meaning of the parameter, but I'll stop repeating myself …\n\nSo leave things as-is including the exception for `getblockstats hash_or_height` and consider this a wontfix, or do any of the other approaches seem appealing? Could be plausible to teach bitcon-cli to accept a 64-byte hex string or a number and make the hash_or_height str-vs-num work a bit better,",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514661807,514661807,
promag,2019-07-25 00:43:04,"@ajtowns do you see advantages of these approaches beside being faster to write or slightly fast execution (compared to also calling `getblockhash`)?\n\nIf this goes forward, wouldn't it be better to prefix with `#` instead? Or maybe just check the input because an hash can never be an height.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514850402,514850402,
ajtowns,2019-07-25 08:31:49,"> @ajtowns do you see advantages of these approaches beside being faster to write or slightly fast execution (compared to also calling `getblockhash`)?\n\nIt's a fair bit less complexity for the person asking for something -- you don't have to cut and paste a blockhash, or have a `$( .. )` subcommand in shell, or remember what the name of the `getblockhash` rpc is. The speed difference is really",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-514951037,514951037,
sipa,2019-07-29 17:01:37,"Weak concept ACK.\n\nI understand @laanwj's point of view: ideally, the RPC server code implements simple unambiguous primitive operations, and complexity of how to make them interact is offloaded to the client. In places where user friendliness for CLI users conflicts with that, it can be implemented as extra functionality in `bitcoin-cli`.\n\nOn the other hand, this approach seems actually s",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516075116,516075116,
ryanofsky,2019-07-29 19:16:50,"Concept ACK. I didn't follow previous discussions, but I like the @ syntax, think it is simpler and more convenient than the other duplicating / aliasing / pipelining suggestions, and don't see a real potential for misuse. (Apologies if I missed any other practical objections in previous discussion, they mostly seemed like aesthetic complaints.)",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516125452,516125452,
jnewbery,2019-07-30 15:13:59,"Weak concept ACK, for exactly the same reasons that sipa gives here: https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516075116",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516464116,516464116,
jonasschnelli,2019-07-30 18:38:41,"I could live with that concept,... though I still think it's client functionality.\n\nWhat if the client (bitcoin-cli) does an extra call for `@<height>` which would be `getblockhash<height>`?\n\nFor a `getblock @<height>`, bitcoin-cli would acctually do `getblock(getblockhash(<height>))`?\n\nI think it's worth to extent `bitcoin-cli` for the hight-shortcut but I kida think it's wasted effor",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516542699,516542699,
laanwj,2019-07-31 08:11:09,"> I understand @laanwj's point of view: ideally, the RPC server code implements simple unambiguous primitive operations,\n\nThanks… you're formulating it better than me\n\nTo be clear: it's not that I dislike the *syntax*. I'm not NACKing this. I think this would be useful from the command line. But I think doing this on the server side is the wrong way to go. I think this is the wrong directi",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516745521,516745521,
promag,2019-07-31 08:22:00,"One problem with this is that the height can refer to a different block in a sequence of calls:\n```sh\nfoo @height\n# a wild reorg\nbar @height\n# bar operates on a different block than foo\n```\n",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516749135,516749135,
ajtowns,2019-07-31 14:14:38,"> One problem with this is that the height can refer to a different block in a sequence of calls:\n> `foo @height; reorg; bar @height`\n\nIsn't that to be expected and not particularly surprising? You get the same behaviour now if you call `foo $(getblockhash N); reorg; bar $(getblockhash N)`.\n\n> What if the client (bitcoin-cli) does an extra call for @<height> which would be getblockhash<h",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516867557,516867557,
MarcoFalke,2019-07-31 15:05:53,"> \n\n    Please also look at it from the perspective of someone writing a RPC wrapper in a static language, say, rust. After this change, the parameter needs to be an enum() which allows for multiple kinds of data, instead of a BlockHash.\n\nIt doesn't have to be an enum, it can also be a plain blockhash (hex string) and not support the user-facing `@123` syntax. ",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516889942,516889942,
promag,2019-07-31 15:13:40,"> Isn't that to be expected and not particularly surprising? You get the same behaviour\n\nNo, you would call `getblockhash` once and then all other calls would just use that hash.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516893208,516893208,
ryanofsky,2019-07-31 15:30:50,"re: https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516745521\n\n> Please also look at it from the perspective of someone writing a RPC wrapper in a static language, say, rust. After this change, the parameter needs to be an enum() which allows for multiple kinds of data, instead of a BlockHash.\n\nCould someone expand on this more? I don't understand this comment, and don't underst",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516900366,516900366,
promag,2019-07-31 15:37:19,"> This seems like an argument not only for requiring hashes server side, but also for requiring hashes client side, and against both this PR and #16345.\n\n~~Yes~~ yes for this PR, not much for the other. This one promotes calls by height which don't take into account reorgs.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516903185,516903185,
MarcoFalke,2019-07-31 15:49:01,"User should be assumed to know what a reorg is or be educated about them in the rpc help text, imo.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516908054,516908054,
laanwj,2019-07-31 16:38:04,"> Could someone expand on this more? I don't understand this comment, and don't understand in general why people seem to like the idea of moving logic from the server to the client\n\nThe point is that use of the interface will usually be automatic/programmatic. Manual use (though a cli, in whatever programming language) is only a small subset of uses of the RPC interface.\n\nFeatures that are",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516926539,516926539,
luke-jr,2019-07-31 16:47:42,"Concept NACK. The RPC interface is for software, not human interaction. The decision to not support heights in places of hashes was intentional.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516929832,516929832,
jamesob,2019-07-31 16:55:48,Concept ACK. This seems like a nice convenience that doesn't introduce any ambiguity or much complexity.,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516932630,516932630,
promag,2019-07-31 17:14:31,"Honestly I don't understand what is so inconvenient.\n\nHere's some more problems/inconsistencies:\n\n`-blocknotify` and ZMQ messages notify the block hash, not height, so I'd say most of the time you end up using the hash.\n\nSome (at least `getchaintxstats`) have the parameter named as `blockhash` and IMO `blockhash=@1000` is inconsistent.\n\nAlso, consider this: https://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516939586,516939586,
MarcoFalke,2019-07-31 19:57:59,"Would be nice if the gui supported this, even when it is not added to bitcoind",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-516997497,516997497,
promag,2019-07-31 21:26:43,@MarcoFalke GUI console supports `getblock(getblockhash(1))`. Are you suggesting `getblock(@1)` to result in the previous expression?,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-517027698,517027698,
jnewbery,2019-08-06 16:01:37,"Restating my Concept ACK here. I prefer the `@height` on server approach to the `%height` in client approach.\n\nI've skimmed the code and it looks good. Will fully review once commits are cleaned up and this is no longer a draft.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-518734273,518734273,
ch4ot1c,2019-09-20 04:41:12,"I think this would make newer developers (rpc consumers) significantly more prone to making errors, particularly missed reorg handling. Though, I've experienced the same usage inconveniences.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-533402559,533402559,
ajtowns,2020-01-09 12:41:24,"It doesn't look like there's anything like consensus to do this on the server side, so I've updated the patchset to do `@1234` on the client side by doing an extra `getblockhash` RPC call prior to whatever the actually desired RPC call is. Leaving it as WIP for now since it still needs some docs, better commit messages, and so on.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-572544490,572544490,
jonatack,2020-06-03 09:56:01,Concept ACK on the new client-side version; on my review shortlist. Will likely learn something useful for #19133.,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-638092130,638092130,
ajtowns,2020-06-22 02:18:00,"Rebased, cleaned up commit slightly, removed unnecessary whitespace change that caused the rebase conflict",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-647229210,647229210,
ajtowns,2020-07-13 05:51:55,"I haven't had any good ideas about how to document this -- it's client side, so updating the RPC help doesn't make sense.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-657373454,657373454,
jonatack,2020-07-14 04:26:12,"re-ACK 7349254 per `git range-diff 5550fa5 2ed6d2e 7349254` changes since last review snakecased variable/param naming and adding the PR number to the release note.\n\n> I haven't had any good ideas about how to document this -- it's client side, so updating the RPC help doesn't make sense.\n\nSame. Good point.\n",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-657958640,657958640,
jonatack,2020-07-20 03:47:04,"Since client-side users also refer to RPC helps, maybe annotations to those helps would be ok, e.g. ""when called from the cli..."" or ""cli only: ...""",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-660785587,660785587,
ajtowns,2020-09-10 23:01:21,"@sipa @laanwj @jonasschnelli The PR is implemented purely client side now, care to take another look?",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-690775807,690775807,
ajtowns,2020-11-03 06:47:21,Rebased,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-720936809,720936809,
jonasschnelli,2020-11-03 10:46:59,"See also #20273.\nNested commands allow similar functionality with more flexibility.\n* Getting a block by height `bitcoin-cli ""getblock(getblockhash(10000))""`\n* Getting the first transaction hash of the previous block by height `bitcoin-cli ""getblock(getblock(getblockhash(10000))[previousblockhash])[tx][0]""`\n",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-721040413,721040413,
kristapsk,2020-11-03 20:03:16,"I think #20273 is better solution for a problem, server code should not be complicated if that can be avoided, so Concept NACK.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-721346913,721346913,
ajtowns,2020-11-09 03:49:01,@kristapsk This doesn't touch server code...,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-723737717,723737717,
kristapsk,2020-11-09 04:38:41,"@ajtowns You're right, my bad, didn't look at the actual code here. In any case, still think #20273 is superior to this approach.",https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-723749041,723749041,
ajtowns,2021-02-02 08:43:53,Rebased on top of #20012,https://github.com/bitcoin/bitcoin/pull/16439#issuecomment-771469748,771469748,
MarcoFalke,2019-07-29 19:22:13,"`STR_HEX` no longer applies and this should be a new type, similar to `AMOUNT`",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r308395928,308395928,src/rpc/blockchain.cpp
jamesob,2019-07-31 16:54:37,Shouldn't this be `== '@'` or am I missing something?,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r309327689,309327689,src/bitcoin-cli.cpp
ajtowns,2019-08-01 05:12:47,"I figured having ""@123"" exercise the server-side code and ""%123"" exercise the client-side code would be easier while trying the two approaches out.",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r309524818,309524818,src/bitcoin-cli.cpp
jonatack,2020-06-22 10:23:23,"79a42cc style nit, for `CRPCConvertParam `, `CRPCConvertTable`, and the params of these new bools, this PR is following the naming conventions in this file, if you retouch perhaps update to the conventions in `developer-notes.md`:\n\n- ""Do not prefix class names with `C`""\n- ""Variable (including function arguments) and namespace names are all lowercase and may use `_` to separate words (snake_c",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443461466,443461466,src/rpc/client.h
jonatack,2020-06-22 10:43:03,"3b5790a Thanks for adding the tests. Do you think testing only `getblockheader` is enough sanity check coverage for the `vRPCConvertBlockhash` commands?\n\n```suggestion\n            self.log.info(""Compare response from getblockheader RPC {}"".format(at))\n```\n",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443471182,443471182,test/functional/interface_bitcoin_cli.py
jonatack,2020-06-22 10:50:25,"93e962b For the title, or in this line, I'm not sure what would be the most understood here: maybe add ""GUI"" before ""debug console"", or s/debug console/GUI console/",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443474674,443474674,doc/release-notes-16439.md
jonatack,2020-06-22 10:52:32,Might be nice (now or later) to extract the convert blockhash and getbestblockhash-vs-getblockhash logic to live in one place and be callable by both the gui and the cli.,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443475804,443475804,src/qt/rpcconsole.cpp
jonatack,2020-06-22 10:57:50,"What are your thoughts between these two versions?\n```cpp\n        DefaultRequestHandler rh;\n        const UniValue reply = ConnectAndCallRPC(&rh, bh_method, bh_args);\n```\n```cpp\n        std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n        const UniValue reply = ConnectAndCallRPC(rh.get(), bh_method, bh_args);\n```",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443478385,443478385,src/bitcoin-cli.cpp
ajtowns,2020-06-23 04:40:09,"Using a unique_ptr seems like more code for no benefit -- still has the same lifetime, but it's more typing and memory allocations?",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r443957125,443957125,src/bitcoin-cli.cpp
jnewbery,2020-06-23 13:05:25,"> ~it's more typing~\n\n~`auto`!~\n\n> ~memory allocations~\n\n~a std::unique_ptr has no additional memory allocations (and no additional memory usage if using the default deleter).~\n\n~(I'm not saying you should use a unique_ptr here, just that there's usually zero downside to using one)~\n\nEDIT: sorry, I didn't look at the code closely enough, and thought the comparison was between a",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r444207258,444207258,src/bitcoin-cli.cpp
ajtowns,2020-07-13 03:41:58,"Made it ""GUI debug console""",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453418685,453418685,doc/release-notes-16439.md
jonatack,2020-07-13 04:42:41,"Mentioning this only as I was asked to do it recently; feel free to ignore.\n\n```suggestion\nthe block at height 123456 or `getblockheader @best` to refer to the tip. (#16439)\n```",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453431287,453431287,doc/release-notes-16439.md
ajtowns,2020-07-13 05:33:03,"It's a client-side only thing, so not seeing a lot of need for massive testing, and `.format()` is more typing. :)",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453443445,453443445,test/functional/interface_bitcoin_cli.py
ajtowns,2020-07-13 05:48:49,The class CRPCConvertParam already exists and isn't changed. Variable/param names updated though.,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453447527,453447527,src/rpc/client.h
ajtowns,2020-07-13 05:49:13,"Seems pretty trivial and is only used in two places, so leaving as is",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453447622,453447622,src/qt/rpcconsole.cpp
ajtowns,2020-07-13 06:18:22,Done,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r453455954,453455954,doc/release-notes-16439.md
promag,2020-09-11 08:06:29,Unused?,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r486845902,486845902,src/rpc/client.h
promag,2020-09-11 08:08:44,Move to `else` below instead of setting as default?,https://github.com/bitcoin/bitcoin/pull/16439#discussion_r486847105,486847105,src/bitcoin-cli.cpp
ajtowns,2020-09-14 04:45:35,"Ooops. Added support for `-named` arguments in cli, so now it's used.",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r487648830,487648830,src/rpc/client.h
adamjonas,2020-09-14 17:40:08,"It appears this line is getting caught in the linter:\n```\nThe locale dependent function fprintf(...) appears to be used:\nsrc/bitcoin-cli.cpp:                fprintf(stderr, ""set args[i] = %s\n"", args[i].c_str());\n\nUnnecessary locale dependence can cause bugs that are very\ntricky to isolate and fix. Please avoid using locale dependent\nfunctions if possible.\n\nAdvice not applicable ",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r488109898,488109898,src/bitcoin-cli.cpp
ajtowns,2020-09-14 23:01:27,"Good linter, that line shouldn't have made it past debugging.",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r488284825,488284825,src/bitcoin-cli.cpp
jonatack,2021-02-02 16:14:56,"```suggestion\n                            for (size_t i = 0; i < args.size(); ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/16439#discussion_r568731751,568731751,src/qt/rpcconsole.cpp
