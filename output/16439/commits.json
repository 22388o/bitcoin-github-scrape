[
  {
    "sha": "8ca78cee238442ca65b035bb289fbc3dac369422",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2E3OGNlZTIzODQ0MmNhNjViMDM1YmIyODlmYmMzZGFjMzY5NDIy",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-01-09T08:23:49Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-02T02:17:56Z"
      },
      "message": "rpc/client: support code for getblock @123",
      "tree": {
        "sha": "2c7a4f317f5dcdc539cb9fe752fdb1ac14eb83e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c7a4f317f5dcdc539cb9fe752fdb1ac14eb83e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ca78cee238442ca65b035bb289fbc3dac369422",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca78cee238442ca65b035bb289fbc3dac369422",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca78cee238442ca65b035bb289fbc3dac369422",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca78cee238442ca65b035bb289fbc3dac369422/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f72d80b07af8ecbb2f9df1e87344eb465186f19d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 43,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e804294774253e5fce91299bba7490ba3473a791",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 6,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca78cee238442ca65b035bb289fbc3dac369422/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca78cee238442ca65b035bb289fbc3dac369422/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8ca78cee238442ca65b035bb289fbc3dac369422",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <rpc/client.h>\n+#include <span.h>\n #include <util/system.h>\n \n #include <set>\n@@ -189,34 +190,54 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addpeeraddress\", 1, \"port\"},\n     { \"stop\", 0, \"wait\" },\n };\n+/**\n+ * Specify a (method, idx, name) here if the RPC argument is a blockhash\n+ * and can meaningfully be abbreviated as a height (eg @1000)\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam rpc_params_convert_blockhash[] =\n+{\n+    { \"getblockheader\", 0, \"blockhash\" },\n+    { \"getblock\", 0, \"blockhash\" },\n+    { \"preciousblock\", 0, \"blockhash\" },\n+    { \"invalidateblock\", 0, \"blockhash\" },\n+    { \"getchaintxstats\", 1, \"blockhash\" },\n+    { \"getblockfilter\", 0, \"blockhash\" },\n+    { \"getrawtransaction\", 2, \"blockhash\" },\n+    { \"gettxoutproof\", 1, \"blockhash\" },\n+};\n // clang-format on\n \n+namespace {\n class CRPCConvertTable\n {\n private:\n     std::set<std::pair<std::string, int>> members;\n     std::set<std::pair<std::string, std::string>> membersByName;\n \n public:\n-    CRPCConvertTable();\n+    CRPCConvertTable(Span<const CRPCConvertParam> params);\n \n-    bool convert(const std::string& method, int idx) {\n+    bool convert(const std::string& method, int idx) const {\n         return (members.count(std::make_pair(method, idx)) > 0);\n     }\n-    bool convert(const std::string& method, const std::string& name) {\n+    bool convert(const std::string& method, const std::string& name) const {\n         return (membersByName.count(std::make_pair(method, name)) > 0);\n     }\n };\n+}; // namespace\n \n-CRPCConvertTable::CRPCConvertTable()\n+CRPCConvertTable::CRPCConvertTable(Span<const CRPCConvertParam> params)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n+    for (const auto& cp : params) {\n         members.emplace(cp.methodName, cp.paramIdx);\n         membersByName.emplace(cp.methodName, cp.paramName);\n     }\n }\n \n-static CRPCConvertTable rpcCvtTable;\n+static const CRPCConvertTable rpcCvtTable(vRPCConvertParams);\n+static const CRPCConvertTable rpc_convert_blockhash_table(rpc_params_convert_blockhash);\n \n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)\n  * as well as objects and arrays.\n@@ -230,6 +251,16 @@ UniValue ParseNonRFCJSONValue(const std::string& strVal)\n     return jVal[0];\n }\n \n+bool RPCConvertBlockhash(const std::string& method, int pos)\n+{\n+    return rpc_convert_blockhash_table.convert(method, pos);\n+}\n+\n+bool RPCConvertNamedBlockhash(const std::string& method, const std::string& param)\n+{\n+    return rpc_convert_blockhash_table.convert(method, param);\n+}\n+\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);"
      },
      {
        "sha": "8f8a9c186885c5b8ff3faedf794f782fee582609",
        "filename": "src/rpc/client.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca78cee238442ca65b035bb289fbc3dac369422/src/rpc/client.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca78cee238442ca65b035bb289fbc3dac369422/src/rpc/client.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.h?ref=8ca78cee238442ca65b035bb289fbc3dac369422",
        "patch": "@@ -14,6 +14,12 @@ UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::s\n /** Convert named arguments to command-specific RPC representation */\n UniValue RPCConvertNamedValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n \n+/** Whether this is a positional blockhash parameter */\n+bool RPCConvertBlockhash(const std::string& method, int pos);\n+\n+/** Whether this is a named blockhash parameter */\n+bool RPCConvertNamedBlockhash(const std::string& method, const std::string& param);\n+\n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)\n  * as well as objects and arrays.\n  */"
      }
    ]
  },
  {
    "sha": "900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDBhOWI1ZGQyY2RhYTNiZjM5MTE5ZThlNWJjZjVmNWRhN2E0Yjdl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-05-28T02:05:53Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-02T02:17:56Z"
      },
      "message": "bitcoin-cli: support \"getblock @123/@best\"",
      "tree": {
        "sha": "3f99e44277c008019cf4876867b9520b7060a809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f99e44277c008019cf4876867b9520b7060a809"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ca78cee238442ca65b035bb289fbc3dac369422",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca78cee238442ca65b035bb289fbc3dac369422",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca78cee238442ca65b035bb289fbc3dac369422"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 64,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3656d2650b1df4105c723ad25e8235df7ae94b11",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
        "patch": "@@ -14,6 +14,7 @@\n #include <rpc/mining.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n+#include <span.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n@@ -224,6 +225,7 @@ class BaseRequestHandler\n {\n public:\n     virtual ~BaseRequestHandler() {}\n+    virtual void PrepareArguments(const std::string& method, std::vector<std::string>& args) {}\n     virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n     virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n };\n@@ -566,9 +568,16 @@ class GenerateToAddressRequestHandler : public BaseRequestHandler\n     std::string address_str;\n };\n \n+static void ReplaceAtHeightByBlockHash(const std::string& method, std::vector<std::string>& args, bool named);\n+\n /** Process default single requests */\n class DefaultRequestHandler: public BaseRequestHandler {\n public:\n+    void PrepareArguments(const std::string& method, std::vector<std::string>& args) override\n+    {\n+        ReplaceAtHeightByBlockHash(method, args, gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED));\n+    }\n+\n     UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n     {\n         UniValue params;\n@@ -734,6 +743,60 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     return response;\n }\n \n+/**\n+ * ReplaceAtHeightByBlockHash\n+ *\n+ * @param method  Name of the method to be called\n+ * @param args    Vector of arguments to be modified\n+ */\n+static void ReplaceAtHeightByBlockHash(const std::string& method, std::vector<std::string>& args, bool named)\n+{\n+    // avoid any recursion risk\n+    if (method == \"getblockhash\" || method == \"getbestblockhash\") return;\n+\n+    for (size_t i = 0; i < args.size(); ++i) {\n+        std::string name;\n+        Span<const char> value = args[i];\n+\n+        if (named) {\n+            size_t pos = args[i].find('=');\n+            if (pos == std::string::npos) continue;\n+            auto namespan = value.subspan(0, pos);\n+            name = std::string(namespan.data(), namespan.size());\n+            if (!RPCConvertNamedBlockhash(method, name)) continue;\n+            value = value.subspan(pos + 1);\n+        } else {\n+            if (!RPCConvertBlockhash(method, i)) continue;\n+        }\n+        if (value.size() <= 1 || value[0] != '@') continue;\n+\n+        std::string bh_method;\n+        std::vector<std::string> bh_args;\n+        if (value == Span<const char>(\"@best\", 5)) {\n+            bh_method = \"getbestblockhash\";\n+        } else {\n+            bh_method = \"getblockhash\";\n+            std::string bh_arg(value.data()+1, value.size()-1);\n+            if (named) {\n+                bh_arg = \"height=\" + bh_arg;\n+            }\n+            bh_args.push_back(bh_arg);\n+        }\n+\n+        DefaultRequestHandler rh;\n+        const UniValue reply = ConnectAndCallRPC(&rh, bh_method, bh_args);\n+        const UniValue& result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (error.isNull() && result.isStr()) {\n+            if (named) {\n+                args[i] = name + \"=\" + result.get_str();\n+            } else {\n+                args[i] = result.get_str();\n+            }\n+        }\n+    }\n+}\n+\n /** Parse UniValue result to update the message to print to std::cout. */\n static void ParseResult(const UniValue& result, std::string& strPrint)\n {\n@@ -895,6 +958,7 @@ static int CommandLineRPC(int argc, char *argv[])\n             // Perform RPC call\n             Optional<std::string> wallet_name{};\n             if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n+            rh->PrepareArguments(method, args);\n             const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n \n             // Parse reply"
      }
    ]
  },
  {
    "sha": "4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjViN2M5YTVjNTUyMjQ4YjAzMmQ0ZTNmOWRiMDkwNjlmZDNjNTM5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-05-28T02:06:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-02T02:17:56Z"
      },
      "message": "tests: add test for bitcoin-cli getblockheader @50 and @best",
      "tree": {
        "sha": "5f096f206302c38bcfe111f5d7f625a44ccb60d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f096f206302c38bcfe111f5d7f625a44ccb60d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5b7c9a5c552248b032d4e3f9db09069fd3c539/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/900a9b5dd2cdaa3bf39119e8e5bcf5f5da7a4b7e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d61a672e34136718edaa43100c946977b64d6e06",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f5b7c9a5c552248b032d4e3f9db09069fd3c539/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f5b7c9a5c552248b032d4e3f9db09069fd3c539/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
        "patch": "@@ -42,6 +42,19 @@ def run_test(self):\n         rpc_response = self.nodes[0].getblockchaininfo()\n         assert_equal(cli_response, rpc_response)\n \n+        header_tests = [ (\"@50\", self.nodes[0].getblockhash(50)),\n+                         (\"@best\", self.nodes[0].getbestblockhash()),\n+                       ]\n+        for at,hash in header_tests:\n+            self.log.info(\"Compare response from getblockheader RPC %s/%s\" % (at,hash))\n+            rpc_response = self.nodes[0].getblockheader(hash)\n+            cli_response = self.nodes[0].cli.getblockheader(hash)\n+            cli_response_at = self.nodes[0].cli.getblockheader(at)\n+            cli_response_at_named = self.nodes[0].cli.getblockheader(blockhash=at)\n+            assert_equal(cli_response, rpc_response)\n+            assert_equal(cli_response_at, rpc_response)\n+            assert_equal(cli_response_at_named, rpc_response)\n+\n         user, password = get_auth_cookie(self.nodes[0].datadir, self.chain)\n \n         self.log.info(\"Test -stdinrpcpass option\")"
      }
    ]
  },
  {
    "sha": "f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmYxMTM2MTJmYTBhZjhmMDNhM2U3MzliMTY3MmEwYjBhOGQxY2Qy",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-05-28T02:05:58Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-02T02:17:56Z"
      },
      "message": "gui: support \"getblock @123/@best\" in rpc console",
      "tree": {
        "sha": "1c14201d21f2cc2c022f13502e2cda6430fd26f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c14201d21f2cc2c022f13502e2cda6430fd26f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5b7c9a5c552248b032d4e3f9db09069fd3c539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5b7c9a5c552248b032d4e3f9db09069fd3c539"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 26,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db4fd3bbfaef79af5c477e8c2d865c98b16170f5",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
        "patch": "@@ -302,18 +302,42 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                     if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n                     {\n                         if (fExecute) {\n+                            assert(node);\n+\n                             // Convert argument list to JSON objects in method-dependent way,\n                             // and pass it along with the method name to the dispatcher.\n-                            UniValue params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n                             std::string method = stack.back()[0];\n+                            std::vector<std::string> args{stack.back().begin() + 1, stack.back().end()};\n+\n+                            // Convert block heights \"@123\" or \"@best\" to block hash when appropriate\n+                            for (size_t i = 0; i < args.size(); i++) {\n+                                if (!RPCConvertBlockhash(method, i) || args[i].size() <= 1 || args[i][0] != '@') continue;\n+\n+                                std::string gbh_method;\n+                                UniValue gbh_args(UniValue::VARR);\n+                                if (args[i] == \"@best\") {\n+                                    gbh_method = \"getbestblockhash\";\n+                                } else {\n+                                    gbh_method = \"getblockhash\";\n+                                    UniValue gbh_height;\n+                                    gbh_height.read(args[i].substr(1));\n+                                    if (!gbh_height.isNum()) continue;\n+                                    gbh_args.push_back(gbh_height);\n+                                }\n+                                std::string gbh_uri;\n+                                UniValue gbh_res = node->executeRpc(gbh_method, gbh_args, gbh_uri);\n+                                if (gbh_res.isStr()) {\n+                                    args[i] = gbh_res.get_str();\n+                                }\n+                            }\n+                            UniValue params = RPCConvertValues(method, args);\n                             std::string uri;\n #ifdef ENABLE_WALLET\n                             if (wallet_model) {\n                                 QByteArray encodedName = QUrl::toPercentEncoding(wallet_model->getWalletName());\n                                 uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n                             }\n #endif\n-                            assert(node);\n                             lastResult = node->executeRpc(method, params, uri);\n                         }\n "
      }
    ]
  },
  {
    "sha": "4a8a2948139b91f3a64777d9e66f5dab66072fa7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YThhMjk0ODEzOWI5MWYzYTY0Nzc3ZDllNjZmNWRhYjY2MDcyZmE3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-05-28T02:06:02Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-02T02:17:56Z"
      },
      "message": "Add release nodes for cli/debug console @123/@best queries",
      "tree": {
        "sha": "cbd09dabb7b6454ece5921e4f606e30c3bfb946f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbd09dabb7b6454ece5921e4f606e30c3bfb946f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a8a2948139b91f3a64777d9e66f5dab66072fa7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8a2948139b91f3a64777d9e66f5dab66072fa7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8a2948139b91f3a64777d9e66f5dab66072fa7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8a2948139b91f3a64777d9e66f5dab66072fa7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f113612fa0af8f03a3e739b1672a0b0a8d1cd2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eae9a4fddbd21809d488d466d00d3d3d4061339a",
        "filename": "doc/release-notes-16439.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8a2948139b91f3a64777d9e66f5dab66072fa7/doc/release-notes-16439.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8a2948139b91f3a64777d9e66f5dab66072fa7/doc/release-notes-16439.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16439.md?ref=4a8a2948139b91f3a64777d9e66f5dab66072fa7",
        "patch": "@@ -0,0 +1,9 @@\n+Specify block by height in CLI or Debug Console\n+-----------------------------------------------\n+\n+The ability to specify a block by a height instead of its hash\n+has been added to bitcoin-cli and the GUI debug console. This is a\n+client-side shortcut for first querying the hash via `getblockhash` or\n+`getbestblockhash`. The syntax is `getblockheader @123456` to refer to\n+the block at height 123456 or `getblockheader @best` to refer to the tip.\n+(#16439)"
      }
    ]
  }
]