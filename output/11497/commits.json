[
  {
    "sha": "e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTcyZDNjOWE5OGQxNTYxYzgyZDAyZTZhNjM1ZmMxMWU2NTdjOWE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-10-14T01:44:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-11-30T16:42:12Z"
      },
      "message": "Hide accounts system behind deprecation switch\n\nDeprecate all accounts functionality and make it only accessible\nby using -deprecatedrpc=accounts.",
      "tree": {
        "sha": "0b80aa290b11eaa07b1fb7bfb6d5a6bcf413eccc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b80aa290b11eaa07b1fb7bfb6d5a6bcf413eccc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6816484a02d8cbcb2c9a6357ce708374a7241ce0"
      }
    ],
    "stats": {
      "total": 285,
      "additions": 149,
      "deletions": 136
    },
    "files": [
      {
        "sha": "b44e1f0d1d8977c6a4c5b867fea304c4c58cd785",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 131,
        "deletions": 80,
        "changes": 211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -136,14 +136,14 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n+    if (request.fHelp || (request.params.size() > 1 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() > 0 && !IsDeprecatedRPCEnabled(\"accounts\")))\n         throw std::runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -155,8 +155,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Parse the account first so we don't generate a key if there's an error\n     std::string strAccount;\n-    if (!request.params[0].isNull())\n-        strAccount = AccountFromValue(request.params[0]);\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (!request.params[0].isNull()) {\n+            strAccount = AccountFromValue(request.params[0]);\n+        }\n+    }\n \n     if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n@@ -195,7 +198,7 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n-            \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n@@ -207,6 +210,10 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n@@ -267,7 +274,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"setaccount \\\"address\\\" \\\"account\\\"\\n\"\n-            \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n@@ -276,6 +283,10 @@ UniValue setaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -315,7 +326,7 @@ UniValue getaccount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getaccount \\\"address\\\"\\n\"\n-            \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n@@ -325,6 +336,10 @@ UniValue getaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -351,7 +366,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n-            \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n@@ -364,6 +379,10 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = AccountFromValue(request.params[0]);\n@@ -527,7 +546,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             \"    [\\n\"\n             \"      \\\"address\\\",            (string) The bitcoin address\\n\"\n             \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"      \\\"account\\\"             (string, optional) DEPRECATED. The account\\n\"\n+            \"      \\\"account\\\"             (string, optional) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n             \"  ]\\n\"\n@@ -555,7 +574,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(EncodeDestination(address));\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n-            {\n+            if (IsDeprecatedRPCEnabled(\"accounts\")) {\n                 if (pwallet->mapAddressBook.find(address) != pwallet->mapAddressBook.end()) {\n                     addressInfo.push_back(pwallet->mapAddressBook.find(address)->second.name);\n                 }\n@@ -705,7 +724,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n-            \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n@@ -722,6 +741,10 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     ObserveSafeMode();\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -767,15 +790,16 @@ UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || (request.params.size() > 3 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() != 0 && !IsDeprecatedRPCEnabled(\"accounts\")))\n         throw std::runtime_error(\n             \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"         (string, optional) DEPRECATED. The account string may be given as a\\n\"\n+            \"1. \\\"account\\\"         (string, optional) DEPRECATED. This argument will be removed in a future version. \\n\"\n+            \"                     To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account string may be given as a\\n\"\n             \"                     specific account name to find the balance associated with wallet keys in\\n\"\n             \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n             \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n@@ -787,8 +811,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"                     balances. In general, account balance calculation is not considered\\n\"\n             \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n             \"                     avoid passing this argument.\\n\"\n-            \"2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n+            \"2. minconf           (numeric, optional, default=1) DEPRECATED. An account must be specified. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Only include transactions confirmed at least this many times.\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) DEPRECATED. An account must be specified. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -808,34 +832,38 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const UniValue& account_value = request.params[0];\n-    const UniValue& minconf = request.params[1];\n-    const UniValue& include_watchonly = request.params[2];\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        const UniValue& account_value = request.params[0];\n+        const UniValue& minconf = request.params[1];\n+        const UniValue& include_watchonly = request.params[2];\n \n-    if (account_value.isNull()) {\n-        if (!minconf.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                \"getbalance minconf option is only currently supported if an account is specified\");\n-        }\n-        if (!include_watchonly.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                \"getbalance include_watchonly option is only currently supported if an account is specified\");\n+        if (account_value.isNull()) {\n+            if (!minconf.isNull()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                    \"getbalance minconf option is only currently supported if an account is specified\");\n+            }\n+            if (!include_watchonly.isNull()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                    \"getbalance include_watchonly option is only currently supported if an account is specified\");\n+            }\n+            return ValueFromAmount(pwallet->GetBalance());\n         }\n-        return ValueFromAmount(pwallet->GetBalance());\n-    }\n \n-    const std::string& account_param = account_value.get_str();\n-    const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n+        const std::string& account_param = account_value.get_str();\n+        const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n \n-    int nMinDepth = 1;\n-    if (!minconf.isNull())\n-        nMinDepth = minconf.get_int();\n-    isminefilter filter = ISMINE_SPENDABLE;\n-    if(!include_watchonly.isNull())\n-        if(include_watchonly.get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+        int nMinDepth = 1;\n+        if (!minconf.isNull())\n+            nMinDepth = minconf.get_int();\n+        isminefilter filter = ISMINE_SPENDABLE;\n+        if(!include_watchonly.isNull())\n+            if(include_watchonly.get_bool())\n+                filter = filter | ISMINE_WATCH_ONLY;\n+\n+        return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n+    }\n \n-    return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n+    return ValueFromAmount(pwallet->GetBalance());\n }\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -872,7 +900,7 @@ UniValue movecmd(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw std::runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n-            \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Move a specified amount from one account in your wallet to another.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n@@ -890,6 +918,10 @@ UniValue movecmd(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     ObserveSafeMode();\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -997,13 +1029,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n+    if (request.fHelp || (request.params.size() < 2 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() < 1 && !IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() > 8 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() > 7 && !IsDeprecatedRPCEnabled(\"accounts\")))\n         throw std::runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n+            \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n@@ -1051,32 +1083,32 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    std::string strAccount = AccountFromValue(request.params[0]);\n-    UniValue sendTo = request.params[1].get_obj();\n+    std::string strAccount = IsDeprecatedRPCEnabled(\"accounts\") ? AccountFromValue(request.params[0]) : \"\";\n+    UniValue sendTo = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 1 : 0].get_obj();\n     int nMinDepth = 1;\n-    if (!request.params[2].isNull())\n-        nMinDepth = request.params[2].get_int();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 2 : 1].isNull())\n+        nMinDepth = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 2 : 1].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = request.params[3].get_str();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 3 : 2].isNull() && !request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 3 : 2].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 3 : 2].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (!request.params[4].isNull())\n-        subtractFeeFromAmount = request.params[4].get_array();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 4 : 3].isNull())\n+        subtractFeeFromAmount = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 4 : 3].get_array();\n \n     CCoinControl coin_control;\n-    if (!request.params[5].isNull()) {\n-        coin_control.signalRbf = request.params[5].get_bool();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 5 : 4].isNull()) {\n+        coin_control.signalRbf = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 5 : 4].get_bool();\n     }\n \n-    if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 6 : 5].isNull()) {\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 6 : 5]);\n     }\n \n-    if (!request.params[7].isNull()) {\n-        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 7 : 6].isNull()) {\n+        if (!FeeModeFromString(request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 7 : 6].get_str(), coin_control.m_fee_mode)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n         }\n     }\n@@ -1148,7 +1180,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || (request.params.size() > 3 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() > 2 && !IsDeprecatedRPCEnabled(\"accounts\")))\n     {\n         std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n@@ -1162,7 +1194,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n             \"     ]\\n\"\n-            \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n+            \"3. \\\"account\\\"      (string, optional) DEPRECATED. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"address\\\"         (string) A bitcoin address associated with the keys.\\n\"\n@@ -1179,8 +1211,10 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount;\n-    if (!request.params[2].isNull())\n-        strAccount = AccountFromValue(request.params[2]);\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (!request.params[2].isNull())\n+            strAccount = AccountFromValue(request.params[2]);\n+    }\n \n     // Construct using pay-to-script-hash:\n     CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n@@ -1419,7 +1453,9 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if(fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n             obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n+            if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+                obj.push_back(Pair(\"account\",       strAccount));\n+            }\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n             if (!fByAccounts)\n@@ -1446,7 +1482,9 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue obj(UniValue::VOBJ);\n             if((*it).second.fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       (*it).first));\n+            if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+                obj.push_back(Pair(\"account\",       (*it).first));\n+            }\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n             ret.push_back(obj);\n@@ -1477,7 +1515,7 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n-            \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n+            \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account of the receiving address. The default account is \\\"\\\".\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n,               (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"    \\\"label\\\" : \\\"label\\\",               (string) A comment for the address/transaction, if any\\n\"\n@@ -1516,7 +1554,8 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n             \"listreceivedbyaccount ( minconf include_empty include_watchonly)\\n\"\n-            \"\\nDEPRECATED. List balances by account.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\\n\"\n+            \"List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n@@ -1540,6 +1579,10 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     ObserveSafeMode();\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1660,7 +1703,9 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n         entry.push_back(Pair(\"category\", \"move\"));\n         entry.push_back(Pair(\"time\", acentry.nTime));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n+        if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+            entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n+        }\n         entry.push_back(Pair(\"comment\", acentry.strComment));\n         ret.push_back(entry);\n     }\n@@ -1678,14 +1723,14 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n+            \"1. \\\"account\\\"    (string, optional) DEPRECATED. This argument will be removed in a future version. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n@@ -1714,7 +1759,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n-            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came \\n\"\n+            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n             \"                                          negative amounts).\\n\"\n             \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n@@ -1742,17 +1787,19 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = \"*\";\n-    if (!request.params[0].isNull())\n-        strAccount = request.params[0].get_str();\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (!request.params[0].isNull())\n+            strAccount = request.params[0].get_str();\n+    }\n     int nCount = 10;\n-    if (!request.params[1].isNull())\n-        nCount = request.params[1].get_int();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 1 : 0].isNull())\n+        nCount = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 1 : 0].get_int();\n     int nFrom = 0;\n-    if (!request.params[2].isNull())\n-        nFrom = request.params[2].get_int();\n+    if (!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 2 : 1].isNull())\n+        nFrom = request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 2 : 1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(!request.params[3].isNull())\n-        if(request.params[3].get_bool())\n+    if(!request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 3 : 2].isNull())\n+        if(request.params[IsDeprecatedRPCEnabled(\"accounts\") ? 3 : 2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (nCount < 0)\n@@ -1812,7 +1859,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"listaccounts ( minconf include_watchonly)\\n\"\n-            \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n+            \"\\nDEPRECATED. This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n             \"2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')\\n\"\n@@ -1832,6 +1879,10 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"This command is deprecated and will be removed in a future version. To be able to use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     ObserveSafeMode();\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1912,7 +1963,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n@@ -2062,7 +2113,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n-            \"      \\\"account\\\" : \\\"accountname\\\",      (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n+            \"      \\\"account\\\" : \\\"accountname\\\",      (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"address\\\",          (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -2845,7 +2896,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"txid\\\" : \\\"txid\\\",          (string) the transaction id \\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. This field will be removed in a future version. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n@@ -2948,7 +2999,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n         if (fValidAddress) {\n             entry.push_back(Pair(\"address\", EncodeDestination(address)));\n \n-            if (pwallet->mapAddressBook.count(address)) {\n+            if (IsDeprecatedRPCEnabled(\"accounts\") && pwallet->mapAddressBook.count(address)) {\n                 entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n             }\n "
      },
      {
        "sha": "f7451dbf7f3b1b4aab0872f9cdec624230f33792",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -339,7 +339,7 @@ def run_test(self):\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n         #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendmany(\"\", outputs)\n+        txId = self.nodes[0].sendmany(outputs)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n@@ -518,7 +518,7 @@ def run_test(self):\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n         #create same transaction over sendtoaddress\n-        txId = self.nodes[1].sendmany(\"\", outputs)\n+        txId = self.nodes[1].sendmany(outputs)\n         signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n \n         #compare fee"
      },
      {
        "sha": "52bb62814e003564a2d847ee8ee02598cd5cc6a5",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -119,7 +119,7 @@ def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n-        extra_args = [[] for _ in range(self.num_nodes)]\n+        extra_args = [[\"-deprecatedrpc=accounts\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]"
      },
      {
        "sha": "babd44f4f2b29f3438db885813116f077a0afa6d",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -10,6 +10,7 @@ class ImportPrunedFundsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.extra_args = [[], [\"-deprecatedrpc=accounts\"]]\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")"
      },
      {
        "sha": "9deca7346b1178ec73ce25e7dd9ca0a559ca9ab1",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -19,6 +19,7 @@ class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n+        self.extra_args = [[\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"]]\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "a0a3d13307c005934f6eb2a631ff0c6cb62e06e8",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -36,19 +36,19 @@ def run_test(self):\n         self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                             {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+                            {\"address\": addr, \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n         # With min confidence < 10\n         assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n                             {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+                            {\"address\": addr, \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n         # With min confidence > 10, should not find Tx\n         assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n         # Empty Tx\n         addr = self.nodes[1].getnewaddress()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n                             {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+                            {\"address\": addr, \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n \n         self.log.info(\"getreceivedbyaddress Test\")\n \n@@ -74,47 +74,5 @@ def run_test(self):\n         # Trying to getreceivedby for an address the wallet doesn't own should return an error\n         assert_raises_rpc_error(-4, \"Address not found in wallet\", self.nodes[0].getreceivedbyaddress, addr)\n \n-        self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n-\n-        # set pre-state\n-        addrArr = self.nodes[1].getnewaddress()\n-        account = self.nodes[1].getaccount(addrArr)\n-        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount() if r[\"account\"] == account][0]\n-        balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n-\n-        txid = self.nodes[0].sendtoaddress(addr, 0.1)\n-        self.sync_all()\n-\n-        # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n-        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                            {\"account\": account},\n-                            received_by_account_json)\n-\n-        # getreceivedbyaddress should return same balance because of 0 confirmations\n-        balance = self.nodes[1].getreceivedbyaccount(account)\n-        assert_equal(balance, balance_by_account)\n-\n-        self.nodes[1].generate(10)\n-        self.sync_all()\n-        # listreceivedbyaccount should return updated account balance\n-        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                            {\"account\": account},\n-                            {\"account\": received_by_account_json[\"account\"], \"amount\": (received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n-\n-        # getreceivedbyaddress should return updates balance\n-        balance = self.nodes[1].getreceivedbyaccount(account)\n-        assert_equal(balance, balance_by_account + Decimal(\"0.1\"))\n-\n-        # Create a new account named \"mynewaccount\" that has a 0 balance\n-        self.nodes[1].getaccountaddress(\"mynewaccount\")\n-        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount(0, True) if r[\"account\"] == \"mynewaccount\"][0]\n-\n-        # Test includeempty of listreceivedbyaccount\n-        assert_equal(received_by_account_json[\"amount\"], Decimal(\"0.0\"))\n-\n-        # Test getreceivedbyaccount for 0 amount accounts\n-        balance = self.nodes[1].getreceivedbyaccount(\"mynewaccount\")\n-        assert_equal(balance, Decimal(\"0.0\"))\n-\n if __name__ == '__main__':\n     ReceivedByTest().main()"
      },
      {
        "sha": "c390d1e7b45bdf4a476626939c3409c7274e2d68",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -596,13 +596,13 @@ def run_test(self):\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n-            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(1, 0, True)[0][\"txid\"], txid)\n \n             # Assert it is properly saved\n             self.stop_node(1)\n             self.start_node(1)\n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n-            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(1, 0, True)[0][\"txid\"], txid)\n \n     def mine_and_test_listunspent(self, script_list, ismine):\n         utxo = find_unspent(self.nodes[0], 50)"
      },
      {
        "sha": "b4460afcebbcd30d9ce646c9d3dfa22901766aa4",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -10,6 +10,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.extra_args = [[\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"]]\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "77dcaecedd6c07018ebe2170db81efe461ac329d",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -10,6 +10,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.extra_args = [[\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"], [\"-deprecatedrpc=accounts\"]]\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "65f0b1738abb98d054a457224e69ce4f2e398fdb",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -20,7 +20,7 @@ class WalletAccountsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[]]\n+        self.extra_args = [[\"-deprecatedrpc=accounts\"]]\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "1ab29ac13fff584c42839c356972deec9019fc1e",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e572d3c9a98d1561c82d02e6a635fc11e657c9a8/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=e572d3c9a98d1561c82d02e6a635fc11e657c9a8",
        "patch": "@@ -13,9 +13,9 @@ def set_test_params(self):\n \n     def setup_network(self):\n         self.add_nodes(4)\n-        self.start_node(0)\n+        self.start_node(0, [\"-deprecatedrpc=accounts\"])\n         self.start_node(1)\n-        self.start_node(2)\n+        self.start_node(2, [\"-deprecatedrpc=accounts\"])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -268,7 +268,7 @@ def run_test(self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.start_node(0)\n+        self.start_node(0, [\"-deprecatedrpc=accounts\"])\n         self.start_node(1)\n         self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n@@ -373,7 +373,7 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit), \"-deprecatedrpc=accounts\"])\n             self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n@@ -423,7 +423,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit), \"-deprecatedrpc=accounts\"])\n \n         # wait for loadmempool\n         timeout = 10"
      }
    ]
  }
]