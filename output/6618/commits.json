[
  {
    "sha": "b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTBiMmExODA4NTM3MmEzZmM2ZDdhY2E4NmFlZjEyMGQ4YmU0Zjlk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-03T16:59:56Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-12T15:13:28Z"
      },
      "message": "Modify success threshold to 95% unless target is 1.",
      "tree": {
        "sha": "28db32f6f1408fcce41d4eb0a2d6caf2df091657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28db32f6f1408fcce41d4eb0a2d6caf2df091657"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10b2a18085372a3fc6d7aca86aef120d8be4f9d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 33,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ef08b5ea7316b2659dc230b36f2ab2190a11610a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 4,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b10b2a18085372a3fc6d7aca86aef120d8be4f9d/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b10b2a18085372a3fc6d7aca86aef120d8be4f9d/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
        "patch": "@@ -207,8 +207,8 @@ void TxConfirmStats::Read(CAutoFile& filein)\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in tx count bucket count\");\n     filein >> fileConfAvg;\n     maxConfirms = fileConfAvg.size();\n-    if (maxConfirms <= 0 || maxConfirms > 6 * 24 * 7) // one week\n-        throw std::runtime_error(\"Corrupt estimates file.  Must maintain estimates for between 1 and 1008 (one week) confirms\");\n+    if (maxConfirms <= 1 || maxConfirms > 6 * 24 * 7) // one week\n+        throw std::runtime_error(\"Corrupt estimates file.  Must maintain estimates for between 2 and 1008 (one week) confirms\");\n     for (unsigned int i = 0; i < maxConfirms; i++) {\n         if (fileConfAvg[i].size() != numBuckets)\n             throw std::runtime_error(\"Corrupt estimates file. Mismatch in fee/pri conf average bucket count\");\n@@ -307,6 +307,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator(const CFeeRate& _minRelayFee)\n         vfeelist.push_back(bucketBoundary);\n     }\n     vfeelist.push_back(INF_FEERATE);\n+    assert(MAX_BLOCK_CONFIRMS >= 2); // Have to track at least to 2 blocks\n     feeStats.Initialize(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY, \"FeeRate\");\n \n     minTrackedPriority = AllowFreeThreshold() < MIN_PRIORITY ? MIN_PRIORITY : AllowFreeThreshold();\n@@ -496,7 +497,17 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n         return CFeeRate(0);\n \n-    double median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = -1;\n+    if (confTarget == 1) {\n+        // Special case 1 with a lower success threshold, but ensure it can't give a lower estimate than 2.\n+        median = feeStats.EstimateMedianVal(1, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT_1CONF, true, nBestSeenHeight);\n+        if (median > 0) {\n+            median = std::max(median, feeStats.EstimateMedianVal(2, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight));\n+        }\n+    }\n+    else {\n+        median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n \n     if (median < 0)\n         return CFeeRate(0);\n@@ -510,7 +521,19 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n         return -1;\n \n-    return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = -1;\n+    if (confTarget == 1) {\n+        // Special case 1 with a lower success threshold, but ensure it can't give a lower estimate than 2.\n+        median = priStats.EstimateMedianVal(1, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT_1CONF, true, nBestSeenHeight);\n+        if (median > 0) {\n+            median = std::max(median, priStats.EstimateMedianVal(2, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight));\n+        }\n+    }\n+    else {\n+        median = priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    return median;\n }\n \n void CBlockPolicyEstimator::Write(CAutoFile& fileout)"
      },
      {
        "sha": "d9171fb8f4dd4e10e28d8796facc9ca9be7d62e2",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b10b2a18085372a3fc6d7aca86aef120d8be4f9d/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b10b2a18085372a3fc6d7aca86aef120d8be4f9d/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
        "patch": "@@ -182,8 +182,12 @@ static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n /** Decay of .998 is a half-life of 346 blocks or about 2.4 days */\n static const double DEFAULT_DECAY = .998;\n \n-/** Require greater than 85% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n-static const double MIN_SUCCESS_PCT = .85;\n+/**\n+ * Require greater than 95% of X fee transactions to be confirmed within Y blocks\n+ * for X to be high enough.  Use 85% for target of 1.\n+ */\n+static const double MIN_SUCCESS_PCT = .95;\n+static const double MIN_SUCCESS_PCT_1CONF = .85;\n static const double UNLIKELY_PCT = .5;\n \n /** Require an avg of 1 tx in the combined fee bucket per block to have stat significance */"
      }
    ]
  },
  {
    "sha": "f84fd7d5844038c879a6ae80736ee1be0b0bc47c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODRmZDdkNTg0NDAzOGM4NzlhNmFlODA3MzZlZTFiZTBiMGJjNDdj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-12T15:45:07Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-09-14T12:05:31Z"
      },
      "message": "Fix unit test for fee estimation.\n\nUnfortunately the unit test for fee estimation depends on the success threshold (and the decay) chosen.  Modify the unit test for the new default success thresholds.",
      "tree": {
        "sha": "fb4f812870d72b7c65b739b79bc501bc80c11fd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb4f812870d72b7c65b739b79bc501bc80c11fd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f84fd7d5844038c879a6ae80736ee1be0b0bc47c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f84fd7d5844038c879a6ae80736ee1be0b0bc47c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f84fd7d5844038c879a6ae80736ee1be0b0bc47c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f84fd7d5844038c879a6ae80736ee1be0b0bc47c/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10b2a18085372a3fc6d7aca86aef120d8be4f9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b10b2a18085372a3fc6d7aca86aef120d8be4f9d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 22,
      "deletions": 17
    },
    "files": [
      {
        "sha": "65fa8f81645a0e9655a34189c280c77f8be1e337",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f84fd7d5844038c879a6ae80736ee1be0b0bc47c/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f84fd7d5844038c879a6ae80736ee1be0b0bc47c/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=f84fd7d5844038c879a6ae80736ee1be0b0bc47c",
        "patch": "@@ -83,11 +83,13 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n-            // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n-            // 8*baserate\n+            // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n+            // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n             BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n         }\n     }\n \n@@ -96,20 +98,23 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Highest feerate is 10*baseRate and gets in all blocks,\n     // second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,\n     // third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,\n-    // so estimateFee(1) should return 9*baseRate.\n-    // Third highest feerate has 90% chance of being included by 2 blocks,\n-    // so estimateFee(2) should return 8*baseRate etc...\n+    // so estimateFee(1) should return 9*baseRate. (success thresh only 85%)\n+    // Second highest feerate has 100% chance of being included by 2 blocks,\n+    // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n         origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n         origPriEst.push_back(mpool.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n         }\n-        BOOST_CHECK(origFeeEst[i-1] < (10-i)*baseRate.GetFeePerK() + deltaFee);\n-        BOOST_CHECK(origFeeEst[i-1] > (10-i)*baseRate.GetFeePerK() - deltaFee);\n-        BOOST_CHECK(origPriEst[i-1] < pow(10,10-i) * basepri + deltaPri);\n-        BOOST_CHECK(origPriEst[i-1] > pow(10,10-i) * basepri - deltaPri);\n+        int mult = 11-i;\n+        if (i == 1)\n+            mult = 9; // success thresh is only 85% for 1\n+        BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n+        BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        BOOST_CHECK(origPriEst[i-1] < pow(10,mult) * basepri + deltaPri);\n+        BOOST_CHECK(origPriEst[i-1] > pow(10,mult) * basepri - deltaPri);\n     }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n@@ -140,8 +145,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -161,9 +166,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n-    // Mine 100 more blocks where everything is mined every block\n-    // Estimates should be below original estimates (not possible for last estimate)\n-    while (blocknum < 365) {\n+    // Mine 200 more blocks where everything is mined every block\n+    // Estimates should be below original estimates\n+    while (blocknum < 465) {\n         for (int j = 0; j < 10; j++) { // For each fee/pri multiple\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n@@ -177,7 +182,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n         block.clear();\n     }\n-    for (int i = 1; i < 9; i++) {\n+    for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }"
      }
    ]
  }
]