jgarzik,2015-03-11T13:52:09Z,"What is a good way to test this in isolation, sans autoprune?\n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-78266182,78266182,
sdaftuar,2015-03-11T19:52:46Z,"I don't know of a great answer to that question...  I have been separately working on creating a python p2p framework for testing, and I have a test coded up in that framework that exercises this code for blocks received on the network (I manually tested the -reindex case of reading blocks from disk).  If you'd like to take a look, you can see it in my repo at:\n\nhttps://github.com/sdaftuar/bitco",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-78357016,78357016,
sipa,2015-03-12T13:14:27Z,"Concept ACK. I think it should be safe to even never process unrequested blocks, but things like @TheBlueMatt's fast relayer would probably stop working without it.\n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-78476572,78476572,
sdaftuar,2015-03-12T16:02:28Z,Fixed to re-include the BLOCK_HAVE_DATA check as well.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-78510610,78510610,
spinza,2015-03-25T10:39:06Z,@sipa If the relayer is whitelisted it should still work?  I see this treats blocks from whitelisted peers as if they were requested.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-85976773,85976773,
TheBlueMatt,2015-03-26T10:48:47Z,Is there no better way to check if we would want to request this block before we just ignore it? It seems to me that it is not ideal that we would jsut ignore data we get from a peer because they're using a /very/ loose interpretation of the protocol.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86449470,86449470,
sdaftuar,2015-03-26T17:20:27Z,"@TheBlueMatt I've thought about that a bit; I was concerned about that as well.  I believe the test we'd like to perform is whether the block we're processing is on some headers chain that is further along than our tip -- if so, we should process it (because this is a block that we'd like to download).  The options I could think of to try calculating that, using our existing data structures, are:\",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86630759,86630759,
TheBlueMatt,2015-03-26T22:39:30Z,"What about just connecting if it happens to be a logical next block on our current tip? It's a simple heuristic and would work for one common ""loose interpretation"" that you see in mining clients/servers/the relay network. More generally, if the peer is making a ""loose interpretation"", there are no guarantees it has a sane header chain, so maybe it's not worth the complexity there.\n\nOn March 26,",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86743016,86743016,
sdaftuar,2015-03-26T22:55:14Z,"Unless I'm misunderstanding you, this code does do that -- this does accept an unrequested, non-duplicate block if it has more work than our tip.  So in particular a new block that builds on the tip would be processed, even if unrequested.\n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86746229,86746229,
sdaftuar,2015-03-26T22:57:56Z,Also I pushed up a commit which rewrites the AcceptBlock code as @gavinandresen suggested -- I can squash if this looks good.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86747137,86747137,
TheBlueMatt,2015-03-26T23:08:01Z,"Heh, oops, I saw that code and looked right through it :/\n\nOn March 26, 2015 6:55:22 PM EDT, Suhas Daftuar notifications@github.com wrote:\n\n> Unless I'm misunderstanding you, this code does do that -- this does\n> accept an unrequested, non-duplicate block if it has more work than our\n> tip.  So in particular a new block that builds on the tip would be\n> processed, even if unrequested.\n> \n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-86749758,86749758,
sdaftuar,2015-03-31T19:10:10Z,Squashed the second commit\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-88211934,88211934,
sdaftuar,2015-04-09T14:03:59Z,"I am not sure how to proceed regarding the return value in AcceptBlock; if we return state.Invalid or state.DoS (I think it does make sense to ban in the case of an unrequested block with too little work), then the code in ProcessMessages would generate a reject message, which could be inconsistent with BIP 61, if I am reading this correctly:\n\n> Note: blocks that are not part of the server's ide",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-91241911,91241911,
sdaftuar,2015-04-09T18:29:58Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-91319713,91319713,
sdaftuar,2015-04-13T16:19:39Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-92414774,92414774,
sdaftuar,2015-04-24T14:04:44Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-95943627,95943627,
sipa,2015-04-27T13:32:34Z,Lightly-tested ACK\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-96653160,96653160,
sdaftuar,2015-05-04T15:23:11Z,Rebased off master and added a p2p regression test that exercises this logic.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-98751222,98751222,
gavinandresen,2015-05-13T14:21:23Z,Tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-101683505,101683505,
sdaftuar,2015-05-21T13:51:53Z,"@laanwj That sounds reasonable, thanks for reviewing; I've pushed a commit that addresses, I can squash if this looks good.\n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-104283580,104283580,
laanwj,2015-05-21T14:57:16Z,"Looks good to me.\nTested ACK (code reviewed, synced up to block 320700 with #5875 and #5927)\n",https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-104308724,104308724,
sdaftuar,2015-05-21T15:09:49Z,Squashed back down to two commits.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-104313686,104313686,
sdaftuar,2015-06-02T18:24:42Z,This needed rebasing due to the restructuring of the rpc-tests directory.\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-108043792,108043792,
laanwj,2015-06-03T14:25:09Z,Backported to 0.11 as 304892fc03b11bf04286619d2a6fe0ba99ee41fc 2edec4fe68c5fe0fefb4c0561e8353462bb439bc\n,https://github.com/bitcoin/bitcoin/pull/5875#issuecomment-108452114,108452114,
sipa,2015-03-12T13:08:41Z,I think the BLOCK_HAVE_DATA test can remain here: there's no point storing a block for which we already have the data.\n,https://github.com/bitcoin/bitcoin/pull/5875#discussion_r26299197,26299197,src/main.cpp
gavinandresen,2015-03-18T18:27:39Z,Can this be rewritten to make the logic clearer?  Something like:\n\n```\nbool fAlreadyHave = (pindex->nStatus & BLOCK_HAVE_DATA);\nbool fHasMoreWork = (pindex->nChainWork > chainActive.Tip()->nChainWork);\n\nif (fAlreadyHave) return true;\nif (!fRequested) { // If we didn't ask for it:\n   if (pindex->nTx != 0) return true; <-- what is this condition?\n   if (!fHasMoreWork) return true; // don't ,https://github.com/bitcoin/bitcoin/pull/5875#discussion_r26692454,26692454,src/main.cpp
sipa,2015-04-08T17:06:27Z,Perhaps use CBlockIndexWorkComparator?\n,https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27990381,27990381,src/main.cpp
sipa,2015-04-08T17:08:43Z,"I think we may want to return false and an error state, so it can be reported etc?\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27990585,27990585,src/main.cpp
sipa,2015-04-08T17:18:55Z,"""fRequested"" is maybe a bit confusing; it's hard to argue that blocks loaded from external storage are by definition 'requested'. Perhaps call it 'fForceProcessing' or something?\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27991491,27991491,src/main.cpp
sipa,2015-04-08T17:19:43Z,I missed the comments in the header definition about it. Feel free to ignore.\n,https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27991559,27991559,src/main.cpp
sdaftuar,2015-04-08T18:06:57Z,"Ah, I wasn't sure about that -- since we were previously returning true on a duplicate block, I just kept the behavior the same. \n\nI didn't think we should add ban points to the peer serving such a block, because it could be that we had requested this block from that peer, and some other oddly-behaving peer on the network (perhaps the relay node or some other whitelisted peer) happened to shove ",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27996390,27996390,src/main.cpp
sdaftuar,2015-04-08T18:24:15Z,"Or maybe some kind of ban score is called for in the last case, where we get an unrequested new block with too little work -- I'm not coming up with any scenarios where that could result from legitimate behavior.  Perhaps this case is worthy of an immediate ban?\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r27998194,27998194,src/main.cpp
sdaftuar,2015-04-08T19:04:44Z,"Looks like we can't use that, because the nSequenceId in the CBlockIndex entry isn't set until the block is actually processed (in ReceivedBlockTransactions). Since it's initialized to zero when we create the entry, if it has the same work as chainActive.Tip(), then `CBlockIndexWorkComparator()(chainActive.Tip(), pindex)` will return true due to the not-yet-set nSequenceId.\n\nIf pindex has the sa",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r28002350,28002350,src/main.cpp
sipa,2015-04-08T19:28:28Z,"I would either set an error condition (with or without ban), and returnsl\nfalse; or return true. Just logging and returning false may break some\nassumptions. You can keep things as is now, but leave the comment about\nbetter dealing with duplicates then.\n\nYou're right about nSequenceId, but I would like to only have a single\nplace in the code for comparing/ordering potential blocks. Anyway, l",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r28004251,28004251,src/main.cpp
sdaftuar,2015-05-04T15:20:00Z,"On further thought, I think I should remove this line.\n\nInitially, I had removed the `BLOCK_HAVE_DATA` check, so this line would have been needed to keep us from reprocessing blocks that are on disk.  Now that the `BLOCK_HAVE_DATA` check is back, this line would only meaningfully trigger if we were to somehow prune a block that has more work than `chainActive.Tip()`.  That shouldn't ever really ",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r29592996,29592996,src/main.cpp
sipa,2015-05-05T13:08:40Z,"So this is a non-requested, pruned block, which somehow has more work than the tip? I would ignore it. A forced-pushed block should only occur because the peer does not know we already knew about the block, but it seems we do, so I think it's our responsibility to request it if necessary.\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r29665936,29665936,src/main.cpp
sdaftuar,2015-05-05T13:31:30Z,"Ok, will leave as is.\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r29667800,29667800,src/main.cpp
laanwj,2015-05-21T10:07:59Z,"nit: Instead of this long line, I'd prefer to see this written out explicitly, especially so that the MarkBlockAsReceived action doesn't get lost in the noise:\n\n``` c++\nfRequested |= MarkBlockAsReceived(pblock->GetHash());\n// Treat all whitelisted peers' blocks as having been requested.\nif (pfrom)\n    fRequested |= pfrom->fWhitelisted;\n```\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30788633,30788633,src/main.cpp
laanwj,2015-05-21T10:14:29Z,"Or maybe even better (as I don't think the whitelisting policy belongs in AcceptBlock, but in networking code): remove the pfrom check here, move the whitelisted to the call site in `ProcessMessage` - which is the only one where it matters:\n\n``` patch\n- ProcessNewBlock(state, pfrom, &block, false, NULL);\n+ // Treat all whitelisted peers' blocks as having been requested.\n+ ProcessNewBlock(stat",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30789068,30789068,src/main.cpp
jtimon,2015-05-22T00:01:40Z,"Since you're changing ProcessNewBlock and AcceptBlock, do you mind to also pass const CChainParams& chainparams to them?\nIf you do it like in https://github.com/jtimon/bitcoin/commit/4868fb0a8912e6176ee886b974c74cf3ccf1ebf8#diff-e8db9b851adc2422aadfffca88f14c91L400 and https://github.com/jtimon/bitcoin/commit/6380f721c65d10c3797544875d396a9c36d71318#diff-e8db9b851adc2422aadfffca88f14c91L169 it wi",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30860279,30860279,src/main.h
sdaftuar,2015-05-24T10:03:13Z,"Apologies if I'm misunderstanding, but I think this would be an unrelated change to this pull?  I'd like to see this merged in time for 0.11 (I think this behavior change should occur at the same time as pruning), so I'd prefer to limit changes to those that are strictly necessary to support this fix.\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30951476,30951476,src/main.h
jtimon,2015-05-24T16:29:08Z,"A couple of trivial fixup! commits that don't change behaviour in any way shouldn't delay getting this merged and would make history cleaner by avoiding changing them before (in which case this would be forced to rebase to solve the conflict) or after, since they can be squashed just before merging. Don't feel forced to do it, it would just make this PR nicer.\n",https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30953622,30953622,src/main.h
jtimon,2015-05-24T16:31:28Z,Remember that the total diff would be similar since you're already touching the same lines that would need to be touched for this. \n,https://github.com/bitcoin/bitcoin/pull/5875#discussion_r30953644,30953644,src/main.h
