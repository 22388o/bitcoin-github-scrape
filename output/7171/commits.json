[
  {
    "sha": "2f601d215da1683ae99ab9973219044c32fa2093",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjYwMWQyMTVkYTE2ODNhZTk5YWI5OTczMjE5MDQ0YzMyZmEyMDkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-04T12:10:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-04T12:15:59Z"
      },
      "message": "test: remove necessity to call create_callback_map\n\nRemove necessity to call create_callback_map (as well as the function\nitself) from the Python P2P test framework. Invoke the appropriate\nmethods directly.\n\n- Easy to forget to call it and wonder why it doesn't work\n- Simplifies the code\n- This makes it easier to handle new messages in subclasses",
      "tree": {
        "sha": "041242aabe7b554daa3a388bbed67a80c4600656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/041242aabe7b554daa3a388bbed67a80c4600656"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f601d215da1683ae99ab9973219044c32fa2093",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f601d215da1683ae99ab9973219044c32fa2093",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f601d215da1683ae99ab9973219044c32fa2093",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f601d215da1683ae99ab9973219044c32fa2093/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "792259278e4f2e43d7e09f89335ed80979449b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/792259278e4f2e43d7e09f89335ed80979449b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/792259278e4f2e43d7e09f89335ed80979449b1d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 2,
      "deletions": 32
    },
    "files": [
      {
        "sha": "651b01f18a4711b1dacc8b9e7408fbc896e1be48",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -47,10 +47,7 @@ implements the test logic.\n * ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n a callback class that derives from ```NodeConnCB``` and pass that to the\n ```NodeConn``` object, your code will receive the appropriate callbacks when\n-events of interest arrive.  NOTE: be sure to call\n-```self.create_callback_map()``` in your derived classes' ```__init__```\n-function, so that the correct mappings are set up between p2p messages and your\n-callback functions.\n+events of interest arrive.\n \n * You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n different ones to each -- whatever makes the most sense for your test."
      },
      {
        "sha": "1a9ae480abffd77fad8e7a8620c7b2329f7bf631",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -34,7 +34,6 @@ def on_close(self, conn):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n         self.log = logging.getLogger(\"BlockRelayTest\")\n-        self.create_callback_map()\n \n     def add_new_connection(self, connection):\n         self.connection = connection"
      },
      {
        "sha": "249663779c3c9e488fd92ccb518b437967411048",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -25,7 +25,6 @@\n class TestNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "23872d8494a7c3d310c00532358be2cfb4357259",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -62,7 +62,6 @@\n class TestNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "e6e26dbce3c82820b5c0632763789fc234e53a54",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -70,7 +70,6 @@\n class BaseNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.last_inv = None\n         self.last_headers = None"
      },
      {
        "sha": "9444424dcf633e8303e8d1893d92b4f0df26104a",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -45,7 +45,6 @@ class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.conn = None\n         self.bestblockhash = None\n         self.block_store = block_store"
      },
      {
        "sha": "9d0fb713a13925f274d0b853d7a08c98156c93d8",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f601d215da1683ae99ab9973219044c32fa2093/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=2f601d215da1683ae99ab9973219044c32fa2093",
        "patch": "@@ -1015,32 +1015,10 @@ def wait_for_verack(self):\n                     return\n             time.sleep(0.05)\n \n-    # Derived classes should call this function once to set the message map\n-    # which associates the derived classes' functions to incoming messages\n-    def create_callback_map(self):\n-        self.cbmap = {\n-            \"version\": self.on_version,\n-            \"verack\": self.on_verack,\n-            \"addr\": self.on_addr,\n-            \"alert\": self.on_alert,\n-            \"inv\": self.on_inv,\n-            \"getdata\": self.on_getdata,\n-            \"getblocks\": self.on_getblocks,\n-            \"tx\": self.on_tx,\n-            \"block\": self.on_block,\n-            \"getaddr\": self.on_getaddr,\n-            \"ping\": self.on_ping,\n-            \"pong\": self.on_pong,\n-            \"headers\": self.on_headers,\n-            \"getheaders\": self.on_getheaders,\n-            \"reject\": self.on_reject,\n-            \"mempool\": self.on_mempool\n-        }\n-\n     def deliver(self, conn, message):\n         with mininode_lock:\n             try:\n-                self.cbmap[message.command](conn, message)\n+                getattr(self, 'on_' + message.command)(conn, message)\n             except:\n                 print \"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0])"
      }
    ]
  }
]