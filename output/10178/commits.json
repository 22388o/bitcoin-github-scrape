[
  {
    "sha": "d89f8adf256727915346bd564e9c92bee094be36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODlmOGFkZjI1NjcyNzkxNTM0NmJkNTY0ZTljOTJiZWUwOTRiZTM2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T21:01:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-10T20:20:12Z"
      },
      "message": "Make DisconnectBlock and ConnectBlock static in validation.cpp",
      "tree": {
        "sha": "d6a088700c081b7811d51b1e1f6591b2e0dc8f93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a088700c081b7811d51b1e1f6591b2e0dc8f93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d89f8adf256727915346bd564e9c92bee094be36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89f8adf256727915346bd564e9c92bee094be36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d89f8adf256727915346bd564e9c92bee094be36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89f8adf256727915346bd564e9c92bee094be36/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67023e9004ba843218bee16bc821e955faf0d394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67023e9004ba843218bee16bc821e955faf0d394",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67023e9004ba843218bee16bc821e955faf0d394"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 10,
      "deletions": 15
    },
    "files": [
      {
        "sha": "97ccd467c53c03c7a8b7297f8e15d4d1d7767bb2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89f8adf256727915346bd564e9c92bee094be36/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89f8adf256727915346bd564e9c92bee094be36/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d89f8adf256727915346bd564e9c92bee094be36",
        "patch": "@@ -1524,7 +1524,11 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     return fClean;\n }\n \n-bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n+ *  will be true if no problems were found. Otherwise, the return value will be false in case\n+ *  of problems. Note that in any case, coins may be modified. */\n+static bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -1677,8 +1681,11 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+/** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n+ *  can fail if those validity checks fail (among other reasons). */\n+static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);"
      },
      {
        "sha": "51ea18722cf64e21a65a01726e30f3f2b3a9f07c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89f8adf256727915346bd564e9c92bee094be36/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89f8adf256727915346bd564e9c92bee094be36/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d89f8adf256727915346bd564e9c92bee094be36",
        "patch": "@@ -483,18 +483,6 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n-/** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n- *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n- *  can fail if those validity checks fail (among other reasons). */\n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins,\n-                  const CChainParams& chainparams, bool fJustCheck = false);\n-\n-/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n- *  will be true if no problems were found. Otherwise, the return value will be false in case\n- *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      }
    ]
  },
  {
    "sha": "9fececb2cbabc52cc375b84bf840fac018cc8121",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmVjZWNiMmNiYWJjNTJjYzM3NWI4NGJmODQwZmFjMDE4Y2M4MTIx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T21:44:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-13T14:36:21Z"
      },
      "message": "Remove CValidationInterface::UpdatedTransaction\n\nThis removes another callback from block connection logic, making it\neasier to reason about the wallet-RPCs-returns-stale-info issue.\n\nUpdatedTransaction was previously used by the GUI to display\ncoinbase transactions only after they have a block built on top of\nthem. This worked fine for in most cases, but only worked due to a\ncorner case if the user received a coinbase payout in a block\nimmediately prior to restart. In that case, the normal process of\ncaching the most recent coinbase transaction's hash would not work,\nand instead it would only work because of the on-load -checkblocks\ncalling DisconnectBlock and ConnectBlock on the current tip.\n\nIn order to make this more robust, a full mapWallet loop after the\nfirst block which is connected after restart was added.",
      "tree": {
        "sha": "63e3bda7949b4168b47a219f5fae6bd2d636c32d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63e3bda7949b4168b47a219f5fae6bd2d636c32d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fececb2cbabc52cc375b84bf840fac018cc8121",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fececb2cbabc52cc375b84bf840fac018cc8121",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fececb2cbabc52cc375b84bf840fac018cc8121",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fececb2cbabc52cc375b84bf840fac018cc8121/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d89f8adf256727915346bd564e9c92bee094be36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89f8adf256727915346bd564e9c92bee094be36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d89f8adf256727915346bd564e9c92bee094be36"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 31,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6ae87c683e15db09ba306da268a7c95206177dac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9fececb2cbabc52cc375b84bf840fac018cc8121",
        "patch": "@@ -1924,12 +1924,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001);\n \n-    // Watch for changes to the previous coinbase transaction.\n-    static uint256 hashPrevBestCoinBase;\n-    GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n-    hashPrevBestCoinBase = block.vtx[0]->GetHash();\n-\n-\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001);\n "
      },
      {
        "sha": "46d7c9b3295026331a2c595ea3994a8bbf41706b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=9fececb2cbabc52cc375b84bf840fac018cc8121",
        "patch": "@@ -17,7 +17,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -32,7 +31,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n@@ -46,7 +44,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.TransactionAddedToMempool.disconnect_all_slots();\n     g_signals.BlockConnected.disconnect_all_slots();\n     g_signals.BlockDisconnected.disconnect_all_slots();"
      },
      {
        "sha": "460aecf243fa25fa7e3f6f6b7d191d6286ff4b2c",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fececb2cbabc52cc375b84bf840fac018cc8121/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=9fececb2cbabc52cc375b84bf840fac018cc8121",
        "patch": "@@ -37,7 +37,6 @@ class CValidationInterface {\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n@@ -60,8 +59,6 @@ struct CMainSignals {\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n     /** Notifies listeners of a block being disconnected */\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     /** Notifies listeners about an inventory item being seen on the network. */"
      },
      {
        "sha": "e9d23e459b628a422fa136641bb6d0baf8793de2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 11,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fececb2cbabc52cc375b84bf840fac018cc8121/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fececb2cbabc52cc375b84bf840fac018cc8121/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9fececb2cbabc52cc375b84bf840fac018cc8121",
        "patch": "@@ -1155,6 +1155,33 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n     }\n+\n+    // The GUI expects a NotifyTransactionChanged when a coinbase tx\n+    // which is in our wallet moves from in-the-best-block to\n+    // 2-confirmations (as it only displays them at that time).\n+    // We do that here.\n+    if (hashPrevBestCoinbase.IsNull()) {\n+        // Immediately after restart we have no idea what the coinbase\n+        // transaction from the previous block is.\n+        // For correctness we scan over the entire wallet, looking for\n+        // the previous block's coinbase, just in case it is ours, so\n+        // that we can notify the UI that it should now be displayed.\n+        if (pindex->pprev) {\n+            for (const std::pair<uint256, CWalletTx>& p : mapWallet) {\n+                if (p.second.IsCoinBase() && p.second.hashBlock == pindex->pprev->GetBlockHash()) {\n+                    NotifyTransactionChanged(this, p.first, CT_UPDATED);\n+                    break;\n+                }\n+            }\n+        }\n+    } else {\n+        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashPrevBestCoinbase);\n+        if (mi != mapWallet.end()) {\n+            NotifyTransactionChanged(this, hashPrevBestCoinbase, CT_UPDATED);\n+        }\n+    }\n+\n+    hashPrevBestCoinbase = pblock->vtx[0]->GetHash();\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n@@ -3386,17 +3413,6 @@ void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n     }\n }\n \n-void CWallet::UpdatedTransaction(const uint256 &hashTx)\n-{\n-    {\n-        LOCK(cs_wallet);\n-        // Only notify UI if this transaction is in this wallet\n-        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);\n-        if (mi != mapWallet.end())\n-            NotifyTransactionChanged(this, hashTx, CT_UPDATED);\n-    }\n-}\n-\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "381b570872f39b4ee59d0ece0c76fdff84ce42cb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fececb2cbabc52cc375b84bf840fac018cc8121/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fececb2cbabc52cc375b84bf840fac018cc8121/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9fececb2cbabc52cc375b84bf840fac018cc8121",
        "patch": "@@ -685,6 +685,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override;\n \n+    // Used to NotifyTransactionChanged of the previous block's coinbase when\n+    // the next block comes in\n+    uint256 hashPrevBestCoinbase;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -950,8 +954,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx) override;\n-\n     void Inventory(const uint256 &hash) override\n     {\n         {"
      }
    ]
  }
]