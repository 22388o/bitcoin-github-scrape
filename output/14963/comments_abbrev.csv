DrahtBot,2018-12-15T00:27:33Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#11652](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11652.html) (Add missing locks: validation.cpp + related",https://github.com/bitcoin/bitcoin/pull/14963#issuecomment-447517912,447517912,
MarcoFalke,2018-12-17T16:17:58Z,Fixed up some of the language. Any suggestions for the pull request subject line?,https://github.com/bitcoin/bitcoin/pull/14963#issuecomment-447903209,447903209,
promag,2018-12-17T16:26:41Z,"I think the most important change is ```mempool: Add missing locks to `cs_main` ```, the remaining change is a consequence of that.\n\nCould also say:\n - only tests are affected\n - fix related annotations and improve documentation",https://github.com/bitcoin/bitcoin/pull/14963#issuecomment-447906421,447906421,
laanwj,2018-12-19T10:01:53Z,ACK,https://github.com/bitcoin/bitcoin/pull/14963#issuecomment-448538104,448538104,
practicalswift,2019-01-05T16:36:53Z,utACK fa5e373365b8e88fc9894f53f618d3e89f1bec14 modulo nits,https://github.com/bitcoin/bitcoin/pull/14963#issuecomment-451669782,451669782,
ch4ot1c,2018-12-15T02:56:37Z,`rading it` -> `reading from it`,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r241935565,241935565,src/validation.cpp
ch4ot1c,2018-12-15T02:57:02Z,`such as` -> `in cases such as`?,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r241935575,241935575,src/validation.cpp
promag,2018-12-15T14:53:20Z,`... should be locked before in addition ...`,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r241951769,241951769,src/txmempool.h
promag,2018-12-15T14:53:34Z,`Recursive mutex ...`,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r241951778,241951778,src/txmempool.h
promag,2018-12-15T14:54:30Z,`Recursive mutex to ...`,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r241951799,241951799,src/validation.cpp
MarcoFalke,2018-12-17T16:15:31Z,Recursive is already clear from the variable type and I plan to make it non-recursive,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242212328,242212328,src/txmempool.h
ryanofsky,2018-12-17T17:13:23Z,"In commit ""doc: Add comment to cs_main and mempool::cs"" (fa64bb42e97b6c6c58e83badca88d386f99dbcd2)\n\nWould suggest moving the test and bench changes in this commit into a different commit, since they aren't really what you'd normally think of as documentation changes.",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242236689,242236689,src/bench/mempool_eviction.cpp
ryanofsky,2018-12-17T18:39:05Z,"In commit ""doc: Add comment to cs_main and mempool::cs"" (fa64bb42e97b6c6c58e83badca88d386f99dbcd2)\n\nI would say ""may also need to be locked"" instead of ""must also be locked"", and add ""see CTxMemPool::cs comment for details.""",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242267088,242267088,src/validation.cpp
ryanofsky,2018-12-17T18:42:17Z,"In commit ""doc: Add comment to cs_main and mempool::cs"" (fa64bb42e97b6c6c58e83badca88d386f99dbcd2)\n\nI think making a comparison to read/write locks makes this more confusing than it needs to be. Read locks normally are shared, not exclusive. And the requirement to lock `cs_main` for write access seems too broad, and doesn't give a justification.\n\nI would suggest a comment that just says wh",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242268194,242268194,src/txmempool.h
MarcoFalke,2018-12-17T19:46:45Z,Done,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242291099,242291099,src/validation.cpp
MarcoFalke,2018-12-17T19:46:57Z,Done,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242291161,242291161,src/bench/mempool_eviction.cpp
MarcoFalke,2018-12-17T19:47:55Z,"It could also be used to guard other members, like prioritization data, no?",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242291441,242291441,src/txmempool.h
MarcoFalke,2018-12-17T19:48:01Z,Otherwise done,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242291477,242291477,src/txmempool.h
ryanofsky,2018-12-19T18:38:30Z,"This comment comes from https://github.com/bitcoin/bitcoin/pull/14963#discussion_r242268194 and I think it is still ok as a description of how the code currently works. But talking to @morcos, @sdaftuar, and you Monday, it sounds like this is not actually how things are intended to work. After that conversation, I think the following might be more accurate:\n\n```c++\n/**\n * This mutex needs ",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r243029441,243029441,src/txmempool.h
ryanofsky,2018-12-19T18:39:52Z,"Should say ""may also need to be locked"" instead of ""may also be locked"".",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r243029879,243029879,src/validation.cpp
MarcoFalke,2018-12-19T19:11:26Z,"Wow, excellent write-up. Will pull that in to replace my clumsy explanation",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r243040235,243040235,src/txmempool.h
practicalswift,2019-01-05T16:36:06Z,Changer order of `cs` and `cs_main` here to make locking order consistent?,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r245482016,245482016,src/txmempool.h
practicalswift,2019-01-05T16:36:13Z,Changer order of `cs` and `cs_main` here to make locking order consistent?,https://github.com/bitcoin/bitcoin/pull/14963#discussion_r245482021,245482021,src/txmempool.h
sdaftuar,2019-01-15T18:19:04Z,"We call the ""transaction pool"" the ""mempool"" in so many places in this file, I find the usage of ""transaction pool"" to be odd...",https://github.com/bitcoin/bitcoin/pull/14963#discussion_r248006724,248006724,src/validation.cpp
