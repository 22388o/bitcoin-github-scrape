[
  {
    "sha": "fabecce71909c984504c21fa05f91d5f1b471e8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJlY2NlNzE5MDljOTg0NTA0YzIxZmEwNWY5MWQ1ZjFiNDcxZThj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-20T09:16:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-20T14:11:21Z"
      },
      "message": "net: Treat raw message bytes as uint8_t",
      "tree": {
        "sha": "189a31d8bfd4c649df69542d783e4d702d21baac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/189a31d8bfd4c649df69542d783e4d702d21baac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabecce71909c984504c21fa05f91d5f1b471e8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhu/gwArLBr0VQF6L2BnSt/wYLHkKRYgp593GNlx4EgL5qm3J+eNcU9ry1fazrF\ng0jNoE3FiBBLZhtnK3MagonyIj1Dk85oqF30ZWXUjUZ6tWXLnpr++MAeA5ujeSx8\ntEatBAxpbWYTsPtZZ8srJ+Fk+dk3jRmJlADPYtAjkyVBUx/W2Rt5xj5og/NioDth\nw5Q8yR8W63gsYyHkxswAPmSUu7BoDqxuNZx6vOJH9hh3ZxgzhOc1FoDZRclMiE1f\nRRQCGSC9xyUYiZ48mYXjcpGQPuWnxmycLwZjKJ9H5/qBpAq31Um/GwFU2dwJhzwm\nPZ0lDfzD/unV7F2rpwA/wf2U+S3pbMOzhXEcfj2Qo6WAOwKYIDZBPsSYlWD8EhCC\noqfQxCvbmscB2aRkhDvTA33sRKXwbdc4W0YtDLV3E7tVglhPTm4Z7jh/whl7dgze\n1ZH5Z5Qy7J6O1f45bJfnELwg4ob3Gw6QGPqncxnEd5J/RJf6LzHZskKllx7yk7lz\nHjqiFqQU\n=sjEl\n-----END PGP SIGNATURE-----",
        "payload": "tree 189a31d8bfd4c649df69542d783e4d702d21baac\nparent fdd068507d2694137d72638d87ea961e6f16a753\nauthor MarcoFalke <falke.marco@gmail.com> 1605863770 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1605881481 +0100\n\nnet: Treat raw message bytes as uint8_t\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabecce71909c984504c21fa05f91d5f1b471e8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabecce71909c984504c21fa05f91d5f1b471e8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabecce71909c984504c21fa05f91d5f1b471e8c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdd068507d2694137d72638d87ea961e6f16a753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdd068507d2694137d72638d87ea961e6f16a753",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdd068507d2694137d72638d87ea961e6f16a753"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9c6d7b63757dee147a7d7ad144369413f9d626ce",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -629,7 +629,7 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n }\n #undef X\n \n-bool CNode::ReceiveMsgBytes(Span<const char> msg_bytes, bool& complete)\n+bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n {\n     complete = false;\n     const auto time = GetTime<std::chrono::microseconds>();\n@@ -673,7 +673,7 @@ bool CNode::ReceiveMsgBytes(Span<const char> msg_bytes, bool& complete)\n     return true;\n }\n \n-int V1TransportDeserializer::readHeader(Span<const char> msg_bytes)\n+int V1TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n {\n     // copy data to temporary parsing buffer\n     unsigned int nRemaining = CMessageHeader::HEADER_SIZE - nHdrPos;\n@@ -713,7 +713,7 @@ int V1TransportDeserializer::readHeader(Span<const char> msg_bytes)\n     return nCopy;\n }\n \n-int V1TransportDeserializer::readData(Span<const char> msg_bytes)\n+int V1TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n {\n     unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n     unsigned int nCopy = std::min<unsigned int>(nRemaining, msg_bytes.size());\n@@ -723,7 +723,7 @@ int V1TransportDeserializer::readData(Span<const char> msg_bytes)\n         vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n     }\n \n-    hasher.Write(MakeUCharSpan(msg_bytes.first(nCopy)));\n+    hasher.Write(msg_bytes.first(nCopy));\n     memcpy(&vRecv[nDataPos], msg_bytes.data(), nCopy);\n     nDataPos += nCopy;\n \n@@ -1463,18 +1463,18 @@ void CConnman::SocketHandler()\n         if (recvSet || errorSet)\n         {\n             // typical socket buffer is 8K-64K\n-            char pchBuf[0x10000];\n+            uint8_t pchBuf[0x10000];\n             int nBytes = 0;\n             {\n                 LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                nBytes = recv(pnode->hSocket, (char*)pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n             }\n             if (nBytes > 0)\n             {\n                 bool notify = false;\n-                if (!pnode->ReceiveMsgBytes(Span<const char>(pchBuf, nBytes), notify))\n+                if (!pnode->ReceiveMsgBytes(Span<const uint8_t>(pchBuf, nBytes), notify))\n                     pnode->CloseSocketDisconnect();\n                 RecordBytesRecv(nBytes);\n                 if (notify) {"
      },
      {
        "sha": "fe7b72c920572cb414283b81b121456096d164f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -758,7 +758,7 @@ class TransportDeserializer {\n     // set the serialization context version\n     virtual void SetVersion(int version) = 0;\n     /** read and deserialize data, advances msg_bytes data pointer */\n-    virtual int Read(Span<const char>& msg_bytes) = 0;\n+    virtual int Read(Span<const uint8_t>& msg_bytes) = 0;\n     // decomposes a message from the context\n     virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n@@ -779,8 +779,8 @@ class V1TransportDeserializer final : public TransportDeserializer\n     unsigned int nDataPos;\n \n     const uint256& GetMessageHash() const;\n-    int readHeader(Span<const char> msg_bytes);\n-    int readData(Span<const char> msg_bytes);\n+    int readHeader(Span<const uint8_t> msg_bytes);\n+    int readData(Span<const uint8_t> msg_bytes);\n \n     void Reset() {\n         vRecv.clear();\n@@ -814,7 +814,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         hdrbuf.SetVersion(nVersionIn);\n         vRecv.SetVersion(nVersionIn);\n     }\n-    int Read(Span<const char>& msg_bytes) override\n+    int Read(Span<const uint8_t>& msg_bytes) override\n     {\n         int ret = in_data ? readData(msg_bytes) : readHeader(msg_bytes);\n         if (ret < 0) {\n@@ -1132,7 +1132,7 @@ class CNode\n      * @return  True if the peer should stay connected,\n      *          False if the peer should be disconnected from.\n      */\n-    bool ReceiveMsgBytes(Span<const char> msg_bytes, bool& complete);\n+    bool ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete);\n \n     void SetCommonVersion(int greatest_common_version)\n     {"
      },
      {
        "sha": "a0c8b7aac5a0f7c9aafa78e2406facb698b9e014",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -128,7 +128,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 11: {\n             const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             bool complete;\n-            node.ReceiveMsgBytes({(const char*)b.data(), b.size()}, complete);\n+            node.ReceiveMsgBytes(b, complete);\n             break;\n         }\n         }"
      },
      {
        "sha": "7a6236efac15884851c55b42067fcb06c3eee846",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -21,7 +21,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     // Construct deserializer, with a dummy NodeId\n     V1TransportDeserializer deserializer{Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n-    Span<const char> msg_bytes{(const char*)buffer.data(), buffer.size()};\n+    Span<const uint8_t> msg_bytes{buffer};\n     while (msg_bytes.size() > 0) {\n         const int handled = deserializer.Read(msg_bytes);\n         if (handled < 0) {"
      },
      {
        "sha": "847a490e03365dcadcfb869cf41280362c2fba0f",
        "filename": "src/test/util/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -7,7 +7,7 @@\n #include <chainparams.h>\n #include <net.h>\n \n-void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const char> msg_bytes, bool& complete) const\n+void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n {\n     assert(node.ReceiveMsgBytes(msg_bytes, complete));\n     if (complete) {\n@@ -29,11 +29,11 @@ void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const char> msg_bytes\n \n bool ConnmanTestMsg::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n {\n-    std::vector<unsigned char> ser_msg_header;\n+    std::vector<uint8_t> ser_msg_header;\n     node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n \n     bool complete;\n-    NodeReceiveMsgBytes(node, {(const char*)ser_msg_header.data(), ser_msg_header.size()}, complete);\n-    NodeReceiveMsgBytes(node, {(const char*)ser_msg.data.data(), ser_msg.data.size()}, complete);\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n     return complete;\n }"
      },
      {
        "sha": "1208e9276256027c9923d008ddc1ebfb138055c1",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabecce71909c984504c21fa05f91d5f1b471e8c/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=fabecce71909c984504c21fa05f91d5f1b471e8c",
        "patch": "@@ -25,7 +25,7 @@ struct ConnmanTestMsg : public CConnman {\n \n     void ProcessMessagesOnce(CNode& node) { m_msgproc->ProcessMessages(&node, flagInterruptMsgProc); }\n \n-    void NodeReceiveMsgBytes(CNode& node, Span<const char> msg_bytes, bool& complete) const;\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n \n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };"
      }
    ]
  }
]