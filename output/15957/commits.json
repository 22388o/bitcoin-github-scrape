[
  {
    "sha": "c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2VmNjNhNTJmMzA0YTYwMGZmZjFmOWM3Y2FhNWNiODA0ZDQxZDQz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-05-06T07:49:13Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-05-08T11:54:25Z"
      },
      "message": "Show loaded wallets as disabled in open menu instead of nothing",
      "tree": {
        "sha": "720fa0800e571b7354df0b31fa5230b1e65c0e4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/720fa0800e571b7354df0b31fa5230b1e65c0e4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3ef63a52f304a600fff1f9c7caa5cb804d41d43/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5ffe8d5155b21d0099259416436d09fc20d7017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ffe8d5155b21d0099259416436d09fc20d7017",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ffe8d5155b21d0099259416436d09fc20d7017"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ff66df376b1487f02e18c90d612bc066b81babb2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3ef63a52f304a600fff1f9c7caa5cb804d41d43/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3ef63a52f304a600fff1f9c7caa5cb804d41d43/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
        "patch": "@@ -370,9 +370,18 @@ void BitcoinGUI::createActions()\n         connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n         connect(m_open_wallet_action->menu(), &QMenu::aboutToShow, [this] {\n             m_open_wallet_action->menu()->clear();\n-            for (std::string path : m_wallet_controller->getWalletsAvailableToOpen()) {\n+            std::vector<std::string> available_wallets = m_wallet_controller->getWalletsAvailableToOpen();\n+            std::vector<std::string> wallets = m_node.listWalletDir();\n+            for (const auto& path : wallets) {\n                 QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n                 QAction* action = m_open_wallet_action->menu()->addAction(name);\n+\n+                if (std::find(available_wallets.begin(), available_wallets.end(), path) == available_wallets.end()) {\n+                    // This wallet is already loaded\n+                    action->setEnabled(false);\n+                    continue;\n+                }\n+\n                 connect(action, &QAction::triggered, [this, name, path] {\n                     OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n \n@@ -400,6 +409,10 @@ void BitcoinGUI::createActions()\n                     assert(invoked);\n                 });\n             }\n+            if (wallets.empty()) {\n+                QAction* action = m_open_wallet_action->menu()->addAction(tr(\"No wallets available\"));\n+                action->setEnabled(false);\n+            }\n         });\n         connect(m_close_wallet_action, &QAction::triggered, [this] {\n             m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);"
      }
    ]
  }
]