[
  {
    "sha": "482f852da65457eb2fbea6b259e7568133fb81c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODJmODUyZGE2NTQ1N2ViMmZiZWE2YjI1OWU3NTY4MTMzZmI4MWM0",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-31T11:38:23Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-31T11:38:23Z"
      },
      "message": "Implement NULLDUMMY softfork",
      "tree": {
        "sha": "db5babd2bac902f8dde5bd0f80730633c9dba700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db5babd2bac902f8dde5bd0f80730633c9dba700"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/482f852da65457eb2fbea6b259e7568133fb81c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482f852da65457eb2fbea6b259e7568133fb81c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/482f852da65457eb2fbea6b259e7568133fb81c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482f852da65457eb2fbea6b259e7568133fb81c4/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53f8f226bd1d627c4a6dec5862a1d4ea5a933e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53f8f226bd1d627c4a6dec5862a1d4ea5a933e45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53f8f226bd1d627c4a6dec5862a1d4ea5a933e45"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 150,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cf951fe175a2bafdb8886bf0f82b200de10a9d5d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/482f852da65457eb2fbea6b259e7568133fb81c4/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/482f852da65457eb2fbea6b259e7568133fb81c4/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=482f852da65457eb2fbea6b259e7568133fb81c4",
        "patch": "@@ -143,6 +143,7 @@\n     'importprunedfunds.py',\n     'signmessages.py',\n     'p2p-compactblocks.py',\n+    'nulldummy.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "eaed7a8c789705abc779db9a6d86e4b2ed48c8e3",
        "filename": "qa/rpc-tests/nulldummy.py",
        "status": "added",
        "additions": 148,
        "deletions": 0,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/482f852da65457eb2fbea6b259e7568133fb81c4/qa/rpc-tests/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/482f852da65457eb2fbea6b259e7568133fb81c4/qa/rpc-tests/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nulldummy.py?ref=482f852da65457eb2fbea6b259e7568133fb81c4",
        "patch": "@@ -0,0 +1,148 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.comptool import TestManager\n+from test_framework.script import CScript\n+from io import BytesIO\n+import time\n+\n+NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+\n+def trueDummy(tx):\n+    scriptSig = CScript(tx.vin[0].scriptSig)\n+    newscript = []\n+    for i in scriptSig:\n+        if (len(newscript) == 0):\n+            assert(len(i) == 0)\n+            newscript.append(b'\\x51')\n+        else:\n+            newscript.append(i)\n+    tx.vin[0].scriptSig = CScript(newscript)\n+    tx.rehash()\n+\n+'''\n+This test is meant to exercise NULLDUMMY softfork.\n+Connect to a single node.\n+Generate 2 blocks (save the coinbases for later).\n+Generate 427 more blocks.\n+[Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in the 430th block.\n+[Policy] Check that non-NULLDUMMY transactions are rejected before activation.\n+[Consensus] Check that the new NULLDUMMY rules are not enforced on the 431st block.\n+[Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n+'''\n+\n+class NULLDUMMYTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-walletprematurewitness']])\n+\n+    def run_test(self):\n+        self.address = self.nodes[0].getnewaddress()\n+        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])\n+        self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n+        self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n+\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.coinbase_blocks = self.nodes[0].generate(2) # Block 2\n+        coinbase_txid = []\n+        for i in self.coinbase_blocks:\n+            coinbase_txid.append(self.nodes[0].getblock(i)['tx'][0])\n+        self.nodes[0].generate(427) # Block 429\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        self.lastblockheight = 429\n+        self.lastblocktime = int(time.time()) + 429\n+\n+        print (\"Test 1: NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n+        test1txs = [self.create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, 49)]\n+        txid1 = self.tx_submit(self.nodes[0], test1txs[0])\n+        test1txs.append(self.create_transaction(self.nodes[0], txid1, self.ms_address, 48))\n+        txid2 = self.tx_submit(self.nodes[0], test1txs[1])\n+        test1txs.append(self.create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, 49))\n+        txid3 = self.tx_submit(self.nodes[0], test1txs[2])\n+        self.block_submit(self.nodes[0], test1txs, False, True)\n+\n+        print (\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n+        test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 48)\n+        trueDummy(test2tx)\n+        txid4 = self.tx_submit(self.nodes[0], test2tx, NULLDUMMY_ERROR)\n+\n+        print (\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n+        self.block_submit(self.nodes[0], [test2tx], False, True)\n+\n+        print (\"Test 4: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n+        test4tx = self.create_transaction(self.nodes[0], txid4, self.address, 47)\n+        test6txs=[CTransaction(test4tx)]\n+        trueDummy(test4tx)\n+        self.tx_submit(self.nodes[0], test4tx, NULLDUMMY_ERROR)\n+        self.block_submit(self.nodes[0], [test4tx])\n+\n+        print (\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n+        test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n+        test6txs.append(CTransaction(test5tx))\n+        test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n+        self.tx_submit(self.nodes[0], test5tx, NULLDUMMY_ERROR)\n+        self.block_submit(self.nodes[0], [test5tx], True)\n+\n+        print (\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")\n+        for i in test6txs:\n+            self.tx_submit(self.nodes[0], i)\n+        self.block_submit(self.nodes[0], test6txs, True, True)\n+\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+\n+    def tx_submit(self, node, tx, msg = \"\"):\n+        tx.rehash()\n+        try:\n+            node.sendrawtransaction(bytes_to_hex_str(tx.serialize_with_witness()), True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], msg)\n+        return tx.hash\n+\n+\n+    def block_submit(self, node, txs, witness = False, accept = False):\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+        if (accept):\n+            assert_equal(node.getbestblockhash(), block.hash)\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert_equal(node.getbestblockhash(), self.lastblockhash)\n+\n+if __name__ == '__main__':\n+    NULLDUMMYTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "7eb7194a3f0963550311f6490449f66796806a55",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/482f852da65457eb2fbea6b259e7568133fb81c4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/482f852da65457eb2fbea6b259e7568133fb81c4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=482f852da65457eb2fbea6b259e7568133fb81c4",
        "patch": "@@ -2387,6 +2387,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // Start enforcing WITNESS rules using versionbits logic.\n     if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n+        flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;"
      }
    ]
  }
]