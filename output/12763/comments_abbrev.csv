NicolasDorier,2018-03-23T09:36:06Z,"Concept ACK. This is very welcome. My block explorer only rely on `sendrawtransaction`.\nWould like a way to have my block explorer restrict itself at runtime to make the life of my users easier, but this might come later.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375594638,375594638,
instagibbs,2018-03-23T12:58:55Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375657069,375657069,
instagibbs,2018-03-23T12:59:32Z,@RHavar you may be interested?,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375657230,375657230,
randolf,2018-03-23T15:08:13Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375696178,375696178,
RHavar,2018-03-23T15:21:13Z,"@instagibbs  To be honest, I don't see it being that useful for me  (but I don't have any objections to it either)\n\nThe main advantage I can see from this change is that you could use the same bitcoin-core instance for multiple purposes, like where one only requires access to the bitcoin-related features, and the other might need wallet access. \n\nThat's probably more interesting for consum",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375700636,375700636,
instagibbs,2018-03-23T15:48:43Z,"@RHavar this prevents privkey dumps, as a first step at least",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375710123,375710123,
jonasschnelli,2018-03-25T13:41:50Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-375971459,375971459,
kallewoof,2018-03-27T15:09:58Z,Yeah it's probably better to check if `size() > 0` and to do default-no-access if so.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376561229,376561229,
JeremyRubin,2018-03-27T20:27:36Z,"@eklitzke \n\nIn the current scheme, a user by default has access to all RPCs to maintain backwards compatibility.\n\nOnce a file has specified that a user should have a whitelist, it defaults to everything being off.\n\nI agree this is not ideal, but don't have a great workaround.\n\nHere are two potential solutions:\n\nWe add:\n-rpcwhitelistenable=<rpc 1>,<rpc 2>\n-rpcwhitelistroot=<",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376663774,376663774,
sipa,2018-03-27T20:48:23Z,"~~~I'm not sure this approach is ideal; it makes administrators responsible for knowing the list of all RPCs and their potential effects.~~~\n\nEDIT: nevermind, that's a concern for blacklists, not whitelists.\n\n",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376670085,376670085,
eklitzke,2018-03-28T03:01:27Z,"@JeremyRubin I would add both. I guess my point is that if you need permissions at all you probably also want the ability to enable some kind of deny-by-default policy, to safeguard against a situation where you accidentally forget to lock down an account. You generally don't want to give your software engineers root access on production machines by default, and by the same token I don't think you",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376745091,376745091,
eklitzke,2018-03-28T03:20:49Z,"Second idea that's much more crazy/complex. I'll throw it out there though.\n\nYAML documents have a syntax to reference other elements, which are really useful for these kinds of things. You can construct a few objects in your config and reference them elsewhere, which allows you to come up with some pseduo-role system:\n\n```yaml\n---\npolicies:\n  # a default policy\n  - policy: &defaul",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-376748040,376748040,
JeremyRubin,2018-03-30T19:12:02Z,"@eklitzke did you check out the issue? The original proposal covered doing an inheritance scheme. @gmaxwell  suggested that we should avoid doing any fancy config file, in favor of just a simple list.\n\nI do think that this could get overly verbose (especially if you want to grant network multiple times), but in general the paradigm should be to configure applications to manage multiple small c",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-377599762,377599762,
JeremyRubin,2018-04-13T01:48:41Z,"I've updated this PR and rebased.\n\nThe current version has the following changes over the previous:\n\n- Strip whitespace out of rpc list\n- Set-Intersect conflicting whitelists (i.e., so it is equivalent to checking multiple whitelists)\n- If any rpcwhitelist is set, act as if all users are subject to whitelists unless rpcwhitelistdefault is set to 0. If rpcwhitelistdefault is set to 1 an",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-380995816,380995816,
kallewoof,2018-04-13T06:14:24Z,"LGTM. Checked code, utACK.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-381034728,381034728,
jimpo,2018-05-03T02:38:44Z,"I'm not really a fan of the `rpcwhitelistdefault` flag. I agree with the decision to provide backwards compatibility in the API by whitelisting everyone for everything if `-rpcwhitelist` is not set, but if it is, I think whitelists should be more explicit. Perhaps instead `-rpcwhitelist=USER` would whitelist USER for everything, whereas `-rpcwhitelist=USER:ACTION1,ACTION2` would whitelist a user f",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-386177700,386177700,
JeremyRubin,2018-05-07T06:08:04Z,"`-rpcwhitelist=USER` is currently a null list, and i think should remain that.\n\nWe could introduce a new flag, e.g. `rpcwhitelistallowall` if that's the desired ability.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-386966445,386966445,
laanwj,2018-05-30T13:28:43Z,"I've always been strongly against complex authorization schemes in bitcoind. A lot of extra **security critical** logic to maintain. I think the place for such things is a separate authorization proxy. This is more modular, more in line with ""software should do one thing well"", and it depends on what security system is required, nothing can accommodate every possible separation of privileges (see ",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-393161522,393161522,
promag,2018-05-30T13:34:23Z,"> The other detail (in a forthcoming patch) is that if rpcwhitelist is set multiple times for a single user, it should do the intersection of the specification (e.g., monotonically smaller whitelist) rather than the union. In cases where conflicting settings have been passed, it is safer to do less.\n\n@JeremyRubin lgtm.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-393163541,393163541,
JeremyRubin,2018-06-12T06:27:31Z,"Rebased and added documentation.\n\nStarted working on tests but got a little stuck with the current test framework -- the test classes assume access to the RPCs, which doesn't let me cover all of the modes of use for rpc whitelists.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-396479643,396479643,
gmaxwell,2018-06-18T22:33:45Z,"@RHavar  The thing you're interested in would almost just fit into this if there were RPCs to set spending velocity limits on wallets, and then just use this PR to deny the relevant clients from calling the interface to increase their limits.\n\nThe only gap I see with that is that is that it would be a per wallet not per rpc user limit.   In any case, having wallet velocity limits even that you",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-398216550,398216550,
JeremyRubin,2018-06-27T23:00:50Z,"Tagging @jnewbery for tips on best way to use the test framework here. The issue is that in order to test whitelists properly, I need to disable RPC access...\n\nShould I just write tests as a unit test (non-functional test)?",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-400856076,400856076,
MarcoFalke,2018-06-28T11:50:58Z,"> If any rpcwhitelist is set, act as if all users are subject to whitelists unless rpcwhitelistdefault is set to 0. If rpcwhitelistdefault is set to 1 and no rpcwhitelist is set, act as if all users are subject to whitelists.\n\nPlease update OP to reflect that.\n\n> Should I just write tests as a unit test (non-functional test)?\n\nWith regard to tests, I believe it is trivial to test the f",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-401008645,401008645,
jnewbery,2018-06-28T13:05:18Z,@MarcoFalke's test looks good. Will review fully once it's been included in this PR.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-401027411,401027411,
JeremyRubin,2018-06-28T19:04:12Z,"Those tests look fine, and are close to where I got stuck.\n\nCases missing\n-----\n\n* Easy to Add:\n\n  * Multiple RPC Whitelists specified, should intersect\n\n* Difficult:\n\n  * No whitelist specified for any user, rpcwhitelistdefault=1",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-401140339,401140339,
MarcoFalke,2018-06-30T11:16:25Z,">  Difficult:     No whitelist specified for any user, rpcwhitelistdefault=1\n\nIndeed not trivial. Options I see is to rework the test framework to fall back to rest if rpc is not available or, as you mentioned, write a unit test.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-401534587,401534587,
DrahtBot,2018-07-10T16:17:06Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-403881405,403881405,
MarcoFalke,2018-07-11T14:43:47Z,Merge conflict can probably be solved by a simple union merge.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-404195363,404195363,
MarcoFalke,2018-11-08T23:11:24Z,@JeremyRubin Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-437190339,437190339,
fanquake,2019-03-02T09:24:54Z,"Closing, leaving `Up for grabs`.",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-468903650,468903650,
JeremyRubin,2019-11-18T18:25:51Z,"Rebased -- old version exists at https://github.com/JeremyRubin/bitcoin/tree/whitelistrpc-backup.\n\nNot sure if github tracks rebases for closed prs...",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555145547,555145547,
ryanofsky,2019-11-18T18:35:43Z,"> Not sure if github tracks rebases for closed prs...\n\nIIRC after a PR is closed, the diff is no longer updated, and just will just show the changes at the time the PR was closed, no longer tracking the branch.\n\nAlso, if you push to the branch after closing the PR, reopening the PR is disabled until you revert back to the closing commit. (So in case you need to reopen this PR, you need to ",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555149628,555149628,
JeremyRubin,2019-11-18T18:44:22Z,That's kinda annoying because I don't think I can (as a non-owner or whatever) re-open a closed PR?,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555153285,555153285,
ryanofsky,2019-11-18T18:56:44Z,I believe you can reopen your own PRs as long as the branch tip doesn't change or as long as you force push back to the previous branch tip. You can also request maintainer to reopen. But even maintainers can't reopen a PR if the branch tip isn't the same as when it was closed. At least this is my understanding.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555158380,555158380,
JeremyRubin,2019-11-18T18:59:57Z,hmm that's not true here right now; it's on 8c45d93b0e7187dba81e7d493bdec8f6589fbf53 but I can't re-open. Maybe it's too old?,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555159726,555159726,
ryanofsky,2019-11-18T19:04:59Z,"Not sure, but I just noticed the reopen button was enabled for me so I clicked it. You could be able to close this if this was just a theoretical conversation, and you don't actually want it reopened :smiley: ",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555161857,555161857,
DrahtBot,2019-11-19T01:15:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16698](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16698.html) (Mempool: rework rebroadcast logic to improv",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-555285673,555285673,
emilengler,2019-11-20T16:36:33Z,"@JeremyRubin \nI've written a test #17536\nHope I did it correctly on with git, my first time I do a PR based on another :)",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-556089076,556089076,
JeremyRubin,2019-12-11T20:37:32Z,"Here's a squashed branch. I just squashed everything down; there was no need for any of the intermediate commits IMO.\n\nhttps://github.com/JeremyRubin/bitcoin/tree/whitelistrpc-squash-square\n\nIn the branch below, I left the `g_` nit un-squashed so as to make it easier to compare the hash to what you already ACKed:\n\nhttps://github.com/JeremyRubin/bitcoin/tree/whitelistrpc-squash\n\n\n",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-564722182,564722182,
MarcoFalke,2019-12-11T20:40:52Z,Force push is just fine,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-564723386,564723386,
JeremyRubin,2019-12-11T21:15:47Z,Done :+1: ,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-564736149,564736149,
MarcoFalke,2019-12-11T21:18:08Z,"re-ACK 7414d3820c833566b4f48c6c120a18bf53978c55 only change is adding g_ prefix and squash 🌦\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 7414d3820c833566b4f48c6c120a18bf53978c55 only change is adding g_ prefix and squash 🌦\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTz",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-564737038,564737038,
laanwj,2019-12-13T10:27:28Z,ACK 2081442c421cc4376e5d7839f68fbe7630e89103,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-565388337,565388337,
practicalswift,2019-12-14T17:43:05Z,"Users arriving at this PR looking to use `-rpcwhitelist` to restrict RPC access for non-trusted RPC users should be aware of this gotcha (due to [UniValue CVE-2019-18936](https://github.com/bitcoin/bitcoin/issues/17742)):\n\n```\n$ share/rpcauth/rpcauth.py u p\nString to be appended to bitcoin.conf:\nrpcauth=u:d7ca300b5aeceb73e9825068fc4496ef$166cbdedfe11c30a95c28d13b3383682825308d1069d347f97",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-565737486,565737486,
fanquake,2020-05-23T07:27:11Z,This has a release note in https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.20.0-Release-Notes-Draft.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-633000792,633000792,
Fonta1n3,2020-06-20T13:08:10Z,Is there anyway to disable specific rpc commands? ,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-646992505,646992505,
JeremyRubin,2020-06-20T17:33:34Z,You have to list out all the ones you want enabled. We don't provide specific disabling.,https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-647024785,647024785,
Fonta1n3,2020-09-03T13:36:53Z,"@JeremyRubin It sure would be handy to be able to incorporate this with `multiwalletrpc`, so that I can manually add trusted others to use my node but block them from accessing specific wallets. I am sorry my c++ is not good enough to submit a PR from scratch.. I am assuming it's not possible at the moment?",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-686497151,686497151,
JeremyRubin,2020-09-03T18:56:15Z,"I think general contributor opinion on rpc whitelists is that it shouldn't scope creep any further, but I agree a limitwallets flag would be pretty useful. I think luke does a lot of multiwallet stuff @luke-jr and might have an opinion as it does seem somewhat orthogonal. Luke what do you think of some sort of loadwalletforuser/limitwallet API?",https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-686695255,686695255,
luke-jr,2020-09-03T22:43:02Z,See also #10615 (included in Knots),https://github.com/bitcoin/bitcoin/pull/12763#issuecomment-686800598,686800598,
kallewoof,2018-03-23T08:29:59Z,"This behavior may be fine, but this will silently turn `""foo""` into `strUser == strWhitelist == ""foo""`.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176665494,176665494,src/httprpc.cpp
promag,2018-03-23T15:47:58Z,"New error, should have a test.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176778422,176778422,src/httprpc.cpp
promag,2018-03-23T15:56:18Z,`rpc_whitelist`?,https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176781213,176781213,src/httprpc.cpp
promag,2018-03-23T15:56:52Z,"Agree, it should check for correct format.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176781409,176781409,src/httprpc.cpp
jonasschnelli,2018-03-25T13:50:34Z,Why has that to be here?,https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176941097,176941097,src/httprpc.h
jimpo,2018-03-26T03:00:07Z,I think the 403 Forbidden status is more appropriate. See https://stackoverflow.com/a/6937030.,https://github.com/bitcoin/bitcoin/pull/12763#discussion_r176970781,176970781,src/httprpc.cpp
JeremyRubin,2018-03-26T22:50:50Z,"Wasn't sure, was just trying to follow local style. Not sure that string or map need to be there either?",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177258950,177258950,src/httprpc.h
promag,2018-03-26T23:24:14Z,"None needs to be there. If you want to remove, do it in a different commit.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177264920,177264920,src/httprpc.h
kallewoof,2018-03-27T02:29:52Z,Should this maybe error on `==` case? It now silently ignores `nocolonvalue`s.,https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177290791,177290791,src/httprpc.cpp
eklitzke,2018-03-27T06:57:18Z,"You can split with a std::istream or std::getline, no need for boost::split here.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177324286,177324286,src/httprpc.cpp
JeremyRubin,2018-03-27T20:01:14Z,It actually doesn't silently ignore it -- it sets an empty whitelist.,https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177553866,177553866,src/httprpc.cpp
JeremyRubin,2018-03-27T20:05:18Z,"I'd prefer to leave boost::split -- this is an existing dependency throughout the codebase, at some point someone will likely clean them all up consistently with an addition to util.\n\n I'm happy to make such a PR if there is demand for it.",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r177554910,177554910,src/httprpc.cpp
MarcoFalke,2019-12-11T19:17:41Z,"In commit e49f644f965dac09f84a7c9b0bc2004add73783d:\n\nCould squash?",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r356785228,356785228,src/httprpc.h
MarcoFalke,2019-12-11T19:18:31Z,"style-nit in commit b411ae6500: `g_rpc_whitelist`, because it is a global",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r356785672,356785672,src/httprpc.cpp
MarcoFalke,2019-12-11T19:20:44Z,"in commit 320947281b:\n\nCould squash?",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r356786796,356786796,src/httprpc.cpp
MarcoFalke,2019-12-11T19:24:53Z,"in commit afe5f61a9d:\n\ncould squash?",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r356788797,356788797,src/httprpc.cpp
MarcoFalke,2019-12-11T19:39:48Z,"in commit 89d9922ce7:\n\nCould squash?",https://github.com/bitcoin/bitcoin/pull/12763#discussion_r356795985,356795985,src/init.cpp
