sipa,2014-11-23T11:35:29Z,utACK; nice!\n,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-64114916,64114916,
morcos,2014-11-24T18:04:18Z,"Sorry if I'm missing something, but why is it OK to remove the mapNextTx check?  Where is the duplicate check?  I ran a little test on this pull that sent a second transaction that reused an input, and the second tx was accepted to the memory pool and then caused an assertion to fail in mempool.check() at line 543 in txmempool.cpp.  \n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-64235886,64235886,
sipa,2014-11-24T18:11:10Z,"@morcos In that case there is something else wrong. The first patch would avoid exposing outputs already spent inside the mempool in the used coinsview, so the ""HaveInputs"" check should fail for transactions that spend such outputs.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-64236928,64236928,
morcos,2014-11-24T18:58:30Z,"I think the problem might be that in `CCoinsViewMemPool::GetCoins` ,  `mempool.pruneSpent` is only called on coins returned from the mempool.  But you can still return unpruned coins from the chain that have outputs spent by other transactions in the mempool.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-64244338,64244338,
sipa,2014-11-24T19:02:24Z,Nice catch!\n,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-64244921,64244921,
dgenr8,2014-11-30T21:11:20Z,"Is this salvageable?  If a `CCoinsView` is to be used for conflict checks, it would need to persist across successive incoming transactions.  As @morcos says, the commits do not accomplish this.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-65000476,65000476,
TheBlueMatt,2014-11-30T21:18:18Z,"Sure, just need to adapt GetCoins in CCoinsViewMemPool to call pruneSpent on non-mempool coins too, easy as pie :)\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-65000742,65000742,
dgenr8,2014-12-01T01:55:11Z,"You mean start using pcoinsTip so that it no longer represents the tip, but tip+mempool?\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-65012095,65012095,
TheBlueMatt,2014-12-21T02:10:51Z,"@dgenr8 No, like the middle commit I just pushed :p\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-67757517,67757517,
TheBlueMatt,2014-12-21T02:44:32Z,Also added a little mini-testcase to catch this case (and any simple mempool double-spend) just because :).\n,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-67758119,67758119,
dgenr8,2014-12-21T21:37:33Z,"@TheBlueMatt Ok. The mempool containing tx1 is the elusive ""persistence mechanism"" I was hung up on.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-67785826,67785826,
TheBlueMatt,2014-12-22T02:26:49Z,"@dgenr8 heh, thanks...hadnt realized this failed :)\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-67796088,67796088,
laanwj,2015-03-20T11:18:54Z,@morcos has your comment been resolved here?\n,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-83988834,83988834,
morcos,2015-03-20T14:11:41Z,Yes that problem was fixed.  But my [comment](https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64681917) on the other PR still applies in that this changes behavior.  As far as I could find the only change is in rpcsignrawtransaction and preventing signing of double spends (now also when the inputs are in the chain) and maybe that's ok?   You can see this by switching the order of the `tx,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-84024167,84024167,
laanwj,2015-10-01T22:06:44Z,Any way forward on this? Or better to close for now?\n,https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-144862953,144862953,
TheBlueMatt,2015-10-10T00:41:35Z,"@laanwj I'm not sure what your question was? Was this reviewable on Nov 4? Yes, unless people rejected to the change described by @morcos (no one voiced any opinion either way, AFAIR). But, yes, this now needs rebase due to mempool changes. I'll try to get to that next week or so.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-147017627,147017627,
TheBlueMatt,2015-11-05T20:17:27Z,"I went ahead and rebased, in case anyone is interested in this, but the API change is maybe not great. Instead of being able to sign double-spends against unconfirmed txn freely, with this change you have to provide the inputs explicitly. Its not so hard to do, but maybe isnt such a nice API change.\n",https://github.com/bitcoin/bitcoin/pull/5347#issuecomment-154178488,154178488,
morcos,2015-03-20T14:12:19Z,"needs ""-relaypriority=0"" or to create the tx with a fee.\n",https://github.com/bitcoin/bitcoin/pull/5347#discussion_r26841835,26841835,qa/rpc-tests/mempool_reject_doublespend.py
TheBlueMatt,2015-03-26T10:57:06Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5347#discussion_r27203365,27203365,qa/rpc-tests/mempool_reject_doublespend.py
